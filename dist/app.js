'use strict';

var require$$0$6 = require('http');
var require$$1$7 = require('https');
var require$$1$6 = require('string_decoder');
var require$$0$5 = require('events');
var require$$4$3 = require('timers');
var require$$7 = require('url');
var path = require('path');
var fs = require('fs');
var require$$0$b = require('node:events');
var require$$2$4 = require('node:path');
var require$$0$7 = require('node:assert');
var require$$4$4 = require('node:net');
var require$$2$3 = require('node:http');
var require$$0$8 = require('node:stream');
var require$$0$9 = require('node:buffer');
var require$$0$a = require('node:util');
var require$$7$1 = require('node:querystring');
var require$$0$c = require('node:diagnostics_channel');
var require$$4$5 = require('node:tls');
var require$$1$8 = require('node:zlib');
var require$$5$4 = require('node:perf_hooks');
var require$$8 = require('node:util/types');
var require$$1$9 = require('node:url');
var require$$5$5 = require('node:async_hooks');
var require$$1$a = require('node:console');
var require$$5$6 = require('node:worker_threads');
var require$$0$d = require('node:process');
var require$$0$e = require('node:timers');
var require$$1$b = require('node:fs/promises');
var require$$0$i = require('worker_threads');
var require$$0$g = require('buffer');
var require$$6 = require('timers/promises');
var require$$8$1 = require('util');
var require$$0$f = require('zlib');
var require$$3$3 = require('net');
var require$$4$6 = require('tls');
var require$$1$c = require('crypto');
var require$$0$h = require('stream');
var require$$15 = require('process');
var require$$4$7 = require('node:timers/promises');
var require$$9 = require('node:child_process');
var require$$1$d = require('node:fs');

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function getAugmentedNamespace(n) {
  if (n.__esModule) return n;
  var f = n.default;
	if (typeof f == "function") {
		var a = function a () {
			if (this instanceof a) {
        return Reflect.construct(f, arguments, this.constructor);
			}
			return f.apply(this, arguments);
		};
		a.prototype = f.prototype;
  } else a = {};
  Object.defineProperty(a, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

var xml2js = {};

var defaults = {};

var hasRequiredDefaults;

function requireDefaults () {
	if (hasRequiredDefaults) return defaults;
	hasRequiredDefaults = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  defaults.defaults = {
	    "0.1": {
	      explicitCharkey: false,
	      trim: true,
	      normalize: true,
	      normalizeTags: false,
	      attrkey: "@",
	      charkey: "#",
	      explicitArray: false,
	      ignoreAttrs: false,
	      mergeAttrs: false,
	      explicitRoot: false,
	      validator: null,
	      xmlns: false,
	      explicitChildren: false,
	      childkey: '@@',
	      charsAsChildren: false,
	      includeWhiteChars: false,
	      async: false,
	      strict: true,
	      attrNameProcessors: null,
	      attrValueProcessors: null,
	      tagNameProcessors: null,
	      valueProcessors: null,
	      emptyTag: ''
	    },
	    "0.2": {
	      explicitCharkey: false,
	      trim: false,
	      normalize: false,
	      normalizeTags: false,
	      attrkey: "$",
	      charkey: "_",
	      explicitArray: true,
	      ignoreAttrs: false,
	      mergeAttrs: false,
	      explicitRoot: true,
	      validator: null,
	      xmlns: false,
	      explicitChildren: false,
	      preserveChildrenOrder: false,
	      childkey: '$$',
	      charsAsChildren: false,
	      includeWhiteChars: false,
	      async: false,
	      strict: true,
	      attrNameProcessors: null,
	      attrValueProcessors: null,
	      tagNameProcessors: null,
	      valueProcessors: null,
	      rootName: 'root',
	      xmldec: {
	        'version': '1.0',
	        'encoding': 'UTF-8',
	        'standalone': true
	      },
	      doctype: null,
	      renderOpts: {
	        'pretty': true,
	        'indent': '  ',
	        'newline': '\n'
	      },
	      headless: false,
	      chunkSize: 10000,
	      emptyTag: '',
	      cdata: false
	    }
	  };

	}).call(defaults);
	return defaults;
}

var builder = {};

var lib$1 = {};

var Utility = {};

var hasRequiredUtility;

function requireUtility () {
	if (hasRequiredUtility) return Utility;
	hasRequiredUtility = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var assign, getValue, isArray, isEmpty, isFunction, isObject, isPlainObject,
	    slice = [].slice,
	    hasProp = {}.hasOwnProperty;

	  assign = function() {
	    var i, key, len, source, sources, target;
	    target = arguments[0], sources = 2 <= arguments.length ? slice.call(arguments, 1) : [];
	    if (isFunction(Object.assign)) {
	      Object.assign.apply(null, arguments);
	    } else {
	      for (i = 0, len = sources.length; i < len; i++) {
	        source = sources[i];
	        if (source != null) {
	          for (key in source) {
	            if (!hasProp.call(source, key)) continue;
	            target[key] = source[key];
	          }
	        }
	      }
	    }
	    return target;
	  };

	  isFunction = function(val) {
	    return !!val && Object.prototype.toString.call(val) === '[object Function]';
	  };

	  isObject = function(val) {
	    var ref;
	    return !!val && ((ref = typeof val) === 'function' || ref === 'object');
	  };

	  isArray = function(val) {
	    if (isFunction(Array.isArray)) {
	      return Array.isArray(val);
	    } else {
	      return Object.prototype.toString.call(val) === '[object Array]';
	    }
	  };

	  isEmpty = function(val) {
	    var key;
	    if (isArray(val)) {
	      return !val.length;
	    } else {
	      for (key in val) {
	        if (!hasProp.call(val, key)) continue;
	        return false;
	      }
	      return true;
	    }
	  };

	  isPlainObject = function(val) {
	    var ctor, proto;
	    return isObject(val) && (proto = Object.getPrototypeOf(val)) && (ctor = proto.constructor) && (typeof ctor === 'function') && (ctor instanceof ctor) && (Function.prototype.toString.call(ctor) === Function.prototype.toString.call(Object));
	  };

	  getValue = function(obj) {
	    if (isFunction(obj.valueOf)) {
	      return obj.valueOf();
	    } else {
	      return obj;
	    }
	  };

	  Utility.assign = assign;

	  Utility.isFunction = isFunction;

	  Utility.isObject = isObject;

	  Utility.isArray = isArray;

	  Utility.isEmpty = isEmpty;

	  Utility.isPlainObject = isPlainObject;

	  Utility.getValue = getValue;

	}).call(Utility);
	return Utility;
}

var XMLDOMImplementation$1 = {exports: {}};

var XMLDOMImplementation = XMLDOMImplementation$1.exports;

var hasRequiredXMLDOMImplementation;

function requireXMLDOMImplementation () {
	if (hasRequiredXMLDOMImplementation) return XMLDOMImplementation$1.exports;
	hasRequiredXMLDOMImplementation = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {

	  XMLDOMImplementation$1.exports = (function() {
	    function XMLDOMImplementation() {}

	    XMLDOMImplementation.prototype.hasFeature = function(feature, version) {
	      return true;
	    };

	    XMLDOMImplementation.prototype.createDocumentType = function(qualifiedName, publicId, systemId) {
	      throw new Error("This DOM method is not implemented.");
	    };

	    XMLDOMImplementation.prototype.createDocument = function(namespaceURI, qualifiedName, doctype) {
	      throw new Error("This DOM method is not implemented.");
	    };

	    XMLDOMImplementation.prototype.createHTMLDocument = function(title) {
	      throw new Error("This DOM method is not implemented.");
	    };

	    XMLDOMImplementation.prototype.getFeature = function(feature, version) {
	      throw new Error("This DOM method is not implemented.");
	    };

	    return XMLDOMImplementation;

	  })();

	}).call(XMLDOMImplementation);
	return XMLDOMImplementation$1.exports;
}

var XMLDocument$1 = {exports: {}};

var XMLDOMConfiguration$1 = {exports: {}};

var XMLDOMErrorHandler$1 = {exports: {}};

var XMLDOMErrorHandler = XMLDOMErrorHandler$1.exports;

var hasRequiredXMLDOMErrorHandler;

function requireXMLDOMErrorHandler () {
	if (hasRequiredXMLDOMErrorHandler) return XMLDOMErrorHandler$1.exports;
	hasRequiredXMLDOMErrorHandler = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {

	  XMLDOMErrorHandler$1.exports = (function() {
	    function XMLDOMErrorHandler() {}

	    XMLDOMErrorHandler.prototype.handleError = function(error) {
	      throw new Error(error);
	    };

	    return XMLDOMErrorHandler;

	  })();

	}).call(XMLDOMErrorHandler);
	return XMLDOMErrorHandler$1.exports;
}

var XMLDOMStringList$1 = {exports: {}};

var XMLDOMStringList = XMLDOMStringList$1.exports;

var hasRequiredXMLDOMStringList;

function requireXMLDOMStringList () {
	if (hasRequiredXMLDOMStringList) return XMLDOMStringList$1.exports;
	hasRequiredXMLDOMStringList = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {

	  XMLDOMStringList$1.exports = (function() {
	    function XMLDOMStringList(arr) {
	      this.arr = arr || [];
	    }

	    Object.defineProperty(XMLDOMStringList.prototype, 'length', {
	      get: function() {
	        return this.arr.length;
	      }
	    });

	    XMLDOMStringList.prototype.item = function(index) {
	      return this.arr[index] || null;
	    };

	    XMLDOMStringList.prototype.contains = function(str) {
	      return this.arr.indexOf(str) !== -1;
	    };

	    return XMLDOMStringList;

	  })();

	}).call(XMLDOMStringList);
	return XMLDOMStringList$1.exports;
}

var XMLDOMConfiguration = XMLDOMConfiguration$1.exports;

var hasRequiredXMLDOMConfiguration;

function requireXMLDOMConfiguration () {
	if (hasRequiredXMLDOMConfiguration) return XMLDOMConfiguration$1.exports;
	hasRequiredXMLDOMConfiguration = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var XMLDOMErrorHandler, XMLDOMStringList;

	  XMLDOMErrorHandler = requireXMLDOMErrorHandler();

	  XMLDOMStringList = requireXMLDOMStringList();

	  XMLDOMConfiguration$1.exports = (function() {
	    function XMLDOMConfiguration() {
	      this.defaultParams = {
	        "canonical-form": false,
	        "cdata-sections": false,
	        "comments": false,
	        "datatype-normalization": false,
	        "element-content-whitespace": true,
	        "entities": true,
	        "error-handler": new XMLDOMErrorHandler(),
	        "infoset": true,
	        "validate-if-schema": false,
	        "namespaces": true,
	        "namespace-declarations": true,
	        "normalize-characters": false,
	        "schema-location": '',
	        "schema-type": '',
	        "split-cdata-sections": true,
	        "validate": false,
	        "well-formed": true
	      };
	      this.params = Object.create(this.defaultParams);
	    }

	    Object.defineProperty(XMLDOMConfiguration.prototype, 'parameterNames', {
	      get: function() {
	        return new XMLDOMStringList(Object.keys(this.defaultParams));
	      }
	    });

	    XMLDOMConfiguration.prototype.getParameter = function(name) {
	      if (this.params.hasOwnProperty(name)) {
	        return this.params[name];
	      } else {
	        return null;
	      }
	    };

	    XMLDOMConfiguration.prototype.canSetParameter = function(name, value) {
	      return true;
	    };

	    XMLDOMConfiguration.prototype.setParameter = function(name, value) {
	      if (value != null) {
	        return this.params[name] = value;
	      } else {
	        return delete this.params[name];
	      }
	    };

	    return XMLDOMConfiguration;

	  })();

	}).call(XMLDOMConfiguration);
	return XMLDOMConfiguration$1.exports;
}

var XMLNode$1 = {exports: {}};

var XMLElement$1 = {exports: {}};

var NodeType$1 = {exports: {}};

var NodeType = NodeType$1.exports;

var hasRequiredNodeType;

function requireNodeType () {
	if (hasRequiredNodeType) return NodeType$1.exports;
	hasRequiredNodeType = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  NodeType$1.exports = {
	    Element: 1,
	    Attribute: 2,
	    Text: 3,
	    CData: 4,
	    EntityReference: 5,
	    EntityDeclaration: 6,
	    ProcessingInstruction: 7,
	    Comment: 8,
	    Document: 9,
	    DocType: 10,
	    DocumentFragment: 11,
	    NotationDeclaration: 12,
	    Declaration: 201,
	    Raw: 202,
	    AttributeDeclaration: 203,
	    ElementDeclaration: 204,
	    Dummy: 205
	  };

	}).call(NodeType);
	return NodeType$1.exports;
}

var XMLAttribute$1 = {exports: {}};

var XMLAttribute = XMLAttribute$1.exports;

var hasRequiredXMLAttribute;

function requireXMLAttribute () {
	if (hasRequiredXMLAttribute) return XMLAttribute$1.exports;
	hasRequiredXMLAttribute = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType;

	  NodeType = requireNodeType();

	  requireXMLNode();

	  XMLAttribute$1.exports = (function() {
	    function XMLAttribute(parent, name, value) {
	      this.parent = parent;
	      if (this.parent) {
	        this.options = this.parent.options;
	        this.stringify = this.parent.stringify;
	      }
	      if (name == null) {
	        throw new Error("Missing attribute name. " + this.debugInfo(name));
	      }
	      this.name = this.stringify.name(name);
	      this.value = this.stringify.attValue(value);
	      this.type = NodeType.Attribute;
	      this.isId = false;
	      this.schemaTypeInfo = null;
	    }

	    Object.defineProperty(XMLAttribute.prototype, 'nodeType', {
	      get: function() {
	        return this.type;
	      }
	    });

	    Object.defineProperty(XMLAttribute.prototype, 'ownerElement', {
	      get: function() {
	        return this.parent;
	      }
	    });

	    Object.defineProperty(XMLAttribute.prototype, 'textContent', {
	      get: function() {
	        return this.value;
	      },
	      set: function(value) {
	        return this.value = value || '';
	      }
	    });

	    Object.defineProperty(XMLAttribute.prototype, 'namespaceURI', {
	      get: function() {
	        return '';
	      }
	    });

	    Object.defineProperty(XMLAttribute.prototype, 'prefix', {
	      get: function() {
	        return '';
	      }
	    });

	    Object.defineProperty(XMLAttribute.prototype, 'localName', {
	      get: function() {
	        return this.name;
	      }
	    });

	    Object.defineProperty(XMLAttribute.prototype, 'specified', {
	      get: function() {
	        return true;
	      }
	    });

	    XMLAttribute.prototype.clone = function() {
	      return Object.create(this);
	    };

	    XMLAttribute.prototype.toString = function(options) {
	      return this.options.writer.attribute(this, this.options.writer.filterOptions(options));
	    };

	    XMLAttribute.prototype.debugInfo = function(name) {
	      name = name || this.name;
	      if (name == null) {
	        return "parent: <" + this.parent.name + ">";
	      } else {
	        return "attribute: {" + name + "}, parent: <" + this.parent.name + ">";
	      }
	    };

	    XMLAttribute.prototype.isEqualNode = function(node) {
	      if (node.namespaceURI !== this.namespaceURI) {
	        return false;
	      }
	      if (node.prefix !== this.prefix) {
	        return false;
	      }
	      if (node.localName !== this.localName) {
	        return false;
	      }
	      if (node.value !== this.value) {
	        return false;
	      }
	      return true;
	    };

	    return XMLAttribute;

	  })();

	}).call(XMLAttribute);
	return XMLAttribute$1.exports;
}

var XMLNamedNodeMap$1 = {exports: {}};

var XMLNamedNodeMap = XMLNamedNodeMap$1.exports;

var hasRequiredXMLNamedNodeMap;

function requireXMLNamedNodeMap () {
	if (hasRequiredXMLNamedNodeMap) return XMLNamedNodeMap$1.exports;
	hasRequiredXMLNamedNodeMap = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {

	  XMLNamedNodeMap$1.exports = (function() {
	    function XMLNamedNodeMap(nodes) {
	      this.nodes = nodes;
	    }

	    Object.defineProperty(XMLNamedNodeMap.prototype, 'length', {
	      get: function() {
	        return Object.keys(this.nodes).length || 0;
	      }
	    });

	    XMLNamedNodeMap.prototype.clone = function() {
	      return this.nodes = null;
	    };

	    XMLNamedNodeMap.prototype.getNamedItem = function(name) {
	      return this.nodes[name];
	    };

	    XMLNamedNodeMap.prototype.setNamedItem = function(node) {
	      var oldNode;
	      oldNode = this.nodes[node.nodeName];
	      this.nodes[node.nodeName] = node;
	      return oldNode || null;
	    };

	    XMLNamedNodeMap.prototype.removeNamedItem = function(name) {
	      var oldNode;
	      oldNode = this.nodes[name];
	      delete this.nodes[name];
	      return oldNode || null;
	    };

	    XMLNamedNodeMap.prototype.item = function(index) {
	      return this.nodes[Object.keys(this.nodes)[index]] || null;
	    };

	    XMLNamedNodeMap.prototype.getNamedItemNS = function(namespaceURI, localName) {
	      throw new Error("This DOM method is not implemented.");
	    };

	    XMLNamedNodeMap.prototype.setNamedItemNS = function(node) {
	      throw new Error("This DOM method is not implemented.");
	    };

	    XMLNamedNodeMap.prototype.removeNamedItemNS = function(namespaceURI, localName) {
	      throw new Error("This DOM method is not implemented.");
	    };

	    return XMLNamedNodeMap;

	  })();

	}).call(XMLNamedNodeMap);
	return XMLNamedNodeMap$1.exports;
}

var XMLElement = XMLElement$1.exports;

var hasRequiredXMLElement;

function requireXMLElement () {
	if (hasRequiredXMLElement) return XMLElement$1.exports;
	hasRequiredXMLElement = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType, XMLAttribute, XMLNamedNodeMap, XMLNode, getValue, isFunction, isObject, ref,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  ref = requireUtility(), isObject = ref.isObject, isFunction = ref.isFunction, getValue = ref.getValue;

	  XMLNode = requireXMLNode();

	  NodeType = requireNodeType();

	  XMLAttribute = requireXMLAttribute();

	  XMLNamedNodeMap = requireXMLNamedNodeMap();

	  XMLElement$1.exports = (function(superClass) {
	    extend(XMLElement, superClass);

	    function XMLElement(parent, name, attributes) {
	      var child, j, len, ref1;
	      XMLElement.__super__.constructor.call(this, parent);
	      if (name == null) {
	        throw new Error("Missing element name. " + this.debugInfo());
	      }
	      this.name = this.stringify.name(name);
	      this.type = NodeType.Element;
	      this.attribs = {};
	      this.schemaTypeInfo = null;
	      if (attributes != null) {
	        this.attribute(attributes);
	      }
	      if (parent.type === NodeType.Document) {
	        this.isRoot = true;
	        this.documentObject = parent;
	        parent.rootObject = this;
	        if (parent.children) {
	          ref1 = parent.children;
	          for (j = 0, len = ref1.length; j < len; j++) {
	            child = ref1[j];
	            if (child.type === NodeType.DocType) {
	              child.name = this.name;
	              break;
	            }
	          }
	        }
	      }
	    }

	    Object.defineProperty(XMLElement.prototype, 'tagName', {
	      get: function() {
	        return this.name;
	      }
	    });

	    Object.defineProperty(XMLElement.prototype, 'namespaceURI', {
	      get: function() {
	        return '';
	      }
	    });

	    Object.defineProperty(XMLElement.prototype, 'prefix', {
	      get: function() {
	        return '';
	      }
	    });

	    Object.defineProperty(XMLElement.prototype, 'localName', {
	      get: function() {
	        return this.name;
	      }
	    });

	    Object.defineProperty(XMLElement.prototype, 'id', {
	      get: function() {
	        throw new Error("This DOM method is not implemented." + this.debugInfo());
	      }
	    });

	    Object.defineProperty(XMLElement.prototype, 'className', {
	      get: function() {
	        throw new Error("This DOM method is not implemented." + this.debugInfo());
	      }
	    });

	    Object.defineProperty(XMLElement.prototype, 'classList', {
	      get: function() {
	        throw new Error("This DOM method is not implemented." + this.debugInfo());
	      }
	    });

	    Object.defineProperty(XMLElement.prototype, 'attributes', {
	      get: function() {
	        if (!this.attributeMap || !this.attributeMap.nodes) {
	          this.attributeMap = new XMLNamedNodeMap(this.attribs);
	        }
	        return this.attributeMap;
	      }
	    });

	    XMLElement.prototype.clone = function() {
	      var att, attName, clonedSelf, ref1;
	      clonedSelf = Object.create(this);
	      if (clonedSelf.isRoot) {
	        clonedSelf.documentObject = null;
	      }
	      clonedSelf.attribs = {};
	      ref1 = this.attribs;
	      for (attName in ref1) {
	        if (!hasProp.call(ref1, attName)) continue;
	        att = ref1[attName];
	        clonedSelf.attribs[attName] = att.clone();
	      }
	      clonedSelf.children = [];
	      this.children.forEach(function(child) {
	        var clonedChild;
	        clonedChild = child.clone();
	        clonedChild.parent = clonedSelf;
	        return clonedSelf.children.push(clonedChild);
	      });
	      return clonedSelf;
	    };

	    XMLElement.prototype.attribute = function(name, value) {
	      var attName, attValue;
	      if (name != null) {
	        name = getValue(name);
	      }
	      if (isObject(name)) {
	        for (attName in name) {
	          if (!hasProp.call(name, attName)) continue;
	          attValue = name[attName];
	          this.attribute(attName, attValue);
	        }
	      } else {
	        if (isFunction(value)) {
	          value = value.apply();
	        }
	        if (this.options.keepNullAttributes && (value == null)) {
	          this.attribs[name] = new XMLAttribute(this, name, "");
	        } else if (value != null) {
	          this.attribs[name] = new XMLAttribute(this, name, value);
	        }
	      }
	      return this;
	    };

	    XMLElement.prototype.removeAttribute = function(name) {
	      var attName, j, len;
	      if (name == null) {
	        throw new Error("Missing attribute name. " + this.debugInfo());
	      }
	      name = getValue(name);
	      if (Array.isArray(name)) {
	        for (j = 0, len = name.length; j < len; j++) {
	          attName = name[j];
	          delete this.attribs[attName];
	        }
	      } else {
	        delete this.attribs[name];
	      }
	      return this;
	    };

	    XMLElement.prototype.toString = function(options) {
	      return this.options.writer.element(this, this.options.writer.filterOptions(options));
	    };

	    XMLElement.prototype.att = function(name, value) {
	      return this.attribute(name, value);
	    };

	    XMLElement.prototype.a = function(name, value) {
	      return this.attribute(name, value);
	    };

	    XMLElement.prototype.getAttribute = function(name) {
	      if (this.attribs.hasOwnProperty(name)) {
	        return this.attribs[name].value;
	      } else {
	        return null;
	      }
	    };

	    XMLElement.prototype.setAttribute = function(name, value) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLElement.prototype.getAttributeNode = function(name) {
	      if (this.attribs.hasOwnProperty(name)) {
	        return this.attribs[name];
	      } else {
	        return null;
	      }
	    };

	    XMLElement.prototype.setAttributeNode = function(newAttr) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLElement.prototype.removeAttributeNode = function(oldAttr) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLElement.prototype.getElementsByTagName = function(name) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLElement.prototype.getAttributeNS = function(namespaceURI, localName) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLElement.prototype.setAttributeNS = function(namespaceURI, qualifiedName, value) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLElement.prototype.removeAttributeNS = function(namespaceURI, localName) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLElement.prototype.getAttributeNodeNS = function(namespaceURI, localName) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLElement.prototype.setAttributeNodeNS = function(newAttr) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLElement.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLElement.prototype.hasAttribute = function(name) {
	      return this.attribs.hasOwnProperty(name);
	    };

	    XMLElement.prototype.hasAttributeNS = function(namespaceURI, localName) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLElement.prototype.setIdAttribute = function(name, isId) {
	      if (this.attribs.hasOwnProperty(name)) {
	        return this.attribs[name].isId;
	      } else {
	        return isId;
	      }
	    };

	    XMLElement.prototype.setIdAttributeNS = function(namespaceURI, localName, isId) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLElement.prototype.setIdAttributeNode = function(idAttr, isId) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLElement.prototype.getElementsByTagName = function(tagname) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLElement.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLElement.prototype.getElementsByClassName = function(classNames) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLElement.prototype.isEqualNode = function(node) {
	      var i, j, ref1;
	      if (!XMLElement.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {
	        return false;
	      }
	      if (node.namespaceURI !== this.namespaceURI) {
	        return false;
	      }
	      if (node.prefix !== this.prefix) {
	        return false;
	      }
	      if (node.localName !== this.localName) {
	        return false;
	      }
	      if (node.attribs.length !== this.attribs.length) {
	        return false;
	      }
	      for (i = j = 0, ref1 = this.attribs.length - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; i = 0 <= ref1 ? ++j : --j) {
	        if (!this.attribs[i].isEqualNode(node.attribs[i])) {
	          return false;
	        }
	      }
	      return true;
	    };

	    return XMLElement;

	  })(XMLNode);

	}).call(XMLElement);
	return XMLElement$1.exports;
}

var XMLCData$1 = {exports: {}};

var XMLCharacterData$1 = {exports: {}};

var XMLCharacterData = XMLCharacterData$1.exports;

var hasRequiredXMLCharacterData;

function requireXMLCharacterData () {
	if (hasRequiredXMLCharacterData) return XMLCharacterData$1.exports;
	hasRequiredXMLCharacterData = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var XMLNode,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  XMLNode = requireXMLNode();

	  XMLCharacterData$1.exports = (function(superClass) {
	    extend(XMLCharacterData, superClass);

	    function XMLCharacterData(parent) {
	      XMLCharacterData.__super__.constructor.call(this, parent);
	      this.value = '';
	    }

	    Object.defineProperty(XMLCharacterData.prototype, 'data', {
	      get: function() {
	        return this.value;
	      },
	      set: function(value) {
	        return this.value = value || '';
	      }
	    });

	    Object.defineProperty(XMLCharacterData.prototype, 'length', {
	      get: function() {
	        return this.value.length;
	      }
	    });

	    Object.defineProperty(XMLCharacterData.prototype, 'textContent', {
	      get: function() {
	        return this.value;
	      },
	      set: function(value) {
	        return this.value = value || '';
	      }
	    });

	    XMLCharacterData.prototype.clone = function() {
	      return Object.create(this);
	    };

	    XMLCharacterData.prototype.substringData = function(offset, count) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLCharacterData.prototype.appendData = function(arg) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLCharacterData.prototype.insertData = function(offset, arg) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLCharacterData.prototype.deleteData = function(offset, count) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLCharacterData.prototype.replaceData = function(offset, count, arg) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLCharacterData.prototype.isEqualNode = function(node) {
	      if (!XMLCharacterData.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {
	        return false;
	      }
	      if (node.data !== this.data) {
	        return false;
	      }
	      return true;
	    };

	    return XMLCharacterData;

	  })(XMLNode);

	}).call(XMLCharacterData);
	return XMLCharacterData$1.exports;
}

var XMLCData = XMLCData$1.exports;

var hasRequiredXMLCData;

function requireXMLCData () {
	if (hasRequiredXMLCData) return XMLCData$1.exports;
	hasRequiredXMLCData = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType, XMLCharacterData,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  NodeType = requireNodeType();

	  XMLCharacterData = requireXMLCharacterData();

	  XMLCData$1.exports = (function(superClass) {
	    extend(XMLCData, superClass);

	    function XMLCData(parent, text) {
	      XMLCData.__super__.constructor.call(this, parent);
	      if (text == null) {
	        throw new Error("Missing CDATA text. " + this.debugInfo());
	      }
	      this.name = "#cdata-section";
	      this.type = NodeType.CData;
	      this.value = this.stringify.cdata(text);
	    }

	    XMLCData.prototype.clone = function() {
	      return Object.create(this);
	    };

	    XMLCData.prototype.toString = function(options) {
	      return this.options.writer.cdata(this, this.options.writer.filterOptions(options));
	    };

	    return XMLCData;

	  })(XMLCharacterData);

	}).call(XMLCData);
	return XMLCData$1.exports;
}

var XMLComment$1 = {exports: {}};

var XMLComment = XMLComment$1.exports;

var hasRequiredXMLComment;

function requireXMLComment () {
	if (hasRequiredXMLComment) return XMLComment$1.exports;
	hasRequiredXMLComment = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType, XMLCharacterData, extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  NodeType = requireNodeType();

	  XMLCharacterData = requireXMLCharacterData();

	  XMLComment$1.exports = (function(superClass) {
	    extend(XMLComment, superClass);

	    function XMLComment(parent, text) {
	      XMLComment.__super__.constructor.call(this, parent);
	      if (text == null) {
	        throw new Error("Missing comment text. " + this.debugInfo());
	      }
	      this.name = "#comment";
	      this.type = NodeType.Comment;
	      this.value = this.stringify.comment(text);
	    }

	    XMLComment.prototype.clone = function() {
	      return Object.create(this);
	    };

	    XMLComment.prototype.toString = function(options) {
	      return this.options.writer.comment(this, this.options.writer.filterOptions(options));
	    };

	    return XMLComment;

	  })(XMLCharacterData);

	}).call(XMLComment);
	return XMLComment$1.exports;
}

var XMLDeclaration$1 = {exports: {}};

var XMLDeclaration = XMLDeclaration$1.exports;

var hasRequiredXMLDeclaration;

function requireXMLDeclaration () {
	if (hasRequiredXMLDeclaration) return XMLDeclaration$1.exports;
	hasRequiredXMLDeclaration = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType, XMLNode, isObject,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  isObject = requireUtility().isObject;

	  XMLNode = requireXMLNode();

	  NodeType = requireNodeType();

	  XMLDeclaration$1.exports = (function(superClass) {
	    extend(XMLDeclaration, superClass);

	    function XMLDeclaration(parent, version, encoding, standalone) {
	      var ref;
	      XMLDeclaration.__super__.constructor.call(this, parent);
	      if (isObject(version)) {
	        ref = version, version = ref.version, encoding = ref.encoding, standalone = ref.standalone;
	      }
	      if (!version) {
	        version = '1.0';
	      }
	      this.type = NodeType.Declaration;
	      this.version = this.stringify.xmlVersion(version);
	      if (encoding != null) {
	        this.encoding = this.stringify.xmlEncoding(encoding);
	      }
	      if (standalone != null) {
	        this.standalone = this.stringify.xmlStandalone(standalone);
	      }
	    }

	    XMLDeclaration.prototype.toString = function(options) {
	      return this.options.writer.declaration(this, this.options.writer.filterOptions(options));
	    };

	    return XMLDeclaration;

	  })(XMLNode);

	}).call(XMLDeclaration);
	return XMLDeclaration$1.exports;
}

var XMLDocType$1 = {exports: {}};

var XMLDTDAttList$1 = {exports: {}};

var XMLDTDAttList = XMLDTDAttList$1.exports;

var hasRequiredXMLDTDAttList;

function requireXMLDTDAttList () {
	if (hasRequiredXMLDTDAttList) return XMLDTDAttList$1.exports;
	hasRequiredXMLDTDAttList = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType, XMLNode,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  XMLNode = requireXMLNode();

	  NodeType = requireNodeType();

	  XMLDTDAttList$1.exports = (function(superClass) {
	    extend(XMLDTDAttList, superClass);

	    function XMLDTDAttList(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {
	      XMLDTDAttList.__super__.constructor.call(this, parent);
	      if (elementName == null) {
	        throw new Error("Missing DTD element name. " + this.debugInfo());
	      }
	      if (attributeName == null) {
	        throw new Error("Missing DTD attribute name. " + this.debugInfo(elementName));
	      }
	      if (!attributeType) {
	        throw new Error("Missing DTD attribute type. " + this.debugInfo(elementName));
	      }
	      if (!defaultValueType) {
	        throw new Error("Missing DTD attribute default. " + this.debugInfo(elementName));
	      }
	      if (defaultValueType.indexOf('#') !== 0) {
	        defaultValueType = '#' + defaultValueType;
	      }
	      if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {
	        throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. " + this.debugInfo(elementName));
	      }
	      if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {
	        throw new Error("Default value only applies to #FIXED or #DEFAULT. " + this.debugInfo(elementName));
	      }
	      this.elementName = this.stringify.name(elementName);
	      this.type = NodeType.AttributeDeclaration;
	      this.attributeName = this.stringify.name(attributeName);
	      this.attributeType = this.stringify.dtdAttType(attributeType);
	      if (defaultValue) {
	        this.defaultValue = this.stringify.dtdAttDefault(defaultValue);
	      }
	      this.defaultValueType = defaultValueType;
	    }

	    XMLDTDAttList.prototype.toString = function(options) {
	      return this.options.writer.dtdAttList(this, this.options.writer.filterOptions(options));
	    };

	    return XMLDTDAttList;

	  })(XMLNode);

	}).call(XMLDTDAttList);
	return XMLDTDAttList$1.exports;
}

var XMLDTDEntity$1 = {exports: {}};

var XMLDTDEntity = XMLDTDEntity$1.exports;

var hasRequiredXMLDTDEntity;

function requireXMLDTDEntity () {
	if (hasRequiredXMLDTDEntity) return XMLDTDEntity$1.exports;
	hasRequiredXMLDTDEntity = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType, XMLNode, isObject,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  isObject = requireUtility().isObject;

	  XMLNode = requireXMLNode();

	  NodeType = requireNodeType();

	  XMLDTDEntity$1.exports = (function(superClass) {
	    extend(XMLDTDEntity, superClass);

	    function XMLDTDEntity(parent, pe, name, value) {
	      XMLDTDEntity.__super__.constructor.call(this, parent);
	      if (name == null) {
	        throw new Error("Missing DTD entity name. " + this.debugInfo(name));
	      }
	      if (value == null) {
	        throw new Error("Missing DTD entity value. " + this.debugInfo(name));
	      }
	      this.pe = !!pe;
	      this.name = this.stringify.name(name);
	      this.type = NodeType.EntityDeclaration;
	      if (!isObject(value)) {
	        this.value = this.stringify.dtdEntityValue(value);
	        this.internal = true;
	      } else {
	        if (!value.pubID && !value.sysID) {
	          throw new Error("Public and/or system identifiers are required for an external entity. " + this.debugInfo(name));
	        }
	        if (value.pubID && !value.sysID) {
	          throw new Error("System identifier is required for a public external entity. " + this.debugInfo(name));
	        }
	        this.internal = false;
	        if (value.pubID != null) {
	          this.pubID = this.stringify.dtdPubID(value.pubID);
	        }
	        if (value.sysID != null) {
	          this.sysID = this.stringify.dtdSysID(value.sysID);
	        }
	        if (value.nData != null) {
	          this.nData = this.stringify.dtdNData(value.nData);
	        }
	        if (this.pe && this.nData) {
	          throw new Error("Notation declaration is not allowed in a parameter entity. " + this.debugInfo(name));
	        }
	      }
	    }

	    Object.defineProperty(XMLDTDEntity.prototype, 'publicId', {
	      get: function() {
	        return this.pubID;
	      }
	    });

	    Object.defineProperty(XMLDTDEntity.prototype, 'systemId', {
	      get: function() {
	        return this.sysID;
	      }
	    });

	    Object.defineProperty(XMLDTDEntity.prototype, 'notationName', {
	      get: function() {
	        return this.nData || null;
	      }
	    });

	    Object.defineProperty(XMLDTDEntity.prototype, 'inputEncoding', {
	      get: function() {
	        return null;
	      }
	    });

	    Object.defineProperty(XMLDTDEntity.prototype, 'xmlEncoding', {
	      get: function() {
	        return null;
	      }
	    });

	    Object.defineProperty(XMLDTDEntity.prototype, 'xmlVersion', {
	      get: function() {
	        return null;
	      }
	    });

	    XMLDTDEntity.prototype.toString = function(options) {
	      return this.options.writer.dtdEntity(this, this.options.writer.filterOptions(options));
	    };

	    return XMLDTDEntity;

	  })(XMLNode);

	}).call(XMLDTDEntity);
	return XMLDTDEntity$1.exports;
}

var XMLDTDElement$1 = {exports: {}};

var XMLDTDElement = XMLDTDElement$1.exports;

var hasRequiredXMLDTDElement;

function requireXMLDTDElement () {
	if (hasRequiredXMLDTDElement) return XMLDTDElement$1.exports;
	hasRequiredXMLDTDElement = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType, XMLNode,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  XMLNode = requireXMLNode();

	  NodeType = requireNodeType();

	  XMLDTDElement$1.exports = (function(superClass) {
	    extend(XMLDTDElement, superClass);

	    function XMLDTDElement(parent, name, value) {
	      XMLDTDElement.__super__.constructor.call(this, parent);
	      if (name == null) {
	        throw new Error("Missing DTD element name. " + this.debugInfo());
	      }
	      if (!value) {
	        value = '(#PCDATA)';
	      }
	      if (Array.isArray(value)) {
	        value = '(' + value.join(',') + ')';
	      }
	      this.name = this.stringify.name(name);
	      this.type = NodeType.ElementDeclaration;
	      this.value = this.stringify.dtdElementValue(value);
	    }

	    XMLDTDElement.prototype.toString = function(options) {
	      return this.options.writer.dtdElement(this, this.options.writer.filterOptions(options));
	    };

	    return XMLDTDElement;

	  })(XMLNode);

	}).call(XMLDTDElement);
	return XMLDTDElement$1.exports;
}

var XMLDTDNotation$1 = {exports: {}};

var XMLDTDNotation = XMLDTDNotation$1.exports;

var hasRequiredXMLDTDNotation;

function requireXMLDTDNotation () {
	if (hasRequiredXMLDTDNotation) return XMLDTDNotation$1.exports;
	hasRequiredXMLDTDNotation = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType, XMLNode,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  XMLNode = requireXMLNode();

	  NodeType = requireNodeType();

	  XMLDTDNotation$1.exports = (function(superClass) {
	    extend(XMLDTDNotation, superClass);

	    function XMLDTDNotation(parent, name, value) {
	      XMLDTDNotation.__super__.constructor.call(this, parent);
	      if (name == null) {
	        throw new Error("Missing DTD notation name. " + this.debugInfo(name));
	      }
	      if (!value.pubID && !value.sysID) {
	        throw new Error("Public or system identifiers are required for an external entity. " + this.debugInfo(name));
	      }
	      this.name = this.stringify.name(name);
	      this.type = NodeType.NotationDeclaration;
	      if (value.pubID != null) {
	        this.pubID = this.stringify.dtdPubID(value.pubID);
	      }
	      if (value.sysID != null) {
	        this.sysID = this.stringify.dtdSysID(value.sysID);
	      }
	    }

	    Object.defineProperty(XMLDTDNotation.prototype, 'publicId', {
	      get: function() {
	        return this.pubID;
	      }
	    });

	    Object.defineProperty(XMLDTDNotation.prototype, 'systemId', {
	      get: function() {
	        return this.sysID;
	      }
	    });

	    XMLDTDNotation.prototype.toString = function(options) {
	      return this.options.writer.dtdNotation(this, this.options.writer.filterOptions(options));
	    };

	    return XMLDTDNotation;

	  })(XMLNode);

	}).call(XMLDTDNotation);
	return XMLDTDNotation$1.exports;
}

var XMLDocType = XMLDocType$1.exports;

var hasRequiredXMLDocType;

function requireXMLDocType () {
	if (hasRequiredXMLDocType) return XMLDocType$1.exports;
	hasRequiredXMLDocType = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLNamedNodeMap, XMLNode, isObject,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  isObject = requireUtility().isObject;

	  XMLNode = requireXMLNode();

	  NodeType = requireNodeType();

	  XMLDTDAttList = requireXMLDTDAttList();

	  XMLDTDEntity = requireXMLDTDEntity();

	  XMLDTDElement = requireXMLDTDElement();

	  XMLDTDNotation = requireXMLDTDNotation();

	  XMLNamedNodeMap = requireXMLNamedNodeMap();

	  XMLDocType$1.exports = (function(superClass) {
	    extend(XMLDocType, superClass);

	    function XMLDocType(parent, pubID, sysID) {
	      var child, i, len, ref, ref1, ref2;
	      XMLDocType.__super__.constructor.call(this, parent);
	      this.type = NodeType.DocType;
	      if (parent.children) {
	        ref = parent.children;
	        for (i = 0, len = ref.length; i < len; i++) {
	          child = ref[i];
	          if (child.type === NodeType.Element) {
	            this.name = child.name;
	            break;
	          }
	        }
	      }
	      this.documentObject = parent;
	      if (isObject(pubID)) {
	        ref1 = pubID, pubID = ref1.pubID, sysID = ref1.sysID;
	      }
	      if (sysID == null) {
	        ref2 = [pubID, sysID], sysID = ref2[0], pubID = ref2[1];
	      }
	      if (pubID != null) {
	        this.pubID = this.stringify.dtdPubID(pubID);
	      }
	      if (sysID != null) {
	        this.sysID = this.stringify.dtdSysID(sysID);
	      }
	    }

	    Object.defineProperty(XMLDocType.prototype, 'entities', {
	      get: function() {
	        var child, i, len, nodes, ref;
	        nodes = {};
	        ref = this.children;
	        for (i = 0, len = ref.length; i < len; i++) {
	          child = ref[i];
	          if ((child.type === NodeType.EntityDeclaration) && !child.pe) {
	            nodes[child.name] = child;
	          }
	        }
	        return new XMLNamedNodeMap(nodes);
	      }
	    });

	    Object.defineProperty(XMLDocType.prototype, 'notations', {
	      get: function() {
	        var child, i, len, nodes, ref;
	        nodes = {};
	        ref = this.children;
	        for (i = 0, len = ref.length; i < len; i++) {
	          child = ref[i];
	          if (child.type === NodeType.NotationDeclaration) {
	            nodes[child.name] = child;
	          }
	        }
	        return new XMLNamedNodeMap(nodes);
	      }
	    });

	    Object.defineProperty(XMLDocType.prototype, 'publicId', {
	      get: function() {
	        return this.pubID;
	      }
	    });

	    Object.defineProperty(XMLDocType.prototype, 'systemId', {
	      get: function() {
	        return this.sysID;
	      }
	    });

	    Object.defineProperty(XMLDocType.prototype, 'internalSubset', {
	      get: function() {
	        throw new Error("This DOM method is not implemented." + this.debugInfo());
	      }
	    });

	    XMLDocType.prototype.element = function(name, value) {
	      var child;
	      child = new XMLDTDElement(this, name, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLDocType.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
	      var child;
	      child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
	      this.children.push(child);
	      return this;
	    };

	    XMLDocType.prototype.entity = function(name, value) {
	      var child;
	      child = new XMLDTDEntity(this, false, name, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLDocType.prototype.pEntity = function(name, value) {
	      var child;
	      child = new XMLDTDEntity(this, true, name, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLDocType.prototype.notation = function(name, value) {
	      var child;
	      child = new XMLDTDNotation(this, name, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLDocType.prototype.toString = function(options) {
	      return this.options.writer.docType(this, this.options.writer.filterOptions(options));
	    };

	    XMLDocType.prototype.ele = function(name, value) {
	      return this.element(name, value);
	    };

	    XMLDocType.prototype.att = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
	      return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);
	    };

	    XMLDocType.prototype.ent = function(name, value) {
	      return this.entity(name, value);
	    };

	    XMLDocType.prototype.pent = function(name, value) {
	      return this.pEntity(name, value);
	    };

	    XMLDocType.prototype.not = function(name, value) {
	      return this.notation(name, value);
	    };

	    XMLDocType.prototype.up = function() {
	      return this.root() || this.documentObject;
	    };

	    XMLDocType.prototype.isEqualNode = function(node) {
	      if (!XMLDocType.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {
	        return false;
	      }
	      if (node.name !== this.name) {
	        return false;
	      }
	      if (node.publicId !== this.publicId) {
	        return false;
	      }
	      if (node.systemId !== this.systemId) {
	        return false;
	      }
	      return true;
	    };

	    return XMLDocType;

	  })(XMLNode);

	}).call(XMLDocType);
	return XMLDocType$1.exports;
}

var XMLRaw$1 = {exports: {}};

var XMLRaw = XMLRaw$1.exports;

var hasRequiredXMLRaw;

function requireXMLRaw () {
	if (hasRequiredXMLRaw) return XMLRaw$1.exports;
	hasRequiredXMLRaw = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType, XMLNode, extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  NodeType = requireNodeType();

	  XMLNode = requireXMLNode();

	  XMLRaw$1.exports = (function(superClass) {
	    extend(XMLRaw, superClass);

	    function XMLRaw(parent, text) {
	      XMLRaw.__super__.constructor.call(this, parent);
	      if (text == null) {
	        throw new Error("Missing raw text. " + this.debugInfo());
	      }
	      this.type = NodeType.Raw;
	      this.value = this.stringify.raw(text);
	    }

	    XMLRaw.prototype.clone = function() {
	      return Object.create(this);
	    };

	    XMLRaw.prototype.toString = function(options) {
	      return this.options.writer.raw(this, this.options.writer.filterOptions(options));
	    };

	    return XMLRaw;

	  })(XMLNode);

	}).call(XMLRaw);
	return XMLRaw$1.exports;
}

var XMLText$1 = {exports: {}};

var XMLText = XMLText$1.exports;

var hasRequiredXMLText;

function requireXMLText () {
	if (hasRequiredXMLText) return XMLText$1.exports;
	hasRequiredXMLText = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType, XMLCharacterData, extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  NodeType = requireNodeType();

	  XMLCharacterData = requireXMLCharacterData();

	  XMLText$1.exports = (function(superClass) {
	    extend(XMLText, superClass);

	    function XMLText(parent, text) {
	      XMLText.__super__.constructor.call(this, parent);
	      if (text == null) {
	        throw new Error("Missing element text. " + this.debugInfo());
	      }
	      this.name = "#text";
	      this.type = NodeType.Text;
	      this.value = this.stringify.text(text);
	    }

	    Object.defineProperty(XMLText.prototype, 'isElementContentWhitespace', {
	      get: function() {
	        throw new Error("This DOM method is not implemented." + this.debugInfo());
	      }
	    });

	    Object.defineProperty(XMLText.prototype, 'wholeText', {
	      get: function() {
	        var next, prev, str;
	        str = '';
	        prev = this.previousSibling;
	        while (prev) {
	          str = prev.data + str;
	          prev = prev.previousSibling;
	        }
	        str += this.data;
	        next = this.nextSibling;
	        while (next) {
	          str = str + next.data;
	          next = next.nextSibling;
	        }
	        return str;
	      }
	    });

	    XMLText.prototype.clone = function() {
	      return Object.create(this);
	    };

	    XMLText.prototype.toString = function(options) {
	      return this.options.writer.text(this, this.options.writer.filterOptions(options));
	    };

	    XMLText.prototype.splitText = function(offset) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLText.prototype.replaceWholeText = function(content) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    return XMLText;

	  })(XMLCharacterData);

	}).call(XMLText);
	return XMLText$1.exports;
}

var XMLProcessingInstruction$1 = {exports: {}};

var XMLProcessingInstruction = XMLProcessingInstruction$1.exports;

var hasRequiredXMLProcessingInstruction;

function requireXMLProcessingInstruction () {
	if (hasRequiredXMLProcessingInstruction) return XMLProcessingInstruction$1.exports;
	hasRequiredXMLProcessingInstruction = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType, XMLCharacterData, extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  NodeType = requireNodeType();

	  XMLCharacterData = requireXMLCharacterData();

	  XMLProcessingInstruction$1.exports = (function(superClass) {
	    extend(XMLProcessingInstruction, superClass);

	    function XMLProcessingInstruction(parent, target, value) {
	      XMLProcessingInstruction.__super__.constructor.call(this, parent);
	      if (target == null) {
	        throw new Error("Missing instruction target. " + this.debugInfo());
	      }
	      this.type = NodeType.ProcessingInstruction;
	      this.target = this.stringify.insTarget(target);
	      this.name = this.target;
	      if (value) {
	        this.value = this.stringify.insValue(value);
	      }
	    }

	    XMLProcessingInstruction.prototype.clone = function() {
	      return Object.create(this);
	    };

	    XMLProcessingInstruction.prototype.toString = function(options) {
	      return this.options.writer.processingInstruction(this, this.options.writer.filterOptions(options));
	    };

	    XMLProcessingInstruction.prototype.isEqualNode = function(node) {
	      if (!XMLProcessingInstruction.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {
	        return false;
	      }
	      if (node.target !== this.target) {
	        return false;
	      }
	      return true;
	    };

	    return XMLProcessingInstruction;

	  })(XMLCharacterData);

	}).call(XMLProcessingInstruction);
	return XMLProcessingInstruction$1.exports;
}

var XMLDummy$1 = {exports: {}};

var XMLDummy = XMLDummy$1.exports;

var hasRequiredXMLDummy;

function requireXMLDummy () {
	if (hasRequiredXMLDummy) return XMLDummy$1.exports;
	hasRequiredXMLDummy = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType, XMLNode,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  XMLNode = requireXMLNode();

	  NodeType = requireNodeType();

	  XMLDummy$1.exports = (function(superClass) {
	    extend(XMLDummy, superClass);

	    function XMLDummy(parent) {
	      XMLDummy.__super__.constructor.call(this, parent);
	      this.type = NodeType.Dummy;
	    }

	    XMLDummy.prototype.clone = function() {
	      return Object.create(this);
	    };

	    XMLDummy.prototype.toString = function(options) {
	      return '';
	    };

	    return XMLDummy;

	  })(XMLNode);

	}).call(XMLDummy);
	return XMLDummy$1.exports;
}

var XMLNodeList$1 = {exports: {}};

var XMLNodeList = XMLNodeList$1.exports;

var hasRequiredXMLNodeList;

function requireXMLNodeList () {
	if (hasRequiredXMLNodeList) return XMLNodeList$1.exports;
	hasRequiredXMLNodeList = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {

	  XMLNodeList$1.exports = (function() {
	    function XMLNodeList(nodes) {
	      this.nodes = nodes;
	    }

	    Object.defineProperty(XMLNodeList.prototype, 'length', {
	      get: function() {
	        return this.nodes.length || 0;
	      }
	    });

	    XMLNodeList.prototype.clone = function() {
	      return this.nodes = null;
	    };

	    XMLNodeList.prototype.item = function(index) {
	      return this.nodes[index] || null;
	    };

	    return XMLNodeList;

	  })();

	}).call(XMLNodeList);
	return XMLNodeList$1.exports;
}

var DocumentPosition$1 = {exports: {}};

var DocumentPosition = DocumentPosition$1.exports;

var hasRequiredDocumentPosition;

function requireDocumentPosition () {
	if (hasRequiredDocumentPosition) return DocumentPosition$1.exports;
	hasRequiredDocumentPosition = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  DocumentPosition$1.exports = {
	    Disconnected: 1,
	    Preceding: 2,
	    Following: 4,
	    Contains: 8,
	    ContainedBy: 16,
	    ImplementationSpecific: 32
	  };

	}).call(DocumentPosition);
	return DocumentPosition$1.exports;
}

var XMLNode = XMLNode$1.exports;

var hasRequiredXMLNode;

function requireXMLNode () {
	if (hasRequiredXMLNode) return XMLNode$1.exports;
	hasRequiredXMLNode = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var DocumentPosition, NodeType, XMLCData, XMLComment, XMLDeclaration, XMLDocType, XMLDummy, XMLElement, XMLNodeList, XMLProcessingInstruction, XMLRaw, XMLText, getValue, isEmpty, isFunction, isObject, ref1,
	    hasProp = {}.hasOwnProperty;

	  ref1 = requireUtility(), isObject = ref1.isObject, isFunction = ref1.isFunction, isEmpty = ref1.isEmpty, getValue = ref1.getValue;

	  XMLElement = null;

	  XMLCData = null;

	  XMLComment = null;

	  XMLDeclaration = null;

	  XMLDocType = null;

	  XMLRaw = null;

	  XMLText = null;

	  XMLProcessingInstruction = null;

	  XMLDummy = null;

	  NodeType = null;

	  XMLNodeList = null;

	  DocumentPosition = null;

	  XMLNode$1.exports = (function() {
	    function XMLNode(parent1) {
	      this.parent = parent1;
	      if (this.parent) {
	        this.options = this.parent.options;
	        this.stringify = this.parent.stringify;
	      }
	      this.value = null;
	      this.children = [];
	      this.baseURI = null;
	      if (!XMLElement) {
	        XMLElement = requireXMLElement();
	        XMLCData = requireXMLCData();
	        XMLComment = requireXMLComment();
	        XMLDeclaration = requireXMLDeclaration();
	        XMLDocType = requireXMLDocType();
	        XMLRaw = requireXMLRaw();
	        XMLText = requireXMLText();
	        XMLProcessingInstruction = requireXMLProcessingInstruction();
	        XMLDummy = requireXMLDummy();
	        NodeType = requireNodeType();
	        XMLNodeList = requireXMLNodeList();
	        requireXMLNamedNodeMap();
	        DocumentPosition = requireDocumentPosition();
	      }
	    }

	    Object.defineProperty(XMLNode.prototype, 'nodeName', {
	      get: function() {
	        return this.name;
	      }
	    });

	    Object.defineProperty(XMLNode.prototype, 'nodeType', {
	      get: function() {
	        return this.type;
	      }
	    });

	    Object.defineProperty(XMLNode.prototype, 'nodeValue', {
	      get: function() {
	        return this.value;
	      }
	    });

	    Object.defineProperty(XMLNode.prototype, 'parentNode', {
	      get: function() {
	        return this.parent;
	      }
	    });

	    Object.defineProperty(XMLNode.prototype, 'childNodes', {
	      get: function() {
	        if (!this.childNodeList || !this.childNodeList.nodes) {
	          this.childNodeList = new XMLNodeList(this.children);
	        }
	        return this.childNodeList;
	      }
	    });

	    Object.defineProperty(XMLNode.prototype, 'firstChild', {
	      get: function() {
	        return this.children[0] || null;
	      }
	    });

	    Object.defineProperty(XMLNode.prototype, 'lastChild', {
	      get: function() {
	        return this.children[this.children.length - 1] || null;
	      }
	    });

	    Object.defineProperty(XMLNode.prototype, 'previousSibling', {
	      get: function() {
	        var i;
	        i = this.parent.children.indexOf(this);
	        return this.parent.children[i - 1] || null;
	      }
	    });

	    Object.defineProperty(XMLNode.prototype, 'nextSibling', {
	      get: function() {
	        var i;
	        i = this.parent.children.indexOf(this);
	        return this.parent.children[i + 1] || null;
	      }
	    });

	    Object.defineProperty(XMLNode.prototype, 'ownerDocument', {
	      get: function() {
	        return this.document() || null;
	      }
	    });

	    Object.defineProperty(XMLNode.prototype, 'textContent', {
	      get: function() {
	        var child, j, len, ref2, str;
	        if (this.nodeType === NodeType.Element || this.nodeType === NodeType.DocumentFragment) {
	          str = '';
	          ref2 = this.children;
	          for (j = 0, len = ref2.length; j < len; j++) {
	            child = ref2[j];
	            if (child.textContent) {
	              str += child.textContent;
	            }
	          }
	          return str;
	        } else {
	          return null;
	        }
	      },
	      set: function(value) {
	        throw new Error("This DOM method is not implemented." + this.debugInfo());
	      }
	    });

	    XMLNode.prototype.setParent = function(parent) {
	      var child, j, len, ref2, results;
	      this.parent = parent;
	      if (parent) {
	        this.options = parent.options;
	        this.stringify = parent.stringify;
	      }
	      ref2 = this.children;
	      results = [];
	      for (j = 0, len = ref2.length; j < len; j++) {
	        child = ref2[j];
	        results.push(child.setParent(this));
	      }
	      return results;
	    };

	    XMLNode.prototype.element = function(name, attributes, text) {
	      var childNode, item, j, k, key, lastChild, len, len1, ref2, ref3, val;
	      lastChild = null;
	      if (attributes === null && (text == null)) {
	        ref2 = [{}, null], attributes = ref2[0], text = ref2[1];
	      }
	      if (attributes == null) {
	        attributes = {};
	      }
	      attributes = getValue(attributes);
	      if (!isObject(attributes)) {
	        ref3 = [attributes, text], text = ref3[0], attributes = ref3[1];
	      }
	      if (name != null) {
	        name = getValue(name);
	      }
	      if (Array.isArray(name)) {
	        for (j = 0, len = name.length; j < len; j++) {
	          item = name[j];
	          lastChild = this.element(item);
	        }
	      } else if (isFunction(name)) {
	        lastChild = this.element(name.apply());
	      } else if (isObject(name)) {
	        for (key in name) {
	          if (!hasProp.call(name, key)) continue;
	          val = name[key];
	          if (isFunction(val)) {
	            val = val.apply();
	          }
	          if (!this.options.ignoreDecorators && this.stringify.convertAttKey && key.indexOf(this.stringify.convertAttKey) === 0) {
	            lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length), val);
	          } else if (!this.options.separateArrayItems && Array.isArray(val) && isEmpty(val)) {
	            lastChild = this.dummy();
	          } else if (isObject(val) && isEmpty(val)) {
	            lastChild = this.element(key);
	          } else if (!this.options.keepNullNodes && (val == null)) {
	            lastChild = this.dummy();
	          } else if (!this.options.separateArrayItems && Array.isArray(val)) {
	            for (k = 0, len1 = val.length; k < len1; k++) {
	              item = val[k];
	              childNode = {};
	              childNode[key] = item;
	              lastChild = this.element(childNode);
	            }
	          } else if (isObject(val)) {
	            if (!this.options.ignoreDecorators && this.stringify.convertTextKey && key.indexOf(this.stringify.convertTextKey) === 0) {
	              lastChild = this.element(val);
	            } else {
	              lastChild = this.element(key);
	              lastChild.element(val);
	            }
	          } else {
	            lastChild = this.element(key, val);
	          }
	        }
	      } else if (!this.options.keepNullNodes && text === null) {
	        lastChild = this.dummy();
	      } else {
	        if (!this.options.ignoreDecorators && this.stringify.convertTextKey && name.indexOf(this.stringify.convertTextKey) === 0) {
	          lastChild = this.text(text);
	        } else if (!this.options.ignoreDecorators && this.stringify.convertCDataKey && name.indexOf(this.stringify.convertCDataKey) === 0) {
	          lastChild = this.cdata(text);
	        } else if (!this.options.ignoreDecorators && this.stringify.convertCommentKey && name.indexOf(this.stringify.convertCommentKey) === 0) {
	          lastChild = this.comment(text);
	        } else if (!this.options.ignoreDecorators && this.stringify.convertRawKey && name.indexOf(this.stringify.convertRawKey) === 0) {
	          lastChild = this.raw(text);
	        } else if (!this.options.ignoreDecorators && this.stringify.convertPIKey && name.indexOf(this.stringify.convertPIKey) === 0) {
	          lastChild = this.instruction(name.substr(this.stringify.convertPIKey.length), text);
	        } else {
	          lastChild = this.node(name, attributes, text);
	        }
	      }
	      if (lastChild == null) {
	        throw new Error("Could not create any elements with: " + name + ". " + this.debugInfo());
	      }
	      return lastChild;
	    };

	    XMLNode.prototype.insertBefore = function(name, attributes, text) {
	      var child, i, newChild, refChild, removed;
	      if (name != null ? name.type : void 0) {
	        newChild = name;
	        refChild = attributes;
	        newChild.setParent(this);
	        if (refChild) {
	          i = children.indexOf(refChild);
	          removed = children.splice(i);
	          children.push(newChild);
	          Array.prototype.push.apply(children, removed);
	        } else {
	          children.push(newChild);
	        }
	        return newChild;
	      } else {
	        if (this.isRoot) {
	          throw new Error("Cannot insert elements at root level. " + this.debugInfo(name));
	        }
	        i = this.parent.children.indexOf(this);
	        removed = this.parent.children.splice(i);
	        child = this.parent.element(name, attributes, text);
	        Array.prototype.push.apply(this.parent.children, removed);
	        return child;
	      }
	    };

	    XMLNode.prototype.insertAfter = function(name, attributes, text) {
	      var child, i, removed;
	      if (this.isRoot) {
	        throw new Error("Cannot insert elements at root level. " + this.debugInfo(name));
	      }
	      i = this.parent.children.indexOf(this);
	      removed = this.parent.children.splice(i + 1);
	      child = this.parent.element(name, attributes, text);
	      Array.prototype.push.apply(this.parent.children, removed);
	      return child;
	    };

	    XMLNode.prototype.remove = function() {
	      var i;
	      if (this.isRoot) {
	        throw new Error("Cannot remove the root element. " + this.debugInfo());
	      }
	      i = this.parent.children.indexOf(this);
	      [].splice.apply(this.parent.children, [i, i - i + 1].concat([]));
	      return this.parent;
	    };

	    XMLNode.prototype.node = function(name, attributes, text) {
	      var child, ref2;
	      if (name != null) {
	        name = getValue(name);
	      }
	      attributes || (attributes = {});
	      attributes = getValue(attributes);
	      if (!isObject(attributes)) {
	        ref2 = [attributes, text], text = ref2[0], attributes = ref2[1];
	      }
	      child = new XMLElement(this, name, attributes);
	      if (text != null) {
	        child.text(text);
	      }
	      this.children.push(child);
	      return child;
	    };

	    XMLNode.prototype.text = function(value) {
	      var child;
	      if (isObject(value)) {
	        this.element(value);
	      }
	      child = new XMLText(this, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLNode.prototype.cdata = function(value) {
	      var child;
	      child = new XMLCData(this, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLNode.prototype.comment = function(value) {
	      var child;
	      child = new XMLComment(this, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLNode.prototype.commentBefore = function(value) {
	      var i, removed;
	      i = this.parent.children.indexOf(this);
	      removed = this.parent.children.splice(i);
	      this.parent.comment(value);
	      Array.prototype.push.apply(this.parent.children, removed);
	      return this;
	    };

	    XMLNode.prototype.commentAfter = function(value) {
	      var i, removed;
	      i = this.parent.children.indexOf(this);
	      removed = this.parent.children.splice(i + 1);
	      this.parent.comment(value);
	      Array.prototype.push.apply(this.parent.children, removed);
	      return this;
	    };

	    XMLNode.prototype.raw = function(value) {
	      var child;
	      child = new XMLRaw(this, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLNode.prototype.dummy = function() {
	      var child;
	      child = new XMLDummy(this);
	      return child;
	    };

	    XMLNode.prototype.instruction = function(target, value) {
	      var insTarget, insValue, instruction, j, len;
	      if (target != null) {
	        target = getValue(target);
	      }
	      if (value != null) {
	        value = getValue(value);
	      }
	      if (Array.isArray(target)) {
	        for (j = 0, len = target.length; j < len; j++) {
	          insTarget = target[j];
	          this.instruction(insTarget);
	        }
	      } else if (isObject(target)) {
	        for (insTarget in target) {
	          if (!hasProp.call(target, insTarget)) continue;
	          insValue = target[insTarget];
	          this.instruction(insTarget, insValue);
	        }
	      } else {
	        if (isFunction(value)) {
	          value = value.apply();
	        }
	        instruction = new XMLProcessingInstruction(this, target, value);
	        this.children.push(instruction);
	      }
	      return this;
	    };

	    XMLNode.prototype.instructionBefore = function(target, value) {
	      var i, removed;
	      i = this.parent.children.indexOf(this);
	      removed = this.parent.children.splice(i);
	      this.parent.instruction(target, value);
	      Array.prototype.push.apply(this.parent.children, removed);
	      return this;
	    };

	    XMLNode.prototype.instructionAfter = function(target, value) {
	      var i, removed;
	      i = this.parent.children.indexOf(this);
	      removed = this.parent.children.splice(i + 1);
	      this.parent.instruction(target, value);
	      Array.prototype.push.apply(this.parent.children, removed);
	      return this;
	    };

	    XMLNode.prototype.declaration = function(version, encoding, standalone) {
	      var doc, xmldec;
	      doc = this.document();
	      xmldec = new XMLDeclaration(doc, version, encoding, standalone);
	      if (doc.children.length === 0) {
	        doc.children.unshift(xmldec);
	      } else if (doc.children[0].type === NodeType.Declaration) {
	        doc.children[0] = xmldec;
	      } else {
	        doc.children.unshift(xmldec);
	      }
	      return doc.root() || doc;
	    };

	    XMLNode.prototype.dtd = function(pubID, sysID) {
	      var child, doc, doctype, i, j, k, len, len1, ref2, ref3;
	      doc = this.document();
	      doctype = new XMLDocType(doc, pubID, sysID);
	      ref2 = doc.children;
	      for (i = j = 0, len = ref2.length; j < len; i = ++j) {
	        child = ref2[i];
	        if (child.type === NodeType.DocType) {
	          doc.children[i] = doctype;
	          return doctype;
	        }
	      }
	      ref3 = doc.children;
	      for (i = k = 0, len1 = ref3.length; k < len1; i = ++k) {
	        child = ref3[i];
	        if (child.isRoot) {
	          doc.children.splice(i, 0, doctype);
	          return doctype;
	        }
	      }
	      doc.children.push(doctype);
	      return doctype;
	    };

	    XMLNode.prototype.up = function() {
	      if (this.isRoot) {
	        throw new Error("The root node has no parent. Use doc() if you need to get the document object.");
	      }
	      return this.parent;
	    };

	    XMLNode.prototype.root = function() {
	      var node;
	      node = this;
	      while (node) {
	        if (node.type === NodeType.Document) {
	          return node.rootObject;
	        } else if (node.isRoot) {
	          return node;
	        } else {
	          node = node.parent;
	        }
	      }
	    };

	    XMLNode.prototype.document = function() {
	      var node;
	      node = this;
	      while (node) {
	        if (node.type === NodeType.Document) {
	          return node;
	        } else {
	          node = node.parent;
	        }
	      }
	    };

	    XMLNode.prototype.end = function(options) {
	      return this.document().end(options);
	    };

	    XMLNode.prototype.prev = function() {
	      var i;
	      i = this.parent.children.indexOf(this);
	      if (i < 1) {
	        throw new Error("Already at the first node. " + this.debugInfo());
	      }
	      return this.parent.children[i - 1];
	    };

	    XMLNode.prototype.next = function() {
	      var i;
	      i = this.parent.children.indexOf(this);
	      if (i === -1 || i === this.parent.children.length - 1) {
	        throw new Error("Already at the last node. " + this.debugInfo());
	      }
	      return this.parent.children[i + 1];
	    };

	    XMLNode.prototype.importDocument = function(doc) {
	      var clonedRoot;
	      clonedRoot = doc.root().clone();
	      clonedRoot.parent = this;
	      clonedRoot.isRoot = false;
	      this.children.push(clonedRoot);
	      return this;
	    };

	    XMLNode.prototype.debugInfo = function(name) {
	      var ref2, ref3;
	      name = name || this.name;
	      if ((name == null) && !((ref2 = this.parent) != null ? ref2.name : void 0)) {
	        return "";
	      } else if (name == null) {
	        return "parent: <" + this.parent.name + ">";
	      } else if (!((ref3 = this.parent) != null ? ref3.name : void 0)) {
	        return "node: <" + name + ">";
	      } else {
	        return "node: <" + name + ">, parent: <" + this.parent.name + ">";
	      }
	    };

	    XMLNode.prototype.ele = function(name, attributes, text) {
	      return this.element(name, attributes, text);
	    };

	    XMLNode.prototype.nod = function(name, attributes, text) {
	      return this.node(name, attributes, text);
	    };

	    XMLNode.prototype.txt = function(value) {
	      return this.text(value);
	    };

	    XMLNode.prototype.dat = function(value) {
	      return this.cdata(value);
	    };

	    XMLNode.prototype.com = function(value) {
	      return this.comment(value);
	    };

	    XMLNode.prototype.ins = function(target, value) {
	      return this.instruction(target, value);
	    };

	    XMLNode.prototype.doc = function() {
	      return this.document();
	    };

	    XMLNode.prototype.dec = function(version, encoding, standalone) {
	      return this.declaration(version, encoding, standalone);
	    };

	    XMLNode.prototype.e = function(name, attributes, text) {
	      return this.element(name, attributes, text);
	    };

	    XMLNode.prototype.n = function(name, attributes, text) {
	      return this.node(name, attributes, text);
	    };

	    XMLNode.prototype.t = function(value) {
	      return this.text(value);
	    };

	    XMLNode.prototype.d = function(value) {
	      return this.cdata(value);
	    };

	    XMLNode.prototype.c = function(value) {
	      return this.comment(value);
	    };

	    XMLNode.prototype.r = function(value) {
	      return this.raw(value);
	    };

	    XMLNode.prototype.i = function(target, value) {
	      return this.instruction(target, value);
	    };

	    XMLNode.prototype.u = function() {
	      return this.up();
	    };

	    XMLNode.prototype.importXMLBuilder = function(doc) {
	      return this.importDocument(doc);
	    };

	    XMLNode.prototype.replaceChild = function(newChild, oldChild) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLNode.prototype.removeChild = function(oldChild) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLNode.prototype.appendChild = function(newChild) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLNode.prototype.hasChildNodes = function() {
	      return this.children.length !== 0;
	    };

	    XMLNode.prototype.cloneNode = function(deep) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLNode.prototype.normalize = function() {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLNode.prototype.isSupported = function(feature, version) {
	      return true;
	    };

	    XMLNode.prototype.hasAttributes = function() {
	      return this.attribs.length !== 0;
	    };

	    XMLNode.prototype.compareDocumentPosition = function(other) {
	      var ref, res;
	      ref = this;
	      if (ref === other) {
	        return 0;
	      } else if (this.document() !== other.document()) {
	        res = DocumentPosition.Disconnected | DocumentPosition.ImplementationSpecific;
	        if (Math.random() < 0.5) {
	          res |= DocumentPosition.Preceding;
	        } else {
	          res |= DocumentPosition.Following;
	        }
	        return res;
	      } else if (ref.isAncestor(other)) {
	        return DocumentPosition.Contains | DocumentPosition.Preceding;
	      } else if (ref.isDescendant(other)) {
	        return DocumentPosition.Contains | DocumentPosition.Following;
	      } else if (ref.isPreceding(other)) {
	        return DocumentPosition.Preceding;
	      } else {
	        return DocumentPosition.Following;
	      }
	    };

	    XMLNode.prototype.isSameNode = function(other) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLNode.prototype.lookupPrefix = function(namespaceURI) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLNode.prototype.isDefaultNamespace = function(namespaceURI) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLNode.prototype.lookupNamespaceURI = function(prefix) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLNode.prototype.isEqualNode = function(node) {
	      var i, j, ref2;
	      if (node.nodeType !== this.nodeType) {
	        return false;
	      }
	      if (node.children.length !== this.children.length) {
	        return false;
	      }
	      for (i = j = 0, ref2 = this.children.length - 1; 0 <= ref2 ? j <= ref2 : j >= ref2; i = 0 <= ref2 ? ++j : --j) {
	        if (!this.children[i].isEqualNode(node.children[i])) {
	          return false;
	        }
	      }
	      return true;
	    };

	    XMLNode.prototype.getFeature = function(feature, version) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLNode.prototype.setUserData = function(key, data, handler) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLNode.prototype.getUserData = function(key) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLNode.prototype.contains = function(other) {
	      if (!other) {
	        return false;
	      }
	      return other === this || this.isDescendant(other);
	    };

	    XMLNode.prototype.isDescendant = function(node) {
	      var child, isDescendantChild, j, len, ref2;
	      ref2 = this.children;
	      for (j = 0, len = ref2.length; j < len; j++) {
	        child = ref2[j];
	        if (node === child) {
	          return true;
	        }
	        isDescendantChild = child.isDescendant(node);
	        if (isDescendantChild) {
	          return true;
	        }
	      }
	      return false;
	    };

	    XMLNode.prototype.isAncestor = function(node) {
	      return node.isDescendant(this);
	    };

	    XMLNode.prototype.isPreceding = function(node) {
	      var nodePos, thisPos;
	      nodePos = this.treePosition(node);
	      thisPos = this.treePosition(this);
	      if (nodePos === -1 || thisPos === -1) {
	        return false;
	      } else {
	        return nodePos < thisPos;
	      }
	    };

	    XMLNode.prototype.isFollowing = function(node) {
	      var nodePos, thisPos;
	      nodePos = this.treePosition(node);
	      thisPos = this.treePosition(this);
	      if (nodePos === -1 || thisPos === -1) {
	        return false;
	      } else {
	        return nodePos > thisPos;
	      }
	    };

	    XMLNode.prototype.treePosition = function(node) {
	      var found, pos;
	      pos = 0;
	      found = false;
	      this.foreachTreeNode(this.document(), function(childNode) {
	        pos++;
	        if (!found && childNode === node) {
	          return found = true;
	        }
	      });
	      if (found) {
	        return pos;
	      } else {
	        return -1;
	      }
	    };

	    XMLNode.prototype.foreachTreeNode = function(node, func) {
	      var child, j, len, ref2, res;
	      node || (node = this.document());
	      ref2 = node.children;
	      for (j = 0, len = ref2.length; j < len; j++) {
	        child = ref2[j];
	        if (res = func(child)) {
	          return res;
	        } else {
	          res = this.foreachTreeNode(child, func);
	          if (res) {
	            return res;
	          }
	        }
	      }
	    };

	    return XMLNode;

	  })();

	}).call(XMLNode);
	return XMLNode$1.exports;
}

var XMLStringifier$1 = {exports: {}};

var XMLStringifier = XMLStringifier$1.exports;

var hasRequiredXMLStringifier;

function requireXMLStringifier () {
	if (hasRequiredXMLStringifier) return XMLStringifier$1.exports;
	hasRequiredXMLStringifier = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	    hasProp = {}.hasOwnProperty;

	  XMLStringifier$1.exports = (function() {
	    function XMLStringifier(options) {
	      this.assertLegalName = bind(this.assertLegalName, this);
	      this.assertLegalChar = bind(this.assertLegalChar, this);
	      var key, ref, value;
	      options || (options = {});
	      this.options = options;
	      if (!this.options.version) {
	        this.options.version = '1.0';
	      }
	      ref = options.stringify || {};
	      for (key in ref) {
	        if (!hasProp.call(ref, key)) continue;
	        value = ref[key];
	        this[key] = value;
	      }
	    }

	    XMLStringifier.prototype.name = function(val) {
	      if (this.options.noValidation) {
	        return val;
	      }
	      return this.assertLegalName('' + val || '');
	    };

	    XMLStringifier.prototype.text = function(val) {
	      if (this.options.noValidation) {
	        return val;
	      }
	      return this.assertLegalChar(this.textEscape('' + val || ''));
	    };

	    XMLStringifier.prototype.cdata = function(val) {
	      if (this.options.noValidation) {
	        return val;
	      }
	      val = '' + val || '';
	      val = val.replace(']]>', ']]]]><![CDATA[>');
	      return this.assertLegalChar(val);
	    };

	    XMLStringifier.prototype.comment = function(val) {
	      if (this.options.noValidation) {
	        return val;
	      }
	      val = '' + val || '';
	      if (val.match(/--/)) {
	        throw new Error("Comment text cannot contain double-hypen: " + val);
	      }
	      return this.assertLegalChar(val);
	    };

	    XMLStringifier.prototype.raw = function(val) {
	      if (this.options.noValidation) {
	        return val;
	      }
	      return '' + val || '';
	    };

	    XMLStringifier.prototype.attValue = function(val) {
	      if (this.options.noValidation) {
	        return val;
	      }
	      return this.assertLegalChar(this.attEscape(val = '' + val || ''));
	    };

	    XMLStringifier.prototype.insTarget = function(val) {
	      if (this.options.noValidation) {
	        return val;
	      }
	      return this.assertLegalChar('' + val || '');
	    };

	    XMLStringifier.prototype.insValue = function(val) {
	      if (this.options.noValidation) {
	        return val;
	      }
	      val = '' + val || '';
	      if (val.match(/\?>/)) {
	        throw new Error("Invalid processing instruction value: " + val);
	      }
	      return this.assertLegalChar(val);
	    };

	    XMLStringifier.prototype.xmlVersion = function(val) {
	      if (this.options.noValidation) {
	        return val;
	      }
	      val = '' + val || '';
	      if (!val.match(/1\.[0-9]+/)) {
	        throw new Error("Invalid version number: " + val);
	      }
	      return val;
	    };

	    XMLStringifier.prototype.xmlEncoding = function(val) {
	      if (this.options.noValidation) {
	        return val;
	      }
	      val = '' + val || '';
	      if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/)) {
	        throw new Error("Invalid encoding: " + val);
	      }
	      return this.assertLegalChar(val);
	    };

	    XMLStringifier.prototype.xmlStandalone = function(val) {
	      if (this.options.noValidation) {
	        return val;
	      }
	      if (val) {
	        return "yes";
	      } else {
	        return "no";
	      }
	    };

	    XMLStringifier.prototype.dtdPubID = function(val) {
	      if (this.options.noValidation) {
	        return val;
	      }
	      return this.assertLegalChar('' + val || '');
	    };

	    XMLStringifier.prototype.dtdSysID = function(val) {
	      if (this.options.noValidation) {
	        return val;
	      }
	      return this.assertLegalChar('' + val || '');
	    };

	    XMLStringifier.prototype.dtdElementValue = function(val) {
	      if (this.options.noValidation) {
	        return val;
	      }
	      return this.assertLegalChar('' + val || '');
	    };

	    XMLStringifier.prototype.dtdAttType = function(val) {
	      if (this.options.noValidation) {
	        return val;
	      }
	      return this.assertLegalChar('' + val || '');
	    };

	    XMLStringifier.prototype.dtdAttDefault = function(val) {
	      if (this.options.noValidation) {
	        return val;
	      }
	      return this.assertLegalChar('' + val || '');
	    };

	    XMLStringifier.prototype.dtdEntityValue = function(val) {
	      if (this.options.noValidation) {
	        return val;
	      }
	      return this.assertLegalChar('' + val || '');
	    };

	    XMLStringifier.prototype.dtdNData = function(val) {
	      if (this.options.noValidation) {
	        return val;
	      }
	      return this.assertLegalChar('' + val || '');
	    };

	    XMLStringifier.prototype.convertAttKey = '@';

	    XMLStringifier.prototype.convertPIKey = '?';

	    XMLStringifier.prototype.convertTextKey = '#text';

	    XMLStringifier.prototype.convertCDataKey = '#cdata';

	    XMLStringifier.prototype.convertCommentKey = '#comment';

	    XMLStringifier.prototype.convertRawKey = '#raw';

	    XMLStringifier.prototype.assertLegalChar = function(str) {
	      var regex, res;
	      if (this.options.noValidation) {
	        return str;
	      }
	      regex = '';
	      if (this.options.version === '1.0') {
	        regex = /[\0-\x08\x0B\f\x0E-\x1F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
	        if (res = str.match(regex)) {
	          throw new Error("Invalid character in string: " + str + " at index " + res.index);
	        }
	      } else if (this.options.version === '1.1') {
	        regex = /[\0\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
	        if (res = str.match(regex)) {
	          throw new Error("Invalid character in string: " + str + " at index " + res.index);
	        }
	      }
	      return str;
	    };

	    XMLStringifier.prototype.assertLegalName = function(str) {
	      var regex;
	      if (this.options.noValidation) {
	        return str;
	      }
	      this.assertLegalChar(str);
	      regex = /^([:A-Z_a-z\xC0-\xD6\xD8-\xF6\xF8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])([\x2D\.0-:A-Z_a-z\xB7\xC0-\xD6\xD8-\xF6\xF8-\u037D\u037F-\u1FFF\u200C\u200D\u203F\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])*$/;
	      if (!str.match(regex)) {
	        throw new Error("Invalid character in name");
	      }
	      return str;
	    };

	    XMLStringifier.prototype.textEscape = function(str) {
	      var ampregex;
	      if (this.options.noValidation) {
	        return str;
	      }
	      ampregex = this.options.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
	      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\r/g, '&#xD;');
	    };

	    XMLStringifier.prototype.attEscape = function(str) {
	      var ampregex;
	      if (this.options.noValidation) {
	        return str;
	      }
	      ampregex = this.options.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
	      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/"/g, '&quot;').replace(/\t/g, '&#x9;').replace(/\n/g, '&#xA;').replace(/\r/g, '&#xD;');
	    };

	    return XMLStringifier;

	  })();

	}).call(XMLStringifier);
	return XMLStringifier$1.exports;
}

var XMLStringWriter$1 = {exports: {}};

var XMLWriterBase$1 = {exports: {}};

var WriterState$1 = {exports: {}};

var WriterState = WriterState$1.exports;

var hasRequiredWriterState;

function requireWriterState () {
	if (hasRequiredWriterState) return WriterState$1.exports;
	hasRequiredWriterState = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  WriterState$1.exports = {
	    None: 0,
	    OpenTag: 1,
	    InsideTag: 2,
	    CloseTag: 3
	  };

	}).call(WriterState);
	return WriterState$1.exports;
}

var XMLWriterBase = XMLWriterBase$1.exports;

var hasRequiredXMLWriterBase;

function requireXMLWriterBase () {
	if (hasRequiredXMLWriterBase) return XMLWriterBase$1.exports;
	hasRequiredXMLWriterBase = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType, WriterState, assign,
	    hasProp = {}.hasOwnProperty;

	  assign = requireUtility().assign;

	  NodeType = requireNodeType();

	  requireXMLDeclaration();

	  requireXMLDocType();

	  requireXMLCData();

	  requireXMLComment();

	  requireXMLElement();

	  requireXMLRaw();

	  requireXMLText();

	  requireXMLProcessingInstruction();

	  requireXMLDummy();

	  requireXMLDTDAttList();

	  requireXMLDTDElement();

	  requireXMLDTDEntity();

	  requireXMLDTDNotation();

	  WriterState = requireWriterState();

	  XMLWriterBase$1.exports = (function() {
	    function XMLWriterBase(options) {
	      var key, ref, value;
	      options || (options = {});
	      this.options = options;
	      ref = options.writer || {};
	      for (key in ref) {
	        if (!hasProp.call(ref, key)) continue;
	        value = ref[key];
	        this["_" + key] = this[key];
	        this[key] = value;
	      }
	    }

	    XMLWriterBase.prototype.filterOptions = function(options) {
	      var filteredOptions, ref, ref1, ref2, ref3, ref4, ref5, ref6;
	      options || (options = {});
	      options = assign({}, this.options, options);
	      filteredOptions = {
	        writer: this
	      };
	      filteredOptions.pretty = options.pretty || false;
	      filteredOptions.allowEmpty = options.allowEmpty || false;
	      filteredOptions.indent = (ref = options.indent) != null ? ref : '  ';
	      filteredOptions.newline = (ref1 = options.newline) != null ? ref1 : '\n';
	      filteredOptions.offset = (ref2 = options.offset) != null ? ref2 : 0;
	      filteredOptions.dontPrettyTextNodes = (ref3 = (ref4 = options.dontPrettyTextNodes) != null ? ref4 : options.dontprettytextnodes) != null ? ref3 : 0;
	      filteredOptions.spaceBeforeSlash = (ref5 = (ref6 = options.spaceBeforeSlash) != null ? ref6 : options.spacebeforeslash) != null ? ref5 : '';
	      if (filteredOptions.spaceBeforeSlash === true) {
	        filteredOptions.spaceBeforeSlash = ' ';
	      }
	      filteredOptions.suppressPrettyCount = 0;
	      filteredOptions.user = {};
	      filteredOptions.state = WriterState.None;
	      return filteredOptions;
	    };

	    XMLWriterBase.prototype.indent = function(node, options, level) {
	      var indentLevel;
	      if (!options.pretty || options.suppressPrettyCount) {
	        return '';
	      } else if (options.pretty) {
	        indentLevel = (level || 0) + options.offset + 1;
	        if (indentLevel > 0) {
	          return new Array(indentLevel).join(options.indent);
	        }
	      }
	      return '';
	    };

	    XMLWriterBase.prototype.endline = function(node, options, level) {
	      if (!options.pretty || options.suppressPrettyCount) {
	        return '';
	      } else {
	        return options.newline;
	      }
	    };

	    XMLWriterBase.prototype.attribute = function(att, options, level) {
	      var r;
	      this.openAttribute(att, options, level);
	      r = ' ' + att.name + '="' + att.value + '"';
	      this.closeAttribute(att, options, level);
	      return r;
	    };

	    XMLWriterBase.prototype.cdata = function(node, options, level) {
	      var r;
	      this.openNode(node, options, level);
	      options.state = WriterState.OpenTag;
	      r = this.indent(node, options, level) + '<![CDATA[';
	      options.state = WriterState.InsideTag;
	      r += node.value;
	      options.state = WriterState.CloseTag;
	      r += ']]>' + this.endline(node, options, level);
	      options.state = WriterState.None;
	      this.closeNode(node, options, level);
	      return r;
	    };

	    XMLWriterBase.prototype.comment = function(node, options, level) {
	      var r;
	      this.openNode(node, options, level);
	      options.state = WriterState.OpenTag;
	      r = this.indent(node, options, level) + '<!-- ';
	      options.state = WriterState.InsideTag;
	      r += node.value;
	      options.state = WriterState.CloseTag;
	      r += ' -->' + this.endline(node, options, level);
	      options.state = WriterState.None;
	      this.closeNode(node, options, level);
	      return r;
	    };

	    XMLWriterBase.prototype.declaration = function(node, options, level) {
	      var r;
	      this.openNode(node, options, level);
	      options.state = WriterState.OpenTag;
	      r = this.indent(node, options, level) + '<?xml';
	      options.state = WriterState.InsideTag;
	      r += ' version="' + node.version + '"';
	      if (node.encoding != null) {
	        r += ' encoding="' + node.encoding + '"';
	      }
	      if (node.standalone != null) {
	        r += ' standalone="' + node.standalone + '"';
	      }
	      options.state = WriterState.CloseTag;
	      r += options.spaceBeforeSlash + '?>';
	      r += this.endline(node, options, level);
	      options.state = WriterState.None;
	      this.closeNode(node, options, level);
	      return r;
	    };

	    XMLWriterBase.prototype.docType = function(node, options, level) {
	      var child, i, len, r, ref;
	      level || (level = 0);
	      this.openNode(node, options, level);
	      options.state = WriterState.OpenTag;
	      r = this.indent(node, options, level);
	      r += '<!DOCTYPE ' + node.root().name;
	      if (node.pubID && node.sysID) {
	        r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
	      } else if (node.sysID) {
	        r += ' SYSTEM "' + node.sysID + '"';
	      }
	      if (node.children.length > 0) {
	        r += ' [';
	        r += this.endline(node, options, level);
	        options.state = WriterState.InsideTag;
	        ref = node.children;
	        for (i = 0, len = ref.length; i < len; i++) {
	          child = ref[i];
	          r += this.writeChildNode(child, options, level + 1);
	        }
	        options.state = WriterState.CloseTag;
	        r += ']';
	      }
	      options.state = WriterState.CloseTag;
	      r += options.spaceBeforeSlash + '>';
	      r += this.endline(node, options, level);
	      options.state = WriterState.None;
	      this.closeNode(node, options, level);
	      return r;
	    };

	    XMLWriterBase.prototype.element = function(node, options, level) {
	      var att, child, childNodeCount, firstChildNode, i, j, len, len1, name, prettySuppressed, r, ref, ref1, ref2;
	      level || (level = 0);
	      prettySuppressed = false;
	      r = '';
	      this.openNode(node, options, level);
	      options.state = WriterState.OpenTag;
	      r += this.indent(node, options, level) + '<' + node.name;
	      ref = node.attribs;
	      for (name in ref) {
	        if (!hasProp.call(ref, name)) continue;
	        att = ref[name];
	        r += this.attribute(att, options, level);
	      }
	      childNodeCount = node.children.length;
	      firstChildNode = childNodeCount === 0 ? null : node.children[0];
	      if (childNodeCount === 0 || node.children.every(function(e) {
	        return (e.type === NodeType.Text || e.type === NodeType.Raw) && e.value === '';
	      })) {
	        if (options.allowEmpty) {
	          r += '>';
	          options.state = WriterState.CloseTag;
	          r += '</' + node.name + '>' + this.endline(node, options, level);
	        } else {
	          options.state = WriterState.CloseTag;
	          r += options.spaceBeforeSlash + '/>' + this.endline(node, options, level);
	        }
	      } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && (firstChildNode.value != null)) {
	        r += '>';
	        options.state = WriterState.InsideTag;
	        options.suppressPrettyCount++;
	        prettySuppressed = true;
	        r += this.writeChildNode(firstChildNode, options, level + 1);
	        options.suppressPrettyCount--;
	        prettySuppressed = false;
	        options.state = WriterState.CloseTag;
	        r += '</' + node.name + '>' + this.endline(node, options, level);
	      } else {
	        if (options.dontPrettyTextNodes) {
	          ref1 = node.children;
	          for (i = 0, len = ref1.length; i < len; i++) {
	            child = ref1[i];
	            if ((child.type === NodeType.Text || child.type === NodeType.Raw) && (child.value != null)) {
	              options.suppressPrettyCount++;
	              prettySuppressed = true;
	              break;
	            }
	          }
	        }
	        r += '>' + this.endline(node, options, level);
	        options.state = WriterState.InsideTag;
	        ref2 = node.children;
	        for (j = 0, len1 = ref2.length; j < len1; j++) {
	          child = ref2[j];
	          r += this.writeChildNode(child, options, level + 1);
	        }
	        options.state = WriterState.CloseTag;
	        r += this.indent(node, options, level) + '</' + node.name + '>';
	        if (prettySuppressed) {
	          options.suppressPrettyCount--;
	        }
	        r += this.endline(node, options, level);
	        options.state = WriterState.None;
	      }
	      this.closeNode(node, options, level);
	      return r;
	    };

	    XMLWriterBase.prototype.writeChildNode = function(node, options, level) {
	      switch (node.type) {
	        case NodeType.CData:
	          return this.cdata(node, options, level);
	        case NodeType.Comment:
	          return this.comment(node, options, level);
	        case NodeType.Element:
	          return this.element(node, options, level);
	        case NodeType.Raw:
	          return this.raw(node, options, level);
	        case NodeType.Text:
	          return this.text(node, options, level);
	        case NodeType.ProcessingInstruction:
	          return this.processingInstruction(node, options, level);
	        case NodeType.Dummy:
	          return '';
	        case NodeType.Declaration:
	          return this.declaration(node, options, level);
	        case NodeType.DocType:
	          return this.docType(node, options, level);
	        case NodeType.AttributeDeclaration:
	          return this.dtdAttList(node, options, level);
	        case NodeType.ElementDeclaration:
	          return this.dtdElement(node, options, level);
	        case NodeType.EntityDeclaration:
	          return this.dtdEntity(node, options, level);
	        case NodeType.NotationDeclaration:
	          return this.dtdNotation(node, options, level);
	        default:
	          throw new Error("Unknown XML node type: " + node.constructor.name);
	      }
	    };

	    XMLWriterBase.prototype.processingInstruction = function(node, options, level) {
	      var r;
	      this.openNode(node, options, level);
	      options.state = WriterState.OpenTag;
	      r = this.indent(node, options, level) + '<?';
	      options.state = WriterState.InsideTag;
	      r += node.target;
	      if (node.value) {
	        r += ' ' + node.value;
	      }
	      options.state = WriterState.CloseTag;
	      r += options.spaceBeforeSlash + '?>';
	      r += this.endline(node, options, level);
	      options.state = WriterState.None;
	      this.closeNode(node, options, level);
	      return r;
	    };

	    XMLWriterBase.prototype.raw = function(node, options, level) {
	      var r;
	      this.openNode(node, options, level);
	      options.state = WriterState.OpenTag;
	      r = this.indent(node, options, level);
	      options.state = WriterState.InsideTag;
	      r += node.value;
	      options.state = WriterState.CloseTag;
	      r += this.endline(node, options, level);
	      options.state = WriterState.None;
	      this.closeNode(node, options, level);
	      return r;
	    };

	    XMLWriterBase.prototype.text = function(node, options, level) {
	      var r;
	      this.openNode(node, options, level);
	      options.state = WriterState.OpenTag;
	      r = this.indent(node, options, level);
	      options.state = WriterState.InsideTag;
	      r += node.value;
	      options.state = WriterState.CloseTag;
	      r += this.endline(node, options, level);
	      options.state = WriterState.None;
	      this.closeNode(node, options, level);
	      return r;
	    };

	    XMLWriterBase.prototype.dtdAttList = function(node, options, level) {
	      var r;
	      this.openNode(node, options, level);
	      options.state = WriterState.OpenTag;
	      r = this.indent(node, options, level) + '<!ATTLIST';
	      options.state = WriterState.InsideTag;
	      r += ' ' + node.elementName + ' ' + node.attributeName + ' ' + node.attributeType;
	      if (node.defaultValueType !== '#DEFAULT') {
	        r += ' ' + node.defaultValueType;
	      }
	      if (node.defaultValue) {
	        r += ' "' + node.defaultValue + '"';
	      }
	      options.state = WriterState.CloseTag;
	      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);
	      options.state = WriterState.None;
	      this.closeNode(node, options, level);
	      return r;
	    };

	    XMLWriterBase.prototype.dtdElement = function(node, options, level) {
	      var r;
	      this.openNode(node, options, level);
	      options.state = WriterState.OpenTag;
	      r = this.indent(node, options, level) + '<!ELEMENT';
	      options.state = WriterState.InsideTag;
	      r += ' ' + node.name + ' ' + node.value;
	      options.state = WriterState.CloseTag;
	      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);
	      options.state = WriterState.None;
	      this.closeNode(node, options, level);
	      return r;
	    };

	    XMLWriterBase.prototype.dtdEntity = function(node, options, level) {
	      var r;
	      this.openNode(node, options, level);
	      options.state = WriterState.OpenTag;
	      r = this.indent(node, options, level) + '<!ENTITY';
	      options.state = WriterState.InsideTag;
	      if (node.pe) {
	        r += ' %';
	      }
	      r += ' ' + node.name;
	      if (node.value) {
	        r += ' "' + node.value + '"';
	      } else {
	        if (node.pubID && node.sysID) {
	          r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
	        } else if (node.sysID) {
	          r += ' SYSTEM "' + node.sysID + '"';
	        }
	        if (node.nData) {
	          r += ' NDATA ' + node.nData;
	        }
	      }
	      options.state = WriterState.CloseTag;
	      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);
	      options.state = WriterState.None;
	      this.closeNode(node, options, level);
	      return r;
	    };

	    XMLWriterBase.prototype.dtdNotation = function(node, options, level) {
	      var r;
	      this.openNode(node, options, level);
	      options.state = WriterState.OpenTag;
	      r = this.indent(node, options, level) + '<!NOTATION';
	      options.state = WriterState.InsideTag;
	      r += ' ' + node.name;
	      if (node.pubID && node.sysID) {
	        r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
	      } else if (node.pubID) {
	        r += ' PUBLIC "' + node.pubID + '"';
	      } else if (node.sysID) {
	        r += ' SYSTEM "' + node.sysID + '"';
	      }
	      options.state = WriterState.CloseTag;
	      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);
	      options.state = WriterState.None;
	      this.closeNode(node, options, level);
	      return r;
	    };

	    XMLWriterBase.prototype.openNode = function(node, options, level) {};

	    XMLWriterBase.prototype.closeNode = function(node, options, level) {};

	    XMLWriterBase.prototype.openAttribute = function(att, options, level) {};

	    XMLWriterBase.prototype.closeAttribute = function(att, options, level) {};

	    return XMLWriterBase;

	  })();

	}).call(XMLWriterBase);
	return XMLWriterBase$1.exports;
}

var XMLStringWriter = XMLStringWriter$1.exports;

var hasRequiredXMLStringWriter;

function requireXMLStringWriter () {
	if (hasRequiredXMLStringWriter) return XMLStringWriter$1.exports;
	hasRequiredXMLStringWriter = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var XMLWriterBase,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  XMLWriterBase = requireXMLWriterBase();

	  XMLStringWriter$1.exports = (function(superClass) {
	    extend(XMLStringWriter, superClass);

	    function XMLStringWriter(options) {
	      XMLStringWriter.__super__.constructor.call(this, options);
	    }

	    XMLStringWriter.prototype.document = function(doc, options) {
	      var child, i, len, r, ref;
	      options = this.filterOptions(options);
	      r = '';
	      ref = doc.children;
	      for (i = 0, len = ref.length; i < len; i++) {
	        child = ref[i];
	        r += this.writeChildNode(child, options, 0);
	      }
	      if (options.pretty && r.slice(-options.newline.length) === options.newline) {
	        r = r.slice(0, -options.newline.length);
	      }
	      return r;
	    };

	    return XMLStringWriter;

	  })(XMLWriterBase);

	}).call(XMLStringWriter);
	return XMLStringWriter$1.exports;
}

var XMLDocument = XMLDocument$1.exports;

var hasRequiredXMLDocument;

function requireXMLDocument () {
	if (hasRequiredXMLDocument) return XMLDocument$1.exports;
	hasRequiredXMLDocument = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType, XMLDOMConfiguration, XMLDOMImplementation, XMLNode, XMLStringWriter, XMLStringifier, isPlainObject,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  isPlainObject = requireUtility().isPlainObject;

	  XMLDOMImplementation = requireXMLDOMImplementation();

	  XMLDOMConfiguration = requireXMLDOMConfiguration();

	  XMLNode = requireXMLNode();

	  NodeType = requireNodeType();

	  XMLStringifier = requireXMLStringifier();

	  XMLStringWriter = requireXMLStringWriter();

	  XMLDocument$1.exports = (function(superClass) {
	    extend(XMLDocument, superClass);

	    function XMLDocument(options) {
	      XMLDocument.__super__.constructor.call(this, null);
	      this.name = "#document";
	      this.type = NodeType.Document;
	      this.documentURI = null;
	      this.domConfig = new XMLDOMConfiguration();
	      options || (options = {});
	      if (!options.writer) {
	        options.writer = new XMLStringWriter();
	      }
	      this.options = options;
	      this.stringify = new XMLStringifier(options);
	    }

	    Object.defineProperty(XMLDocument.prototype, 'implementation', {
	      value: new XMLDOMImplementation()
	    });

	    Object.defineProperty(XMLDocument.prototype, 'doctype', {
	      get: function() {
	        var child, i, len, ref;
	        ref = this.children;
	        for (i = 0, len = ref.length; i < len; i++) {
	          child = ref[i];
	          if (child.type === NodeType.DocType) {
	            return child;
	          }
	        }
	        return null;
	      }
	    });

	    Object.defineProperty(XMLDocument.prototype, 'documentElement', {
	      get: function() {
	        return this.rootObject || null;
	      }
	    });

	    Object.defineProperty(XMLDocument.prototype, 'inputEncoding', {
	      get: function() {
	        return null;
	      }
	    });

	    Object.defineProperty(XMLDocument.prototype, 'strictErrorChecking', {
	      get: function() {
	        return false;
	      }
	    });

	    Object.defineProperty(XMLDocument.prototype, 'xmlEncoding', {
	      get: function() {
	        if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {
	          return this.children[0].encoding;
	        } else {
	          return null;
	        }
	      }
	    });

	    Object.defineProperty(XMLDocument.prototype, 'xmlStandalone', {
	      get: function() {
	        if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {
	          return this.children[0].standalone === 'yes';
	        } else {
	          return false;
	        }
	      }
	    });

	    Object.defineProperty(XMLDocument.prototype, 'xmlVersion', {
	      get: function() {
	        if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {
	          return this.children[0].version;
	        } else {
	          return "1.0";
	        }
	      }
	    });

	    Object.defineProperty(XMLDocument.prototype, 'URL', {
	      get: function() {
	        return this.documentURI;
	      }
	    });

	    Object.defineProperty(XMLDocument.prototype, 'origin', {
	      get: function() {
	        return null;
	      }
	    });

	    Object.defineProperty(XMLDocument.prototype, 'compatMode', {
	      get: function() {
	        return null;
	      }
	    });

	    Object.defineProperty(XMLDocument.prototype, 'characterSet', {
	      get: function() {
	        return null;
	      }
	    });

	    Object.defineProperty(XMLDocument.prototype, 'contentType', {
	      get: function() {
	        return null;
	      }
	    });

	    XMLDocument.prototype.end = function(writer) {
	      var writerOptions;
	      writerOptions = {};
	      if (!writer) {
	        writer = this.options.writer;
	      } else if (isPlainObject(writer)) {
	        writerOptions = writer;
	        writer = this.options.writer;
	      }
	      return writer.document(this, writer.filterOptions(writerOptions));
	    };

	    XMLDocument.prototype.toString = function(options) {
	      return this.options.writer.document(this, this.options.writer.filterOptions(options));
	    };

	    XMLDocument.prototype.createElement = function(tagName) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.createDocumentFragment = function() {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.createTextNode = function(data) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.createComment = function(data) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.createCDATASection = function(data) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.createProcessingInstruction = function(target, data) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.createAttribute = function(name) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.createEntityReference = function(name) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.getElementsByTagName = function(tagname) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.importNode = function(importedNode, deep) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.createElementNS = function(namespaceURI, qualifiedName) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.createAttributeNS = function(namespaceURI, qualifiedName) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.getElementById = function(elementId) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.adoptNode = function(source) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.normalizeDocument = function() {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.renameNode = function(node, namespaceURI, qualifiedName) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.getElementsByClassName = function(classNames) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.createEvent = function(eventInterface) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.createRange = function() {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.createNodeIterator = function(root, whatToShow, filter) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.createTreeWalker = function(root, whatToShow, filter) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    return XMLDocument;

	  })(XMLNode);

	}).call(XMLDocument);
	return XMLDocument$1.exports;
}

var XMLDocumentCB$1 = {exports: {}};

var XMLDocumentCB = XMLDocumentCB$1.exports;

var hasRequiredXMLDocumentCB;

function requireXMLDocumentCB () {
	if (hasRequiredXMLDocumentCB) return XMLDocumentCB$1.exports;
	hasRequiredXMLDocumentCB = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType, WriterState, XMLAttribute, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDocument, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStringWriter, XMLStringifier, XMLText, getValue, isFunction, isObject, isPlainObject, ref,
	    hasProp = {}.hasOwnProperty;

	  ref = requireUtility(), isObject = ref.isObject, isFunction = ref.isFunction, isPlainObject = ref.isPlainObject, getValue = ref.getValue;

	  NodeType = requireNodeType();

	  XMLDocument = requireXMLDocument();

	  XMLElement = requireXMLElement();

	  XMLCData = requireXMLCData();

	  XMLComment = requireXMLComment();

	  XMLRaw = requireXMLRaw();

	  XMLText = requireXMLText();

	  XMLProcessingInstruction = requireXMLProcessingInstruction();

	  XMLDeclaration = requireXMLDeclaration();

	  XMLDocType = requireXMLDocType();

	  XMLDTDAttList = requireXMLDTDAttList();

	  XMLDTDEntity = requireXMLDTDEntity();

	  XMLDTDElement = requireXMLDTDElement();

	  XMLDTDNotation = requireXMLDTDNotation();

	  XMLAttribute = requireXMLAttribute();

	  XMLStringifier = requireXMLStringifier();

	  XMLStringWriter = requireXMLStringWriter();

	  WriterState = requireWriterState();

	  XMLDocumentCB$1.exports = (function() {
	    function XMLDocumentCB(options, onData, onEnd) {
	      var writerOptions;
	      this.name = "?xml";
	      this.type = NodeType.Document;
	      options || (options = {});
	      writerOptions = {};
	      if (!options.writer) {
	        options.writer = new XMLStringWriter();
	      } else if (isPlainObject(options.writer)) {
	        writerOptions = options.writer;
	        options.writer = new XMLStringWriter();
	      }
	      this.options = options;
	      this.writer = options.writer;
	      this.writerOptions = this.writer.filterOptions(writerOptions);
	      this.stringify = new XMLStringifier(options);
	      this.onDataCallback = onData || function() {};
	      this.onEndCallback = onEnd || function() {};
	      this.currentNode = null;
	      this.currentLevel = -1;
	      this.openTags = {};
	      this.documentStarted = false;
	      this.documentCompleted = false;
	      this.root = null;
	    }

	    XMLDocumentCB.prototype.createChildNode = function(node) {
	      var att, attName, attributes, child, i, len, ref1, ref2;
	      switch (node.type) {
	        case NodeType.CData:
	          this.cdata(node.value);
	          break;
	        case NodeType.Comment:
	          this.comment(node.value);
	          break;
	        case NodeType.Element:
	          attributes = {};
	          ref1 = node.attribs;
	          for (attName in ref1) {
	            if (!hasProp.call(ref1, attName)) continue;
	            att = ref1[attName];
	            attributes[attName] = att.value;
	          }
	          this.node(node.name, attributes);
	          break;
	        case NodeType.Dummy:
	          this.dummy();
	          break;
	        case NodeType.Raw:
	          this.raw(node.value);
	          break;
	        case NodeType.Text:
	          this.text(node.value);
	          break;
	        case NodeType.ProcessingInstruction:
	          this.instruction(node.target, node.value);
	          break;
	        default:
	          throw new Error("This XML node type is not supported in a JS object: " + node.constructor.name);
	      }
	      ref2 = node.children;
	      for (i = 0, len = ref2.length; i < len; i++) {
	        child = ref2[i];
	        this.createChildNode(child);
	        if (child.type === NodeType.Element) {
	          this.up();
	        }
	      }
	      return this;
	    };

	    XMLDocumentCB.prototype.dummy = function() {
	      return this;
	    };

	    XMLDocumentCB.prototype.node = function(name, attributes, text) {
	      var ref1;
	      if (name == null) {
	        throw new Error("Missing node name.");
	      }
	      if (this.root && this.currentLevel === -1) {
	        throw new Error("Document can only have one root node. " + this.debugInfo(name));
	      }
	      this.openCurrent();
	      name = getValue(name);
	      if (attributes == null) {
	        attributes = {};
	      }
	      attributes = getValue(attributes);
	      if (!isObject(attributes)) {
	        ref1 = [attributes, text], text = ref1[0], attributes = ref1[1];
	      }
	      this.currentNode = new XMLElement(this, name, attributes);
	      this.currentNode.children = false;
	      this.currentLevel++;
	      this.openTags[this.currentLevel] = this.currentNode;
	      if (text != null) {
	        this.text(text);
	      }
	      return this;
	    };

	    XMLDocumentCB.prototype.element = function(name, attributes, text) {
	      var child, i, len, oldValidationFlag, ref1, root;
	      if (this.currentNode && this.currentNode.type === NodeType.DocType) {
	        this.dtdElement.apply(this, arguments);
	      } else {
	        if (Array.isArray(name) || isObject(name) || isFunction(name)) {
	          oldValidationFlag = this.options.noValidation;
	          this.options.noValidation = true;
	          root = new XMLDocument(this.options).element('TEMP_ROOT');
	          root.element(name);
	          this.options.noValidation = oldValidationFlag;
	          ref1 = root.children;
	          for (i = 0, len = ref1.length; i < len; i++) {
	            child = ref1[i];
	            this.createChildNode(child);
	            if (child.type === NodeType.Element) {
	              this.up();
	            }
	          }
	        } else {
	          this.node(name, attributes, text);
	        }
	      }
	      return this;
	    };

	    XMLDocumentCB.prototype.attribute = function(name, value) {
	      var attName, attValue;
	      if (!this.currentNode || this.currentNode.children) {
	        throw new Error("att() can only be used immediately after an ele() call in callback mode. " + this.debugInfo(name));
	      }
	      if (name != null) {
	        name = getValue(name);
	      }
	      if (isObject(name)) {
	        for (attName in name) {
	          if (!hasProp.call(name, attName)) continue;
	          attValue = name[attName];
	          this.attribute(attName, attValue);
	        }
	      } else {
	        if (isFunction(value)) {
	          value = value.apply();
	        }
	        if (this.options.keepNullAttributes && (value == null)) {
	          this.currentNode.attribs[name] = new XMLAttribute(this, name, "");
	        } else if (value != null) {
	          this.currentNode.attribs[name] = new XMLAttribute(this, name, value);
	        }
	      }
	      return this;
	    };

	    XMLDocumentCB.prototype.text = function(value) {
	      var node;
	      this.openCurrent();
	      node = new XMLText(this, value);
	      this.onData(this.writer.text(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
	      return this;
	    };

	    XMLDocumentCB.prototype.cdata = function(value) {
	      var node;
	      this.openCurrent();
	      node = new XMLCData(this, value);
	      this.onData(this.writer.cdata(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
	      return this;
	    };

	    XMLDocumentCB.prototype.comment = function(value) {
	      var node;
	      this.openCurrent();
	      node = new XMLComment(this, value);
	      this.onData(this.writer.comment(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
	      return this;
	    };

	    XMLDocumentCB.prototype.raw = function(value) {
	      var node;
	      this.openCurrent();
	      node = new XMLRaw(this, value);
	      this.onData(this.writer.raw(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
	      return this;
	    };

	    XMLDocumentCB.prototype.instruction = function(target, value) {
	      var i, insTarget, insValue, len, node;
	      this.openCurrent();
	      if (target != null) {
	        target = getValue(target);
	      }
	      if (value != null) {
	        value = getValue(value);
	      }
	      if (Array.isArray(target)) {
	        for (i = 0, len = target.length; i < len; i++) {
	          insTarget = target[i];
	          this.instruction(insTarget);
	        }
	      } else if (isObject(target)) {
	        for (insTarget in target) {
	          if (!hasProp.call(target, insTarget)) continue;
	          insValue = target[insTarget];
	          this.instruction(insTarget, insValue);
	        }
	      } else {
	        if (isFunction(value)) {
	          value = value.apply();
	        }
	        node = new XMLProcessingInstruction(this, target, value);
	        this.onData(this.writer.processingInstruction(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
	      }
	      return this;
	    };

	    XMLDocumentCB.prototype.declaration = function(version, encoding, standalone) {
	      var node;
	      this.openCurrent();
	      if (this.documentStarted) {
	        throw new Error("declaration() must be the first node.");
	      }
	      node = new XMLDeclaration(this, version, encoding, standalone);
	      this.onData(this.writer.declaration(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
	      return this;
	    };

	    XMLDocumentCB.prototype.doctype = function(root, pubID, sysID) {
	      this.openCurrent();
	      if (root == null) {
	        throw new Error("Missing root node name.");
	      }
	      if (this.root) {
	        throw new Error("dtd() must come before the root node.");
	      }
	      this.currentNode = new XMLDocType(this, pubID, sysID);
	      this.currentNode.rootNodeName = root;
	      this.currentNode.children = false;
	      this.currentLevel++;
	      this.openTags[this.currentLevel] = this.currentNode;
	      return this;
	    };

	    XMLDocumentCB.prototype.dtdElement = function(name, value) {
	      var node;
	      this.openCurrent();
	      node = new XMLDTDElement(this, name, value);
	      this.onData(this.writer.dtdElement(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
	      return this;
	    };

	    XMLDocumentCB.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
	      var node;
	      this.openCurrent();
	      node = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
	      this.onData(this.writer.dtdAttList(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
	      return this;
	    };

	    XMLDocumentCB.prototype.entity = function(name, value) {
	      var node;
	      this.openCurrent();
	      node = new XMLDTDEntity(this, false, name, value);
	      this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
	      return this;
	    };

	    XMLDocumentCB.prototype.pEntity = function(name, value) {
	      var node;
	      this.openCurrent();
	      node = new XMLDTDEntity(this, true, name, value);
	      this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
	      return this;
	    };

	    XMLDocumentCB.prototype.notation = function(name, value) {
	      var node;
	      this.openCurrent();
	      node = new XMLDTDNotation(this, name, value);
	      this.onData(this.writer.dtdNotation(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
	      return this;
	    };

	    XMLDocumentCB.prototype.up = function() {
	      if (this.currentLevel < 0) {
	        throw new Error("The document node has no parent.");
	      }
	      if (this.currentNode) {
	        if (this.currentNode.children) {
	          this.closeNode(this.currentNode);
	        } else {
	          this.openNode(this.currentNode);
	        }
	        this.currentNode = null;
	      } else {
	        this.closeNode(this.openTags[this.currentLevel]);
	      }
	      delete this.openTags[this.currentLevel];
	      this.currentLevel--;
	      return this;
	    };

	    XMLDocumentCB.prototype.end = function() {
	      while (this.currentLevel >= 0) {
	        this.up();
	      }
	      return this.onEnd();
	    };

	    XMLDocumentCB.prototype.openCurrent = function() {
	      if (this.currentNode) {
	        this.currentNode.children = true;
	        return this.openNode(this.currentNode);
	      }
	    };

	    XMLDocumentCB.prototype.openNode = function(node) {
	      var att, chunk, name, ref1;
	      if (!node.isOpen) {
	        if (!this.root && this.currentLevel === 0 && node.type === NodeType.Element) {
	          this.root = node;
	        }
	        chunk = '';
	        if (node.type === NodeType.Element) {
	          this.writerOptions.state = WriterState.OpenTag;
	          chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + '<' + node.name;
	          ref1 = node.attribs;
	          for (name in ref1) {
	            if (!hasProp.call(ref1, name)) continue;
	            att = ref1[name];
	            chunk += this.writer.attribute(att, this.writerOptions, this.currentLevel);
	          }
	          chunk += (node.children ? '>' : '/>') + this.writer.endline(node, this.writerOptions, this.currentLevel);
	          this.writerOptions.state = WriterState.InsideTag;
	        } else {
	          this.writerOptions.state = WriterState.OpenTag;
	          chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + '<!DOCTYPE ' + node.rootNodeName;
	          if (node.pubID && node.sysID) {
	            chunk += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
	          } else if (node.sysID) {
	            chunk += ' SYSTEM "' + node.sysID + '"';
	          }
	          if (node.children) {
	            chunk += ' [';
	            this.writerOptions.state = WriterState.InsideTag;
	          } else {
	            this.writerOptions.state = WriterState.CloseTag;
	            chunk += '>';
	          }
	          chunk += this.writer.endline(node, this.writerOptions, this.currentLevel);
	        }
	        this.onData(chunk, this.currentLevel);
	        return node.isOpen = true;
	      }
	    };

	    XMLDocumentCB.prototype.closeNode = function(node) {
	      var chunk;
	      if (!node.isClosed) {
	        chunk = '';
	        this.writerOptions.state = WriterState.CloseTag;
	        if (node.type === NodeType.Element) {
	          chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + '</' + node.name + '>' + this.writer.endline(node, this.writerOptions, this.currentLevel);
	        } else {
	          chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + ']>' + this.writer.endline(node, this.writerOptions, this.currentLevel);
	        }
	        this.writerOptions.state = WriterState.None;
	        this.onData(chunk, this.currentLevel);
	        return node.isClosed = true;
	      }
	    };

	    XMLDocumentCB.prototype.onData = function(chunk, level) {
	      this.documentStarted = true;
	      return this.onDataCallback(chunk, level + 1);
	    };

	    XMLDocumentCB.prototype.onEnd = function() {
	      this.documentCompleted = true;
	      return this.onEndCallback();
	    };

	    XMLDocumentCB.prototype.debugInfo = function(name) {
	      if (name == null) {
	        return "";
	      } else {
	        return "node: <" + name + ">";
	      }
	    };

	    XMLDocumentCB.prototype.ele = function() {
	      return this.element.apply(this, arguments);
	    };

	    XMLDocumentCB.prototype.nod = function(name, attributes, text) {
	      return this.node(name, attributes, text);
	    };

	    XMLDocumentCB.prototype.txt = function(value) {
	      return this.text(value);
	    };

	    XMLDocumentCB.prototype.dat = function(value) {
	      return this.cdata(value);
	    };

	    XMLDocumentCB.prototype.com = function(value) {
	      return this.comment(value);
	    };

	    XMLDocumentCB.prototype.ins = function(target, value) {
	      return this.instruction(target, value);
	    };

	    XMLDocumentCB.prototype.dec = function(version, encoding, standalone) {
	      return this.declaration(version, encoding, standalone);
	    };

	    XMLDocumentCB.prototype.dtd = function(root, pubID, sysID) {
	      return this.doctype(root, pubID, sysID);
	    };

	    XMLDocumentCB.prototype.e = function(name, attributes, text) {
	      return this.element(name, attributes, text);
	    };

	    XMLDocumentCB.prototype.n = function(name, attributes, text) {
	      return this.node(name, attributes, text);
	    };

	    XMLDocumentCB.prototype.t = function(value) {
	      return this.text(value);
	    };

	    XMLDocumentCB.prototype.d = function(value) {
	      return this.cdata(value);
	    };

	    XMLDocumentCB.prototype.c = function(value) {
	      return this.comment(value);
	    };

	    XMLDocumentCB.prototype.r = function(value) {
	      return this.raw(value);
	    };

	    XMLDocumentCB.prototype.i = function(target, value) {
	      return this.instruction(target, value);
	    };

	    XMLDocumentCB.prototype.att = function() {
	      if (this.currentNode && this.currentNode.type === NodeType.DocType) {
	        return this.attList.apply(this, arguments);
	      } else {
	        return this.attribute.apply(this, arguments);
	      }
	    };

	    XMLDocumentCB.prototype.a = function() {
	      if (this.currentNode && this.currentNode.type === NodeType.DocType) {
	        return this.attList.apply(this, arguments);
	      } else {
	        return this.attribute.apply(this, arguments);
	      }
	    };

	    XMLDocumentCB.prototype.ent = function(name, value) {
	      return this.entity(name, value);
	    };

	    XMLDocumentCB.prototype.pent = function(name, value) {
	      return this.pEntity(name, value);
	    };

	    XMLDocumentCB.prototype.not = function(name, value) {
	      return this.notation(name, value);
	    };

	    return XMLDocumentCB;

	  })();

	}).call(XMLDocumentCB);
	return XMLDocumentCB$1.exports;
}

var XMLStreamWriter$1 = {exports: {}};

var XMLStreamWriter = XMLStreamWriter$1.exports;

var hasRequiredXMLStreamWriter;

function requireXMLStreamWriter () {
	if (hasRequiredXMLStreamWriter) return XMLStreamWriter$1.exports;
	hasRequiredXMLStreamWriter = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType, WriterState, XMLWriterBase,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  NodeType = requireNodeType();

	  XMLWriterBase = requireXMLWriterBase();

	  WriterState = requireWriterState();

	  XMLStreamWriter$1.exports = (function(superClass) {
	    extend(XMLStreamWriter, superClass);

	    function XMLStreamWriter(stream, options) {
	      this.stream = stream;
	      XMLStreamWriter.__super__.constructor.call(this, options);
	    }

	    XMLStreamWriter.prototype.endline = function(node, options, level) {
	      if (node.isLastRootNode && options.state === WriterState.CloseTag) {
	        return '';
	      } else {
	        return XMLStreamWriter.__super__.endline.call(this, node, options, level);
	      }
	    };

	    XMLStreamWriter.prototype.document = function(doc, options) {
	      var child, i, j, k, len, len1, ref, ref1, results;
	      ref = doc.children;
	      for (i = j = 0, len = ref.length; j < len; i = ++j) {
	        child = ref[i];
	        child.isLastRootNode = i === doc.children.length - 1;
	      }
	      options = this.filterOptions(options);
	      ref1 = doc.children;
	      results = [];
	      for (k = 0, len1 = ref1.length; k < len1; k++) {
	        child = ref1[k];
	        results.push(this.writeChildNode(child, options, 0));
	      }
	      return results;
	    };

	    XMLStreamWriter.prototype.attribute = function(att, options, level) {
	      return this.stream.write(XMLStreamWriter.__super__.attribute.call(this, att, options, level));
	    };

	    XMLStreamWriter.prototype.cdata = function(node, options, level) {
	      return this.stream.write(XMLStreamWriter.__super__.cdata.call(this, node, options, level));
	    };

	    XMLStreamWriter.prototype.comment = function(node, options, level) {
	      return this.stream.write(XMLStreamWriter.__super__.comment.call(this, node, options, level));
	    };

	    XMLStreamWriter.prototype.declaration = function(node, options, level) {
	      return this.stream.write(XMLStreamWriter.__super__.declaration.call(this, node, options, level));
	    };

	    XMLStreamWriter.prototype.docType = function(node, options, level) {
	      var child, j, len, ref;
	      level || (level = 0);
	      this.openNode(node, options, level);
	      options.state = WriterState.OpenTag;
	      this.stream.write(this.indent(node, options, level));
	      this.stream.write('<!DOCTYPE ' + node.root().name);
	      if (node.pubID && node.sysID) {
	        this.stream.write(' PUBLIC "' + node.pubID + '" "' + node.sysID + '"');
	      } else if (node.sysID) {
	        this.stream.write(' SYSTEM "' + node.sysID + '"');
	      }
	      if (node.children.length > 0) {
	        this.stream.write(' [');
	        this.stream.write(this.endline(node, options, level));
	        options.state = WriterState.InsideTag;
	        ref = node.children;
	        for (j = 0, len = ref.length; j < len; j++) {
	          child = ref[j];
	          this.writeChildNode(child, options, level + 1);
	        }
	        options.state = WriterState.CloseTag;
	        this.stream.write(']');
	      }
	      options.state = WriterState.CloseTag;
	      this.stream.write(options.spaceBeforeSlash + '>');
	      this.stream.write(this.endline(node, options, level));
	      options.state = WriterState.None;
	      return this.closeNode(node, options, level);
	    };

	    XMLStreamWriter.prototype.element = function(node, options, level) {
	      var att, child, childNodeCount, firstChildNode, j, len, name, ref, ref1;
	      level || (level = 0);
	      this.openNode(node, options, level);
	      options.state = WriterState.OpenTag;
	      this.stream.write(this.indent(node, options, level) + '<' + node.name);
	      ref = node.attribs;
	      for (name in ref) {
	        if (!hasProp.call(ref, name)) continue;
	        att = ref[name];
	        this.attribute(att, options, level);
	      }
	      childNodeCount = node.children.length;
	      firstChildNode = childNodeCount === 0 ? null : node.children[0];
	      if (childNodeCount === 0 || node.children.every(function(e) {
	        return (e.type === NodeType.Text || e.type === NodeType.Raw) && e.value === '';
	      })) {
	        if (options.allowEmpty) {
	          this.stream.write('>');
	          options.state = WriterState.CloseTag;
	          this.stream.write('</' + node.name + '>');
	        } else {
	          options.state = WriterState.CloseTag;
	          this.stream.write(options.spaceBeforeSlash + '/>');
	        }
	      } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && (firstChildNode.value != null)) {
	        this.stream.write('>');
	        options.state = WriterState.InsideTag;
	        options.suppressPrettyCount++;
	        this.writeChildNode(firstChildNode, options, level + 1);
	        options.suppressPrettyCount--;
	        options.state = WriterState.CloseTag;
	        this.stream.write('</' + node.name + '>');
	      } else {
	        this.stream.write('>' + this.endline(node, options, level));
	        options.state = WriterState.InsideTag;
	        ref1 = node.children;
	        for (j = 0, len = ref1.length; j < len; j++) {
	          child = ref1[j];
	          this.writeChildNode(child, options, level + 1);
	        }
	        options.state = WriterState.CloseTag;
	        this.stream.write(this.indent(node, options, level) + '</' + node.name + '>');
	      }
	      this.stream.write(this.endline(node, options, level));
	      options.state = WriterState.None;
	      return this.closeNode(node, options, level);
	    };

	    XMLStreamWriter.prototype.processingInstruction = function(node, options, level) {
	      return this.stream.write(XMLStreamWriter.__super__.processingInstruction.call(this, node, options, level));
	    };

	    XMLStreamWriter.prototype.raw = function(node, options, level) {
	      return this.stream.write(XMLStreamWriter.__super__.raw.call(this, node, options, level));
	    };

	    XMLStreamWriter.prototype.text = function(node, options, level) {
	      return this.stream.write(XMLStreamWriter.__super__.text.call(this, node, options, level));
	    };

	    XMLStreamWriter.prototype.dtdAttList = function(node, options, level) {
	      return this.stream.write(XMLStreamWriter.__super__.dtdAttList.call(this, node, options, level));
	    };

	    XMLStreamWriter.prototype.dtdElement = function(node, options, level) {
	      return this.stream.write(XMLStreamWriter.__super__.dtdElement.call(this, node, options, level));
	    };

	    XMLStreamWriter.prototype.dtdEntity = function(node, options, level) {
	      return this.stream.write(XMLStreamWriter.__super__.dtdEntity.call(this, node, options, level));
	    };

	    XMLStreamWriter.prototype.dtdNotation = function(node, options, level) {
	      return this.stream.write(XMLStreamWriter.__super__.dtdNotation.call(this, node, options, level));
	    };

	    return XMLStreamWriter;

	  })(XMLWriterBase);

	}).call(XMLStreamWriter);
	return XMLStreamWriter$1.exports;
}

var hasRequiredLib$1;

function requireLib$1 () {
	if (hasRequiredLib$1) return lib$1;
	hasRequiredLib$1 = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType, WriterState, XMLDOMImplementation, XMLDocument, XMLDocumentCB, XMLStreamWriter, XMLStringWriter, assign, isFunction, ref;

	  ref = requireUtility(), assign = ref.assign, isFunction = ref.isFunction;

	  XMLDOMImplementation = requireXMLDOMImplementation();

	  XMLDocument = requireXMLDocument();

	  XMLDocumentCB = requireXMLDocumentCB();

	  XMLStringWriter = requireXMLStringWriter();

	  XMLStreamWriter = requireXMLStreamWriter();

	  NodeType = requireNodeType();

	  WriterState = requireWriterState();

	  lib$1.create = function(name, xmldec, doctype, options) {
	    var doc, root;
	    if (name == null) {
	      throw new Error("Root element needs a name.");
	    }
	    options = assign({}, xmldec, doctype, options);
	    doc = new XMLDocument(options);
	    root = doc.element(name);
	    if (!options.headless) {
	      doc.declaration(options);
	      if ((options.pubID != null) || (options.sysID != null)) {
	        doc.dtd(options);
	      }
	    }
	    return root;
	  };

	  lib$1.begin = function(options, onData, onEnd) {
	    var ref1;
	    if (isFunction(options)) {
	      ref1 = [options, onData], onData = ref1[0], onEnd = ref1[1];
	      options = {};
	    }
	    if (onData) {
	      return new XMLDocumentCB(options, onData, onEnd);
	    } else {
	      return new XMLDocument(options);
	    }
	  };

	  lib$1.stringWriter = function(options) {
	    return new XMLStringWriter(options);
	  };

	  lib$1.streamWriter = function(stream, options) {
	    return new XMLStreamWriter(stream, options);
	  };

	  lib$1.implementation = new XMLDOMImplementation();

	  lib$1.nodeType = NodeType;

	  lib$1.writerState = WriterState;

	}).call(lib$1);
	return lib$1;
}

var hasRequiredBuilder;

function requireBuilder () {
	if (hasRequiredBuilder) return builder;
	hasRequiredBuilder = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var builder$1, defaults, escapeCDATA, requiresCDATA, wrapCDATA,
	    hasProp = {}.hasOwnProperty;

	  builder$1 = requireLib$1();

	  defaults = requireDefaults().defaults;

	  requiresCDATA = function(entry) {
	    return typeof entry === "string" && (entry.indexOf('&') >= 0 || entry.indexOf('>') >= 0 || entry.indexOf('<') >= 0);
	  };

	  wrapCDATA = function(entry) {
	    return "<![CDATA[" + (escapeCDATA(entry)) + "]]>";
	  };

	  escapeCDATA = function(entry) {
	    return entry.replace(']]>', ']]]]><![CDATA[>');
	  };

	  builder.Builder = (function() {
	    function Builder(opts) {
	      var key, ref, value;
	      this.options = {};
	      ref = defaults["0.2"];
	      for (key in ref) {
	        if (!hasProp.call(ref, key)) continue;
	        value = ref[key];
	        this.options[key] = value;
	      }
	      for (key in opts) {
	        if (!hasProp.call(opts, key)) continue;
	        value = opts[key];
	        this.options[key] = value;
	      }
	    }

	    Builder.prototype.buildObject = function(rootObj) {
	      var attrkey, charkey, render, rootElement, rootName;
	      attrkey = this.options.attrkey;
	      charkey = this.options.charkey;
	      if ((Object.keys(rootObj).length === 1) && (this.options.rootName === defaults['0.2'].rootName)) {
	        rootName = Object.keys(rootObj)[0];
	        rootObj = rootObj[rootName];
	      } else {
	        rootName = this.options.rootName;
	      }
	      render = (function(_this) {
	        return function(element, obj) {
	          var attr, child, entry, index, key, value;
	          if (typeof obj !== 'object') {
	            if (_this.options.cdata && requiresCDATA(obj)) {
	              element.raw(wrapCDATA(obj));
	            } else {
	              element.txt(obj);
	            }
	          } else if (Array.isArray(obj)) {
	            for (index in obj) {
	              if (!hasProp.call(obj, index)) continue;
	              child = obj[index];
	              for (key in child) {
	                entry = child[key];
	                element = render(element.ele(key), entry).up();
	              }
	            }
	          } else {
	            for (key in obj) {
	              if (!hasProp.call(obj, key)) continue;
	              child = obj[key];
	              if (key === attrkey) {
	                if (typeof child === "object") {
	                  for (attr in child) {
	                    value = child[attr];
	                    element = element.att(attr, value);
	                  }
	                }
	              } else if (key === charkey) {
	                if (_this.options.cdata && requiresCDATA(child)) {
	                  element = element.raw(wrapCDATA(child));
	                } else {
	                  element = element.txt(child);
	                }
	              } else if (Array.isArray(child)) {
	                for (index in child) {
	                  if (!hasProp.call(child, index)) continue;
	                  entry = child[index];
	                  if (typeof entry === 'string') {
	                    if (_this.options.cdata && requiresCDATA(entry)) {
	                      element = element.ele(key).raw(wrapCDATA(entry)).up();
	                    } else {
	                      element = element.ele(key, entry).up();
	                    }
	                  } else {
	                    element = render(element.ele(key), entry).up();
	                  }
	                }
	              } else if (typeof child === "object") {
	                element = render(element.ele(key), child).up();
	              } else {
	                if (typeof child === 'string' && _this.options.cdata && requiresCDATA(child)) {
	                  element = element.ele(key).raw(wrapCDATA(child)).up();
	                } else {
	                  if (child == null) {
	                    child = '';
	                  }
	                  element = element.ele(key, child.toString()).up();
	                }
	              }
	            }
	          }
	          return element;
	        };
	      })(this);
	      rootElement = builder$1.create(rootName, this.options.xmldec, this.options.doctype, {
	        headless: this.options.headless,
	        allowSurrogateChars: this.options.allowSurrogateChars
	      });
	      return render(rootElement, rootObj).end(this.options.renderOpts);
	    };

	    return Builder;

	  })();

	}).call(builder);
	return builder;
}

var parser$2 = {};

var sax = {};

var hasRequiredSax;

function requireSax () {
	if (hasRequiredSax) return sax;
	hasRequiredSax = 1;
	(function (exports) {
(function (sax) { // wrapper for non-node envs
		  sax.parser = function (strict, opt) { return new SAXParser(strict, opt) };
		  sax.SAXParser = SAXParser;
		  sax.SAXStream = SAXStream;
		  sax.createStream = createStream;

		  // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.
		  // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),
		  // since that's the earliest that a buffer overrun could occur.  This way, checks are
		  // as rare as required, but as often as necessary to ensure never crossing this bound.
		  // Furthermore, buffers are only tested at most once per write(), so passing a very
		  // large string into write() might have undesirable effects, but this is manageable by
		  // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme
		  // edge case, result in creating at most one complete copy of the string passed in.
		  // Set to Infinity to have unlimited buffers.
		  sax.MAX_BUFFER_LENGTH = 64 * 1024;

		  var buffers = [
		    'comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype',
		    'procInstName', 'procInstBody', 'entity', 'attribName',
		    'attribValue', 'cdata', 'script'
		  ];

		  sax.EVENTS = [
		    'text',
		    'processinginstruction',
		    'sgmldeclaration',
		    'doctype',
		    'comment',
		    'opentagstart',
		    'attribute',
		    'opentag',
		    'closetag',
		    'opencdata',
		    'cdata',
		    'closecdata',
		    'error',
		    'end',
		    'ready',
		    'script',
		    'opennamespace',
		    'closenamespace'
		  ];

		  function SAXParser (strict, opt) {
		    if (!(this instanceof SAXParser)) {
		      return new SAXParser(strict, opt)
		    }

		    var parser = this;
		    clearBuffers(parser);
		    parser.q = parser.c = '';
		    parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH;
		    parser.opt = opt || {};
		    parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags;
		    parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase';
		    parser.tags = [];
		    parser.closed = parser.closedRoot = parser.sawRoot = false;
		    parser.tag = parser.error = null;
		    parser.strict = !!strict;
		    parser.noscript = !!(strict || parser.opt.noscript);
		    parser.state = S.BEGIN;
		    parser.strictEntities = parser.opt.strictEntities;
		    parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES);
		    parser.attribList = [];

		    // namespaces form a prototype chain.
		    // it always points at the current tag,
		    // which protos to its parent tag.
		    if (parser.opt.xmlns) {
		      parser.ns = Object.create(rootNS);
		    }

		    // disallow unquoted attribute values if not otherwise configured
		    // and strict mode is true
		    if (parser.opt.unquotedAttributeValues === undefined) {
		      parser.opt.unquotedAttributeValues = !strict;
		    }

		    // mostly just for error reporting
		    parser.trackPosition = parser.opt.position !== false;
		    if (parser.trackPosition) {
		      parser.position = parser.line = parser.column = 0;
		    }
		    emit(parser, 'onready');
		  }

		  if (!Object.create) {
		    Object.create = function (o) {
		      function F () {}
		      F.prototype = o;
		      var newf = new F();
		      return newf
		    };
		  }

		  if (!Object.keys) {
		    Object.keys = function (o) {
		      var a = [];
		      for (var i in o) if (o.hasOwnProperty(i)) a.push(i);
		      return a
		    };
		  }

		  function checkBufferLength (parser) {
		    var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10);
		    var maxActual = 0;
		    for (var i = 0, l = buffers.length; i < l; i++) {
		      var len = parser[buffers[i]].length;
		      if (len > maxAllowed) {
		        // Text/cdata nodes can get big, and since they're buffered,
		        // we can get here under normal conditions.
		        // Avoid issues by emitting the text node now,
		        // so at least it won't get any bigger.
		        switch (buffers[i]) {
		          case 'textNode':
		            closeText(parser);
		            break

		          case 'cdata':
		            emitNode(parser, 'oncdata', parser.cdata);
		            parser.cdata = '';
		            break

		          case 'script':
		            emitNode(parser, 'onscript', parser.script);
		            parser.script = '';
		            break

		          default:
		            error(parser, 'Max buffer length exceeded: ' + buffers[i]);
		        }
		      }
		      maxActual = Math.max(maxActual, len);
		    }
		    // schedule the next check for the earliest possible buffer overrun.
		    var m = sax.MAX_BUFFER_LENGTH - maxActual;
		    parser.bufferCheckPosition = m + parser.position;
		  }

		  function clearBuffers (parser) {
		    for (var i = 0, l = buffers.length; i < l; i++) {
		      parser[buffers[i]] = '';
		    }
		  }

		  function flushBuffers (parser) {
		    closeText(parser);
		    if (parser.cdata !== '') {
		      emitNode(parser, 'oncdata', parser.cdata);
		      parser.cdata = '';
		    }
		    if (parser.script !== '') {
		      emitNode(parser, 'onscript', parser.script);
		      parser.script = '';
		    }
		  }

		  SAXParser.prototype = {
		    end: function () { end(this); },
		    write: write,
		    resume: function () { this.error = null; return this },
		    close: function () { return this.write(null) },
		    flush: function () { flushBuffers(this); }
		  };

		  var Stream;
		  try {
		    Stream = require('stream').Stream;
		  } catch (ex) {
		    Stream = function () {};
		  }
		  if (!Stream) Stream = function () {};

		  var streamWraps = sax.EVENTS.filter(function (ev) {
		    return ev !== 'error' && ev !== 'end'
		  });

		  function createStream (strict, opt) {
		    return new SAXStream(strict, opt)
		  }

		  function SAXStream (strict, opt) {
		    if (!(this instanceof SAXStream)) {
		      return new SAXStream(strict, opt)
		    }

		    Stream.apply(this);

		    this._parser = new SAXParser(strict, opt);
		    this.writable = true;
		    this.readable = true;

		    var me = this;

		    this._parser.onend = function () {
		      me.emit('end');
		    };

		    this._parser.onerror = function (er) {
		      me.emit('error', er);

		      // if didn't throw, then means error was handled.
		      // go ahead and clear error, so we can write again.
		      me._parser.error = null;
		    };

		    this._decoder = null;

		    streamWraps.forEach(function (ev) {
		      Object.defineProperty(me, 'on' + ev, {
		        get: function () {
		          return me._parser['on' + ev]
		        },
		        set: function (h) {
		          if (!h) {
		            me.removeAllListeners(ev);
		            me._parser['on' + ev] = h;
		            return h
		          }
		          me.on(ev, h);
		        },
		        enumerable: true,
		        configurable: false
		      });
		    });
		  }

		  SAXStream.prototype = Object.create(Stream.prototype, {
		    constructor: {
		      value: SAXStream
		    }
		  });

		  SAXStream.prototype.write = function (data) {
		    if (typeof Buffer === 'function' &&
		      typeof Buffer.isBuffer === 'function' &&
		      Buffer.isBuffer(data)) {
		      if (!this._decoder) {
		        var SD = require$$1$6.StringDecoder;
		        this._decoder = new SD('utf8');
		      }
		      data = this._decoder.write(data);
		    }

		    this._parser.write(data.toString());
		    this.emit('data', data);
		    return true
		  };

		  SAXStream.prototype.end = function (chunk) {
		    if (chunk && chunk.length) {
		      this.write(chunk);
		    }
		    this._parser.end();
		    return true
		  };

		  SAXStream.prototype.on = function (ev, handler) {
		    var me = this;
		    if (!me._parser['on' + ev] && streamWraps.indexOf(ev) !== -1) {
		      me._parser['on' + ev] = function () {
		        var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments);
		        args.splice(0, 0, ev);
		        me.emit.apply(me, args);
		      };
		    }

		    return Stream.prototype.on.call(me, ev, handler)
		  };

		  // this really needs to be replaced with character classes.
		  // XML allows all manner of ridiculous numbers and digits.
		  var CDATA = '[CDATA[';
		  var DOCTYPE = 'DOCTYPE';
		  var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace';
		  var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/';
		  var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE };

		  // http://www.w3.org/TR/REC-xml/#NT-NameStartChar
		  // This implementation works on strings, a single character at a time
		  // as such, it cannot ever support astral-plane characters (10000-EFFFF)
		  // without a significant breaking change to either this  parser, or the
		  // JavaScript language.  Implementation of an emoji-capable xml parser
		  // is left as an exercise for the reader.
		  var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;

		  var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;

		  var entityStart = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
		  var entityBody = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;

		  function isWhitespace (c) {
		    return c === ' ' || c === '\n' || c === '\r' || c === '\t'
		  }

		  function isQuote (c) {
		    return c === '"' || c === '\''
		  }

		  function isAttribEnd (c) {
		    return c === '>' || isWhitespace(c)
		  }

		  function isMatch (regex, c) {
		    return regex.test(c)
		  }

		  function notMatch (regex, c) {
		    return !isMatch(regex, c)
		  }

		  var S = 0;
		  sax.STATE = {
		    BEGIN: S++, // leading byte order mark or whitespace
		    BEGIN_WHITESPACE: S++, // leading whitespace
		    TEXT: S++, // general stuff
		    TEXT_ENTITY: S++, // &amp and such.
		    OPEN_WAKA: S++, // <
		    SGML_DECL: S++, // <!BLARG
		    SGML_DECL_QUOTED: S++, // <!BLARG foo "bar
		    DOCTYPE: S++, // <!DOCTYPE
		    DOCTYPE_QUOTED: S++, // <!DOCTYPE "//blah
		    DOCTYPE_DTD: S++, // <!DOCTYPE "//blah" [ ...
		    DOCTYPE_DTD_QUOTED: S++, // <!DOCTYPE "//blah" [ "foo
		    COMMENT_STARTING: S++, // <!-
		    COMMENT: S++, // <!--
		    COMMENT_ENDING: S++, // <!-- blah -
		    COMMENT_ENDED: S++, // <!-- blah --
		    CDATA: S++, // <![CDATA[ something
		    CDATA_ENDING: S++, // ]
		    CDATA_ENDING_2: S++, // ]]
		    PROC_INST: S++, // <?hi
		    PROC_INST_BODY: S++, // <?hi there
		    PROC_INST_ENDING: S++, // <?hi "there" ?
		    OPEN_TAG: S++, // <strong
		    OPEN_TAG_SLASH: S++, // <strong /
		    ATTRIB: S++, // <a
		    ATTRIB_NAME: S++, // <a foo
		    ATTRIB_NAME_SAW_WHITE: S++, // <a foo _
		    ATTRIB_VALUE: S++, // <a foo=
		    ATTRIB_VALUE_QUOTED: S++, // <a foo="bar
		    ATTRIB_VALUE_CLOSED: S++, // <a foo="bar"
		    ATTRIB_VALUE_UNQUOTED: S++, // <a foo=bar
		    ATTRIB_VALUE_ENTITY_Q: S++, // <foo bar="&quot;"
		    ATTRIB_VALUE_ENTITY_U: S++, // <foo bar=&quot
		    CLOSE_TAG: S++, // </a
		    CLOSE_TAG_SAW_WHITE: S++, // </a   >
		    SCRIPT: S++, // <script> ...
		    SCRIPT_ENDING: S++ // <script> ... <
		  };

		  sax.XML_ENTITIES = {
		    'amp': '&',
		    'gt': '>',
		    'lt': '<',
		    'quot': '"',
		    'apos': "'"
		  };

		  sax.ENTITIES = {
		    'amp': '&',
		    'gt': '>',
		    'lt': '<',
		    'quot': '"',
		    'apos': "'",
		    'AElig': 198,
		    'Aacute': 193,
		    'Acirc': 194,
		    'Agrave': 192,
		    'Aring': 197,
		    'Atilde': 195,
		    'Auml': 196,
		    'Ccedil': 199,
		    'ETH': 208,
		    'Eacute': 201,
		    'Ecirc': 202,
		    'Egrave': 200,
		    'Euml': 203,
		    'Iacute': 205,
		    'Icirc': 206,
		    'Igrave': 204,
		    'Iuml': 207,
		    'Ntilde': 209,
		    'Oacute': 211,
		    'Ocirc': 212,
		    'Ograve': 210,
		    'Oslash': 216,
		    'Otilde': 213,
		    'Ouml': 214,
		    'THORN': 222,
		    'Uacute': 218,
		    'Ucirc': 219,
		    'Ugrave': 217,
		    'Uuml': 220,
		    'Yacute': 221,
		    'aacute': 225,
		    'acirc': 226,
		    'aelig': 230,
		    'agrave': 224,
		    'aring': 229,
		    'atilde': 227,
		    'auml': 228,
		    'ccedil': 231,
		    'eacute': 233,
		    'ecirc': 234,
		    'egrave': 232,
		    'eth': 240,
		    'euml': 235,
		    'iacute': 237,
		    'icirc': 238,
		    'igrave': 236,
		    'iuml': 239,
		    'ntilde': 241,
		    'oacute': 243,
		    'ocirc': 244,
		    'ograve': 242,
		    'oslash': 248,
		    'otilde': 245,
		    'ouml': 246,
		    'szlig': 223,
		    'thorn': 254,
		    'uacute': 250,
		    'ucirc': 251,
		    'ugrave': 249,
		    'uuml': 252,
		    'yacute': 253,
		    'yuml': 255,
		    'copy': 169,
		    'reg': 174,
		    'nbsp': 160,
		    'iexcl': 161,
		    'cent': 162,
		    'pound': 163,
		    'curren': 164,
		    'yen': 165,
		    'brvbar': 166,
		    'sect': 167,
		    'uml': 168,
		    'ordf': 170,
		    'laquo': 171,
		    'not': 172,
		    'shy': 173,
		    'macr': 175,
		    'deg': 176,
		    'plusmn': 177,
		    'sup1': 185,
		    'sup2': 178,
		    'sup3': 179,
		    'acute': 180,
		    'micro': 181,
		    'para': 182,
		    'middot': 183,
		    'cedil': 184,
		    'ordm': 186,
		    'raquo': 187,
		    'frac14': 188,
		    'frac12': 189,
		    'frac34': 190,
		    'iquest': 191,
		    'times': 215,
		    'divide': 247,
		    'OElig': 338,
		    'oelig': 339,
		    'Scaron': 352,
		    'scaron': 353,
		    'Yuml': 376,
		    'fnof': 402,
		    'circ': 710,
		    'tilde': 732,
		    'Alpha': 913,
		    'Beta': 914,
		    'Gamma': 915,
		    'Delta': 916,
		    'Epsilon': 917,
		    'Zeta': 918,
		    'Eta': 919,
		    'Theta': 920,
		    'Iota': 921,
		    'Kappa': 922,
		    'Lambda': 923,
		    'Mu': 924,
		    'Nu': 925,
		    'Xi': 926,
		    'Omicron': 927,
		    'Pi': 928,
		    'Rho': 929,
		    'Sigma': 931,
		    'Tau': 932,
		    'Upsilon': 933,
		    'Phi': 934,
		    'Chi': 935,
		    'Psi': 936,
		    'Omega': 937,
		    'alpha': 945,
		    'beta': 946,
		    'gamma': 947,
		    'delta': 948,
		    'epsilon': 949,
		    'zeta': 950,
		    'eta': 951,
		    'theta': 952,
		    'iota': 953,
		    'kappa': 954,
		    'lambda': 955,
		    'mu': 956,
		    'nu': 957,
		    'xi': 958,
		    'omicron': 959,
		    'pi': 960,
		    'rho': 961,
		    'sigmaf': 962,
		    'sigma': 963,
		    'tau': 964,
		    'upsilon': 965,
		    'phi': 966,
		    'chi': 967,
		    'psi': 968,
		    'omega': 969,
		    'thetasym': 977,
		    'upsih': 978,
		    'piv': 982,
		    'ensp': 8194,
		    'emsp': 8195,
		    'thinsp': 8201,
		    'zwnj': 8204,
		    'zwj': 8205,
		    'lrm': 8206,
		    'rlm': 8207,
		    'ndash': 8211,
		    'mdash': 8212,
		    'lsquo': 8216,
		    'rsquo': 8217,
		    'sbquo': 8218,
		    'ldquo': 8220,
		    'rdquo': 8221,
		    'bdquo': 8222,
		    'dagger': 8224,
		    'Dagger': 8225,
		    'bull': 8226,
		    'hellip': 8230,
		    'permil': 8240,
		    'prime': 8242,
		    'Prime': 8243,
		    'lsaquo': 8249,
		    'rsaquo': 8250,
		    'oline': 8254,
		    'frasl': 8260,
		    'euro': 8364,
		    'image': 8465,
		    'weierp': 8472,
		    'real': 8476,
		    'trade': 8482,
		    'alefsym': 8501,
		    'larr': 8592,
		    'uarr': 8593,
		    'rarr': 8594,
		    'darr': 8595,
		    'harr': 8596,
		    'crarr': 8629,
		    'lArr': 8656,
		    'uArr': 8657,
		    'rArr': 8658,
		    'dArr': 8659,
		    'hArr': 8660,
		    'forall': 8704,
		    'part': 8706,
		    'exist': 8707,
		    'empty': 8709,
		    'nabla': 8711,
		    'isin': 8712,
		    'notin': 8713,
		    'ni': 8715,
		    'prod': 8719,
		    'sum': 8721,
		    'minus': 8722,
		    'lowast': 8727,
		    'radic': 8730,
		    'prop': 8733,
		    'infin': 8734,
		    'ang': 8736,
		    'and': 8743,
		    'or': 8744,
		    'cap': 8745,
		    'cup': 8746,
		    'int': 8747,
		    'there4': 8756,
		    'sim': 8764,
		    'cong': 8773,
		    'asymp': 8776,
		    'ne': 8800,
		    'equiv': 8801,
		    'le': 8804,
		    'ge': 8805,
		    'sub': 8834,
		    'sup': 8835,
		    'nsub': 8836,
		    'sube': 8838,
		    'supe': 8839,
		    'oplus': 8853,
		    'otimes': 8855,
		    'perp': 8869,
		    'sdot': 8901,
		    'lceil': 8968,
		    'rceil': 8969,
		    'lfloor': 8970,
		    'rfloor': 8971,
		    'lang': 9001,
		    'rang': 9002,
		    'loz': 9674,
		    'spades': 9824,
		    'clubs': 9827,
		    'hearts': 9829,
		    'diams': 9830
		  };

		  Object.keys(sax.ENTITIES).forEach(function (key) {
		    var e = sax.ENTITIES[key];
		    var s = typeof e === 'number' ? String.fromCharCode(e) : e;
		    sax.ENTITIES[key] = s;
		  });

		  for (var s in sax.STATE) {
		    sax.STATE[sax.STATE[s]] = s;
		  }

		  // shorthand
		  S = sax.STATE;

		  function emit (parser, event, data) {
		    parser[event] && parser[event](data);
		  }

		  function emitNode (parser, nodeType, data) {
		    if (parser.textNode) closeText(parser);
		    emit(parser, nodeType, data);
		  }

		  function closeText (parser) {
		    parser.textNode = textopts(parser.opt, parser.textNode);
		    if (parser.textNode) emit(parser, 'ontext', parser.textNode);
		    parser.textNode = '';
		  }

		  function textopts (opt, text) {
		    if (opt.trim) text = text.trim();
		    if (opt.normalize) text = text.replace(/\s+/g, ' ');
		    return text
		  }

		  function error (parser, er) {
		    closeText(parser);
		    if (parser.trackPosition) {
		      er += '\nLine: ' + parser.line +
		        '\nColumn: ' + parser.column +
		        '\nChar: ' + parser.c;
		    }
		    er = new Error(er);
		    parser.error = er;
		    emit(parser, 'onerror', er);
		    return parser
		  }

		  function end (parser) {
		    if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag');
		    if ((parser.state !== S.BEGIN) &&
		      (parser.state !== S.BEGIN_WHITESPACE) &&
		      (parser.state !== S.TEXT)) {
		      error(parser, 'Unexpected end');
		    }
		    closeText(parser);
		    parser.c = '';
		    parser.closed = true;
		    emit(parser, 'onend');
		    SAXParser.call(parser, parser.strict, parser.opt);
		    return parser
		  }

		  function strictFail (parser, message) {
		    if (typeof parser !== 'object' || !(parser instanceof SAXParser)) {
		      throw new Error('bad call to strictFail')
		    }
		    if (parser.strict) {
		      error(parser, message);
		    }
		  }

		  function newTag (parser) {
		    if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]();
		    var parent = parser.tags[parser.tags.length - 1] || parser;
		    var tag = parser.tag = { name: parser.tagName, attributes: {} };

		    // will be overridden if tag contails an xmlns="foo" or xmlns:foo="bar"
		    if (parser.opt.xmlns) {
		      tag.ns = parent.ns;
		    }
		    parser.attribList.length = 0;
		    emitNode(parser, 'onopentagstart', tag);
		  }

		  function qname (name, attribute) {
		    var i = name.indexOf(':');
		    var qualName = i < 0 ? [ '', name ] : name.split(':');
		    var prefix = qualName[0];
		    var local = qualName[1];

		    // <x "xmlns"="http://foo">
		    if (attribute && name === 'xmlns') {
		      prefix = 'xmlns';
		      local = '';
		    }

		    return { prefix: prefix, local: local }
		  }

		  function attrib (parser) {
		    if (!parser.strict) {
		      parser.attribName = parser.attribName[parser.looseCase]();
		    }

		    if (parser.attribList.indexOf(parser.attribName) !== -1 ||
		      parser.tag.attributes.hasOwnProperty(parser.attribName)) {
		      parser.attribName = parser.attribValue = '';
		      return
		    }

		    if (parser.opt.xmlns) {
		      var qn = qname(parser.attribName, true);
		      var prefix = qn.prefix;
		      var local = qn.local;

		      if (prefix === 'xmlns') {
		        // namespace binding attribute. push the binding into scope
		        if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {
		          strictFail(parser,
		            'xml: prefix must be bound to ' + XML_NAMESPACE + '\n' +
		            'Actual: ' + parser.attribValue);
		        } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {
		          strictFail(parser,
		            'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\n' +
		            'Actual: ' + parser.attribValue);
		        } else {
		          var tag = parser.tag;
		          var parent = parser.tags[parser.tags.length - 1] || parser;
		          if (tag.ns === parent.ns) {
		            tag.ns = Object.create(parent.ns);
		          }
		          tag.ns[local] = parser.attribValue;
		        }
		      }

		      // defer onattribute events until all attributes have been seen
		      // so any new bindings can take effect. preserve attribute order
		      // so deferred events can be emitted in document order
		      parser.attribList.push([parser.attribName, parser.attribValue]);
		    } else {
		      // in non-xmlns mode, we can emit the event right away
		      parser.tag.attributes[parser.attribName] = parser.attribValue;
		      emitNode(parser, 'onattribute', {
		        name: parser.attribName,
		        value: parser.attribValue
		      });
		    }

		    parser.attribName = parser.attribValue = '';
		  }

		  function openTag (parser, selfClosing) {
		    if (parser.opt.xmlns) {
		      // emit namespace binding events
		      var tag = parser.tag;

		      // add namespace info to tag
		      var qn = qname(parser.tagName);
		      tag.prefix = qn.prefix;
		      tag.local = qn.local;
		      tag.uri = tag.ns[qn.prefix] || '';

		      if (tag.prefix && !tag.uri) {
		        strictFail(parser, 'Unbound namespace prefix: ' +
		          JSON.stringify(parser.tagName));
		        tag.uri = qn.prefix;
		      }

		      var parent = parser.tags[parser.tags.length - 1] || parser;
		      if (tag.ns && parent.ns !== tag.ns) {
		        Object.keys(tag.ns).forEach(function (p) {
		          emitNode(parser, 'onopennamespace', {
		            prefix: p,
		            uri: tag.ns[p]
		          });
		        });
		      }

		      // handle deferred onattribute events
		      // Note: do not apply default ns to attributes:
		      //   http://www.w3.org/TR/REC-xml-names/#defaulting
		      for (var i = 0, l = parser.attribList.length; i < l; i++) {
		        var nv = parser.attribList[i];
		        var name = nv[0];
		        var value = nv[1];
		        var qualName = qname(name, true);
		        var prefix = qualName.prefix;
		        var local = qualName.local;
		        var uri = prefix === '' ? '' : (tag.ns[prefix] || '');
		        var a = {
		          name: name,
		          value: value,
		          prefix: prefix,
		          local: local,
		          uri: uri
		        };

		        // if there's any attributes with an undefined namespace,
		        // then fail on them now.
		        if (prefix && prefix !== 'xmlns' && !uri) {
		          strictFail(parser, 'Unbound namespace prefix: ' +
		            JSON.stringify(prefix));
		          a.uri = prefix;
		        }
		        parser.tag.attributes[name] = a;
		        emitNode(parser, 'onattribute', a);
		      }
		      parser.attribList.length = 0;
		    }

		    parser.tag.isSelfClosing = !!selfClosing;

		    // process the tag
		    parser.sawRoot = true;
		    parser.tags.push(parser.tag);
		    emitNode(parser, 'onopentag', parser.tag);
		    if (!selfClosing) {
		      // special case for <script> in non-strict mode.
		      if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {
		        parser.state = S.SCRIPT;
		      } else {
		        parser.state = S.TEXT;
		      }
		      parser.tag = null;
		      parser.tagName = '';
		    }
		    parser.attribName = parser.attribValue = '';
		    parser.attribList.length = 0;
		  }

		  function closeTag (parser) {
		    if (!parser.tagName) {
		      strictFail(parser, 'Weird empty close tag.');
		      parser.textNode += '</>';
		      parser.state = S.TEXT;
		      return
		    }

		    if (parser.script) {
		      if (parser.tagName !== 'script') {
		        parser.script += '</' + parser.tagName + '>';
		        parser.tagName = '';
		        parser.state = S.SCRIPT;
		        return
		      }
		      emitNode(parser, 'onscript', parser.script);
		      parser.script = '';
		    }

		    // first make sure that the closing tag actually exists.
		    // <a><b></c></b></a> will close everything, otherwise.
		    var t = parser.tags.length;
		    var tagName = parser.tagName;
		    if (!parser.strict) {
		      tagName = tagName[parser.looseCase]();
		    }
		    var closeTo = tagName;
		    while (t--) {
		      var close = parser.tags[t];
		      if (close.name !== closeTo) {
		        // fail the first time in strict mode
		        strictFail(parser, 'Unexpected close tag');
		      } else {
		        break
		      }
		    }

		    // didn't find it.  we already failed for strict, so just abort.
		    if (t < 0) {
		      strictFail(parser, 'Unmatched closing tag: ' + parser.tagName);
		      parser.textNode += '</' + parser.tagName + '>';
		      parser.state = S.TEXT;
		      return
		    }
		    parser.tagName = tagName;
		    var s = parser.tags.length;
		    while (s-- > t) {
		      var tag = parser.tag = parser.tags.pop();
		      parser.tagName = parser.tag.name;
		      emitNode(parser, 'onclosetag', parser.tagName);

		      var x = {};
		      for (var i in tag.ns) {
		        x[i] = tag.ns[i];
		      }

		      var parent = parser.tags[parser.tags.length - 1] || parser;
		      if (parser.opt.xmlns && tag.ns !== parent.ns) {
		        // remove namespace bindings introduced by tag
		        Object.keys(tag.ns).forEach(function (p) {
		          var n = tag.ns[p];
		          emitNode(parser, 'onclosenamespace', { prefix: p, uri: n });
		        });
		      }
		    }
		    if (t === 0) parser.closedRoot = true;
		    parser.tagName = parser.attribValue = parser.attribName = '';
		    parser.attribList.length = 0;
		    parser.state = S.TEXT;
		  }

		  function parseEntity (parser) {
		    var entity = parser.entity;
		    var entityLC = entity.toLowerCase();
		    var num;
		    var numStr = '';

		    if (parser.ENTITIES[entity]) {
		      return parser.ENTITIES[entity]
		    }
		    if (parser.ENTITIES[entityLC]) {
		      return parser.ENTITIES[entityLC]
		    }
		    entity = entityLC;
		    if (entity.charAt(0) === '#') {
		      if (entity.charAt(1) === 'x') {
		        entity = entity.slice(2);
		        num = parseInt(entity, 16);
		        numStr = num.toString(16);
		      } else {
		        entity = entity.slice(1);
		        num = parseInt(entity, 10);
		        numStr = num.toString(10);
		      }
		    }
		    entity = entity.replace(/^0+/, '');
		    if (isNaN(num) || numStr.toLowerCase() !== entity) {
		      strictFail(parser, 'Invalid character entity');
		      return '&' + parser.entity + ';'
		    }

		    return String.fromCodePoint(num)
		  }

		  function beginWhiteSpace (parser, c) {
		    if (c === '<') {
		      parser.state = S.OPEN_WAKA;
		      parser.startTagPosition = parser.position;
		    } else if (!isWhitespace(c)) {
		      // have to process this as a text node.
		      // weird, but happens.
		      strictFail(parser, 'Non-whitespace before first tag.');
		      parser.textNode = c;
		      parser.state = S.TEXT;
		    }
		  }

		  function charAt (chunk, i) {
		    var result = '';
		    if (i < chunk.length) {
		      result = chunk.charAt(i);
		    }
		    return result
		  }

		  function write (chunk) {
		    var parser = this;
		    if (this.error) {
		      throw this.error
		    }
		    if (parser.closed) {
		      return error(parser,
		        'Cannot write after close. Assign an onready handler.')
		    }
		    if (chunk === null) {
		      return end(parser)
		    }
		    if (typeof chunk === 'object') {
		      chunk = chunk.toString();
		    }
		    var i = 0;
		    var c = '';
		    while (true) {
		      c = charAt(chunk, i++);
		      parser.c = c;

		      if (!c) {
		        break
		      }

		      if (parser.trackPosition) {
		        parser.position++;
		        if (c === '\n') {
		          parser.line++;
		          parser.column = 0;
		        } else {
		          parser.column++;
		        }
		      }

		      switch (parser.state) {
		        case S.BEGIN:
		          parser.state = S.BEGIN_WHITESPACE;
		          if (c === '\uFEFF') {
		            continue
		          }
		          beginWhiteSpace(parser, c);
		          continue

		        case S.BEGIN_WHITESPACE:
		          beginWhiteSpace(parser, c);
		          continue

		        case S.TEXT:
		          if (parser.sawRoot && !parser.closedRoot) {
		            var starti = i - 1;
		            while (c && c !== '<' && c !== '&') {
		              c = charAt(chunk, i++);
		              if (c && parser.trackPosition) {
		                parser.position++;
		                if (c === '\n') {
		                  parser.line++;
		                  parser.column = 0;
		                } else {
		                  parser.column++;
		                }
		              }
		            }
		            parser.textNode += chunk.substring(starti, i - 1);
		          }
		          if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {
		            parser.state = S.OPEN_WAKA;
		            parser.startTagPosition = parser.position;
		          } else {
		            if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {
		              strictFail(parser, 'Text data outside of root node.');
		            }
		            if (c === '&') {
		              parser.state = S.TEXT_ENTITY;
		            } else {
		              parser.textNode += c;
		            }
		          }
		          continue

		        case S.SCRIPT:
		          // only non-strict
		          if (c === '<') {
		            parser.state = S.SCRIPT_ENDING;
		          } else {
		            parser.script += c;
		          }
		          continue

		        case S.SCRIPT_ENDING:
		          if (c === '/') {
		            parser.state = S.CLOSE_TAG;
		          } else {
		            parser.script += '<' + c;
		            parser.state = S.SCRIPT;
		          }
		          continue

		        case S.OPEN_WAKA:
		          // either a /, ?, !, or text is coming next.
		          if (c === '!') {
		            parser.state = S.SGML_DECL;
		            parser.sgmlDecl = '';
		          } else if (isWhitespace(c)) ; else if (isMatch(nameStart, c)) {
		            parser.state = S.OPEN_TAG;
		            parser.tagName = c;
		          } else if (c === '/') {
		            parser.state = S.CLOSE_TAG;
		            parser.tagName = '';
		          } else if (c === '?') {
		            parser.state = S.PROC_INST;
		            parser.procInstName = parser.procInstBody = '';
		          } else {
		            strictFail(parser, 'Unencoded <');
		            // if there was some whitespace, then add that in.
		            if (parser.startTagPosition + 1 < parser.position) {
		              var pad = parser.position - parser.startTagPosition;
		              c = new Array(pad).join(' ') + c;
		            }
		            parser.textNode += '<' + c;
		            parser.state = S.TEXT;
		          }
		          continue

		        case S.SGML_DECL:
		          if (parser.sgmlDecl + c === '--') {
		            parser.state = S.COMMENT;
		            parser.comment = '';
		            parser.sgmlDecl = '';
		            continue;
		          }

		          if (parser.doctype && parser.doctype !== true && parser.sgmlDecl) {
		            parser.state = S.DOCTYPE_DTD;
		            parser.doctype += '<!' + parser.sgmlDecl + c;
		            parser.sgmlDecl = '';
		          } else if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {
		            emitNode(parser, 'onopencdata');
		            parser.state = S.CDATA;
		            parser.sgmlDecl = '';
		            parser.cdata = '';
		          } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {
		            parser.state = S.DOCTYPE;
		            if (parser.doctype || parser.sawRoot) {
		              strictFail(parser,
		                'Inappropriately located doctype declaration');
		            }
		            parser.doctype = '';
		            parser.sgmlDecl = '';
		          } else if (c === '>') {
		            emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl);
		            parser.sgmlDecl = '';
		            parser.state = S.TEXT;
		          } else if (isQuote(c)) {
		            parser.state = S.SGML_DECL_QUOTED;
		            parser.sgmlDecl += c;
		          } else {
		            parser.sgmlDecl += c;
		          }
		          continue

		        case S.SGML_DECL_QUOTED:
		          if (c === parser.q) {
		            parser.state = S.SGML_DECL;
		            parser.q = '';
		          }
		          parser.sgmlDecl += c;
		          continue

		        case S.DOCTYPE:
		          if (c === '>') {
		            parser.state = S.TEXT;
		            emitNode(parser, 'ondoctype', parser.doctype);
		            parser.doctype = true; // just remember that we saw it.
		          } else {
		            parser.doctype += c;
		            if (c === '[') {
		              parser.state = S.DOCTYPE_DTD;
		            } else if (isQuote(c)) {
		              parser.state = S.DOCTYPE_QUOTED;
		              parser.q = c;
		            }
		          }
		          continue

		        case S.DOCTYPE_QUOTED:
		          parser.doctype += c;
		          if (c === parser.q) {
		            parser.q = '';
		            parser.state = S.DOCTYPE;
		          }
		          continue

		        case S.DOCTYPE_DTD:
		          if (c === ']') {
		            parser.doctype += c;
		            parser.state = S.DOCTYPE;
		          } else if (c === '<') {
		            parser.state = S.OPEN_WAKA;
		            parser.startTagPosition = parser.position;
		          } else if (isQuote(c)) {
		            parser.doctype += c;
		            parser.state = S.DOCTYPE_DTD_QUOTED;
		            parser.q = c;
		          } else {
		            parser.doctype += c;
		          }
		          continue

		        case S.DOCTYPE_DTD_QUOTED:
		          parser.doctype += c;
		          if (c === parser.q) {
		            parser.state = S.DOCTYPE_DTD;
		            parser.q = '';
		          }
		          continue

		        case S.COMMENT:
		          if (c === '-') {
		            parser.state = S.COMMENT_ENDING;
		          } else {
		            parser.comment += c;
		          }
		          continue

		        case S.COMMENT_ENDING:
		          if (c === '-') {
		            parser.state = S.COMMENT_ENDED;
		            parser.comment = textopts(parser.opt, parser.comment);
		            if (parser.comment) {
		              emitNode(parser, 'oncomment', parser.comment);
		            }
		            parser.comment = '';
		          } else {
		            parser.comment += '-' + c;
		            parser.state = S.COMMENT;
		          }
		          continue

		        case S.COMMENT_ENDED:
		          if (c !== '>') {
		            strictFail(parser, 'Malformed comment');
		            // allow <!-- blah -- bloo --> in non-strict mode,
		            // which is a comment of " blah -- bloo "
		            parser.comment += '--' + c;
		            parser.state = S.COMMENT;
		          } else if (parser.doctype && parser.doctype !== true) {
		            parser.state = S.DOCTYPE_DTD;
		          } else {
		            parser.state = S.TEXT;
		          }
		          continue

		        case S.CDATA:
		          if (c === ']') {
		            parser.state = S.CDATA_ENDING;
		          } else {
		            parser.cdata += c;
		          }
		          continue

		        case S.CDATA_ENDING:
		          if (c === ']') {
		            parser.state = S.CDATA_ENDING_2;
		          } else {
		            parser.cdata += ']' + c;
		            parser.state = S.CDATA;
		          }
		          continue

		        case S.CDATA_ENDING_2:
		          if (c === '>') {
		            if (parser.cdata) {
		              emitNode(parser, 'oncdata', parser.cdata);
		            }
		            emitNode(parser, 'onclosecdata');
		            parser.cdata = '';
		            parser.state = S.TEXT;
		          } else if (c === ']') {
		            parser.cdata += ']';
		          } else {
		            parser.cdata += ']]' + c;
		            parser.state = S.CDATA;
		          }
		          continue

		        case S.PROC_INST:
		          if (c === '?') {
		            parser.state = S.PROC_INST_ENDING;
		          } else if (isWhitespace(c)) {
		            parser.state = S.PROC_INST_BODY;
		          } else {
		            parser.procInstName += c;
		          }
		          continue

		        case S.PROC_INST_BODY:
		          if (!parser.procInstBody && isWhitespace(c)) {
		            continue
		          } else if (c === '?') {
		            parser.state = S.PROC_INST_ENDING;
		          } else {
		            parser.procInstBody += c;
		          }
		          continue

		        case S.PROC_INST_ENDING:
		          if (c === '>') {
		            emitNode(parser, 'onprocessinginstruction', {
		              name: parser.procInstName,
		              body: parser.procInstBody
		            });
		            parser.procInstName = parser.procInstBody = '';
		            parser.state = S.TEXT;
		          } else {
		            parser.procInstBody += '?' + c;
		            parser.state = S.PROC_INST_BODY;
		          }
		          continue

		        case S.OPEN_TAG:
		          if (isMatch(nameBody, c)) {
		            parser.tagName += c;
		          } else {
		            newTag(parser);
		            if (c === '>') {
		              openTag(parser);
		            } else if (c === '/') {
		              parser.state = S.OPEN_TAG_SLASH;
		            } else {
		              if (!isWhitespace(c)) {
		                strictFail(parser, 'Invalid character in tag name');
		              }
		              parser.state = S.ATTRIB;
		            }
		          }
		          continue

		        case S.OPEN_TAG_SLASH:
		          if (c === '>') {
		            openTag(parser, true);
		            closeTag(parser);
		          } else {
		            strictFail(parser, 'Forward-slash in opening tag not followed by >');
		            parser.state = S.ATTRIB;
		          }
		          continue

		        case S.ATTRIB:
		          // haven't read the attribute name yet.
		          if (isWhitespace(c)) {
		            continue
		          } else if (c === '>') {
		            openTag(parser);
		          } else if (c === '/') {
		            parser.state = S.OPEN_TAG_SLASH;
		          } else if (isMatch(nameStart, c)) {
		            parser.attribName = c;
		            parser.attribValue = '';
		            parser.state = S.ATTRIB_NAME;
		          } else {
		            strictFail(parser, 'Invalid attribute name');
		          }
		          continue

		        case S.ATTRIB_NAME:
		          if (c === '=') {
		            parser.state = S.ATTRIB_VALUE;
		          } else if (c === '>') {
		            strictFail(parser, 'Attribute without value');
		            parser.attribValue = parser.attribName;
		            attrib(parser);
		            openTag(parser);
		          } else if (isWhitespace(c)) {
		            parser.state = S.ATTRIB_NAME_SAW_WHITE;
		          } else if (isMatch(nameBody, c)) {
		            parser.attribName += c;
		          } else {
		            strictFail(parser, 'Invalid attribute name');
		          }
		          continue

		        case S.ATTRIB_NAME_SAW_WHITE:
		          if (c === '=') {
		            parser.state = S.ATTRIB_VALUE;
		          } else if (isWhitespace(c)) {
		            continue
		          } else {
		            strictFail(parser, 'Attribute without value');
		            parser.tag.attributes[parser.attribName] = '';
		            parser.attribValue = '';
		            emitNode(parser, 'onattribute', {
		              name: parser.attribName,
		              value: ''
		            });
		            parser.attribName = '';
		            if (c === '>') {
		              openTag(parser);
		            } else if (isMatch(nameStart, c)) {
		              parser.attribName = c;
		              parser.state = S.ATTRIB_NAME;
		            } else {
		              strictFail(parser, 'Invalid attribute name');
		              parser.state = S.ATTRIB;
		            }
		          }
		          continue

		        case S.ATTRIB_VALUE:
		          if (isWhitespace(c)) {
		            continue
		          } else if (isQuote(c)) {
		            parser.q = c;
		            parser.state = S.ATTRIB_VALUE_QUOTED;
		          } else {
		            if (!parser.opt.unquotedAttributeValues) {
		              error(parser, 'Unquoted attribute value');
		            }
		            parser.state = S.ATTRIB_VALUE_UNQUOTED;
		            parser.attribValue = c;
		          }
		          continue

		        case S.ATTRIB_VALUE_QUOTED:
		          if (c !== parser.q) {
		            if (c === '&') {
		              parser.state = S.ATTRIB_VALUE_ENTITY_Q;
		            } else {
		              parser.attribValue += c;
		            }
		            continue
		          }
		          attrib(parser);
		          parser.q = '';
		          parser.state = S.ATTRIB_VALUE_CLOSED;
		          continue

		        case S.ATTRIB_VALUE_CLOSED:
		          if (isWhitespace(c)) {
		            parser.state = S.ATTRIB;
		          } else if (c === '>') {
		            openTag(parser);
		          } else if (c === '/') {
		            parser.state = S.OPEN_TAG_SLASH;
		          } else if (isMatch(nameStart, c)) {
		            strictFail(parser, 'No whitespace between attributes');
		            parser.attribName = c;
		            parser.attribValue = '';
		            parser.state = S.ATTRIB_NAME;
		          } else {
		            strictFail(parser, 'Invalid attribute name');
		          }
		          continue

		        case S.ATTRIB_VALUE_UNQUOTED:
		          if (!isAttribEnd(c)) {
		            if (c === '&') {
		              parser.state = S.ATTRIB_VALUE_ENTITY_U;
		            } else {
		              parser.attribValue += c;
		            }
		            continue
		          }
		          attrib(parser);
		          if (c === '>') {
		            openTag(parser);
		          } else {
		            parser.state = S.ATTRIB;
		          }
		          continue

		        case S.CLOSE_TAG:
		          if (!parser.tagName) {
		            if (isWhitespace(c)) {
		              continue
		            } else if (notMatch(nameStart, c)) {
		              if (parser.script) {
		                parser.script += '</' + c;
		                parser.state = S.SCRIPT;
		              } else {
		                strictFail(parser, 'Invalid tagname in closing tag.');
		              }
		            } else {
		              parser.tagName = c;
		            }
		          } else if (c === '>') {
		            closeTag(parser);
		          } else if (isMatch(nameBody, c)) {
		            parser.tagName += c;
		          } else if (parser.script) {
		            parser.script += '</' + parser.tagName;
		            parser.tagName = '';
		            parser.state = S.SCRIPT;
		          } else {
		            if (!isWhitespace(c)) {
		              strictFail(parser, 'Invalid tagname in closing tag');
		            }
		            parser.state = S.CLOSE_TAG_SAW_WHITE;
		          }
		          continue

		        case S.CLOSE_TAG_SAW_WHITE:
		          if (isWhitespace(c)) {
		            continue
		          }
		          if (c === '>') {
		            closeTag(parser);
		          } else {
		            strictFail(parser, 'Invalid characters in closing tag');
		          }
		          continue

		        case S.TEXT_ENTITY:
		        case S.ATTRIB_VALUE_ENTITY_Q:
		        case S.ATTRIB_VALUE_ENTITY_U:
		          var returnState;
		          var buffer;
		          switch (parser.state) {
		            case S.TEXT_ENTITY:
		              returnState = S.TEXT;
		              buffer = 'textNode';
		              break

		            case S.ATTRIB_VALUE_ENTITY_Q:
		              returnState = S.ATTRIB_VALUE_QUOTED;
		              buffer = 'attribValue';
		              break

		            case S.ATTRIB_VALUE_ENTITY_U:
		              returnState = S.ATTRIB_VALUE_UNQUOTED;
		              buffer = 'attribValue';
		              break
		          }

		          if (c === ';') {
		            var parsedEntity = parseEntity(parser);
		            if (parser.opt.unparsedEntities && !Object.values(sax.XML_ENTITIES).includes(parsedEntity)) {
		              parser.entity = '';
		              parser.state = returnState;
		              parser.write(parsedEntity);
		            } else {
		              parser[buffer] += parsedEntity;
		              parser.entity = '';
		              parser.state = returnState;
		            }
		          } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {
		            parser.entity += c;
		          } else {
		            strictFail(parser, 'Invalid character in entity name');
		            parser[buffer] += '&' + parser.entity + c;
		            parser.entity = '';
		            parser.state = returnState;
		          }

		          continue

		        default: /* istanbul ignore next */ {
		          throw new Error(parser, 'Unknown state: ' + parser.state)
		        }
		      }
		    } // while

		    if (parser.position >= parser.bufferCheckPosition) {
		      checkBufferLength(parser);
		    }
		    return parser
		  }

		  /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */
		  /* istanbul ignore next */
		  if (!String.fromCodePoint) {
		    (function () {
		      var stringFromCharCode = String.fromCharCode;
		      var floor = Math.floor;
		      var fromCodePoint = function () {
		        var MAX_SIZE = 0x4000;
		        var codeUnits = [];
		        var highSurrogate;
		        var lowSurrogate;
		        var index = -1;
		        var length = arguments.length;
		        if (!length) {
		          return ''
		        }
		        var result = '';
		        while (++index < length) {
		          var codePoint = Number(arguments[index]);
		          if (
		            !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
		            codePoint < 0 || // not a valid Unicode code point
		            codePoint > 0x10FFFF || // not a valid Unicode code point
		            floor(codePoint) !== codePoint // not an integer
		          ) {
		            throw RangeError('Invalid code point: ' + codePoint)
		          }
		          if (codePoint <= 0xFFFF) { // BMP code point
		            codeUnits.push(codePoint);
		          } else { // Astral code point; split in surrogate halves
		            // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
		            codePoint -= 0x10000;
		            highSurrogate = (codePoint >> 10) + 0xD800;
		            lowSurrogate = (codePoint % 0x400) + 0xDC00;
		            codeUnits.push(highSurrogate, lowSurrogate);
		          }
		          if (index + 1 === length || codeUnits.length > MAX_SIZE) {
		            result += stringFromCharCode.apply(null, codeUnits);
		            codeUnits.length = 0;
		          }
		        }
		        return result
		      };
		      /* istanbul ignore next */
		      if (Object.defineProperty) {
		        Object.defineProperty(String, 'fromCodePoint', {
		          value: fromCodePoint,
		          configurable: true,
		          writable: true
		        });
		      } else {
		        String.fromCodePoint = fromCodePoint;
		      }
		    }());
		  }
		})(exports); 
	} (sax));
	return sax;
}

var bom = {};

var hasRequiredBom;

function requireBom () {
	if (hasRequiredBom) return bom;
	hasRequiredBom = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  bom.stripBOM = function(str) {
	    if (str[0] === '\uFEFF') {
	      return str.substring(1);
	    } else {
	      return str;
	    }
	  };

	}).call(bom);
	return bom;
}

var processors = {};

var hasRequiredProcessors;

function requireProcessors () {
	if (hasRequiredProcessors) return processors;
	hasRequiredProcessors = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var prefixMatch;

	  prefixMatch = new RegExp(/(?!xmlns)^.*:/);

	  processors.normalize = function(str) {
	    return str.toLowerCase();
	  };

	  processors.firstCharLowerCase = function(str) {
	    return str.charAt(0).toLowerCase() + str.slice(1);
	  };

	  processors.stripPrefix = function(str) {
	    return str.replace(prefixMatch, '');
	  };

	  processors.parseNumbers = function(str) {
	    if (!isNaN(str)) {
	      str = str % 1 === 0 ? parseInt(str, 10) : parseFloat(str);
	    }
	    return str;
	  };

	  processors.parseBooleans = function(str) {
	    if (/^(?:true|false)$/i.test(str)) {
	      str = str.toLowerCase() === 'true';
	    }
	    return str;
	  };

	}).call(processors);
	return processors;
}

var hasRequiredParser$1;

function requireParser$1 () {
	if (hasRequiredParser$1) return parser$2;
	hasRequiredParser$1 = 1;
	(function (exports) {
		// Generated by CoffeeScript 1.12.7
		(function() {
		  var bom, defaults, events, isEmpty, processItem, processors, sax, setImmediate,
		    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
		    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
		    hasProp = {}.hasOwnProperty;

		  sax = requireSax();

		  events = require$$0$5;

		  bom = requireBom();

		  processors = requireProcessors();

		  setImmediate = require$$4$3.setImmediate;

		  defaults = requireDefaults().defaults;

		  isEmpty = function(thing) {
		    return typeof thing === "object" && (thing != null) && Object.keys(thing).length === 0;
		  };

		  processItem = function(processors, item, key) {
		    var i, len, process;
		    for (i = 0, len = processors.length; i < len; i++) {
		      process = processors[i];
		      item = process(item, key);
		    }
		    return item;
		  };

		  exports.Parser = (function(superClass) {
		    extend(Parser, superClass);

		    function Parser(opts) {
		      this.parseStringPromise = bind(this.parseStringPromise, this);
		      this.parseString = bind(this.parseString, this);
		      this.reset = bind(this.reset, this);
		      this.assignOrPush = bind(this.assignOrPush, this);
		      this.processAsync = bind(this.processAsync, this);
		      var key, ref, value;
		      if (!(this instanceof exports.Parser)) {
		        return new exports.Parser(opts);
		      }
		      this.options = {};
		      ref = defaults["0.2"];
		      for (key in ref) {
		        if (!hasProp.call(ref, key)) continue;
		        value = ref[key];
		        this.options[key] = value;
		      }
		      for (key in opts) {
		        if (!hasProp.call(opts, key)) continue;
		        value = opts[key];
		        this.options[key] = value;
		      }
		      if (this.options.xmlns) {
		        this.options.xmlnskey = this.options.attrkey + "ns";
		      }
		      if (this.options.normalizeTags) {
		        if (!this.options.tagNameProcessors) {
		          this.options.tagNameProcessors = [];
		        }
		        this.options.tagNameProcessors.unshift(processors.normalize);
		      }
		      this.reset();
		    }

		    Parser.prototype.processAsync = function() {
		      var chunk, err;
		      try {
		        if (this.remaining.length <= this.options.chunkSize) {
		          chunk = this.remaining;
		          this.remaining = '';
		          this.saxParser = this.saxParser.write(chunk);
		          return this.saxParser.close();
		        } else {
		          chunk = this.remaining.substr(0, this.options.chunkSize);
		          this.remaining = this.remaining.substr(this.options.chunkSize, this.remaining.length);
		          this.saxParser = this.saxParser.write(chunk);
		          return setImmediate(this.processAsync);
		        }
		      } catch (error1) {
		        err = error1;
		        if (!this.saxParser.errThrown) {
		          this.saxParser.errThrown = true;
		          return this.emit(err);
		        }
		      }
		    };

		    Parser.prototype.assignOrPush = function(obj, key, newValue) {
		      if (!(key in obj)) {
		        if (!this.options.explicitArray) {
		          return obj[key] = newValue;
		        } else {
		          return obj[key] = [newValue];
		        }
		      } else {
		        if (!(obj[key] instanceof Array)) {
		          obj[key] = [obj[key]];
		        }
		        return obj[key].push(newValue);
		      }
		    };

		    Parser.prototype.reset = function() {
		      var attrkey, charkey, ontext, stack;
		      this.removeAllListeners();
		      this.saxParser = sax.parser(this.options.strict, {
		        trim: false,
		        normalize: false,
		        xmlns: this.options.xmlns
		      });
		      this.saxParser.errThrown = false;
		      this.saxParser.onerror = (function(_this) {
		        return function(error) {
		          _this.saxParser.resume();
		          if (!_this.saxParser.errThrown) {
		            _this.saxParser.errThrown = true;
		            return _this.emit("error", error);
		          }
		        };
		      })(this);
		      this.saxParser.onend = (function(_this) {
		        return function() {
		          if (!_this.saxParser.ended) {
		            _this.saxParser.ended = true;
		            return _this.emit("end", _this.resultObject);
		          }
		        };
		      })(this);
		      this.saxParser.ended = false;
		      this.EXPLICIT_CHARKEY = this.options.explicitCharkey;
		      this.resultObject = null;
		      stack = [];
		      attrkey = this.options.attrkey;
		      charkey = this.options.charkey;
		      this.saxParser.onopentag = (function(_this) {
		        return function(node) {
		          var key, newValue, obj, processedKey, ref;
		          obj = Object.create(null);
		          obj[charkey] = "";
		          if (!_this.options.ignoreAttrs) {
		            ref = node.attributes;
		            for (key in ref) {
		              if (!hasProp.call(ref, key)) continue;
		              if (!(attrkey in obj) && !_this.options.mergeAttrs) {
		                obj[attrkey] = Object.create(null);
		              }
		              newValue = _this.options.attrValueProcessors ? processItem(_this.options.attrValueProcessors, node.attributes[key], key) : node.attributes[key];
		              processedKey = _this.options.attrNameProcessors ? processItem(_this.options.attrNameProcessors, key) : key;
		              if (_this.options.mergeAttrs) {
		                _this.assignOrPush(obj, processedKey, newValue);
		              } else {
		                obj[attrkey][processedKey] = newValue;
		              }
		            }
		          }
		          obj["#name"] = _this.options.tagNameProcessors ? processItem(_this.options.tagNameProcessors, node.name) : node.name;
		          if (_this.options.xmlns) {
		            obj[_this.options.xmlnskey] = {
		              uri: node.uri,
		              local: node.local
		            };
		          }
		          return stack.push(obj);
		        };
		      })(this);
		      this.saxParser.onclosetag = (function(_this) {
		        return function() {
		          var cdata, emptyStr, key, node, nodeName, obj, objClone, old, s, xpath;
		          obj = stack.pop();
		          nodeName = obj["#name"];
		          if (!_this.options.explicitChildren || !_this.options.preserveChildrenOrder) {
		            delete obj["#name"];
		          }
		          if (obj.cdata === true) {
		            cdata = obj.cdata;
		            delete obj.cdata;
		          }
		          s = stack[stack.length - 1];
		          if (obj[charkey].match(/^\s*$/) && !cdata) {
		            emptyStr = obj[charkey];
		            delete obj[charkey];
		          } else {
		            if (_this.options.trim) {
		              obj[charkey] = obj[charkey].trim();
		            }
		            if (_this.options.normalize) {
		              obj[charkey] = obj[charkey].replace(/\s{2,}/g, " ").trim();
		            }
		            obj[charkey] = _this.options.valueProcessors ? processItem(_this.options.valueProcessors, obj[charkey], nodeName) : obj[charkey];
		            if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
		              obj = obj[charkey];
		            }
		          }
		          if (isEmpty(obj)) {
		            if (typeof _this.options.emptyTag === 'function') {
		              obj = _this.options.emptyTag();
		            } else {
		              obj = _this.options.emptyTag !== '' ? _this.options.emptyTag : emptyStr;
		            }
		          }
		          if (_this.options.validator != null) {
		            xpath = "/" + ((function() {
		              var i, len, results;
		              results = [];
		              for (i = 0, len = stack.length; i < len; i++) {
		                node = stack[i];
		                results.push(node["#name"]);
		              }
		              return results;
		            })()).concat(nodeName).join("/");
		            (function() {
		              var err;
		              try {
		                return obj = _this.options.validator(xpath, s && s[nodeName], obj);
		              } catch (error1) {
		                err = error1;
		                return _this.emit("error", err);
		              }
		            })();
		          }
		          if (_this.options.explicitChildren && !_this.options.mergeAttrs && typeof obj === 'object') {
		            if (!_this.options.preserveChildrenOrder) {
		              node = Object.create(null);
		              if (_this.options.attrkey in obj) {
		                node[_this.options.attrkey] = obj[_this.options.attrkey];
		                delete obj[_this.options.attrkey];
		              }
		              if (!_this.options.charsAsChildren && _this.options.charkey in obj) {
		                node[_this.options.charkey] = obj[_this.options.charkey];
		                delete obj[_this.options.charkey];
		              }
		              if (Object.getOwnPropertyNames(obj).length > 0) {
		                node[_this.options.childkey] = obj;
		              }
		              obj = node;
		            } else if (s) {
		              s[_this.options.childkey] = s[_this.options.childkey] || [];
		              objClone = Object.create(null);
		              for (key in obj) {
		                if (!hasProp.call(obj, key)) continue;
		                objClone[key] = obj[key];
		              }
		              s[_this.options.childkey].push(objClone);
		              delete obj["#name"];
		              if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
		                obj = obj[charkey];
		              }
		            }
		          }
		          if (stack.length > 0) {
		            return _this.assignOrPush(s, nodeName, obj);
		          } else {
		            if (_this.options.explicitRoot) {
		              old = obj;
		              obj = Object.create(null);
		              obj[nodeName] = old;
		            }
		            _this.resultObject = obj;
		            _this.saxParser.ended = true;
		            return _this.emit("end", _this.resultObject);
		          }
		        };
		      })(this);
		      ontext = (function(_this) {
		        return function(text) {
		          var charChild, s;
		          s = stack[stack.length - 1];
		          if (s) {
		            s[charkey] += text;
		            if (_this.options.explicitChildren && _this.options.preserveChildrenOrder && _this.options.charsAsChildren && (_this.options.includeWhiteChars || text.replace(/\\n/g, '').trim() !== '')) {
		              s[_this.options.childkey] = s[_this.options.childkey] || [];
		              charChild = {
		                '#name': '__text__'
		              };
		              charChild[charkey] = text;
		              if (_this.options.normalize) {
		                charChild[charkey] = charChild[charkey].replace(/\s{2,}/g, " ").trim();
		              }
		              s[_this.options.childkey].push(charChild);
		            }
		            return s;
		          }
		        };
		      })(this);
		      this.saxParser.ontext = ontext;
		      return this.saxParser.oncdata = (function(_this) {
		        return function(text) {
		          var s;
		          s = ontext(text);
		          if (s) {
		            return s.cdata = true;
		          }
		        };
		      })();
		    };

		    Parser.prototype.parseString = function(str, cb) {
		      var err;
		      if ((cb != null) && typeof cb === "function") {
		        this.on("end", function(result) {
		          this.reset();
		          return cb(null, result);
		        });
		        this.on("error", function(err) {
		          this.reset();
		          return cb(err);
		        });
		      }
		      try {
		        str = str.toString();
		        if (str.trim() === '') {
		          this.emit("end", null);
		          return true;
		        }
		        str = bom.stripBOM(str);
		        if (this.options.async) {
		          this.remaining = str;
		          setImmediate(this.processAsync);
		          return this.saxParser;
		        }
		        return this.saxParser.write(str).close();
		      } catch (error1) {
		        err = error1;
		        if (!(this.saxParser.errThrown || this.saxParser.ended)) {
		          this.emit('error', err);
		          return this.saxParser.errThrown = true;
		        } else if (this.saxParser.ended) {
		          throw err;
		        }
		      }
		    };

		    Parser.prototype.parseStringPromise = function(str) {
		      return new Promise((function(_this) {
		        return function(resolve, reject) {
		          return _this.parseString(str, function(err, value) {
		            if (err) {
		              return reject(err);
		            } else {
		              return resolve(value);
		            }
		          });
		        };
		      })(this));
		    };

		    return Parser;

		  })(events);

		  exports.parseString = function(str, a, b) {
		    var cb, options, parser;
		    if (b != null) {
		      if (typeof b === 'function') {
		        cb = b;
		      }
		      if (typeof a === 'object') {
		        options = a;
		      }
		    } else {
		      if (typeof a === 'function') {
		        cb = a;
		      }
		      options = {};
		    }
		    parser = new exports.Parser(options);
		    return parser.parseString(str, cb);
		  };

		  exports.parseStringPromise = function(str, a) {
		    var options, parser;
		    if (typeof a === 'object') {
		      options = a;
		    }
		    parser = new exports.Parser(options);
		    return parser.parseStringPromise(str);
		  };

		}).call(parser$2); 
	} (parser$2));
	return parser$2;
}

var hasRequiredXml2js;

function requireXml2js () {
	if (hasRequiredXml2js) return xml2js;
	hasRequiredXml2js = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var builder, defaults, parser, processors,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  defaults = requireDefaults();

	  builder = requireBuilder();

	  parser = requireParser$1();

	  processors = requireProcessors();

	  xml2js.defaults = defaults.defaults;

	  xml2js.processors = processors;

	  xml2js.ValidationError = (function(superClass) {
	    extend(ValidationError, superClass);

	    function ValidationError(message) {
	      this.message = message;
	    }

	    return ValidationError;

	  })(Error);

	  xml2js.Builder = builder.Builder;

	  xml2js.Parser = parser.Parser;

	  xml2js.parseString = parser.parseString;

	  xml2js.parseStringPromise = parser.parseStringPromise;

	}).call(xml2js);
	return xml2js;
}

var fields = {exports: {}};

var hasRequiredFields;

function requireFields () {
	if (hasRequiredFields) return fields.exports;
	hasRequiredFields = 1;
	const fields$1 = fields.exports = {};

	fields$1.feed = [
	  ['author', 'creator'],
	  ['dc:publisher', 'publisher'],
	  ['dc:creator', 'creator'],
	  ['dc:source', 'source'],
	  ['dc:title', 'title'],
	  ['dc:type', 'type'],
	  'title',
	  'description',
	  'author',
	  'pubDate',
	  'webMaster',
	  'managingEditor',
	  'generator',
	  'link',
	  'language',
	  'copyright',
	  'lastBuildDate',
	  'docs',
	  'generator',
	  'ttl',
	  'rating',
	  'skipHours',
	  'skipDays',
	];

	fields$1.item = [
	  ['author', 'creator'],
	  ['dc:creator', 'creator'],
	  ['dc:date', 'date'],
	  ['dc:language', 'language'],
	  ['dc:rights', 'rights'],
	  ['dc:source', 'source'],
	  ['dc:title', 'title'],
	  'title',
	  'link',
	  'pubDate',
	  'author',
	  'summary',
	  ['content:encoded', 'content:encoded', {includeSnippet: true}],
	  'enclosure',
	  'dc:creator',
	  'dc:date',
	  'comments',
	];

	var mapItunesField = function(f) {
	  return ['itunes:' + f, f];
	};

	fields$1.podcastFeed = ([
	  'author',
	  'subtitle',
	  'summary',
	  'explicit'
	]).map(mapItunesField);

	fields$1.podcastItem = ([
	  'author',
	  'subtitle',
	  'summary',
	  'explicit',
	  'duration',
	  'image',
	  'episode',
	  'image',
	  'season',
	  'keywords',
	  'episodeType'
	]).map(mapItunesField);
	return fields.exports;
}

var utils$1 = {exports: {}};

var lib = {};

var decode = {};

var Aacute$1 = "Á";
var aacute$1 = "á";
var Abreve = "Ă";
var abreve = "ă";
var ac = "∾";
var acd = "∿";
var acE = "∾̳";
var Acirc$1 = "Â";
var acirc$1 = "â";
var acute$1 = "´";
var Acy = "А";
var acy = "а";
var AElig$1 = "Æ";
var aelig$1 = "æ";
var af = "⁡";
var Afr = "𝔄";
var afr = "𝔞";
var Agrave$1 = "À";
var agrave$1 = "à";
var alefsym = "ℵ";
var aleph = "ℵ";
var Alpha = "Α";
var alpha = "α";
var Amacr = "Ā";
var amacr = "ā";
var amalg = "⨿";
var amp$2 = "&";
var AMP$1 = "&";
var andand = "⩕";
var And = "⩓";
var and = "∧";
var andd = "⩜";
var andslope = "⩘";
var andv = "⩚";
var ang = "∠";
var ange = "⦤";
var angle = "∠";
var angmsdaa = "⦨";
var angmsdab = "⦩";
var angmsdac = "⦪";
var angmsdad = "⦫";
var angmsdae = "⦬";
var angmsdaf = "⦭";
var angmsdag = "⦮";
var angmsdah = "⦯";
var angmsd = "∡";
var angrt = "∟";
var angrtvb = "⊾";
var angrtvbd = "⦝";
var angsph = "∢";
var angst = "Å";
var angzarr = "⍼";
var Aogon = "Ą";
var aogon = "ą";
var Aopf = "𝔸";
var aopf = "𝕒";
var apacir = "⩯";
var ap = "≈";
var apE = "⩰";
var ape = "≊";
var apid = "≋";
var apos$1 = "'";
var ApplyFunction = "⁡";
var approx = "≈";
var approxeq = "≊";
var Aring$1 = "Å";
var aring$1 = "å";
var Ascr = "𝒜";
var ascr = "𝒶";
var Assign = "≔";
var ast = "*";
var asymp = "≈";
var asympeq = "≍";
var Atilde$1 = "Ã";
var atilde$1 = "ã";
var Auml$1 = "Ä";
var auml$1 = "ä";
var awconint = "∳";
var awint = "⨑";
var backcong = "≌";
var backepsilon = "϶";
var backprime = "‵";
var backsim = "∽";
var backsimeq = "⋍";
var Backslash = "∖";
var Barv = "⫧";
var barvee = "⊽";
var barwed = "⌅";
var Barwed = "⌆";
var barwedge = "⌅";
var bbrk = "⎵";
var bbrktbrk = "⎶";
var bcong = "≌";
var Bcy = "Б";
var bcy = "б";
var bdquo = "„";
var becaus = "∵";
var because = "∵";
var Because = "∵";
var bemptyv = "⦰";
var bepsi = "϶";
var bernou = "ℬ";
var Bernoullis = "ℬ";
var Beta = "Β";
var beta = "β";
var beth = "ℶ";
var between = "≬";
var Bfr = "𝔅";
var bfr = "𝔟";
var bigcap = "⋂";
var bigcirc = "◯";
var bigcup = "⋃";
var bigodot = "⨀";
var bigoplus = "⨁";
var bigotimes = "⨂";
var bigsqcup = "⨆";
var bigstar = "★";
var bigtriangledown = "▽";
var bigtriangleup = "△";
var biguplus = "⨄";
var bigvee = "⋁";
var bigwedge = "⋀";
var bkarow = "⤍";
var blacklozenge = "⧫";
var blacksquare = "▪";
var blacktriangle = "▴";
var blacktriangledown = "▾";
var blacktriangleleft = "◂";
var blacktriangleright = "▸";
var blank = "␣";
var blk12 = "▒";
var blk14 = "░";
var blk34 = "▓";
var block = "█";
var bne = "=⃥";
var bnequiv = "≡⃥";
var bNot = "⫭";
var bnot = "⌐";
var Bopf = "𝔹";
var bopf = "𝕓";
var bot = "⊥";
var bottom = "⊥";
var bowtie = "⋈";
var boxbox = "⧉";
var boxdl = "┐";
var boxdL = "╕";
var boxDl = "╖";
var boxDL = "╗";
var boxdr = "┌";
var boxdR = "╒";
var boxDr = "╓";
var boxDR = "╔";
var boxh = "─";
var boxH = "═";
var boxhd = "┬";
var boxHd = "╤";
var boxhD = "╥";
var boxHD = "╦";
var boxhu = "┴";
var boxHu = "╧";
var boxhU = "╨";
var boxHU = "╩";
var boxminus = "⊟";
var boxplus = "⊞";
var boxtimes = "⊠";
var boxul = "┘";
var boxuL = "╛";
var boxUl = "╜";
var boxUL = "╝";
var boxur = "└";
var boxuR = "╘";
var boxUr = "╙";
var boxUR = "╚";
var boxv = "│";
var boxV = "║";
var boxvh = "┼";
var boxvH = "╪";
var boxVh = "╫";
var boxVH = "╬";
var boxvl = "┤";
var boxvL = "╡";
var boxVl = "╢";
var boxVL = "╣";
var boxvr = "├";
var boxvR = "╞";
var boxVr = "╟";
var boxVR = "╠";
var bprime = "‵";
var breve = "˘";
var Breve = "˘";
var brvbar$1 = "¦";
var bscr = "𝒷";
var Bscr = "ℬ";
var bsemi = "⁏";
var bsim = "∽";
var bsime = "⋍";
var bsolb = "⧅";
var bsol = "\\";
var bsolhsub = "⟈";
var bull = "•";
var bullet = "•";
var bump = "≎";
var bumpE = "⪮";
var bumpe = "≏";
var Bumpeq = "≎";
var bumpeq = "≏";
var Cacute = "Ć";
var cacute = "ć";
var capand = "⩄";
var capbrcup = "⩉";
var capcap = "⩋";
var cap = "∩";
var Cap = "⋒";
var capcup = "⩇";
var capdot = "⩀";
var CapitalDifferentialD = "ⅅ";
var caps = "∩︀";
var caret = "⁁";
var caron = "ˇ";
var Cayleys = "ℭ";
var ccaps = "⩍";
var Ccaron = "Č";
var ccaron = "č";
var Ccedil$1 = "Ç";
var ccedil$1 = "ç";
var Ccirc = "Ĉ";
var ccirc = "ĉ";
var Cconint = "∰";
var ccups = "⩌";
var ccupssm = "⩐";
var Cdot = "Ċ";
var cdot = "ċ";
var cedil$1 = "¸";
var Cedilla = "¸";
var cemptyv = "⦲";
var cent$1 = "¢";
var centerdot = "·";
var CenterDot = "·";
var cfr = "𝔠";
var Cfr = "ℭ";
var CHcy = "Ч";
var chcy = "ч";
var check = "✓";
var checkmark = "✓";
var Chi = "Χ";
var chi = "χ";
var circ = "ˆ";
var circeq = "≗";
var circlearrowleft = "↺";
var circlearrowright = "↻";
var circledast = "⊛";
var circledcirc = "⊚";
var circleddash = "⊝";
var CircleDot = "⊙";
var circledR = "®";
var circledS = "Ⓢ";
var CircleMinus = "⊖";
var CirclePlus = "⊕";
var CircleTimes = "⊗";
var cir = "○";
var cirE = "⧃";
var cire = "≗";
var cirfnint = "⨐";
var cirmid = "⫯";
var cirscir = "⧂";
var ClockwiseContourIntegral = "∲";
var CloseCurlyDoubleQuote = "”";
var CloseCurlyQuote = "’";
var clubs = "♣";
var clubsuit = "♣";
var colon = ":";
var Colon = "∷";
var Colone = "⩴";
var colone = "≔";
var coloneq = "≔";
var comma = ",";
var commat = "@";
var comp = "∁";
var compfn = "∘";
var complement = "∁";
var complexes = "ℂ";
var cong = "≅";
var congdot = "⩭";
var Congruent = "≡";
var conint = "∮";
var Conint = "∯";
var ContourIntegral = "∮";
var copf = "𝕔";
var Copf = "ℂ";
var coprod = "∐";
var Coproduct = "∐";
var copy$1 = "©";
var COPY$1 = "©";
var copysr = "℗";
var CounterClockwiseContourIntegral = "∳";
var crarr = "↵";
var cross = "✗";
var Cross = "⨯";
var Cscr = "𝒞";
var cscr = "𝒸";
var csub = "⫏";
var csube = "⫑";
var csup = "⫐";
var csupe = "⫒";
var ctdot = "⋯";
var cudarrl = "⤸";
var cudarrr = "⤵";
var cuepr = "⋞";
var cuesc = "⋟";
var cularr = "↶";
var cularrp = "⤽";
var cupbrcap = "⩈";
var cupcap = "⩆";
var CupCap = "≍";
var cup = "∪";
var Cup = "⋓";
var cupcup = "⩊";
var cupdot = "⊍";
var cupor = "⩅";
var cups = "∪︀";
var curarr = "↷";
var curarrm = "⤼";
var curlyeqprec = "⋞";
var curlyeqsucc = "⋟";
var curlyvee = "⋎";
var curlywedge = "⋏";
var curren$1 = "¤";
var curvearrowleft = "↶";
var curvearrowright = "↷";
var cuvee = "⋎";
var cuwed = "⋏";
var cwconint = "∲";
var cwint = "∱";
var cylcty = "⌭";
var dagger = "†";
var Dagger = "‡";
var daleth = "ℸ";
var darr = "↓";
var Darr = "↡";
var dArr = "⇓";
var dash = "‐";
var Dashv = "⫤";
var dashv = "⊣";
var dbkarow = "⤏";
var dblac = "˝";
var Dcaron = "Ď";
var dcaron = "ď";
var Dcy = "Д";
var dcy = "д";
var ddagger = "‡";
var ddarr = "⇊";
var DD = "ⅅ";
var dd = "ⅆ";
var DDotrahd = "⤑";
var ddotseq = "⩷";
var deg$1 = "°";
var Del = "∇";
var Delta = "Δ";
var delta = "δ";
var demptyv = "⦱";
var dfisht = "⥿";
var Dfr = "𝔇";
var dfr = "𝔡";
var dHar = "⥥";
var dharl = "⇃";
var dharr = "⇂";
var DiacriticalAcute = "´";
var DiacriticalDot = "˙";
var DiacriticalDoubleAcute = "˝";
var DiacriticalGrave = "`";
var DiacriticalTilde = "˜";
var diam = "⋄";
var diamond = "⋄";
var Diamond = "⋄";
var diamondsuit = "♦";
var diams = "♦";
var die = "¨";
var DifferentialD = "ⅆ";
var digamma = "ϝ";
var disin = "⋲";
var div = "÷";
var divide$1 = "÷";
var divideontimes = "⋇";
var divonx = "⋇";
var DJcy = "Ђ";
var djcy = "ђ";
var dlcorn = "⌞";
var dlcrop = "⌍";
var dollar = "$";
var Dopf = "𝔻";
var dopf = "𝕕";
var Dot = "¨";
var dot = "˙";
var DotDot = "⃜";
var doteq = "≐";
var doteqdot = "≑";
var DotEqual = "≐";
var dotminus = "∸";
var dotplus = "∔";
var dotsquare = "⊡";
var doublebarwedge = "⌆";
var DoubleContourIntegral = "∯";
var DoubleDot = "¨";
var DoubleDownArrow = "⇓";
var DoubleLeftArrow = "⇐";
var DoubleLeftRightArrow = "⇔";
var DoubleLeftTee = "⫤";
var DoubleLongLeftArrow = "⟸";
var DoubleLongLeftRightArrow = "⟺";
var DoubleLongRightArrow = "⟹";
var DoubleRightArrow = "⇒";
var DoubleRightTee = "⊨";
var DoubleUpArrow = "⇑";
var DoubleUpDownArrow = "⇕";
var DoubleVerticalBar = "∥";
var DownArrowBar = "⤓";
var downarrow = "↓";
var DownArrow = "↓";
var Downarrow = "⇓";
var DownArrowUpArrow = "⇵";
var DownBreve = "̑";
var downdownarrows = "⇊";
var downharpoonleft = "⇃";
var downharpoonright = "⇂";
var DownLeftRightVector = "⥐";
var DownLeftTeeVector = "⥞";
var DownLeftVectorBar = "⥖";
var DownLeftVector = "↽";
var DownRightTeeVector = "⥟";
var DownRightVectorBar = "⥗";
var DownRightVector = "⇁";
var DownTeeArrow = "↧";
var DownTee = "⊤";
var drbkarow = "⤐";
var drcorn = "⌟";
var drcrop = "⌌";
var Dscr = "𝒟";
var dscr = "𝒹";
var DScy = "Ѕ";
var dscy = "ѕ";
var dsol = "⧶";
var Dstrok = "Đ";
var dstrok = "đ";
var dtdot = "⋱";
var dtri = "▿";
var dtrif = "▾";
var duarr = "⇵";
var duhar = "⥯";
var dwangle = "⦦";
var DZcy = "Џ";
var dzcy = "џ";
var dzigrarr = "⟿";
var Eacute$1 = "É";
var eacute$1 = "é";
var easter = "⩮";
var Ecaron = "Ě";
var ecaron = "ě";
var Ecirc$1 = "Ê";
var ecirc$1 = "ê";
var ecir = "≖";
var ecolon = "≕";
var Ecy = "Э";
var ecy = "э";
var eDDot = "⩷";
var Edot = "Ė";
var edot = "ė";
var eDot = "≑";
var ee = "ⅇ";
var efDot = "≒";
var Efr = "𝔈";
var efr = "𝔢";
var eg = "⪚";
var Egrave$1 = "È";
var egrave$1 = "è";
var egs = "⪖";
var egsdot = "⪘";
var el = "⪙";
var Element = "∈";
var elinters = "⏧";
var ell = "ℓ";
var els = "⪕";
var elsdot = "⪗";
var Emacr = "Ē";
var emacr = "ē";
var empty = "∅";
var emptyset = "∅";
var EmptySmallSquare = "◻";
var emptyv = "∅";
var EmptyVerySmallSquare = "▫";
var emsp13 = " ";
var emsp14 = " ";
var emsp = " ";
var ENG = "Ŋ";
var eng = "ŋ";
var ensp = " ";
var Eogon = "Ę";
var eogon = "ę";
var Eopf = "𝔼";
var eopf = "𝕖";
var epar = "⋕";
var eparsl = "⧣";
var eplus = "⩱";
var epsi = "ε";
var Epsilon = "Ε";
var epsilon = "ε";
var epsiv = "ϵ";
var eqcirc = "≖";
var eqcolon = "≕";
var eqsim = "≂";
var eqslantgtr = "⪖";
var eqslantless = "⪕";
var Equal = "⩵";
var equals = "=";
var EqualTilde = "≂";
var equest = "≟";
var Equilibrium = "⇌";
var equiv = "≡";
var equivDD = "⩸";
var eqvparsl = "⧥";
var erarr = "⥱";
var erDot = "≓";
var escr = "ℯ";
var Escr = "ℰ";
var esdot = "≐";
var Esim = "⩳";
var esim = "≂";
var Eta = "Η";
var eta = "η";
var ETH$1 = "Ð";
var eth$1 = "ð";
var Euml$1 = "Ë";
var euml$1 = "ë";
var euro = "€";
var excl = "!";
var exist = "∃";
var Exists = "∃";
var expectation = "ℰ";
var exponentiale = "ⅇ";
var ExponentialE = "ⅇ";
var fallingdotseq = "≒";
var Fcy = "Ф";
var fcy = "ф";
var female = "♀";
var ffilig = "ﬃ";
var fflig = "ﬀ";
var ffllig = "ﬄ";
var Ffr = "𝔉";
var ffr = "𝔣";
var filig = "ﬁ";
var FilledSmallSquare = "◼";
var FilledVerySmallSquare = "▪";
var fjlig = "fj";
var flat = "♭";
var fllig = "ﬂ";
var fltns = "▱";
var fnof = "ƒ";
var Fopf = "𝔽";
var fopf = "𝕗";
var forall = "∀";
var ForAll = "∀";
var fork = "⋔";
var forkv = "⫙";
var Fouriertrf = "ℱ";
var fpartint = "⨍";
var frac12$1 = "½";
var frac13 = "⅓";
var frac14$1 = "¼";
var frac15 = "⅕";
var frac16 = "⅙";
var frac18 = "⅛";
var frac23 = "⅔";
var frac25 = "⅖";
var frac34$1 = "¾";
var frac35 = "⅗";
var frac38 = "⅜";
var frac45 = "⅘";
var frac56 = "⅚";
var frac58 = "⅝";
var frac78 = "⅞";
var frasl = "⁄";
var frown = "⌢";
var fscr = "𝒻";
var Fscr = "ℱ";
var gacute = "ǵ";
var Gamma = "Γ";
var gamma = "γ";
var Gammad = "Ϝ";
var gammad = "ϝ";
var gap = "⪆";
var Gbreve = "Ğ";
var gbreve = "ğ";
var Gcedil = "Ģ";
var Gcirc = "Ĝ";
var gcirc = "ĝ";
var Gcy = "Г";
var gcy = "г";
var Gdot = "Ġ";
var gdot = "ġ";
var ge = "≥";
var gE = "≧";
var gEl = "⪌";
var gel = "⋛";
var geq = "≥";
var geqq = "≧";
var geqslant = "⩾";
var gescc = "⪩";
var ges = "⩾";
var gesdot = "⪀";
var gesdoto = "⪂";
var gesdotol = "⪄";
var gesl = "⋛︀";
var gesles = "⪔";
var Gfr = "𝔊";
var gfr = "𝔤";
var gg = "≫";
var Gg = "⋙";
var ggg = "⋙";
var gimel = "ℷ";
var GJcy = "Ѓ";
var gjcy = "ѓ";
var gla = "⪥";
var gl = "≷";
var glE = "⪒";
var glj = "⪤";
var gnap = "⪊";
var gnapprox = "⪊";
var gne = "⪈";
var gnE = "≩";
var gneq = "⪈";
var gneqq = "≩";
var gnsim = "⋧";
var Gopf = "𝔾";
var gopf = "𝕘";
var grave = "`";
var GreaterEqual = "≥";
var GreaterEqualLess = "⋛";
var GreaterFullEqual = "≧";
var GreaterGreater = "⪢";
var GreaterLess = "≷";
var GreaterSlantEqual = "⩾";
var GreaterTilde = "≳";
var Gscr = "𝒢";
var gscr = "ℊ";
var gsim = "≳";
var gsime = "⪎";
var gsiml = "⪐";
var gtcc = "⪧";
var gtcir = "⩺";
var gt$2 = ">";
var GT$1 = ">";
var Gt = "≫";
var gtdot = "⋗";
var gtlPar = "⦕";
var gtquest = "⩼";
var gtrapprox = "⪆";
var gtrarr = "⥸";
var gtrdot = "⋗";
var gtreqless = "⋛";
var gtreqqless = "⪌";
var gtrless = "≷";
var gtrsim = "≳";
var gvertneqq = "≩︀";
var gvnE = "≩︀";
var Hacek = "ˇ";
var hairsp = " ";
var half = "½";
var hamilt = "ℋ";
var HARDcy = "Ъ";
var hardcy = "ъ";
var harrcir = "⥈";
var harr = "↔";
var hArr = "⇔";
var harrw = "↭";
var Hat = "^";
var hbar = "ℏ";
var Hcirc = "Ĥ";
var hcirc = "ĥ";
var hearts = "♥";
var heartsuit = "♥";
var hellip = "…";
var hercon = "⊹";
var hfr = "𝔥";
var Hfr = "ℌ";
var HilbertSpace = "ℋ";
var hksearow = "⤥";
var hkswarow = "⤦";
var hoarr = "⇿";
var homtht = "∻";
var hookleftarrow = "↩";
var hookrightarrow = "↪";
var hopf = "𝕙";
var Hopf = "ℍ";
var horbar = "―";
var HorizontalLine = "─";
var hscr = "𝒽";
var Hscr = "ℋ";
var hslash = "ℏ";
var Hstrok = "Ħ";
var hstrok = "ħ";
var HumpDownHump = "≎";
var HumpEqual = "≏";
var hybull = "⁃";
var hyphen = "‐";
var Iacute$1 = "Í";
var iacute$1 = "í";
var ic = "⁣";
var Icirc$1 = "Î";
var icirc$1 = "î";
var Icy = "И";
var icy = "и";
var Idot = "İ";
var IEcy = "Е";
var iecy = "е";
var iexcl$1 = "¡";
var iff = "⇔";
var ifr = "𝔦";
var Ifr = "ℑ";
var Igrave$1 = "Ì";
var igrave$1 = "ì";
var ii = "ⅈ";
var iiiint = "⨌";
var iiint = "∭";
var iinfin = "⧜";
var iiota = "℩";
var IJlig = "Ĳ";
var ijlig = "ĳ";
var Imacr = "Ī";
var imacr = "ī";
var image = "ℑ";
var ImaginaryI = "ⅈ";
var imagline = "ℐ";
var imagpart = "ℑ";
var imath = "ı";
var Im = "ℑ";
var imof = "⊷";
var imped = "Ƶ";
var Implies = "⇒";
var incare = "℅";
var infin = "∞";
var infintie = "⧝";
var inodot = "ı";
var intcal = "⊺";
var int = "∫";
var Int = "∬";
var integers = "ℤ";
var Integral = "∫";
var intercal = "⊺";
var Intersection = "⋂";
var intlarhk = "⨗";
var intprod = "⨼";
var InvisibleComma = "⁣";
var InvisibleTimes = "⁢";
var IOcy = "Ё";
var iocy = "ё";
var Iogon = "Į";
var iogon = "į";
var Iopf = "𝕀";
var iopf = "𝕚";
var Iota = "Ι";
var iota = "ι";
var iprod = "⨼";
var iquest$1 = "¿";
var iscr = "𝒾";
var Iscr = "ℐ";
var isin = "∈";
var isindot = "⋵";
var isinE = "⋹";
var isins = "⋴";
var isinsv = "⋳";
var isinv = "∈";
var it = "⁢";
var Itilde = "Ĩ";
var itilde = "ĩ";
var Iukcy = "І";
var iukcy = "і";
var Iuml$1 = "Ï";
var iuml$1 = "ï";
var Jcirc = "Ĵ";
var jcirc = "ĵ";
var Jcy = "Й";
var jcy = "й";
var Jfr = "𝔍";
var jfr = "𝔧";
var jmath = "ȷ";
var Jopf = "𝕁";
var jopf = "𝕛";
var Jscr = "𝒥";
var jscr = "𝒿";
var Jsercy = "Ј";
var jsercy = "ј";
var Jukcy = "Є";
var jukcy = "є";
var Kappa = "Κ";
var kappa = "κ";
var kappav = "ϰ";
var Kcedil = "Ķ";
var kcedil = "ķ";
var Kcy = "К";
var kcy = "к";
var Kfr = "𝔎";
var kfr = "𝔨";
var kgreen = "ĸ";
var KHcy = "Х";
var khcy = "х";
var KJcy = "Ќ";
var kjcy = "ќ";
var Kopf = "𝕂";
var kopf = "𝕜";
var Kscr = "𝒦";
var kscr = "𝓀";
var lAarr = "⇚";
var Lacute = "Ĺ";
var lacute = "ĺ";
var laemptyv = "⦴";
var lagran = "ℒ";
var Lambda = "Λ";
var lambda = "λ";
var lang = "⟨";
var Lang = "⟪";
var langd = "⦑";
var langle = "⟨";
var lap = "⪅";
var Laplacetrf = "ℒ";
var laquo$1 = "«";
var larrb = "⇤";
var larrbfs = "⤟";
var larr = "←";
var Larr = "↞";
var lArr = "⇐";
var larrfs = "⤝";
var larrhk = "↩";
var larrlp = "↫";
var larrpl = "⤹";
var larrsim = "⥳";
var larrtl = "↢";
var latail = "⤙";
var lAtail = "⤛";
var lat = "⪫";
var late$1 = "⪭";
var lates = "⪭︀";
var lbarr = "⤌";
var lBarr = "⤎";
var lbbrk = "❲";
var lbrace = "{";
var lbrack = "[";
var lbrke = "⦋";
var lbrksld = "⦏";
var lbrkslu = "⦍";
var Lcaron = "Ľ";
var lcaron = "ľ";
var Lcedil = "Ļ";
var lcedil = "ļ";
var lceil = "⌈";
var lcub = "{";
var Lcy = "Л";
var lcy = "л";
var ldca = "⤶";
var ldquo = "“";
var ldquor = "„";
var ldrdhar = "⥧";
var ldrushar = "⥋";
var ldsh = "↲";
var le = "≤";
var lE = "≦";
var LeftAngleBracket = "⟨";
var LeftArrowBar = "⇤";
var leftarrow = "←";
var LeftArrow = "←";
var Leftarrow = "⇐";
var LeftArrowRightArrow = "⇆";
var leftarrowtail = "↢";
var LeftCeiling = "⌈";
var LeftDoubleBracket = "⟦";
var LeftDownTeeVector = "⥡";
var LeftDownVectorBar = "⥙";
var LeftDownVector = "⇃";
var LeftFloor = "⌊";
var leftharpoondown = "↽";
var leftharpoonup = "↼";
var leftleftarrows = "⇇";
var leftrightarrow = "↔";
var LeftRightArrow = "↔";
var Leftrightarrow = "⇔";
var leftrightarrows = "⇆";
var leftrightharpoons = "⇋";
var leftrightsquigarrow = "↭";
var LeftRightVector = "⥎";
var LeftTeeArrow = "↤";
var LeftTee = "⊣";
var LeftTeeVector = "⥚";
var leftthreetimes = "⋋";
var LeftTriangleBar = "⧏";
var LeftTriangle = "⊲";
var LeftTriangleEqual = "⊴";
var LeftUpDownVector = "⥑";
var LeftUpTeeVector = "⥠";
var LeftUpVectorBar = "⥘";
var LeftUpVector = "↿";
var LeftVectorBar = "⥒";
var LeftVector = "↼";
var lEg = "⪋";
var leg = "⋚";
var leq = "≤";
var leqq = "≦";
var leqslant = "⩽";
var lescc = "⪨";
var les = "⩽";
var lesdot = "⩿";
var lesdoto = "⪁";
var lesdotor = "⪃";
var lesg = "⋚︀";
var lesges = "⪓";
var lessapprox = "⪅";
var lessdot = "⋖";
var lesseqgtr = "⋚";
var lesseqqgtr = "⪋";
var LessEqualGreater = "⋚";
var LessFullEqual = "≦";
var LessGreater = "≶";
var lessgtr = "≶";
var LessLess = "⪡";
var lesssim = "≲";
var LessSlantEqual = "⩽";
var LessTilde = "≲";
var lfisht = "⥼";
var lfloor = "⌊";
var Lfr = "𝔏";
var lfr = "𝔩";
var lg = "≶";
var lgE = "⪑";
var lHar = "⥢";
var lhard = "↽";
var lharu = "↼";
var lharul = "⥪";
var lhblk = "▄";
var LJcy = "Љ";
var ljcy = "љ";
var llarr = "⇇";
var ll = "≪";
var Ll = "⋘";
var llcorner = "⌞";
var Lleftarrow = "⇚";
var llhard = "⥫";
var lltri = "◺";
var Lmidot = "Ŀ";
var lmidot = "ŀ";
var lmoustache = "⎰";
var lmoust = "⎰";
var lnap = "⪉";
var lnapprox = "⪉";
var lne = "⪇";
var lnE = "≨";
var lneq = "⪇";
var lneqq = "≨";
var lnsim = "⋦";
var loang = "⟬";
var loarr = "⇽";
var lobrk = "⟦";
var longleftarrow = "⟵";
var LongLeftArrow = "⟵";
var Longleftarrow = "⟸";
var longleftrightarrow = "⟷";
var LongLeftRightArrow = "⟷";
var Longleftrightarrow = "⟺";
var longmapsto = "⟼";
var longrightarrow = "⟶";
var LongRightArrow = "⟶";
var Longrightarrow = "⟹";
var looparrowleft = "↫";
var looparrowright = "↬";
var lopar = "⦅";
var Lopf = "𝕃";
var lopf = "𝕝";
var loplus = "⨭";
var lotimes = "⨴";
var lowast = "∗";
var lowbar = "_";
var LowerLeftArrow = "↙";
var LowerRightArrow = "↘";
var loz = "◊";
var lozenge = "◊";
var lozf = "⧫";
var lpar = "(";
var lparlt = "⦓";
var lrarr = "⇆";
var lrcorner = "⌟";
var lrhar = "⇋";
var lrhard = "⥭";
var lrm = "‎";
var lrtri = "⊿";
var lsaquo = "‹";
var lscr = "𝓁";
var Lscr = "ℒ";
var lsh = "↰";
var Lsh = "↰";
var lsim = "≲";
var lsime = "⪍";
var lsimg = "⪏";
var lsqb = "[";
var lsquo = "‘";
var lsquor = "‚";
var Lstrok = "Ł";
var lstrok = "ł";
var ltcc = "⪦";
var ltcir = "⩹";
var lt$2 = "<";
var LT$1 = "<";
var Lt = "≪";
var ltdot = "⋖";
var lthree = "⋋";
var ltimes = "⋉";
var ltlarr = "⥶";
var ltquest = "⩻";
var ltri = "◃";
var ltrie = "⊴";
var ltrif = "◂";
var ltrPar = "⦖";
var lurdshar = "⥊";
var luruhar = "⥦";
var lvertneqq = "≨︀";
var lvnE = "≨︀";
var macr$1 = "¯";
var male = "♂";
var malt = "✠";
var maltese = "✠";
var map = "↦";
var mapsto = "↦";
var mapstodown = "↧";
var mapstoleft = "↤";
var mapstoup = "↥";
var marker = "▮";
var mcomma = "⨩";
var Mcy = "М";
var mcy = "м";
var mdash = "—";
var mDDot = "∺";
var measuredangle = "∡";
var MediumSpace = " ";
var Mellintrf = "ℳ";
var Mfr = "𝔐";
var mfr = "𝔪";
var mho = "℧";
var micro$1 = "µ";
var midast = "*";
var midcir = "⫰";
var mid = "∣";
var middot$1 = "·";
var minusb = "⊟";
var minus = "−";
var minusd = "∸";
var minusdu = "⨪";
var MinusPlus = "∓";
var mlcp = "⫛";
var mldr = "…";
var mnplus = "∓";
var models = "⊧";
var Mopf = "𝕄";
var mopf = "𝕞";
var mp = "∓";
var mscr = "𝓂";
var Mscr = "ℳ";
var mstpos = "∾";
var Mu = "Μ";
var mu = "μ";
var multimap = "⊸";
var mumap = "⊸";
var nabla = "∇";
var Nacute = "Ń";
var nacute = "ń";
var nang = "∠⃒";
var nap = "≉";
var napE = "⩰̸";
var napid = "≋̸";
var napos = "ŉ";
var napprox = "≉";
var natural = "♮";
var naturals = "ℕ";
var natur = "♮";
var nbsp$1 = " ";
var nbump = "≎̸";
var nbumpe = "≏̸";
var ncap = "⩃";
var Ncaron = "Ň";
var ncaron = "ň";
var Ncedil = "Ņ";
var ncedil = "ņ";
var ncong = "≇";
var ncongdot = "⩭̸";
var ncup = "⩂";
var Ncy = "Н";
var ncy = "н";
var ndash = "–";
var nearhk = "⤤";
var nearr = "↗";
var neArr = "⇗";
var nearrow = "↗";
var ne = "≠";
var nedot = "≐̸";
var NegativeMediumSpace = "​";
var NegativeThickSpace = "​";
var NegativeThinSpace = "​";
var NegativeVeryThinSpace = "​";
var nequiv = "≢";
var nesear = "⤨";
var nesim = "≂̸";
var NestedGreaterGreater = "≫";
var NestedLessLess = "≪";
var NewLine = "\n";
var nexist = "∄";
var nexists = "∄";
var Nfr = "𝔑";
var nfr = "𝔫";
var ngE = "≧̸";
var nge = "≱";
var ngeq = "≱";
var ngeqq = "≧̸";
var ngeqslant = "⩾̸";
var nges = "⩾̸";
var nGg = "⋙̸";
var ngsim = "≵";
var nGt = "≫⃒";
var ngt = "≯";
var ngtr = "≯";
var nGtv = "≫̸";
var nharr = "↮";
var nhArr = "⇎";
var nhpar = "⫲";
var ni = "∋";
var nis = "⋼";
var nisd = "⋺";
var niv = "∋";
var NJcy = "Њ";
var njcy = "њ";
var nlarr = "↚";
var nlArr = "⇍";
var nldr = "‥";
var nlE = "≦̸";
var nle = "≰";
var nleftarrow = "↚";
var nLeftarrow = "⇍";
var nleftrightarrow = "↮";
var nLeftrightarrow = "⇎";
var nleq = "≰";
var nleqq = "≦̸";
var nleqslant = "⩽̸";
var nles = "⩽̸";
var nless = "≮";
var nLl = "⋘̸";
var nlsim = "≴";
var nLt = "≪⃒";
var nlt = "≮";
var nltri = "⋪";
var nltrie = "⋬";
var nLtv = "≪̸";
var nmid = "∤";
var NoBreak = "⁠";
var NonBreakingSpace = " ";
var nopf = "𝕟";
var Nopf = "ℕ";
var Not = "⫬";
var not$1 = "¬";
var NotCongruent = "≢";
var NotCupCap = "≭";
var NotDoubleVerticalBar = "∦";
var NotElement = "∉";
var NotEqual = "≠";
var NotEqualTilde = "≂̸";
var NotExists = "∄";
var NotGreater = "≯";
var NotGreaterEqual = "≱";
var NotGreaterFullEqual = "≧̸";
var NotGreaterGreater = "≫̸";
var NotGreaterLess = "≹";
var NotGreaterSlantEqual = "⩾̸";
var NotGreaterTilde = "≵";
var NotHumpDownHump = "≎̸";
var NotHumpEqual = "≏̸";
var notin = "∉";
var notindot = "⋵̸";
var notinE = "⋹̸";
var notinva = "∉";
var notinvb = "⋷";
var notinvc = "⋶";
var NotLeftTriangleBar = "⧏̸";
var NotLeftTriangle = "⋪";
var NotLeftTriangleEqual = "⋬";
var NotLess = "≮";
var NotLessEqual = "≰";
var NotLessGreater = "≸";
var NotLessLess = "≪̸";
var NotLessSlantEqual = "⩽̸";
var NotLessTilde = "≴";
var NotNestedGreaterGreater = "⪢̸";
var NotNestedLessLess = "⪡̸";
var notni = "∌";
var notniva = "∌";
var notnivb = "⋾";
var notnivc = "⋽";
var NotPrecedes = "⊀";
var NotPrecedesEqual = "⪯̸";
var NotPrecedesSlantEqual = "⋠";
var NotReverseElement = "∌";
var NotRightTriangleBar = "⧐̸";
var NotRightTriangle = "⋫";
var NotRightTriangleEqual = "⋭";
var NotSquareSubset = "⊏̸";
var NotSquareSubsetEqual = "⋢";
var NotSquareSuperset = "⊐̸";
var NotSquareSupersetEqual = "⋣";
var NotSubset = "⊂⃒";
var NotSubsetEqual = "⊈";
var NotSucceeds = "⊁";
var NotSucceedsEqual = "⪰̸";
var NotSucceedsSlantEqual = "⋡";
var NotSucceedsTilde = "≿̸";
var NotSuperset = "⊃⃒";
var NotSupersetEqual = "⊉";
var NotTilde = "≁";
var NotTildeEqual = "≄";
var NotTildeFullEqual = "≇";
var NotTildeTilde = "≉";
var NotVerticalBar = "∤";
var nparallel = "∦";
var npar = "∦";
var nparsl = "⫽⃥";
var npart = "∂̸";
var npolint = "⨔";
var npr = "⊀";
var nprcue = "⋠";
var nprec = "⊀";
var npreceq = "⪯̸";
var npre = "⪯̸";
var nrarrc = "⤳̸";
var nrarr = "↛";
var nrArr = "⇏";
var nrarrw = "↝̸";
var nrightarrow = "↛";
var nRightarrow = "⇏";
var nrtri = "⋫";
var nrtrie = "⋭";
var nsc = "⊁";
var nsccue = "⋡";
var nsce = "⪰̸";
var Nscr = "𝒩";
var nscr = "𝓃";
var nshortmid = "∤";
var nshortparallel = "∦";
var nsim = "≁";
var nsime = "≄";
var nsimeq = "≄";
var nsmid = "∤";
var nspar = "∦";
var nsqsube = "⋢";
var nsqsupe = "⋣";
var nsub = "⊄";
var nsubE = "⫅̸";
var nsube = "⊈";
var nsubset = "⊂⃒";
var nsubseteq = "⊈";
var nsubseteqq = "⫅̸";
var nsucc = "⊁";
var nsucceq = "⪰̸";
var nsup = "⊅";
var nsupE = "⫆̸";
var nsupe = "⊉";
var nsupset = "⊃⃒";
var nsupseteq = "⊉";
var nsupseteqq = "⫆̸";
var ntgl = "≹";
var Ntilde$1 = "Ñ";
var ntilde$1 = "ñ";
var ntlg = "≸";
var ntriangleleft = "⋪";
var ntrianglelefteq = "⋬";
var ntriangleright = "⋫";
var ntrianglerighteq = "⋭";
var Nu = "Ν";
var nu = "ν";
var num = "#";
var numero = "№";
var numsp = " ";
var nvap = "≍⃒";
var nvdash = "⊬";
var nvDash = "⊭";
var nVdash = "⊮";
var nVDash = "⊯";
var nvge = "≥⃒";
var nvgt = ">⃒";
var nvHarr = "⤄";
var nvinfin = "⧞";
var nvlArr = "⤂";
var nvle = "≤⃒";
var nvlt = "<⃒";
var nvltrie = "⊴⃒";
var nvrArr = "⤃";
var nvrtrie = "⊵⃒";
var nvsim = "∼⃒";
var nwarhk = "⤣";
var nwarr = "↖";
var nwArr = "⇖";
var nwarrow = "↖";
var nwnear = "⤧";
var Oacute$1 = "Ó";
var oacute$1 = "ó";
var oast = "⊛";
var Ocirc$1 = "Ô";
var ocirc$1 = "ô";
var ocir = "⊚";
var Ocy = "О";
var ocy = "о";
var odash = "⊝";
var Odblac = "Ő";
var odblac = "ő";
var odiv = "⨸";
var odot = "⊙";
var odsold = "⦼";
var OElig = "Œ";
var oelig = "œ";
var ofcir = "⦿";
var Ofr = "𝔒";
var ofr = "𝔬";
var ogon = "˛";
var Ograve$1 = "Ò";
var ograve$1 = "ò";
var ogt = "⧁";
var ohbar = "⦵";
var ohm = "Ω";
var oint = "∮";
var olarr = "↺";
var olcir = "⦾";
var olcross = "⦻";
var oline = "‾";
var olt = "⧀";
var Omacr = "Ō";
var omacr = "ō";
var Omega = "Ω";
var omega = "ω";
var Omicron = "Ο";
var omicron = "ο";
var omid = "⦶";
var ominus = "⊖";
var Oopf = "𝕆";
var oopf = "𝕠";
var opar = "⦷";
var OpenCurlyDoubleQuote = "“";
var OpenCurlyQuote = "‘";
var operp = "⦹";
var oplus = "⊕";
var orarr = "↻";
var Or = "⩔";
var or = "∨";
var ord = "⩝";
var order = "ℴ";
var orderof = "ℴ";
var ordf$1 = "ª";
var ordm$1 = "º";
var origof = "⊶";
var oror = "⩖";
var orslope = "⩗";
var orv = "⩛";
var oS = "Ⓢ";
var Oscr = "𝒪";
var oscr = "ℴ";
var Oslash$1 = "Ø";
var oslash$1 = "ø";
var osol = "⊘";
var Otilde$1 = "Õ";
var otilde$1 = "õ";
var otimesas = "⨶";
var Otimes = "⨷";
var otimes = "⊗";
var Ouml$1 = "Ö";
var ouml$1 = "ö";
var ovbar = "⌽";
var OverBar = "‾";
var OverBrace = "⏞";
var OverBracket = "⎴";
var OverParenthesis = "⏜";
var para$1 = "¶";
var parallel = "∥";
var par = "∥";
var parsim = "⫳";
var parsl = "⫽";
var part = "∂";
var PartialD = "∂";
var Pcy = "П";
var pcy = "п";
var percnt = "%";
var period = ".";
var permil = "‰";
var perp = "⊥";
var pertenk = "‱";
var Pfr = "𝔓";
var pfr = "𝔭";
var Phi = "Φ";
var phi = "φ";
var phiv = "ϕ";
var phmmat = "ℳ";
var phone = "☎";
var Pi = "Π";
var pi = "π";
var pitchfork = "⋔";
var piv = "ϖ";
var planck = "ℏ";
var planckh = "ℎ";
var plankv = "ℏ";
var plusacir = "⨣";
var plusb = "⊞";
var pluscir = "⨢";
var plus = "+";
var plusdo = "∔";
var plusdu = "⨥";
var pluse = "⩲";
var PlusMinus = "±";
var plusmn$1 = "±";
var plussim = "⨦";
var plustwo = "⨧";
var pm = "±";
var Poincareplane = "ℌ";
var pointint = "⨕";
var popf = "𝕡";
var Popf = "ℙ";
var pound$1 = "£";
var prap = "⪷";
var Pr = "⪻";
var pr = "≺";
var prcue = "≼";
var precapprox = "⪷";
var prec = "≺";
var preccurlyeq = "≼";
var Precedes = "≺";
var PrecedesEqual = "⪯";
var PrecedesSlantEqual = "≼";
var PrecedesTilde = "≾";
var preceq = "⪯";
var precnapprox = "⪹";
var precneqq = "⪵";
var precnsim = "⋨";
var pre = "⪯";
var prE = "⪳";
var precsim = "≾";
var prime = "′";
var Prime = "″";
var primes = "ℙ";
var prnap = "⪹";
var prnE = "⪵";
var prnsim = "⋨";
var prod = "∏";
var Product = "∏";
var profalar = "⌮";
var profline = "⌒";
var profsurf = "⌓";
var prop = "∝";
var Proportional = "∝";
var Proportion = "∷";
var propto = "∝";
var prsim = "≾";
var prurel = "⊰";
var Pscr = "𝒫";
var pscr = "𝓅";
var Psi = "Ψ";
var psi = "ψ";
var puncsp = " ";
var Qfr = "𝔔";
var qfr = "𝔮";
var qint = "⨌";
var qopf = "𝕢";
var Qopf = "ℚ";
var qprime = "⁗";
var Qscr = "𝒬";
var qscr = "𝓆";
var quaternions = "ℍ";
var quatint = "⨖";
var quest = "?";
var questeq = "≟";
var quot$2 = "\"";
var QUOT$1 = "\"";
var rAarr = "⇛";
var race = "∽̱";
var Racute = "Ŕ";
var racute = "ŕ";
var radic = "√";
var raemptyv = "⦳";
var rang = "⟩";
var Rang = "⟫";
var rangd = "⦒";
var range = "⦥";
var rangle = "⟩";
var raquo$1 = "»";
var rarrap = "⥵";
var rarrb = "⇥";
var rarrbfs = "⤠";
var rarrc = "⤳";
var rarr = "→";
var Rarr = "↠";
var rArr = "⇒";
var rarrfs = "⤞";
var rarrhk = "↪";
var rarrlp = "↬";
var rarrpl = "⥅";
var rarrsim = "⥴";
var Rarrtl = "⤖";
var rarrtl = "↣";
var rarrw = "↝";
var ratail = "⤚";
var rAtail = "⤜";
var ratio = "∶";
var rationals = "ℚ";
var rbarr = "⤍";
var rBarr = "⤏";
var RBarr = "⤐";
var rbbrk = "❳";
var rbrace = "}";
var rbrack = "]";
var rbrke = "⦌";
var rbrksld = "⦎";
var rbrkslu = "⦐";
var Rcaron = "Ř";
var rcaron = "ř";
var Rcedil = "Ŗ";
var rcedil = "ŗ";
var rceil = "⌉";
var rcub = "}";
var Rcy = "Р";
var rcy = "р";
var rdca = "⤷";
var rdldhar = "⥩";
var rdquo = "”";
var rdquor = "”";
var rdsh = "↳";
var real = "ℜ";
var realine = "ℛ";
var realpart = "ℜ";
var reals = "ℝ";
var Re = "ℜ";
var rect = "▭";
var reg$1 = "®";
var REG$1 = "®";
var ReverseElement = "∋";
var ReverseEquilibrium = "⇋";
var ReverseUpEquilibrium = "⥯";
var rfisht = "⥽";
var rfloor = "⌋";
var rfr = "𝔯";
var Rfr = "ℜ";
var rHar = "⥤";
var rhard = "⇁";
var rharu = "⇀";
var rharul = "⥬";
var Rho = "Ρ";
var rho = "ρ";
var rhov = "ϱ";
var RightAngleBracket = "⟩";
var RightArrowBar = "⇥";
var rightarrow = "→";
var RightArrow = "→";
var Rightarrow = "⇒";
var RightArrowLeftArrow = "⇄";
var rightarrowtail = "↣";
var RightCeiling = "⌉";
var RightDoubleBracket = "⟧";
var RightDownTeeVector = "⥝";
var RightDownVectorBar = "⥕";
var RightDownVector = "⇂";
var RightFloor = "⌋";
var rightharpoondown = "⇁";
var rightharpoonup = "⇀";
var rightleftarrows = "⇄";
var rightleftharpoons = "⇌";
var rightrightarrows = "⇉";
var rightsquigarrow = "↝";
var RightTeeArrow = "↦";
var RightTee = "⊢";
var RightTeeVector = "⥛";
var rightthreetimes = "⋌";
var RightTriangleBar = "⧐";
var RightTriangle = "⊳";
var RightTriangleEqual = "⊵";
var RightUpDownVector = "⥏";
var RightUpTeeVector = "⥜";
var RightUpVectorBar = "⥔";
var RightUpVector = "↾";
var RightVectorBar = "⥓";
var RightVector = "⇀";
var ring = "˚";
var risingdotseq = "≓";
var rlarr = "⇄";
var rlhar = "⇌";
var rlm = "‏";
var rmoustache = "⎱";
var rmoust = "⎱";
var rnmid = "⫮";
var roang = "⟭";
var roarr = "⇾";
var robrk = "⟧";
var ropar = "⦆";
var ropf = "𝕣";
var Ropf = "ℝ";
var roplus = "⨮";
var rotimes = "⨵";
var RoundImplies = "⥰";
var rpar = ")";
var rpargt = "⦔";
var rppolint = "⨒";
var rrarr = "⇉";
var Rrightarrow = "⇛";
var rsaquo = "›";
var rscr = "𝓇";
var Rscr = "ℛ";
var rsh = "↱";
var Rsh = "↱";
var rsqb = "]";
var rsquo = "’";
var rsquor = "’";
var rthree = "⋌";
var rtimes = "⋊";
var rtri = "▹";
var rtrie = "⊵";
var rtrif = "▸";
var rtriltri = "⧎";
var RuleDelayed = "⧴";
var ruluhar = "⥨";
var rx = "℞";
var Sacute = "Ś";
var sacute = "ś";
var sbquo = "‚";
var scap = "⪸";
var Scaron = "Š";
var scaron = "š";
var Sc = "⪼";
var sc = "≻";
var sccue = "≽";
var sce = "⪰";
var scE = "⪴";
var Scedil = "Ş";
var scedil = "ş";
var Scirc = "Ŝ";
var scirc = "ŝ";
var scnap = "⪺";
var scnE = "⪶";
var scnsim = "⋩";
var scpolint = "⨓";
var scsim = "≿";
var Scy = "С";
var scy = "с";
var sdotb = "⊡";
var sdot = "⋅";
var sdote = "⩦";
var searhk = "⤥";
var searr = "↘";
var seArr = "⇘";
var searrow = "↘";
var sect$1 = "§";
var semi = ";";
var seswar = "⤩";
var setminus = "∖";
var setmn = "∖";
var sext = "✶";
var Sfr = "𝔖";
var sfr = "𝔰";
var sfrown = "⌢";
var sharp = "♯";
var SHCHcy = "Щ";
var shchcy = "щ";
var SHcy = "Ш";
var shcy = "ш";
var ShortDownArrow = "↓";
var ShortLeftArrow = "←";
var shortmid = "∣";
var shortparallel = "∥";
var ShortRightArrow = "→";
var ShortUpArrow = "↑";
var shy$1 = "­";
var Sigma = "Σ";
var sigma = "σ";
var sigmaf = "ς";
var sigmav = "ς";
var sim = "∼";
var simdot = "⩪";
var sime = "≃";
var simeq = "≃";
var simg = "⪞";
var simgE = "⪠";
var siml = "⪝";
var simlE = "⪟";
var simne = "≆";
var simplus = "⨤";
var simrarr = "⥲";
var slarr = "←";
var SmallCircle = "∘";
var smallsetminus = "∖";
var smashp = "⨳";
var smeparsl = "⧤";
var smid = "∣";
var smile = "⌣";
var smt = "⪪";
var smte = "⪬";
var smtes = "⪬︀";
var SOFTcy = "Ь";
var softcy = "ь";
var solbar = "⌿";
var solb = "⧄";
var sol = "/";
var Sopf = "𝕊";
var sopf = "𝕤";
var spades = "♠";
var spadesuit = "♠";
var spar = "∥";
var sqcap = "⊓";
var sqcaps = "⊓︀";
var sqcup = "⊔";
var sqcups = "⊔︀";
var Sqrt = "√";
var sqsub = "⊏";
var sqsube = "⊑";
var sqsubset = "⊏";
var sqsubseteq = "⊑";
var sqsup = "⊐";
var sqsupe = "⊒";
var sqsupset = "⊐";
var sqsupseteq = "⊒";
var square = "□";
var Square = "□";
var SquareIntersection = "⊓";
var SquareSubset = "⊏";
var SquareSubsetEqual = "⊑";
var SquareSuperset = "⊐";
var SquareSupersetEqual = "⊒";
var SquareUnion = "⊔";
var squarf = "▪";
var squ = "□";
var squf = "▪";
var srarr = "→";
var Sscr = "𝒮";
var sscr = "𝓈";
var ssetmn = "∖";
var ssmile = "⌣";
var sstarf = "⋆";
var Star = "⋆";
var star = "☆";
var starf = "★";
var straightepsilon = "ϵ";
var straightphi = "ϕ";
var strns = "¯";
var sub = "⊂";
var Sub = "⋐";
var subdot = "⪽";
var subE = "⫅";
var sube = "⊆";
var subedot = "⫃";
var submult = "⫁";
var subnE = "⫋";
var subne = "⊊";
var subplus = "⪿";
var subrarr = "⥹";
var subset = "⊂";
var Subset = "⋐";
var subseteq = "⊆";
var subseteqq = "⫅";
var SubsetEqual = "⊆";
var subsetneq = "⊊";
var subsetneqq = "⫋";
var subsim = "⫇";
var subsub = "⫕";
var subsup = "⫓";
var succapprox = "⪸";
var succ = "≻";
var succcurlyeq = "≽";
var Succeeds = "≻";
var SucceedsEqual = "⪰";
var SucceedsSlantEqual = "≽";
var SucceedsTilde = "≿";
var succeq = "⪰";
var succnapprox = "⪺";
var succneqq = "⪶";
var succnsim = "⋩";
var succsim = "≿";
var SuchThat = "∋";
var sum = "∑";
var Sum = "∑";
var sung = "♪";
var sup1$1 = "¹";
var sup2$1 = "²";
var sup3$1 = "³";
var sup = "⊃";
var Sup = "⋑";
var supdot = "⪾";
var supdsub = "⫘";
var supE = "⫆";
var supe = "⊇";
var supedot = "⫄";
var Superset = "⊃";
var SupersetEqual = "⊇";
var suphsol = "⟉";
var suphsub = "⫗";
var suplarr = "⥻";
var supmult = "⫂";
var supnE = "⫌";
var supne = "⊋";
var supplus = "⫀";
var supset = "⊃";
var Supset = "⋑";
var supseteq = "⊇";
var supseteqq = "⫆";
var supsetneq = "⊋";
var supsetneqq = "⫌";
var supsim = "⫈";
var supsub = "⫔";
var supsup = "⫖";
var swarhk = "⤦";
var swarr = "↙";
var swArr = "⇙";
var swarrow = "↙";
var swnwar = "⤪";
var szlig$1 = "ß";
var Tab = "\t";
var target = "⌖";
var Tau = "Τ";
var tau = "τ";
var tbrk = "⎴";
var Tcaron = "Ť";
var tcaron = "ť";
var Tcedil = "Ţ";
var tcedil = "ţ";
var Tcy = "Т";
var tcy = "т";
var tdot = "⃛";
var telrec = "⌕";
var Tfr = "𝔗";
var tfr = "𝔱";
var there4 = "∴";
var therefore = "∴";
var Therefore = "∴";
var Theta = "Θ";
var theta = "θ";
var thetasym = "ϑ";
var thetav = "ϑ";
var thickapprox = "≈";
var thicksim = "∼";
var ThickSpace = "  ";
var ThinSpace = " ";
var thinsp = " ";
var thkap = "≈";
var thksim = "∼";
var THORN$1 = "Þ";
var thorn$1 = "þ";
var tilde = "˜";
var Tilde = "∼";
var TildeEqual = "≃";
var TildeFullEqual = "≅";
var TildeTilde = "≈";
var timesbar = "⨱";
var timesb = "⊠";
var times$1 = "×";
var timesd = "⨰";
var tint = "∭";
var toea = "⤨";
var topbot = "⌶";
var topcir = "⫱";
var top = "⊤";
var Topf = "𝕋";
var topf = "𝕥";
var topfork = "⫚";
var tosa = "⤩";
var tprime = "‴";
var trade = "™";
var TRADE = "™";
var triangle = "▵";
var triangledown = "▿";
var triangleleft = "◃";
var trianglelefteq = "⊴";
var triangleq = "≜";
var triangleright = "▹";
var trianglerighteq = "⊵";
var tridot = "◬";
var trie = "≜";
var triminus = "⨺";
var TripleDot = "⃛";
var triplus = "⨹";
var trisb = "⧍";
var tritime = "⨻";
var trpezium = "⏢";
var Tscr = "𝒯";
var tscr = "𝓉";
var TScy = "Ц";
var tscy = "ц";
var TSHcy = "Ћ";
var tshcy = "ћ";
var Tstrok = "Ŧ";
var tstrok = "ŧ";
var twixt = "≬";
var twoheadleftarrow = "↞";
var twoheadrightarrow = "↠";
var Uacute$1 = "Ú";
var uacute$1 = "ú";
var uarr = "↑";
var Uarr = "↟";
var uArr = "⇑";
var Uarrocir = "⥉";
var Ubrcy = "Ў";
var ubrcy = "ў";
var Ubreve = "Ŭ";
var ubreve = "ŭ";
var Ucirc$1 = "Û";
var ucirc$1 = "û";
var Ucy = "У";
var ucy = "у";
var udarr = "⇅";
var Udblac = "Ű";
var udblac = "ű";
var udhar = "⥮";
var ufisht = "⥾";
var Ufr = "𝔘";
var ufr = "𝔲";
var Ugrave$1 = "Ù";
var ugrave$1 = "ù";
var uHar = "⥣";
var uharl = "↿";
var uharr = "↾";
var uhblk = "▀";
var ulcorn = "⌜";
var ulcorner = "⌜";
var ulcrop = "⌏";
var ultri = "◸";
var Umacr = "Ū";
var umacr = "ū";
var uml$1 = "¨";
var UnderBar = "_";
var UnderBrace = "⏟";
var UnderBracket = "⎵";
var UnderParenthesis = "⏝";
var Union = "⋃";
var UnionPlus = "⊎";
var Uogon = "Ų";
var uogon = "ų";
var Uopf = "𝕌";
var uopf = "𝕦";
var UpArrowBar = "⤒";
var uparrow = "↑";
var UpArrow = "↑";
var Uparrow = "⇑";
var UpArrowDownArrow = "⇅";
var updownarrow = "↕";
var UpDownArrow = "↕";
var Updownarrow = "⇕";
var UpEquilibrium = "⥮";
var upharpoonleft = "↿";
var upharpoonright = "↾";
var uplus = "⊎";
var UpperLeftArrow = "↖";
var UpperRightArrow = "↗";
var upsi = "υ";
var Upsi = "ϒ";
var upsih = "ϒ";
var Upsilon = "Υ";
var upsilon = "υ";
var UpTeeArrow = "↥";
var UpTee = "⊥";
var upuparrows = "⇈";
var urcorn = "⌝";
var urcorner = "⌝";
var urcrop = "⌎";
var Uring = "Ů";
var uring = "ů";
var urtri = "◹";
var Uscr = "𝒰";
var uscr = "𝓊";
var utdot = "⋰";
var Utilde = "Ũ";
var utilde = "ũ";
var utri = "▵";
var utrif = "▴";
var uuarr = "⇈";
var Uuml$1 = "Ü";
var uuml$1 = "ü";
var uwangle = "⦧";
var vangrt = "⦜";
var varepsilon = "ϵ";
var varkappa = "ϰ";
var varnothing = "∅";
var varphi = "ϕ";
var varpi = "ϖ";
var varpropto = "∝";
var varr = "↕";
var vArr = "⇕";
var varrho = "ϱ";
var varsigma = "ς";
var varsubsetneq = "⊊︀";
var varsubsetneqq = "⫋︀";
var varsupsetneq = "⊋︀";
var varsupsetneqq = "⫌︀";
var vartheta = "ϑ";
var vartriangleleft = "⊲";
var vartriangleright = "⊳";
var vBar = "⫨";
var Vbar = "⫫";
var vBarv = "⫩";
var Vcy = "В";
var vcy = "в";
var vdash = "⊢";
var vDash = "⊨";
var Vdash = "⊩";
var VDash = "⊫";
var Vdashl = "⫦";
var veebar = "⊻";
var vee = "∨";
var Vee = "⋁";
var veeeq = "≚";
var vellip = "⋮";
var verbar = "|";
var Verbar = "‖";
var vert = "|";
var Vert = "‖";
var VerticalBar = "∣";
var VerticalLine = "|";
var VerticalSeparator = "❘";
var VerticalTilde = "≀";
var VeryThinSpace = " ";
var Vfr = "𝔙";
var vfr = "𝔳";
var vltri = "⊲";
var vnsub = "⊂⃒";
var vnsup = "⊃⃒";
var Vopf = "𝕍";
var vopf = "𝕧";
var vprop = "∝";
var vrtri = "⊳";
var Vscr = "𝒱";
var vscr = "𝓋";
var vsubnE = "⫋︀";
var vsubne = "⊊︀";
var vsupnE = "⫌︀";
var vsupne = "⊋︀";
var Vvdash = "⊪";
var vzigzag = "⦚";
var Wcirc = "Ŵ";
var wcirc = "ŵ";
var wedbar = "⩟";
var wedge = "∧";
var Wedge = "⋀";
var wedgeq = "≙";
var weierp = "℘";
var Wfr = "𝔚";
var wfr = "𝔴";
var Wopf = "𝕎";
var wopf = "𝕨";
var wp = "℘";
var wr = "≀";
var wreath = "≀";
var Wscr = "𝒲";
var wscr = "𝓌";
var xcap = "⋂";
var xcirc = "◯";
var xcup = "⋃";
var xdtri = "▽";
var Xfr = "𝔛";
var xfr = "𝔵";
var xharr = "⟷";
var xhArr = "⟺";
var Xi = "Ξ";
var xi = "ξ";
var xlarr = "⟵";
var xlArr = "⟸";
var xmap = "⟼";
var xnis = "⋻";
var xodot = "⨀";
var Xopf = "𝕏";
var xopf = "𝕩";
var xoplus = "⨁";
var xotime = "⨂";
var xrarr = "⟶";
var xrArr = "⟹";
var Xscr = "𝒳";
var xscr = "𝓍";
var xsqcup = "⨆";
var xuplus = "⨄";
var xutri = "△";
var xvee = "⋁";
var xwedge = "⋀";
var Yacute$1 = "Ý";
var yacute$1 = "ý";
var YAcy = "Я";
var yacy = "я";
var Ycirc = "Ŷ";
var ycirc = "ŷ";
var Ycy = "Ы";
var ycy = "ы";
var yen$1 = "¥";
var Yfr = "𝔜";
var yfr = "𝔶";
var YIcy = "Ї";
var yicy = "ї";
var Yopf = "𝕐";
var yopf = "𝕪";
var Yscr = "𝒴";
var yscr = "𝓎";
var YUcy = "Ю";
var yucy = "ю";
var yuml$1 = "ÿ";
var Yuml = "Ÿ";
var Zacute = "Ź";
var zacute = "ź";
var Zcaron = "Ž";
var zcaron = "ž";
var Zcy = "З";
var zcy = "з";
var Zdot = "Ż";
var zdot = "ż";
var zeetrf = "ℨ";
var ZeroWidthSpace = "​";
var Zeta = "Ζ";
var zeta = "ζ";
var zfr = "𝔷";
var Zfr = "ℨ";
var ZHcy = "Ж";
var zhcy = "ж";
var zigrarr = "⇝";
var zopf = "𝕫";
var Zopf = "ℤ";
var Zscr = "𝒵";
var zscr = "𝓏";
var zwj = "‍";
var zwnj = "‌";
var require$$1$5 = {
	Aacute: Aacute$1,
	aacute: aacute$1,
	Abreve: Abreve,
	abreve: abreve,
	ac: ac,
	acd: acd,
	acE: acE,
	Acirc: Acirc$1,
	acirc: acirc$1,
	acute: acute$1,
	Acy: Acy,
	acy: acy,
	AElig: AElig$1,
	aelig: aelig$1,
	af: af,
	Afr: Afr,
	afr: afr,
	Agrave: Agrave$1,
	agrave: agrave$1,
	alefsym: alefsym,
	aleph: aleph,
	Alpha: Alpha,
	alpha: alpha,
	Amacr: Amacr,
	amacr: amacr,
	amalg: amalg,
	amp: amp$2,
	AMP: AMP$1,
	andand: andand,
	And: And,
	and: and,
	andd: andd,
	andslope: andslope,
	andv: andv,
	ang: ang,
	ange: ange,
	angle: angle,
	angmsdaa: angmsdaa,
	angmsdab: angmsdab,
	angmsdac: angmsdac,
	angmsdad: angmsdad,
	angmsdae: angmsdae,
	angmsdaf: angmsdaf,
	angmsdag: angmsdag,
	angmsdah: angmsdah,
	angmsd: angmsd,
	angrt: angrt,
	angrtvb: angrtvb,
	angrtvbd: angrtvbd,
	angsph: angsph,
	angst: angst,
	angzarr: angzarr,
	Aogon: Aogon,
	aogon: aogon,
	Aopf: Aopf,
	aopf: aopf,
	apacir: apacir,
	ap: ap,
	apE: apE,
	ape: ape,
	apid: apid,
	apos: apos$1,
	ApplyFunction: ApplyFunction,
	approx: approx,
	approxeq: approxeq,
	Aring: Aring$1,
	aring: aring$1,
	Ascr: Ascr,
	ascr: ascr,
	Assign: Assign,
	ast: ast,
	asymp: asymp,
	asympeq: asympeq,
	Atilde: Atilde$1,
	atilde: atilde$1,
	Auml: Auml$1,
	auml: auml$1,
	awconint: awconint,
	awint: awint,
	backcong: backcong,
	backepsilon: backepsilon,
	backprime: backprime,
	backsim: backsim,
	backsimeq: backsimeq,
	Backslash: Backslash,
	Barv: Barv,
	barvee: barvee,
	barwed: barwed,
	Barwed: Barwed,
	barwedge: barwedge,
	bbrk: bbrk,
	bbrktbrk: bbrktbrk,
	bcong: bcong,
	Bcy: Bcy,
	bcy: bcy,
	bdquo: bdquo,
	becaus: becaus,
	because: because,
	Because: Because,
	bemptyv: bemptyv,
	bepsi: bepsi,
	bernou: bernou,
	Bernoullis: Bernoullis,
	Beta: Beta,
	beta: beta,
	beth: beth,
	between: between,
	Bfr: Bfr,
	bfr: bfr,
	bigcap: bigcap,
	bigcirc: bigcirc,
	bigcup: bigcup,
	bigodot: bigodot,
	bigoplus: bigoplus,
	bigotimes: bigotimes,
	bigsqcup: bigsqcup,
	bigstar: bigstar,
	bigtriangledown: bigtriangledown,
	bigtriangleup: bigtriangleup,
	biguplus: biguplus,
	bigvee: bigvee,
	bigwedge: bigwedge,
	bkarow: bkarow,
	blacklozenge: blacklozenge,
	blacksquare: blacksquare,
	blacktriangle: blacktriangle,
	blacktriangledown: blacktriangledown,
	blacktriangleleft: blacktriangleleft,
	blacktriangleright: blacktriangleright,
	blank: blank,
	blk12: blk12,
	blk14: blk14,
	blk34: blk34,
	block: block,
	bne: bne,
	bnequiv: bnequiv,
	bNot: bNot,
	bnot: bnot,
	Bopf: Bopf,
	bopf: bopf,
	bot: bot,
	bottom: bottom,
	bowtie: bowtie,
	boxbox: boxbox,
	boxdl: boxdl,
	boxdL: boxdL,
	boxDl: boxDl,
	boxDL: boxDL,
	boxdr: boxdr,
	boxdR: boxdR,
	boxDr: boxDr,
	boxDR: boxDR,
	boxh: boxh,
	boxH: boxH,
	boxhd: boxhd,
	boxHd: boxHd,
	boxhD: boxhD,
	boxHD: boxHD,
	boxhu: boxhu,
	boxHu: boxHu,
	boxhU: boxhU,
	boxHU: boxHU,
	boxminus: boxminus,
	boxplus: boxplus,
	boxtimes: boxtimes,
	boxul: boxul,
	boxuL: boxuL,
	boxUl: boxUl,
	boxUL: boxUL,
	boxur: boxur,
	boxuR: boxuR,
	boxUr: boxUr,
	boxUR: boxUR,
	boxv: boxv,
	boxV: boxV,
	boxvh: boxvh,
	boxvH: boxvH,
	boxVh: boxVh,
	boxVH: boxVH,
	boxvl: boxvl,
	boxvL: boxvL,
	boxVl: boxVl,
	boxVL: boxVL,
	boxvr: boxvr,
	boxvR: boxvR,
	boxVr: boxVr,
	boxVR: boxVR,
	bprime: bprime,
	breve: breve,
	Breve: Breve,
	brvbar: brvbar$1,
	bscr: bscr,
	Bscr: Bscr,
	bsemi: bsemi,
	bsim: bsim,
	bsime: bsime,
	bsolb: bsolb,
	bsol: bsol,
	bsolhsub: bsolhsub,
	bull: bull,
	bullet: bullet,
	bump: bump,
	bumpE: bumpE,
	bumpe: bumpe,
	Bumpeq: Bumpeq,
	bumpeq: bumpeq,
	Cacute: Cacute,
	cacute: cacute,
	capand: capand,
	capbrcup: capbrcup,
	capcap: capcap,
	cap: cap,
	Cap: Cap,
	capcup: capcup,
	capdot: capdot,
	CapitalDifferentialD: CapitalDifferentialD,
	caps: caps,
	caret: caret,
	caron: caron,
	Cayleys: Cayleys,
	ccaps: ccaps,
	Ccaron: Ccaron,
	ccaron: ccaron,
	Ccedil: Ccedil$1,
	ccedil: ccedil$1,
	Ccirc: Ccirc,
	ccirc: ccirc,
	Cconint: Cconint,
	ccups: ccups,
	ccupssm: ccupssm,
	Cdot: Cdot,
	cdot: cdot,
	cedil: cedil$1,
	Cedilla: Cedilla,
	cemptyv: cemptyv,
	cent: cent$1,
	centerdot: centerdot,
	CenterDot: CenterDot,
	cfr: cfr,
	Cfr: Cfr,
	CHcy: CHcy,
	chcy: chcy,
	check: check,
	checkmark: checkmark,
	Chi: Chi,
	chi: chi,
	circ: circ,
	circeq: circeq,
	circlearrowleft: circlearrowleft,
	circlearrowright: circlearrowright,
	circledast: circledast,
	circledcirc: circledcirc,
	circleddash: circleddash,
	CircleDot: CircleDot,
	circledR: circledR,
	circledS: circledS,
	CircleMinus: CircleMinus,
	CirclePlus: CirclePlus,
	CircleTimes: CircleTimes,
	cir: cir,
	cirE: cirE,
	cire: cire,
	cirfnint: cirfnint,
	cirmid: cirmid,
	cirscir: cirscir,
	ClockwiseContourIntegral: ClockwiseContourIntegral,
	CloseCurlyDoubleQuote: CloseCurlyDoubleQuote,
	CloseCurlyQuote: CloseCurlyQuote,
	clubs: clubs,
	clubsuit: clubsuit,
	colon: colon,
	Colon: Colon,
	Colone: Colone,
	colone: colone,
	coloneq: coloneq,
	comma: comma,
	commat: commat,
	comp: comp,
	compfn: compfn,
	complement: complement,
	complexes: complexes,
	cong: cong,
	congdot: congdot,
	Congruent: Congruent,
	conint: conint,
	Conint: Conint,
	ContourIntegral: ContourIntegral,
	copf: copf,
	Copf: Copf,
	coprod: coprod,
	Coproduct: Coproduct,
	copy: copy$1,
	COPY: COPY$1,
	copysr: copysr,
	CounterClockwiseContourIntegral: CounterClockwiseContourIntegral,
	crarr: crarr,
	cross: cross,
	Cross: Cross,
	Cscr: Cscr,
	cscr: cscr,
	csub: csub,
	csube: csube,
	csup: csup,
	csupe: csupe,
	ctdot: ctdot,
	cudarrl: cudarrl,
	cudarrr: cudarrr,
	cuepr: cuepr,
	cuesc: cuesc,
	cularr: cularr,
	cularrp: cularrp,
	cupbrcap: cupbrcap,
	cupcap: cupcap,
	CupCap: CupCap,
	cup: cup,
	Cup: Cup,
	cupcup: cupcup,
	cupdot: cupdot,
	cupor: cupor,
	cups: cups,
	curarr: curarr,
	curarrm: curarrm,
	curlyeqprec: curlyeqprec,
	curlyeqsucc: curlyeqsucc,
	curlyvee: curlyvee,
	curlywedge: curlywedge,
	curren: curren$1,
	curvearrowleft: curvearrowleft,
	curvearrowright: curvearrowright,
	cuvee: cuvee,
	cuwed: cuwed,
	cwconint: cwconint,
	cwint: cwint,
	cylcty: cylcty,
	dagger: dagger,
	Dagger: Dagger,
	daleth: daleth,
	darr: darr,
	Darr: Darr,
	dArr: dArr,
	dash: dash,
	Dashv: Dashv,
	dashv: dashv,
	dbkarow: dbkarow,
	dblac: dblac,
	Dcaron: Dcaron,
	dcaron: dcaron,
	Dcy: Dcy,
	dcy: dcy,
	ddagger: ddagger,
	ddarr: ddarr,
	DD: DD,
	dd: dd,
	DDotrahd: DDotrahd,
	ddotseq: ddotseq,
	deg: deg$1,
	Del: Del,
	Delta: Delta,
	delta: delta,
	demptyv: demptyv,
	dfisht: dfisht,
	Dfr: Dfr,
	dfr: dfr,
	dHar: dHar,
	dharl: dharl,
	dharr: dharr,
	DiacriticalAcute: DiacriticalAcute,
	DiacriticalDot: DiacriticalDot,
	DiacriticalDoubleAcute: DiacriticalDoubleAcute,
	DiacriticalGrave: DiacriticalGrave,
	DiacriticalTilde: DiacriticalTilde,
	diam: diam,
	diamond: diamond,
	Diamond: Diamond,
	diamondsuit: diamondsuit,
	diams: diams,
	die: die,
	DifferentialD: DifferentialD,
	digamma: digamma,
	disin: disin,
	div: div,
	divide: divide$1,
	divideontimes: divideontimes,
	divonx: divonx,
	DJcy: DJcy,
	djcy: djcy,
	dlcorn: dlcorn,
	dlcrop: dlcrop,
	dollar: dollar,
	Dopf: Dopf,
	dopf: dopf,
	Dot: Dot,
	dot: dot,
	DotDot: DotDot,
	doteq: doteq,
	doteqdot: doteqdot,
	DotEqual: DotEqual,
	dotminus: dotminus,
	dotplus: dotplus,
	dotsquare: dotsquare,
	doublebarwedge: doublebarwedge,
	DoubleContourIntegral: DoubleContourIntegral,
	DoubleDot: DoubleDot,
	DoubleDownArrow: DoubleDownArrow,
	DoubleLeftArrow: DoubleLeftArrow,
	DoubleLeftRightArrow: DoubleLeftRightArrow,
	DoubleLeftTee: DoubleLeftTee,
	DoubleLongLeftArrow: DoubleLongLeftArrow,
	DoubleLongLeftRightArrow: DoubleLongLeftRightArrow,
	DoubleLongRightArrow: DoubleLongRightArrow,
	DoubleRightArrow: DoubleRightArrow,
	DoubleRightTee: DoubleRightTee,
	DoubleUpArrow: DoubleUpArrow,
	DoubleUpDownArrow: DoubleUpDownArrow,
	DoubleVerticalBar: DoubleVerticalBar,
	DownArrowBar: DownArrowBar,
	downarrow: downarrow,
	DownArrow: DownArrow,
	Downarrow: Downarrow,
	DownArrowUpArrow: DownArrowUpArrow,
	DownBreve: DownBreve,
	downdownarrows: downdownarrows,
	downharpoonleft: downharpoonleft,
	downharpoonright: downharpoonright,
	DownLeftRightVector: DownLeftRightVector,
	DownLeftTeeVector: DownLeftTeeVector,
	DownLeftVectorBar: DownLeftVectorBar,
	DownLeftVector: DownLeftVector,
	DownRightTeeVector: DownRightTeeVector,
	DownRightVectorBar: DownRightVectorBar,
	DownRightVector: DownRightVector,
	DownTeeArrow: DownTeeArrow,
	DownTee: DownTee,
	drbkarow: drbkarow,
	drcorn: drcorn,
	drcrop: drcrop,
	Dscr: Dscr,
	dscr: dscr,
	DScy: DScy,
	dscy: dscy,
	dsol: dsol,
	Dstrok: Dstrok,
	dstrok: dstrok,
	dtdot: dtdot,
	dtri: dtri,
	dtrif: dtrif,
	duarr: duarr,
	duhar: duhar,
	dwangle: dwangle,
	DZcy: DZcy,
	dzcy: dzcy,
	dzigrarr: dzigrarr,
	Eacute: Eacute$1,
	eacute: eacute$1,
	easter: easter,
	Ecaron: Ecaron,
	ecaron: ecaron,
	Ecirc: Ecirc$1,
	ecirc: ecirc$1,
	ecir: ecir,
	ecolon: ecolon,
	Ecy: Ecy,
	ecy: ecy,
	eDDot: eDDot,
	Edot: Edot,
	edot: edot,
	eDot: eDot,
	ee: ee,
	efDot: efDot,
	Efr: Efr,
	efr: efr,
	eg: eg,
	Egrave: Egrave$1,
	egrave: egrave$1,
	egs: egs,
	egsdot: egsdot,
	el: el,
	Element: Element,
	elinters: elinters,
	ell: ell,
	els: els,
	elsdot: elsdot,
	Emacr: Emacr,
	emacr: emacr,
	empty: empty,
	emptyset: emptyset,
	EmptySmallSquare: EmptySmallSquare,
	emptyv: emptyv,
	EmptyVerySmallSquare: EmptyVerySmallSquare,
	emsp13: emsp13,
	emsp14: emsp14,
	emsp: emsp,
	ENG: ENG,
	eng: eng,
	ensp: ensp,
	Eogon: Eogon,
	eogon: eogon,
	Eopf: Eopf,
	eopf: eopf,
	epar: epar,
	eparsl: eparsl,
	eplus: eplus,
	epsi: epsi,
	Epsilon: Epsilon,
	epsilon: epsilon,
	epsiv: epsiv,
	eqcirc: eqcirc,
	eqcolon: eqcolon,
	eqsim: eqsim,
	eqslantgtr: eqslantgtr,
	eqslantless: eqslantless,
	Equal: Equal,
	equals: equals,
	EqualTilde: EqualTilde,
	equest: equest,
	Equilibrium: Equilibrium,
	equiv: equiv,
	equivDD: equivDD,
	eqvparsl: eqvparsl,
	erarr: erarr,
	erDot: erDot,
	escr: escr,
	Escr: Escr,
	esdot: esdot,
	Esim: Esim,
	esim: esim,
	Eta: Eta,
	eta: eta,
	ETH: ETH$1,
	eth: eth$1,
	Euml: Euml$1,
	euml: euml$1,
	euro: euro,
	excl: excl,
	exist: exist,
	Exists: Exists,
	expectation: expectation,
	exponentiale: exponentiale,
	ExponentialE: ExponentialE,
	fallingdotseq: fallingdotseq,
	Fcy: Fcy,
	fcy: fcy,
	female: female,
	ffilig: ffilig,
	fflig: fflig,
	ffllig: ffllig,
	Ffr: Ffr,
	ffr: ffr,
	filig: filig,
	FilledSmallSquare: FilledSmallSquare,
	FilledVerySmallSquare: FilledVerySmallSquare,
	fjlig: fjlig,
	flat: flat,
	fllig: fllig,
	fltns: fltns,
	fnof: fnof,
	Fopf: Fopf,
	fopf: fopf,
	forall: forall,
	ForAll: ForAll,
	fork: fork,
	forkv: forkv,
	Fouriertrf: Fouriertrf,
	fpartint: fpartint,
	frac12: frac12$1,
	frac13: frac13,
	frac14: frac14$1,
	frac15: frac15,
	frac16: frac16,
	frac18: frac18,
	frac23: frac23,
	frac25: frac25,
	frac34: frac34$1,
	frac35: frac35,
	frac38: frac38,
	frac45: frac45,
	frac56: frac56,
	frac58: frac58,
	frac78: frac78,
	frasl: frasl,
	frown: frown,
	fscr: fscr,
	Fscr: Fscr,
	gacute: gacute,
	Gamma: Gamma,
	gamma: gamma,
	Gammad: Gammad,
	gammad: gammad,
	gap: gap,
	Gbreve: Gbreve,
	gbreve: gbreve,
	Gcedil: Gcedil,
	Gcirc: Gcirc,
	gcirc: gcirc,
	Gcy: Gcy,
	gcy: gcy,
	Gdot: Gdot,
	gdot: gdot,
	ge: ge,
	gE: gE,
	gEl: gEl,
	gel: gel,
	geq: geq,
	geqq: geqq,
	geqslant: geqslant,
	gescc: gescc,
	ges: ges,
	gesdot: gesdot,
	gesdoto: gesdoto,
	gesdotol: gesdotol,
	gesl: gesl,
	gesles: gesles,
	Gfr: Gfr,
	gfr: gfr,
	gg: gg,
	Gg: Gg,
	ggg: ggg,
	gimel: gimel,
	GJcy: GJcy,
	gjcy: gjcy,
	gla: gla,
	gl: gl,
	glE: glE,
	glj: glj,
	gnap: gnap,
	gnapprox: gnapprox,
	gne: gne,
	gnE: gnE,
	gneq: gneq,
	gneqq: gneqq,
	gnsim: gnsim,
	Gopf: Gopf,
	gopf: gopf,
	grave: grave,
	GreaterEqual: GreaterEqual,
	GreaterEqualLess: GreaterEqualLess,
	GreaterFullEqual: GreaterFullEqual,
	GreaterGreater: GreaterGreater,
	GreaterLess: GreaterLess,
	GreaterSlantEqual: GreaterSlantEqual,
	GreaterTilde: GreaterTilde,
	Gscr: Gscr,
	gscr: gscr,
	gsim: gsim,
	gsime: gsime,
	gsiml: gsiml,
	gtcc: gtcc,
	gtcir: gtcir,
	gt: gt$2,
	GT: GT$1,
	Gt: Gt,
	gtdot: gtdot,
	gtlPar: gtlPar,
	gtquest: gtquest,
	gtrapprox: gtrapprox,
	gtrarr: gtrarr,
	gtrdot: gtrdot,
	gtreqless: gtreqless,
	gtreqqless: gtreqqless,
	gtrless: gtrless,
	gtrsim: gtrsim,
	gvertneqq: gvertneqq,
	gvnE: gvnE,
	Hacek: Hacek,
	hairsp: hairsp,
	half: half,
	hamilt: hamilt,
	HARDcy: HARDcy,
	hardcy: hardcy,
	harrcir: harrcir,
	harr: harr,
	hArr: hArr,
	harrw: harrw,
	Hat: Hat,
	hbar: hbar,
	Hcirc: Hcirc,
	hcirc: hcirc,
	hearts: hearts,
	heartsuit: heartsuit,
	hellip: hellip,
	hercon: hercon,
	hfr: hfr,
	Hfr: Hfr,
	HilbertSpace: HilbertSpace,
	hksearow: hksearow,
	hkswarow: hkswarow,
	hoarr: hoarr,
	homtht: homtht,
	hookleftarrow: hookleftarrow,
	hookrightarrow: hookrightarrow,
	hopf: hopf,
	Hopf: Hopf,
	horbar: horbar,
	HorizontalLine: HorizontalLine,
	hscr: hscr,
	Hscr: Hscr,
	hslash: hslash,
	Hstrok: Hstrok,
	hstrok: hstrok,
	HumpDownHump: HumpDownHump,
	HumpEqual: HumpEqual,
	hybull: hybull,
	hyphen: hyphen,
	Iacute: Iacute$1,
	iacute: iacute$1,
	ic: ic,
	Icirc: Icirc$1,
	icirc: icirc$1,
	Icy: Icy,
	icy: icy,
	Idot: Idot,
	IEcy: IEcy,
	iecy: iecy,
	iexcl: iexcl$1,
	iff: iff,
	ifr: ifr,
	Ifr: Ifr,
	Igrave: Igrave$1,
	igrave: igrave$1,
	ii: ii,
	iiiint: iiiint,
	iiint: iiint,
	iinfin: iinfin,
	iiota: iiota,
	IJlig: IJlig,
	ijlig: ijlig,
	Imacr: Imacr,
	imacr: imacr,
	image: image,
	ImaginaryI: ImaginaryI,
	imagline: imagline,
	imagpart: imagpart,
	imath: imath,
	Im: Im,
	imof: imof,
	imped: imped,
	Implies: Implies,
	incare: incare,
	"in": "∈",
	infin: infin,
	infintie: infintie,
	inodot: inodot,
	intcal: intcal,
	int: int,
	Int: Int,
	integers: integers,
	Integral: Integral,
	intercal: intercal,
	Intersection: Intersection,
	intlarhk: intlarhk,
	intprod: intprod,
	InvisibleComma: InvisibleComma,
	InvisibleTimes: InvisibleTimes,
	IOcy: IOcy,
	iocy: iocy,
	Iogon: Iogon,
	iogon: iogon,
	Iopf: Iopf,
	iopf: iopf,
	Iota: Iota,
	iota: iota,
	iprod: iprod,
	iquest: iquest$1,
	iscr: iscr,
	Iscr: Iscr,
	isin: isin,
	isindot: isindot,
	isinE: isinE,
	isins: isins,
	isinsv: isinsv,
	isinv: isinv,
	it: it,
	Itilde: Itilde,
	itilde: itilde,
	Iukcy: Iukcy,
	iukcy: iukcy,
	Iuml: Iuml$1,
	iuml: iuml$1,
	Jcirc: Jcirc,
	jcirc: jcirc,
	Jcy: Jcy,
	jcy: jcy,
	Jfr: Jfr,
	jfr: jfr,
	jmath: jmath,
	Jopf: Jopf,
	jopf: jopf,
	Jscr: Jscr,
	jscr: jscr,
	Jsercy: Jsercy,
	jsercy: jsercy,
	Jukcy: Jukcy,
	jukcy: jukcy,
	Kappa: Kappa,
	kappa: kappa,
	kappav: kappav,
	Kcedil: Kcedil,
	kcedil: kcedil,
	Kcy: Kcy,
	kcy: kcy,
	Kfr: Kfr,
	kfr: kfr,
	kgreen: kgreen,
	KHcy: KHcy,
	khcy: khcy,
	KJcy: KJcy,
	kjcy: kjcy,
	Kopf: Kopf,
	kopf: kopf,
	Kscr: Kscr,
	kscr: kscr,
	lAarr: lAarr,
	Lacute: Lacute,
	lacute: lacute,
	laemptyv: laemptyv,
	lagran: lagran,
	Lambda: Lambda,
	lambda: lambda,
	lang: lang,
	Lang: Lang,
	langd: langd,
	langle: langle,
	lap: lap,
	Laplacetrf: Laplacetrf,
	laquo: laquo$1,
	larrb: larrb,
	larrbfs: larrbfs,
	larr: larr,
	Larr: Larr,
	lArr: lArr,
	larrfs: larrfs,
	larrhk: larrhk,
	larrlp: larrlp,
	larrpl: larrpl,
	larrsim: larrsim,
	larrtl: larrtl,
	latail: latail,
	lAtail: lAtail,
	lat: lat,
	late: late$1,
	lates: lates,
	lbarr: lbarr,
	lBarr: lBarr,
	lbbrk: lbbrk,
	lbrace: lbrace,
	lbrack: lbrack,
	lbrke: lbrke,
	lbrksld: lbrksld,
	lbrkslu: lbrkslu,
	Lcaron: Lcaron,
	lcaron: lcaron,
	Lcedil: Lcedil,
	lcedil: lcedil,
	lceil: lceil,
	lcub: lcub,
	Lcy: Lcy,
	lcy: lcy,
	ldca: ldca,
	ldquo: ldquo,
	ldquor: ldquor,
	ldrdhar: ldrdhar,
	ldrushar: ldrushar,
	ldsh: ldsh,
	le: le,
	lE: lE,
	LeftAngleBracket: LeftAngleBracket,
	LeftArrowBar: LeftArrowBar,
	leftarrow: leftarrow,
	LeftArrow: LeftArrow,
	Leftarrow: Leftarrow,
	LeftArrowRightArrow: LeftArrowRightArrow,
	leftarrowtail: leftarrowtail,
	LeftCeiling: LeftCeiling,
	LeftDoubleBracket: LeftDoubleBracket,
	LeftDownTeeVector: LeftDownTeeVector,
	LeftDownVectorBar: LeftDownVectorBar,
	LeftDownVector: LeftDownVector,
	LeftFloor: LeftFloor,
	leftharpoondown: leftharpoondown,
	leftharpoonup: leftharpoonup,
	leftleftarrows: leftleftarrows,
	leftrightarrow: leftrightarrow,
	LeftRightArrow: LeftRightArrow,
	Leftrightarrow: Leftrightarrow,
	leftrightarrows: leftrightarrows,
	leftrightharpoons: leftrightharpoons,
	leftrightsquigarrow: leftrightsquigarrow,
	LeftRightVector: LeftRightVector,
	LeftTeeArrow: LeftTeeArrow,
	LeftTee: LeftTee,
	LeftTeeVector: LeftTeeVector,
	leftthreetimes: leftthreetimes,
	LeftTriangleBar: LeftTriangleBar,
	LeftTriangle: LeftTriangle,
	LeftTriangleEqual: LeftTriangleEqual,
	LeftUpDownVector: LeftUpDownVector,
	LeftUpTeeVector: LeftUpTeeVector,
	LeftUpVectorBar: LeftUpVectorBar,
	LeftUpVector: LeftUpVector,
	LeftVectorBar: LeftVectorBar,
	LeftVector: LeftVector,
	lEg: lEg,
	leg: leg,
	leq: leq,
	leqq: leqq,
	leqslant: leqslant,
	lescc: lescc,
	les: les,
	lesdot: lesdot,
	lesdoto: lesdoto,
	lesdotor: lesdotor,
	lesg: lesg,
	lesges: lesges,
	lessapprox: lessapprox,
	lessdot: lessdot,
	lesseqgtr: lesseqgtr,
	lesseqqgtr: lesseqqgtr,
	LessEqualGreater: LessEqualGreater,
	LessFullEqual: LessFullEqual,
	LessGreater: LessGreater,
	lessgtr: lessgtr,
	LessLess: LessLess,
	lesssim: lesssim,
	LessSlantEqual: LessSlantEqual,
	LessTilde: LessTilde,
	lfisht: lfisht,
	lfloor: lfloor,
	Lfr: Lfr,
	lfr: lfr,
	lg: lg,
	lgE: lgE,
	lHar: lHar,
	lhard: lhard,
	lharu: lharu,
	lharul: lharul,
	lhblk: lhblk,
	LJcy: LJcy,
	ljcy: ljcy,
	llarr: llarr,
	ll: ll,
	Ll: Ll,
	llcorner: llcorner,
	Lleftarrow: Lleftarrow,
	llhard: llhard,
	lltri: lltri,
	Lmidot: Lmidot,
	lmidot: lmidot,
	lmoustache: lmoustache,
	lmoust: lmoust,
	lnap: lnap,
	lnapprox: lnapprox,
	lne: lne,
	lnE: lnE,
	lneq: lneq,
	lneqq: lneqq,
	lnsim: lnsim,
	loang: loang,
	loarr: loarr,
	lobrk: lobrk,
	longleftarrow: longleftarrow,
	LongLeftArrow: LongLeftArrow,
	Longleftarrow: Longleftarrow,
	longleftrightarrow: longleftrightarrow,
	LongLeftRightArrow: LongLeftRightArrow,
	Longleftrightarrow: Longleftrightarrow,
	longmapsto: longmapsto,
	longrightarrow: longrightarrow,
	LongRightArrow: LongRightArrow,
	Longrightarrow: Longrightarrow,
	looparrowleft: looparrowleft,
	looparrowright: looparrowright,
	lopar: lopar,
	Lopf: Lopf,
	lopf: lopf,
	loplus: loplus,
	lotimes: lotimes,
	lowast: lowast,
	lowbar: lowbar,
	LowerLeftArrow: LowerLeftArrow,
	LowerRightArrow: LowerRightArrow,
	loz: loz,
	lozenge: lozenge,
	lozf: lozf,
	lpar: lpar,
	lparlt: lparlt,
	lrarr: lrarr,
	lrcorner: lrcorner,
	lrhar: lrhar,
	lrhard: lrhard,
	lrm: lrm,
	lrtri: lrtri,
	lsaquo: lsaquo,
	lscr: lscr,
	Lscr: Lscr,
	lsh: lsh,
	Lsh: Lsh,
	lsim: lsim,
	lsime: lsime,
	lsimg: lsimg,
	lsqb: lsqb,
	lsquo: lsquo,
	lsquor: lsquor,
	Lstrok: Lstrok,
	lstrok: lstrok,
	ltcc: ltcc,
	ltcir: ltcir,
	lt: lt$2,
	LT: LT$1,
	Lt: Lt,
	ltdot: ltdot,
	lthree: lthree,
	ltimes: ltimes,
	ltlarr: ltlarr,
	ltquest: ltquest,
	ltri: ltri,
	ltrie: ltrie,
	ltrif: ltrif,
	ltrPar: ltrPar,
	lurdshar: lurdshar,
	luruhar: luruhar,
	lvertneqq: lvertneqq,
	lvnE: lvnE,
	macr: macr$1,
	male: male,
	malt: malt,
	maltese: maltese,
	"Map": "⤅",
	map: map,
	mapsto: mapsto,
	mapstodown: mapstodown,
	mapstoleft: mapstoleft,
	mapstoup: mapstoup,
	marker: marker,
	mcomma: mcomma,
	Mcy: Mcy,
	mcy: mcy,
	mdash: mdash,
	mDDot: mDDot,
	measuredangle: measuredangle,
	MediumSpace: MediumSpace,
	Mellintrf: Mellintrf,
	Mfr: Mfr,
	mfr: mfr,
	mho: mho,
	micro: micro$1,
	midast: midast,
	midcir: midcir,
	mid: mid,
	middot: middot$1,
	minusb: minusb,
	minus: minus,
	minusd: minusd,
	minusdu: minusdu,
	MinusPlus: MinusPlus,
	mlcp: mlcp,
	mldr: mldr,
	mnplus: mnplus,
	models: models,
	Mopf: Mopf,
	mopf: mopf,
	mp: mp,
	mscr: mscr,
	Mscr: Mscr,
	mstpos: mstpos,
	Mu: Mu,
	mu: mu,
	multimap: multimap,
	mumap: mumap,
	nabla: nabla,
	Nacute: Nacute,
	nacute: nacute,
	nang: nang,
	nap: nap,
	napE: napE,
	napid: napid,
	napos: napos,
	napprox: napprox,
	natural: natural,
	naturals: naturals,
	natur: natur,
	nbsp: nbsp$1,
	nbump: nbump,
	nbumpe: nbumpe,
	ncap: ncap,
	Ncaron: Ncaron,
	ncaron: ncaron,
	Ncedil: Ncedil,
	ncedil: ncedil,
	ncong: ncong,
	ncongdot: ncongdot,
	ncup: ncup,
	Ncy: Ncy,
	ncy: ncy,
	ndash: ndash,
	nearhk: nearhk,
	nearr: nearr,
	neArr: neArr,
	nearrow: nearrow,
	ne: ne,
	nedot: nedot,
	NegativeMediumSpace: NegativeMediumSpace,
	NegativeThickSpace: NegativeThickSpace,
	NegativeThinSpace: NegativeThinSpace,
	NegativeVeryThinSpace: NegativeVeryThinSpace,
	nequiv: nequiv,
	nesear: nesear,
	nesim: nesim,
	NestedGreaterGreater: NestedGreaterGreater,
	NestedLessLess: NestedLessLess,
	NewLine: NewLine,
	nexist: nexist,
	nexists: nexists,
	Nfr: Nfr,
	nfr: nfr,
	ngE: ngE,
	nge: nge,
	ngeq: ngeq,
	ngeqq: ngeqq,
	ngeqslant: ngeqslant,
	nges: nges,
	nGg: nGg,
	ngsim: ngsim,
	nGt: nGt,
	ngt: ngt,
	ngtr: ngtr,
	nGtv: nGtv,
	nharr: nharr,
	nhArr: nhArr,
	nhpar: nhpar,
	ni: ni,
	nis: nis,
	nisd: nisd,
	niv: niv,
	NJcy: NJcy,
	njcy: njcy,
	nlarr: nlarr,
	nlArr: nlArr,
	nldr: nldr,
	nlE: nlE,
	nle: nle,
	nleftarrow: nleftarrow,
	nLeftarrow: nLeftarrow,
	nleftrightarrow: nleftrightarrow,
	nLeftrightarrow: nLeftrightarrow,
	nleq: nleq,
	nleqq: nleqq,
	nleqslant: nleqslant,
	nles: nles,
	nless: nless,
	nLl: nLl,
	nlsim: nlsim,
	nLt: nLt,
	nlt: nlt,
	nltri: nltri,
	nltrie: nltrie,
	nLtv: nLtv,
	nmid: nmid,
	NoBreak: NoBreak,
	NonBreakingSpace: NonBreakingSpace,
	nopf: nopf,
	Nopf: Nopf,
	Not: Not,
	not: not$1,
	NotCongruent: NotCongruent,
	NotCupCap: NotCupCap,
	NotDoubleVerticalBar: NotDoubleVerticalBar,
	NotElement: NotElement,
	NotEqual: NotEqual,
	NotEqualTilde: NotEqualTilde,
	NotExists: NotExists,
	NotGreater: NotGreater,
	NotGreaterEqual: NotGreaterEqual,
	NotGreaterFullEqual: NotGreaterFullEqual,
	NotGreaterGreater: NotGreaterGreater,
	NotGreaterLess: NotGreaterLess,
	NotGreaterSlantEqual: NotGreaterSlantEqual,
	NotGreaterTilde: NotGreaterTilde,
	NotHumpDownHump: NotHumpDownHump,
	NotHumpEqual: NotHumpEqual,
	notin: notin,
	notindot: notindot,
	notinE: notinE,
	notinva: notinva,
	notinvb: notinvb,
	notinvc: notinvc,
	NotLeftTriangleBar: NotLeftTriangleBar,
	NotLeftTriangle: NotLeftTriangle,
	NotLeftTriangleEqual: NotLeftTriangleEqual,
	NotLess: NotLess,
	NotLessEqual: NotLessEqual,
	NotLessGreater: NotLessGreater,
	NotLessLess: NotLessLess,
	NotLessSlantEqual: NotLessSlantEqual,
	NotLessTilde: NotLessTilde,
	NotNestedGreaterGreater: NotNestedGreaterGreater,
	NotNestedLessLess: NotNestedLessLess,
	notni: notni,
	notniva: notniva,
	notnivb: notnivb,
	notnivc: notnivc,
	NotPrecedes: NotPrecedes,
	NotPrecedesEqual: NotPrecedesEqual,
	NotPrecedesSlantEqual: NotPrecedesSlantEqual,
	NotReverseElement: NotReverseElement,
	NotRightTriangleBar: NotRightTriangleBar,
	NotRightTriangle: NotRightTriangle,
	NotRightTriangleEqual: NotRightTriangleEqual,
	NotSquareSubset: NotSquareSubset,
	NotSquareSubsetEqual: NotSquareSubsetEqual,
	NotSquareSuperset: NotSquareSuperset,
	NotSquareSupersetEqual: NotSquareSupersetEqual,
	NotSubset: NotSubset,
	NotSubsetEqual: NotSubsetEqual,
	NotSucceeds: NotSucceeds,
	NotSucceedsEqual: NotSucceedsEqual,
	NotSucceedsSlantEqual: NotSucceedsSlantEqual,
	NotSucceedsTilde: NotSucceedsTilde,
	NotSuperset: NotSuperset,
	NotSupersetEqual: NotSupersetEqual,
	NotTilde: NotTilde,
	NotTildeEqual: NotTildeEqual,
	NotTildeFullEqual: NotTildeFullEqual,
	NotTildeTilde: NotTildeTilde,
	NotVerticalBar: NotVerticalBar,
	nparallel: nparallel,
	npar: npar,
	nparsl: nparsl,
	npart: npart,
	npolint: npolint,
	npr: npr,
	nprcue: nprcue,
	nprec: nprec,
	npreceq: npreceq,
	npre: npre,
	nrarrc: nrarrc,
	nrarr: nrarr,
	nrArr: nrArr,
	nrarrw: nrarrw,
	nrightarrow: nrightarrow,
	nRightarrow: nRightarrow,
	nrtri: nrtri,
	nrtrie: nrtrie,
	nsc: nsc,
	nsccue: nsccue,
	nsce: nsce,
	Nscr: Nscr,
	nscr: nscr,
	nshortmid: nshortmid,
	nshortparallel: nshortparallel,
	nsim: nsim,
	nsime: nsime,
	nsimeq: nsimeq,
	nsmid: nsmid,
	nspar: nspar,
	nsqsube: nsqsube,
	nsqsupe: nsqsupe,
	nsub: nsub,
	nsubE: nsubE,
	nsube: nsube,
	nsubset: nsubset,
	nsubseteq: nsubseteq,
	nsubseteqq: nsubseteqq,
	nsucc: nsucc,
	nsucceq: nsucceq,
	nsup: nsup,
	nsupE: nsupE,
	nsupe: nsupe,
	nsupset: nsupset,
	nsupseteq: nsupseteq,
	nsupseteqq: nsupseteqq,
	ntgl: ntgl,
	Ntilde: Ntilde$1,
	ntilde: ntilde$1,
	ntlg: ntlg,
	ntriangleleft: ntriangleleft,
	ntrianglelefteq: ntrianglelefteq,
	ntriangleright: ntriangleright,
	ntrianglerighteq: ntrianglerighteq,
	Nu: Nu,
	nu: nu,
	num: num,
	numero: numero,
	numsp: numsp,
	nvap: nvap,
	nvdash: nvdash,
	nvDash: nvDash,
	nVdash: nVdash,
	nVDash: nVDash,
	nvge: nvge,
	nvgt: nvgt,
	nvHarr: nvHarr,
	nvinfin: nvinfin,
	nvlArr: nvlArr,
	nvle: nvle,
	nvlt: nvlt,
	nvltrie: nvltrie,
	nvrArr: nvrArr,
	nvrtrie: nvrtrie,
	nvsim: nvsim,
	nwarhk: nwarhk,
	nwarr: nwarr,
	nwArr: nwArr,
	nwarrow: nwarrow,
	nwnear: nwnear,
	Oacute: Oacute$1,
	oacute: oacute$1,
	oast: oast,
	Ocirc: Ocirc$1,
	ocirc: ocirc$1,
	ocir: ocir,
	Ocy: Ocy,
	ocy: ocy,
	odash: odash,
	Odblac: Odblac,
	odblac: odblac,
	odiv: odiv,
	odot: odot,
	odsold: odsold,
	OElig: OElig,
	oelig: oelig,
	ofcir: ofcir,
	Ofr: Ofr,
	ofr: ofr,
	ogon: ogon,
	Ograve: Ograve$1,
	ograve: ograve$1,
	ogt: ogt,
	ohbar: ohbar,
	ohm: ohm,
	oint: oint,
	olarr: olarr,
	olcir: olcir,
	olcross: olcross,
	oline: oline,
	olt: olt,
	Omacr: Omacr,
	omacr: omacr,
	Omega: Omega,
	omega: omega,
	Omicron: Omicron,
	omicron: omicron,
	omid: omid,
	ominus: ominus,
	Oopf: Oopf,
	oopf: oopf,
	opar: opar,
	OpenCurlyDoubleQuote: OpenCurlyDoubleQuote,
	OpenCurlyQuote: OpenCurlyQuote,
	operp: operp,
	oplus: oplus,
	orarr: orarr,
	Or: Or,
	or: or,
	ord: ord,
	order: order,
	orderof: orderof,
	ordf: ordf$1,
	ordm: ordm$1,
	origof: origof,
	oror: oror,
	orslope: orslope,
	orv: orv,
	oS: oS,
	Oscr: Oscr,
	oscr: oscr,
	Oslash: Oslash$1,
	oslash: oslash$1,
	osol: osol,
	Otilde: Otilde$1,
	otilde: otilde$1,
	otimesas: otimesas,
	Otimes: Otimes,
	otimes: otimes,
	Ouml: Ouml$1,
	ouml: ouml$1,
	ovbar: ovbar,
	OverBar: OverBar,
	OverBrace: OverBrace,
	OverBracket: OverBracket,
	OverParenthesis: OverParenthesis,
	para: para$1,
	parallel: parallel,
	par: par,
	parsim: parsim,
	parsl: parsl,
	part: part,
	PartialD: PartialD,
	Pcy: Pcy,
	pcy: pcy,
	percnt: percnt,
	period: period,
	permil: permil,
	perp: perp,
	pertenk: pertenk,
	Pfr: Pfr,
	pfr: pfr,
	Phi: Phi,
	phi: phi,
	phiv: phiv,
	phmmat: phmmat,
	phone: phone,
	Pi: Pi,
	pi: pi,
	pitchfork: pitchfork,
	piv: piv,
	planck: planck,
	planckh: planckh,
	plankv: plankv,
	plusacir: plusacir,
	plusb: plusb,
	pluscir: pluscir,
	plus: plus,
	plusdo: plusdo,
	plusdu: plusdu,
	pluse: pluse,
	PlusMinus: PlusMinus,
	plusmn: plusmn$1,
	plussim: plussim,
	plustwo: plustwo,
	pm: pm,
	Poincareplane: Poincareplane,
	pointint: pointint,
	popf: popf,
	Popf: Popf,
	pound: pound$1,
	prap: prap,
	Pr: Pr,
	pr: pr,
	prcue: prcue,
	precapprox: precapprox,
	prec: prec,
	preccurlyeq: preccurlyeq,
	Precedes: Precedes,
	PrecedesEqual: PrecedesEqual,
	PrecedesSlantEqual: PrecedesSlantEqual,
	PrecedesTilde: PrecedesTilde,
	preceq: preceq,
	precnapprox: precnapprox,
	precneqq: precneqq,
	precnsim: precnsim,
	pre: pre,
	prE: prE,
	precsim: precsim,
	prime: prime,
	Prime: Prime,
	primes: primes,
	prnap: prnap,
	prnE: prnE,
	prnsim: prnsim,
	prod: prod,
	Product: Product,
	profalar: profalar,
	profline: profline,
	profsurf: profsurf,
	prop: prop,
	Proportional: Proportional,
	Proportion: Proportion,
	propto: propto,
	prsim: prsim,
	prurel: prurel,
	Pscr: Pscr,
	pscr: pscr,
	Psi: Psi,
	psi: psi,
	puncsp: puncsp,
	Qfr: Qfr,
	qfr: qfr,
	qint: qint,
	qopf: qopf,
	Qopf: Qopf,
	qprime: qprime,
	Qscr: Qscr,
	qscr: qscr,
	quaternions: quaternions,
	quatint: quatint,
	quest: quest,
	questeq: questeq,
	quot: quot$2,
	QUOT: QUOT$1,
	rAarr: rAarr,
	race: race,
	Racute: Racute,
	racute: racute,
	radic: radic,
	raemptyv: raemptyv,
	rang: rang,
	Rang: Rang,
	rangd: rangd,
	range: range,
	rangle: rangle,
	raquo: raquo$1,
	rarrap: rarrap,
	rarrb: rarrb,
	rarrbfs: rarrbfs,
	rarrc: rarrc,
	rarr: rarr,
	Rarr: Rarr,
	rArr: rArr,
	rarrfs: rarrfs,
	rarrhk: rarrhk,
	rarrlp: rarrlp,
	rarrpl: rarrpl,
	rarrsim: rarrsim,
	Rarrtl: Rarrtl,
	rarrtl: rarrtl,
	rarrw: rarrw,
	ratail: ratail,
	rAtail: rAtail,
	ratio: ratio,
	rationals: rationals,
	rbarr: rbarr,
	rBarr: rBarr,
	RBarr: RBarr,
	rbbrk: rbbrk,
	rbrace: rbrace,
	rbrack: rbrack,
	rbrke: rbrke,
	rbrksld: rbrksld,
	rbrkslu: rbrkslu,
	Rcaron: Rcaron,
	rcaron: rcaron,
	Rcedil: Rcedil,
	rcedil: rcedil,
	rceil: rceil,
	rcub: rcub,
	Rcy: Rcy,
	rcy: rcy,
	rdca: rdca,
	rdldhar: rdldhar,
	rdquo: rdquo,
	rdquor: rdquor,
	rdsh: rdsh,
	real: real,
	realine: realine,
	realpart: realpart,
	reals: reals,
	Re: Re,
	rect: rect,
	reg: reg$1,
	REG: REG$1,
	ReverseElement: ReverseElement,
	ReverseEquilibrium: ReverseEquilibrium,
	ReverseUpEquilibrium: ReverseUpEquilibrium,
	rfisht: rfisht,
	rfloor: rfloor,
	rfr: rfr,
	Rfr: Rfr,
	rHar: rHar,
	rhard: rhard,
	rharu: rharu,
	rharul: rharul,
	Rho: Rho,
	rho: rho,
	rhov: rhov,
	RightAngleBracket: RightAngleBracket,
	RightArrowBar: RightArrowBar,
	rightarrow: rightarrow,
	RightArrow: RightArrow,
	Rightarrow: Rightarrow,
	RightArrowLeftArrow: RightArrowLeftArrow,
	rightarrowtail: rightarrowtail,
	RightCeiling: RightCeiling,
	RightDoubleBracket: RightDoubleBracket,
	RightDownTeeVector: RightDownTeeVector,
	RightDownVectorBar: RightDownVectorBar,
	RightDownVector: RightDownVector,
	RightFloor: RightFloor,
	rightharpoondown: rightharpoondown,
	rightharpoonup: rightharpoonup,
	rightleftarrows: rightleftarrows,
	rightleftharpoons: rightleftharpoons,
	rightrightarrows: rightrightarrows,
	rightsquigarrow: rightsquigarrow,
	RightTeeArrow: RightTeeArrow,
	RightTee: RightTee,
	RightTeeVector: RightTeeVector,
	rightthreetimes: rightthreetimes,
	RightTriangleBar: RightTriangleBar,
	RightTriangle: RightTriangle,
	RightTriangleEqual: RightTriangleEqual,
	RightUpDownVector: RightUpDownVector,
	RightUpTeeVector: RightUpTeeVector,
	RightUpVectorBar: RightUpVectorBar,
	RightUpVector: RightUpVector,
	RightVectorBar: RightVectorBar,
	RightVector: RightVector,
	ring: ring,
	risingdotseq: risingdotseq,
	rlarr: rlarr,
	rlhar: rlhar,
	rlm: rlm,
	rmoustache: rmoustache,
	rmoust: rmoust,
	rnmid: rnmid,
	roang: roang,
	roarr: roarr,
	robrk: robrk,
	ropar: ropar,
	ropf: ropf,
	Ropf: Ropf,
	roplus: roplus,
	rotimes: rotimes,
	RoundImplies: RoundImplies,
	rpar: rpar,
	rpargt: rpargt,
	rppolint: rppolint,
	rrarr: rrarr,
	Rrightarrow: Rrightarrow,
	rsaquo: rsaquo,
	rscr: rscr,
	Rscr: Rscr,
	rsh: rsh,
	Rsh: Rsh,
	rsqb: rsqb,
	rsquo: rsquo,
	rsquor: rsquor,
	rthree: rthree,
	rtimes: rtimes,
	rtri: rtri,
	rtrie: rtrie,
	rtrif: rtrif,
	rtriltri: rtriltri,
	RuleDelayed: RuleDelayed,
	ruluhar: ruluhar,
	rx: rx,
	Sacute: Sacute,
	sacute: sacute,
	sbquo: sbquo,
	scap: scap,
	Scaron: Scaron,
	scaron: scaron,
	Sc: Sc,
	sc: sc,
	sccue: sccue,
	sce: sce,
	scE: scE,
	Scedil: Scedil,
	scedil: scedil,
	Scirc: Scirc,
	scirc: scirc,
	scnap: scnap,
	scnE: scnE,
	scnsim: scnsim,
	scpolint: scpolint,
	scsim: scsim,
	Scy: Scy,
	scy: scy,
	sdotb: sdotb,
	sdot: sdot,
	sdote: sdote,
	searhk: searhk,
	searr: searr,
	seArr: seArr,
	searrow: searrow,
	sect: sect$1,
	semi: semi,
	seswar: seswar,
	setminus: setminus,
	setmn: setmn,
	sext: sext,
	Sfr: Sfr,
	sfr: sfr,
	sfrown: sfrown,
	sharp: sharp,
	SHCHcy: SHCHcy,
	shchcy: shchcy,
	SHcy: SHcy,
	shcy: shcy,
	ShortDownArrow: ShortDownArrow,
	ShortLeftArrow: ShortLeftArrow,
	shortmid: shortmid,
	shortparallel: shortparallel,
	ShortRightArrow: ShortRightArrow,
	ShortUpArrow: ShortUpArrow,
	shy: shy$1,
	Sigma: Sigma,
	sigma: sigma,
	sigmaf: sigmaf,
	sigmav: sigmav,
	sim: sim,
	simdot: simdot,
	sime: sime,
	simeq: simeq,
	simg: simg,
	simgE: simgE,
	siml: siml,
	simlE: simlE,
	simne: simne,
	simplus: simplus,
	simrarr: simrarr,
	slarr: slarr,
	SmallCircle: SmallCircle,
	smallsetminus: smallsetminus,
	smashp: smashp,
	smeparsl: smeparsl,
	smid: smid,
	smile: smile,
	smt: smt,
	smte: smte,
	smtes: smtes,
	SOFTcy: SOFTcy,
	softcy: softcy,
	solbar: solbar,
	solb: solb,
	sol: sol,
	Sopf: Sopf,
	sopf: sopf,
	spades: spades,
	spadesuit: spadesuit,
	spar: spar,
	sqcap: sqcap,
	sqcaps: sqcaps,
	sqcup: sqcup,
	sqcups: sqcups,
	Sqrt: Sqrt,
	sqsub: sqsub,
	sqsube: sqsube,
	sqsubset: sqsubset,
	sqsubseteq: sqsubseteq,
	sqsup: sqsup,
	sqsupe: sqsupe,
	sqsupset: sqsupset,
	sqsupseteq: sqsupseteq,
	square: square,
	Square: Square,
	SquareIntersection: SquareIntersection,
	SquareSubset: SquareSubset,
	SquareSubsetEqual: SquareSubsetEqual,
	SquareSuperset: SquareSuperset,
	SquareSupersetEqual: SquareSupersetEqual,
	SquareUnion: SquareUnion,
	squarf: squarf,
	squ: squ,
	squf: squf,
	srarr: srarr,
	Sscr: Sscr,
	sscr: sscr,
	ssetmn: ssetmn,
	ssmile: ssmile,
	sstarf: sstarf,
	Star: Star,
	star: star,
	starf: starf,
	straightepsilon: straightepsilon,
	straightphi: straightphi,
	strns: strns,
	sub: sub,
	Sub: Sub,
	subdot: subdot,
	subE: subE,
	sube: sube,
	subedot: subedot,
	submult: submult,
	subnE: subnE,
	subne: subne,
	subplus: subplus,
	subrarr: subrarr,
	subset: subset,
	Subset: Subset,
	subseteq: subseteq,
	subseteqq: subseteqq,
	SubsetEqual: SubsetEqual,
	subsetneq: subsetneq,
	subsetneqq: subsetneqq,
	subsim: subsim,
	subsub: subsub,
	subsup: subsup,
	succapprox: succapprox,
	succ: succ,
	succcurlyeq: succcurlyeq,
	Succeeds: Succeeds,
	SucceedsEqual: SucceedsEqual,
	SucceedsSlantEqual: SucceedsSlantEqual,
	SucceedsTilde: SucceedsTilde,
	succeq: succeq,
	succnapprox: succnapprox,
	succneqq: succneqq,
	succnsim: succnsim,
	succsim: succsim,
	SuchThat: SuchThat,
	sum: sum,
	Sum: Sum,
	sung: sung,
	sup1: sup1$1,
	sup2: sup2$1,
	sup3: sup3$1,
	sup: sup,
	Sup: Sup,
	supdot: supdot,
	supdsub: supdsub,
	supE: supE,
	supe: supe,
	supedot: supedot,
	Superset: Superset,
	SupersetEqual: SupersetEqual,
	suphsol: suphsol,
	suphsub: suphsub,
	suplarr: suplarr,
	supmult: supmult,
	supnE: supnE,
	supne: supne,
	supplus: supplus,
	supset: supset,
	Supset: Supset,
	supseteq: supseteq,
	supseteqq: supseteqq,
	supsetneq: supsetneq,
	supsetneqq: supsetneqq,
	supsim: supsim,
	supsub: supsub,
	supsup: supsup,
	swarhk: swarhk,
	swarr: swarr,
	swArr: swArr,
	swarrow: swarrow,
	swnwar: swnwar,
	szlig: szlig$1,
	Tab: Tab,
	target: target,
	Tau: Tau,
	tau: tau,
	tbrk: tbrk,
	Tcaron: Tcaron,
	tcaron: tcaron,
	Tcedil: Tcedil,
	tcedil: tcedil,
	Tcy: Tcy,
	tcy: tcy,
	tdot: tdot,
	telrec: telrec,
	Tfr: Tfr,
	tfr: tfr,
	there4: there4,
	therefore: therefore,
	Therefore: Therefore,
	Theta: Theta,
	theta: theta,
	thetasym: thetasym,
	thetav: thetav,
	thickapprox: thickapprox,
	thicksim: thicksim,
	ThickSpace: ThickSpace,
	ThinSpace: ThinSpace,
	thinsp: thinsp,
	thkap: thkap,
	thksim: thksim,
	THORN: THORN$1,
	thorn: thorn$1,
	tilde: tilde,
	Tilde: Tilde,
	TildeEqual: TildeEqual,
	TildeFullEqual: TildeFullEqual,
	TildeTilde: TildeTilde,
	timesbar: timesbar,
	timesb: timesb,
	times: times$1,
	timesd: timesd,
	tint: tint,
	toea: toea,
	topbot: topbot,
	topcir: topcir,
	top: top,
	Topf: Topf,
	topf: topf,
	topfork: topfork,
	tosa: tosa,
	tprime: tprime,
	trade: trade,
	TRADE: TRADE,
	triangle: triangle,
	triangledown: triangledown,
	triangleleft: triangleleft,
	trianglelefteq: trianglelefteq,
	triangleq: triangleq,
	triangleright: triangleright,
	trianglerighteq: trianglerighteq,
	tridot: tridot,
	trie: trie,
	triminus: triminus,
	TripleDot: TripleDot,
	triplus: triplus,
	trisb: trisb,
	tritime: tritime,
	trpezium: trpezium,
	Tscr: Tscr,
	tscr: tscr,
	TScy: TScy,
	tscy: tscy,
	TSHcy: TSHcy,
	tshcy: tshcy,
	Tstrok: Tstrok,
	tstrok: tstrok,
	twixt: twixt,
	twoheadleftarrow: twoheadleftarrow,
	twoheadrightarrow: twoheadrightarrow,
	Uacute: Uacute$1,
	uacute: uacute$1,
	uarr: uarr,
	Uarr: Uarr,
	uArr: uArr,
	Uarrocir: Uarrocir,
	Ubrcy: Ubrcy,
	ubrcy: ubrcy,
	Ubreve: Ubreve,
	ubreve: ubreve,
	Ucirc: Ucirc$1,
	ucirc: ucirc$1,
	Ucy: Ucy,
	ucy: ucy,
	udarr: udarr,
	Udblac: Udblac,
	udblac: udblac,
	udhar: udhar,
	ufisht: ufisht,
	Ufr: Ufr,
	ufr: ufr,
	Ugrave: Ugrave$1,
	ugrave: ugrave$1,
	uHar: uHar,
	uharl: uharl,
	uharr: uharr,
	uhblk: uhblk,
	ulcorn: ulcorn,
	ulcorner: ulcorner,
	ulcrop: ulcrop,
	ultri: ultri,
	Umacr: Umacr,
	umacr: umacr,
	uml: uml$1,
	UnderBar: UnderBar,
	UnderBrace: UnderBrace,
	UnderBracket: UnderBracket,
	UnderParenthesis: UnderParenthesis,
	Union: Union,
	UnionPlus: UnionPlus,
	Uogon: Uogon,
	uogon: uogon,
	Uopf: Uopf,
	uopf: uopf,
	UpArrowBar: UpArrowBar,
	uparrow: uparrow,
	UpArrow: UpArrow,
	Uparrow: Uparrow,
	UpArrowDownArrow: UpArrowDownArrow,
	updownarrow: updownarrow,
	UpDownArrow: UpDownArrow,
	Updownarrow: Updownarrow,
	UpEquilibrium: UpEquilibrium,
	upharpoonleft: upharpoonleft,
	upharpoonright: upharpoonright,
	uplus: uplus,
	UpperLeftArrow: UpperLeftArrow,
	UpperRightArrow: UpperRightArrow,
	upsi: upsi,
	Upsi: Upsi,
	upsih: upsih,
	Upsilon: Upsilon,
	upsilon: upsilon,
	UpTeeArrow: UpTeeArrow,
	UpTee: UpTee,
	upuparrows: upuparrows,
	urcorn: urcorn,
	urcorner: urcorner,
	urcrop: urcrop,
	Uring: Uring,
	uring: uring,
	urtri: urtri,
	Uscr: Uscr,
	uscr: uscr,
	utdot: utdot,
	Utilde: Utilde,
	utilde: utilde,
	utri: utri,
	utrif: utrif,
	uuarr: uuarr,
	Uuml: Uuml$1,
	uuml: uuml$1,
	uwangle: uwangle,
	vangrt: vangrt,
	varepsilon: varepsilon,
	varkappa: varkappa,
	varnothing: varnothing,
	varphi: varphi,
	varpi: varpi,
	varpropto: varpropto,
	varr: varr,
	vArr: vArr,
	varrho: varrho,
	varsigma: varsigma,
	varsubsetneq: varsubsetneq,
	varsubsetneqq: varsubsetneqq,
	varsupsetneq: varsupsetneq,
	varsupsetneqq: varsupsetneqq,
	vartheta: vartheta,
	vartriangleleft: vartriangleleft,
	vartriangleright: vartriangleright,
	vBar: vBar,
	Vbar: Vbar,
	vBarv: vBarv,
	Vcy: Vcy,
	vcy: vcy,
	vdash: vdash,
	vDash: vDash,
	Vdash: Vdash,
	VDash: VDash,
	Vdashl: Vdashl,
	veebar: veebar,
	vee: vee,
	Vee: Vee,
	veeeq: veeeq,
	vellip: vellip,
	verbar: verbar,
	Verbar: Verbar,
	vert: vert,
	Vert: Vert,
	VerticalBar: VerticalBar,
	VerticalLine: VerticalLine,
	VerticalSeparator: VerticalSeparator,
	VerticalTilde: VerticalTilde,
	VeryThinSpace: VeryThinSpace,
	Vfr: Vfr,
	vfr: vfr,
	vltri: vltri,
	vnsub: vnsub,
	vnsup: vnsup,
	Vopf: Vopf,
	vopf: vopf,
	vprop: vprop,
	vrtri: vrtri,
	Vscr: Vscr,
	vscr: vscr,
	vsubnE: vsubnE,
	vsubne: vsubne,
	vsupnE: vsupnE,
	vsupne: vsupne,
	Vvdash: Vvdash,
	vzigzag: vzigzag,
	Wcirc: Wcirc,
	wcirc: wcirc,
	wedbar: wedbar,
	wedge: wedge,
	Wedge: Wedge,
	wedgeq: wedgeq,
	weierp: weierp,
	Wfr: Wfr,
	wfr: wfr,
	Wopf: Wopf,
	wopf: wopf,
	wp: wp,
	wr: wr,
	wreath: wreath,
	Wscr: Wscr,
	wscr: wscr,
	xcap: xcap,
	xcirc: xcirc,
	xcup: xcup,
	xdtri: xdtri,
	Xfr: Xfr,
	xfr: xfr,
	xharr: xharr,
	xhArr: xhArr,
	Xi: Xi,
	xi: xi,
	xlarr: xlarr,
	xlArr: xlArr,
	xmap: xmap,
	xnis: xnis,
	xodot: xodot,
	Xopf: Xopf,
	xopf: xopf,
	xoplus: xoplus,
	xotime: xotime,
	xrarr: xrarr,
	xrArr: xrArr,
	Xscr: Xscr,
	xscr: xscr,
	xsqcup: xsqcup,
	xuplus: xuplus,
	xutri: xutri,
	xvee: xvee,
	xwedge: xwedge,
	Yacute: Yacute$1,
	yacute: yacute$1,
	YAcy: YAcy,
	yacy: yacy,
	Ycirc: Ycirc,
	ycirc: ycirc,
	Ycy: Ycy,
	ycy: ycy,
	yen: yen$1,
	Yfr: Yfr,
	yfr: yfr,
	YIcy: YIcy,
	yicy: yicy,
	Yopf: Yopf,
	yopf: yopf,
	Yscr: Yscr,
	yscr: yscr,
	YUcy: YUcy,
	yucy: yucy,
	yuml: yuml$1,
	Yuml: Yuml,
	Zacute: Zacute,
	zacute: zacute,
	Zcaron: Zcaron,
	zcaron: zcaron,
	Zcy: Zcy,
	zcy: zcy,
	Zdot: Zdot,
	zdot: zdot,
	zeetrf: zeetrf,
	ZeroWidthSpace: ZeroWidthSpace,
	Zeta: Zeta,
	zeta: zeta,
	zfr: zfr,
	Zfr: Zfr,
	ZHcy: ZHcy,
	zhcy: zhcy,
	zigrarr: zigrarr,
	zopf: zopf,
	Zopf: Zopf,
	Zscr: Zscr,
	zscr: zscr,
	zwj: zwj,
	zwnj: zwnj
};

var Aacute = "Á";
var aacute = "á";
var Acirc = "Â";
var acirc = "â";
var acute = "´";
var AElig = "Æ";
var aelig = "æ";
var Agrave = "À";
var agrave = "à";
var amp$1 = "&";
var AMP = "&";
var Aring = "Å";
var aring = "å";
var Atilde = "Ã";
var atilde = "ã";
var Auml = "Ä";
var auml = "ä";
var brvbar = "¦";
var Ccedil = "Ç";
var ccedil = "ç";
var cedil = "¸";
var cent = "¢";
var copy = "©";
var COPY = "©";
var curren = "¤";
var deg = "°";
var divide = "÷";
var Eacute = "É";
var eacute = "é";
var Ecirc = "Ê";
var ecirc = "ê";
var Egrave = "È";
var egrave = "è";
var ETH = "Ð";
var eth = "ð";
var Euml = "Ë";
var euml = "ë";
var frac12 = "½";
var frac14 = "¼";
var frac34 = "¾";
var gt$1 = ">";
var GT = ">";
var Iacute = "Í";
var iacute = "í";
var Icirc = "Î";
var icirc = "î";
var iexcl = "¡";
var Igrave = "Ì";
var igrave = "ì";
var iquest = "¿";
var Iuml = "Ï";
var iuml = "ï";
var laquo = "«";
var lt$1 = "<";
var LT = "<";
var macr = "¯";
var micro = "µ";
var middot = "·";
var nbsp = " ";
var not = "¬";
var Ntilde = "Ñ";
var ntilde = "ñ";
var Oacute = "Ó";
var oacute = "ó";
var Ocirc = "Ô";
var ocirc = "ô";
var Ograve = "Ò";
var ograve = "ò";
var ordf = "ª";
var ordm = "º";
var Oslash = "Ø";
var oslash = "ø";
var Otilde = "Õ";
var otilde = "õ";
var Ouml = "Ö";
var ouml = "ö";
var para = "¶";
var plusmn = "±";
var pound = "£";
var quot$1 = "\"";
var QUOT = "\"";
var raquo = "»";
var reg = "®";
var REG = "®";
var sect = "§";
var shy = "­";
var sup1 = "¹";
var sup2 = "²";
var sup3 = "³";
var szlig = "ß";
var THORN = "Þ";
var thorn = "þ";
var times = "×";
var Uacute = "Ú";
var uacute = "ú";
var Ucirc = "Û";
var ucirc = "û";
var Ugrave = "Ù";
var ugrave = "ù";
var uml = "¨";
var Uuml = "Ü";
var uuml = "ü";
var Yacute = "Ý";
var yacute = "ý";
var yen = "¥";
var yuml = "ÿ";
var require$$1$4 = {
	Aacute: Aacute,
	aacute: aacute,
	Acirc: Acirc,
	acirc: acirc,
	acute: acute,
	AElig: AElig,
	aelig: aelig,
	Agrave: Agrave,
	agrave: agrave,
	amp: amp$1,
	AMP: AMP,
	Aring: Aring,
	aring: aring,
	Atilde: Atilde,
	atilde: atilde,
	Auml: Auml,
	auml: auml,
	brvbar: brvbar,
	Ccedil: Ccedil,
	ccedil: ccedil,
	cedil: cedil,
	cent: cent,
	copy: copy,
	COPY: COPY,
	curren: curren,
	deg: deg,
	divide: divide,
	Eacute: Eacute,
	eacute: eacute,
	Ecirc: Ecirc,
	ecirc: ecirc,
	Egrave: Egrave,
	egrave: egrave,
	ETH: ETH,
	eth: eth,
	Euml: Euml,
	euml: euml,
	frac12: frac12,
	frac14: frac14,
	frac34: frac34,
	gt: gt$1,
	GT: GT,
	Iacute: Iacute,
	iacute: iacute,
	Icirc: Icirc,
	icirc: icirc,
	iexcl: iexcl,
	Igrave: Igrave,
	igrave: igrave,
	iquest: iquest,
	Iuml: Iuml,
	iuml: iuml,
	laquo: laquo,
	lt: lt$1,
	LT: LT,
	macr: macr,
	micro: micro,
	middot: middot,
	nbsp: nbsp,
	not: not,
	Ntilde: Ntilde,
	ntilde: ntilde,
	Oacute: Oacute,
	oacute: oacute,
	Ocirc: Ocirc,
	ocirc: ocirc,
	Ograve: Ograve,
	ograve: ograve,
	ordf: ordf,
	ordm: ordm,
	Oslash: Oslash,
	oslash: oslash,
	Otilde: Otilde,
	otilde: otilde,
	Ouml: Ouml,
	ouml: ouml,
	para: para,
	plusmn: plusmn,
	pound: pound,
	quot: quot$1,
	QUOT: QUOT,
	raquo: raquo,
	reg: reg,
	REG: REG,
	sect: sect,
	shy: shy,
	sup1: sup1,
	sup2: sup2,
	sup3: sup3,
	szlig: szlig,
	THORN: THORN,
	thorn: thorn,
	times: times,
	Uacute: Uacute,
	uacute: uacute,
	Ucirc: Ucirc,
	ucirc: ucirc,
	Ugrave: Ugrave,
	ugrave: ugrave,
	uml: uml,
	Uuml: Uuml,
	uuml: uuml,
	Yacute: Yacute,
	yacute: yacute,
	yen: yen,
	yuml: yuml
};

var amp = "&";
var apos = "'";
var gt = ">";
var lt = "<";
var quot = "\"";
var require$$0$4 = {
	amp: amp,
	apos: apos,
	gt: gt,
	lt: lt,
	quot: quot
};

var decode_codepoint = {};

var require$$0$3 = {
	"0": 65533,
	"128": 8364,
	"130": 8218,
	"131": 402,
	"132": 8222,
	"133": 8230,
	"134": 8224,
	"135": 8225,
	"136": 710,
	"137": 8240,
	"138": 352,
	"139": 8249,
	"140": 338,
	"142": 381,
	"145": 8216,
	"146": 8217,
	"147": 8220,
	"148": 8221,
	"149": 8226,
	"150": 8211,
	"151": 8212,
	"152": 732,
	"153": 8482,
	"154": 353,
	"155": 8250,
	"156": 339,
	"158": 382,
	"159": 376
};

var hasRequiredDecode_codepoint;

function requireDecode_codepoint () {
	if (hasRequiredDecode_codepoint) return decode_codepoint;
	hasRequiredDecode_codepoint = 1;
	var __importDefault = (decode_codepoint && decode_codepoint.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(decode_codepoint, "__esModule", { value: true });
	var decode_json_1 = __importDefault(require$$0$3);
	// Adapted from https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119
	var fromCodePoint = 
	// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
	String.fromCodePoint ||
	    function (codePoint) {
	        var output = "";
	        if (codePoint > 0xffff) {
	            codePoint -= 0x10000;
	            output += String.fromCharCode(((codePoint >>> 10) & 0x3ff) | 0xd800);
	            codePoint = 0xdc00 | (codePoint & 0x3ff);
	        }
	        output += String.fromCharCode(codePoint);
	        return output;
	    };
	function decodeCodePoint(codePoint) {
	    if ((codePoint >= 0xd800 && codePoint <= 0xdfff) || codePoint > 0x10ffff) {
	        return "\uFFFD";
	    }
	    if (codePoint in decode_json_1.default) {
	        codePoint = decode_json_1.default[codePoint];
	    }
	    return fromCodePoint(codePoint);
	}
	decode_codepoint.default = decodeCodePoint;
	return decode_codepoint;
}

var hasRequiredDecode;

function requireDecode () {
	if (hasRequiredDecode) return decode;
	hasRequiredDecode = 1;
	var __importDefault = (decode && decode.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(decode, "__esModule", { value: true });
	decode.decodeHTML = decode.decodeHTMLStrict = decode.decodeXML = void 0;
	var entities_json_1 = __importDefault(require$$1$5);
	var legacy_json_1 = __importDefault(require$$1$4);
	var xml_json_1 = __importDefault(require$$0$4);
	var decode_codepoint_1 = __importDefault(/*@__PURE__*/ requireDecode_codepoint());
	var strictEntityRe = /&(?:[a-zA-Z0-9]+|#[xX][\da-fA-F]+|#\d+);/g;
	decode.decodeXML = getStrictDecoder(xml_json_1.default);
	decode.decodeHTMLStrict = getStrictDecoder(entities_json_1.default);
	function getStrictDecoder(map) {
	    var replace = getReplacer(map);
	    return function (str) { return String(str).replace(strictEntityRe, replace); };
	}
	var sorter = function (a, b) { return (a < b ? 1 : -1); };
	decode.decodeHTML = (function () {
	    var legacy = Object.keys(legacy_json_1.default).sort(sorter);
	    var keys = Object.keys(entities_json_1.default).sort(sorter);
	    for (var i = 0, j = 0; i < keys.length; i++) {
	        if (legacy[j] === keys[i]) {
	            keys[i] += ";?";
	            j++;
	        }
	        else {
	            keys[i] += ";";
	        }
	    }
	    var re = new RegExp("&(?:" + keys.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g");
	    var replace = getReplacer(entities_json_1.default);
	    function replacer(str) {
	        if (str.substr(-1) !== ";")
	            str += ";";
	        return replace(str);
	    }
	    // TODO consider creating a merged map
	    return function (str) { return String(str).replace(re, replacer); };
	})();
	function getReplacer(map) {
	    return function replace(str) {
	        if (str.charAt(1) === "#") {
	            var secondChar = str.charAt(2);
	            if (secondChar === "X" || secondChar === "x") {
	                return decode_codepoint_1.default(parseInt(str.substr(3), 16));
	            }
	            return decode_codepoint_1.default(parseInt(str.substr(2), 10));
	        }
	        // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
	        return map[str.slice(1, -1)] || str;
	    };
	}
	return decode;
}

var encode = {};

var hasRequiredEncode;

function requireEncode () {
	if (hasRequiredEncode) return encode;
	hasRequiredEncode = 1;
	var __importDefault = (encode && encode.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(encode, "__esModule", { value: true });
	encode.escapeUTF8 = encode.escape = encode.encodeNonAsciiHTML = encode.encodeHTML = encode.encodeXML = void 0;
	var xml_json_1 = __importDefault(require$$0$4);
	var inverseXML = getInverseObj(xml_json_1.default);
	var xmlReplacer = getInverseReplacer(inverseXML);
	/**
	 * Encodes all non-ASCII characters, as well as characters not valid in XML
	 * documents using XML entities.
	 *
	 * If a character has no equivalent entity, a
	 * numeric hexadecimal reference (eg. `&#xfc;`) will be used.
	 */
	encode.encodeXML = getASCIIEncoder(inverseXML);
	var entities_json_1 = __importDefault(require$$1$5);
	var inverseHTML = getInverseObj(entities_json_1.default);
	var htmlReplacer = getInverseReplacer(inverseHTML);
	/**
	 * Encodes all entities and non-ASCII characters in the input.
	 *
	 * This includes characters that are valid ASCII characters in HTML documents.
	 * For example `#` will be encoded as `&num;`. To get a more compact output,
	 * consider using the `encodeNonAsciiHTML` function.
	 *
	 * If a character has no equivalent entity, a
	 * numeric hexadecimal reference (eg. `&#xfc;`) will be used.
	 */
	encode.encodeHTML = getInverse(inverseHTML, htmlReplacer);
	/**
	 * Encodes all non-ASCII characters, as well as characters not valid in HTML
	 * documents using HTML entities.
	 *
	 * If a character has no equivalent entity, a
	 * numeric hexadecimal reference (eg. `&#xfc;`) will be used.
	 */
	encode.encodeNonAsciiHTML = getASCIIEncoder(inverseHTML);
	function getInverseObj(obj) {
	    return Object.keys(obj)
	        .sort()
	        .reduce(function (inverse, name) {
	        inverse[obj[name]] = "&" + name + ";";
	        return inverse;
	    }, {});
	}
	function getInverseReplacer(inverse) {
	    var single = [];
	    var multiple = [];
	    for (var _i = 0, _a = Object.keys(inverse); _i < _a.length; _i++) {
	        var k = _a[_i];
	        if (k.length === 1) {
	            // Add value to single array
	            single.push("\\" + k);
	        }
	        else {
	            // Add value to multiple array
	            multiple.push(k);
	        }
	    }
	    // Add ranges to single characters.
	    single.sort();
	    for (var start = 0; start < single.length - 1; start++) {
	        // Find the end of a run of characters
	        var end = start;
	        while (end < single.length - 1 &&
	            single[end].charCodeAt(1) + 1 === single[end + 1].charCodeAt(1)) {
	            end += 1;
	        }
	        var count = 1 + end - start;
	        // We want to replace at least three characters
	        if (count < 3)
	            continue;
	        single.splice(start, count, single[start] + "-" + single[end]);
	    }
	    multiple.unshift("[" + single.join("") + "]");
	    return new RegExp(multiple.join("|"), "g");
	}
	// /[^\0-\x7F]/gu
	var reNonASCII = /(?:[\x80-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g;
	var getCodePoint = 
	// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
	String.prototype.codePointAt != null
	    ? // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
	        function (str) { return str.codePointAt(0); }
	    : // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
	        function (c) {
	            return (c.charCodeAt(0) - 0xd800) * 0x400 +
	                c.charCodeAt(1) -
	                0xdc00 +
	                0x10000;
	        };
	function singleCharReplacer(c) {
	    return "&#x" + (c.length > 1 ? getCodePoint(c) : c.charCodeAt(0))
	        .toString(16)
	        .toUpperCase() + ";";
	}
	function getInverse(inverse, re) {
	    return function (data) {
	        return data
	            .replace(re, function (name) { return inverse[name]; })
	            .replace(reNonASCII, singleCharReplacer);
	    };
	}
	var reEscapeChars = new RegExp(xmlReplacer.source + "|" + reNonASCII.source, "g");
	/**
	 * Encodes all non-ASCII characters, as well as characters not valid in XML
	 * documents using numeric hexadecimal reference (eg. `&#xfc;`).
	 *
	 * Have a look at `escapeUTF8` if you want a more concise output at the expense
	 * of reduced transportability.
	 *
	 * @param data String to escape.
	 */
	function escape(data) {
	    return data.replace(reEscapeChars, singleCharReplacer);
	}
	encode.escape = escape;
	/**
	 * Encodes all characters not valid in XML documents using numeric hexadecimal
	 * reference (eg. `&#xfc;`).
	 *
	 * Note that the output will be character-set dependent.
	 *
	 * @param data String to escape.
	 */
	function escapeUTF8(data) {
	    return data.replace(xmlReplacer, singleCharReplacer);
	}
	encode.escapeUTF8 = escapeUTF8;
	function getASCIIEncoder(obj) {
	    return function (data) {
	        return data.replace(reEscapeChars, function (c) { return obj[c] || singleCharReplacer(c); });
	    };
	}
	return encode;
}

var hasRequiredLib;

function requireLib () {
	if (hasRequiredLib) return lib;
	hasRequiredLib = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.decodeXMLStrict = exports.decodeHTML5Strict = exports.decodeHTML4Strict = exports.decodeHTML5 = exports.decodeHTML4 = exports.decodeHTMLStrict = exports.decodeHTML = exports.decodeXML = exports.encodeHTML5 = exports.encodeHTML4 = exports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = exports.encode = exports.decodeStrict = exports.decode = void 0;
		var decode_1 = /*@__PURE__*/ requireDecode();
		var encode_1 = /*@__PURE__*/ requireEncode();
		/**
		 * Decodes a string with entities.
		 *
		 * @param data String to decode.
		 * @param level Optional level to decode at. 0 = XML, 1 = HTML. Default is 0.
		 * @deprecated Use `decodeXML` or `decodeHTML` directly.
		 */
		function decode(data, level) {
		    return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTML)(data);
		}
		exports.decode = decode;
		/**
		 * Decodes a string with entities. Does not allow missing trailing semicolons for entities.
		 *
		 * @param data String to decode.
		 * @param level Optional level to decode at. 0 = XML, 1 = HTML. Default is 0.
		 * @deprecated Use `decodeHTMLStrict` or `decodeXML` directly.
		 */
		function decodeStrict(data, level) {
		    return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTMLStrict)(data);
		}
		exports.decodeStrict = decodeStrict;
		/**
		 * Encodes a string with entities.
		 *
		 * @param data String to encode.
		 * @param level Optional level to encode at. 0 = XML, 1 = HTML. Default is 0.
		 * @deprecated Use `encodeHTML`, `encodeXML` or `encodeNonAsciiHTML` directly.
		 */
		function encode(data, level) {
		    return (!level || level <= 0 ? encode_1.encodeXML : encode_1.encodeHTML)(data);
		}
		exports.encode = encode;
		var encode_2 = /*@__PURE__*/ requireEncode();
		Object.defineProperty(exports, "encodeXML", { enumerable: true, get: function () { return encode_2.encodeXML; } });
		Object.defineProperty(exports, "encodeHTML", { enumerable: true, get: function () { return encode_2.encodeHTML; } });
		Object.defineProperty(exports, "encodeNonAsciiHTML", { enumerable: true, get: function () { return encode_2.encodeNonAsciiHTML; } });
		Object.defineProperty(exports, "escape", { enumerable: true, get: function () { return encode_2.escape; } });
		Object.defineProperty(exports, "escapeUTF8", { enumerable: true, get: function () { return encode_2.escapeUTF8; } });
		// Legacy aliases (deprecated)
		Object.defineProperty(exports, "encodeHTML4", { enumerable: true, get: function () { return encode_2.encodeHTML; } });
		Object.defineProperty(exports, "encodeHTML5", { enumerable: true, get: function () { return encode_2.encodeHTML; } });
		var decode_2 = /*@__PURE__*/ requireDecode();
		Object.defineProperty(exports, "decodeXML", { enumerable: true, get: function () { return decode_2.decodeXML; } });
		Object.defineProperty(exports, "decodeHTML", { enumerable: true, get: function () { return decode_2.decodeHTML; } });
		Object.defineProperty(exports, "decodeHTMLStrict", { enumerable: true, get: function () { return decode_2.decodeHTMLStrict; } });
		// Legacy aliases (deprecated)
		Object.defineProperty(exports, "decodeHTML4", { enumerable: true, get: function () { return decode_2.decodeHTML; } });
		Object.defineProperty(exports, "decodeHTML5", { enumerable: true, get: function () { return decode_2.decodeHTML; } });
		Object.defineProperty(exports, "decodeHTML4Strict", { enumerable: true, get: function () { return decode_2.decodeHTMLStrict; } });
		Object.defineProperty(exports, "decodeHTML5Strict", { enumerable: true, get: function () { return decode_2.decodeHTMLStrict; } });
		Object.defineProperty(exports, "decodeXMLStrict", { enumerable: true, get: function () { return decode_2.decodeXML; } }); 
	} (lib));
	return lib;
}

var hasRequiredUtils$1;

function requireUtils$1 () {
	if (hasRequiredUtils$1) return utils$1.exports;
	hasRequiredUtils$1 = 1;
	const utils = utils$1.exports = {};
	const entities = /*@__PURE__*/ requireLib();
	const xml2js = requireXml2js();

	utils.stripHtml = function(str) {
	  str = str.replace(/([^\n])<\/?(h|br|p|ul|ol|li|blockquote|section|table|tr|div)(?:.|\n)*?>([^\n])/gm, '$1\n$3');
	  str = str.replace(/<(?:.|\n)*?>/gm, '');
	  return str;
	};

	utils.getSnippet = function(str) {
	  return entities.decodeHTML(utils.stripHtml(str)).trim();
	};

	utils.getLink = function(links, rel, fallbackIdx) {
	  if (!links) return;
	  for (let i = 0; i < links.length; ++i) {
	    if (links[i].$.rel === rel) return links[i].$.href;
	  }
	  if (links[fallbackIdx]) return links[fallbackIdx].$.href;
	};

	utils.getContent = function(content) {
	  if (typeof content._ === 'string') {
	    return content._;
	  } else if (typeof content === 'object') {
	    let builder = new xml2js.Builder({headless: true, explicitRoot: true, rootName: 'div', renderOpts: {pretty: false}});
	    return builder.buildObject(content);
	  } else {
	    return content;
	  }
	};

	utils.copyFromXML = function(xml, dest, fields) {
	  fields.forEach(function(f) {
	    let from = f;
	    let to = f;
	    let options = {};
	    if (Array.isArray(f)) {
	      from = f[0];
	      to = f[1];
	      if (f.length > 2) {
	        options = f[2];
	      }
	    }
	    const { keepArray, includeSnippet } = options;
	    if (xml[from] !== undefined){
	      dest[to] = keepArray ? xml[from] : xml[from][0];
	    }
	    if (dest[to] && typeof dest[to]._ === 'string') {
	      dest[to]=dest[to]._;
	    }
	    if (includeSnippet && dest[to] && typeof dest[to] === 'string') {
	      dest[to + 'Snippet'] = utils.getSnippet(dest[to]);
	    }
	  });
	};

	utils.maybePromisify = function(callback, promise) {
	  if (!callback) return promise;
	  return promise.then(
	    data => setTimeout(() => callback(null, data)),
	    err => setTimeout(() => callback(err))
	  );
	};

	const DEFAULT_ENCODING = 'utf8';
	const ENCODING_REGEX = /(encoding|charset)\s*=\s*(\S+)/;
	const SUPPORTED_ENCODINGS = ['ascii', 'utf8', 'utf16le', 'ucs2', 'base64', 'latin1', 'binary', 'hex'];
	const ENCODING_ALIASES = {
	  'utf-8': 'utf8',
	  'iso-8859-1': 'latin1',
	};

	utils.getEncodingFromContentType = function(contentType) {
	  contentType = contentType || '';
	  let match = contentType.match(ENCODING_REGEX);
	  let encoding = (match || [])[2] || '';
	  encoding = encoding.toLowerCase();
	  encoding = ENCODING_ALIASES[encoding] || encoding;
	  if (!encoding || SUPPORTED_ENCODINGS.indexOf(encoding) === -1) {
	    encoding = DEFAULT_ENCODING;
	  }
	  return encoding;
	};
	return utils$1.exports;
}

var parser$1;
var hasRequiredParser;

function requireParser () {
	if (hasRequiredParser) return parser$1;
	hasRequiredParser = 1;
	const http = require$$0$6;
	const https = require$$1$7;
	const xml2js = requireXml2js();
	const url = require$$7;

	const fields = requireFields();
	const utils = requireUtils$1();

	const DEFAULT_HEADERS = {
	  'User-Agent': 'rss-parser',
	  'Accept': 'application/rss+xml',
	};
	const DEFAULT_MAX_REDIRECTS = 5;
	const DEFAULT_TIMEOUT = 60000;

	class Parser {
	  constructor(options={}) {
	    options.headers = options.headers || {};
	    options.xml2js = options.xml2js || {};
	    options.customFields = options.customFields || {};
	    options.customFields.item = options.customFields.item || [];
	    options.customFields.feed = options.customFields.feed || [];
	    options.requestOptions = options.requestOptions || {};
	    if (!options.maxRedirects) options.maxRedirects = DEFAULT_MAX_REDIRECTS;
	    if (!options.timeout) options.timeout = DEFAULT_TIMEOUT;
	    this.options = options;
	    this.xmlParser = new xml2js.Parser(this.options.xml2js);
	  }

	  parseString(xml, callback) {
	    let prom = new Promise((resolve, reject) => {
	      this.xmlParser.parseString(xml, (err, result) => {
	        if (err) return reject(err);
	        if (!result) {
	          return reject(new Error('Unable to parse XML.'));
	        }
	        let feed = null;
	        if (result.feed) {
	          feed = this.buildAtomFeed(result);
	        } else if (result.rss && result.rss.$ && result.rss.$.version && result.rss.$.version.match(/^2/)) {
	          feed = this.buildRSS2(result);
	        } else if (result['rdf:RDF']) {
	          feed = this.buildRSS1(result);
	        } else if (result.rss && result.rss.$ && result.rss.$.version && result.rss.$.version.match(/0\.9/)) {
	          feed = this.buildRSS0_9(result);
	        } else if (result.rss && this.options.defaultRSS) {
	          switch(this.options.defaultRSS) {
	            case 0.9:
	              feed = this.buildRSS0_9(result);
	              break;
	            case 1:
	              feed = this.buildRSS1(result);
	              break;
	            case 2:
	              feed = this.buildRSS2(result);
	              break;
	            default:
	              return reject(new Error("default RSS version not recognized."))
	          }
	        } else {
	          return reject(new Error("Feed not recognized as RSS 1 or 2."))
	        }
	        resolve(feed);
	      });
	    });
	    prom = utils.maybePromisify(callback, prom);
	    return prom;
	  }

	  parseURL(feedUrl, callback, redirectCount=0) {
	    let xml = '';
	    let get = feedUrl.indexOf('https') === 0 ? https.get : http.get;
	    let urlParts = url.parse(feedUrl);
	    let headers = Object.assign({}, DEFAULT_HEADERS, this.options.headers);
	    let timeout = null;
	    let prom = new Promise((resolve, reject) => {
	      const requestOpts = Object.assign({headers}, urlParts, this.options.requestOptions);
	      let req = get(requestOpts, (res) => {
	        if (this.options.maxRedirects && res.statusCode >= 300 && res.statusCode < 400 && res.headers['location']) {
	          if (redirectCount === this.options.maxRedirects) {
	            return reject(new Error("Too many redirects"));
	          } else {
	            const newLocation = url.resolve(feedUrl, res.headers['location']);
	            return this.parseURL(newLocation, null, redirectCount + 1).then(resolve, reject);
	          }
	        } else if (res.statusCode >= 300) {
	          return reject(new Error("Status code " + res.statusCode))
	        }
	        let encoding = utils.getEncodingFromContentType(res.headers['content-type']);
	        res.setEncoding(encoding);
	        res.on('data', (chunk) => {
	          xml += chunk;
	        });
	        res.on('end', () => {
	          return this.parseString(xml).then(resolve, reject);
	        });
	      });
	      req.on('error', reject);
	      timeout = setTimeout(() => {
	        return reject(new Error("Request timed out after " + this.options.timeout + "ms"));
	      }, this.options.timeout);
	    }).then(data => {
	      clearTimeout(timeout);
	      return Promise.resolve(data);
	    }, e => {
	      clearTimeout(timeout);
	      return Promise.reject(e);
	    });
	    prom = utils.maybePromisify(callback, prom);
	    return prom;
	  }

	  buildAtomFeed(xmlObj) {
	    let feed = {items: []};
	    utils.copyFromXML(xmlObj.feed, feed, this.options.customFields.feed);
	    if (xmlObj.feed.link) {
	      feed.link = utils.getLink(xmlObj.feed.link, 'alternate', 0);
	      feed.feedUrl = utils.getLink(xmlObj.feed.link, 'self', 1);
	    }
	    if (xmlObj.feed.title) {
	      let title = xmlObj.feed.title[0] || '';
	      if (title._) title = title._;
	      if (title) feed.title = title;
	    }
	    if (xmlObj.feed.updated) {
	      feed.lastBuildDate = xmlObj.feed.updated[0];
	    }
	    feed.items = (xmlObj.feed.entry || []).map(entry => this.parseItemAtom(entry));
	    return feed;
	  }

	  parseItemAtom(entry) {
	    let item = {};
	    utils.copyFromXML(entry, item, this.options.customFields.item);
	    if (entry.title) {
	      let title = entry.title[0] || '';
	      if (title._) title = title._;
	      if (title) item.title = title;
	    }
	    if (entry.link && entry.link.length) {
	      item.link = utils.getLink(entry.link, 'alternate', 0);
	    }
	    if (entry.published && entry.published.length && entry.published[0].length) item.pubDate = new Date(entry.published[0]).toISOString();
	    if (!item.pubDate && entry.updated && entry.updated.length && entry.updated[0].length) item.pubDate = new Date(entry.updated[0]).toISOString();
	    if (entry.author && entry.author.length && entry.author[0].name && entry.author[0].name.length) item.author = entry.author[0].name[0];
	    if (entry.content && entry.content.length) {
	      item.content = utils.getContent(entry.content[0]);
	      item.contentSnippet = utils.getSnippet(item.content);
	    }
	    if (entry.summary && entry.summary.length) {
	      item.summary = utils.getContent(entry.summary[0]);
	    }
	    if (entry.id) {
	      item.id = entry.id[0];
	    }
	    this.setISODate(item);
	    return item;
	  }

	  buildRSS0_9(xmlObj) {
	    var channel = xmlObj.rss.channel[0];
	    var items = channel.item;
	    return this.buildRSS(channel, items);
	  }

	  buildRSS1(xmlObj) {
	    xmlObj = xmlObj['rdf:RDF'];
	    let channel = xmlObj.channel[0];
	    let items = xmlObj.item;
	    return this.buildRSS(channel, items);
	  }

	  buildRSS2(xmlObj) {
	    let channel = xmlObj.rss.channel[0];
	    let items = channel.item;
	    let feed = this.buildRSS(channel, items);
	    if (xmlObj.rss.$ && xmlObj.rss.$['xmlns:itunes']) {
	      this.decorateItunes(feed, channel);
	    }
	    return feed;
	  }

	  buildRSS(channel, items) {
	    items = items || [];
	    let feed = {items: []};
	    let feedFields = fields.feed.concat(this.options.customFields.feed);
	    let itemFields = fields.item.concat(this.options.customFields.item);
	    if (channel['atom:link'] && channel['atom:link'][0] && channel['atom:link'][0].$) {
	      feed.feedUrl = channel['atom:link'][0].$.href;
	    }
	    if (channel.image && channel.image[0] && channel.image[0].url) {
	      feed.image = {};
	      let image = channel.image[0];
	      if (image.link) feed.image.link = image.link[0];
	      if (image.url) feed.image.url = image.url[0];
	      if (image.title) feed.image.title = image.title[0];
	      if (image.width) feed.image.width = image.width[0];
	      if (image.height) feed.image.height = image.height[0];
	    }
	    const paginationLinks = this.generatePaginationLinks(channel);
	    if (Object.keys(paginationLinks).length) {
	      feed.paginationLinks = paginationLinks;
	    }
	    utils.copyFromXML(channel, feed, feedFields);
	    feed.items = items.map(xmlItem => this.parseItemRss(xmlItem, itemFields));
	    return feed;
	  }

	  parseItemRss(xmlItem, itemFields) {
	    let item = {};
	    utils.copyFromXML(xmlItem, item, itemFields);
	    if (xmlItem.enclosure) {
	      item.enclosure = xmlItem.enclosure[0].$;
	    }
	    if (xmlItem.description) {
	      item.content = utils.getContent(xmlItem.description[0]);
	      item.contentSnippet = utils.getSnippet(item.content);
	    }
	    if (xmlItem.guid) {
	      item.guid = xmlItem.guid[0];
	      if (item.guid._) item.guid = item.guid._;
	    }
	    if (xmlItem.$ && xmlItem.$['rdf:about']) {
	      item['rdf:about'] = xmlItem.$['rdf:about'];
	    }
	    if (xmlItem.category) item.categories = xmlItem.category;
	    this.setISODate(item);
	    return item;
	  }

	  /**
	   * Add iTunes specific fields from XML to extracted JSON
	   *
	   * @access public
	   * @param {object} feed extracted
	   * @param {object} channel parsed XML
	   */
	  decorateItunes(feed, channel) {
	    let items = channel.item || [];
	    feed.itunes = {};

	    if (channel['itunes:owner']) {
	      let owner = {};

	      if(channel['itunes:owner'][0]['itunes:name']) {
	        owner.name = channel['itunes:owner'][0]['itunes:name'][0];
	      }
	      if(channel['itunes:owner'][0]['itunes:email']) {
	        owner.email = channel['itunes:owner'][0]['itunes:email'][0];
	      }
	      feed.itunes.owner = owner;
	    }

	    if (channel['itunes:image']) {
	      let image;
	      let hasImageHref = (channel['itunes:image'][0] &&
	        channel['itunes:image'][0].$ &&
	        channel['itunes:image'][0].$.href);
	      image = hasImageHref ? channel['itunes:image'][0].$.href : null;
	      if (image) {
	        feed.itunes.image = image;
	      }
	    }

	    if (channel['itunes:category']) {
	      const categoriesWithSubs = channel['itunes:category'].map((category) => {
	        return {
	          name: category && category.$ && category.$.text,
	          subs: category['itunes:category'] ?
	            category['itunes:category']
	              .map((subcategory) => ({
	                name: subcategory && subcategory.$ && subcategory.$.text
	              })) : null,
	        };
	      });

	      feed.itunes.categories = categoriesWithSubs.map((category) => category.name);
	      feed.itunes.categoriesWithSubs = categoriesWithSubs;
	    }

	    if (channel['itunes:keywords']) {
	      if (channel['itunes:keywords'].length > 1) {
	        feed.itunes.keywords = channel['itunes:keywords'].map(
	          keyword => keyword && keyword.$ && keyword.$.text
	        );
	      } else {
	        let keywords = channel['itunes:keywords'][0];
	        if (keywords && typeof keywords._ === 'string') {
	          keywords = keywords._;
	        }

	        if (keywords && keywords.$ && keywords.$.text) {
	          feed.itunes.keywords = keywords.$.text.split(',');
	        } else if (typeof keywords === "string") {
	          feed.itunes.keywords = keywords.split(',');
	        }
	      }
	    }

	    utils.copyFromXML(channel, feed.itunes, fields.podcastFeed);
	    items.forEach((item, index) => {
	      let entry = feed.items[index];
	      entry.itunes = {};
	      utils.copyFromXML(item, entry.itunes, fields.podcastItem);
	      let image = item['itunes:image'];
	      if (image && image[0] && image[0].$ && image[0].$.href) {
	        entry.itunes.image = image[0].$.href;
	      }
	    });
	  }

	  setISODate(item) {
	    let date = item.pubDate || item.date;
	    if (date) {
	      try {
	        item.isoDate = new Date(date.trim()).toISOString();
	      } catch (e) {
	        // Ignore bad date format
	      }
	    }
	  }

	  /**
	   * Generates a pagination object where the rel attribute is the key and href attribute is the value
	   *  { self: 'self-url', first: 'first-url', ...  }
	   *
	   * @access private
	   * @param {Object} channel parsed XML
	   * @returns {Object}
	   */
	  generatePaginationLinks(channel) {
	    if (!channel['atom:link']) {
	      return {};
	    }
	    const paginationRelAttributes = ['self', 'first', 'next', 'prev', 'last'];

	    return channel['atom:link'].reduce((paginationLinks, link) => {
	      if (!link.$ || !paginationRelAttributes.includes(link.$.rel)) {
	        return paginationLinks;
	      }
	      paginationLinks[link.$.rel] = link.$.href;
	      return paginationLinks;
	    }, {});
	  }
	}

	parser$1 = Parser;
	return parser$1;
}

var rssParser;
var hasRequiredRssParser;

function requireRssParser () {
	if (hasRequiredRssParser) return rssParser;
	hasRequiredRssParser = 1;

	rssParser = requireParser();
	return rssParser;
}

var rssParserExports = requireRssParser();
var Parser = /*@__PURE__*/getDefaultExportFromCjs(rssParserExports);

var util$8;
(function (util) {
    util.assertEqual = (val) => val;
    function assertIs(_arg) { }
    util.assertIs = assertIs;
    function assertNever(_x) {
        throw new Error();
    }
    util.assertNever = assertNever;
    util.arrayToEnum = (items) => {
        const obj = {};
        for (const item of items) {
            obj[item] = item;
        }
        return obj;
    };
    util.getValidEnumValues = (obj) => {
        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
        const filtered = {};
        for (const k of validKeys) {
            filtered[k] = obj[k];
        }
        return util.objectValues(filtered);
    };
    util.objectValues = (obj) => {
        return util.objectKeys(obj).map(function (e) {
            return obj[e];
        });
    };
    util.objectKeys = typeof Object.keys === "function" // eslint-disable-line ban/ban
        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban
        : (object) => {
            const keys = [];
            for (const key in object) {
                if (Object.prototype.hasOwnProperty.call(object, key)) {
                    keys.push(key);
                }
            }
            return keys;
        };
    util.find = (arr, checker) => {
        for (const item of arr) {
            if (checker(item))
                return item;
        }
        return undefined;
    };
    util.isInteger = typeof Number.isInteger === "function"
        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban
        : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
    function joinValues(array, separator = " | ") {
        return array
            .map((val) => (typeof val === "string" ? `'${val}'` : val))
            .join(separator);
    }
    util.joinValues = joinValues;
    util.jsonStringifyReplacer = (_, value) => {
        if (typeof value === "bigint") {
            return value.toString();
        }
        return value;
    };
})(util$8 || (util$8 = {}));
var objectUtil;
(function (objectUtil) {
    objectUtil.mergeShapes = (first, second) => {
        return {
            ...first,
            ...second, // second overwrites first
        };
    };
})(objectUtil || (objectUtil = {}));
const ZodParsedType = util$8.arrayToEnum([
    "string",
    "nan",
    "number",
    "integer",
    "float",
    "boolean",
    "date",
    "bigint",
    "symbol",
    "function",
    "undefined",
    "null",
    "array",
    "object",
    "unknown",
    "promise",
    "void",
    "never",
    "map",
    "set",
]);
const getParsedType = (data) => {
    const t = typeof data;
    switch (t) {
        case "undefined":
            return ZodParsedType.undefined;
        case "string":
            return ZodParsedType.string;
        case "number":
            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
        case "boolean":
            return ZodParsedType.boolean;
        case "function":
            return ZodParsedType.function;
        case "bigint":
            return ZodParsedType.bigint;
        case "symbol":
            return ZodParsedType.symbol;
        case "object":
            if (Array.isArray(data)) {
                return ZodParsedType.array;
            }
            if (data === null) {
                return ZodParsedType.null;
            }
            if (data.then &&
                typeof data.then === "function" &&
                data.catch &&
                typeof data.catch === "function") {
                return ZodParsedType.promise;
            }
            if (typeof Map !== "undefined" && data instanceof Map) {
                return ZodParsedType.map;
            }
            if (typeof Set !== "undefined" && data instanceof Set) {
                return ZodParsedType.set;
            }
            if (typeof Date !== "undefined" && data instanceof Date) {
                return ZodParsedType.date;
            }
            return ZodParsedType.object;
        default:
            return ZodParsedType.unknown;
    }
};

const ZodIssueCode = util$8.arrayToEnum([
    "invalid_type",
    "invalid_literal",
    "custom",
    "invalid_union",
    "invalid_union_discriminator",
    "invalid_enum_value",
    "unrecognized_keys",
    "invalid_arguments",
    "invalid_return_type",
    "invalid_date",
    "invalid_string",
    "too_small",
    "too_big",
    "invalid_intersection_types",
    "not_multiple_of",
    "not_finite",
]);
const quotelessJson = (obj) => {
    const json = JSON.stringify(obj, null, 2);
    return json.replace(/"([^"]+)":/g, "$1:");
};
class ZodError extends Error {
    constructor(issues) {
        super();
        this.issues = [];
        this.addIssue = (sub) => {
            this.issues = [...this.issues, sub];
        };
        this.addIssues = (subs = []) => {
            this.issues = [...this.issues, ...subs];
        };
        const actualProto = new.target.prototype;
        if (Object.setPrototypeOf) {
            // eslint-disable-next-line ban/ban
            Object.setPrototypeOf(this, actualProto);
        }
        else {
            this.__proto__ = actualProto;
        }
        this.name = "ZodError";
        this.issues = issues;
    }
    get errors() {
        return this.issues;
    }
    format(_mapper) {
        const mapper = _mapper ||
            function (issue) {
                return issue.message;
            };
        const fieldErrors = { _errors: [] };
        const processError = (error) => {
            for (const issue of error.issues) {
                if (issue.code === "invalid_union") {
                    issue.unionErrors.map(processError);
                }
                else if (issue.code === "invalid_return_type") {
                    processError(issue.returnTypeError);
                }
                else if (issue.code === "invalid_arguments") {
                    processError(issue.argumentsError);
                }
                else if (issue.path.length === 0) {
                    fieldErrors._errors.push(mapper(issue));
                }
                else {
                    let curr = fieldErrors;
                    let i = 0;
                    while (i < issue.path.length) {
                        const el = issue.path[i];
                        const terminal = i === issue.path.length - 1;
                        if (!terminal) {
                            curr[el] = curr[el] || { _errors: [] };
                            // if (typeof el === "string") {
                            //   curr[el] = curr[el] || { _errors: [] };
                            // } else if (typeof el === "number") {
                            //   const errorArray: any = [];
                            //   errorArray._errors = [];
                            //   curr[el] = curr[el] || errorArray;
                            // }
                        }
                        else {
                            curr[el] = curr[el] || { _errors: [] };
                            curr[el]._errors.push(mapper(issue));
                        }
                        curr = curr[el];
                        i++;
                    }
                }
            }
        };
        processError(this);
        return fieldErrors;
    }
    static assert(value) {
        if (!(value instanceof ZodError)) {
            throw new Error(`Not a ZodError: ${value}`);
        }
    }
    toString() {
        return this.message;
    }
    get message() {
        return JSON.stringify(this.issues, util$8.jsonStringifyReplacer, 2);
    }
    get isEmpty() {
        return this.issues.length === 0;
    }
    flatten(mapper = (issue) => issue.message) {
        const fieldErrors = {};
        const formErrors = [];
        for (const sub of this.issues) {
            if (sub.path.length > 0) {
                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
                fieldErrors[sub.path[0]].push(mapper(sub));
            }
            else {
                formErrors.push(mapper(sub));
            }
        }
        return { formErrors, fieldErrors };
    }
    get formErrors() {
        return this.flatten();
    }
}
ZodError.create = (issues) => {
    const error = new ZodError(issues);
    return error;
};

const errorMap = (issue, _ctx) => {
    let message;
    switch (issue.code) {
        case ZodIssueCode.invalid_type:
            if (issue.received === ZodParsedType.undefined) {
                message = "Required";
            }
            else {
                message = `Expected ${issue.expected}, received ${issue.received}`;
            }
            break;
        case ZodIssueCode.invalid_literal:
            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util$8.jsonStringifyReplacer)}`;
            break;
        case ZodIssueCode.unrecognized_keys:
            message = `Unrecognized key(s) in object: ${util$8.joinValues(issue.keys, ", ")}`;
            break;
        case ZodIssueCode.invalid_union:
            message = `Invalid input`;
            break;
        case ZodIssueCode.invalid_union_discriminator:
            message = `Invalid discriminator value. Expected ${util$8.joinValues(issue.options)}`;
            break;
        case ZodIssueCode.invalid_enum_value:
            message = `Invalid enum value. Expected ${util$8.joinValues(issue.options)}, received '${issue.received}'`;
            break;
        case ZodIssueCode.invalid_arguments:
            message = `Invalid function arguments`;
            break;
        case ZodIssueCode.invalid_return_type:
            message = `Invalid function return type`;
            break;
        case ZodIssueCode.invalid_date:
            message = `Invalid date`;
            break;
        case ZodIssueCode.invalid_string:
            if (typeof issue.validation === "object") {
                if ("includes" in issue.validation) {
                    message = `Invalid input: must include "${issue.validation.includes}"`;
                    if (typeof issue.validation.position === "number") {
                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
                    }
                }
                else if ("startsWith" in issue.validation) {
                    message = `Invalid input: must start with "${issue.validation.startsWith}"`;
                }
                else if ("endsWith" in issue.validation) {
                    message = `Invalid input: must end with "${issue.validation.endsWith}"`;
                }
                else {
                    util$8.assertNever(issue.validation);
                }
            }
            else if (issue.validation !== "regex") {
                message = `Invalid ${issue.validation}`;
            }
            else {
                message = "Invalid";
            }
            break;
        case ZodIssueCode.too_small:
            if (issue.type === "array")
                message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
            else if (issue.type === "string")
                message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
            else if (issue.type === "number")
                message = `Number must be ${issue.exact
                    ? `exactly equal to `
                    : issue.inclusive
                        ? `greater than or equal to `
                        : `greater than `}${issue.minimum}`;
            else if (issue.type === "date")
                message = `Date must be ${issue.exact
                    ? `exactly equal to `
                    : issue.inclusive
                        ? `greater than or equal to `
                        : `greater than `}${new Date(Number(issue.minimum))}`;
            else
                message = "Invalid input";
            break;
        case ZodIssueCode.too_big:
            if (issue.type === "array")
                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
            else if (issue.type === "string")
                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
            else if (issue.type === "number")
                message = `Number must be ${issue.exact
                    ? `exactly`
                    : issue.inclusive
                        ? `less than or equal to`
                        : `less than`} ${issue.maximum}`;
            else if (issue.type === "bigint")
                message = `BigInt must be ${issue.exact
                    ? `exactly`
                    : issue.inclusive
                        ? `less than or equal to`
                        : `less than`} ${issue.maximum}`;
            else if (issue.type === "date")
                message = `Date must be ${issue.exact
                    ? `exactly`
                    : issue.inclusive
                        ? `smaller than or equal to`
                        : `smaller than`} ${new Date(Number(issue.maximum))}`;
            else
                message = "Invalid input";
            break;
        case ZodIssueCode.custom:
            message = `Invalid input`;
            break;
        case ZodIssueCode.invalid_intersection_types:
            message = `Intersection results could not be merged`;
            break;
        case ZodIssueCode.not_multiple_of:
            message = `Number must be a multiple of ${issue.multipleOf}`;
            break;
        case ZodIssueCode.not_finite:
            message = "Number must be finite";
            break;
        default:
            message = _ctx.defaultError;
            util$8.assertNever(issue);
    }
    return { message };
};

let overrideErrorMap = errorMap;
function setErrorMap(map) {
    overrideErrorMap = map;
}
function getErrorMap() {
    return overrideErrorMap;
}

const makeIssue = (params) => {
    const { data, path, errorMaps, issueData } = params;
    const fullPath = [...path, ...(issueData.path || [])];
    const fullIssue = {
        ...issueData,
        path: fullPath,
    };
    if (issueData.message !== undefined) {
        return {
            ...issueData,
            path: fullPath,
            message: issueData.message,
        };
    }
    let errorMessage = "";
    const maps = errorMaps
        .filter((m) => !!m)
        .slice()
        .reverse();
    for (const map of maps) {
        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
    }
    return {
        ...issueData,
        path: fullPath,
        message: errorMessage,
    };
};
const EMPTY_PATH = [];
function addIssueToContext(ctx, issueData) {
    const overrideMap = getErrorMap();
    const issue = makeIssue({
        issueData: issueData,
        data: ctx.data,
        path: ctx.path,
        errorMaps: [
            ctx.common.contextualErrorMap,
            ctx.schemaErrorMap,
            overrideMap,
            overrideMap === errorMap ? undefined : errorMap, // then global default map
        ].filter((x) => !!x),
    });
    ctx.common.issues.push(issue);
}
class ParseStatus {
    constructor() {
        this.value = "valid";
    }
    dirty() {
        if (this.value === "valid")
            this.value = "dirty";
    }
    abort() {
        if (this.value !== "aborted")
            this.value = "aborted";
    }
    static mergeArray(status, results) {
        const arrayValue = [];
        for (const s of results) {
            if (s.status === "aborted")
                return INVALID;
            if (s.status === "dirty")
                status.dirty();
            arrayValue.push(s.value);
        }
        return { status: status.value, value: arrayValue };
    }
    static async mergeObjectAsync(status, pairs) {
        const syncPairs = [];
        for (const pair of pairs) {
            const key = await pair.key;
            const value = await pair.value;
            syncPairs.push({
                key,
                value,
            });
        }
        return ParseStatus.mergeObjectSync(status, syncPairs);
    }
    static mergeObjectSync(status, pairs) {
        const finalObject = {};
        for (const pair of pairs) {
            const { key, value } = pair;
            if (key.status === "aborted")
                return INVALID;
            if (value.status === "aborted")
                return INVALID;
            if (key.status === "dirty")
                status.dirty();
            if (value.status === "dirty")
                status.dirty();
            if (key.value !== "__proto__" &&
                (typeof value.value !== "undefined" || pair.alwaysSet)) {
                finalObject[key.value] = value.value;
            }
        }
        return { status: status.value, value: finalObject };
    }
}
const INVALID = Object.freeze({
    status: "aborted",
});
const DIRTY = (value) => ({ status: "dirty", value });
const OK = (value) => ({ status: "valid", value });
const isAborted = (x) => x.status === "aborted";
const isDirty = (x) => x.status === "dirty";
const isValid = (x) => x.status === "valid";
const isAsync = (x) => typeof Promise !== "undefined" && x instanceof Promise;

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __classPrivateFieldGet$1(receiver, state, kind, f) {
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return state.get(receiver);
}

function __classPrivateFieldSet$1(receiver, state, value, kind, f) {
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (state.set(receiver, value)), value;
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

var errorUtil;
(function (errorUtil) {
    errorUtil.errToObj = (message) => typeof message === "string" ? { message } : message || {};
    errorUtil.toString = (message) => typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
})(errorUtil || (errorUtil = {}));

var _ZodEnum_cache, _ZodNativeEnum_cache;
class ParseInputLazyPath {
    constructor(parent, value, path, key) {
        this._cachedPath = [];
        this.parent = parent;
        this.data = value;
        this._path = path;
        this._key = key;
    }
    get path() {
        if (!this._cachedPath.length) {
            if (this._key instanceof Array) {
                this._cachedPath.push(...this._path, ...this._key);
            }
            else {
                this._cachedPath.push(...this._path, this._key);
            }
        }
        return this._cachedPath;
    }
}
const handleResult = (ctx, result) => {
    if (isValid(result)) {
        return { success: true, data: result.value };
    }
    else {
        if (!ctx.common.issues.length) {
            throw new Error("Validation failed but no issues detected.");
        }
        return {
            success: false,
            get error() {
                if (this._error)
                    return this._error;
                const error = new ZodError(ctx.common.issues);
                this._error = error;
                return this._error;
            },
        };
    }
};
function processCreateParams(params) {
    if (!params)
        return {};
    const { errorMap, invalid_type_error, required_error, description } = params;
    if (errorMap && (invalid_type_error || required_error)) {
        throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
    }
    if (errorMap)
        return { errorMap: errorMap, description };
    const customMap = (iss, ctx) => {
        var _a, _b;
        const { message } = params;
        if (iss.code === "invalid_enum_value") {
            return { message: message !== null && message !== void 0 ? message : ctx.defaultError };
        }
        if (typeof ctx.data === "undefined") {
            return { message: (_a = message !== null && message !== void 0 ? message : required_error) !== null && _a !== void 0 ? _a : ctx.defaultError };
        }
        if (iss.code !== "invalid_type")
            return { message: ctx.defaultError };
        return { message: (_b = message !== null && message !== void 0 ? message : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError };
    };
    return { errorMap: customMap, description };
}
class ZodType {
    constructor(def) {
        /** Alias of safeParseAsync */
        this.spa = this.safeParseAsync;
        this._def = def;
        this.parse = this.parse.bind(this);
        this.safeParse = this.safeParse.bind(this);
        this.parseAsync = this.parseAsync.bind(this);
        this.safeParseAsync = this.safeParseAsync.bind(this);
        this.spa = this.spa.bind(this);
        this.refine = this.refine.bind(this);
        this.refinement = this.refinement.bind(this);
        this.superRefine = this.superRefine.bind(this);
        this.optional = this.optional.bind(this);
        this.nullable = this.nullable.bind(this);
        this.nullish = this.nullish.bind(this);
        this.array = this.array.bind(this);
        this.promise = this.promise.bind(this);
        this.or = this.or.bind(this);
        this.and = this.and.bind(this);
        this.transform = this.transform.bind(this);
        this.brand = this.brand.bind(this);
        this.default = this.default.bind(this);
        this.catch = this.catch.bind(this);
        this.describe = this.describe.bind(this);
        this.pipe = this.pipe.bind(this);
        this.readonly = this.readonly.bind(this);
        this.isNullable = this.isNullable.bind(this);
        this.isOptional = this.isOptional.bind(this);
    }
    get description() {
        return this._def.description;
    }
    _getType(input) {
        return getParsedType(input.data);
    }
    _getOrReturnCtx(input, ctx) {
        return (ctx || {
            common: input.parent.common,
            data: input.data,
            parsedType: getParsedType(input.data),
            schemaErrorMap: this._def.errorMap,
            path: input.path,
            parent: input.parent,
        });
    }
    _processInputParams(input) {
        return {
            status: new ParseStatus(),
            ctx: {
                common: input.parent.common,
                data: input.data,
                parsedType: getParsedType(input.data),
                schemaErrorMap: this._def.errorMap,
                path: input.path,
                parent: input.parent,
            },
        };
    }
    _parseSync(input) {
        const result = this._parse(input);
        if (isAsync(result)) {
            throw new Error("Synchronous parse encountered promise.");
        }
        return result;
    }
    _parseAsync(input) {
        const result = this._parse(input);
        return Promise.resolve(result);
    }
    parse(data, params) {
        const result = this.safeParse(data, params);
        if (result.success)
            return result.data;
        throw result.error;
    }
    safeParse(data, params) {
        var _a;
        const ctx = {
            common: {
                issues: [],
                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,
                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
            },
            path: (params === null || params === void 0 ? void 0 : params.path) || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: getParsedType(data),
        };
        const result = this._parseSync({ data, path: ctx.path, parent: ctx });
        return handleResult(ctx, result);
    }
    async parseAsync(data, params) {
        const result = await this.safeParseAsync(data, params);
        if (result.success)
            return result.data;
        throw result.error;
    }
    async safeParseAsync(data, params) {
        const ctx = {
            common: {
                issues: [],
                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
                async: true,
            },
            path: (params === null || params === void 0 ? void 0 : params.path) || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: getParsedType(data),
        };
        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
        const result = await (isAsync(maybeAsyncResult)
            ? maybeAsyncResult
            : Promise.resolve(maybeAsyncResult));
        return handleResult(ctx, result);
    }
    refine(check, message) {
        const getIssueProperties = (val) => {
            if (typeof message === "string" || typeof message === "undefined") {
                return { message };
            }
            else if (typeof message === "function") {
                return message(val);
            }
            else {
                return message;
            }
        };
        return this._refinement((val, ctx) => {
            const result = check(val);
            const setError = () => ctx.addIssue({
                code: ZodIssueCode.custom,
                ...getIssueProperties(val),
            });
            if (typeof Promise !== "undefined" && result instanceof Promise) {
                return result.then((data) => {
                    if (!data) {
                        setError();
                        return false;
                    }
                    else {
                        return true;
                    }
                });
            }
            if (!result) {
                setError();
                return false;
            }
            else {
                return true;
            }
        });
    }
    refinement(check, refinementData) {
        return this._refinement((val, ctx) => {
            if (!check(val)) {
                ctx.addIssue(typeof refinementData === "function"
                    ? refinementData(val, ctx)
                    : refinementData);
                return false;
            }
            else {
                return true;
            }
        });
    }
    _refinement(refinement) {
        return new ZodEffects({
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: { type: "refinement", refinement },
        });
    }
    superRefine(refinement) {
        return this._refinement(refinement);
    }
    optional() {
        return ZodOptional.create(this, this._def);
    }
    nullable() {
        return ZodNullable.create(this, this._def);
    }
    nullish() {
        return this.nullable().optional();
    }
    array() {
        return ZodArray.create(this, this._def);
    }
    promise() {
        return ZodPromise.create(this, this._def);
    }
    or(option) {
        return ZodUnion.create([this, option], this._def);
    }
    and(incoming) {
        return ZodIntersection.create(this, incoming, this._def);
    }
    transform(transform) {
        return new ZodEffects({
            ...processCreateParams(this._def),
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: { type: "transform", transform },
        });
    }
    default(def) {
        const defaultValueFunc = typeof def === "function" ? def : () => def;
        return new ZodDefault({
            ...processCreateParams(this._def),
            innerType: this,
            defaultValue: defaultValueFunc,
            typeName: ZodFirstPartyTypeKind.ZodDefault,
        });
    }
    brand() {
        return new ZodBranded({
            typeName: ZodFirstPartyTypeKind.ZodBranded,
            type: this,
            ...processCreateParams(this._def),
        });
    }
    catch(def) {
        const catchValueFunc = typeof def === "function" ? def : () => def;
        return new ZodCatch({
            ...processCreateParams(this._def),
            innerType: this,
            catchValue: catchValueFunc,
            typeName: ZodFirstPartyTypeKind.ZodCatch,
        });
    }
    describe(description) {
        const This = this.constructor;
        return new This({
            ...this._def,
            description,
        });
    }
    pipe(target) {
        return ZodPipeline.create(this, target);
    }
    readonly() {
        return ZodReadonly.create(this);
    }
    isOptional() {
        return this.safeParse(undefined).success;
    }
    isNullable() {
        return this.safeParse(null).success;
    }
}
const cuidRegex = /^c[^\s-]{8,}$/i;
const cuid2Regex = /^[0-9a-z]+$/;
const ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/;
// const uuidRegex =
//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;
const uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
const nanoidRegex = /^[a-z0-9_-]{21}$/i;
const durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
// from https://stackoverflow.com/a/46181/1550155
// old version: too slow, didn't support unicode
// const emailRegex = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i;
//old email regex
// const emailRegex = /^(([^<>()[\].,;:\s@"]+(\.[^<>()[\].,;:\s@"]+)*)|(".+"))@((?!-)([^<>()[\].,;:\s@"]+\.)+[^<>()[\].,;:\s@"]{1,})[^-<>()[\].,;:\s@"]$/i;
// eslint-disable-next-line
// const emailRegex =
//   /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\])|(\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\.[A-Za-z]{2,})+))$/;
// const emailRegex =
//   /^[a-zA-Z0-9\.\!\#\$\%\&\'\*\+\/\=\?\^\_\`\{\|\}\~\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
// const emailRegex =
//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])$/i;
const emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
// const emailRegex =
//   /^[a-z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\.[a-z0-9\-]+)*$/i;
// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression
const _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
let emojiRegex;
// faster, simpler, safer
const ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
const ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;
// https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript
const base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
// simple
// const dateRegexSource = `\\d{4}-\\d{2}-\\d{2}`;
// no leap year validation
// const dateRegexSource = `\\d{4}-((0[13578]|10|12)-31|(0[13-9]|1[0-2])-30|(0[1-9]|1[0-2])-(0[1-9]|1\\d|2\\d))`;
// with leap year validation
const dateRegexSource = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`;
const dateRegex = new RegExp(`^${dateRegexSource}$`);
function timeRegexSource(args) {
    // let regex = `\\d{2}:\\d{2}:\\d{2}`;
    let regex = `([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d`;
    if (args.precision) {
        regex = `${regex}\\.\\d{${args.precision}}`;
    }
    else if (args.precision == null) {
        regex = `${regex}(\\.\\d+)?`;
    }
    return regex;
}
function timeRegex(args) {
    return new RegExp(`^${timeRegexSource(args)}$`);
}
// Adapted from https://stackoverflow.com/a/3143231
function datetimeRegex(args) {
    let regex = `${dateRegexSource}T${timeRegexSource(args)}`;
    const opts = [];
    opts.push(args.local ? `Z?` : `Z`);
    if (args.offset)
        opts.push(`([+-]\\d{2}:?\\d{2})`);
    regex = `${regex}(${opts.join("|")})`;
    return new RegExp(`^${regex}$`);
}
function isValidIP(ip, version) {
    if ((version === "v4" || !version) && ipv4Regex.test(ip)) {
        return true;
    }
    if ((version === "v6" || !version) && ipv6Regex.test(ip)) {
        return true;
    }
    return false;
}
class ZodString extends ZodType {
    _parse(input) {
        if (this._def.coerce) {
            input.data = String(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.string) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.string,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const status = new ParseStatus();
        let ctx = undefined;
        for (const check of this._def.checks) {
            if (check.kind === "min") {
                if (input.data.length < check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        minimum: check.value,
                        type: "string",
                        inclusive: true,
                        exact: false,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "max") {
                if (input.data.length > check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        maximum: check.value,
                        type: "string",
                        inclusive: true,
                        exact: false,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "length") {
                const tooBig = input.data.length > check.value;
                const tooSmall = input.data.length < check.value;
                if (tooBig || tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    if (tooBig) {
                        addIssueToContext(ctx, {
                            code: ZodIssueCode.too_big,
                            maximum: check.value,
                            type: "string",
                            inclusive: true,
                            exact: true,
                            message: check.message,
                        });
                    }
                    else if (tooSmall) {
                        addIssueToContext(ctx, {
                            code: ZodIssueCode.too_small,
                            minimum: check.value,
                            type: "string",
                            inclusive: true,
                            exact: true,
                            message: check.message,
                        });
                    }
                    status.dirty();
                }
            }
            else if (check.kind === "email") {
                if (!emailRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "email",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "emoji") {
                if (!emojiRegex) {
                    emojiRegex = new RegExp(_emojiRegex, "u");
                }
                if (!emojiRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "emoji",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "uuid") {
                if (!uuidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "uuid",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "nanoid") {
                if (!nanoidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "nanoid",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "cuid") {
                if (!cuidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "cuid",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "cuid2") {
                if (!cuid2Regex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "cuid2",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "ulid") {
                if (!ulidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "ulid",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "url") {
                try {
                    new URL(input.data);
                }
                catch (_a) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "url",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "regex") {
                check.regex.lastIndex = 0;
                const testResult = check.regex.test(input.data);
                if (!testResult) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "regex",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "trim") {
                input.data = input.data.trim();
            }
            else if (check.kind === "includes") {
                if (!input.data.includes(check.value, check.position)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: { includes: check.value, position: check.position },
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "toLowerCase") {
                input.data = input.data.toLowerCase();
            }
            else if (check.kind === "toUpperCase") {
                input.data = input.data.toUpperCase();
            }
            else if (check.kind === "startsWith") {
                if (!input.data.startsWith(check.value)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: { startsWith: check.value },
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "endsWith") {
                if (!input.data.endsWith(check.value)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: { endsWith: check.value },
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "datetime") {
                const regex = datetimeRegex(check);
                if (!regex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: "datetime",
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "date") {
                const regex = dateRegex;
                if (!regex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: "date",
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "time") {
                const regex = timeRegex(check);
                if (!regex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: "time",
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "duration") {
                if (!durationRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "duration",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "ip") {
                if (!isValidIP(input.data, check.version)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "ip",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "base64") {
                if (!base64Regex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "base64",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else {
                util$8.assertNever(check);
            }
        }
        return { status: status.value, value: input.data };
    }
    _regex(regex, validation, message) {
        return this.refinement((data) => regex.test(data), {
            validation,
            code: ZodIssueCode.invalid_string,
            ...errorUtil.errToObj(message),
        });
    }
    _addCheck(check) {
        return new ZodString({
            ...this._def,
            checks: [...this._def.checks, check],
        });
    }
    email(message) {
        return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
    }
    url(message) {
        return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
    }
    emoji(message) {
        return this._addCheck({ kind: "emoji", ...errorUtil.errToObj(message) });
    }
    uuid(message) {
        return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
    }
    nanoid(message) {
        return this._addCheck({ kind: "nanoid", ...errorUtil.errToObj(message) });
    }
    cuid(message) {
        return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
    }
    cuid2(message) {
        return this._addCheck({ kind: "cuid2", ...errorUtil.errToObj(message) });
    }
    ulid(message) {
        return this._addCheck({ kind: "ulid", ...errorUtil.errToObj(message) });
    }
    base64(message) {
        return this._addCheck({ kind: "base64", ...errorUtil.errToObj(message) });
    }
    ip(options) {
        return this._addCheck({ kind: "ip", ...errorUtil.errToObj(options) });
    }
    datetime(options) {
        var _a, _b;
        if (typeof options === "string") {
            return this._addCheck({
                kind: "datetime",
                precision: null,
                offset: false,
                local: false,
                message: options,
            });
        }
        return this._addCheck({
            kind: "datetime",
            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
            offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,
            local: (_b = options === null || options === void 0 ? void 0 : options.local) !== null && _b !== void 0 ? _b : false,
            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),
        });
    }
    date(message) {
        return this._addCheck({ kind: "date", message });
    }
    time(options) {
        if (typeof options === "string") {
            return this._addCheck({
                kind: "time",
                precision: null,
                message: options,
            });
        }
        return this._addCheck({
            kind: "time",
            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),
        });
    }
    duration(message) {
        return this._addCheck({ kind: "duration", ...errorUtil.errToObj(message) });
    }
    regex(regex, message) {
        return this._addCheck({
            kind: "regex",
            regex: regex,
            ...errorUtil.errToObj(message),
        });
    }
    includes(value, options) {
        return this._addCheck({
            kind: "includes",
            value: value,
            position: options === null || options === void 0 ? void 0 : options.position,
            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),
        });
    }
    startsWith(value, message) {
        return this._addCheck({
            kind: "startsWith",
            value: value,
            ...errorUtil.errToObj(message),
        });
    }
    endsWith(value, message) {
        return this._addCheck({
            kind: "endsWith",
            value: value,
            ...errorUtil.errToObj(message),
        });
    }
    min(minLength, message) {
        return this._addCheck({
            kind: "min",
            value: minLength,
            ...errorUtil.errToObj(message),
        });
    }
    max(maxLength, message) {
        return this._addCheck({
            kind: "max",
            value: maxLength,
            ...errorUtil.errToObj(message),
        });
    }
    length(len, message) {
        return this._addCheck({
            kind: "length",
            value: len,
            ...errorUtil.errToObj(message),
        });
    }
    /**
     * @deprecated Use z.string().min(1) instead.
     * @see {@link ZodString.min}
     */
    nonempty(message) {
        return this.min(1, errorUtil.errToObj(message));
    }
    trim() {
        return new ZodString({
            ...this._def,
            checks: [...this._def.checks, { kind: "trim" }],
        });
    }
    toLowerCase() {
        return new ZodString({
            ...this._def,
            checks: [...this._def.checks, { kind: "toLowerCase" }],
        });
    }
    toUpperCase() {
        return new ZodString({
            ...this._def,
            checks: [...this._def.checks, { kind: "toUpperCase" }],
        });
    }
    get isDatetime() {
        return !!this._def.checks.find((ch) => ch.kind === "datetime");
    }
    get isDate() {
        return !!this._def.checks.find((ch) => ch.kind === "date");
    }
    get isTime() {
        return !!this._def.checks.find((ch) => ch.kind === "time");
    }
    get isDuration() {
        return !!this._def.checks.find((ch) => ch.kind === "duration");
    }
    get isEmail() {
        return !!this._def.checks.find((ch) => ch.kind === "email");
    }
    get isURL() {
        return !!this._def.checks.find((ch) => ch.kind === "url");
    }
    get isEmoji() {
        return !!this._def.checks.find((ch) => ch.kind === "emoji");
    }
    get isUUID() {
        return !!this._def.checks.find((ch) => ch.kind === "uuid");
    }
    get isNANOID() {
        return !!this._def.checks.find((ch) => ch.kind === "nanoid");
    }
    get isCUID() {
        return !!this._def.checks.find((ch) => ch.kind === "cuid");
    }
    get isCUID2() {
        return !!this._def.checks.find((ch) => ch.kind === "cuid2");
    }
    get isULID() {
        return !!this._def.checks.find((ch) => ch.kind === "ulid");
    }
    get isIP() {
        return !!this._def.checks.find((ch) => ch.kind === "ip");
    }
    get isBase64() {
        return !!this._def.checks.find((ch) => ch.kind === "base64");
    }
    get minLength() {
        let min = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "min") {
                if (min === null || ch.value > min)
                    min = ch.value;
            }
        }
        return min;
    }
    get maxLength() {
        let max = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "max") {
                if (max === null || ch.value < max)
                    max = ch.value;
            }
        }
        return max;
    }
}
ZodString.create = (params) => {
    var _a;
    return new ZodString({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodString,
        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
        ...processCreateParams(params),
    });
};
// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034
function floatSafeRemainder(val, step) {
    const valDecCount = (val.toString().split(".")[1] || "").length;
    const stepDecCount = (step.toString().split(".")[1] || "").length;
    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
    const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
    const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
    return (valInt % stepInt) / Math.pow(10, decCount);
}
class ZodNumber extends ZodType {
    constructor() {
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
        this.step = this.multipleOf;
    }
    _parse(input) {
        if (this._def.coerce) {
            input.data = Number(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.number) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.number,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        let ctx = undefined;
        const status = new ParseStatus();
        for (const check of this._def.checks) {
            if (check.kind === "int") {
                if (!util$8.isInteger(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_type,
                        expected: "integer",
                        received: "float",
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "min") {
                const tooSmall = check.inclusive
                    ? input.data < check.value
                    : input.data <= check.value;
                if (tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        minimum: check.value,
                        type: "number",
                        inclusive: check.inclusive,
                        exact: false,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "max") {
                const tooBig = check.inclusive
                    ? input.data > check.value
                    : input.data >= check.value;
                if (tooBig) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        maximum: check.value,
                        type: "number",
                        inclusive: check.inclusive,
                        exact: false,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "multipleOf") {
                if (floatSafeRemainder(input.data, check.value) !== 0) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.not_multiple_of,
                        multipleOf: check.value,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "finite") {
                if (!Number.isFinite(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.not_finite,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else {
                util$8.assertNever(check);
            }
        }
        return { status: status.value, value: input.data };
    }
    gte(value, message) {
        return this.setLimit("min", value, true, errorUtil.toString(message));
    }
    gt(value, message) {
        return this.setLimit("min", value, false, errorUtil.toString(message));
    }
    lte(value, message) {
        return this.setLimit("max", value, true, errorUtil.toString(message));
    }
    lt(value, message) {
        return this.setLimit("max", value, false, errorUtil.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
        return new ZodNumber({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind,
                    value,
                    inclusive,
                    message: errorUtil.toString(message),
                },
            ],
        });
    }
    _addCheck(check) {
        return new ZodNumber({
            ...this._def,
            checks: [...this._def.checks, check],
        });
    }
    int(message) {
        return this._addCheck({
            kind: "int",
            message: errorUtil.toString(message),
        });
    }
    positive(message) {
        return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: false,
            message: errorUtil.toString(message),
        });
    }
    negative(message) {
        return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: false,
            message: errorUtil.toString(message),
        });
    }
    nonpositive(message) {
        return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: true,
            message: errorUtil.toString(message),
        });
    }
    nonnegative(message) {
        return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: true,
            message: errorUtil.toString(message),
        });
    }
    multipleOf(value, message) {
        return this._addCheck({
            kind: "multipleOf",
            value: value,
            message: errorUtil.toString(message),
        });
    }
    finite(message) {
        return this._addCheck({
            kind: "finite",
            message: errorUtil.toString(message),
        });
    }
    safe(message) {
        return this._addCheck({
            kind: "min",
            inclusive: true,
            value: Number.MIN_SAFE_INTEGER,
            message: errorUtil.toString(message),
        })._addCheck({
            kind: "max",
            inclusive: true,
            value: Number.MAX_SAFE_INTEGER,
            message: errorUtil.toString(message),
        });
    }
    get minValue() {
        let min = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "min") {
                if (min === null || ch.value > min)
                    min = ch.value;
            }
        }
        return min;
    }
    get maxValue() {
        let max = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "max") {
                if (max === null || ch.value < max)
                    max = ch.value;
            }
        }
        return max;
    }
    get isInt() {
        return !!this._def.checks.find((ch) => ch.kind === "int" ||
            (ch.kind === "multipleOf" && util$8.isInteger(ch.value)));
    }
    get isFinite() {
        let max = null, min = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "finite" ||
                ch.kind === "int" ||
                ch.kind === "multipleOf") {
                return true;
            }
            else if (ch.kind === "min") {
                if (min === null || ch.value > min)
                    min = ch.value;
            }
            else if (ch.kind === "max") {
                if (max === null || ch.value < max)
                    max = ch.value;
            }
        }
        return Number.isFinite(min) && Number.isFinite(max);
    }
}
ZodNumber.create = (params) => {
    return new ZodNumber({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodNumber,
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        ...processCreateParams(params),
    });
};
class ZodBigInt extends ZodType {
    constructor() {
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
    }
    _parse(input) {
        if (this._def.coerce) {
            input.data = BigInt(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.bigint) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.bigint,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        let ctx = undefined;
        const status = new ParseStatus();
        for (const check of this._def.checks) {
            if (check.kind === "min") {
                const tooSmall = check.inclusive
                    ? input.data < check.value
                    : input.data <= check.value;
                if (tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        type: "bigint",
                        minimum: check.value,
                        inclusive: check.inclusive,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "max") {
                const tooBig = check.inclusive
                    ? input.data > check.value
                    : input.data >= check.value;
                if (tooBig) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        type: "bigint",
                        maximum: check.value,
                        inclusive: check.inclusive,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "multipleOf") {
                if (input.data % check.value !== BigInt(0)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.not_multiple_of,
                        multipleOf: check.value,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else {
                util$8.assertNever(check);
            }
        }
        return { status: status.value, value: input.data };
    }
    gte(value, message) {
        return this.setLimit("min", value, true, errorUtil.toString(message));
    }
    gt(value, message) {
        return this.setLimit("min", value, false, errorUtil.toString(message));
    }
    lte(value, message) {
        return this.setLimit("max", value, true, errorUtil.toString(message));
    }
    lt(value, message) {
        return this.setLimit("max", value, false, errorUtil.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
        return new ZodBigInt({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind,
                    value,
                    inclusive,
                    message: errorUtil.toString(message),
                },
            ],
        });
    }
    _addCheck(check) {
        return new ZodBigInt({
            ...this._def,
            checks: [...this._def.checks, check],
        });
    }
    positive(message) {
        return this._addCheck({
            kind: "min",
            value: BigInt(0),
            inclusive: false,
            message: errorUtil.toString(message),
        });
    }
    negative(message) {
        return this._addCheck({
            kind: "max",
            value: BigInt(0),
            inclusive: false,
            message: errorUtil.toString(message),
        });
    }
    nonpositive(message) {
        return this._addCheck({
            kind: "max",
            value: BigInt(0),
            inclusive: true,
            message: errorUtil.toString(message),
        });
    }
    nonnegative(message) {
        return this._addCheck({
            kind: "min",
            value: BigInt(0),
            inclusive: true,
            message: errorUtil.toString(message),
        });
    }
    multipleOf(value, message) {
        return this._addCheck({
            kind: "multipleOf",
            value,
            message: errorUtil.toString(message),
        });
    }
    get minValue() {
        let min = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "min") {
                if (min === null || ch.value > min)
                    min = ch.value;
            }
        }
        return min;
    }
    get maxValue() {
        let max = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "max") {
                if (max === null || ch.value < max)
                    max = ch.value;
            }
        }
        return max;
    }
}
ZodBigInt.create = (params) => {
    var _a;
    return new ZodBigInt({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodBigInt,
        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
        ...processCreateParams(params),
    });
};
class ZodBoolean extends ZodType {
    _parse(input) {
        if (this._def.coerce) {
            input.data = Boolean(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.boolean) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.boolean,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodBoolean.create = (params) => {
    return new ZodBoolean({
        typeName: ZodFirstPartyTypeKind.ZodBoolean,
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        ...processCreateParams(params),
    });
};
class ZodDate extends ZodType {
    _parse(input) {
        if (this._def.coerce) {
            input.data = new Date(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.date) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.date,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        if (isNaN(input.data.getTime())) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_date,
            });
            return INVALID;
        }
        const status = new ParseStatus();
        let ctx = undefined;
        for (const check of this._def.checks) {
            if (check.kind === "min") {
                if (input.data.getTime() < check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        message: check.message,
                        inclusive: true,
                        exact: false,
                        minimum: check.value,
                        type: "date",
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "max") {
                if (input.data.getTime() > check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        message: check.message,
                        inclusive: true,
                        exact: false,
                        maximum: check.value,
                        type: "date",
                    });
                    status.dirty();
                }
            }
            else {
                util$8.assertNever(check);
            }
        }
        return {
            status: status.value,
            value: new Date(input.data.getTime()),
        };
    }
    _addCheck(check) {
        return new ZodDate({
            ...this._def,
            checks: [...this._def.checks, check],
        });
    }
    min(minDate, message) {
        return this._addCheck({
            kind: "min",
            value: minDate.getTime(),
            message: errorUtil.toString(message),
        });
    }
    max(maxDate, message) {
        return this._addCheck({
            kind: "max",
            value: maxDate.getTime(),
            message: errorUtil.toString(message),
        });
    }
    get minDate() {
        let min = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "min") {
                if (min === null || ch.value > min)
                    min = ch.value;
            }
        }
        return min != null ? new Date(min) : null;
    }
    get maxDate() {
        let max = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "max") {
                if (max === null || ch.value < max)
                    max = ch.value;
            }
        }
        return max != null ? new Date(max) : null;
    }
}
ZodDate.create = (params) => {
    return new ZodDate({
        checks: [],
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        typeName: ZodFirstPartyTypeKind.ZodDate,
        ...processCreateParams(params),
    });
};
class ZodSymbol extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.symbol) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.symbol,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodSymbol.create = (params) => {
    return new ZodSymbol({
        typeName: ZodFirstPartyTypeKind.ZodSymbol,
        ...processCreateParams(params),
    });
};
class ZodUndefined extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.undefined) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.undefined,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodUndefined.create = (params) => {
    return new ZodUndefined({
        typeName: ZodFirstPartyTypeKind.ZodUndefined,
        ...processCreateParams(params),
    });
};
class ZodNull extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.null) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.null,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodNull.create = (params) => {
    return new ZodNull({
        typeName: ZodFirstPartyTypeKind.ZodNull,
        ...processCreateParams(params),
    });
};
class ZodAny extends ZodType {
    constructor() {
        super(...arguments);
        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.
        this._any = true;
    }
    _parse(input) {
        return OK(input.data);
    }
}
ZodAny.create = (params) => {
    return new ZodAny({
        typeName: ZodFirstPartyTypeKind.ZodAny,
        ...processCreateParams(params),
    });
};
class ZodUnknown extends ZodType {
    constructor() {
        super(...arguments);
        // required
        this._unknown = true;
    }
    _parse(input) {
        return OK(input.data);
    }
}
ZodUnknown.create = (params) => {
    return new ZodUnknown({
        typeName: ZodFirstPartyTypeKind.ZodUnknown,
        ...processCreateParams(params),
    });
};
class ZodNever extends ZodType {
    _parse(input) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.never,
            received: ctx.parsedType,
        });
        return INVALID;
    }
}
ZodNever.create = (params) => {
    return new ZodNever({
        typeName: ZodFirstPartyTypeKind.ZodNever,
        ...processCreateParams(params),
    });
};
class ZodVoid extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.undefined) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.void,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodVoid.create = (params) => {
    return new ZodVoid({
        typeName: ZodFirstPartyTypeKind.ZodVoid,
        ...processCreateParams(params),
    });
};
class ZodArray extends ZodType {
    _parse(input) {
        const { ctx, status } = this._processInputParams(input);
        const def = this._def;
        if (ctx.parsedType !== ZodParsedType.array) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.array,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        if (def.exactLength !== null) {
            const tooBig = ctx.data.length > def.exactLength.value;
            const tooSmall = ctx.data.length < def.exactLength.value;
            if (tooBig || tooSmall) {
                addIssueToContext(ctx, {
                    code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
                    minimum: (tooSmall ? def.exactLength.value : undefined),
                    maximum: (tooBig ? def.exactLength.value : undefined),
                    type: "array",
                    inclusive: true,
                    exact: true,
                    message: def.exactLength.message,
                });
                status.dirty();
            }
        }
        if (def.minLength !== null) {
            if (ctx.data.length < def.minLength.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_small,
                    minimum: def.minLength.value,
                    type: "array",
                    inclusive: true,
                    exact: false,
                    message: def.minLength.message,
                });
                status.dirty();
            }
        }
        if (def.maxLength !== null) {
            if (ctx.data.length > def.maxLength.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_big,
                    maximum: def.maxLength.value,
                    type: "array",
                    inclusive: true,
                    exact: false,
                    message: def.maxLength.message,
                });
                status.dirty();
            }
        }
        if (ctx.common.async) {
            return Promise.all([...ctx.data].map((item, i) => {
                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
            })).then((result) => {
                return ParseStatus.mergeArray(status, result);
            });
        }
        const result = [...ctx.data].map((item, i) => {
            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
        });
        return ParseStatus.mergeArray(status, result);
    }
    get element() {
        return this._def.type;
    }
    min(minLength, message) {
        return new ZodArray({
            ...this._def,
            minLength: { value: minLength, message: errorUtil.toString(message) },
        });
    }
    max(maxLength, message) {
        return new ZodArray({
            ...this._def,
            maxLength: { value: maxLength, message: errorUtil.toString(message) },
        });
    }
    length(len, message) {
        return new ZodArray({
            ...this._def,
            exactLength: { value: len, message: errorUtil.toString(message) },
        });
    }
    nonempty(message) {
        return this.min(1, message);
    }
}
ZodArray.create = (schema, params) => {
    return new ZodArray({
        type: schema,
        minLength: null,
        maxLength: null,
        exactLength: null,
        typeName: ZodFirstPartyTypeKind.ZodArray,
        ...processCreateParams(params),
    });
};
function deepPartialify(schema) {
    if (schema instanceof ZodObject) {
        const newShape = {};
        for (const key in schema.shape) {
            const fieldSchema = schema.shape[key];
            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
        }
        return new ZodObject({
            ...schema._def,
            shape: () => newShape,
        });
    }
    else if (schema instanceof ZodArray) {
        return new ZodArray({
            ...schema._def,
            type: deepPartialify(schema.element),
        });
    }
    else if (schema instanceof ZodOptional) {
        return ZodOptional.create(deepPartialify(schema.unwrap()));
    }
    else if (schema instanceof ZodNullable) {
        return ZodNullable.create(deepPartialify(schema.unwrap()));
    }
    else if (schema instanceof ZodTuple) {
        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
    }
    else {
        return schema;
    }
}
class ZodObject extends ZodType {
    constructor() {
        super(...arguments);
        this._cached = null;
        /**
         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.
         * If you want to pass through unknown properties, use `.passthrough()` instead.
         */
        this.nonstrict = this.passthrough;
        // extend<
        //   Augmentation extends ZodRawShape,
        //   NewOutput extends util.flatten<{
        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
        //       ? Augmentation[k]["_output"]
        //       : k extends keyof Output
        //       ? Output[k]
        //       : never;
        //   }>,
        //   NewInput extends util.flatten<{
        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
        //       ? Augmentation[k]["_input"]
        //       : k extends keyof Input
        //       ? Input[k]
        //       : never;
        //   }>
        // >(
        //   augmentation: Augmentation
        // ): ZodObject<
        //   extendShape<T, Augmentation>,
        //   UnknownKeys,
        //   Catchall,
        //   NewOutput,
        //   NewInput
        // > {
        //   return new ZodObject({
        //     ...this._def,
        //     shape: () => ({
        //       ...this._def.shape(),
        //       ...augmentation,
        //     }),
        //   }) as any;
        // }
        /**
         * @deprecated Use `.extend` instead
         *  */
        this.augment = this.extend;
    }
    _getCached() {
        if (this._cached !== null)
            return this._cached;
        const shape = this._def.shape();
        const keys = util$8.objectKeys(shape);
        return (this._cached = { shape, keys });
    }
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.object) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.object,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const { status, ctx } = this._processInputParams(input);
        const { shape, keys: shapeKeys } = this._getCached();
        const extraKeys = [];
        if (!(this._def.catchall instanceof ZodNever &&
            this._def.unknownKeys === "strip")) {
            for (const key in ctx.data) {
                if (!shapeKeys.includes(key)) {
                    extraKeys.push(key);
                }
            }
        }
        const pairs = [];
        for (const key of shapeKeys) {
            const keyValidator = shape[key];
            const value = ctx.data[key];
            pairs.push({
                key: { status: "valid", value: key },
                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
                alwaysSet: key in ctx.data,
            });
        }
        if (this._def.catchall instanceof ZodNever) {
            const unknownKeys = this._def.unknownKeys;
            if (unknownKeys === "passthrough") {
                for (const key of extraKeys) {
                    pairs.push({
                        key: { status: "valid", value: key },
                        value: { status: "valid", value: ctx.data[key] },
                    });
                }
            }
            else if (unknownKeys === "strict") {
                if (extraKeys.length > 0) {
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.unrecognized_keys,
                        keys: extraKeys,
                    });
                    status.dirty();
                }
            }
            else if (unknownKeys === "strip") ;
            else {
                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
            }
        }
        else {
            // run catchall validation
            const catchall = this._def.catchall;
            for (const key of extraKeys) {
                const value = ctx.data[key];
                pairs.push({
                    key: { status: "valid", value: key },
                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)
                    ),
                    alwaysSet: key in ctx.data,
                });
            }
        }
        if (ctx.common.async) {
            return Promise.resolve()
                .then(async () => {
                const syncPairs = [];
                for (const pair of pairs) {
                    const key = await pair.key;
                    const value = await pair.value;
                    syncPairs.push({
                        key,
                        value,
                        alwaysSet: pair.alwaysSet,
                    });
                }
                return syncPairs;
            })
                .then((syncPairs) => {
                return ParseStatus.mergeObjectSync(status, syncPairs);
            });
        }
        else {
            return ParseStatus.mergeObjectSync(status, pairs);
        }
    }
    get shape() {
        return this._def.shape();
    }
    strict(message) {
        errorUtil.errToObj;
        return new ZodObject({
            ...this._def,
            unknownKeys: "strict",
            ...(message !== undefined
                ? {
                    errorMap: (issue, ctx) => {
                        var _a, _b, _c, _d;
                        const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
                        if (issue.code === "unrecognized_keys")
                            return {
                                message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError,
                            };
                        return {
                            message: defaultError,
                        };
                    },
                }
                : {}),
        });
    }
    strip() {
        return new ZodObject({
            ...this._def,
            unknownKeys: "strip",
        });
    }
    passthrough() {
        return new ZodObject({
            ...this._def,
            unknownKeys: "passthrough",
        });
    }
    // const AugmentFactory =
    //   <Def extends ZodObjectDef>(def: Def) =>
    //   <Augmentation extends ZodRawShape>(
    //     augmentation: Augmentation
    //   ): ZodObject<
    //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
    //     Def["unknownKeys"],
    //     Def["catchall"]
    //   > => {
    //     return new ZodObject({
    //       ...def,
    //       shape: () => ({
    //         ...def.shape(),
    //         ...augmentation,
    //       }),
    //     }) as any;
    //   };
    extend(augmentation) {
        return new ZodObject({
            ...this._def,
            shape: () => ({
                ...this._def.shape(),
                ...augmentation,
            }),
        });
    }
    /**
     * Prior to zod@1.0.12 there was a bug in the
     * inferred type of merged objects. Please
     * upgrade if you are experiencing issues.
     */
    merge(merging) {
        const merged = new ZodObject({
            unknownKeys: merging._def.unknownKeys,
            catchall: merging._def.catchall,
            shape: () => ({
                ...this._def.shape(),
                ...merging._def.shape(),
            }),
            typeName: ZodFirstPartyTypeKind.ZodObject,
        });
        return merged;
    }
    // merge<
    //   Incoming extends AnyZodObject,
    //   Augmentation extends Incoming["shape"],
    //   NewOutput extends {
    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
    //       ? Augmentation[k]["_output"]
    //       : k extends keyof Output
    //       ? Output[k]
    //       : never;
    //   },
    //   NewInput extends {
    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
    //       ? Augmentation[k]["_input"]
    //       : k extends keyof Input
    //       ? Input[k]
    //       : never;
    //   }
    // >(
    //   merging: Incoming
    // ): ZodObject<
    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
    //   Incoming["_def"]["unknownKeys"],
    //   Incoming["_def"]["catchall"],
    //   NewOutput,
    //   NewInput
    // > {
    //   const merged: any = new ZodObject({
    //     unknownKeys: merging._def.unknownKeys,
    //     catchall: merging._def.catchall,
    //     shape: () =>
    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
    //     typeName: ZodFirstPartyTypeKind.ZodObject,
    //   }) as any;
    //   return merged;
    // }
    setKey(key, schema) {
        return this.augment({ [key]: schema });
    }
    // merge<Incoming extends AnyZodObject>(
    //   merging: Incoming
    // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
    // ZodObject<
    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
    //   Incoming["_def"]["unknownKeys"],
    //   Incoming["_def"]["catchall"]
    // > {
    //   // const mergedShape = objectUtil.mergeShapes(
    //   //   this._def.shape(),
    //   //   merging._def.shape()
    //   // );
    //   const merged: any = new ZodObject({
    //     unknownKeys: merging._def.unknownKeys,
    //     catchall: merging._def.catchall,
    //     shape: () =>
    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
    //     typeName: ZodFirstPartyTypeKind.ZodObject,
    //   }) as any;
    //   return merged;
    // }
    catchall(index) {
        return new ZodObject({
            ...this._def,
            catchall: index,
        });
    }
    pick(mask) {
        const shape = {};
        util$8.objectKeys(mask).forEach((key) => {
            if (mask[key] && this.shape[key]) {
                shape[key] = this.shape[key];
            }
        });
        return new ZodObject({
            ...this._def,
            shape: () => shape,
        });
    }
    omit(mask) {
        const shape = {};
        util$8.objectKeys(this.shape).forEach((key) => {
            if (!mask[key]) {
                shape[key] = this.shape[key];
            }
        });
        return new ZodObject({
            ...this._def,
            shape: () => shape,
        });
    }
    /**
     * @deprecated
     */
    deepPartial() {
        return deepPartialify(this);
    }
    partial(mask) {
        const newShape = {};
        util$8.objectKeys(this.shape).forEach((key) => {
            const fieldSchema = this.shape[key];
            if (mask && !mask[key]) {
                newShape[key] = fieldSchema;
            }
            else {
                newShape[key] = fieldSchema.optional();
            }
        });
        return new ZodObject({
            ...this._def,
            shape: () => newShape,
        });
    }
    required(mask) {
        const newShape = {};
        util$8.objectKeys(this.shape).forEach((key) => {
            if (mask && !mask[key]) {
                newShape[key] = this.shape[key];
            }
            else {
                const fieldSchema = this.shape[key];
                let newField = fieldSchema;
                while (newField instanceof ZodOptional) {
                    newField = newField._def.innerType;
                }
                newShape[key] = newField;
            }
        });
        return new ZodObject({
            ...this._def,
            shape: () => newShape,
        });
    }
    keyof() {
        return createZodEnum(util$8.objectKeys(this.shape));
    }
}
ZodObject.create = (shape, params) => {
    return new ZodObject({
        shape: () => shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params),
    });
};
ZodObject.strictCreate = (shape, params) => {
    return new ZodObject({
        shape: () => shape,
        unknownKeys: "strict",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params),
    });
};
ZodObject.lazycreate = (shape, params) => {
    return new ZodObject({
        shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params),
    });
};
class ZodUnion extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        const options = this._def.options;
        function handleResults(results) {
            // return first issue-free validation if it exists
            for (const result of results) {
                if (result.result.status === "valid") {
                    return result.result;
                }
            }
            for (const result of results) {
                if (result.result.status === "dirty") {
                    // add issues from dirty option
                    ctx.common.issues.push(...result.ctx.common.issues);
                    return result.result;
                }
            }
            // return invalid
            const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_union,
                unionErrors,
            });
            return INVALID;
        }
        if (ctx.common.async) {
            return Promise.all(options.map(async (option) => {
                const childCtx = {
                    ...ctx,
                    common: {
                        ...ctx.common,
                        issues: [],
                    },
                    parent: null,
                };
                return {
                    result: await option._parseAsync({
                        data: ctx.data,
                        path: ctx.path,
                        parent: childCtx,
                    }),
                    ctx: childCtx,
                };
            })).then(handleResults);
        }
        else {
            let dirty = undefined;
            const issues = [];
            for (const option of options) {
                const childCtx = {
                    ...ctx,
                    common: {
                        ...ctx.common,
                        issues: [],
                    },
                    parent: null,
                };
                const result = option._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: childCtx,
                });
                if (result.status === "valid") {
                    return result;
                }
                else if (result.status === "dirty" && !dirty) {
                    dirty = { result, ctx: childCtx };
                }
                if (childCtx.common.issues.length) {
                    issues.push(childCtx.common.issues);
                }
            }
            if (dirty) {
                ctx.common.issues.push(...dirty.ctx.common.issues);
                return dirty.result;
            }
            const unionErrors = issues.map((issues) => new ZodError(issues));
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_union,
                unionErrors,
            });
            return INVALID;
        }
    }
    get options() {
        return this._def.options;
    }
}
ZodUnion.create = (types, params) => {
    return new ZodUnion({
        options: types,
        typeName: ZodFirstPartyTypeKind.ZodUnion,
        ...processCreateParams(params),
    });
};
/////////////////////////////////////////////////////
/////////////////////////////////////////////////////
//////////                                 //////////
//////////      ZodDiscriminatedUnion      //////////
//////////                                 //////////
/////////////////////////////////////////////////////
/////////////////////////////////////////////////////
const getDiscriminator = (type) => {
    if (type instanceof ZodLazy) {
        return getDiscriminator(type.schema);
    }
    else if (type instanceof ZodEffects) {
        return getDiscriminator(type.innerType());
    }
    else if (type instanceof ZodLiteral) {
        return [type.value];
    }
    else if (type instanceof ZodEnum) {
        return type.options;
    }
    else if (type instanceof ZodNativeEnum) {
        // eslint-disable-next-line ban/ban
        return util$8.objectValues(type.enum);
    }
    else if (type instanceof ZodDefault) {
        return getDiscriminator(type._def.innerType);
    }
    else if (type instanceof ZodUndefined) {
        return [undefined];
    }
    else if (type instanceof ZodNull) {
        return [null];
    }
    else if (type instanceof ZodOptional) {
        return [undefined, ...getDiscriminator(type.unwrap())];
    }
    else if (type instanceof ZodNullable) {
        return [null, ...getDiscriminator(type.unwrap())];
    }
    else if (type instanceof ZodBranded) {
        return getDiscriminator(type.unwrap());
    }
    else if (type instanceof ZodReadonly) {
        return getDiscriminator(type.unwrap());
    }
    else if (type instanceof ZodCatch) {
        return getDiscriminator(type._def.innerType);
    }
    else {
        return [];
    }
};
class ZodDiscriminatedUnion extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.object) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.object,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const discriminator = this.discriminator;
        const discriminatorValue = ctx.data[discriminator];
        const option = this.optionsMap.get(discriminatorValue);
        if (!option) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_union_discriminator,
                options: Array.from(this.optionsMap.keys()),
                path: [discriminator],
            });
            return INVALID;
        }
        if (ctx.common.async) {
            return option._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            });
        }
        else {
            return option._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            });
        }
    }
    get discriminator() {
        return this._def.discriminator;
    }
    get options() {
        return this._def.options;
    }
    get optionsMap() {
        return this._def.optionsMap;
    }
    /**
     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
     * have a different value for each object in the union.
     * @param discriminator the name of the discriminator property
     * @param types an array of object schemas
     * @param params
     */
    static create(discriminator, options, params) {
        // Get all the valid discriminator values
        const optionsMap = new Map();
        // try {
        for (const type of options) {
            const discriminatorValues = getDiscriminator(type.shape[discriminator]);
            if (!discriminatorValues.length) {
                throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
            }
            for (const value of discriminatorValues) {
                if (optionsMap.has(value)) {
                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
                }
                optionsMap.set(value, type);
            }
        }
        return new ZodDiscriminatedUnion({
            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
            discriminator,
            options,
            optionsMap,
            ...processCreateParams(params),
        });
    }
}
function mergeValues(a, b) {
    const aType = getParsedType(a);
    const bType = getParsedType(b);
    if (a === b) {
        return { valid: true, data: a };
    }
    else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
        const bKeys = util$8.objectKeys(b);
        const sharedKeys = util$8
            .objectKeys(a)
            .filter((key) => bKeys.indexOf(key) !== -1);
        const newObj = { ...a, ...b };
        for (const key of sharedKeys) {
            const sharedValue = mergeValues(a[key], b[key]);
            if (!sharedValue.valid) {
                return { valid: false };
            }
            newObj[key] = sharedValue.data;
        }
        return { valid: true, data: newObj };
    }
    else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
        if (a.length !== b.length) {
            return { valid: false };
        }
        const newArray = [];
        for (let index = 0; index < a.length; index++) {
            const itemA = a[index];
            const itemB = b[index];
            const sharedValue = mergeValues(itemA, itemB);
            if (!sharedValue.valid) {
                return { valid: false };
            }
            newArray.push(sharedValue.data);
        }
        return { valid: true, data: newArray };
    }
    else if (aType === ZodParsedType.date &&
        bType === ZodParsedType.date &&
        +a === +b) {
        return { valid: true, data: a };
    }
    else {
        return { valid: false };
    }
}
class ZodIntersection extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const handleParsed = (parsedLeft, parsedRight) => {
            if (isAborted(parsedLeft) || isAborted(parsedRight)) {
                return INVALID;
            }
            const merged = mergeValues(parsedLeft.value, parsedRight.value);
            if (!merged.valid) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.invalid_intersection_types,
                });
                return INVALID;
            }
            if (isDirty(parsedLeft) || isDirty(parsedRight)) {
                status.dirty();
            }
            return { status: status.value, value: merged.data };
        };
        if (ctx.common.async) {
            return Promise.all([
                this._def.left._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                }),
                this._def.right._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                }),
            ]).then(([left, right]) => handleParsed(left, right));
        }
        else {
            return handleParsed(this._def.left._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            }), this._def.right._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            }));
        }
    }
}
ZodIntersection.create = (left, right, params) => {
    return new ZodIntersection({
        left: left,
        right: right,
        typeName: ZodFirstPartyTypeKind.ZodIntersection,
        ...processCreateParams(params),
    });
};
class ZodTuple extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.array) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.array,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        if (ctx.data.length < this._def.items.length) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                minimum: this._def.items.length,
                inclusive: true,
                exact: false,
                type: "array",
            });
            return INVALID;
        }
        const rest = this._def.rest;
        if (!rest && ctx.data.length > this._def.items.length) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                maximum: this._def.items.length,
                inclusive: true,
                exact: false,
                type: "array",
            });
            status.dirty();
        }
        const items = [...ctx.data]
            .map((item, itemIndex) => {
            const schema = this._def.items[itemIndex] || this._def.rest;
            if (!schema)
                return null;
            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
        })
            .filter((x) => !!x); // filter nulls
        if (ctx.common.async) {
            return Promise.all(items).then((results) => {
                return ParseStatus.mergeArray(status, results);
            });
        }
        else {
            return ParseStatus.mergeArray(status, items);
        }
    }
    get items() {
        return this._def.items;
    }
    rest(rest) {
        return new ZodTuple({
            ...this._def,
            rest,
        });
    }
}
ZodTuple.create = (schemas, params) => {
    if (!Array.isArray(schemas)) {
        throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
    }
    return new ZodTuple({
        items: schemas,
        typeName: ZodFirstPartyTypeKind.ZodTuple,
        rest: null,
        ...processCreateParams(params),
    });
};
class ZodRecord extends ZodType {
    get keySchema() {
        return this._def.keyType;
    }
    get valueSchema() {
        return this._def.valueType;
    }
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.object) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.object,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const pairs = [];
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        for (const key in ctx.data) {
            pairs.push({
                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
                alwaysSet: key in ctx.data,
            });
        }
        if (ctx.common.async) {
            return ParseStatus.mergeObjectAsync(status, pairs);
        }
        else {
            return ParseStatus.mergeObjectSync(status, pairs);
        }
    }
    get element() {
        return this._def.valueType;
    }
    static create(first, second, third) {
        if (second instanceof ZodType) {
            return new ZodRecord({
                keyType: first,
                valueType: second,
                typeName: ZodFirstPartyTypeKind.ZodRecord,
                ...processCreateParams(third),
            });
        }
        return new ZodRecord({
            keyType: ZodString.create(),
            valueType: first,
            typeName: ZodFirstPartyTypeKind.ZodRecord,
            ...processCreateParams(second),
        });
    }
}
class ZodMap extends ZodType {
    get keySchema() {
        return this._def.keyType;
    }
    get valueSchema() {
        return this._def.valueType;
    }
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.map) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.map,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        const pairs = [...ctx.data.entries()].map(([key, value], index) => {
            return {
                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"])),
            };
        });
        if (ctx.common.async) {
            const finalMap = new Map();
            return Promise.resolve().then(async () => {
                for (const pair of pairs) {
                    const key = await pair.key;
                    const value = await pair.value;
                    if (key.status === "aborted" || value.status === "aborted") {
                        return INVALID;
                    }
                    if (key.status === "dirty" || value.status === "dirty") {
                        status.dirty();
                    }
                    finalMap.set(key.value, value.value);
                }
                return { status: status.value, value: finalMap };
            });
        }
        else {
            const finalMap = new Map();
            for (const pair of pairs) {
                const key = pair.key;
                const value = pair.value;
                if (key.status === "aborted" || value.status === "aborted") {
                    return INVALID;
                }
                if (key.status === "dirty" || value.status === "dirty") {
                    status.dirty();
                }
                finalMap.set(key.value, value.value);
            }
            return { status: status.value, value: finalMap };
        }
    }
}
ZodMap.create = (keyType, valueType, params) => {
    return new ZodMap({
        valueType,
        keyType,
        typeName: ZodFirstPartyTypeKind.ZodMap,
        ...processCreateParams(params),
    });
};
class ZodSet extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.set) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.set,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const def = this._def;
        if (def.minSize !== null) {
            if (ctx.data.size < def.minSize.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_small,
                    minimum: def.minSize.value,
                    type: "set",
                    inclusive: true,
                    exact: false,
                    message: def.minSize.message,
                });
                status.dirty();
            }
        }
        if (def.maxSize !== null) {
            if (ctx.data.size > def.maxSize.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_big,
                    maximum: def.maxSize.value,
                    type: "set",
                    inclusive: true,
                    exact: false,
                    message: def.maxSize.message,
                });
                status.dirty();
            }
        }
        const valueType = this._def.valueType;
        function finalizeSet(elements) {
            const parsedSet = new Set();
            for (const element of elements) {
                if (element.status === "aborted")
                    return INVALID;
                if (element.status === "dirty")
                    status.dirty();
                parsedSet.add(element.value);
            }
            return { status: status.value, value: parsedSet };
        }
        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
        if (ctx.common.async) {
            return Promise.all(elements).then((elements) => finalizeSet(elements));
        }
        else {
            return finalizeSet(elements);
        }
    }
    min(minSize, message) {
        return new ZodSet({
            ...this._def,
            minSize: { value: minSize, message: errorUtil.toString(message) },
        });
    }
    max(maxSize, message) {
        return new ZodSet({
            ...this._def,
            maxSize: { value: maxSize, message: errorUtil.toString(message) },
        });
    }
    size(size, message) {
        return this.min(size, message).max(size, message);
    }
    nonempty(message) {
        return this.min(1, message);
    }
}
ZodSet.create = (valueType, params) => {
    return new ZodSet({
        valueType,
        minSize: null,
        maxSize: null,
        typeName: ZodFirstPartyTypeKind.ZodSet,
        ...processCreateParams(params),
    });
};
class ZodFunction extends ZodType {
    constructor() {
        super(...arguments);
        this.validate = this.implement;
    }
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.function) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.function,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        function makeArgsIssue(args, error) {
            return makeIssue({
                data: args,
                path: ctx.path,
                errorMaps: [
                    ctx.common.contextualErrorMap,
                    ctx.schemaErrorMap,
                    getErrorMap(),
                    errorMap,
                ].filter((x) => !!x),
                issueData: {
                    code: ZodIssueCode.invalid_arguments,
                    argumentsError: error,
                },
            });
        }
        function makeReturnsIssue(returns, error) {
            return makeIssue({
                data: returns,
                path: ctx.path,
                errorMaps: [
                    ctx.common.contextualErrorMap,
                    ctx.schemaErrorMap,
                    getErrorMap(),
                    errorMap,
                ].filter((x) => !!x),
                issueData: {
                    code: ZodIssueCode.invalid_return_type,
                    returnTypeError: error,
                },
            });
        }
        const params = { errorMap: ctx.common.contextualErrorMap };
        const fn = ctx.data;
        if (this._def.returns instanceof ZodPromise) {
            // Would love a way to avoid disabling this rule, but we need
            // an alias (using an arrow function was what caused 2651).
            // eslint-disable-next-line @typescript-eslint/no-this-alias
            const me = this;
            return OK(async function (...args) {
                const error = new ZodError([]);
                const parsedArgs = await me._def.args
                    .parseAsync(args, params)
                    .catch((e) => {
                    error.addIssue(makeArgsIssue(args, e));
                    throw error;
                });
                const result = await Reflect.apply(fn, this, parsedArgs);
                const parsedReturns = await me._def.returns._def.type
                    .parseAsync(result, params)
                    .catch((e) => {
                    error.addIssue(makeReturnsIssue(result, e));
                    throw error;
                });
                return parsedReturns;
            });
        }
        else {
            // Would love a way to avoid disabling this rule, but we need
            // an alias (using an arrow function was what caused 2651).
            // eslint-disable-next-line @typescript-eslint/no-this-alias
            const me = this;
            return OK(function (...args) {
                const parsedArgs = me._def.args.safeParse(args, params);
                if (!parsedArgs.success) {
                    throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
                }
                const result = Reflect.apply(fn, this, parsedArgs.data);
                const parsedReturns = me._def.returns.safeParse(result, params);
                if (!parsedReturns.success) {
                    throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
                }
                return parsedReturns.data;
            });
        }
    }
    parameters() {
        return this._def.args;
    }
    returnType() {
        return this._def.returns;
    }
    args(...items) {
        return new ZodFunction({
            ...this._def,
            args: ZodTuple.create(items).rest(ZodUnknown.create()),
        });
    }
    returns(returnType) {
        return new ZodFunction({
            ...this._def,
            returns: returnType,
        });
    }
    implement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
    }
    strictImplement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
    }
    static create(args, returns, params) {
        return new ZodFunction({
            args: (args
                ? args
                : ZodTuple.create([]).rest(ZodUnknown.create())),
            returns: returns || ZodUnknown.create(),
            typeName: ZodFirstPartyTypeKind.ZodFunction,
            ...processCreateParams(params),
        });
    }
}
class ZodLazy extends ZodType {
    get schema() {
        return this._def.getter();
    }
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        const lazySchema = this._def.getter();
        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
    }
}
ZodLazy.create = (getter, params) => {
    return new ZodLazy({
        getter: getter,
        typeName: ZodFirstPartyTypeKind.ZodLazy,
        ...processCreateParams(params),
    });
};
class ZodLiteral extends ZodType {
    _parse(input) {
        if (input.data !== this._def.value) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                received: ctx.data,
                code: ZodIssueCode.invalid_literal,
                expected: this._def.value,
            });
            return INVALID;
        }
        return { status: "valid", value: input.data };
    }
    get value() {
        return this._def.value;
    }
}
ZodLiteral.create = (value, params) => {
    return new ZodLiteral({
        value: value,
        typeName: ZodFirstPartyTypeKind.ZodLiteral,
        ...processCreateParams(params),
    });
};
function createZodEnum(values, params) {
    return new ZodEnum({
        values,
        typeName: ZodFirstPartyTypeKind.ZodEnum,
        ...processCreateParams(params),
    });
}
class ZodEnum extends ZodType {
    constructor() {
        super(...arguments);
        _ZodEnum_cache.set(this, void 0);
    }
    _parse(input) {
        if (typeof input.data !== "string") {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            addIssueToContext(ctx, {
                expected: util$8.joinValues(expectedValues),
                received: ctx.parsedType,
                code: ZodIssueCode.invalid_type,
            });
            return INVALID;
        }
        if (!__classPrivateFieldGet$1(this, _ZodEnum_cache)) {
            __classPrivateFieldSet$1(this, _ZodEnum_cache, new Set(this._def.values));
        }
        if (!__classPrivateFieldGet$1(this, _ZodEnum_cache).has(input.data)) {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            addIssueToContext(ctx, {
                received: ctx.data,
                code: ZodIssueCode.invalid_enum_value,
                options: expectedValues,
            });
            return INVALID;
        }
        return OK(input.data);
    }
    get options() {
        return this._def.values;
    }
    get enum() {
        const enumValues = {};
        for (const val of this._def.values) {
            enumValues[val] = val;
        }
        return enumValues;
    }
    get Values() {
        const enumValues = {};
        for (const val of this._def.values) {
            enumValues[val] = val;
        }
        return enumValues;
    }
    get Enum() {
        const enumValues = {};
        for (const val of this._def.values) {
            enumValues[val] = val;
        }
        return enumValues;
    }
    extract(values, newDef = this._def) {
        return ZodEnum.create(values, {
            ...this._def,
            ...newDef,
        });
    }
    exclude(values, newDef = this._def) {
        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {
            ...this._def,
            ...newDef,
        });
    }
}
_ZodEnum_cache = new WeakMap();
ZodEnum.create = createZodEnum;
class ZodNativeEnum extends ZodType {
    constructor() {
        super(...arguments);
        _ZodNativeEnum_cache.set(this, void 0);
    }
    _parse(input) {
        const nativeEnumValues = util$8.getValidEnumValues(this._def.values);
        const ctx = this._getOrReturnCtx(input);
        if (ctx.parsedType !== ZodParsedType.string &&
            ctx.parsedType !== ZodParsedType.number) {
            const expectedValues = util$8.objectValues(nativeEnumValues);
            addIssueToContext(ctx, {
                expected: util$8.joinValues(expectedValues),
                received: ctx.parsedType,
                code: ZodIssueCode.invalid_type,
            });
            return INVALID;
        }
        if (!__classPrivateFieldGet$1(this, _ZodNativeEnum_cache)) {
            __classPrivateFieldSet$1(this, _ZodNativeEnum_cache, new Set(util$8.getValidEnumValues(this._def.values)));
        }
        if (!__classPrivateFieldGet$1(this, _ZodNativeEnum_cache).has(input.data)) {
            const expectedValues = util$8.objectValues(nativeEnumValues);
            addIssueToContext(ctx, {
                received: ctx.data,
                code: ZodIssueCode.invalid_enum_value,
                options: expectedValues,
            });
            return INVALID;
        }
        return OK(input.data);
    }
    get enum() {
        return this._def.values;
    }
}
_ZodNativeEnum_cache = new WeakMap();
ZodNativeEnum.create = (values, params) => {
    return new ZodNativeEnum({
        values: values,
        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
        ...processCreateParams(params),
    });
};
class ZodPromise extends ZodType {
    unwrap() {
        return this._def.type;
    }
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.promise &&
            ctx.common.async === false) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.promise,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const promisified = ctx.parsedType === ZodParsedType.promise
            ? ctx.data
            : Promise.resolve(ctx.data);
        return OK(promisified.then((data) => {
            return this._def.type.parseAsync(data, {
                path: ctx.path,
                errorMap: ctx.common.contextualErrorMap,
            });
        }));
    }
}
ZodPromise.create = (schema, params) => {
    return new ZodPromise({
        type: schema,
        typeName: ZodFirstPartyTypeKind.ZodPromise,
        ...processCreateParams(params),
    });
};
class ZodEffects extends ZodType {
    innerType() {
        return this._def.schema;
    }
    sourceType() {
        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects
            ? this._def.schema.sourceType()
            : this._def.schema;
    }
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const effect = this._def.effect || null;
        const checkCtx = {
            addIssue: (arg) => {
                addIssueToContext(ctx, arg);
                if (arg.fatal) {
                    status.abort();
                }
                else {
                    status.dirty();
                }
            },
            get path() {
                return ctx.path;
            },
        };
        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
        if (effect.type === "preprocess") {
            const processed = effect.transform(ctx.data, checkCtx);
            if (ctx.common.async) {
                return Promise.resolve(processed).then(async (processed) => {
                    if (status.value === "aborted")
                        return INVALID;
                    const result = await this._def.schema._parseAsync({
                        data: processed,
                        path: ctx.path,
                        parent: ctx,
                    });
                    if (result.status === "aborted")
                        return INVALID;
                    if (result.status === "dirty")
                        return DIRTY(result.value);
                    if (status.value === "dirty")
                        return DIRTY(result.value);
                    return result;
                });
            }
            else {
                if (status.value === "aborted")
                    return INVALID;
                const result = this._def.schema._parseSync({
                    data: processed,
                    path: ctx.path,
                    parent: ctx,
                });
                if (result.status === "aborted")
                    return INVALID;
                if (result.status === "dirty")
                    return DIRTY(result.value);
                if (status.value === "dirty")
                    return DIRTY(result.value);
                return result;
            }
        }
        if (effect.type === "refinement") {
            const executeRefinement = (acc) => {
                const result = effect.refinement(acc, checkCtx);
                if (ctx.common.async) {
                    return Promise.resolve(result);
                }
                if (result instanceof Promise) {
                    throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
                }
                return acc;
            };
            if (ctx.common.async === false) {
                const inner = this._def.schema._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                });
                if (inner.status === "aborted")
                    return INVALID;
                if (inner.status === "dirty")
                    status.dirty();
                // return value is ignored
                executeRefinement(inner.value);
                return { status: status.value, value: inner.value };
            }
            else {
                return this._def.schema
                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })
                    .then((inner) => {
                    if (inner.status === "aborted")
                        return INVALID;
                    if (inner.status === "dirty")
                        status.dirty();
                    return executeRefinement(inner.value).then(() => {
                        return { status: status.value, value: inner.value };
                    });
                });
            }
        }
        if (effect.type === "transform") {
            if (ctx.common.async === false) {
                const base = this._def.schema._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                });
                if (!isValid(base))
                    return base;
                const result = effect.transform(base.value, checkCtx);
                if (result instanceof Promise) {
                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
                }
                return { status: status.value, value: result };
            }
            else {
                return this._def.schema
                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })
                    .then((base) => {
                    if (!isValid(base))
                        return base;
                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
                });
            }
        }
        util$8.assertNever(effect);
    }
}
ZodEffects.create = (schema, effect, params) => {
    return new ZodEffects({
        schema,
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        effect,
        ...processCreateParams(params),
    });
};
ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
    return new ZodEffects({
        schema,
        effect: { type: "preprocess", transform: preprocess },
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        ...processCreateParams(params),
    });
};
class ZodOptional extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType.undefined) {
            return OK(undefined);
        }
        return this._def.innerType._parse(input);
    }
    unwrap() {
        return this._def.innerType;
    }
}
ZodOptional.create = (type, params) => {
    return new ZodOptional({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodOptional,
        ...processCreateParams(params),
    });
};
class ZodNullable extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType.null) {
            return OK(null);
        }
        return this._def.innerType._parse(input);
    }
    unwrap() {
        return this._def.innerType;
    }
}
ZodNullable.create = (type, params) => {
    return new ZodNullable({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodNullable,
        ...processCreateParams(params),
    });
};
class ZodDefault extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        let data = ctx.data;
        if (ctx.parsedType === ZodParsedType.undefined) {
            data = this._def.defaultValue();
        }
        return this._def.innerType._parse({
            data,
            path: ctx.path,
            parent: ctx,
        });
    }
    removeDefault() {
        return this._def.innerType;
    }
}
ZodDefault.create = (type, params) => {
    return new ZodDefault({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodDefault,
        defaultValue: typeof params.default === "function"
            ? params.default
            : () => params.default,
        ...processCreateParams(params),
    });
};
class ZodCatch extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        // newCtx is used to not collect issues from inner types in ctx
        const newCtx = {
            ...ctx,
            common: {
                ...ctx.common,
                issues: [],
            },
        };
        const result = this._def.innerType._parse({
            data: newCtx.data,
            path: newCtx.path,
            parent: {
                ...newCtx,
            },
        });
        if (isAsync(result)) {
            return result.then((result) => {
                return {
                    status: "valid",
                    value: result.status === "valid"
                        ? result.value
                        : this._def.catchValue({
                            get error() {
                                return new ZodError(newCtx.common.issues);
                            },
                            input: newCtx.data,
                        }),
                };
            });
        }
        else {
            return {
                status: "valid",
                value: result.status === "valid"
                    ? result.value
                    : this._def.catchValue({
                        get error() {
                            return new ZodError(newCtx.common.issues);
                        },
                        input: newCtx.data,
                    }),
            };
        }
    }
    removeCatch() {
        return this._def.innerType;
    }
}
ZodCatch.create = (type, params) => {
    return new ZodCatch({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodCatch,
        catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
        ...processCreateParams(params),
    });
};
class ZodNaN extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.nan) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.nan,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return { status: "valid", value: input.data };
    }
}
ZodNaN.create = (params) => {
    return new ZodNaN({
        typeName: ZodFirstPartyTypeKind.ZodNaN,
        ...processCreateParams(params),
    });
};
const BRAND = Symbol("zod_brand");
class ZodBranded extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        const data = ctx.data;
        return this._def.type._parse({
            data,
            path: ctx.path,
            parent: ctx,
        });
    }
    unwrap() {
        return this._def.type;
    }
}
class ZodPipeline extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.common.async) {
            const handleAsync = async () => {
                const inResult = await this._def.in._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                });
                if (inResult.status === "aborted")
                    return INVALID;
                if (inResult.status === "dirty") {
                    status.dirty();
                    return DIRTY(inResult.value);
                }
                else {
                    return this._def.out._parseAsync({
                        data: inResult.value,
                        path: ctx.path,
                        parent: ctx,
                    });
                }
            };
            return handleAsync();
        }
        else {
            const inResult = this._def.in._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            });
            if (inResult.status === "aborted")
                return INVALID;
            if (inResult.status === "dirty") {
                status.dirty();
                return {
                    status: "dirty",
                    value: inResult.value,
                };
            }
            else {
                return this._def.out._parseSync({
                    data: inResult.value,
                    path: ctx.path,
                    parent: ctx,
                });
            }
        }
    }
    static create(a, b) {
        return new ZodPipeline({
            in: a,
            out: b,
            typeName: ZodFirstPartyTypeKind.ZodPipeline,
        });
    }
}
class ZodReadonly extends ZodType {
    _parse(input) {
        const result = this._def.innerType._parse(input);
        const freeze = (data) => {
            if (isValid(data)) {
                data.value = Object.freeze(data.value);
            }
            return data;
        };
        return isAsync(result)
            ? result.then((data) => freeze(data))
            : freeze(result);
    }
    unwrap() {
        return this._def.innerType;
    }
}
ZodReadonly.create = (type, params) => {
    return new ZodReadonly({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodReadonly,
        ...processCreateParams(params),
    });
};
function custom(check, params = {}, 
/**
 * @deprecated
 *
 * Pass `fatal` into the params object instead:
 *
 * ```ts
 * z.string().custom((val) => val.length > 5, { fatal: false })
 * ```
 *
 */
fatal) {
    if (check)
        return ZodAny.create().superRefine((data, ctx) => {
            var _a, _b;
            if (!check(data)) {
                const p = typeof params === "function"
                    ? params(data)
                    : typeof params === "string"
                        ? { message: params }
                        : params;
                const _fatal = (_b = (_a = p.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;
                const p2 = typeof p === "string" ? { message: p } : p;
                ctx.addIssue({ code: "custom", ...p2, fatal: _fatal });
            }
        });
    return ZodAny.create();
}
const late = {
    object: ZodObject.lazycreate,
};
var ZodFirstPartyTypeKind;
(function (ZodFirstPartyTypeKind) {
    ZodFirstPartyTypeKind["ZodString"] = "ZodString";
    ZodFirstPartyTypeKind["ZodNumber"] = "ZodNumber";
    ZodFirstPartyTypeKind["ZodNaN"] = "ZodNaN";
    ZodFirstPartyTypeKind["ZodBigInt"] = "ZodBigInt";
    ZodFirstPartyTypeKind["ZodBoolean"] = "ZodBoolean";
    ZodFirstPartyTypeKind["ZodDate"] = "ZodDate";
    ZodFirstPartyTypeKind["ZodSymbol"] = "ZodSymbol";
    ZodFirstPartyTypeKind["ZodUndefined"] = "ZodUndefined";
    ZodFirstPartyTypeKind["ZodNull"] = "ZodNull";
    ZodFirstPartyTypeKind["ZodAny"] = "ZodAny";
    ZodFirstPartyTypeKind["ZodUnknown"] = "ZodUnknown";
    ZodFirstPartyTypeKind["ZodNever"] = "ZodNever";
    ZodFirstPartyTypeKind["ZodVoid"] = "ZodVoid";
    ZodFirstPartyTypeKind["ZodArray"] = "ZodArray";
    ZodFirstPartyTypeKind["ZodObject"] = "ZodObject";
    ZodFirstPartyTypeKind["ZodUnion"] = "ZodUnion";
    ZodFirstPartyTypeKind["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
    ZodFirstPartyTypeKind["ZodIntersection"] = "ZodIntersection";
    ZodFirstPartyTypeKind["ZodTuple"] = "ZodTuple";
    ZodFirstPartyTypeKind["ZodRecord"] = "ZodRecord";
    ZodFirstPartyTypeKind["ZodMap"] = "ZodMap";
    ZodFirstPartyTypeKind["ZodSet"] = "ZodSet";
    ZodFirstPartyTypeKind["ZodFunction"] = "ZodFunction";
    ZodFirstPartyTypeKind["ZodLazy"] = "ZodLazy";
    ZodFirstPartyTypeKind["ZodLiteral"] = "ZodLiteral";
    ZodFirstPartyTypeKind["ZodEnum"] = "ZodEnum";
    ZodFirstPartyTypeKind["ZodEffects"] = "ZodEffects";
    ZodFirstPartyTypeKind["ZodNativeEnum"] = "ZodNativeEnum";
    ZodFirstPartyTypeKind["ZodOptional"] = "ZodOptional";
    ZodFirstPartyTypeKind["ZodNullable"] = "ZodNullable";
    ZodFirstPartyTypeKind["ZodDefault"] = "ZodDefault";
    ZodFirstPartyTypeKind["ZodCatch"] = "ZodCatch";
    ZodFirstPartyTypeKind["ZodPromise"] = "ZodPromise";
    ZodFirstPartyTypeKind["ZodBranded"] = "ZodBranded";
    ZodFirstPartyTypeKind["ZodPipeline"] = "ZodPipeline";
    ZodFirstPartyTypeKind["ZodReadonly"] = "ZodReadonly";
})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
const instanceOfType = (
// const instanceOfType = <T extends new (...args: any[]) => any>(
cls, params = {
    message: `Input not instance of ${cls.name}`,
}) => custom((data) => data instanceof cls, params);
const stringType = ZodString.create;
const numberType = ZodNumber.create;
const nanType = ZodNaN.create;
const bigIntType = ZodBigInt.create;
const booleanType = ZodBoolean.create;
const dateType = ZodDate.create;
const symbolType = ZodSymbol.create;
const undefinedType = ZodUndefined.create;
const nullType = ZodNull.create;
const anyType = ZodAny.create;
const unknownType = ZodUnknown.create;
const neverType = ZodNever.create;
const voidType = ZodVoid.create;
const arrayType = ZodArray.create;
const objectType = ZodObject.create;
const strictObjectType = ZodObject.strictCreate;
const unionType = ZodUnion.create;
const discriminatedUnionType = ZodDiscriminatedUnion.create;
const intersectionType = ZodIntersection.create;
const tupleType = ZodTuple.create;
const recordType = ZodRecord.create;
const mapType = ZodMap.create;
const setType = ZodSet.create;
const functionType = ZodFunction.create;
const lazyType = ZodLazy.create;
const literalType = ZodLiteral.create;
const enumType = ZodEnum.create;
const nativeEnumType = ZodNativeEnum.create;
const promiseType = ZodPromise.create;
const effectsType = ZodEffects.create;
const optionalType = ZodOptional.create;
const nullableType = ZodNullable.create;
const preprocessType = ZodEffects.createWithPreprocess;
const pipelineType = ZodPipeline.create;
const ostring = () => stringType().optional();
const onumber = () => numberType().optional();
const oboolean = () => booleanType().optional();
const coerce = {
    string: ((arg) => ZodString.create({ ...arg, coerce: true })),
    number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),
    boolean: ((arg) => ZodBoolean.create({
        ...arg,
        coerce: true,
    })),
    bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),
    date: ((arg) => ZodDate.create({ ...arg, coerce: true })),
};
const NEVER = INVALID;

var z = /*#__PURE__*/Object.freeze({
    __proto__: null,
    defaultErrorMap: errorMap,
    setErrorMap: setErrorMap,
    getErrorMap: getErrorMap,
    makeIssue: makeIssue,
    EMPTY_PATH: EMPTY_PATH,
    addIssueToContext: addIssueToContext,
    ParseStatus: ParseStatus,
    INVALID: INVALID,
    DIRTY: DIRTY,
    OK: OK,
    isAborted: isAborted,
    isDirty: isDirty,
    isValid: isValid,
    isAsync: isAsync,
    get util () { return util$8; },
    get objectUtil () { return objectUtil; },
    ZodParsedType: ZodParsedType,
    getParsedType: getParsedType,
    ZodType: ZodType,
    datetimeRegex: datetimeRegex,
    ZodString: ZodString,
    ZodNumber: ZodNumber,
    ZodBigInt: ZodBigInt,
    ZodBoolean: ZodBoolean,
    ZodDate: ZodDate,
    ZodSymbol: ZodSymbol,
    ZodUndefined: ZodUndefined,
    ZodNull: ZodNull,
    ZodAny: ZodAny,
    ZodUnknown: ZodUnknown,
    ZodNever: ZodNever,
    ZodVoid: ZodVoid,
    ZodArray: ZodArray,
    ZodObject: ZodObject,
    ZodUnion: ZodUnion,
    ZodDiscriminatedUnion: ZodDiscriminatedUnion,
    ZodIntersection: ZodIntersection,
    ZodTuple: ZodTuple,
    ZodRecord: ZodRecord,
    ZodMap: ZodMap,
    ZodSet: ZodSet,
    ZodFunction: ZodFunction,
    ZodLazy: ZodLazy,
    ZodLiteral: ZodLiteral,
    ZodEnum: ZodEnum,
    ZodNativeEnum: ZodNativeEnum,
    ZodPromise: ZodPromise,
    ZodEffects: ZodEffects,
    ZodTransformer: ZodEffects,
    ZodOptional: ZodOptional,
    ZodNullable: ZodNullable,
    ZodDefault: ZodDefault,
    ZodCatch: ZodCatch,
    ZodNaN: ZodNaN,
    BRAND: BRAND,
    ZodBranded: ZodBranded,
    ZodPipeline: ZodPipeline,
    ZodReadonly: ZodReadonly,
    custom: custom,
    Schema: ZodType,
    ZodSchema: ZodType,
    late: late,
    get ZodFirstPartyTypeKind () { return ZodFirstPartyTypeKind; },
    coerce: coerce,
    any: anyType,
    array: arrayType,
    bigint: bigIntType,
    boolean: booleanType,
    date: dateType,
    discriminatedUnion: discriminatedUnionType,
    effect: effectsType,
    'enum': enumType,
    'function': functionType,
    'instanceof': instanceOfType,
    intersection: intersectionType,
    lazy: lazyType,
    literal: literalType,
    map: mapType,
    nan: nanType,
    nativeEnum: nativeEnumType,
    never: neverType,
    'null': nullType,
    nullable: nullableType,
    number: numberType,
    object: objectType,
    oboolean: oboolean,
    onumber: onumber,
    optional: optionalType,
    ostring: ostring,
    pipeline: pipelineType,
    preprocess: preprocessType,
    promise: promiseType,
    record: recordType,
    set: setType,
    strictObject: strictObjectType,
    string: stringType,
    symbol: symbolType,
    transformer: effectsType,
    tuple: tupleType,
    'undefined': undefinedType,
    union: unionType,
    unknown: unknownType,
    'void': voidType,
    NEVER: NEVER,
    ZodIssueCode: ZodIssueCode,
    quotelessJson: quotelessJson,
    ZodError: ZodError
});

var _a;
class LastImportTracker {
    static #instance = null;
    static lastImportPath = path.resolve(__dirname, '../lastImport.json');
    // @ts-expect-error
    #data;
    constructor() {
        if (_a.#instance != null) {
            return _a.#instance;
        }
        this.#data = new Map(Object.entries(this.#setUp));
        _a.#instance = this;
    }
    #setUp() {
        const buffer = fs.readFileSync(_a.lastImportPath);
        const string = buffer.toString('utf-8');
        const json = JSON.parse(string);
        return json;
    }
    getLastImport(feedLink) {
        return this.#data.get(feedLink) ?? null;
    }
    async setLastImport(feedLink, uid) {
        this.#data.set(feedLink, uid);
        fs.writeFileSync(_a.lastImportPath, JSON.stringify(Object.fromEntries(this.#data.entries())), 'utf-8');
    }
}
_a = LastImportTracker;

var src = {};

var dist$7;
var hasRequiredDist$7;

function requireDist$7 () {
	if (hasRequiredDist$7) return dist$7;
	hasRequiredDist$7 = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

	// src/index.ts
	var src_exports = {};
	__export(src_exports, {
	  calculateShardId: () => calculateShardId,
	  getUserAgentAppendix: () => getUserAgentAppendix,
	  isEquatable: () => isEquatable,
	  isJSONEncodable: () => isJSONEncodable,
	  lazy: () => lazy,
	  polyfillDispose: () => polyfillDispose,
	  range: () => range,
	  shouldUseGlobalFetchAndWebSocket: () => shouldUseGlobalFetchAndWebSocket,
	  version: () => version
	});
	dist$7 = __toCommonJS(src_exports);

	// src/functions/lazy.ts
	function lazy(cb) {
	  let defaultValue;
	  return () => defaultValue ??= cb();
	}
	__name(lazy, "lazy");

	// src/functions/range.ts
	function* range(range2) {
	  let rangeEnd;
	  let start = 0;
	  let step = 1;
	  if (typeof range2 === "number") {
	    rangeEnd = range2;
	  } else {
	    start = range2.start;
	    rangeEnd = range2.end;
	    step = range2.step ?? 1;
	  }
	  for (let index = start; index < rangeEnd; index += step) {
	    yield index;
	  }
	}
	__name(range, "range");

	// src/functions/calculateShardId.ts
	function calculateShardId(guildId, shardCount) {
	  return Number(BigInt(guildId) >> 22n) % shardCount;
	}
	__name(calculateShardId, "calculateShardId");

	// src/functions/runtime.ts
	function shouldUseGlobalFetchAndWebSocket() {
	  if (typeof globalThis.process === "undefined") {
	    return "fetch" in globalThis && "WebSocket" in globalThis;
	  }
	  if ("versions" in globalThis.process) {
	    return "deno" in globalThis.process.versions || "bun" in globalThis.process.versions;
	  }
	  return false;
	}
	__name(shouldUseGlobalFetchAndWebSocket, "shouldUseGlobalFetchAndWebSocket");

	// src/functions/userAgentAppendix.ts
	function getUserAgentAppendix() {
	  if (typeof globalThis.EdgeRuntime !== "undefined") {
	    return "Vercel-Edge-Functions";
	  }
	  if (typeof globalThis.R2 !== "undefined" && typeof globalThis.WebSocketPair !== "undefined") {
	    return "Cloudflare-Workers";
	  }
	  if (typeof globalThis.Netlify !== "undefined") {
	    return "Netlify-Edge-Functions";
	  }
	  if (typeof globalThis.process !== "object") {
	    if (typeof globalThis.navigator === "object") {
	      return globalThis.navigator.userAgent;
	    }
	    return "UnknownEnvironment";
	  }
	  if ("versions" in globalThis.process) {
	    if ("deno" in globalThis.process.versions) {
	      return `Deno/${globalThis.process.versions.deno}`;
	    }
	    if ("bun" in globalThis.process.versions) {
	      return `Bun/${globalThis.process.versions.bun}`;
	    }
	    if ("node" in globalThis.process.versions) {
	      return `Node.js/${globalThis.process.versions.node}`;
	    }
	  }
	  return "UnknownEnvironment";
	}
	__name(getUserAgentAppendix, "getUserAgentAppendix");

	// src/functions/polyfillDispose.ts
	function polyfillDispose() {
	  Symbol.dispose ??= Symbol("Symbol.dispose");
	  Symbol.asyncDispose ??= Symbol("Symbol.asyncDispose");
	}
	__name(polyfillDispose, "polyfillDispose");

	// src/JSONEncodable.ts
	function isJSONEncodable(maybeEncodable) {
	  return maybeEncodable !== null && typeof maybeEncodable === "object" && "toJSON" in maybeEncodable;
	}
	__name(isJSONEncodable, "isJSONEncodable");

	// src/Equatable.ts
	function isEquatable(maybeEquatable) {
	  return maybeEquatable !== null && typeof maybeEquatable === "object" && "equals" in maybeEquatable;
	}
	__name(isEquatable, "isEquatable");

	// src/index.ts
	var version = "1.1.1";
	
	return dist$7;
}

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol, Iterator */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
}
function __runInitializers(thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
}
function __propKey(x) {
    return typeof x === "symbol" ? x : "".concat(x);
}
function __setFunctionName(f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});

function __exportStar(m, o) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

/** @deprecated */
function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

/** @deprecated */
function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;
    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }
    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
}
var __setModuleDefault = Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
};

var ownKeys = function(o) {
    ownKeys = Object.getOwnPropertyNames || function (o) {
        var ar = [];
        for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
        return ar;
    };
    return ownKeys(o);
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
    __setModuleDefault(result, mod);
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

function __classPrivateFieldIn(state, receiver) {
    if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
    return typeof state === "function" ? receiver === state : state.has(receiver);
}

function __addDisposableResource(env, value, async) {
    if (value !== null && value !== void 0) {
        if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
        var dispose, inner;
        if (async) {
            if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
            dispose = value[Symbol.asyncDispose];
        }
        if (dispose === void 0) {
            if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
            dispose = value[Symbol.dispose];
            if (async) inner = dispose;
        }
        if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
        if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };
        env.stack.push({ value: value, dispose: dispose, async: async });
    }
    else if (async) {
        env.stack.push({ async: true });
    }
    return value;

}

var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

function __disposeResources(env) {
    function fail(e) {
        env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
        env.hasError = true;
    }
    var r, s = 0;
    function next() {
        while (r = env.stack.pop()) {
            try {
                if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);
                if (r.dispose) {
                    var result = r.dispose.call(r.value);
                    if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });
                }
                else s |= 1;
            }
            catch (e) {
                fail(e);
            }
        }
        if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();
        if (env.hasError) throw env.error;
    }
    return next();
}

function __rewriteRelativeImportExtension(path, preserveJsx) {
    if (typeof path === "string" && /^\.\.?\//.test(path)) {
        return path.replace(/\.(tsx)$|((?:\.d)?)((?:\.[^./]+?)?)\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {
            return tsx ? preserveJsx ? ".jsx" : ".js" : d && (!ext || !cm) ? m : (d + ext + "." + cm.toLowerCase() + "js");
        });
    }
    return path;
}

var tslib_es6 = {
    __extends: __extends,
    __assign: __assign,
    __rest: __rest,
    __decorate: __decorate,
    __param: __param,
    __esDecorate: __esDecorate,
    __runInitializers: __runInitializers,
    __propKey: __propKey,
    __setFunctionName: __setFunctionName,
    __metadata: __metadata,
    __awaiter: __awaiter,
    __generator: __generator,
    __createBinding: __createBinding,
    __exportStar: __exportStar,
    __values: __values,
    __read: __read,
    __spread: __spread,
    __spreadArrays: __spreadArrays,
    __spreadArray: __spreadArray,
    __await: __await,
    __asyncGenerator: __asyncGenerator,
    __asyncDelegator: __asyncDelegator,
    __asyncValues: __asyncValues,
    __makeTemplateObject: __makeTemplateObject,
    __importStar: __importStar,
    __importDefault: __importDefault,
    __classPrivateFieldGet: __classPrivateFieldGet,
    __classPrivateFieldSet: __classPrivateFieldSet,
    __classPrivateFieldIn: __classPrivateFieldIn,
    __addDisposableResource: __addDisposableResource,
    __disposeResources: __disposeResources,
    __rewriteRelativeImportExtension: __rewriteRelativeImportExtension,
};

var tslib_es6$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	__addDisposableResource: __addDisposableResource,
	get __assign () { return __assign; },
	__asyncDelegator: __asyncDelegator,
	__asyncGenerator: __asyncGenerator,
	__asyncValues: __asyncValues,
	__await: __await,
	__awaiter: __awaiter,
	__classPrivateFieldGet: __classPrivateFieldGet,
	__classPrivateFieldIn: __classPrivateFieldIn,
	__classPrivateFieldSet: __classPrivateFieldSet,
	__createBinding: __createBinding,
	__decorate: __decorate,
	__disposeResources: __disposeResources,
	__esDecorate: __esDecorate,
	__exportStar: __exportStar,
	__extends: __extends,
	__generator: __generator,
	__importDefault: __importDefault,
	__importStar: __importStar,
	__makeTemplateObject: __makeTemplateObject,
	__metadata: __metadata,
	__param: __param,
	__propKey: __propKey,
	__read: __read,
	__rest: __rest,
	__rewriteRelativeImportExtension: __rewriteRelativeImportExtension,
	__runInitializers: __runInitializers,
	__setFunctionName: __setFunctionName,
	__spread: __spread,
	__spreadArray: __spreadArray,
	__spreadArrays: __spreadArrays,
	__values: __values,
	default: tslib_es6
});

var require$$1$3 = /*@__PURE__*/getAugmentedNamespace(tslib_es6$1);

var v10$w = {};

var v10$v = {};

var common$b = {};

var hasRequiredCommon$b;

function requireCommon$b () {
	if (hasRequiredCommon$b) return common$b;
	hasRequiredCommon$b = 1;
	Object.defineProperty(common$b, "__esModule", { value: true });
	
	return common$b;
}

var hasRequiredV10$h;

function requireV10$h () {
	if (hasRequiredV10$h) return v10$v;
	hasRequiredV10$h = 1;
	(function (exports) {
		/**
		 * Types extracted from https://discord.com/developers/docs/topics/gateway
		 */
		var __createBinding = (v10$v && v10$v.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (v10$v && v10$v.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.GatewayDispatchEvents = exports.GatewayIntentBits = exports.GatewayCloseCodes = exports.GatewayOpcodes = exports.GatewayVersion = void 0;
		__exportStar(requireCommon$b(), exports);
		exports.GatewayVersion = '10';
		/**
		 * https://discord.com/developers/docs/topics/opcodes-and-status-codes#gateway-gateway-opcodes
		 */
		var GatewayOpcodes;
		(function (GatewayOpcodes) {
		    /**
		     * An event was dispatched
		     */
		    GatewayOpcodes[GatewayOpcodes["Dispatch"] = 0] = "Dispatch";
		    /**
		     * A bidirectional opcode to maintain an active gateway connection.
		     * Fired periodically by the client, or fired by the gateway to request an immediate heartbeat from the client.
		     */
		    GatewayOpcodes[GatewayOpcodes["Heartbeat"] = 1] = "Heartbeat";
		    /**
		     * Starts a new session during the initial handshake
		     */
		    GatewayOpcodes[GatewayOpcodes["Identify"] = 2] = "Identify";
		    /**
		     * Update the client's presence
		     */
		    GatewayOpcodes[GatewayOpcodes["PresenceUpdate"] = 3] = "PresenceUpdate";
		    /**
		     * Used to join/leave or move between voice channels
		     */
		    GatewayOpcodes[GatewayOpcodes["VoiceStateUpdate"] = 4] = "VoiceStateUpdate";
		    /**
		     * Resume a previous session that was disconnected
		     */
		    GatewayOpcodes[GatewayOpcodes["Resume"] = 6] = "Resume";
		    /**
		     * You should attempt to reconnect and resume immediately
		     */
		    GatewayOpcodes[GatewayOpcodes["Reconnect"] = 7] = "Reconnect";
		    /**
		     * Request information about offline guild members in a large guild
		     */
		    GatewayOpcodes[GatewayOpcodes["RequestGuildMembers"] = 8] = "RequestGuildMembers";
		    /**
		     * The session has been invalidated. You should reconnect and identify/resume accordingly
		     */
		    GatewayOpcodes[GatewayOpcodes["InvalidSession"] = 9] = "InvalidSession";
		    /**
		     * Sent immediately after connecting, contains the `heartbeat_interval` to use
		     */
		    GatewayOpcodes[GatewayOpcodes["Hello"] = 10] = "Hello";
		    /**
		     * Sent in response to receiving a heartbeat to acknowledge that it has been received
		     */
		    GatewayOpcodes[GatewayOpcodes["HeartbeatAck"] = 11] = "HeartbeatAck";
		})(GatewayOpcodes || (exports.GatewayOpcodes = GatewayOpcodes = {}));
		/**
		 * https://discord.com/developers/docs/topics/opcodes-and-status-codes#gateway-gateway-close-event-codes
		 */
		var GatewayCloseCodes;
		(function (GatewayCloseCodes) {
		    /**
		     * We're not sure what went wrong. Try reconnecting?
		     */
		    GatewayCloseCodes[GatewayCloseCodes["UnknownError"] = 4000] = "UnknownError";
		    /**
		     * You sent an invalid Gateway opcode or an invalid payload for an opcode. Don't do that!
		     *
		     * See https://discord.com/developers/docs/topics/gateway-events#payload-structure
		     */
		    GatewayCloseCodes[GatewayCloseCodes["UnknownOpcode"] = 4001] = "UnknownOpcode";
		    /**
		     * You sent an invalid payload to us. Don't do that!
		     *
		     * See https://discord.com/developers/docs/topics/gateway#sending-events
		     */
		    GatewayCloseCodes[GatewayCloseCodes["DecodeError"] = 4002] = "DecodeError";
		    /**
		     * You sent us a payload prior to identifying
		     *
		     * See https://discord.com/developers/docs/topics/gateway-events#identify
		     */
		    GatewayCloseCodes[GatewayCloseCodes["NotAuthenticated"] = 4003] = "NotAuthenticated";
		    /**
		     * The account token sent with your identify payload is incorrect
		     *
		     * See https://discord.com/developers/docs/topics/gateway-events#identify
		     */
		    GatewayCloseCodes[GatewayCloseCodes["AuthenticationFailed"] = 4004] = "AuthenticationFailed";
		    /**
		     * You sent more than one identify payload. Don't do that!
		     */
		    GatewayCloseCodes[GatewayCloseCodes["AlreadyAuthenticated"] = 4005] = "AlreadyAuthenticated";
		    /**
		     * The sequence sent when resuming the session was invalid. Reconnect and start a new session
		     *
		     * See https://discord.com/developers/docs/topics/gateway-events#resume
		     */
		    GatewayCloseCodes[GatewayCloseCodes["InvalidSeq"] = 4007] = "InvalidSeq";
		    /**
		     * Woah nelly! You're sending payloads to us too quickly. Slow it down! You will be disconnected on receiving this
		     */
		    GatewayCloseCodes[GatewayCloseCodes["RateLimited"] = 4008] = "RateLimited";
		    /**
		     * Your session timed out. Reconnect and start a new one
		     */
		    GatewayCloseCodes[GatewayCloseCodes["SessionTimedOut"] = 4009] = "SessionTimedOut";
		    /**
		     * You sent us an invalid shard when identifying
		     *
		     * See https://discord.com/developers/docs/topics/gateway#sharding
		     */
		    GatewayCloseCodes[GatewayCloseCodes["InvalidShard"] = 4010] = "InvalidShard";
		    /**
		     * The session would have handled too many guilds - you are required to shard your connection in order to connect
		     *
		     * See https://discord.com/developers/docs/topics/gateway#sharding
		     */
		    GatewayCloseCodes[GatewayCloseCodes["ShardingRequired"] = 4011] = "ShardingRequired";
		    /**
		     * You sent an invalid version for the gateway
		     */
		    GatewayCloseCodes[GatewayCloseCodes["InvalidAPIVersion"] = 4012] = "InvalidAPIVersion";
		    /**
		     * You sent an invalid intent for a Gateway Intent. You may have incorrectly calculated the bitwise value
		     *
		     * See https://discord.com/developers/docs/topics/gateway#gateway-intents
		     */
		    GatewayCloseCodes[GatewayCloseCodes["InvalidIntents"] = 4013] = "InvalidIntents";
		    /**
		     * You sent a disallowed intent for a Gateway Intent. You may have tried to specify an intent that you have not
		     * enabled or are not whitelisted for
		     *
		     * See https://discord.com/developers/docs/topics/gateway#gateway-intents
		     *
		     * See https://discord.com/developers/docs/topics/gateway#privileged-intents
		     */
		    GatewayCloseCodes[GatewayCloseCodes["DisallowedIntents"] = 4014] = "DisallowedIntents";
		})(GatewayCloseCodes || (exports.GatewayCloseCodes = GatewayCloseCodes = {}));
		/**
		 * https://discord.com/developers/docs/topics/gateway#list-of-intents
		 */
		var GatewayIntentBits;
		(function (GatewayIntentBits) {
		    GatewayIntentBits[GatewayIntentBits["Guilds"] = 1] = "Guilds";
		    GatewayIntentBits[GatewayIntentBits["GuildMembers"] = 2] = "GuildMembers";
		    GatewayIntentBits[GatewayIntentBits["GuildModeration"] = 4] = "GuildModeration";
		    /**
		     * @deprecated This is the old name for {@apilink GatewayIntentBits#GuildModeration}
		     */
		    GatewayIntentBits[GatewayIntentBits["GuildBans"] = 4] = "GuildBans";
		    GatewayIntentBits[GatewayIntentBits["GuildEmojisAndStickers"] = 8] = "GuildEmojisAndStickers";
		    GatewayIntentBits[GatewayIntentBits["GuildIntegrations"] = 16] = "GuildIntegrations";
		    GatewayIntentBits[GatewayIntentBits["GuildWebhooks"] = 32] = "GuildWebhooks";
		    GatewayIntentBits[GatewayIntentBits["GuildInvites"] = 64] = "GuildInvites";
		    GatewayIntentBits[GatewayIntentBits["GuildVoiceStates"] = 128] = "GuildVoiceStates";
		    GatewayIntentBits[GatewayIntentBits["GuildPresences"] = 256] = "GuildPresences";
		    GatewayIntentBits[GatewayIntentBits["GuildMessages"] = 512] = "GuildMessages";
		    GatewayIntentBits[GatewayIntentBits["GuildMessageReactions"] = 1024] = "GuildMessageReactions";
		    GatewayIntentBits[GatewayIntentBits["GuildMessageTyping"] = 2048] = "GuildMessageTyping";
		    GatewayIntentBits[GatewayIntentBits["DirectMessages"] = 4096] = "DirectMessages";
		    GatewayIntentBits[GatewayIntentBits["DirectMessageReactions"] = 8192] = "DirectMessageReactions";
		    GatewayIntentBits[GatewayIntentBits["DirectMessageTyping"] = 16384] = "DirectMessageTyping";
		    GatewayIntentBits[GatewayIntentBits["MessageContent"] = 32768] = "MessageContent";
		    GatewayIntentBits[GatewayIntentBits["GuildScheduledEvents"] = 65536] = "GuildScheduledEvents";
		    GatewayIntentBits[GatewayIntentBits["AutoModerationConfiguration"] = 1048576] = "AutoModerationConfiguration";
		    GatewayIntentBits[GatewayIntentBits["AutoModerationExecution"] = 2097152] = "AutoModerationExecution";
		    GatewayIntentBits[GatewayIntentBits["GuildMessagePolls"] = 16777216] = "GuildMessagePolls";
		    GatewayIntentBits[GatewayIntentBits["DirectMessagePolls"] = 33554432] = "DirectMessagePolls";
		})(GatewayIntentBits || (exports.GatewayIntentBits = GatewayIntentBits = {}));
		/**
		 * https://discord.com/developers/docs/topics/gateway-events#receive-events
		 */
		var GatewayDispatchEvents;
		(function (GatewayDispatchEvents) {
		    GatewayDispatchEvents["ApplicationCommandPermissionsUpdate"] = "APPLICATION_COMMAND_PERMISSIONS_UPDATE";
		    GatewayDispatchEvents["ChannelCreate"] = "CHANNEL_CREATE";
		    GatewayDispatchEvents["ChannelDelete"] = "CHANNEL_DELETE";
		    GatewayDispatchEvents["ChannelPinsUpdate"] = "CHANNEL_PINS_UPDATE";
		    GatewayDispatchEvents["ChannelUpdate"] = "CHANNEL_UPDATE";
		    GatewayDispatchEvents["GuildBanAdd"] = "GUILD_BAN_ADD";
		    GatewayDispatchEvents["GuildBanRemove"] = "GUILD_BAN_REMOVE";
		    GatewayDispatchEvents["GuildCreate"] = "GUILD_CREATE";
		    GatewayDispatchEvents["GuildDelete"] = "GUILD_DELETE";
		    GatewayDispatchEvents["GuildEmojisUpdate"] = "GUILD_EMOJIS_UPDATE";
		    GatewayDispatchEvents["GuildIntegrationsUpdate"] = "GUILD_INTEGRATIONS_UPDATE";
		    GatewayDispatchEvents["GuildMemberAdd"] = "GUILD_MEMBER_ADD";
		    GatewayDispatchEvents["GuildMemberRemove"] = "GUILD_MEMBER_REMOVE";
		    GatewayDispatchEvents["GuildMembersChunk"] = "GUILD_MEMBERS_CHUNK";
		    GatewayDispatchEvents["GuildMemberUpdate"] = "GUILD_MEMBER_UPDATE";
		    GatewayDispatchEvents["GuildRoleCreate"] = "GUILD_ROLE_CREATE";
		    GatewayDispatchEvents["GuildRoleDelete"] = "GUILD_ROLE_DELETE";
		    GatewayDispatchEvents["GuildRoleUpdate"] = "GUILD_ROLE_UPDATE";
		    GatewayDispatchEvents["GuildStickersUpdate"] = "GUILD_STICKERS_UPDATE";
		    GatewayDispatchEvents["GuildUpdate"] = "GUILD_UPDATE";
		    GatewayDispatchEvents["IntegrationCreate"] = "INTEGRATION_CREATE";
		    GatewayDispatchEvents["IntegrationDelete"] = "INTEGRATION_DELETE";
		    GatewayDispatchEvents["IntegrationUpdate"] = "INTEGRATION_UPDATE";
		    GatewayDispatchEvents["InteractionCreate"] = "INTERACTION_CREATE";
		    GatewayDispatchEvents["InviteCreate"] = "INVITE_CREATE";
		    GatewayDispatchEvents["InviteDelete"] = "INVITE_DELETE";
		    GatewayDispatchEvents["MessageCreate"] = "MESSAGE_CREATE";
		    GatewayDispatchEvents["MessageDelete"] = "MESSAGE_DELETE";
		    GatewayDispatchEvents["MessageDeleteBulk"] = "MESSAGE_DELETE_BULK";
		    GatewayDispatchEvents["MessageReactionAdd"] = "MESSAGE_REACTION_ADD";
		    GatewayDispatchEvents["MessageReactionRemove"] = "MESSAGE_REACTION_REMOVE";
		    GatewayDispatchEvents["MessageReactionRemoveAll"] = "MESSAGE_REACTION_REMOVE_ALL";
		    GatewayDispatchEvents["MessageReactionRemoveEmoji"] = "MESSAGE_REACTION_REMOVE_EMOJI";
		    GatewayDispatchEvents["MessageUpdate"] = "MESSAGE_UPDATE";
		    GatewayDispatchEvents["PresenceUpdate"] = "PRESENCE_UPDATE";
		    GatewayDispatchEvents["StageInstanceCreate"] = "STAGE_INSTANCE_CREATE";
		    GatewayDispatchEvents["StageInstanceDelete"] = "STAGE_INSTANCE_DELETE";
		    GatewayDispatchEvents["StageInstanceUpdate"] = "STAGE_INSTANCE_UPDATE";
		    GatewayDispatchEvents["Ready"] = "READY";
		    GatewayDispatchEvents["Resumed"] = "RESUMED";
		    GatewayDispatchEvents["ThreadCreate"] = "THREAD_CREATE";
		    GatewayDispatchEvents["ThreadDelete"] = "THREAD_DELETE";
		    GatewayDispatchEvents["ThreadListSync"] = "THREAD_LIST_SYNC";
		    GatewayDispatchEvents["ThreadMembersUpdate"] = "THREAD_MEMBERS_UPDATE";
		    GatewayDispatchEvents["ThreadMemberUpdate"] = "THREAD_MEMBER_UPDATE";
		    GatewayDispatchEvents["ThreadUpdate"] = "THREAD_UPDATE";
		    GatewayDispatchEvents["TypingStart"] = "TYPING_START";
		    GatewayDispatchEvents["UserUpdate"] = "USER_UPDATE";
		    GatewayDispatchEvents["VoiceServerUpdate"] = "VOICE_SERVER_UPDATE";
		    GatewayDispatchEvents["VoiceStateUpdate"] = "VOICE_STATE_UPDATE";
		    GatewayDispatchEvents["WebhooksUpdate"] = "WEBHOOKS_UPDATE";
		    GatewayDispatchEvents["MessagePollVoteAdd"] = "MESSAGE_POLL_VOTE_ADD";
		    GatewayDispatchEvents["MessagePollVoteRemove"] = "MESSAGE_POLL_VOTE_REMOVE";
		    GatewayDispatchEvents["GuildScheduledEventCreate"] = "GUILD_SCHEDULED_EVENT_CREATE";
		    GatewayDispatchEvents["GuildScheduledEventUpdate"] = "GUILD_SCHEDULED_EVENT_UPDATE";
		    GatewayDispatchEvents["GuildScheduledEventDelete"] = "GUILD_SCHEDULED_EVENT_DELETE";
		    GatewayDispatchEvents["GuildScheduledEventUserAdd"] = "GUILD_SCHEDULED_EVENT_USER_ADD";
		    GatewayDispatchEvents["GuildScheduledEventUserRemove"] = "GUILD_SCHEDULED_EVENT_USER_REMOVE";
		    GatewayDispatchEvents["AutoModerationRuleCreate"] = "AUTO_MODERATION_RULE_CREATE";
		    GatewayDispatchEvents["AutoModerationRuleUpdate"] = "AUTO_MODERATION_RULE_UPDATE";
		    GatewayDispatchEvents["AutoModerationRuleDelete"] = "AUTO_MODERATION_RULE_DELETE";
		    GatewayDispatchEvents["AutoModerationActionExecution"] = "AUTO_MODERATION_ACTION_EXECUTION";
		    GatewayDispatchEvents["GuildAuditLogEntryCreate"] = "GUILD_AUDIT_LOG_ENTRY_CREATE";
		    GatewayDispatchEvents["EntitlementCreate"] = "ENTITLEMENT_CREATE";
		    GatewayDispatchEvents["EntitlementUpdate"] = "ENTITLEMENT_UPDATE";
		    GatewayDispatchEvents["EntitlementDelete"] = "ENTITLEMENT_DELETE";
		})(GatewayDispatchEvents || (exports.GatewayDispatchEvents = GatewayDispatchEvents = {}));
		// #endregion Shared
		
	} (v10$v));
	return v10$v;
}

var v10Exports$e = requireV10$h();
var mod$h = /*@__PURE__*/getDefaultExportFromCjs(v10Exports$e);

const GatewayCloseCodes$2 = mod$h.GatewayCloseCodes;
const GatewayDispatchEvents$2 = mod$h.GatewayDispatchEvents;
const GatewayIntentBits$2 = mod$h.GatewayIntentBits;
const GatewayOpcodes$2 = mod$h.GatewayOpcodes;
const GatewayVersion$2 = mod$h.GatewayVersion;

var v10$u = /*#__PURE__*/Object.freeze({
	__proto__: null,
	GatewayCloseCodes: GatewayCloseCodes$2,
	GatewayDispatchEvents: GatewayDispatchEvents$2,
	GatewayIntentBits: GatewayIntentBits$2,
	GatewayOpcodes: GatewayOpcodes$2,
	GatewayVersion: GatewayVersion$2,
	default: mod$h
});

var require$$0$2 = /*@__PURE__*/getAugmentedNamespace(v10$u);

var globals$5 = {};

var hasRequiredGlobals$2;

function requireGlobals$2 () {
	if (hasRequiredGlobals$2) return globals$5;
	hasRequiredGlobals$2 = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.FormattingPatterns = void 0;
		/**
		 * https://discord.com/developers/docs/reference#message-formatting-formats
		 */
		exports.FormattingPatterns = {
		    /**
		     * Regular expression for matching a user mention, strictly without a nickname
		     *
		     * The `id` group property is present on the `exec` result of this expression
		     */
		    User: /<@(?<id>\d{17,20})>/,
		    /**
		     * Regular expression for matching a user mention, strictly with a nickname
		     *
		     * The `id` group property is present on the `exec` result of this expression
		     *
		     * @deprecated Passing `!` in user mentions is no longer necessary / supported, and future message contents won't have it
		     */
		    UserWithNickname: /<@!(?<id>\d{17,20})>/,
		    /**
		     * Regular expression for matching a user mention, with or without a nickname
		     *
		     * The `id` group property is present on the `exec` result of this expression
		     *
		     * @deprecated Passing `!` in user mentions is no longer necessary / supported, and future message contents won't have it
		     */
		    UserWithOptionalNickname: /<@!?(?<id>\d{17,20})>/,
		    /**
		     * Regular expression for matching a channel mention
		     *
		     * The `id` group property is present on the `exec` result of this expression
		     */
		    Channel: /<#(?<id>\d{17,20})>/,
		    /**
		     * Regular expression for matching a role mention
		     *
		     * The `id` group property is present on the `exec` result of this expression
		     */
		    Role: /<@&(?<id>\d{17,20})>/,
		    /**
		     * Regular expression for matching a application command mention
		     *
		     * The `fullName` (possibly including `name`, `subcommandOrGroup` and `subcommand`) and `id` group properties are present on the `exec` result of this expression
		     */
		    SlashCommand: 
		    // eslint-disable-next-line unicorn/no-unsafe-regex
		    /<\/(?<fullName>(?<name>[-_\p{Letter}\p{Number}\p{sc=Deva}\p{sc=Thai}]{1,32})(?: (?<subcommandOrGroup>[-_\p{Letter}\p{Number}\p{sc=Deva}\p{sc=Thai}]{1,32}))?(?: (?<subcommand>[-_\p{Letter}\p{Number}\p{sc=Deva}\p{sc=Thai}]{1,32}))?):(?<id>\d{17,20})>/u,
		    /**
		     * Regular expression for matching a custom emoji, either static or animated
		     *
		     * The `animated`, `name` and `id` group properties are present on the `exec` result of this expression
		     */
		    Emoji: /<(?<animated>a)?:(?<name>\w{2,32}):(?<id>\d{17,20})>/,
		    /**
		     * Regular expression for matching strictly an animated custom emoji
		     *
		     * The `animated`, `name` and `id` group properties are present on the `exec` result of this expression
		     */
		    AnimatedEmoji: /<(?<animated>a):(?<name>\w{2,32}):(?<id>\d{17,20})>/,
		    /**
		     * Regular expression for matching strictly a static custom emoji
		     *
		     * The `name` and `id` group properties are present on the `exec` result of this expression
		     */
		    StaticEmoji: /<:(?<name>\w{2,32}):(?<id>\d{17,20})>/,
		    /**
		     * Regular expression for matching a timestamp, either default or custom styled
		     *
		     * The `timestamp` and `style` group properties are present on the `exec` result of this expression
		     */
		    // eslint-disable-next-line prefer-named-capture-group
		    Timestamp: /<t:(?<timestamp>-?\d{1,13})(:(?<style>[DFRTdft]))?>/,
		    /**
		     * Regular expression for matching strictly default styled timestamps
		     *
		     * The `timestamp` group property is present on the `exec` result of this expression
		     */
		    DefaultStyledTimestamp: /<t:(?<timestamp>-?\d{1,13})>/,
		    /**
		     * Regular expression for matching strictly custom styled timestamps
		     *
		     * The `timestamp` and `style` group properties are present on the `exec` result of this expression
		     */
		    StyledTimestamp: /<t:(?<timestamp>-?\d{1,13}):(?<style>[DFRTdft])>/,
		};
		/**
		 * Freezes the formatting patterns
		 *
		 * @internal
		 */
		Object.freeze(exports.FormattingPatterns);
		
	} (globals$5));
	return globals$5;
}

var globalsExports$2 = requireGlobals$2();
var mod$g = /*@__PURE__*/getDefaultExportFromCjs(globalsExports$2);

const FormattingPatterns$2 = mod$g.FormattingPatterns;

var globals$4 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	FormattingPatterns: FormattingPatterns$2,
	default: mod$g
});

var require$$1$2 = /*@__PURE__*/getAugmentedNamespace(globals$4);

var v10$t = {};

var common$a = {};

var hasRequiredCommon$a;

function requireCommon$a () {
	if (hasRequiredCommon$a) return common$a;
	hasRequiredCommon$a = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.PermissionFlagsBits = void 0;
		/**
		 * https://discord.com/developers/docs/topics/permissions#permissions-bitwise-permission-flags
		 *
		 * These flags are exported as `BigInt`s and NOT numbers. Wrapping them in `Number()`
		 * may cause issues, try to use BigInts as much as possible or modules that can
		 * replicate them in some way
		 */
		exports.PermissionFlagsBits = {
		    /**
		     * Allows creation of instant invites
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    CreateInstantInvite: 1n << 0n,
		    /**
		     * Allows kicking members
		     */
		    // eslint-disable-next-line sonarjs/no-identical-expressions
		    KickMembers: 1n << 1n,
		    /**
		     * Allows banning members
		     */
		    BanMembers: 1n << 2n,
		    /**
		     * Allows all permissions and bypasses channel permission overwrites
		     */
		    Administrator: 1n << 3n,
		    /**
		     * Allows management and editing of channels
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    ManageChannels: 1n << 4n,
		    /**
		     * Allows management and editing of the guild
		     */
		    ManageGuild: 1n << 5n,
		    /**
		     * Allows for the addition of reactions to messages
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    AddReactions: 1n << 6n,
		    /**
		     * Allows for viewing of audit logs
		     */
		    ViewAuditLog: 1n << 7n,
		    /**
		     * Allows for using priority speaker in a voice channel
		     *
		     * Applies to channel types: Voice
		     */
		    PrioritySpeaker: 1n << 8n,
		    /**
		     * Allows the user to go live
		     *
		     * Applies to channel types: Voice, Stage
		     */
		    Stream: 1n << 9n,
		    /**
		     * Allows guild members to view a channel, which includes reading messages in text channels and joining voice channels
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    ViewChannel: 1n << 10n,
		    /**
		     * Allows for sending messages in a channel and creating threads in a forum
		     * (does not allow sending messages in threads)
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    SendMessages: 1n << 11n,
		    /**
		     * Allows for sending of `/tts` messages
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    SendTTSMessages: 1n << 12n,
		    /**
		     * Allows for deletion of other users messages
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    ManageMessages: 1n << 13n,
		    /**
		     * Links sent by users with this permission will be auto-embedded
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    EmbedLinks: 1n << 14n,
		    /**
		     * Allows for uploading images and files
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    AttachFiles: 1n << 15n,
		    /**
		     * Allows for reading of message history
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    ReadMessageHistory: 1n << 16n,
		    /**
		     * Allows for using the `@everyone` tag to notify all users in a channel,
		     * and the `@here` tag to notify all online users in a channel
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    MentionEveryone: 1n << 17n,
		    /**
		     * Allows the usage of custom emojis from other servers
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    UseExternalEmojis: 1n << 18n,
		    /**
		     * Allows for viewing guild insights
		     */
		    ViewGuildInsights: 1n << 19n,
		    /**
		     * Allows for joining of a voice channel
		     *
		     * Applies to channel types: Voice, Stage
		     */
		    Connect: 1n << 20n,
		    /**
		     * Allows for speaking in a voice channel
		     *
		     * Applies to channel types: Voice
		     */
		    Speak: 1n << 21n,
		    /**
		     * Allows for muting members in a voice channel
		     *
		     * Applies to channel types: Voice, Stage
		     */
		    MuteMembers: 1n << 22n,
		    /**
		     * Allows for deafening of members in a voice channel
		     *
		     * Applies to channel types: Voice
		     */
		    DeafenMembers: 1n << 23n,
		    /**
		     * Allows for moving of members between voice channels
		     *
		     * Applies to channel types: Voice, Stage
		     */
		    MoveMembers: 1n << 24n,
		    /**
		     * Allows for using voice-activity-detection in a voice channel
		     *
		     * Applies to channel types: Voice
		     */
		    UseVAD: 1n << 25n,
		    /**
		     * Allows for modification of own nickname
		     */
		    ChangeNickname: 1n << 26n,
		    /**
		     * Allows for modification of other users nicknames
		     */
		    ManageNicknames: 1n << 27n,
		    /**
		     * Allows management and editing of roles
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    ManageRoles: 1n << 28n,
		    /**
		     * Allows management and editing of webhooks
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    ManageWebhooks: 1n << 29n,
		    /**
		     * Allows management and editing of emojis, stickers, and soundboard sounds
		     *
		     * @deprecated This is the old name for {@apilink PermissionFlagsBits#ManageGuildExpressions}
		     */
		    ManageEmojisAndStickers: 1n << 30n,
		    /**
		     * Allows for editing and deleting emojis, stickers, and soundboard sounds created by all users
		     */
		    ManageGuildExpressions: 1n << 30n,
		    /**
		     * Allows members to use application commands, including slash commands and context menu commands
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    UseApplicationCommands: 1n << 31n,
		    /**
		     * Allows for requesting to speak in stage channels
		     *
		     * Applies to channel types: Stage
		     */
		    RequestToSpeak: 1n << 32n,
		    /**
		     * Allows for editing and deleting scheduled events created by all users
		     *
		     * Applies to channel types: Voice, Stage
		     */
		    ManageEvents: 1n << 33n,
		    /**
		     * Allows for deleting and archiving threads, and viewing all private threads
		     *
		     * Applies to channel types: Text
		     */
		    ManageThreads: 1n << 34n,
		    /**
		     * Allows for creating public and announcement threads
		     *
		     * Applies to channel types: Text
		     */
		    CreatePublicThreads: 1n << 35n,
		    /**
		     * Allows for creating private threads
		     *
		     * Applies to channel types: Text
		     */
		    CreatePrivateThreads: 1n << 36n,
		    /**
		     * Allows the usage of custom stickers from other servers
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    UseExternalStickers: 1n << 37n,
		    /**
		     * Allows for sending messages in threads
		     *
		     * Applies to channel types: Text
		     */
		    SendMessagesInThreads: 1n << 38n,
		    /**
		     * Allows for using Activities (applications with the {@apilink ApplicationFlags.Embedded} flag) in a voice channel
		     *
		     * Applies to channel types: Voice
		     */
		    UseEmbeddedActivities: 1n << 39n,
		    /**
		     * Allows for timing out users to prevent them from sending or reacting to messages in chat and threads,
		     * and from speaking in voice and stage channels
		     */
		    ModerateMembers: 1n << 40n,
		    /**
		     * Allows for viewing role subscription insights
		     */
		    ViewCreatorMonetizationAnalytics: 1n << 41n,
		    /**
		     * Allows for using soundboard in a voice channel
		     *
		     * Applies to channel types: Voice
		     */
		    UseSoundboard: 1n << 42n,
		    /**
		     * Allows for creating emojis, stickers, and soundboard sounds, and editing and deleting those created by the current user
		     */
		    CreateGuildExpressions: 1n << 43n,
		    /**
		     * Allows for creating scheduled events, and editing and deleting those created by the current user
		     *
		     * Applies to channel types: Voice, Stage
		     */
		    CreateEvents: 1n << 44n,
		    /**
		     * Allows the usage of custom soundboard sounds from other servers
		     *
		     * Applies to channel types: Voice
		     */
		    UseExternalSounds: 1n << 45n,
		    /**
		     * Allows sending voice messages
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    SendVoiceMessages: 1n << 46n,
		    /**
		     * Allows sending polls
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    SendPolls: 1n << 49n,
		    /**
		     * Allows user-installed apps to send public responses. When disabled, users will still be allowed to use their apps but the responses will be ephemeral. This only applies to apps not also installed to the server
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    UseExternalApps: 1n << 50n,
		};
		/**
		 * Freeze the object of bits, preventing any modifications to it
		 *
		 * @internal
		 */
		Object.freeze(exports.PermissionFlagsBits);
		
	} (common$a));
	return common$a;
}

var application$5 = {};

var hasRequiredApplication$6;

function requireApplication$6 () {
	if (hasRequiredApplication$6) return application$5;
	hasRequiredApplication$6 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/application
	 */
	Object.defineProperty(application$5, "__esModule", { value: true });
	application$5.ApplicationRoleConnectionMetadataType = application$5.ApplicationFlags = void 0;
	/**
	 * https://discord.com/developers/docs/resources/application#application-object-application-flags
	 */
	var ApplicationFlags;
	(function (ApplicationFlags) {
	    /**
	     * @unstable This application flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ApplicationFlags[ApplicationFlags["EmbeddedReleased"] = 2] = "EmbeddedReleased";
	    /**
	     * @unstable This application flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ApplicationFlags[ApplicationFlags["ManagedEmoji"] = 4] = "ManagedEmoji";
	    /**
	     * @unstable This application flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ApplicationFlags[ApplicationFlags["EmbeddedIAP"] = 8] = "EmbeddedIAP";
	    /**
	     * @unstable This application flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ApplicationFlags[ApplicationFlags["GroupDMCreate"] = 16] = "GroupDMCreate";
	    /**
	     * Indicates if an app uses the Auto Moderation API
	     */
	    ApplicationFlags[ApplicationFlags["ApplicationAutoModerationRuleCreateBadge"] = 64] = "ApplicationAutoModerationRuleCreateBadge";
	    /**
	     * @unstable This application flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ApplicationFlags[ApplicationFlags["RPCHasConnected"] = 2048] = "RPCHasConnected";
	    /**
	     * Intent required for bots in 100 or more servers to receive `presence_update` events
	     */
	    ApplicationFlags[ApplicationFlags["GatewayPresence"] = 4096] = "GatewayPresence";
	    /**
	     * Intent required for bots in under 100 servers to receive `presence_update` events, found in Bot Settings
	     */
	    ApplicationFlags[ApplicationFlags["GatewayPresenceLimited"] = 8192] = "GatewayPresenceLimited";
	    /**
	     * Intent required for bots in 100 or more servers to receive member-related events like `guild_member_add`.
	     * See list of member-related events [under `GUILD_MEMBERS`](https://discord.com/developers/docs/topics/gateway#list-of-intents)
	     */
	    ApplicationFlags[ApplicationFlags["GatewayGuildMembers"] = 16384] = "GatewayGuildMembers";
	    /**
	     * Intent required for bots in under 100 servers to receive member-related events like `guild_member_add`, found in Bot Settings.
	     * See list of member-related events [under `GUILD_MEMBERS`](https://discord.com/developers/docs/topics/gateway#list-of-intents)
	     */
	    ApplicationFlags[ApplicationFlags["GatewayGuildMembersLimited"] = 32768] = "GatewayGuildMembersLimited";
	    /**
	     * Indicates unusual growth of an app that prevents verification
	     */
	    ApplicationFlags[ApplicationFlags["VerificationPendingGuildLimit"] = 65536] = "VerificationPendingGuildLimit";
	    /**
	     * Indicates if an app is embedded within the Discord client (currently unavailable publicly)
	     */
	    ApplicationFlags[ApplicationFlags["Embedded"] = 131072] = "Embedded";
	    /**
	     * Intent required for bots in 100 or more servers to receive [message content](https://support-dev.discord.com/hc/en-us/articles/4404772028055)
	     */
	    ApplicationFlags[ApplicationFlags["GatewayMessageContent"] = 262144] = "GatewayMessageContent";
	    /**
	     * Intent required for bots in under 100 servers to receive [message content](https://support-dev.discord.com/hc/en-us/articles/4404772028055),
	     * found in Bot Settings
	     */
	    ApplicationFlags[ApplicationFlags["GatewayMessageContentLimited"] = 524288] = "GatewayMessageContentLimited";
	    /**
	     * @unstable This application flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ApplicationFlags[ApplicationFlags["EmbeddedFirstParty"] = 1048576] = "EmbeddedFirstParty";
	    /**
	     * Indicates if an app has registered global [application commands](https://discord.com/developers/docs/interactions/application-commands)
	     */
	    ApplicationFlags[ApplicationFlags["ApplicationCommandBadge"] = 8388608] = "ApplicationCommandBadge";
	})(ApplicationFlags || (application$5.ApplicationFlags = ApplicationFlags = {}));
	/**
	 * https://discord.com/developers/docs/resources/application-role-connection-metadata#application-role-connection-metadata-object-application-role-connection-metadata-type
	 */
	var ApplicationRoleConnectionMetadataType;
	(function (ApplicationRoleConnectionMetadataType) {
	    /**
	     * The metadata value (`integer`) is less than or equal to the guild's configured value (`integer`)
	     */
	    ApplicationRoleConnectionMetadataType[ApplicationRoleConnectionMetadataType["IntegerLessThanOrEqual"] = 1] = "IntegerLessThanOrEqual";
	    /**
	     * The metadata value (`integer`) is greater than or equal to the guild's configured value (`integer`)
	     */
	    ApplicationRoleConnectionMetadataType[ApplicationRoleConnectionMetadataType["IntegerGreaterThanOrEqual"] = 2] = "IntegerGreaterThanOrEqual";
	    /**
	     * The metadata value (`integer`) is equal to the guild's configured value (`integer`)
	     */
	    ApplicationRoleConnectionMetadataType[ApplicationRoleConnectionMetadataType["IntegerEqual"] = 3] = "IntegerEqual";
	    /**
	     * The metadata value (`integer`) is not equal to the guild's configured value (`integer`)
	     */
	    ApplicationRoleConnectionMetadataType[ApplicationRoleConnectionMetadataType["IntegerNotEqual"] = 4] = "IntegerNotEqual";
	    /**
	     * The metadata value (`ISO8601 string`) is less than or equal to the guild's configured value (`integer`; days before current date)
	     */
	    ApplicationRoleConnectionMetadataType[ApplicationRoleConnectionMetadataType["DatetimeLessThanOrEqual"] = 5] = "DatetimeLessThanOrEqual";
	    /**
	     * The metadata value (`ISO8601 string`) is greater than or equal to the guild's configured value (`integer`; days before current date)
	     */
	    ApplicationRoleConnectionMetadataType[ApplicationRoleConnectionMetadataType["DatetimeGreaterThanOrEqual"] = 6] = "DatetimeGreaterThanOrEqual";
	    /**
	     * The metadata value (`integer`) is equal to the guild's configured value (`integer`; `1`)
	     */
	    ApplicationRoleConnectionMetadataType[ApplicationRoleConnectionMetadataType["BooleanEqual"] = 7] = "BooleanEqual";
	    /**
	     * The metadata value (`integer`) is not equal to the guild's configured value (`integer`; `1`)
	     */
	    ApplicationRoleConnectionMetadataType[ApplicationRoleConnectionMetadataType["BooleanNotEqual"] = 8] = "BooleanNotEqual";
	})(ApplicationRoleConnectionMetadataType || (application$5.ApplicationRoleConnectionMetadataType = ApplicationRoleConnectionMetadataType = {}));
	
	return application$5;
}

var auditLog$5 = {};

var hasRequiredAuditLog$5;

function requireAuditLog$5 () {
	if (hasRequiredAuditLog$5) return auditLog$5;
	hasRequiredAuditLog$5 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/audit-log
	 */
	Object.defineProperty(auditLog$5, "__esModule", { value: true });
	auditLog$5.AuditLogOptionsType = auditLog$5.AuditLogEvent = void 0;
	/**
	 * https://discord.com/developers/docs/resources/audit-log#audit-log-entry-object-audit-log-events
	 */
	var AuditLogEvent;
	(function (AuditLogEvent) {
	    AuditLogEvent[AuditLogEvent["GuildUpdate"] = 1] = "GuildUpdate";
	    AuditLogEvent[AuditLogEvent["ChannelCreate"] = 10] = "ChannelCreate";
	    AuditLogEvent[AuditLogEvent["ChannelUpdate"] = 11] = "ChannelUpdate";
	    AuditLogEvent[AuditLogEvent["ChannelDelete"] = 12] = "ChannelDelete";
	    AuditLogEvent[AuditLogEvent["ChannelOverwriteCreate"] = 13] = "ChannelOverwriteCreate";
	    AuditLogEvent[AuditLogEvent["ChannelOverwriteUpdate"] = 14] = "ChannelOverwriteUpdate";
	    AuditLogEvent[AuditLogEvent["ChannelOverwriteDelete"] = 15] = "ChannelOverwriteDelete";
	    AuditLogEvent[AuditLogEvent["MemberKick"] = 20] = "MemberKick";
	    AuditLogEvent[AuditLogEvent["MemberPrune"] = 21] = "MemberPrune";
	    AuditLogEvent[AuditLogEvent["MemberBanAdd"] = 22] = "MemberBanAdd";
	    AuditLogEvent[AuditLogEvent["MemberBanRemove"] = 23] = "MemberBanRemove";
	    AuditLogEvent[AuditLogEvent["MemberUpdate"] = 24] = "MemberUpdate";
	    AuditLogEvent[AuditLogEvent["MemberRoleUpdate"] = 25] = "MemberRoleUpdate";
	    AuditLogEvent[AuditLogEvent["MemberMove"] = 26] = "MemberMove";
	    AuditLogEvent[AuditLogEvent["MemberDisconnect"] = 27] = "MemberDisconnect";
	    AuditLogEvent[AuditLogEvent["BotAdd"] = 28] = "BotAdd";
	    AuditLogEvent[AuditLogEvent["RoleCreate"] = 30] = "RoleCreate";
	    AuditLogEvent[AuditLogEvent["RoleUpdate"] = 31] = "RoleUpdate";
	    AuditLogEvent[AuditLogEvent["RoleDelete"] = 32] = "RoleDelete";
	    AuditLogEvent[AuditLogEvent["InviteCreate"] = 40] = "InviteCreate";
	    AuditLogEvent[AuditLogEvent["InviteUpdate"] = 41] = "InviteUpdate";
	    AuditLogEvent[AuditLogEvent["InviteDelete"] = 42] = "InviteDelete";
	    AuditLogEvent[AuditLogEvent["WebhookCreate"] = 50] = "WebhookCreate";
	    AuditLogEvent[AuditLogEvent["WebhookUpdate"] = 51] = "WebhookUpdate";
	    AuditLogEvent[AuditLogEvent["WebhookDelete"] = 52] = "WebhookDelete";
	    AuditLogEvent[AuditLogEvent["EmojiCreate"] = 60] = "EmojiCreate";
	    AuditLogEvent[AuditLogEvent["EmojiUpdate"] = 61] = "EmojiUpdate";
	    AuditLogEvent[AuditLogEvent["EmojiDelete"] = 62] = "EmojiDelete";
	    AuditLogEvent[AuditLogEvent["MessageDelete"] = 72] = "MessageDelete";
	    AuditLogEvent[AuditLogEvent["MessageBulkDelete"] = 73] = "MessageBulkDelete";
	    AuditLogEvent[AuditLogEvent["MessagePin"] = 74] = "MessagePin";
	    AuditLogEvent[AuditLogEvent["MessageUnpin"] = 75] = "MessageUnpin";
	    AuditLogEvent[AuditLogEvent["IntegrationCreate"] = 80] = "IntegrationCreate";
	    AuditLogEvent[AuditLogEvent["IntegrationUpdate"] = 81] = "IntegrationUpdate";
	    AuditLogEvent[AuditLogEvent["IntegrationDelete"] = 82] = "IntegrationDelete";
	    AuditLogEvent[AuditLogEvent["StageInstanceCreate"] = 83] = "StageInstanceCreate";
	    AuditLogEvent[AuditLogEvent["StageInstanceUpdate"] = 84] = "StageInstanceUpdate";
	    AuditLogEvent[AuditLogEvent["StageInstanceDelete"] = 85] = "StageInstanceDelete";
	    AuditLogEvent[AuditLogEvent["StickerCreate"] = 90] = "StickerCreate";
	    AuditLogEvent[AuditLogEvent["StickerUpdate"] = 91] = "StickerUpdate";
	    AuditLogEvent[AuditLogEvent["StickerDelete"] = 92] = "StickerDelete";
	    AuditLogEvent[AuditLogEvent["GuildScheduledEventCreate"] = 100] = "GuildScheduledEventCreate";
	    AuditLogEvent[AuditLogEvent["GuildScheduledEventUpdate"] = 101] = "GuildScheduledEventUpdate";
	    AuditLogEvent[AuditLogEvent["GuildScheduledEventDelete"] = 102] = "GuildScheduledEventDelete";
	    AuditLogEvent[AuditLogEvent["ThreadCreate"] = 110] = "ThreadCreate";
	    AuditLogEvent[AuditLogEvent["ThreadUpdate"] = 111] = "ThreadUpdate";
	    AuditLogEvent[AuditLogEvent["ThreadDelete"] = 112] = "ThreadDelete";
	    AuditLogEvent[AuditLogEvent["ApplicationCommandPermissionUpdate"] = 121] = "ApplicationCommandPermissionUpdate";
	    AuditLogEvent[AuditLogEvent["AutoModerationRuleCreate"] = 140] = "AutoModerationRuleCreate";
	    AuditLogEvent[AuditLogEvent["AutoModerationRuleUpdate"] = 141] = "AutoModerationRuleUpdate";
	    AuditLogEvent[AuditLogEvent["AutoModerationRuleDelete"] = 142] = "AutoModerationRuleDelete";
	    AuditLogEvent[AuditLogEvent["AutoModerationBlockMessage"] = 143] = "AutoModerationBlockMessage";
	    AuditLogEvent[AuditLogEvent["AutoModerationFlagToChannel"] = 144] = "AutoModerationFlagToChannel";
	    AuditLogEvent[AuditLogEvent["AutoModerationUserCommunicationDisabled"] = 145] = "AutoModerationUserCommunicationDisabled";
	    AuditLogEvent[AuditLogEvent["CreatorMonetizationRequestCreated"] = 150] = "CreatorMonetizationRequestCreated";
	    AuditLogEvent[AuditLogEvent["CreatorMonetizationTermsAccepted"] = 151] = "CreatorMonetizationTermsAccepted";
	    AuditLogEvent[AuditLogEvent["OnboardingPromptCreate"] = 163] = "OnboardingPromptCreate";
	    AuditLogEvent[AuditLogEvent["OnboardingPromptUpdate"] = 164] = "OnboardingPromptUpdate";
	    AuditLogEvent[AuditLogEvent["OnboardingPromptDelete"] = 165] = "OnboardingPromptDelete";
	    AuditLogEvent[AuditLogEvent["OnboardingCreate"] = 166] = "OnboardingCreate";
	    AuditLogEvent[AuditLogEvent["OnboardingUpdate"] = 167] = "OnboardingUpdate";
	    AuditLogEvent[AuditLogEvent["HomeSettingsCreate"] = 190] = "HomeSettingsCreate";
	    AuditLogEvent[AuditLogEvent["HomeSettingsUpdate"] = 191] = "HomeSettingsUpdate";
	})(AuditLogEvent || (auditLog$5.AuditLogEvent = AuditLogEvent = {}));
	var AuditLogOptionsType;
	(function (AuditLogOptionsType) {
	    AuditLogOptionsType["Role"] = "0";
	    AuditLogOptionsType["Member"] = "1";
	})(AuditLogOptionsType || (auditLog$5.AuditLogOptionsType = AuditLogOptionsType = {}));
	
	return auditLog$5;
}

var autoModeration$5 = {};

var hasRequiredAutoModeration$5;

function requireAutoModeration$5 () {
	if (hasRequiredAutoModeration$5) return autoModeration$5;
	hasRequiredAutoModeration$5 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/auto-moderation
	 */
	Object.defineProperty(autoModeration$5, "__esModule", { value: true });
	autoModeration$5.AutoModerationActionType = autoModeration$5.AutoModerationRuleEventType = autoModeration$5.AutoModerationRuleKeywordPresetType = autoModeration$5.AutoModerationRuleTriggerType = void 0;
	/**
	 * https://discord.com/developers/docs/resources/auto-moderation#auto-moderation-rule-object-trigger-types
	 */
	var AutoModerationRuleTriggerType;
	(function (AutoModerationRuleTriggerType) {
	    /**
	     * Check if content contains words from a user defined list of keywords (Maximum of 6 per guild)
	     */
	    AutoModerationRuleTriggerType[AutoModerationRuleTriggerType["Keyword"] = 1] = "Keyword";
	    /**
	     * Check if content represents generic spam (Maximum of 1 per guild)
	     */
	    AutoModerationRuleTriggerType[AutoModerationRuleTriggerType["Spam"] = 3] = "Spam";
	    /**
	     * Check if content contains words from internal pre-defined wordsets (Maximum of 1 per guild)
	     */
	    AutoModerationRuleTriggerType[AutoModerationRuleTriggerType["KeywordPreset"] = 4] = "KeywordPreset";
	    /**
	     * Check if content contains more mentions than allowed (Maximum of 1 per guild)
	     */
	    AutoModerationRuleTriggerType[AutoModerationRuleTriggerType["MentionSpam"] = 5] = "MentionSpam";
	    /**
	     * Check if member profile contains words from a user defined list of keywords (Maximum of 1 per guild)
	     */
	    AutoModerationRuleTriggerType[AutoModerationRuleTriggerType["MemberProfile"] = 6] = "MemberProfile";
	})(AutoModerationRuleTriggerType || (autoModeration$5.AutoModerationRuleTriggerType = AutoModerationRuleTriggerType = {}));
	/**
	 * https://discord.com/developers/docs/resources/auto-moderation#auto-moderation-rule-object-keyword-preset-types
	 */
	var AutoModerationRuleKeywordPresetType;
	(function (AutoModerationRuleKeywordPresetType) {
	    /**
	     * Words that may be considered forms of swearing or cursing
	     */
	    AutoModerationRuleKeywordPresetType[AutoModerationRuleKeywordPresetType["Profanity"] = 1] = "Profanity";
	    /**
	     * Words that refer to sexually explicit behavior or activity
	     */
	    AutoModerationRuleKeywordPresetType[AutoModerationRuleKeywordPresetType["SexualContent"] = 2] = "SexualContent";
	    /**
	     * Personal insults or words that may be considered hate speech
	     */
	    AutoModerationRuleKeywordPresetType[AutoModerationRuleKeywordPresetType["Slurs"] = 3] = "Slurs";
	})(AutoModerationRuleKeywordPresetType || (autoModeration$5.AutoModerationRuleKeywordPresetType = AutoModerationRuleKeywordPresetType = {}));
	/**
	 * https://discord.com/developers/docs/resources/auto-moderation#auto-moderation-rule-object-event-types
	 */
	var AutoModerationRuleEventType;
	(function (AutoModerationRuleEventType) {
	    /**
	     * When a member sends or edits a message in the guild
	     */
	    AutoModerationRuleEventType[AutoModerationRuleEventType["MessageSend"] = 1] = "MessageSend";
	    /**
	     * When a member edits their profile
	     */
	    AutoModerationRuleEventType[AutoModerationRuleEventType["MemberUpdate"] = 2] = "MemberUpdate";
	})(AutoModerationRuleEventType || (autoModeration$5.AutoModerationRuleEventType = AutoModerationRuleEventType = {}));
	/**
	 * https://discord.com/developers/docs/resources/auto-moderation#auto-moderation-action-object-action-types
	 */
	var AutoModerationActionType;
	(function (AutoModerationActionType) {
	    /**
	     * Blocks a member's message and prevents it from being posted.
	     * A custom explanation can be specified and shown to members whenever their message is blocked
	     */
	    AutoModerationActionType[AutoModerationActionType["BlockMessage"] = 1] = "BlockMessage";
	    /**
	     * Logs user content to a specified channel
	     */
	    AutoModerationActionType[AutoModerationActionType["SendAlertMessage"] = 2] = "SendAlertMessage";
	    /**
	     * Timeout user for specified duration, this action type can be set if the bot has `MODERATE_MEMBERS` permission
	     */
	    AutoModerationActionType[AutoModerationActionType["Timeout"] = 3] = "Timeout";
	    /**
	     * Prevents a member from using text, voice, or other interactions
	     */
	    AutoModerationActionType[AutoModerationActionType["BlockMemberInteraction"] = 4] = "BlockMemberInteraction";
	})(AutoModerationActionType || (autoModeration$5.AutoModerationActionType = AutoModerationActionType = {}));
	
	return autoModeration$5;
}

var channel$8 = {};

var hasRequiredChannel$8;

function requireChannel$8 () {
	if (hasRequiredChannel$8) return channel$8;
	hasRequiredChannel$8 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/channel
	 */
	Object.defineProperty(channel$8, "__esModule", { value: true });
	channel$8.ChannelFlags = channel$8.SelectMenuDefaultValueType = channel$8.TextInputStyle = channel$8.ButtonStyle = channel$8.ComponentType = channel$8.AllowedMentionsTypes = channel$8.AttachmentFlags = channel$8.EmbedType = channel$8.ThreadMemberFlags = channel$8.ThreadAutoArchiveDuration = channel$8.OverwriteType = channel$8.MessageFlags = channel$8.MessageReferenceType = channel$8.MessageActivityType = channel$8.MessageType = channel$8.VideoQualityMode = channel$8.ChannelType = channel$8.ForumLayoutType = channel$8.SortOrderType = void 0;
	/**
	 * https://discord.com/developers/docs/resources/channel/#channel-object-sort-order-types
	 */
	var SortOrderType;
	(function (SortOrderType) {
	    /**
	     * Sort forum posts by activity
	     */
	    SortOrderType[SortOrderType["LatestActivity"] = 0] = "LatestActivity";
	    /**
	     * Sort forum posts by creation time (from most recent to oldest)
	     */
	    SortOrderType[SortOrderType["CreationDate"] = 1] = "CreationDate";
	})(SortOrderType || (channel$8.SortOrderType = SortOrderType = {}));
	/**
	 * https://discord.com/developers/docs/resources/channel/#channel-object-forum-layout-types
	 */
	var ForumLayoutType;
	(function (ForumLayoutType) {
	    /**
	     * No default has been set for forum channel
	     */
	    ForumLayoutType[ForumLayoutType["NotSet"] = 0] = "NotSet";
	    /**
	     * Display posts as a list
	     */
	    ForumLayoutType[ForumLayoutType["ListView"] = 1] = "ListView";
	    /**
	     * Display posts as a collection of tiles
	     */
	    ForumLayoutType[ForumLayoutType["GalleryView"] = 2] = "GalleryView";
	})(ForumLayoutType || (channel$8.ForumLayoutType = ForumLayoutType = {}));
	/**
	 * https://discord.com/developers/docs/resources/channel#channel-object-channel-types
	 */
	var ChannelType;
	(function (ChannelType) {
	    /**
	     * A text channel within a guild
	     */
	    ChannelType[ChannelType["GuildText"] = 0] = "GuildText";
	    /**
	     * A direct message between users
	     */
	    ChannelType[ChannelType["DM"] = 1] = "DM";
	    /**
	     * A voice channel within a guild
	     */
	    ChannelType[ChannelType["GuildVoice"] = 2] = "GuildVoice";
	    /**
	     * A direct message between multiple users
	     */
	    ChannelType[ChannelType["GroupDM"] = 3] = "GroupDM";
	    /**
	     * An organizational category that contains up to 50 channels
	     *
	     * See https://support.discord.com/hc/articles/115001580171
	     */
	    ChannelType[ChannelType["GuildCategory"] = 4] = "GuildCategory";
	    /**
	     * A channel that users can follow and crosspost into their own guild
	     *
	     * See https://support.discord.com/hc/articles/360032008192
	     */
	    ChannelType[ChannelType["GuildAnnouncement"] = 5] = "GuildAnnouncement";
	    /**
	     * A temporary sub-channel within a Guild Announcement channel
	     */
	    ChannelType[ChannelType["AnnouncementThread"] = 10] = "AnnouncementThread";
	    /**
	     * A temporary sub-channel within a Guild Text or Guild Forum channel
	     */
	    ChannelType[ChannelType["PublicThread"] = 11] = "PublicThread";
	    /**
	     * A temporary sub-channel within a Guild Text channel that is only viewable by those invited and those with the Manage Threads permission
	     */
	    ChannelType[ChannelType["PrivateThread"] = 12] = "PrivateThread";
	    /**
	     * A voice channel for hosting events with an audience
	     *
	     * See https://support.discord.com/hc/articles/1500005513722
	     */
	    ChannelType[ChannelType["GuildStageVoice"] = 13] = "GuildStageVoice";
	    /**
	     * The channel in a Student Hub containing the listed servers
	     *
	     * See https://support.discord.com/hc/articles/4406046651927
	     */
	    ChannelType[ChannelType["GuildDirectory"] = 14] = "GuildDirectory";
	    /**
	     * A channel that can only contain threads
	     */
	    ChannelType[ChannelType["GuildForum"] = 15] = "GuildForum";
	    /**
	     * A channel like forum channels but contains media for server subscriptions
	     *
	     * See https://creator-support.discord.com/hc/articles/14346342766743
	     */
	    ChannelType[ChannelType["GuildMedia"] = 16] = "GuildMedia";
	    // EVERYTHING BELOW THIS LINE SHOULD BE OLD NAMES FOR RENAMED ENUM MEMBERS //
	    /**
	     * A channel that users can follow and crosspost into their own guild
	     *
	     * @deprecated This is the old name for {@apilink ChannelType#GuildAnnouncement}
	     *
	     * See https://support.discord.com/hc/articles/360032008192
	     */
	    ChannelType[ChannelType["GuildNews"] = 5] = "GuildNews";
	    /**
	     * A temporary sub-channel within a Guild Announcement channel
	     *
	     * @deprecated This is the old name for {@apilink ChannelType#AnnouncementThread}
	     */
	    // eslint-disable-next-line @typescript-eslint/no-duplicate-enum-values
	    ChannelType[ChannelType["GuildNewsThread"] = 10] = "GuildNewsThread";
	    /**
	     * A temporary sub-channel within a Guild Text channel
	     *
	     * @deprecated This is the old name for {@apilink ChannelType#PublicThread}
	     */
	    ChannelType[ChannelType["GuildPublicThread"] = 11] = "GuildPublicThread";
	    /**
	     * A temporary sub-channel within a Guild Text channel that is only viewable by those invited and those with the Manage Threads permission
	     *
	     * @deprecated This is the old name for {@apilink ChannelType#PrivateThread}
	     */
	    ChannelType[ChannelType["GuildPrivateThread"] = 12] = "GuildPrivateThread";
	})(ChannelType || (channel$8.ChannelType = ChannelType = {}));
	var VideoQualityMode;
	(function (VideoQualityMode) {
	    /**
	     * Discord chooses the quality for optimal performance
	     */
	    VideoQualityMode[VideoQualityMode["Auto"] = 1] = "Auto";
	    /**
	     * 720p
	     */
	    VideoQualityMode[VideoQualityMode["Full"] = 2] = "Full";
	})(VideoQualityMode || (channel$8.VideoQualityMode = VideoQualityMode = {}));
	/**
	 * https://discord.com/developers/docs/resources/channel#message-object-message-types
	 */
	var MessageType;
	(function (MessageType) {
	    MessageType[MessageType["Default"] = 0] = "Default";
	    MessageType[MessageType["RecipientAdd"] = 1] = "RecipientAdd";
	    MessageType[MessageType["RecipientRemove"] = 2] = "RecipientRemove";
	    MessageType[MessageType["Call"] = 3] = "Call";
	    MessageType[MessageType["ChannelNameChange"] = 4] = "ChannelNameChange";
	    MessageType[MessageType["ChannelIconChange"] = 5] = "ChannelIconChange";
	    MessageType[MessageType["ChannelPinnedMessage"] = 6] = "ChannelPinnedMessage";
	    MessageType[MessageType["UserJoin"] = 7] = "UserJoin";
	    MessageType[MessageType["GuildBoost"] = 8] = "GuildBoost";
	    MessageType[MessageType["GuildBoostTier1"] = 9] = "GuildBoostTier1";
	    MessageType[MessageType["GuildBoostTier2"] = 10] = "GuildBoostTier2";
	    MessageType[MessageType["GuildBoostTier3"] = 11] = "GuildBoostTier3";
	    MessageType[MessageType["ChannelFollowAdd"] = 12] = "ChannelFollowAdd";
	    MessageType[MessageType["GuildDiscoveryDisqualified"] = 14] = "GuildDiscoveryDisqualified";
	    MessageType[MessageType["GuildDiscoveryRequalified"] = 15] = "GuildDiscoveryRequalified";
	    MessageType[MessageType["GuildDiscoveryGracePeriodInitialWarning"] = 16] = "GuildDiscoveryGracePeriodInitialWarning";
	    MessageType[MessageType["GuildDiscoveryGracePeriodFinalWarning"] = 17] = "GuildDiscoveryGracePeriodFinalWarning";
	    MessageType[MessageType["ThreadCreated"] = 18] = "ThreadCreated";
	    MessageType[MessageType["Reply"] = 19] = "Reply";
	    MessageType[MessageType["ChatInputCommand"] = 20] = "ChatInputCommand";
	    MessageType[MessageType["ThreadStarterMessage"] = 21] = "ThreadStarterMessage";
	    MessageType[MessageType["GuildInviteReminder"] = 22] = "GuildInviteReminder";
	    MessageType[MessageType["ContextMenuCommand"] = 23] = "ContextMenuCommand";
	    MessageType[MessageType["AutoModerationAction"] = 24] = "AutoModerationAction";
	    MessageType[MessageType["RoleSubscriptionPurchase"] = 25] = "RoleSubscriptionPurchase";
	    MessageType[MessageType["InteractionPremiumUpsell"] = 26] = "InteractionPremiumUpsell";
	    MessageType[MessageType["StageStart"] = 27] = "StageStart";
	    MessageType[MessageType["StageEnd"] = 28] = "StageEnd";
	    MessageType[MessageType["StageSpeaker"] = 29] = "StageSpeaker";
	    /**
	     * @unstable https://github.com/discord/discord-api-docs/pull/5927#discussion_r1107678548
	     */
	    MessageType[MessageType["StageRaiseHand"] = 30] = "StageRaiseHand";
	    MessageType[MessageType["StageTopic"] = 31] = "StageTopic";
	    MessageType[MessageType["GuildApplicationPremiumSubscription"] = 32] = "GuildApplicationPremiumSubscription";
	    MessageType[MessageType["GuildIncidentAlertModeEnabled"] = 36] = "GuildIncidentAlertModeEnabled";
	    MessageType[MessageType["GuildIncidentAlertModeDisabled"] = 37] = "GuildIncidentAlertModeDisabled";
	    MessageType[MessageType["GuildIncidentReportRaid"] = 38] = "GuildIncidentReportRaid";
	    MessageType[MessageType["GuildIncidentReportFalseAlarm"] = 39] = "GuildIncidentReportFalseAlarm";
	})(MessageType || (channel$8.MessageType = MessageType = {}));
	/**
	 * https://discord.com/developers/docs/resources/channel#message-object-message-activity-types
	 */
	var MessageActivityType;
	(function (MessageActivityType) {
	    MessageActivityType[MessageActivityType["Join"] = 1] = "Join";
	    MessageActivityType[MessageActivityType["Spectate"] = 2] = "Spectate";
	    MessageActivityType[MessageActivityType["Listen"] = 3] = "Listen";
	    MessageActivityType[MessageActivityType["JoinRequest"] = 5] = "JoinRequest";
	})(MessageActivityType || (channel$8.MessageActivityType = MessageActivityType = {}));
	/**
	 * https://discord.com/developers/docs/resources/channel#message-reference-types
	 */
	var MessageReferenceType;
	(function (MessageReferenceType) {
	    /**
	     * A standard reference used by replies
	     */
	    MessageReferenceType[MessageReferenceType["Default"] = 0] = "Default";
	    /**
	     * Reference used to point to a message at a point in time
	     */
	    MessageReferenceType[MessageReferenceType["Forward"] = 1] = "Forward";
	})(MessageReferenceType || (channel$8.MessageReferenceType = MessageReferenceType = {}));
	/**
	 * https://discord.com/developers/docs/resources/channel#message-object-message-flags
	 */
	var MessageFlags;
	(function (MessageFlags) {
	    /**
	     * This message has been published to subscribed channels (via Channel Following)
	     */
	    MessageFlags[MessageFlags["Crossposted"] = 1] = "Crossposted";
	    /**
	     * This message originated from a message in another channel (via Channel Following)
	     */
	    MessageFlags[MessageFlags["IsCrosspost"] = 2] = "IsCrosspost";
	    /**
	     * Do not include any embeds when serializing this message
	     */
	    MessageFlags[MessageFlags["SuppressEmbeds"] = 4] = "SuppressEmbeds";
	    /**
	     * The source message for this crosspost has been deleted (via Channel Following)
	     */
	    MessageFlags[MessageFlags["SourceMessageDeleted"] = 8] = "SourceMessageDeleted";
	    /**
	     * This message came from the urgent message system
	     */
	    MessageFlags[MessageFlags["Urgent"] = 16] = "Urgent";
	    /**
	     * This message has an associated thread, which shares its id
	     */
	    MessageFlags[MessageFlags["HasThread"] = 32] = "HasThread";
	    /**
	     * This message is only visible to the user who invoked the Interaction
	     */
	    MessageFlags[MessageFlags["Ephemeral"] = 64] = "Ephemeral";
	    /**
	     * This message is an Interaction Response and the bot is "thinking"
	     */
	    MessageFlags[MessageFlags["Loading"] = 128] = "Loading";
	    /**
	     * This message failed to mention some roles and add their members to the thread
	     */
	    MessageFlags[MessageFlags["FailedToMentionSomeRolesInThread"] = 256] = "FailedToMentionSomeRolesInThread";
	    /**
	     * @unstable This message flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    MessageFlags[MessageFlags["ShouldShowLinkNotDiscordWarning"] = 1024] = "ShouldShowLinkNotDiscordWarning";
	    /**
	     * This message will not trigger push and desktop notifications
	     */
	    MessageFlags[MessageFlags["SuppressNotifications"] = 4096] = "SuppressNotifications";
	    /**
	     * This message is a voice message
	     */
	    MessageFlags[MessageFlags["IsVoiceMessage"] = 8192] = "IsVoiceMessage";
	})(MessageFlags || (channel$8.MessageFlags = MessageFlags = {}));
	var OverwriteType;
	(function (OverwriteType) {
	    OverwriteType[OverwriteType["Role"] = 0] = "Role";
	    OverwriteType[OverwriteType["Member"] = 1] = "Member";
	})(OverwriteType || (channel$8.OverwriteType = OverwriteType = {}));
	var ThreadAutoArchiveDuration;
	(function (ThreadAutoArchiveDuration) {
	    ThreadAutoArchiveDuration[ThreadAutoArchiveDuration["OneHour"] = 60] = "OneHour";
	    ThreadAutoArchiveDuration[ThreadAutoArchiveDuration["OneDay"] = 1440] = "OneDay";
	    ThreadAutoArchiveDuration[ThreadAutoArchiveDuration["ThreeDays"] = 4320] = "ThreeDays";
	    ThreadAutoArchiveDuration[ThreadAutoArchiveDuration["OneWeek"] = 10080] = "OneWeek";
	})(ThreadAutoArchiveDuration || (channel$8.ThreadAutoArchiveDuration = ThreadAutoArchiveDuration = {}));
	var ThreadMemberFlags;
	(function (ThreadMemberFlags) {
	    /**
	     * @unstable This thread member flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ThreadMemberFlags[ThreadMemberFlags["HasInteracted"] = 1] = "HasInteracted";
	    /**
	     * @unstable This thread member flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ThreadMemberFlags[ThreadMemberFlags["AllMessages"] = 2] = "AllMessages";
	    /**
	     * @unstable This thread member flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ThreadMemberFlags[ThreadMemberFlags["OnlyMentions"] = 4] = "OnlyMentions";
	    /**
	     * @unstable This thread member flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ThreadMemberFlags[ThreadMemberFlags["NoMessages"] = 8] = "NoMessages";
	})(ThreadMemberFlags || (channel$8.ThreadMemberFlags = ThreadMemberFlags = {}));
	/**
	 * https://discord.com/developers/docs/resources/channel#embed-object-embed-types
	 *
	 * @deprecated *Embed types should be considered deprecated and might be removed in a future API version*
	 */
	var EmbedType;
	(function (EmbedType) {
	    /**
	     * Generic embed rendered from embed attributes
	     */
	    EmbedType["Rich"] = "rich";
	    /**
	     * Image embed
	     */
	    EmbedType["Image"] = "image";
	    /**
	     * Video embed
	     */
	    EmbedType["Video"] = "video";
	    /**
	     * Animated gif image embed rendered as a video embed
	     */
	    EmbedType["GIFV"] = "gifv";
	    /**
	     * Article embed
	     */
	    EmbedType["Article"] = "article";
	    /**
	     * Link embed
	     */
	    EmbedType["Link"] = "link";
	    /**
	     * Auto moderation alert embed
	     *
	     * @unstable This embed type is currently not documented by Discord, but it is returned in the auto moderation system messages.
	     */
	    EmbedType["AutoModerationMessage"] = "auto_moderation_message";
	})(EmbedType || (channel$8.EmbedType = EmbedType = {}));
	/**
	 * https://discord.com/developers/docs/resources/channel#attachment-object-attachment-structure-attachment-flags
	 */
	var AttachmentFlags;
	(function (AttachmentFlags) {
	    /**
	     * This attachment has been edited using the remix feature on mobile
	     */
	    AttachmentFlags[AttachmentFlags["IsRemix"] = 4] = "IsRemix";
	})(AttachmentFlags || (channel$8.AttachmentFlags = AttachmentFlags = {}));
	/**
	 * https://discord.com/developers/docs/resources/channel#allowed-mentions-object-allowed-mention-types
	 */
	var AllowedMentionsTypes;
	(function (AllowedMentionsTypes) {
	    /**
	     * Controls @everyone and @here mentions
	     */
	    AllowedMentionsTypes["Everyone"] = "everyone";
	    /**
	     * Controls role mentions
	     */
	    AllowedMentionsTypes["Role"] = "roles";
	    /**
	     * Controls user mentions
	     */
	    AllowedMentionsTypes["User"] = "users";
	})(AllowedMentionsTypes || (channel$8.AllowedMentionsTypes = AllowedMentionsTypes = {}));
	/**
	 * https://discord.com/developers/docs/interactions/message-components#component-object-component-types
	 */
	var ComponentType;
	(function (ComponentType) {
	    /**
	     * Action Row component
	     */
	    ComponentType[ComponentType["ActionRow"] = 1] = "ActionRow";
	    /**
	     * Button component
	     */
	    ComponentType[ComponentType["Button"] = 2] = "Button";
	    /**
	     * Select menu for picking from defined text options
	     */
	    ComponentType[ComponentType["StringSelect"] = 3] = "StringSelect";
	    /**
	     * Text Input component
	     */
	    ComponentType[ComponentType["TextInput"] = 4] = "TextInput";
	    /**
	     * Select menu for users
	     */
	    ComponentType[ComponentType["UserSelect"] = 5] = "UserSelect";
	    /**
	     * Select menu for roles
	     */
	    ComponentType[ComponentType["RoleSelect"] = 6] = "RoleSelect";
	    /**
	     * Select menu for users and roles
	     */
	    ComponentType[ComponentType["MentionableSelect"] = 7] = "MentionableSelect";
	    /**
	     * Select menu for channels
	     */
	    ComponentType[ComponentType["ChannelSelect"] = 8] = "ChannelSelect";
	    // EVERYTHING BELOW THIS LINE SHOULD BE OLD NAMES FOR RENAMED ENUM MEMBERS //
	    /**
	     * Select menu for picking from defined text options
	     *
	     * @deprecated This is the old name for {@apilink ComponentType#StringSelect}
	     */
	    ComponentType[ComponentType["SelectMenu"] = 3] = "SelectMenu";
	})(ComponentType || (channel$8.ComponentType = ComponentType = {}));
	/**
	 * https://discord.com/developers/docs/interactions/message-components#button-object-button-styles
	 */
	var ButtonStyle;
	(function (ButtonStyle) {
	    ButtonStyle[ButtonStyle["Primary"] = 1] = "Primary";
	    ButtonStyle[ButtonStyle["Secondary"] = 2] = "Secondary";
	    ButtonStyle[ButtonStyle["Success"] = 3] = "Success";
	    ButtonStyle[ButtonStyle["Danger"] = 4] = "Danger";
	    ButtonStyle[ButtonStyle["Link"] = 5] = "Link";
	    ButtonStyle[ButtonStyle["Premium"] = 6] = "Premium";
	})(ButtonStyle || (channel$8.ButtonStyle = ButtonStyle = {}));
	/**
	 * https://discord.com/developers/docs/interactions/message-components#text-inputs-text-input-styles
	 */
	var TextInputStyle;
	(function (TextInputStyle) {
	    TextInputStyle[TextInputStyle["Short"] = 1] = "Short";
	    TextInputStyle[TextInputStyle["Paragraph"] = 2] = "Paragraph";
	})(TextInputStyle || (channel$8.TextInputStyle = TextInputStyle = {}));
	/**
	 * https://discord.com/developers/docs/interactions/message-components#select-menu-object-select-default-value-structure
	 */
	var SelectMenuDefaultValueType;
	(function (SelectMenuDefaultValueType) {
	    SelectMenuDefaultValueType["Channel"] = "channel";
	    SelectMenuDefaultValueType["Role"] = "role";
	    SelectMenuDefaultValueType["User"] = "user";
	})(SelectMenuDefaultValueType || (channel$8.SelectMenuDefaultValueType = SelectMenuDefaultValueType = {}));
	/**
	 * https://discord.com/developers/docs/resources/channel#channel-object-channel-flags
	 */
	var ChannelFlags;
	(function (ChannelFlags) {
	    /**
	     * @unstable This channel flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ChannelFlags[ChannelFlags["GuildFeedRemoved"] = 1] = "GuildFeedRemoved";
	    /**
	     * This thread is pinned to the top of its parent forum channel
	     */
	    ChannelFlags[ChannelFlags["Pinned"] = 2] = "Pinned";
	    /**
	     * @unstable This channel flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ChannelFlags[ChannelFlags["ActiveChannelsRemoved"] = 4] = "ActiveChannelsRemoved";
	    /**
	     * Whether a tag is required to be specified when creating a thread in a forum channel.
	     * Tags are specified in the `applied_tags` field
	     */
	    ChannelFlags[ChannelFlags["RequireTag"] = 16] = "RequireTag";
	    /**
	     * @unstable This channel flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ChannelFlags[ChannelFlags["IsSpam"] = 32] = "IsSpam";
	    /**
	     * @unstable This channel flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ChannelFlags[ChannelFlags["IsGuildResourceChannel"] = 128] = "IsGuildResourceChannel";
	    /**
	     * @unstable This channel flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ChannelFlags[ChannelFlags["ClydeAI"] = 256] = "ClydeAI";
	    /**
	     * @unstable This channel flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ChannelFlags[ChannelFlags["IsScheduledForDeletion"] = 512] = "IsScheduledForDeletion";
	    /**
	     * Whether media download options are hidden.
	     */
	    ChannelFlags[ChannelFlags["HideMediaDownloadOptions"] = 32768] = "HideMediaDownloadOptions";
	})(ChannelFlags || (channel$8.ChannelFlags = ChannelFlags = {}));
	
	return channel$8;
}

var emoji$5 = {};

var hasRequiredEmoji$6;

function requireEmoji$6 () {
	if (hasRequiredEmoji$6) return emoji$5;
	hasRequiredEmoji$6 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/emoji
	 */
	Object.defineProperty(emoji$5, "__esModule", { value: true });
	
	return emoji$5;
}

var gateway$5 = {};

var hasRequiredGateway$5;

function requireGateway$5 () {
	if (hasRequiredGateway$5) return gateway$5;
	hasRequiredGateway$5 = 1;
	/**
	 * Types extracted from
	 *  - https://discord.com/developers/docs/topics/gateway
	 *  - https://discord.com/developers/docs/topics/gateway-events
	 */
	Object.defineProperty(gateway$5, "__esModule", { value: true });
	gateway$5.ActivityFlags = gateway$5.ActivityType = gateway$5.ActivityPlatform = gateway$5.PresenceUpdateStatus = void 0;
	/**
	 * https://discord.com/developers/docs/topics/gateway-events#update-presence-status-types
	 */
	var PresenceUpdateStatus;
	(function (PresenceUpdateStatus) {
	    PresenceUpdateStatus["Online"] = "online";
	    PresenceUpdateStatus["DoNotDisturb"] = "dnd";
	    PresenceUpdateStatus["Idle"] = "idle";
	    /**
	     * Invisible and shown as offline
	     */
	    PresenceUpdateStatus["Invisible"] = "invisible";
	    PresenceUpdateStatus["Offline"] = "offline";
	})(PresenceUpdateStatus || (gateway$5.PresenceUpdateStatus = PresenceUpdateStatus = {}));
	/**
	 * @unstable This enum is currently not documented by Discord but has known values which we will try to keep up to date.
	 * Values might be added or removed without a major version bump.
	 */
	var ActivityPlatform;
	(function (ActivityPlatform) {
	    ActivityPlatform["Desktop"] = "desktop";
	    ActivityPlatform["Xbox"] = "xbox";
	    ActivityPlatform["Samsung"] = "samsung";
	    ActivityPlatform["IOS"] = "ios";
	    ActivityPlatform["Android"] = "android";
	    ActivityPlatform["Embedded"] = "embedded";
	    ActivityPlatform["PS4"] = "ps4";
	    ActivityPlatform["PS5"] = "ps5";
	})(ActivityPlatform || (gateway$5.ActivityPlatform = ActivityPlatform = {}));
	/**
	 * https://discord.com/developers/docs/topics/gateway-events#activity-object-activity-types
	 */
	var ActivityType;
	(function (ActivityType) {
	    /**
	     * Playing {game}
	     */
	    ActivityType[ActivityType["Playing"] = 0] = "Playing";
	    /**
	     * Streaming {details}
	     */
	    ActivityType[ActivityType["Streaming"] = 1] = "Streaming";
	    /**
	     * Listening to {name}
	     */
	    ActivityType[ActivityType["Listening"] = 2] = "Listening";
	    /**
	     * Watching {details}
	     */
	    ActivityType[ActivityType["Watching"] = 3] = "Watching";
	    /**
	     * {emoji} {state}
	     */
	    ActivityType[ActivityType["Custom"] = 4] = "Custom";
	    /**
	     * Competing in {name}
	     */
	    ActivityType[ActivityType["Competing"] = 5] = "Competing";
	})(ActivityType || (gateway$5.ActivityType = ActivityType = {}));
	/**
	 * https://discord.com/developers/docs/topics/gateway-events#activity-object-activity-flags
	 */
	var ActivityFlags;
	(function (ActivityFlags) {
	    ActivityFlags[ActivityFlags["Instance"] = 1] = "Instance";
	    ActivityFlags[ActivityFlags["Join"] = 2] = "Join";
	    ActivityFlags[ActivityFlags["Spectate"] = 4] = "Spectate";
	    ActivityFlags[ActivityFlags["JoinRequest"] = 8] = "JoinRequest";
	    ActivityFlags[ActivityFlags["Sync"] = 16] = "Sync";
	    ActivityFlags[ActivityFlags["Play"] = 32] = "Play";
	    ActivityFlags[ActivityFlags["PartyPrivacyFriends"] = 64] = "PartyPrivacyFriends";
	    ActivityFlags[ActivityFlags["PartyPrivacyVoiceChannel"] = 128] = "PartyPrivacyVoiceChannel";
	    ActivityFlags[ActivityFlags["Embedded"] = 256] = "Embedded";
	})(ActivityFlags || (gateway$5.ActivityFlags = ActivityFlags = {}));
	
	return gateway$5;
}

var guild$5 = {};

var hasRequiredGuild$6;

function requireGuild$6 () {
	if (hasRequiredGuild$6) return guild$5;
	hasRequiredGuild$6 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/guild
	 */
	Object.defineProperty(guild$5, "__esModule", { value: true });
	guild$5.GuildOnboardingPromptType = guild$5.GuildOnboardingMode = guild$5.MembershipScreeningFieldType = guild$5.GuildWidgetStyle = guild$5.IntegrationExpireBehavior = guild$5.GuildMemberFlags = guild$5.GuildFeature = guild$5.GuildSystemChannelFlags = guild$5.GuildHubType = guild$5.GuildPremiumTier = guild$5.GuildVerificationLevel = guild$5.GuildNSFWLevel = guild$5.GuildMFALevel = guild$5.GuildExplicitContentFilter = guild$5.GuildDefaultMessageNotifications = void 0;
	/**
	 * https://discord.com/developers/docs/resources/guild#guild-object-default-message-notification-level
	 */
	var GuildDefaultMessageNotifications;
	(function (GuildDefaultMessageNotifications) {
	    GuildDefaultMessageNotifications[GuildDefaultMessageNotifications["AllMessages"] = 0] = "AllMessages";
	    GuildDefaultMessageNotifications[GuildDefaultMessageNotifications["OnlyMentions"] = 1] = "OnlyMentions";
	})(GuildDefaultMessageNotifications || (guild$5.GuildDefaultMessageNotifications = GuildDefaultMessageNotifications = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild#guild-object-explicit-content-filter-level
	 */
	var GuildExplicitContentFilter;
	(function (GuildExplicitContentFilter) {
	    GuildExplicitContentFilter[GuildExplicitContentFilter["Disabled"] = 0] = "Disabled";
	    GuildExplicitContentFilter[GuildExplicitContentFilter["MembersWithoutRoles"] = 1] = "MembersWithoutRoles";
	    GuildExplicitContentFilter[GuildExplicitContentFilter["AllMembers"] = 2] = "AllMembers";
	})(GuildExplicitContentFilter || (guild$5.GuildExplicitContentFilter = GuildExplicitContentFilter = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild#guild-object-mfa-level
	 */
	var GuildMFALevel;
	(function (GuildMFALevel) {
	    GuildMFALevel[GuildMFALevel["None"] = 0] = "None";
	    GuildMFALevel[GuildMFALevel["Elevated"] = 1] = "Elevated";
	})(GuildMFALevel || (guild$5.GuildMFALevel = GuildMFALevel = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild#guild-object-guild-nsfw-level
	 */
	var GuildNSFWLevel;
	(function (GuildNSFWLevel) {
	    GuildNSFWLevel[GuildNSFWLevel["Default"] = 0] = "Default";
	    GuildNSFWLevel[GuildNSFWLevel["Explicit"] = 1] = "Explicit";
	    GuildNSFWLevel[GuildNSFWLevel["Safe"] = 2] = "Safe";
	    GuildNSFWLevel[GuildNSFWLevel["AgeRestricted"] = 3] = "AgeRestricted";
	})(GuildNSFWLevel || (guild$5.GuildNSFWLevel = GuildNSFWLevel = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild#guild-object-verification-level
	 */
	var GuildVerificationLevel;
	(function (GuildVerificationLevel) {
	    /**
	     * Unrestricted
	     */
	    GuildVerificationLevel[GuildVerificationLevel["None"] = 0] = "None";
	    /**
	     * Must have verified email on account
	     */
	    GuildVerificationLevel[GuildVerificationLevel["Low"] = 1] = "Low";
	    /**
	     * Must be registered on Discord for longer than 5 minutes
	     */
	    GuildVerificationLevel[GuildVerificationLevel["Medium"] = 2] = "Medium";
	    /**
	     * Must be a member of the guild for longer than 10 minutes
	     */
	    GuildVerificationLevel[GuildVerificationLevel["High"] = 3] = "High";
	    /**
	     * Must have a verified phone number
	     */
	    GuildVerificationLevel[GuildVerificationLevel["VeryHigh"] = 4] = "VeryHigh";
	})(GuildVerificationLevel || (guild$5.GuildVerificationLevel = GuildVerificationLevel = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild#guild-object-premium-tier
	 */
	var GuildPremiumTier;
	(function (GuildPremiumTier) {
	    GuildPremiumTier[GuildPremiumTier["None"] = 0] = "None";
	    GuildPremiumTier[GuildPremiumTier["Tier1"] = 1] = "Tier1";
	    GuildPremiumTier[GuildPremiumTier["Tier2"] = 2] = "Tier2";
	    GuildPremiumTier[GuildPremiumTier["Tier3"] = 3] = "Tier3";
	})(GuildPremiumTier || (guild$5.GuildPremiumTier = GuildPremiumTier = {}));
	var GuildHubType;
	(function (GuildHubType) {
	    GuildHubType[GuildHubType["Default"] = 0] = "Default";
	    GuildHubType[GuildHubType["HighSchool"] = 1] = "HighSchool";
	    GuildHubType[GuildHubType["College"] = 2] = "College";
	})(GuildHubType || (guild$5.GuildHubType = GuildHubType = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild#guild-object-system-channel-flags
	 */
	var GuildSystemChannelFlags;
	(function (GuildSystemChannelFlags) {
	    /**
	     * Suppress member join notifications
	     */
	    GuildSystemChannelFlags[GuildSystemChannelFlags["SuppressJoinNotifications"] = 1] = "SuppressJoinNotifications";
	    /**
	     * Suppress server boost notifications
	     */
	    GuildSystemChannelFlags[GuildSystemChannelFlags["SuppressPremiumSubscriptions"] = 2] = "SuppressPremiumSubscriptions";
	    /**
	     * Suppress server setup tips
	     */
	    GuildSystemChannelFlags[GuildSystemChannelFlags["SuppressGuildReminderNotifications"] = 4] = "SuppressGuildReminderNotifications";
	    /**
	     * Hide member join sticker reply buttons
	     */
	    GuildSystemChannelFlags[GuildSystemChannelFlags["SuppressJoinNotificationReplies"] = 8] = "SuppressJoinNotificationReplies";
	    /**
	     * Suppress role subscription purchase and renewal notifications
	     */
	    GuildSystemChannelFlags[GuildSystemChannelFlags["SuppressRoleSubscriptionPurchaseNotifications"] = 16] = "SuppressRoleSubscriptionPurchaseNotifications";
	    /**
	     * Hide role subscription sticker reply buttons
	     */
	    GuildSystemChannelFlags[GuildSystemChannelFlags["SuppressRoleSubscriptionPurchaseNotificationReplies"] = 32] = "SuppressRoleSubscriptionPurchaseNotificationReplies";
	})(GuildSystemChannelFlags || (guild$5.GuildSystemChannelFlags = GuildSystemChannelFlags = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild#guild-object-guild-features
	 */
	var GuildFeature;
	(function (GuildFeature) {
	    /**
	     * Guild has access to set an animated guild banner image
	     */
	    GuildFeature["AnimatedBanner"] = "ANIMATED_BANNER";
	    /**
	     * Guild has access to set an animated guild icon
	     */
	    GuildFeature["AnimatedIcon"] = "ANIMATED_ICON";
	    /**
	     * Guild is using the old permissions configuration behavior
	     *
	     * See https://discord.com/developers/docs/change-log#upcoming-application-command-permission-changes
	     */
	    GuildFeature["ApplicationCommandPermissionsV2"] = "APPLICATION_COMMAND_PERMISSIONS_V2";
	    /**
	     * Guild has set up auto moderation rules
	     */
	    GuildFeature["AutoModeration"] = "AUTO_MODERATION";
	    /**
	     * Guild has access to set a guild banner image
	     */
	    GuildFeature["Banner"] = "BANNER";
	    /**
	     * Guild can enable welcome screen, Membership Screening and discovery, and receives community updates
	     */
	    GuildFeature["Community"] = "COMMUNITY";
	    /**
	     * Guild has enabled monetization
	     */
	    GuildFeature["CreatorMonetizableProvisional"] = "CREATOR_MONETIZABLE_PROVISIONAL";
	    /**
	     * Guild has enabled the role subscription promo page
	     */
	    GuildFeature["CreatorStorePage"] = "CREATOR_STORE_PAGE";
	    /**
	     * Guild has been set as a support server on the App Directory
	     */
	    GuildFeature["DeveloperSupportServer"] = "DEVELOPER_SUPPORT_SERVER";
	    /**
	     * Guild is able to be discovered in the directory
	     */
	    GuildFeature["Discoverable"] = "DISCOVERABLE";
	    /**
	     * Guild is able to be featured in the directory
	     */
	    GuildFeature["Featurable"] = "FEATURABLE";
	    /**
	     * Guild is listed in a directory channel
	     */
	    GuildFeature["HasDirectoryEntry"] = "HAS_DIRECTORY_ENTRY";
	    /**
	     * Guild is a Student Hub
	     *
	     * See https://support.discord.com/hc/articles/4406046651927
	     *
	     * @unstable This feature is currently not documented by Discord, but has known value
	     */
	    GuildFeature["Hub"] = "HUB";
	    /**
	     * Guild has disabled invite usage, preventing users from joining
	     */
	    GuildFeature["InvitesDisabled"] = "INVITES_DISABLED";
	    /**
	     * Guild has access to set an invite splash background
	     */
	    GuildFeature["InviteSplash"] = "INVITE_SPLASH";
	    /**
	     * Guild is in a Student Hub
	     *
	     * See https://support.discord.com/hc/articles/4406046651927
	     *
	     * @unstable This feature is currently not documented by Discord, but has known value
	     */
	    GuildFeature["LinkedToHub"] = "LINKED_TO_HUB";
	    /**
	     * Guild has enabled Membership Screening
	     */
	    GuildFeature["MemberVerificationGateEnabled"] = "MEMBER_VERIFICATION_GATE_ENABLED";
	    /**
	     * Guild has enabled monetization
	     *
	     * @unstable This feature is no longer documented by Discord
	     */
	    GuildFeature["MonetizationEnabled"] = "MONETIZATION_ENABLED";
	    /**
	     * Guild has increased custom sticker slots
	     */
	    GuildFeature["MoreStickers"] = "MORE_STICKERS";
	    /**
	     * Guild has access to create news channels
	     */
	    GuildFeature["News"] = "NEWS";
	    /**
	     * Guild is partnered
	     */
	    GuildFeature["Partnered"] = "PARTNERED";
	    /**
	     * Guild can be previewed before joining via Membership Screening or the directory
	     */
	    GuildFeature["PreviewEnabled"] = "PREVIEW_ENABLED";
	    /**
	     * Guild has access to create private threads
	     */
	    GuildFeature["PrivateThreads"] = "PRIVATE_THREADS";
	    /**
	     * Guild has disabled alerts for join raids in the configured safety alerts channel
	     */
	    GuildFeature["RaidAlertsDisabled"] = "RAID_ALERTS_DISABLED";
	    GuildFeature["RelayEnabled"] = "RELAY_ENABLED";
	    /**
	     * Guild is able to set role icons
	     */
	    GuildFeature["RoleIcons"] = "ROLE_ICONS";
	    /**
	     * Guild has role subscriptions that can be purchased
	     */
	    GuildFeature["RoleSubscriptionsAvailableForPurchase"] = "ROLE_SUBSCRIPTIONS_AVAILABLE_FOR_PURCHASE";
	    /**
	     * Guild has enabled role subscriptions
	     */
	    GuildFeature["RoleSubscriptionsEnabled"] = "ROLE_SUBSCRIPTIONS_ENABLED";
	    /**
	     * Guild has enabled ticketed events
	     */
	    GuildFeature["TicketedEventsEnabled"] = "TICKETED_EVENTS_ENABLED";
	    /**
	     * Guild has access to set a vanity URL
	     */
	    GuildFeature["VanityURL"] = "VANITY_URL";
	    /**
	     * Guild is verified
	     */
	    GuildFeature["Verified"] = "VERIFIED";
	    /**
	     * Guild has access to set 384kbps bitrate in voice (previously VIP voice servers)
	     */
	    GuildFeature["VIPRegions"] = "VIP_REGIONS";
	    /**
	     * Guild has enabled the welcome screen
	     */
	    GuildFeature["WelcomeScreenEnabled"] = "WELCOME_SCREEN_ENABLED";
	})(GuildFeature || (guild$5.GuildFeature = GuildFeature = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild#guild-member-object-guild-member-flags
	 */
	var GuildMemberFlags;
	(function (GuildMemberFlags) {
	    /**
	     * Member has left and rejoined the guild
	     */
	    GuildMemberFlags[GuildMemberFlags["DidRejoin"] = 1] = "DidRejoin";
	    /**
	     * Member has completed onboarding
	     */
	    GuildMemberFlags[GuildMemberFlags["CompletedOnboarding"] = 2] = "CompletedOnboarding";
	    /**
	     * Member bypasses guild verification requirements
	     */
	    GuildMemberFlags[GuildMemberFlags["BypassesVerification"] = 4] = "BypassesVerification";
	    /**
	     * Member has started onboarding
	     */
	    GuildMemberFlags[GuildMemberFlags["StartedOnboarding"] = 8] = "StartedOnboarding";
	    /**
	     * @unstable This guild member flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    GuildMemberFlags[GuildMemberFlags["StartedHomeActions"] = 32] = "StartedHomeActions";
	    /**
	     * @unstable This guild member flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    GuildMemberFlags[GuildMemberFlags["CompletedHomeActions"] = 64] = "CompletedHomeActions";
	    /**
	     * @unstable This guild member flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    GuildMemberFlags[GuildMemberFlags["AutomodQuarantinedUsernameOrGuildNickname"] = 128] = "AutomodQuarantinedUsernameOrGuildNickname";
	    /**
	     * @unstable This guild member flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    GuildMemberFlags[GuildMemberFlags["AutomodQuarantinedBio"] = 256] = "AutomodQuarantinedBio";
	})(GuildMemberFlags || (guild$5.GuildMemberFlags = GuildMemberFlags = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild#integration-object-integration-expire-behaviors
	 */
	var IntegrationExpireBehavior;
	(function (IntegrationExpireBehavior) {
	    IntegrationExpireBehavior[IntegrationExpireBehavior["RemoveRole"] = 0] = "RemoveRole";
	    IntegrationExpireBehavior[IntegrationExpireBehavior["Kick"] = 1] = "Kick";
	})(IntegrationExpireBehavior || (guild$5.IntegrationExpireBehavior = IntegrationExpireBehavior = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild#get-guild-widget-image-widget-style-options
	 */
	var GuildWidgetStyle;
	(function (GuildWidgetStyle) {
	    /**
	     * Shield style widget with Discord icon and guild members online count
	     */
	    GuildWidgetStyle["Shield"] = "shield";
	    /**
	     * Large image with guild icon, name and online count. "POWERED BY DISCORD" as the footer of the widget
	     */
	    GuildWidgetStyle["Banner1"] = "banner1";
	    /**
	     * Smaller widget style with guild icon, name and online count. Split on the right with Discord logo
	     */
	    GuildWidgetStyle["Banner2"] = "banner2";
	    /**
	     * Large image with guild icon, name and online count. In the footer, Discord logo on the left and "Chat Now" on the right
	     */
	    GuildWidgetStyle["Banner3"] = "banner3";
	    /**
	     * Large Discord logo at the top of the widget. Guild icon, name and online count in the middle portion of the widget
	     * and a "JOIN MY SERVER" button at the bottom
	     */
	    GuildWidgetStyle["Banner4"] = "banner4";
	})(GuildWidgetStyle || (guild$5.GuildWidgetStyle = GuildWidgetStyle = {}));
	var MembershipScreeningFieldType;
	(function (MembershipScreeningFieldType) {
	    /**
	     * Server Rules
	     */
	    MembershipScreeningFieldType["Terms"] = "TERMS";
	})(MembershipScreeningFieldType || (guild$5.MembershipScreeningFieldType = MembershipScreeningFieldType = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild#guild-onboarding-object-onboarding-mode
	 */
	var GuildOnboardingMode;
	(function (GuildOnboardingMode) {
	    /**
	     * Counts only Default Channels towards constraints
	     */
	    GuildOnboardingMode[GuildOnboardingMode["OnboardingDefault"] = 0] = "OnboardingDefault";
	    /**
	     * Counts Default Channels and Questions towards constraints
	     */
	    GuildOnboardingMode[GuildOnboardingMode["OnboardingAdvanced"] = 1] = "OnboardingAdvanced";
	})(GuildOnboardingMode || (guild$5.GuildOnboardingMode = GuildOnboardingMode = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild#guild-onboarding-object-prompt-types
	 */
	var GuildOnboardingPromptType;
	(function (GuildOnboardingPromptType) {
	    GuildOnboardingPromptType[GuildOnboardingPromptType["MultipleChoice"] = 0] = "MultipleChoice";
	    GuildOnboardingPromptType[GuildOnboardingPromptType["Dropdown"] = 1] = "Dropdown";
	})(GuildOnboardingPromptType || (guild$5.GuildOnboardingPromptType = GuildOnboardingPromptType = {}));
	
	return guild$5;
}

var guildScheduledEvent$5 = {};

var hasRequiredGuildScheduledEvent$6;

function requireGuildScheduledEvent$6 () {
	if (hasRequiredGuildScheduledEvent$6) return guildScheduledEvent$5;
	hasRequiredGuildScheduledEvent$6 = 1;
	Object.defineProperty(guildScheduledEvent$5, "__esModule", { value: true });
	guildScheduledEvent$5.GuildScheduledEventPrivacyLevel = guildScheduledEvent$5.GuildScheduledEventStatus = guildScheduledEvent$5.GuildScheduledEventEntityType = guildScheduledEvent$5.GuildScheduledEventRecurrenceRuleMonth = guildScheduledEvent$5.GuildScheduledEventRecurrenceRuleWeekday = guildScheduledEvent$5.GuildScheduledEventRecurrenceRuleFrequency = void 0;
	/**
	 * https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-recurrence-rule-object-guild-scheduled-event-recurrence-rule-frequency
	 */
	var GuildScheduledEventRecurrenceRuleFrequency;
	(function (GuildScheduledEventRecurrenceRuleFrequency) {
	    GuildScheduledEventRecurrenceRuleFrequency[GuildScheduledEventRecurrenceRuleFrequency["Yearly"] = 0] = "Yearly";
	    GuildScheduledEventRecurrenceRuleFrequency[GuildScheduledEventRecurrenceRuleFrequency["Monthly"] = 1] = "Monthly";
	    GuildScheduledEventRecurrenceRuleFrequency[GuildScheduledEventRecurrenceRuleFrequency["Weekly"] = 2] = "Weekly";
	    GuildScheduledEventRecurrenceRuleFrequency[GuildScheduledEventRecurrenceRuleFrequency["Daily"] = 3] = "Daily";
	})(GuildScheduledEventRecurrenceRuleFrequency || (guildScheduledEvent$5.GuildScheduledEventRecurrenceRuleFrequency = GuildScheduledEventRecurrenceRuleFrequency = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-recurrence-rule-object-guild-scheduled-event-recurrence-rule-weekday
	 */
	var GuildScheduledEventRecurrenceRuleWeekday;
	(function (GuildScheduledEventRecurrenceRuleWeekday) {
	    GuildScheduledEventRecurrenceRuleWeekday[GuildScheduledEventRecurrenceRuleWeekday["Monday"] = 0] = "Monday";
	    GuildScheduledEventRecurrenceRuleWeekday[GuildScheduledEventRecurrenceRuleWeekday["Tuesday"] = 1] = "Tuesday";
	    GuildScheduledEventRecurrenceRuleWeekday[GuildScheduledEventRecurrenceRuleWeekday["Wednesday"] = 2] = "Wednesday";
	    GuildScheduledEventRecurrenceRuleWeekday[GuildScheduledEventRecurrenceRuleWeekday["Thursday"] = 3] = "Thursday";
	    GuildScheduledEventRecurrenceRuleWeekday[GuildScheduledEventRecurrenceRuleWeekday["Friday"] = 4] = "Friday";
	    GuildScheduledEventRecurrenceRuleWeekday[GuildScheduledEventRecurrenceRuleWeekday["Saturday"] = 5] = "Saturday";
	    GuildScheduledEventRecurrenceRuleWeekday[GuildScheduledEventRecurrenceRuleWeekday["Sunday"] = 6] = "Sunday";
	})(GuildScheduledEventRecurrenceRuleWeekday || (guildScheduledEvent$5.GuildScheduledEventRecurrenceRuleWeekday = GuildScheduledEventRecurrenceRuleWeekday = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-recurrence-rule-object-guild-scheduled-event-recurrence-rule-month
	 */
	var GuildScheduledEventRecurrenceRuleMonth;
	(function (GuildScheduledEventRecurrenceRuleMonth) {
	    GuildScheduledEventRecurrenceRuleMonth[GuildScheduledEventRecurrenceRuleMonth["January"] = 1] = "January";
	    GuildScheduledEventRecurrenceRuleMonth[GuildScheduledEventRecurrenceRuleMonth["February"] = 2] = "February";
	    GuildScheduledEventRecurrenceRuleMonth[GuildScheduledEventRecurrenceRuleMonth["March"] = 3] = "March";
	    GuildScheduledEventRecurrenceRuleMonth[GuildScheduledEventRecurrenceRuleMonth["April"] = 4] = "April";
	    GuildScheduledEventRecurrenceRuleMonth[GuildScheduledEventRecurrenceRuleMonth["May"] = 5] = "May";
	    GuildScheduledEventRecurrenceRuleMonth[GuildScheduledEventRecurrenceRuleMonth["June"] = 6] = "June";
	    GuildScheduledEventRecurrenceRuleMonth[GuildScheduledEventRecurrenceRuleMonth["July"] = 7] = "July";
	    GuildScheduledEventRecurrenceRuleMonth[GuildScheduledEventRecurrenceRuleMonth["August"] = 8] = "August";
	    GuildScheduledEventRecurrenceRuleMonth[GuildScheduledEventRecurrenceRuleMonth["September"] = 9] = "September";
	    GuildScheduledEventRecurrenceRuleMonth[GuildScheduledEventRecurrenceRuleMonth["October"] = 10] = "October";
	    GuildScheduledEventRecurrenceRuleMonth[GuildScheduledEventRecurrenceRuleMonth["November"] = 11] = "November";
	    GuildScheduledEventRecurrenceRuleMonth[GuildScheduledEventRecurrenceRuleMonth["December"] = 12] = "December";
	})(GuildScheduledEventRecurrenceRuleMonth || (guildScheduledEvent$5.GuildScheduledEventRecurrenceRuleMonth = GuildScheduledEventRecurrenceRuleMonth = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-object-guild-scheduled-event-entity-types
	 */
	var GuildScheduledEventEntityType;
	(function (GuildScheduledEventEntityType) {
	    GuildScheduledEventEntityType[GuildScheduledEventEntityType["StageInstance"] = 1] = "StageInstance";
	    GuildScheduledEventEntityType[GuildScheduledEventEntityType["Voice"] = 2] = "Voice";
	    GuildScheduledEventEntityType[GuildScheduledEventEntityType["External"] = 3] = "External";
	})(GuildScheduledEventEntityType || (guildScheduledEvent$5.GuildScheduledEventEntityType = GuildScheduledEventEntityType = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-object-guild-scheduled-event-status
	 */
	var GuildScheduledEventStatus;
	(function (GuildScheduledEventStatus) {
	    GuildScheduledEventStatus[GuildScheduledEventStatus["Scheduled"] = 1] = "Scheduled";
	    GuildScheduledEventStatus[GuildScheduledEventStatus["Active"] = 2] = "Active";
	    GuildScheduledEventStatus[GuildScheduledEventStatus["Completed"] = 3] = "Completed";
	    GuildScheduledEventStatus[GuildScheduledEventStatus["Canceled"] = 4] = "Canceled";
	})(GuildScheduledEventStatus || (guildScheduledEvent$5.GuildScheduledEventStatus = GuildScheduledEventStatus = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-object-guild-scheduled-event-privacy-level
	 */
	var GuildScheduledEventPrivacyLevel;
	(function (GuildScheduledEventPrivacyLevel) {
	    /**
	     * The scheduled event is only accessible to guild members
	     */
	    GuildScheduledEventPrivacyLevel[GuildScheduledEventPrivacyLevel["GuildOnly"] = 2] = "GuildOnly";
	})(GuildScheduledEventPrivacyLevel || (guildScheduledEvent$5.GuildScheduledEventPrivacyLevel = GuildScheduledEventPrivacyLevel = {}));
	
	return guildScheduledEvent$5;
}

var interactions$5 = {};

var applicationCommands$2 = {};

var chatInput$2 = {};

var attachment$2 = {};

var hasRequiredAttachment$3;

function requireAttachment$3 () {
	if (hasRequiredAttachment$3) return attachment$2;
	hasRequiredAttachment$3 = 1;
	Object.defineProperty(attachment$2, "__esModule", { value: true });
	
	return attachment$2;
}

var base$5 = {};

var hasRequiredBase$6;

function requireBase$6 () {
	if (hasRequiredBase$6) return base$5;
	hasRequiredBase$6 = 1;
	Object.defineProperty(base$5, "__esModule", { value: true });
	
	return base$5;
}

var boolean$2 = {};

var hasRequiredBoolean$2;

function requireBoolean$2 () {
	if (hasRequiredBoolean$2) return boolean$2;
	hasRequiredBoolean$2 = 1;
	Object.defineProperty(boolean$2, "__esModule", { value: true });
	
	return boolean$2;
}

var channel$7 = {};

var hasRequiredChannel$7;

function requireChannel$7 () {
	if (hasRequiredChannel$7) return channel$7;
	hasRequiredChannel$7 = 1;
	Object.defineProperty(channel$7, "__esModule", { value: true });
	
	return channel$7;
}

var integer$2 = {};

var hasRequiredInteger$2;

function requireInteger$2 () {
	if (hasRequiredInteger$2) return integer$2;
	hasRequiredInteger$2 = 1;
	Object.defineProperty(integer$2, "__esModule", { value: true });
	
	return integer$2;
}

var mentionable$2 = {};

var hasRequiredMentionable$2;

function requireMentionable$2 () {
	if (hasRequiredMentionable$2) return mentionable$2;
	hasRequiredMentionable$2 = 1;
	Object.defineProperty(mentionable$2, "__esModule", { value: true });
	
	return mentionable$2;
}

var number$2 = {};

var hasRequiredNumber$2;

function requireNumber$2 () {
	if (hasRequiredNumber$2) return number$2;
	hasRequiredNumber$2 = 1;
	Object.defineProperty(number$2, "__esModule", { value: true });
	
	return number$2;
}

var role$2 = {};

var hasRequiredRole$3;

function requireRole$3 () {
	if (hasRequiredRole$3) return role$2;
	hasRequiredRole$3 = 1;
	Object.defineProperty(role$2, "__esModule", { value: true });
	
	return role$2;
}

var shared$2 = {};

var hasRequiredShared$2;

function requireShared$2 () {
	if (hasRequiredShared$2) return shared$2;
	hasRequiredShared$2 = 1;
	Object.defineProperty(shared$2, "__esModule", { value: true });
	shared$2.ApplicationCommandOptionType = void 0;
	/**
	 * https://discord.com/developers/docs/interactions/application-commands#application-command-object-application-command-option-type
	 */
	var ApplicationCommandOptionType;
	(function (ApplicationCommandOptionType) {
	    ApplicationCommandOptionType[ApplicationCommandOptionType["Subcommand"] = 1] = "Subcommand";
	    ApplicationCommandOptionType[ApplicationCommandOptionType["SubcommandGroup"] = 2] = "SubcommandGroup";
	    ApplicationCommandOptionType[ApplicationCommandOptionType["String"] = 3] = "String";
	    ApplicationCommandOptionType[ApplicationCommandOptionType["Integer"] = 4] = "Integer";
	    ApplicationCommandOptionType[ApplicationCommandOptionType["Boolean"] = 5] = "Boolean";
	    ApplicationCommandOptionType[ApplicationCommandOptionType["User"] = 6] = "User";
	    ApplicationCommandOptionType[ApplicationCommandOptionType["Channel"] = 7] = "Channel";
	    ApplicationCommandOptionType[ApplicationCommandOptionType["Role"] = 8] = "Role";
	    ApplicationCommandOptionType[ApplicationCommandOptionType["Mentionable"] = 9] = "Mentionable";
	    ApplicationCommandOptionType[ApplicationCommandOptionType["Number"] = 10] = "Number";
	    ApplicationCommandOptionType[ApplicationCommandOptionType["Attachment"] = 11] = "Attachment";
	})(ApplicationCommandOptionType || (shared$2.ApplicationCommandOptionType = ApplicationCommandOptionType = {}));
	
	return shared$2;
}

var string$2 = {};

var hasRequiredString$2;

function requireString$2 () {
	if (hasRequiredString$2) return string$2;
	hasRequiredString$2 = 1;
	Object.defineProperty(string$2, "__esModule", { value: true });
	
	return string$2;
}

var subcommand$2 = {};

var hasRequiredSubcommand$2;

function requireSubcommand$2 () {
	if (hasRequiredSubcommand$2) return subcommand$2;
	hasRequiredSubcommand$2 = 1;
	Object.defineProperty(subcommand$2, "__esModule", { value: true });
	
	return subcommand$2;
}

var subcommandGroup$2 = {};

var hasRequiredSubcommandGroup$2;

function requireSubcommandGroup$2 () {
	if (hasRequiredSubcommandGroup$2) return subcommandGroup$2;
	hasRequiredSubcommandGroup$2 = 1;
	Object.defineProperty(subcommandGroup$2, "__esModule", { value: true });
	
	return subcommandGroup$2;
}

var user$8 = {};

var hasRequiredUser$9;

function requireUser$9 () {
	if (hasRequiredUser$9) return user$8;
	hasRequiredUser$9 = 1;
	Object.defineProperty(user$8, "__esModule", { value: true });
	
	return user$8;
}

var hasRequiredChatInput$2;

function requireChatInput$2 () {
	if (hasRequiredChatInput$2) return chatInput$2;
	hasRequiredChatInput$2 = 1;
	(function (exports) {
		var __createBinding = (chatInput$2 && chatInput$2.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (chatInput$2 && chatInput$2.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(requireAttachment$3(), exports);
		__exportStar(requireBase$6(), exports);
		__exportStar(requireBoolean$2(), exports);
		__exportStar(requireChannel$7(), exports);
		__exportStar(requireInteger$2(), exports);
		__exportStar(requireMentionable$2(), exports);
		__exportStar(requireNumber$2(), exports);
		__exportStar(requireRole$3(), exports);
		__exportStar(requireShared$2(), exports);
		__exportStar(requireString$2(), exports);
		__exportStar(requireSubcommand$2(), exports);
		__exportStar(requireSubcommandGroup$2(), exports);
		__exportStar(requireUser$9(), exports);
		
	} (chatInput$2));
	return chatInput$2;
}

var contextMenu$2 = {};

var hasRequiredContextMenu$2;

function requireContextMenu$2 () {
	if (hasRequiredContextMenu$2) return contextMenu$2;
	hasRequiredContextMenu$2 = 1;
	Object.defineProperty(contextMenu$2, "__esModule", { value: true });
	
	return contextMenu$2;
}

var permissions$5 = {};

var hasRequiredPermissions$5;

function requirePermissions$5 () {
	if (hasRequiredPermissions$5) return permissions$5;
	hasRequiredPermissions$5 = 1;
	Object.defineProperty(permissions$5, "__esModule", { value: true });
	permissions$5.APIApplicationCommandPermissionsConstant = permissions$5.ApplicationCommandPermissionType = void 0;
	/**
	 * https://discord.com/developers/docs/interactions/application-commands#application-command-permissions-object-application-command-permission-type
	 */
	var ApplicationCommandPermissionType;
	(function (ApplicationCommandPermissionType) {
	    ApplicationCommandPermissionType[ApplicationCommandPermissionType["Role"] = 1] = "Role";
	    ApplicationCommandPermissionType[ApplicationCommandPermissionType["User"] = 2] = "User";
	    ApplicationCommandPermissionType[ApplicationCommandPermissionType["Channel"] = 3] = "Channel";
	})(ApplicationCommandPermissionType || (permissions$5.ApplicationCommandPermissionType = ApplicationCommandPermissionType = {}));
	/**
	 * https://discord.com/developers/docs/interactions/application-commands#application-command-permissions-object-application-command-permissions-constants
	 */
	permissions$5.APIApplicationCommandPermissionsConstant = {
	    // eslint-disable-next-line unicorn/prefer-native-coercion-functions
	    Everyone: (guildId) => String(guildId),
	    AllChannels: (guildId) => String(BigInt(guildId) - 1n),
	};
	
	return permissions$5;
}

var hasRequiredApplicationCommands$2;

function requireApplicationCommands$2 () {
	if (hasRequiredApplicationCommands$2) return applicationCommands$2;
	hasRequiredApplicationCommands$2 = 1;
	(function (exports) {
		var __createBinding = (applicationCommands$2 && applicationCommands$2.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (applicationCommands$2 && applicationCommands$2.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.InteractionContextType = exports.ApplicationIntegrationType = exports.ApplicationCommandType = void 0;
		__exportStar(requireChatInput$2(), exports);
		__exportStar(requireContextMenu$2(), exports);
		__exportStar(requirePermissions$5(), exports);
		/**
		 * https://discord.com/developers/docs/interactions/application-commands#application-command-object-application-command-types
		 */
		var ApplicationCommandType;
		(function (ApplicationCommandType) {
		    ApplicationCommandType[ApplicationCommandType["ChatInput"] = 1] = "ChatInput";
		    ApplicationCommandType[ApplicationCommandType["User"] = 2] = "User";
		    ApplicationCommandType[ApplicationCommandType["Message"] = 3] = "Message";
		})(ApplicationCommandType || (exports.ApplicationCommandType = ApplicationCommandType = {}));
		/**
		 * https://discord.com/developers/docs/resources/application#application-object-application-integration-types
		 */
		var ApplicationIntegrationType;
		(function (ApplicationIntegrationType) {
		    /**
		     * App is installable to servers
		     */
		    ApplicationIntegrationType[ApplicationIntegrationType["GuildInstall"] = 0] = "GuildInstall";
		    /**
		     * App is installable to users
		     */
		    ApplicationIntegrationType[ApplicationIntegrationType["UserInstall"] = 1] = "UserInstall";
		})(ApplicationIntegrationType || (exports.ApplicationIntegrationType = ApplicationIntegrationType = {}));
		/**
		 * https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object-interaction-context-types
		 */
		var InteractionContextType;
		(function (InteractionContextType) {
		    /**
		     * Interaction can be used within servers
		     */
		    InteractionContextType[InteractionContextType["Guild"] = 0] = "Guild";
		    /**
		     * Interaction can be used within DMs with the app's bot user
		     */
		    InteractionContextType[InteractionContextType["BotDM"] = 1] = "BotDM";
		    /**
		     * Interaction can be used within Group DMs and DMs other than the app's bot user
		     */
		    InteractionContextType[InteractionContextType["PrivateChannel"] = 2] = "PrivateChannel";
		})(InteractionContextType || (exports.InteractionContextType = InteractionContextType = {}));
		
	} (applicationCommands$2));
	return applicationCommands$2;
}

var autocomplete$2 = {};

var hasRequiredAutocomplete$2;

function requireAutocomplete$2 () {
	if (hasRequiredAutocomplete$2) return autocomplete$2;
	hasRequiredAutocomplete$2 = 1;
	Object.defineProperty(autocomplete$2, "__esModule", { value: true });
	
	return autocomplete$2;
}

var base$4 = {};

var hasRequiredBase$5;

function requireBase$5 () {
	if (hasRequiredBase$5) return base$4;
	hasRequiredBase$5 = 1;
	Object.defineProperty(base$4, "__esModule", { value: true });
	
	return base$4;
}

var messageComponents$2 = {};

var hasRequiredMessageComponents$2;

function requireMessageComponents$2 () {
	if (hasRequiredMessageComponents$2) return messageComponents$2;
	hasRequiredMessageComponents$2 = 1;
	Object.defineProperty(messageComponents$2, "__esModule", { value: true });
	
	return messageComponents$2;
}

var modalSubmit$2 = {};

var hasRequiredModalSubmit$2;

function requireModalSubmit$2 () {
	if (hasRequiredModalSubmit$2) return modalSubmit$2;
	hasRequiredModalSubmit$2 = 1;
	Object.defineProperty(modalSubmit$2, "__esModule", { value: true });
	
	return modalSubmit$2;
}

var ping$2 = {};

var hasRequiredPing$2;

function requirePing$2 () {
	if (hasRequiredPing$2) return ping$2;
	hasRequiredPing$2 = 1;
	Object.defineProperty(ping$2, "__esModule", { value: true });
	
	return ping$2;
}

var responses$2 = {};

var hasRequiredResponses$2;

function requireResponses$2 () {
	if (hasRequiredResponses$2) return responses$2;
	hasRequiredResponses$2 = 1;
	Object.defineProperty(responses$2, "__esModule", { value: true });
	responses$2.InteractionResponseType = responses$2.InteractionType = void 0;
	/**
	 * https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object-interaction-type
	 */
	var InteractionType;
	(function (InteractionType) {
	    InteractionType[InteractionType["Ping"] = 1] = "Ping";
	    InteractionType[InteractionType["ApplicationCommand"] = 2] = "ApplicationCommand";
	    InteractionType[InteractionType["MessageComponent"] = 3] = "MessageComponent";
	    InteractionType[InteractionType["ApplicationCommandAutocomplete"] = 4] = "ApplicationCommandAutocomplete";
	    InteractionType[InteractionType["ModalSubmit"] = 5] = "ModalSubmit";
	})(InteractionType || (responses$2.InteractionType = InteractionType = {}));
	/**
	 * https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-response-object-interaction-callback-type
	 */
	var InteractionResponseType;
	(function (InteractionResponseType) {
	    /**
	     * ACK a `Ping`
	     */
	    InteractionResponseType[InteractionResponseType["Pong"] = 1] = "Pong";
	    /**
	     * Respond to an interaction with a message
	     */
	    InteractionResponseType[InteractionResponseType["ChannelMessageWithSource"] = 4] = "ChannelMessageWithSource";
	    /**
	     * ACK an interaction and edit to a response later, the user sees a loading state
	     */
	    InteractionResponseType[InteractionResponseType["DeferredChannelMessageWithSource"] = 5] = "DeferredChannelMessageWithSource";
	    /**
	     * ACK a button interaction and update it to a loading state
	     */
	    InteractionResponseType[InteractionResponseType["DeferredMessageUpdate"] = 6] = "DeferredMessageUpdate";
	    /**
	     * ACK a button interaction and edit the message to which the button was attached
	     */
	    InteractionResponseType[InteractionResponseType["UpdateMessage"] = 7] = "UpdateMessage";
	    /**
	     * For autocomplete interactions
	     */
	    InteractionResponseType[InteractionResponseType["ApplicationCommandAutocompleteResult"] = 8] = "ApplicationCommandAutocompleteResult";
	    /**
	     * Respond to an interaction with an modal for a user to fill-out
	     */
	    InteractionResponseType[InteractionResponseType["Modal"] = 9] = "Modal";
	    /**
	     * Respond to an interaction with an upgrade button, only available for apps with monetization enabled
	     *
	     * @deprecated See https://discord.com/developers/docs/change-log#premium-apps-new-premium-button-style-deep-linking-url-schemes
	     */
	    InteractionResponseType[InteractionResponseType["PremiumRequired"] = 10] = "PremiumRequired";
	})(InteractionResponseType || (responses$2.InteractionResponseType = InteractionResponseType = {}));
	
	return responses$2;
}

var hasRequiredInteractions$5;

function requireInteractions$5 () {
	if (hasRequiredInteractions$5) return interactions$5;
	hasRequiredInteractions$5 = 1;
	(function (exports) {
		var __createBinding = (interactions$5 && interactions$5.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (interactions$5 && interactions$5.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(requireApplicationCommands$2(), exports);
		__exportStar(requireAutocomplete$2(), exports);
		__exportStar(requireBase$5(), exports);
		__exportStar(requireMessageComponents$2(), exports);
		__exportStar(requireModalSubmit$2(), exports);
		__exportStar(requirePing$2(), exports);
		__exportStar(requireResponses$2(), exports);
		
	} (interactions$5));
	return interactions$5;
}

var invite$5 = {};

var hasRequiredInvite$6;

function requireInvite$6 () {
	if (hasRequiredInvite$6) return invite$5;
	hasRequiredInvite$6 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/invite
	 */
	Object.defineProperty(invite$5, "__esModule", { value: true });
	invite$5.InviteTargetType = invite$5.InviteType = void 0;
	/**
	 * https://discord.com/developers/docs/resources/invite#invite-object-invite-types
	 */
	var InviteType;
	(function (InviteType) {
	    InviteType[InviteType["Guild"] = 0] = "Guild";
	    InviteType[InviteType["GroupDM"] = 1] = "GroupDM";
	    InviteType[InviteType["Friend"] = 2] = "Friend";
	})(InviteType || (invite$5.InviteType = InviteType = {}));
	/**
	 * https://discord.com/developers/docs/resources/invite#invite-object-invite-target-types
	 */
	var InviteTargetType;
	(function (InviteTargetType) {
	    InviteTargetType[InviteTargetType["Stream"] = 1] = "Stream";
	    InviteTargetType[InviteTargetType["EmbeddedApplication"] = 2] = "EmbeddedApplication";
	})(InviteTargetType || (invite$5.InviteTargetType = InviteTargetType = {}));
	
	return invite$5;
}

var oauth2$5 = {};

var hasRequiredOauth2$5;

function requireOauth2$5 () {
	if (hasRequiredOauth2$5) return oauth2$5;
	hasRequiredOauth2$5 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/topics/oauth2
	 */
	Object.defineProperty(oauth2$5, "__esModule", { value: true });
	oauth2$5.OAuth2Scopes = void 0;
	var OAuth2Scopes;
	(function (OAuth2Scopes) {
	    /**
	     * For oauth2 bots, this puts the bot in the user's selected guild by default
	     */
	    OAuth2Scopes["Bot"] = "bot";
	    /**
	     * Allows [/users/@me/connections](https://discord.com/developers/docs/resources/user#get-user-connections)
	     * to return linked third-party accounts
	     *
	     * See https://discord.com/developers/docs/resources/user#get-user-connections
	     */
	    OAuth2Scopes["Connections"] = "connections";
	    /**
	     * Allows your app to see information about the user's DMs and group DMs - requires Discord approval
	     */
	    OAuth2Scopes["DMChannelsRead"] = "dm_channels.read";
	    /**
	     * Enables [/users/@me](https://discord.com/developers/docs/resources/user#get-current-user) to return an `email`
	     *
	     * See https://discord.com/developers/docs/resources/user#get-current-user
	     */
	    OAuth2Scopes["Email"] = "email";
	    /**
	     * Allows [/users/@me](https://discord.com/developers/docs/resources/user#get-current-user) without `email`
	     *
	     * See https://discord.com/developers/docs/resources/user#get-current-user
	     */
	    OAuth2Scopes["Identify"] = "identify";
	    /**
	     * Allows [/users/@me/guilds](https://discord.com/developers/docs/resources/user#get-current-user-guilds)
	     * to return basic information about all of a user's guilds
	     *
	     * See https://discord.com/developers/docs/resources/user#get-current-user-guilds
	     */
	    OAuth2Scopes["Guilds"] = "guilds";
	    /**
	     * Allows [/guilds/{guild.id}/members/{user.id}](https://discord.com/developers/docs/resources/guild#add-guild-member)
	     * to be used for joining users to a guild
	     *
	     * See https://discord.com/developers/docs/resources/guild#add-guild-member
	     */
	    OAuth2Scopes["GuildsJoin"] = "guilds.join";
	    /**
	     * Allows /users/@me/guilds/{guild.id}/member to return a user's member information in a guild
	     *
	     * See https://discord.com/developers/docs/resources/user#get-current-user-guild-member
	     */
	    OAuth2Scopes["GuildsMembersRead"] = "guilds.members.read";
	    /**
	     * Allows your app to join users to a group dm
	     *
	     * See https://discord.com/developers/docs/resources/channel#group-dm-add-recipient
	     */
	    OAuth2Scopes["GroupDMJoins"] = "gdm.join";
	    /**
	     * For local rpc server api access, this allows you to read messages from all client channels
	     * (otherwise restricted to channels/guilds your app creates)
	     */
	    OAuth2Scopes["MessagesRead"] = "messages.read";
	    /**
	     * Allows your app to update a user's connection and metadata for the app
	     */
	    OAuth2Scopes["RoleConnectionsWrite"] = "role_connections.write";
	    /**
	     * For local rpc server access, this allows you to control a user's local Discord client - requires Discord approval
	     */
	    OAuth2Scopes["RPC"] = "rpc";
	    /**
	     * For local rpc server api access, this allows you to receive notifications pushed out to the user - requires Discord approval
	     */
	    OAuth2Scopes["RPCNotificationsRead"] = "rpc.notifications.read";
	    /**
	     * This generates a webhook that is returned in the oauth token response for authorization code grants
	     */
	    OAuth2Scopes["WebhookIncoming"] = "webhook.incoming";
	    /**
	     * Allows your app to connect to voice on user's behalf and see all the voice members - requires Discord approval
	     */
	    OAuth2Scopes["Voice"] = "voice";
	    /**
	     * Allows your app to upload/update builds for a user's applications - requires Discord approval
	     */
	    OAuth2Scopes["ApplicationsBuildsUpload"] = "applications.builds.upload";
	    /**
	     * Allows your app to read build data for a user's applications
	     */
	    OAuth2Scopes["ApplicationsBuildsRead"] = "applications.builds.read";
	    /**
	     * Allows your app to read and update store data (SKUs, store listings, achievements, etc.) for a user's applications
	     */
	    OAuth2Scopes["ApplicationsStoreUpdate"] = "applications.store.update";
	    /**
	     * Allows your app to read entitlements for a user's applications
	     */
	    OAuth2Scopes["ApplicationsEntitlements"] = "applications.entitlements";
	    /**
	     * Allows your app to know a user's friends and implicit relationships - requires Discord approval
	     */
	    OAuth2Scopes["RelationshipsRead"] = "relationships.read";
	    /**
	     * Allows your app to fetch data from a user's "Now Playing/Recently Played" list - requires Discord approval
	     */
	    OAuth2Scopes["ActivitiesRead"] = "activities.read";
	    /**
	     * Allows your app to update a user's activity - requires Discord approval (NOT REQUIRED FOR GAMESDK ACTIVITY MANAGER)
	     *
	     * See https://discord.com/developers/docs/game-sdk/activities
	     */
	    OAuth2Scopes["ActivitiesWrite"] = "activities.write";
	    /**
	     * Allows your app to use Application Commands in a guild
	     *
	     * See https://discord.com/developers/docs/interactions/application-commands
	     */
	    OAuth2Scopes["ApplicationsCommands"] = "applications.commands";
	    /**
	     * Allows your app to update its Application Commands via this bearer token - client credentials grant only
	     *
	     * See https://discord.com/developers/docs/interactions/application-commands
	     */
	    OAuth2Scopes["ApplicationsCommandsUpdate"] = "applications.commands.update";
	    /**
	     * Allows your app to update permissions for its commands using a Bearer token - client credentials grant only
	     *
	     * See https://discord.com/developers/docs/interactions/application-commands
	     */
	    OAuth2Scopes["ApplicationCommandsPermissionsUpdate"] = "applications.commands.permissions.update";
	})(OAuth2Scopes || (oauth2$5.OAuth2Scopes = OAuth2Scopes = {}));
	
	return oauth2$5;
}

var poll$5 = {};

var hasRequiredPoll$6;

function requirePoll$6 () {
	if (hasRequiredPoll$6) return poll$5;
	hasRequiredPoll$6 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/poll
	 */
	Object.defineProperty(poll$5, "__esModule", { value: true });
	poll$5.PollLayoutType = void 0;
	/**
	 * https://discord.com/developers/docs/resources/poll#layout-type
	 */
	var PollLayoutType;
	(function (PollLayoutType) {
	    /**
	     * The, uhm, default layout type
	     */
	    PollLayoutType[PollLayoutType["Default"] = 1] = "Default";
	})(PollLayoutType || (poll$5.PollLayoutType = PollLayoutType = {}));
	
	return poll$5;
}

var permissions$4 = {};

var hasRequiredPermissions$4;

function requirePermissions$4 () {
	if (hasRequiredPermissions$4) return permissions$4;
	hasRequiredPermissions$4 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/topics/permissions
	 */
	Object.defineProperty(permissions$4, "__esModule", { value: true });
	permissions$4.RoleFlags = void 0;
	/**
	 * https://discord.com/developers/docs/topics/permissions#role-object-role-flags
	 */
	var RoleFlags;
	(function (RoleFlags) {
	    /**
	     * Role can be selected by members in an onboarding prompt
	     */
	    RoleFlags[RoleFlags["InPrompt"] = 1] = "InPrompt";
	})(RoleFlags || (permissions$4.RoleFlags = RoleFlags = {}));
	
	return permissions$4;
}

var stageInstance$5 = {};

var hasRequiredStageInstance$6;

function requireStageInstance$6 () {
	if (hasRequiredStageInstance$6) return stageInstance$5;
	hasRequiredStageInstance$6 = 1;
	Object.defineProperty(stageInstance$5, "__esModule", { value: true });
	stageInstance$5.StageInstancePrivacyLevel = void 0;
	/**
	 * https://discord.com/developers/docs/resources/stage-instance#stage-instance-object-privacy-level
	 */
	var StageInstancePrivacyLevel;
	(function (StageInstancePrivacyLevel) {
	    /**
	     * The stage instance is visible publicly, such as on stage discovery
	     *
	     * @deprecated
	     */
	    StageInstancePrivacyLevel[StageInstancePrivacyLevel["Public"] = 1] = "Public";
	    /**
	     * The stage instance is visible to only guild members
	     */
	    StageInstancePrivacyLevel[StageInstancePrivacyLevel["GuildOnly"] = 2] = "GuildOnly";
	})(StageInstancePrivacyLevel || (stageInstance$5.StageInstancePrivacyLevel = StageInstancePrivacyLevel = {}));
	
	return stageInstance$5;
}

var sticker$5 = {};

var hasRequiredSticker$6;

function requireSticker$6 () {
	if (hasRequiredSticker$6) return sticker$5;
	hasRequiredSticker$6 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/sticker
	 */
	Object.defineProperty(sticker$5, "__esModule", { value: true });
	sticker$5.StickerFormatType = sticker$5.StickerType = void 0;
	/**
	 * https://discord.com/developers/docs/resources/sticker#sticker-object-sticker-types
	 */
	var StickerType;
	(function (StickerType) {
	    /**
	     * An official sticker in a pack
	     */
	    StickerType[StickerType["Standard"] = 1] = "Standard";
	    /**
	     * A sticker uploaded to a guild for the guild's members
	     */
	    StickerType[StickerType["Guild"] = 2] = "Guild";
	})(StickerType || (sticker$5.StickerType = StickerType = {}));
	/**
	 * https://discord.com/developers/docs/resources/sticker#sticker-object-sticker-format-types
	 */
	var StickerFormatType;
	(function (StickerFormatType) {
	    StickerFormatType[StickerFormatType["PNG"] = 1] = "PNG";
	    StickerFormatType[StickerFormatType["APNG"] = 2] = "APNG";
	    StickerFormatType[StickerFormatType["Lottie"] = 3] = "Lottie";
	    StickerFormatType[StickerFormatType["GIF"] = 4] = "GIF";
	})(StickerFormatType || (sticker$5.StickerFormatType = StickerFormatType = {}));
	
	return sticker$5;
}

var teams$2 = {};

var hasRequiredTeams$2;

function requireTeams$2 () {
	if (hasRequiredTeams$2) return teams$2;
	hasRequiredTeams$2 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/topics/teams
	 */
	Object.defineProperty(teams$2, "__esModule", { value: true });
	teams$2.TeamMemberRole = teams$2.TeamMemberMembershipState = void 0;
	/**
	 * https://discord.com/developers/docs/topics/teams#data-models-membership-state-enum
	 */
	var TeamMemberMembershipState;
	(function (TeamMemberMembershipState) {
	    TeamMemberMembershipState[TeamMemberMembershipState["Invited"] = 1] = "Invited";
	    TeamMemberMembershipState[TeamMemberMembershipState["Accepted"] = 2] = "Accepted";
	})(TeamMemberMembershipState || (teams$2.TeamMemberMembershipState = TeamMemberMembershipState = {}));
	/**
	 * https://discord.com/developers/docs/topics/teams#team-member-roles-team-member-role-types
	 */
	var TeamMemberRole;
	(function (TeamMemberRole) {
	    TeamMemberRole["Admin"] = "admin";
	    TeamMemberRole["Developer"] = "developer";
	    TeamMemberRole["ReadOnly"] = "read_only";
	})(TeamMemberRole || (teams$2.TeamMemberRole = TeamMemberRole = {}));
	
	return teams$2;
}

var template$5 = {};

var hasRequiredTemplate$5;

function requireTemplate$5 () {
	if (hasRequiredTemplate$5) return template$5;
	hasRequiredTemplate$5 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/guild-template
	 */
	Object.defineProperty(template$5, "__esModule", { value: true });
	
	return template$5;
}

var user$7 = {};

var hasRequiredUser$8;

function requireUser$8 () {
	if (hasRequiredUser$8) return user$7;
	hasRequiredUser$8 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/user
	 */
	Object.defineProperty(user$7, "__esModule", { value: true });
	user$7.ConnectionVisibility = user$7.ConnectionService = user$7.UserPremiumType = user$7.UserFlags = void 0;
	/**
	 * https://discord.com/developers/docs/resources/user#user-object-user-flags
	 */
	var UserFlags;
	(function (UserFlags) {
	    /**
	     * Discord Employee
	     */
	    UserFlags[UserFlags["Staff"] = 1] = "Staff";
	    /**
	     * Partnered Server Owner
	     */
	    UserFlags[UserFlags["Partner"] = 2] = "Partner";
	    /**
	     * HypeSquad Events Member
	     */
	    UserFlags[UserFlags["Hypesquad"] = 4] = "Hypesquad";
	    /**
	     * Bug Hunter Level 1
	     */
	    UserFlags[UserFlags["BugHunterLevel1"] = 8] = "BugHunterLevel1";
	    /**
	     * @unstable This user flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    UserFlags[UserFlags["MFASMS"] = 16] = "MFASMS";
	    /**
	     * @unstable This user flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    UserFlags[UserFlags["PremiumPromoDismissed"] = 32] = "PremiumPromoDismissed";
	    /**
	     * House Bravery Member
	     */
	    UserFlags[UserFlags["HypeSquadOnlineHouse1"] = 64] = "HypeSquadOnlineHouse1";
	    /**
	     * House Brilliance Member
	     */
	    UserFlags[UserFlags["HypeSquadOnlineHouse2"] = 128] = "HypeSquadOnlineHouse2";
	    /**
	     * House Balance Member
	     */
	    UserFlags[UserFlags["HypeSquadOnlineHouse3"] = 256] = "HypeSquadOnlineHouse3";
	    /**
	     * Early Nitro Supporter
	     */
	    UserFlags[UserFlags["PremiumEarlySupporter"] = 512] = "PremiumEarlySupporter";
	    /**
	     * User is a [team](https://discord.com/developers/docs/topics/teams)
	     */
	    UserFlags[UserFlags["TeamPseudoUser"] = 1024] = "TeamPseudoUser";
	    /**
	     * @unstable This user flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    UserFlags[UserFlags["HasUnreadUrgentMessages"] = 8192] = "HasUnreadUrgentMessages";
	    /**
	     * Bug Hunter Level 2
	     */
	    UserFlags[UserFlags["BugHunterLevel2"] = 16384] = "BugHunterLevel2";
	    /**
	     * Verified Bot
	     */
	    UserFlags[UserFlags["VerifiedBot"] = 65536] = "VerifiedBot";
	    /**
	     * Early Verified Bot Developer
	     */
	    UserFlags[UserFlags["VerifiedDeveloper"] = 131072] = "VerifiedDeveloper";
	    /**
	     * Moderator Programs Alumni
	     */
	    UserFlags[UserFlags["CertifiedModerator"] = 262144] = "CertifiedModerator";
	    /**
	     * Bot uses only [HTTP interactions](https://discord.com/developers/docs/interactions/receiving-and-responding#receiving-an-interaction) and is shown in the online member list
	     */
	    UserFlags[UserFlags["BotHTTPInteractions"] = 524288] = "BotHTTPInteractions";
	    /**
	     * User has been identified as spammer
	     *
	     * @unstable This user flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    UserFlags[UserFlags["Spammer"] = 1048576] = "Spammer";
	    /**
	     * @unstable This user flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    UserFlags[UserFlags["DisablePremium"] = 2097152] = "DisablePremium";
	    /**
	     * User is an [Active Developer](https://support-dev.discord.com/hc/articles/10113997751447)
	     */
	    UserFlags[UserFlags["ActiveDeveloper"] = 4194304] = "ActiveDeveloper";
	    /**
	     * User's account has been [quarantined](https://support.discord.com/hc/articles/6461420677527) based on recent activity
	     *
	     * @unstable This user flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     * @privateRemarks
	     *
	     * This value would be 1 << 44, but bit shifting above 1 << 30 requires bigints
	     */
	    UserFlags[UserFlags["Quarantined"] = 17592186044416] = "Quarantined";
	    /**
	     * @unstable This user flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     * @privateRemarks
	     *
	     * This value would be 1 << 50, but bit shifting above 1 << 30 requires bigints
	     */
	    UserFlags[UserFlags["Collaborator"] = 1125899906842624] = "Collaborator";
	    /**
	     * @unstable This user flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     * @privateRemarks
	     *
	     * This value would be 1 << 51, but bit shifting above 1 << 30 requires bigints
	     */
	    UserFlags[UserFlags["RestrictedCollaborator"] = 2251799813685248] = "RestrictedCollaborator";
	})(UserFlags || (user$7.UserFlags = UserFlags = {}));
	/**
	 * https://discord.com/developers/docs/resources/user#user-object-premium-types
	 */
	var UserPremiumType;
	(function (UserPremiumType) {
	    UserPremiumType[UserPremiumType["None"] = 0] = "None";
	    UserPremiumType[UserPremiumType["NitroClassic"] = 1] = "NitroClassic";
	    UserPremiumType[UserPremiumType["Nitro"] = 2] = "Nitro";
	    UserPremiumType[UserPremiumType["NitroBasic"] = 3] = "NitroBasic";
	})(UserPremiumType || (user$7.UserPremiumType = UserPremiumType = {}));
	var ConnectionService;
	(function (ConnectionService) {
	    ConnectionService["BattleNet"] = "battlenet";
	    ConnectionService["BungieNet"] = "bungie";
	    ConnectionService["Domain"] = "domain";
	    ConnectionService["eBay"] = "ebay";
	    ConnectionService["EpicGames"] = "epicgames";
	    ConnectionService["Facebook"] = "facebook";
	    ConnectionService["GitHub"] = "github";
	    ConnectionService["Instagram"] = "instagram";
	    ConnectionService["LeagueOfLegends"] = "leagueoflegends";
	    ConnectionService["PayPal"] = "paypal";
	    ConnectionService["PlayStationNetwork"] = "playstation";
	    ConnectionService["Reddit"] = "reddit";
	    ConnectionService["RiotGames"] = "riotgames";
	    ConnectionService["Roblox"] = "roblox";
	    ConnectionService["Spotify"] = "spotify";
	    ConnectionService["Skype"] = "skype";
	    ConnectionService["Steam"] = "steam";
	    ConnectionService["TikTok"] = "tiktok";
	    ConnectionService["Twitch"] = "twitch";
	    ConnectionService["X"] = "twitter";
	    /**
	     * @deprecated This is the old name for {@apilink ConnectionService#X}
	     */
	    ConnectionService["Twitter"] = "twitter";
	    ConnectionService["Xbox"] = "xbox";
	    ConnectionService["YouTube"] = "youtube";
	})(ConnectionService || (user$7.ConnectionService = ConnectionService = {}));
	var ConnectionVisibility;
	(function (ConnectionVisibility) {
	    /**
	     * Invisible to everyone except the user themselves
	     */
	    ConnectionVisibility[ConnectionVisibility["None"] = 0] = "None";
	    /**
	     * Visible to everyone
	     */
	    ConnectionVisibility[ConnectionVisibility["Everyone"] = 1] = "Everyone";
	})(ConnectionVisibility || (user$7.ConnectionVisibility = ConnectionVisibility = {}));
	
	return user$7;
}

var voice$5 = {};

var hasRequiredVoice$5;

function requireVoice$5 () {
	if (hasRequiredVoice$5) return voice$5;
	hasRequiredVoice$5 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/voice
	 */
	Object.defineProperty(voice$5, "__esModule", { value: true });
	
	return voice$5;
}

var webhook$5 = {};

var hasRequiredWebhook$6;

function requireWebhook$6 () {
	if (hasRequiredWebhook$6) return webhook$5;
	hasRequiredWebhook$6 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/webhook
	 */
	Object.defineProperty(webhook$5, "__esModule", { value: true });
	webhook$5.WebhookType = void 0;
	var WebhookType;
	(function (WebhookType) {
	    /**
	     * Incoming Webhooks can post messages to channels with a generated token
	     */
	    WebhookType[WebhookType["Incoming"] = 1] = "Incoming";
	    /**
	     * Channel Follower Webhooks are internal webhooks used with Channel Following to post new messages into channels
	     */
	    WebhookType[WebhookType["ChannelFollower"] = 2] = "ChannelFollower";
	    /**
	     * Application webhooks are webhooks used with Interactions
	     */
	    WebhookType[WebhookType["Application"] = 3] = "Application";
	})(WebhookType || (webhook$5.WebhookType = WebhookType = {}));
	
	return webhook$5;
}

var monetization$5 = {};

var hasRequiredMonetization$5;

function requireMonetization$5 () {
	if (hasRequiredMonetization$5) return monetization$5;
	hasRequiredMonetization$5 = 1;
	Object.defineProperty(monetization$5, "__esModule", { value: true });
	monetization$5.SKUType = monetization$5.SKUFlags = monetization$5.EntitlementType = void 0;
	/**
	 * https://discord.com/developers/docs/monetization/entitlements#entitlement-object-entitlement-types
	 */
	var EntitlementType;
	(function (EntitlementType) {
	    /**
	     * Entitlement was purchased by user
	     */
	    EntitlementType[EntitlementType["Purchase"] = 1] = "Purchase";
	    /**
	     * Entitlement for Discord Nitro subscription
	     */
	    EntitlementType[EntitlementType["PremiumSubscription"] = 2] = "PremiumSubscription";
	    /**
	     * Entitlement was gifted by developer
	     */
	    EntitlementType[EntitlementType["DeveloperGift"] = 3] = "DeveloperGift";
	    /**
	     * Entitlement was purchased by a dev in application test mode
	     */
	    EntitlementType[EntitlementType["TestModePurchase"] = 4] = "TestModePurchase";
	    /**
	     * Entitlement was granted when the SKU was free
	     */
	    EntitlementType[EntitlementType["FreePurchase"] = 5] = "FreePurchase";
	    /**
	     * Entitlement was gifted by another user
	     */
	    EntitlementType[EntitlementType["UserGift"] = 6] = "UserGift";
	    /**
	     * Entitlement was claimed by user for free as a Nitro Subscriber
	     */
	    EntitlementType[EntitlementType["PremiumPurchase"] = 7] = "PremiumPurchase";
	    /**
	     * Entitlement was purchased as an app subscription
	     */
	    EntitlementType[EntitlementType["ApplicationSubscription"] = 8] = "ApplicationSubscription";
	})(EntitlementType || (monetization$5.EntitlementType = EntitlementType = {}));
	/**
	 * https://discord.com/developers/docs/monetization/skus#sku-object-sku-flags
	 */
	var SKUFlags;
	(function (SKUFlags) {
	    /**
	     * SKU is available for purchase
	     */
	    SKUFlags[SKUFlags["Available"] = 4] = "Available";
	    /**
	     * Recurring SKU that can be purchased by a user and applied to a single server.
	     * Grants access to every user in that server.
	     */
	    SKUFlags[SKUFlags["GuildSubscription"] = 128] = "GuildSubscription";
	    /**
	     * Recurring SKU purchased by a user for themselves. Grants access to the purchasing user in every server.
	     */
	    SKUFlags[SKUFlags["UserSubscription"] = 256] = "UserSubscription";
	})(SKUFlags || (monetization$5.SKUFlags = SKUFlags = {}));
	var SKUType;
	(function (SKUType) {
	    /**
	     * Durable one-time purchase
	     */
	    SKUType[SKUType["Durable"] = 2] = "Durable";
	    /**
	     * Consumable one-time purchase
	     */
	    SKUType[SKUType["Consumable"] = 3] = "Consumable";
	    /**
	     * Represents a recurring subscription
	     */
	    SKUType[SKUType["Subscription"] = 5] = "Subscription";
	    /**
	     * System-generated group for each Subscription SKU created
	     */
	    SKUType[SKUType["SubscriptionGroup"] = 6] = "SubscriptionGroup";
	})(SKUType || (monetization$5.SKUType = SKUType = {}));
	
	return monetization$5;
}

var hasRequiredV10$g;

function requireV10$g () {
	if (hasRequiredV10$g) return v10$t;
	hasRequiredV10$g = 1;
	(function (exports) {
		var __createBinding = (v10$t && v10$t.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (v10$t && v10$t.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(requireCommon$a(), exports);
		__exportStar(requireApplication$6(), exports);
		__exportStar(requireAuditLog$5(), exports);
		__exportStar(requireAutoModeration$5(), exports);
		__exportStar(requireChannel$8(), exports);
		__exportStar(requireEmoji$6(), exports);
		__exportStar(requireGateway$5(), exports);
		__exportStar(requireGuild$6(), exports);
		__exportStar(requireGuildScheduledEvent$6(), exports);
		__exportStar(requireInteractions$5(), exports);
		__exportStar(requireInvite$6(), exports);
		__exportStar(requireOauth2$5(), exports);
		__exportStar(requirePoll$6(), exports);
		__exportStar(requirePermissions$4(), exports);
		__exportStar(requireStageInstance$6(), exports);
		__exportStar(requireSticker$6(), exports);
		__exportStar(requireTeams$2(), exports);
		__exportStar(requireTemplate$5(), exports);
		__exportStar(requireUser$8(), exports);
		__exportStar(requireVoice$5(), exports);
		__exportStar(requireWebhook$6(), exports);
		__exportStar(requireMonetization$5(), exports);
		
	} (v10$t));
	return v10$t;
}

var v10Exports$d = requireV10$g();
var mod$f = /*@__PURE__*/getDefaultExportFromCjs(v10Exports$d);

const APIApplicationCommandPermissionsConstant$2 = mod$f.APIApplicationCommandPermissionsConstant;
const ActivityFlags$2 = mod$f.ActivityFlags;
const ActivityPlatform$2 = mod$f.ActivityPlatform;
const ActivityType$2 = mod$f.ActivityType;
const AllowedMentionsTypes$2 = mod$f.AllowedMentionsTypes;
const ApplicationCommandOptionType$2 = mod$f.ApplicationCommandOptionType;
const ApplicationCommandPermissionType$2 = mod$f.ApplicationCommandPermissionType;
const ApplicationCommandType$2 = mod$f.ApplicationCommandType;
const ApplicationFlags$2 = mod$f.ApplicationFlags;
const ApplicationIntegrationType$1 = mod$f.ApplicationIntegrationType;
const ApplicationRoleConnectionMetadataType$2 = mod$f.ApplicationRoleConnectionMetadataType;
const AttachmentFlags$2 = mod$f.AttachmentFlags;
const AuditLogEvent$2 = mod$f.AuditLogEvent;
const AuditLogOptionsType$2 = mod$f.AuditLogOptionsType;
const AutoModerationActionType$2 = mod$f.AutoModerationActionType;
const AutoModerationRuleEventType$2 = mod$f.AutoModerationRuleEventType;
const AutoModerationRuleKeywordPresetType$2 = mod$f.AutoModerationRuleKeywordPresetType;
const AutoModerationRuleTriggerType$2 = mod$f.AutoModerationRuleTriggerType;
const ButtonStyle$2 = mod$f.ButtonStyle;
const ChannelFlags$2 = mod$f.ChannelFlags;
const ChannelType$2 = mod$f.ChannelType;
const ComponentType$2 = mod$f.ComponentType;
const ConnectionService$2 = mod$f.ConnectionService;
const ConnectionVisibility$2 = mod$f.ConnectionVisibility;
const EmbedType$2 = mod$f.EmbedType;
const EntitlementType$2 = mod$f.EntitlementType;
const ForumLayoutType$2 = mod$f.ForumLayoutType;
const GuildDefaultMessageNotifications$2 = mod$f.GuildDefaultMessageNotifications;
const GuildExplicitContentFilter$2 = mod$f.GuildExplicitContentFilter;
const GuildFeature$2 = mod$f.GuildFeature;
const GuildHubType$2 = mod$f.GuildHubType;
const GuildMFALevel$2 = mod$f.GuildMFALevel;
const GuildMemberFlags$2 = mod$f.GuildMemberFlags;
const GuildNSFWLevel$2 = mod$f.GuildNSFWLevel;
const GuildOnboardingMode$2 = mod$f.GuildOnboardingMode;
const GuildOnboardingPromptType$2 = mod$f.GuildOnboardingPromptType;
const GuildPremiumTier$2 = mod$f.GuildPremiumTier;
const GuildScheduledEventEntityType$2 = mod$f.GuildScheduledEventEntityType;
const GuildScheduledEventPrivacyLevel$2 = mod$f.GuildScheduledEventPrivacyLevel;
const GuildScheduledEventRecurrenceRuleFrequency$1 = mod$f.GuildScheduledEventRecurrenceRuleFrequency;
const GuildScheduledEventRecurrenceRuleMonth$1 = mod$f.GuildScheduledEventRecurrenceRuleMonth;
const GuildScheduledEventRecurrenceRuleWeekday$1 = mod$f.GuildScheduledEventRecurrenceRuleWeekday;
const GuildScheduledEventStatus$2 = mod$f.GuildScheduledEventStatus;
const GuildSystemChannelFlags$2 = mod$f.GuildSystemChannelFlags;
const GuildVerificationLevel$2 = mod$f.GuildVerificationLevel;
const GuildWidgetStyle$2 = mod$f.GuildWidgetStyle;
const IntegrationExpireBehavior$2 = mod$f.IntegrationExpireBehavior;
const InteractionContextType$1 = mod$f.InteractionContextType;
const InteractionResponseType$2 = mod$f.InteractionResponseType;
const InteractionType$2 = mod$f.InteractionType;
const InviteTargetType$2 = mod$f.InviteTargetType;
const InviteType$2 = mod$f.InviteType;
const MembershipScreeningFieldType$2 = mod$f.MembershipScreeningFieldType;
const MessageActivityType$2 = mod$f.MessageActivityType;
const MessageFlags$2 = mod$f.MessageFlags;
const MessageReferenceType$1 = mod$f.MessageReferenceType;
const MessageType$2 = mod$f.MessageType;
const OAuth2Scopes$2 = mod$f.OAuth2Scopes;
const OverwriteType$2 = mod$f.OverwriteType;
const PermissionFlagsBits$2 = mod$f.PermissionFlagsBits;
const PollLayoutType$2 = mod$f.PollLayoutType;
const PresenceUpdateStatus$2 = mod$f.PresenceUpdateStatus;
const RoleFlags$2 = mod$f.RoleFlags;
const SKUFlags$2 = mod$f.SKUFlags;
const SKUType$2 = mod$f.SKUType;
const SelectMenuDefaultValueType$2 = mod$f.SelectMenuDefaultValueType;
const SortOrderType$2 = mod$f.SortOrderType;
const StageInstancePrivacyLevel$2 = mod$f.StageInstancePrivacyLevel;
const StickerFormatType$2 = mod$f.StickerFormatType;
const StickerType$2 = mod$f.StickerType;
const TeamMemberMembershipState$2 = mod$f.TeamMemberMembershipState;
const TeamMemberRole$2 = mod$f.TeamMemberRole;
const TextInputStyle$2 = mod$f.TextInputStyle;
const ThreadAutoArchiveDuration$2 = mod$f.ThreadAutoArchiveDuration;
const ThreadMemberFlags$2 = mod$f.ThreadMemberFlags;
const UserFlags$2 = mod$f.UserFlags;
const UserPremiumType$2 = mod$f.UserPremiumType;
const VideoQualityMode$2 = mod$f.VideoQualityMode;
const WebhookType$2 = mod$f.WebhookType;

var v10$s = /*#__PURE__*/Object.freeze({
	__proto__: null,
	APIApplicationCommandPermissionsConstant: APIApplicationCommandPermissionsConstant$2,
	ActivityFlags: ActivityFlags$2,
	ActivityPlatform: ActivityPlatform$2,
	ActivityType: ActivityType$2,
	AllowedMentionsTypes: AllowedMentionsTypes$2,
	ApplicationCommandOptionType: ApplicationCommandOptionType$2,
	ApplicationCommandPermissionType: ApplicationCommandPermissionType$2,
	ApplicationCommandType: ApplicationCommandType$2,
	ApplicationFlags: ApplicationFlags$2,
	ApplicationIntegrationType: ApplicationIntegrationType$1,
	ApplicationRoleConnectionMetadataType: ApplicationRoleConnectionMetadataType$2,
	AttachmentFlags: AttachmentFlags$2,
	AuditLogEvent: AuditLogEvent$2,
	AuditLogOptionsType: AuditLogOptionsType$2,
	AutoModerationActionType: AutoModerationActionType$2,
	AutoModerationRuleEventType: AutoModerationRuleEventType$2,
	AutoModerationRuleKeywordPresetType: AutoModerationRuleKeywordPresetType$2,
	AutoModerationRuleTriggerType: AutoModerationRuleTriggerType$2,
	ButtonStyle: ButtonStyle$2,
	ChannelFlags: ChannelFlags$2,
	ChannelType: ChannelType$2,
	ComponentType: ComponentType$2,
	ConnectionService: ConnectionService$2,
	ConnectionVisibility: ConnectionVisibility$2,
	EmbedType: EmbedType$2,
	EntitlementType: EntitlementType$2,
	ForumLayoutType: ForumLayoutType$2,
	GuildDefaultMessageNotifications: GuildDefaultMessageNotifications$2,
	GuildExplicitContentFilter: GuildExplicitContentFilter$2,
	GuildFeature: GuildFeature$2,
	GuildHubType: GuildHubType$2,
	GuildMFALevel: GuildMFALevel$2,
	GuildMemberFlags: GuildMemberFlags$2,
	GuildNSFWLevel: GuildNSFWLevel$2,
	GuildOnboardingMode: GuildOnboardingMode$2,
	GuildOnboardingPromptType: GuildOnboardingPromptType$2,
	GuildPremiumTier: GuildPremiumTier$2,
	GuildScheduledEventEntityType: GuildScheduledEventEntityType$2,
	GuildScheduledEventPrivacyLevel: GuildScheduledEventPrivacyLevel$2,
	GuildScheduledEventRecurrenceRuleFrequency: GuildScheduledEventRecurrenceRuleFrequency$1,
	GuildScheduledEventRecurrenceRuleMonth: GuildScheduledEventRecurrenceRuleMonth$1,
	GuildScheduledEventRecurrenceRuleWeekday: GuildScheduledEventRecurrenceRuleWeekday$1,
	GuildScheduledEventStatus: GuildScheduledEventStatus$2,
	GuildSystemChannelFlags: GuildSystemChannelFlags$2,
	GuildVerificationLevel: GuildVerificationLevel$2,
	GuildWidgetStyle: GuildWidgetStyle$2,
	IntegrationExpireBehavior: IntegrationExpireBehavior$2,
	InteractionContextType: InteractionContextType$1,
	InteractionResponseType: InteractionResponseType$2,
	InteractionType: InteractionType$2,
	InviteTargetType: InviteTargetType$2,
	InviteType: InviteType$2,
	MembershipScreeningFieldType: MembershipScreeningFieldType$2,
	MessageActivityType: MessageActivityType$2,
	MessageFlags: MessageFlags$2,
	MessageReferenceType: MessageReferenceType$1,
	MessageType: MessageType$2,
	OAuth2Scopes: OAuth2Scopes$2,
	OverwriteType: OverwriteType$2,
	PermissionFlagsBits: PermissionFlagsBits$2,
	PollLayoutType: PollLayoutType$2,
	PresenceUpdateStatus: PresenceUpdateStatus$2,
	RoleFlags: RoleFlags$2,
	SKUFlags: SKUFlags$2,
	SKUType: SKUType$2,
	SelectMenuDefaultValueType: SelectMenuDefaultValueType$2,
	SortOrderType: SortOrderType$2,
	StageInstancePrivacyLevel: StageInstancePrivacyLevel$2,
	StickerFormatType: StickerFormatType$2,
	StickerType: StickerType$2,
	TeamMemberMembershipState: TeamMemberMembershipState$2,
	TeamMemberRole: TeamMemberRole$2,
	TextInputStyle: TextInputStyle$2,
	ThreadAutoArchiveDuration: ThreadAutoArchiveDuration$2,
	ThreadMemberFlags: ThreadMemberFlags$2,
	UserFlags: UserFlags$2,
	UserPremiumType: UserPremiumType$2,
	VideoQualityMode: VideoQualityMode$2,
	WebhookType: WebhookType$2,
	default: mod$f
});

var require$$2$2 = /*@__PURE__*/getAugmentedNamespace(v10$s);

var v10$r = {};

var common$9 = {};

var hasRequiredCommon$9;

function requireCommon$9 () {
	if (hasRequiredCommon$9) return common$9;
	hasRequiredCommon$9 = 1;
	Object.defineProperty(common$9, "__esModule", { value: true });
	common$9.Locale = common$9.RESTJSONErrorCodes = void 0;
	/**
	 * https://discord.com/developers/docs/topics/opcodes-and-status-codes#json-json-error-codes
	 */
	var RESTJSONErrorCodes;
	(function (RESTJSONErrorCodes) {
	    RESTJSONErrorCodes[RESTJSONErrorCodes["GeneralError"] = 0] = "GeneralError";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownAccount"] = 10001] = "UnknownAccount";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownApplication"] = 10002] = "UnknownApplication";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownChannel"] = 10003] = "UnknownChannel";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownGuild"] = 10004] = "UnknownGuild";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownIntegration"] = 10005] = "UnknownIntegration";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownInvite"] = 10006] = "UnknownInvite";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownMember"] = 10007] = "UnknownMember";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownMessage"] = 10008] = "UnknownMessage";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownPermissionOverwrite"] = 10009] = "UnknownPermissionOverwrite";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownProvider"] = 10010] = "UnknownProvider";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownRole"] = 10011] = "UnknownRole";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownToken"] = 10012] = "UnknownToken";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownUser"] = 10013] = "UnknownUser";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownEmoji"] = 10014] = "UnknownEmoji";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownWebhook"] = 10015] = "UnknownWebhook";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownWebhookService"] = 10016] = "UnknownWebhookService";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownSession"] = 10020] = "UnknownSession";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownBan"] = 10026] = "UnknownBan";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownSKU"] = 10027] = "UnknownSKU";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownStoreListing"] = 10028] = "UnknownStoreListing";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownEntitlement"] = 10029] = "UnknownEntitlement";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownBuild"] = 10030] = "UnknownBuild";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownLobby"] = 10031] = "UnknownLobby";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownBranch"] = 10032] = "UnknownBranch";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownStoreDirectoryLayout"] = 10033] = "UnknownStoreDirectoryLayout";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownRedistributable"] = 10036] = "UnknownRedistributable";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownGiftCode"] = 10038] = "UnknownGiftCode";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownStream"] = 10049] = "UnknownStream";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownPremiumServerSubscribeCooldown"] = 10050] = "UnknownPremiumServerSubscribeCooldown";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownGuildTemplate"] = 10057] = "UnknownGuildTemplate";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownDiscoverableServerCategory"] = 10059] = "UnknownDiscoverableServerCategory";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownSticker"] = 10060] = "UnknownSticker";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownStickerPack"] = 10061] = "UnknownStickerPack";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownInteraction"] = 10062] = "UnknownInteraction";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownApplicationCommand"] = 10063] = "UnknownApplicationCommand";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownVoiceState"] = 10065] = "UnknownVoiceState";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownApplicationCommandPermissions"] = 10066] = "UnknownApplicationCommandPermissions";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownStageInstance"] = 10067] = "UnknownStageInstance";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownGuildMemberVerificationForm"] = 10068] = "UnknownGuildMemberVerificationForm";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownGuildWelcomeScreen"] = 10069] = "UnknownGuildWelcomeScreen";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownGuildScheduledEvent"] = 10070] = "UnknownGuildScheduledEvent";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownGuildScheduledEventUser"] = 10071] = "UnknownGuildScheduledEventUser";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownTag"] = 10087] = "UnknownTag";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["BotsCannotUseThisEndpoint"] = 20001] = "BotsCannotUseThisEndpoint";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["OnlyBotsCanUseThisEndpoint"] = 20002] = "OnlyBotsCanUseThisEndpoint";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ExplicitContentCannotBeSentToTheDesiredRecipient"] = 20009] = "ExplicitContentCannotBeSentToTheDesiredRecipient";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["NotAuthorizedToPerformThisActionOnThisApplication"] = 20012] = "NotAuthorizedToPerformThisActionOnThisApplication";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ActionCannotBePerformedDueToSlowmodeRateLimit"] = 20016] = "ActionCannotBePerformedDueToSlowmodeRateLimit";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["TheMazeIsntMeantForYou"] = 20017] = "TheMazeIsntMeantForYou";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["OnlyTheOwnerOfThisAccountCanPerformThisAction"] = 20018] = "OnlyTheOwnerOfThisAccountCanPerformThisAction";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["AnnouncementEditLimitExceeded"] = 20022] = "AnnouncementEditLimitExceeded";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnderMinimumAge"] = 20024] = "UnderMinimumAge";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ChannelSendRateLimit"] = 20028] = "ChannelSendRateLimit";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ServerSendRateLimit"] = 20029] = "ServerSendRateLimit";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["StageTopicServerNameServerDescriptionOrChannelNamesContainDisallowedWords"] = 20031] = "StageTopicServerNameServerDescriptionOrChannelNamesContainDisallowedWords";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["GuildPremiumSubscriptionLevelTooLow"] = 20035] = "GuildPremiumSubscriptionLevelTooLow";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfGuildsReached"] = 30001] = "MaximumNumberOfGuildsReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfFriendsReached"] = 30002] = "MaximumNumberOfFriendsReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfPinsReachedForTheChannel"] = 30003] = "MaximumNumberOfPinsReachedForTheChannel";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfRecipientsReached"] = 30004] = "MaximumNumberOfRecipientsReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfGuildRolesReached"] = 30005] = "MaximumNumberOfGuildRolesReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfWebhooksReached"] = 30007] = "MaximumNumberOfWebhooksReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfEmojisReached"] = 30008] = "MaximumNumberOfEmojisReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfReactionsReached"] = 30010] = "MaximumNumberOfReactionsReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfGroupDMsReached"] = 30011] = "MaximumNumberOfGroupDMsReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfGuildChannelsReached"] = 30013] = "MaximumNumberOfGuildChannelsReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfAttachmentsInAMessageReached"] = 30015] = "MaximumNumberOfAttachmentsInAMessageReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfInvitesReached"] = 30016] = "MaximumNumberOfInvitesReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfAnimatedEmojisReached"] = 30018] = "MaximumNumberOfAnimatedEmojisReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfServerMembersReached"] = 30019] = "MaximumNumberOfServerMembersReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfServerCategoriesReached"] = 30030] = "MaximumNumberOfServerCategoriesReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["GuildAlreadyHasTemplate"] = 30031] = "GuildAlreadyHasTemplate";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfApplicationCommandsReached"] = 30032] = "MaximumNumberOfApplicationCommandsReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumThreadParticipantsReached"] = 30033] = "MaximumThreadParticipantsReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumDailyApplicationCommandCreatesReached"] = 30034] = "MaximumDailyApplicationCommandCreatesReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfNonGuildMemberBansHasBeenExceeded"] = 30035] = "MaximumNumberOfNonGuildMemberBansHasBeenExceeded";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfBanFetchesHasBeenReached"] = 30037] = "MaximumNumberOfBanFetchesHasBeenReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfUncompletedGuildScheduledEventsReached"] = 30038] = "MaximumNumberOfUncompletedGuildScheduledEventsReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfStickersReached"] = 30039] = "MaximumNumberOfStickersReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfPruneRequestsHasBeenReached"] = 30040] = "MaximumNumberOfPruneRequestsHasBeenReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfGuildWidgetSettingsUpdatesHasBeenReached"] = 30042] = "MaximumNumberOfGuildWidgetSettingsUpdatesHasBeenReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfEditsToMessagesOlderThanOneHourReached"] = 30046] = "MaximumNumberOfEditsToMessagesOlderThanOneHourReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfPinnedThreadsInForumHasBeenReached"] = 30047] = "MaximumNumberOfPinnedThreadsInForumHasBeenReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfTagsInForumHasBeenReached"] = 30048] = "MaximumNumberOfTagsInForumHasBeenReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["BitrateIsTooHighForChannelOfThisType"] = 30052] = "BitrateIsTooHighForChannelOfThisType";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfPremiumEmojisReached"] = 30056] = "MaximumNumberOfPremiumEmojisReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfWebhooksPerGuildReached"] = 30058] = "MaximumNumberOfWebhooksPerGuildReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfChannelPermissionOverwritesReached"] = 30060] = "MaximumNumberOfChannelPermissionOverwritesReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["TheChannelsForThisGuildAreTooLarge"] = 30061] = "TheChannelsForThisGuildAreTooLarge";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["Unauthorized"] = 40001] = "Unauthorized";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["VerifyYourAccount"] = 40002] = "VerifyYourAccount";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["OpeningDirectMessagesTooFast"] = 40003] = "OpeningDirectMessagesTooFast";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["SendMessagesHasBeenTemporarilyDisabled"] = 40004] = "SendMessagesHasBeenTemporarilyDisabled";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["RequestEntityTooLarge"] = 40005] = "RequestEntityTooLarge";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["FeatureTemporarilyDisabledServerSide"] = 40006] = "FeatureTemporarilyDisabledServerSide";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UserBannedFromThisGuild"] = 40007] = "UserBannedFromThisGuild";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ConnectionHasBeenRevoked"] = 40012] = "ConnectionHasBeenRevoked";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["TargetUserIsNotConnectedToVoice"] = 40032] = "TargetUserIsNotConnectedToVoice";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ThisMessageWasAlreadyCrossposted"] = 40033] = "ThisMessageWasAlreadyCrossposted";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ApplicationCommandWithThatNameAlreadyExists"] = 40041] = "ApplicationCommandWithThatNameAlreadyExists";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ApplicationInteractionFailedToSend"] = 40043] = "ApplicationInteractionFailedToSend";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotSendAMessageInAForumChannel"] = 40058] = "CannotSendAMessageInAForumChannel";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InteractionHasAlreadyBeenAcknowledged"] = 40060] = "InteractionHasAlreadyBeenAcknowledged";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["TagNamesMustBeUnique"] = 40061] = "TagNamesMustBeUnique";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ServiceResourceIsBeingRateLimited"] = 40062] = "ServiceResourceIsBeingRateLimited";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ThereAreNoTagsAvailableThatCanBeSetByNonModerators"] = 40066] = "ThereAreNoTagsAvailableThatCanBeSetByNonModerators";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["TagRequiredToCreateAForumPostInThisChannel"] = 40067] = "TagRequiredToCreateAForumPostInThisChannel";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["AnEntitlementHasAlreadyBeenGrantedForThisResource"] = 40074] = "AnEntitlementHasAlreadyBeenGrantedForThisResource";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CloudflareIsBlockingYourRequest"] = 40333] = "CloudflareIsBlockingYourRequest";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MissingAccess"] = 50001] = "MissingAccess";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidAccountType"] = 50002] = "InvalidAccountType";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotExecuteActionOnDMChannel"] = 50003] = "CannotExecuteActionOnDMChannel";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["GuildWidgetDisabled"] = 50004] = "GuildWidgetDisabled";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotEditMessageAuthoredByAnotherUser"] = 50005] = "CannotEditMessageAuthoredByAnotherUser";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotSendAnEmptyMessage"] = 50006] = "CannotSendAnEmptyMessage";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotSendMessagesToThisUser"] = 50007] = "CannotSendMessagesToThisUser";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotSendMessagesInNonTextChannel"] = 50008] = "CannotSendMessagesInNonTextChannel";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ChannelVerificationLevelTooHighForYouToGainAccess"] = 50009] = "ChannelVerificationLevelTooHighForYouToGainAccess";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["OAuth2ApplicationDoesNotHaveBot"] = 50010] = "OAuth2ApplicationDoesNotHaveBot";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["OAuth2ApplicationLimitReached"] = 50011] = "OAuth2ApplicationLimitReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidOAuth2State"] = 50012] = "InvalidOAuth2State";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MissingPermissions"] = 50013] = "MissingPermissions";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidToken"] = 50014] = "InvalidToken";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["NoteWasTooLong"] = 50015] = "NoteWasTooLong";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ProvidedTooFewOrTooManyMessagesToDelete"] = 50016] = "ProvidedTooFewOrTooManyMessagesToDelete";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidMFALevel"] = 50017] = "InvalidMFALevel";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MessageCanOnlyBePinnedInTheChannelItWasSentIn"] = 50019] = "MessageCanOnlyBePinnedInTheChannelItWasSentIn";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InviteCodeInvalidOrTaken"] = 50020] = "InviteCodeInvalidOrTaken";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotExecuteActionOnSystemMessage"] = 50021] = "CannotExecuteActionOnSystemMessage";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotExecuteActionOnThisChannelType"] = 50024] = "CannotExecuteActionOnThisChannelType";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidOAuth2AccessToken"] = 50025] = "InvalidOAuth2AccessToken";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MissingRequiredOAuth2Scope"] = 50026] = "MissingRequiredOAuth2Scope";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidWebhookToken"] = 50027] = "InvalidWebhookToken";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidRole"] = 50028] = "InvalidRole";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidRecipients"] = 50033] = "InvalidRecipients";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["OneOfTheMessagesProvidedWasTooOldForBulkDelete"] = 50034] = "OneOfTheMessagesProvidedWasTooOldForBulkDelete";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidFormBodyOrContentType"] = 50035] = "InvalidFormBodyOrContentType";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InviteAcceptedToGuildWithoutTheBotBeingIn"] = 50036] = "InviteAcceptedToGuildWithoutTheBotBeingIn";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidActivityAction"] = 50039] = "InvalidActivityAction";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidAPIVersion"] = 50041] = "InvalidAPIVersion";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["FileUploadedExceedsMaximumSize"] = 50045] = "FileUploadedExceedsMaximumSize";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidFileUploaded"] = 50046] = "InvalidFileUploaded";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotSelfRedeemThisGift"] = 50054] = "CannotSelfRedeemThisGift";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidGuild"] = 50055] = "InvalidGuild";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidSKU"] = 50057] = "InvalidSKU";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidRequestOrigin"] = 50067] = "InvalidRequestOrigin";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidMessageType"] = 50068] = "InvalidMessageType";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["PaymentSourceRequiredToRedeemGift"] = 50070] = "PaymentSourceRequiredToRedeemGift";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotModifyASystemWebhook"] = 50073] = "CannotModifyASystemWebhook";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotDeleteChannelRequiredForCommunityGuilds"] = 50074] = "CannotDeleteChannelRequiredForCommunityGuilds";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotEditStickersWithinMessage"] = 50080] = "CannotEditStickersWithinMessage";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidStickerSent"] = 50081] = "InvalidStickerSent";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidActionOnArchivedThread"] = 50083] = "InvalidActionOnArchivedThread";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidThreadNotificationSettings"] = 50084] = "InvalidThreadNotificationSettings";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ParameterEarlierThanCreation"] = 50085] = "ParameterEarlierThanCreation";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CommunityServerChannelsMustBeTextChannels"] = 50086] = "CommunityServerChannelsMustBeTextChannels";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["TheEntityTypeOfTheEventIsDifferentFromTheEntityYouAreTryingToStartTheEventFor"] = 50091] = "TheEntityTypeOfTheEventIsDifferentFromTheEntityYouAreTryingToStartTheEventFor";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ServerNotAvailableInYourLocation"] = 50095] = "ServerNotAvailableInYourLocation";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ServerNeedsMonetizationEnabledToPerformThisAction"] = 50097] = "ServerNeedsMonetizationEnabledToPerformThisAction";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ServerNeedsMoreBoostsToPerformThisAction"] = 50101] = "ServerNeedsMoreBoostsToPerformThisAction";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["RequestBodyContainsInvalidJSON"] = 50109] = "RequestBodyContainsInvalidJSON";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["OwnerCannotBePendingMember"] = 50131] = "OwnerCannotBePendingMember";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["OwnershipCannotBeMovedToABotUser"] = 50132] = "OwnershipCannotBeMovedToABotUser";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["FailedToResizeAssetBelowTheMinimumSize"] = 50138] = "FailedToResizeAssetBelowTheMinimumSize";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotMixSubscriptionAndNonSubscriptionRolesForAnEmoji"] = 50144] = "CannotMixSubscriptionAndNonSubscriptionRolesForAnEmoji";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotConvertBetweenPremiumEmojiAndNormalEmoji"] = 50145] = "CannotConvertBetweenPremiumEmojiAndNormalEmoji";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UploadedFileNotFound"] = 50146] = "UploadedFileNotFound";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["VoiceMessagesDoNotSupportAdditionalContent"] = 50159] = "VoiceMessagesDoNotSupportAdditionalContent";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["VoiceMessagesMustHaveASingleAudioAttachment"] = 50160] = "VoiceMessagesMustHaveASingleAudioAttachment";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["VoiceMessagesMustHaveSupportingMetadata"] = 50161] = "VoiceMessagesMustHaveSupportingMetadata";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["VoiceMessagesCannotBeEdited"] = 50162] = "VoiceMessagesCannotBeEdited";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotDeleteGuildSubscriptionIntegration"] = 50163] = "CannotDeleteGuildSubscriptionIntegration";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["YouCannotSendVoiceMessagesInThisChannel"] = 50173] = "YouCannotSendVoiceMessagesInThisChannel";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["TheUserAccountMustFirstBeVerified"] = 50178] = "TheUserAccountMustFirstBeVerified";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["YouDoNotHavePermissionToSendThisSticker"] = 50600] = "YouDoNotHavePermissionToSendThisSticker";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["TwoFactorAuthenticationIsRequired"] = 60003] = "TwoFactorAuthenticationIsRequired";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["NoUsersWithDiscordTagExist"] = 80004] = "NoUsersWithDiscordTagExist";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ReactionWasBlocked"] = 90001] = "ReactionWasBlocked";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UserCannotUseBurstReactions"] = 90002] = "UserCannotUseBurstReactions";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ApplicationNotYetAvailable"] = 110001] = "ApplicationNotYetAvailable";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["APIResourceOverloaded"] = 130000] = "APIResourceOverloaded";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["TheStageIsAlreadyOpen"] = 150006] = "TheStageIsAlreadyOpen";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotReplyWithoutPermissionToReadMessageHistory"] = 160002] = "CannotReplyWithoutPermissionToReadMessageHistory";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ThreadAlreadyCreatedForMessage"] = 160004] = "ThreadAlreadyCreatedForMessage";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ThreadLocked"] = 160005] = "ThreadLocked";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumActiveThreads"] = 160006] = "MaximumActiveThreads";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumActiveAnnouncementThreads"] = 160007] = "MaximumActiveAnnouncementThreads";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidJSONForUploadedLottieFile"] = 170001] = "InvalidJSONForUploadedLottieFile";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UploadedLottiesCannotContainRasterizedImages"] = 170002] = "UploadedLottiesCannotContainRasterizedImages";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["StickerMaximumFramerateExceeded"] = 170003] = "StickerMaximumFramerateExceeded";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["StickerFrameCountExceedsMaximumOf1000Frames"] = 170004] = "StickerFrameCountExceedsMaximumOf1000Frames";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["LottieAnimationMaximumDimensionsExceeded"] = 170005] = "LottieAnimationMaximumDimensionsExceeded";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["StickerFramerateIsTooSmallOrTooLarge"] = 170006] = "StickerFramerateIsTooSmallOrTooLarge";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["StickerAnimationDurationExceedsMaximumOf5Seconds"] = 170007] = "StickerAnimationDurationExceedsMaximumOf5Seconds";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotUpdateAFinishedEvent"] = 180000] = "CannotUpdateAFinishedEvent";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["FailedToCreateStageNeededForStageEvent"] = 180002] = "FailedToCreateStageNeededForStageEvent";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MessageWasBlockedByAutomaticModeration"] = 200000] = "MessageWasBlockedByAutomaticModeration";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["TitleWasBlockedByAutomaticModeration"] = 200001] = "TitleWasBlockedByAutomaticModeration";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["WebhooksPostedToForumChannelsMustHaveAThreadNameOrThreadId"] = 220001] = "WebhooksPostedToForumChannelsMustHaveAThreadNameOrThreadId";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["WebhooksPostedToForumChannelsCannotHaveBothAThreadNameAndThreadId"] = 220002] = "WebhooksPostedToForumChannelsCannotHaveBothAThreadNameAndThreadId";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["WebhooksCanOnlyCreateThreadsInForumChannels"] = 220003] = "WebhooksCanOnlyCreateThreadsInForumChannels";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["WebhookServicesCannotBeUsedInForumChannels"] = 220004] = "WebhookServicesCannotBeUsedInForumChannels";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MessageBlockedByHarmfulLinksFilter"] = 240000] = "MessageBlockedByHarmfulLinksFilter";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotEnableOnboardingRequirementsAreNotMet"] = 350000] = "CannotEnableOnboardingRequirementsAreNotMet";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotUpdateOnboardingWhileBelowRequirements"] = 350001] = "CannotUpdateOnboardingWhileBelowRequirements";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["FailedToBanUsers"] = 500000] = "FailedToBanUsers";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["PollVotingBlocked"] = 520000] = "PollVotingBlocked";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["PollExpired"] = 520001] = "PollExpired";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidChannelTypeForPollCreation"] = 520002] = "InvalidChannelTypeForPollCreation";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotEditAPollMessage"] = 520003] = "CannotEditAPollMessage";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotUseAnEmojiIncludedWithThePoll"] = 520004] = "CannotUseAnEmojiIncludedWithThePoll";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotExpireANonPollMessage"] = 520006] = "CannotExpireANonPollMessage";
	})(RESTJSONErrorCodes || (common$9.RESTJSONErrorCodes = RESTJSONErrorCodes = {}));
	/**
	 * https://discord.com/developers/docs/reference#locales
	 */
	var Locale;
	(function (Locale) {
	    Locale["Indonesian"] = "id";
	    Locale["EnglishUS"] = "en-US";
	    Locale["EnglishGB"] = "en-GB";
	    Locale["Bulgarian"] = "bg";
	    Locale["ChineseCN"] = "zh-CN";
	    Locale["ChineseTW"] = "zh-TW";
	    Locale["Croatian"] = "hr";
	    Locale["Czech"] = "cs";
	    Locale["Danish"] = "da";
	    Locale["Dutch"] = "nl";
	    Locale["Finnish"] = "fi";
	    Locale["French"] = "fr";
	    Locale["German"] = "de";
	    Locale["Greek"] = "el";
	    Locale["Hindi"] = "hi";
	    Locale["Hungarian"] = "hu";
	    Locale["Italian"] = "it";
	    Locale["Japanese"] = "ja";
	    Locale["Korean"] = "ko";
	    Locale["Lithuanian"] = "lt";
	    Locale["Norwegian"] = "no";
	    Locale["Polish"] = "pl";
	    Locale["PortugueseBR"] = "pt-BR";
	    Locale["Romanian"] = "ro";
	    Locale["Russian"] = "ru";
	    Locale["SpanishES"] = "es-ES";
	    Locale["SpanishLATAM"] = "es-419";
	    Locale["Swedish"] = "sv-SE";
	    Locale["Thai"] = "th";
	    Locale["Turkish"] = "tr";
	    Locale["Ukrainian"] = "uk";
	    Locale["Vietnamese"] = "vi";
	})(Locale || (common$9.Locale = Locale = {}));
	
	return common$9;
}

var application$4 = {};

var hasRequiredApplication$5;

function requireApplication$5 () {
	if (hasRequiredApplication$5) return application$4;
	hasRequiredApplication$5 = 1;
	Object.defineProperty(application$4, "__esModule", { value: true });
	
	return application$4;
}

var auditLog$4 = {};

var hasRequiredAuditLog$4;

function requireAuditLog$4 () {
	if (hasRequiredAuditLog$4) return auditLog$4;
	hasRequiredAuditLog$4 = 1;
	Object.defineProperty(auditLog$4, "__esModule", { value: true });
	
	return auditLog$4;
}

var autoModeration$4 = {};

var hasRequiredAutoModeration$4;

function requireAutoModeration$4 () {
	if (hasRequiredAutoModeration$4) return autoModeration$4;
	hasRequiredAutoModeration$4 = 1;
	Object.defineProperty(autoModeration$4, "__esModule", { value: true });
	
	return autoModeration$4;
}

var channel$6 = {};

var hasRequiredChannel$6;

function requireChannel$6 () {
	if (hasRequiredChannel$6) return channel$6;
	hasRequiredChannel$6 = 1;
	Object.defineProperty(channel$6, "__esModule", { value: true });
	channel$6.ReactionType = void 0;
	/**
	 * https://discord.com/developers/docs/resources/channel#get-reactions-reaction-types
	 */
	var ReactionType;
	(function (ReactionType) {
	    ReactionType[ReactionType["Normal"] = 0] = "Normal";
	    ReactionType[ReactionType["Super"] = 1] = "Super";
	})(ReactionType || (channel$6.ReactionType = ReactionType = {}));
	
	return channel$6;
}

var emoji$4 = {};

var hasRequiredEmoji$5;

function requireEmoji$5 () {
	if (hasRequiredEmoji$5) return emoji$4;
	hasRequiredEmoji$5 = 1;
	Object.defineProperty(emoji$4, "__esModule", { value: true });
	
	return emoji$4;
}

var gateway$4 = {};

var hasRequiredGateway$4;

function requireGateway$4 () {
	if (hasRequiredGateway$4) return gateway$4;
	hasRequiredGateway$4 = 1;
	Object.defineProperty(gateway$4, "__esModule", { value: true });
	
	return gateway$4;
}

var guild$4 = {};

var hasRequiredGuild$5;

function requireGuild$5 () {
	if (hasRequiredGuild$5) return guild$4;
	hasRequiredGuild$5 = 1;
	Object.defineProperty(guild$4, "__esModule", { value: true });
	
	return guild$4;
}

var guildScheduledEvent$4 = {};

var hasRequiredGuildScheduledEvent$5;

function requireGuildScheduledEvent$5 () {
	if (hasRequiredGuildScheduledEvent$5) return guildScheduledEvent$4;
	hasRequiredGuildScheduledEvent$5 = 1;
	Object.defineProperty(guildScheduledEvent$4, "__esModule", { value: true });
	
	return guildScheduledEvent$4;
}

var interactions$4 = {};

var hasRequiredInteractions$4;

function requireInteractions$4 () {
	if (hasRequiredInteractions$4) return interactions$4;
	hasRequiredInteractions$4 = 1;
	Object.defineProperty(interactions$4, "__esModule", { value: true });
	
	return interactions$4;
}

var invite$4 = {};

var hasRequiredInvite$5;

function requireInvite$5 () {
	if (hasRequiredInvite$5) return invite$4;
	hasRequiredInvite$5 = 1;
	Object.defineProperty(invite$4, "__esModule", { value: true });
	
	return invite$4;
}

var oauth2$4 = {};

var hasRequiredOauth2$4;

function requireOauth2$4 () {
	if (hasRequiredOauth2$4) return oauth2$4;
	hasRequiredOauth2$4 = 1;
	Object.defineProperty(oauth2$4, "__esModule", { value: true });
	
	return oauth2$4;
}

var poll$4 = {};

var hasRequiredPoll$5;

function requirePoll$5 () {
	if (hasRequiredPoll$5) return poll$4;
	hasRequiredPoll$5 = 1;
	Object.defineProperty(poll$4, "__esModule", { value: true });
	
	return poll$4;
}

var stageInstance$4 = {};

var hasRequiredStageInstance$5;

function requireStageInstance$5 () {
	if (hasRequiredStageInstance$5) return stageInstance$4;
	hasRequiredStageInstance$5 = 1;
	Object.defineProperty(stageInstance$4, "__esModule", { value: true });
	
	return stageInstance$4;
}

var sticker$4 = {};

var hasRequiredSticker$5;

function requireSticker$5 () {
	if (hasRequiredSticker$5) return sticker$4;
	hasRequiredSticker$5 = 1;
	Object.defineProperty(sticker$4, "__esModule", { value: true });
	
	return sticker$4;
}

var template$4 = {};

var hasRequiredTemplate$4;

function requireTemplate$4 () {
	if (hasRequiredTemplate$4) return template$4;
	hasRequiredTemplate$4 = 1;
	Object.defineProperty(template$4, "__esModule", { value: true });
	
	return template$4;
}

var user$6 = {};

var hasRequiredUser$7;

function requireUser$7 () {
	if (hasRequiredUser$7) return user$6;
	hasRequiredUser$7 = 1;
	Object.defineProperty(user$6, "__esModule", { value: true });
	
	return user$6;
}

var voice$4 = {};

var hasRequiredVoice$4;

function requireVoice$4 () {
	if (hasRequiredVoice$4) return voice$4;
	hasRequiredVoice$4 = 1;
	Object.defineProperty(voice$4, "__esModule", { value: true });
	
	return voice$4;
}

var webhook$4 = {};

var hasRequiredWebhook$5;

function requireWebhook$5 () {
	if (hasRequiredWebhook$5) return webhook$4;
	hasRequiredWebhook$5 = 1;
	Object.defineProperty(webhook$4, "__esModule", { value: true });
	
	return webhook$4;
}

var monetization$4 = {};

var hasRequiredMonetization$4;

function requireMonetization$4 () {
	if (hasRequiredMonetization$4) return monetization$4;
	hasRequiredMonetization$4 = 1;
	Object.defineProperty(monetization$4, "__esModule", { value: true });
	monetization$4.EntitlementOwnerType = void 0;
	/**
	 * https://discord.com/developers/docs/monetization/entitlements#create-test-entitlement
	 */
	var EntitlementOwnerType;
	(function (EntitlementOwnerType) {
	    EntitlementOwnerType[EntitlementOwnerType["Guild"] = 1] = "Guild";
	    EntitlementOwnerType[EntitlementOwnerType["User"] = 2] = "User";
	})(EntitlementOwnerType || (monetization$4.EntitlementOwnerType = EntitlementOwnerType = {}));
	
	return monetization$4;
}

var hasRequiredV10$f;

function requireV10$f () {
	if (hasRequiredV10$f) return v10$r;
	hasRequiredV10$f = 1;
	(function (exports) {
		var __createBinding = (v10$r && v10$r.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (v10$r && v10$r.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.OAuth2Routes = exports.RouteBases = exports.CDNRoutes = exports.ImageFormat = exports.StickerPackApplicationId = exports.Routes = exports.APIVersion = void 0;
		__exportStar(requireCommon$9(), exports);
		__exportStar(requireApplication$5(), exports);
		__exportStar(requireAuditLog$4(), exports);
		__exportStar(requireAutoModeration$4(), exports);
		__exportStar(requireChannel$6(), exports);
		__exportStar(requireEmoji$5(), exports);
		__exportStar(requireGateway$4(), exports);
		__exportStar(requireGuild$5(), exports);
		__exportStar(requireGuildScheduledEvent$5(), exports);
		__exportStar(requireInteractions$4(), exports);
		__exportStar(requireInvite$5(), exports);
		__exportStar(requireOauth2$4(), exports);
		__exportStar(requirePoll$5(), exports);
		__exportStar(requireStageInstance$5(), exports);
		__exportStar(requireSticker$5(), exports);
		__exportStar(requireTemplate$4(), exports);
		__exportStar(requireUser$7(), exports);
		__exportStar(requireVoice$4(), exports);
		__exportStar(requireWebhook$5(), exports);
		__exportStar(requireMonetization$4(), exports);
		exports.APIVersion = '10';
		exports.Routes = {
		    /**
		     * Route for:
		     * - GET `/applications/{application.id}/role-connections/metadata`
		     * - PUT `/applications/{application.id}/role-connections/metadata`
		     */
		    applicationRoleConnectionMetadata(applicationId) {
		        return `/applications/${applicationId}/role-connections/metadata`;
		    },
		    /**
		     * Route for:
		     * - GET  `/guilds/{guild.id}/auto-moderation/rules`
		     * - POST `/guilds/{guild.id}/auto-moderation/rules`
		     */
		    guildAutoModerationRules(guildId) {
		        return `/guilds/${guildId}/auto-moderation/rules`;
		    },
		    /**
		     * Routes for:
		     * - GET    `/guilds/{guild.id}/auto-moderation/rules/{rule.id}`
		     * - PATCH  `/guilds/{guild.id}/auto-moderation/rules/{rule.id}`
		     * - DELETE `/guilds/{guild.id}/auto-moderation/rules/{rule.id}`
		     */
		    guildAutoModerationRule(guildId, ruleId) {
		        return `/guilds/${guildId}/auto-moderation/rules/${ruleId}`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/audit-logs`
		     */
		    guildAuditLog(guildId) {
		        return `/guilds/${guildId}/audit-logs`;
		    },
		    /**
		     * Route for:
		     * - GET    `/channels/{channel.id}`
		     * - PATCH  `/channels/{channel.id}`
		     * - DELETE `/channels/{channel.id}`
		     */
		    channel(channelId) {
		        return `/channels/${channelId}`;
		    },
		    /**
		     * Route for:
		     * - GET  `/channels/{channel.id}/messages`
		     * - POST `/channels/{channel.id}/messages`
		     */
		    channelMessages(channelId) {
		        return `/channels/${channelId}/messages`;
		    },
		    /**
		     * Route for:
		     * - GET    `/channels/{channel.id}/messages/{message.id}`
		     * - PATCH  `/channels/{channel.id}/messages/{message.id}`
		     * - DELETE `/channels/{channel.id}/messages/{message.id}`
		     */
		    channelMessage(channelId, messageId) {
		        return `/channels/${channelId}/messages/${messageId}`;
		    },
		    /**
		     * Route for:
		     * - POST `/channels/{channel.id}/messages/{message.id}/crosspost`
		     */
		    channelMessageCrosspost(channelId, messageId) {
		        return `/channels/${channelId}/messages/${messageId}/crosspost`;
		    },
		    /**
		     * Route for:
		     * - PUT    `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/@me`
		     * - DELETE `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/@me`
		     *
		     * **Note**: You need to URL encode the emoji yourself
		     */
		    channelMessageOwnReaction(channelId, messageId, emoji) {
		        return `/channels/${channelId}/messages/${messageId}/reactions/${emoji}/@me`;
		    },
		    /**
		     * Route for:
		     * - DELETE `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/{user.id}`
		     *
		     * **Note**: You need to URL encode the emoji yourself
		     */
		    channelMessageUserReaction(channelId, messageId, emoji, userId) {
		        return `/channels/${channelId}/messages/${messageId}/reactions/${emoji}/${userId}`;
		    },
		    /**
		     * Route for:
		     * - GET    `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}`
		     * - DELETE `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}`
		     *
		     * **Note**: You need to URL encode the emoji yourself
		     */
		    channelMessageReaction(channelId, messageId, emoji) {
		        return `/channels/${channelId}/messages/${messageId}/reactions/${emoji}`;
		    },
		    /**
		     * Route for:
		     * - DELETE `/channels/{channel.id}/messages/{message.id}/reactions`
		     */
		    channelMessageAllReactions(channelId, messageId) {
		        return `/channels/${channelId}/messages/${messageId}/reactions`;
		    },
		    /**
		     * Route for:
		     * - POST `/channels/{channel.id}/messages/bulk-delete`
		     */
		    channelBulkDelete(channelId) {
		        return `/channels/${channelId}/messages/bulk-delete`;
		    },
		    /**
		     * Route for:
		     * - PUT    `/channels/{channel.id}/permissions/{overwrite.id}`
		     * - DELETE `/channels/{channel.id}/permissions/{overwrite.id}`
		     */
		    channelPermission(channelId, overwriteId) {
		        return `/channels/${channelId}/permissions/${overwriteId}`;
		    },
		    /**
		     * Route for:
		     * - GET  `/channels/{channel.id}/invites`
		     * - POST `/channels/{channel.id}/invites`
		     */
		    channelInvites(channelId) {
		        return `/channels/${channelId}/invites`;
		    },
		    /**
		     * Route for:
		     * - POST `/channels/{channel.id}/followers`
		     */
		    channelFollowers(channelId) {
		        return `/channels/${channelId}/followers`;
		    },
		    /**
		     * Route for:
		     * - POST `/channels/{channel.id}/typing`
		     */
		    channelTyping(channelId) {
		        return `/channels/${channelId}/typing`;
		    },
		    /**
		     * Route for:
		     * - GET `/channels/{channel.id}/pins`
		     */
		    channelPins(channelId) {
		        return `/channels/${channelId}/pins`;
		    },
		    /**
		     * Route for:
		     * - PUT    `/channels/{channel.id}/pins/{message.id}`
		     * - DELETE `/channels/{channel.id}/pins/{message.id}`
		     */
		    channelPin(channelId, messageId) {
		        return `/channels/${channelId}/pins/${messageId}`;
		    },
		    /**
		     * Route for:
		     * - PUT    `/channels/{channel.id}/recipients/{user.id}`
		     * - DELETE `/channels/{channel.id}/recipients/{user.id}`
		     */
		    channelRecipient(channelId, userId) {
		        return `/channels/${channelId}/recipients/${userId}`;
		    },
		    /**
		     * Route for:
		     * - GET  `/guilds/{guild.id}/emojis`
		     * - POST `/guilds/{guild.id}/emojis`
		     */
		    guildEmojis(guildId) {
		        return `/guilds/${guildId}/emojis`;
		    },
		    /**
		     * Route for:
		     * - GET    `/guilds/{guild.id}/emojis/{emoji.id}`
		     * - PATCH  `/guilds/{guild.id}/emojis/{emoji.id}`
		     * - DELETE `/guilds/{guild.id}/emojis/{emoji.id}`
		     */
		    guildEmoji(guildId, emojiId) {
		        return `/guilds/${guildId}/emojis/${emojiId}`;
		    },
		    /**
		     * Route for:
		     * - POST `/guilds`
		     */
		    guilds() {
		        return '/guilds';
		    },
		    /**
		     * Route for:
		     * - GET    `/guilds/{guild.id}`
		     * - PATCH  `/guilds/{guild.id}`
		     * - DELETE `/guilds/{guild.id}`
		     */
		    guild(guildId) {
		        return `/guilds/${guildId}`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/preview`
		     */
		    guildPreview(guildId) {
		        return `/guilds/${guildId}/preview`;
		    },
		    /**
		     * Route for:
		     * - GET   `/guilds/{guild.id}/channels`
		     * - POST  `/guilds/{guild.id}/channels`
		     * - PATCH `/guilds/{guild.id}/channels`
		     */
		    guildChannels(guildId) {
		        return `/guilds/${guildId}/channels`;
		    },
		    /**
		     * Route for:
		     * - GET    `/guilds/{guild.id}/members/{user.id}`
		     * - PUT    `/guilds/{guild.id}/members/{user.id}`
		     * - PATCH  `/guilds/{guild.id}/members/@me`
		     * - PATCH  `/guilds/{guild.id}/members/{user.id}`
		     * - DELETE `/guilds/{guild.id}/members/{user.id}`
		     */
		    guildMember(guildId, userId = '@me') {
		        return `/guilds/${guildId}/members/${userId}`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/members`
		     */
		    guildMembers(guildId) {
		        return `/guilds/${guildId}/members`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/members/search`
		     */
		    guildMembersSearch(guildId) {
		        return `/guilds/${guildId}/members/search`;
		    },
		    /**
		     * Route for:
		     * - PATCH `/guilds/{guild.id}/members/@me/nick`
		     *
		     * @deprecated Use {@link Routes.guildMember} instead.
		     */
		    guildCurrentMemberNickname(guildId) {
		        return `/guilds/${guildId}/members/@me/nick`;
		    },
		    /**
		     * Route for:
		     * - PUT    `/guilds/{guild.id}/members/{user.id}/roles/{role.id}`
		     * - DELETE `/guilds/{guild.id}/members/{user.id}/roles/{role.id}`
		     */
		    guildMemberRole(guildId, memberId, roleId) {
		        return `/guilds/${guildId}/members/${memberId}/roles/${roleId}`;
		    },
		    /**
		     * Route for:
		     * - POST `/guilds/{guild.id}/mfa`
		     */
		    guildMFA(guildId) {
		        return `/guilds/${guildId}/mfa`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/bans`
		     */
		    guildBans(guildId) {
		        return `/guilds/${guildId}/bans`;
		    },
		    /**
		     * Route for:
		     * - GET    `/guilds/{guild.id}/bans/{user.id}`
		     * - PUT    `/guilds/{guild.id}/bans/{user.id}`
		     * - DELETE `/guilds/{guild.id}/bans/{user.id}`
		     */
		    guildBan(guildId, userId) {
		        return `/guilds/${guildId}/bans/${userId}`;
		    },
		    /**
		     * Route for:
		     * - GET   `/guilds/{guild.id}/roles`
		     * - POST  `/guilds/{guild.id}/roles`
		     * - PATCH `/guilds/{guild.id}/roles`
		     */
		    guildRoles(guildId) {
		        return `/guilds/${guildId}/roles`;
		    },
		    /**
		     * Route for:
		     * - GET    `/guilds/{guild.id}/roles/{role.id}`
		     * - PATCH  `/guilds/{guild.id}/roles/{role.id}`
		     * - DELETE `/guilds/{guild.id}/roles/{role.id}`
		     */
		    guildRole(guildId, roleId) {
		        return `/guilds/${guildId}/roles/${roleId}`;
		    },
		    /**
		     * Route for:
		     * - GET  `/guilds/{guild.id}/prune`
		     * - POST `/guilds/{guild.id}/prune`
		     */
		    guildPrune(guildId) {
		        return `/guilds/${guildId}/prune`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/regions`
		     */
		    guildVoiceRegions(guildId) {
		        return `/guilds/${guildId}/regions`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/invites`
		     */
		    guildInvites(guildId) {
		        return `/guilds/${guildId}/invites`;
		    },
		    /**
		     * Route for:
		     * - GET  `/guilds/{guild.id}/integrations`
		     */
		    guildIntegrations(guildId) {
		        return `/guilds/${guildId}/integrations`;
		    },
		    /**
		     * Route for:
		     * - DELETE `/guilds/{guild.id}/integrations/{integration.id}`
		     */
		    guildIntegration(guildId, integrationId) {
		        return `/guilds/${guildId}/integrations/${integrationId}`;
		    },
		    /**
		     * Route for:
		     * - GET   `/guilds/{guild.id}/widget`
		     * - PATCH `/guilds/{guild.id}/widget`
		     */
		    guildWidgetSettings(guildId) {
		        return `/guilds/${guildId}/widget`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/widget.json`
		     */
		    guildWidgetJSON(guildId) {
		        return `/guilds/${guildId}/widget.json`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/vanity-url`
		     */
		    guildVanityUrl(guildId) {
		        return `/guilds/${guildId}/vanity-url`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/widget.png`
		     */
		    guildWidgetImage(guildId) {
		        return `/guilds/${guildId}/widget.png`;
		    },
		    /**
		     * Route for:
		     * - GET    `/invites/{invite.code}`
		     * - DELETE `/invites/{invite.code}`
		     */
		    invite(code) {
		        return `/invites/${code}`;
		    },
		    /**
		     * Route for:
		     * - GET  `/guilds/templates/{template.code}`
		     * - POST `/guilds/templates/{template.code}`
		     */
		    template(code) {
		        return `/guilds/templates/${code}`;
		    },
		    /**
		     * Route for:
		     * - GET  `/guilds/{guild.id}/templates`
		     * - POST `/guilds/{guild.id}/templates`
		     */
		    guildTemplates(guildId) {
		        return `/guilds/${guildId}/templates`;
		    },
		    /**
		     * Route for:
		     * - PUT    `/guilds/{guild.id}/templates/{template.code}`
		     * - PATCH  `/guilds/{guild.id}/templates/{template.code}`
		     * - DELETE `/guilds/{guild.id}/templates/{template.code}`
		     */
		    guildTemplate(guildId, code) {
		        return `/guilds/${guildId}/templates/${code}`;
		    },
		    /**
		     * Route for:
		     * - GET `/channels/{channel.id}/polls/{message.id}/answers/{answer_id}`
		     */
		    pollAnswerVoters(channelId, messageId, answerId) {
		        return `/channels/${channelId}/polls/${messageId}/answers/${answerId}`;
		    },
		    /**
		     * Route for:
		     * - POST `/channels/{channel.id}/polls/{message.id}/expire`
		     */
		    expirePoll(channelId, messageId) {
		        return `/channels/${channelId}/polls/${messageId}/expire`;
		    },
		    /**
		     * Route for:
		     * - POST `/channels/{channel.id}/threads`
		     * - POST `/channels/{channel.id}/messages/{message.id}/threads`
		     */
		    threads(parentId, messageId) {
		        const parts = ['', 'channels', parentId];
		        if (messageId)
		            parts.push('messages', messageId);
		        parts.push('threads');
		        return parts.join('/');
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/threads/active`
		     */
		    guildActiveThreads(guildId) {
		        return `/guilds/${guildId}/threads/active`;
		    },
		    /**
		     * Route for:
		     * - GET `/channels/{channel.id}/threads/archived/public`
		     * - GET `/channels/{channel.id}/threads/archived/private`
		     */
		    channelThreads(channelId, archivedStatus) {
		        return `/channels/${channelId}/threads/archived/${archivedStatus}`;
		    },
		    /**
		     * Route for:
		     * - GET `/channels/{channel.id}/users/@me/threads/archived/private`
		     */
		    channelJoinedArchivedThreads(channelId) {
		        return `/channels/${channelId}/users/@me/threads/archived/private`;
		    },
		    /**
		     * Route for:
		     * - GET    `/channels/{thread.id}/thread-members`
		     * - GET    `/channels/{thread.id}/thread-members/{user.id}`
		     * - PUT    `/channels/{thread.id}/thread-members/@me`
		     * - PUT    `/channels/{thread.id}/thread-members/{user.id}`
		     * - DELETE `/channels/{thread.id}/thread-members/@me`
		     * - DELETE `/channels/{thread.id}/thread-members/{user.id}`
		     */
		    threadMembers(threadId, userId) {
		        const parts = ['', 'channels', threadId, 'thread-members'];
		        if (userId)
		            parts.push(userId);
		        return parts.join('/');
		    },
		    /**
		     * Route for:
		     * - GET   `/users/@me`
		     * - GET   `/users/{user.id}`
		     * - PATCH `/users/@me`
		     *
		     * @param [userId] The user ID, defaulted to `@me`
		     */
		    user(userId = '@me') {
		        return `/users/${userId}`;
		    },
		    /**
		     * Route for:
		     * - GET `/users/@me/applications/{application.id}/role-connection`
		     * - PUT `/users/@me/applications/{application.id}/role-connection`
		     */
		    userApplicationRoleConnection(applicationId) {
		        return `/users/@me/applications/${applicationId}/role-connection`;
		    },
		    /**
		     * Route for:
		     * - GET `/users/@me/guilds`
		     */
		    userGuilds() {
		        return `/users/@me/guilds`;
		    },
		    /**
		     * Route for:
		     * - GET `/users/@me/guilds/{guild.id}/member`
		     */
		    userGuildMember(guildId) {
		        return `/users/@me/guilds/${guildId}/member`;
		    },
		    /**
		     * Route for:
		     * - DELETE `/users/@me/guilds/{guild.id}`
		     */
		    userGuild(guildId) {
		        return `/users/@me/guilds/${guildId}`;
		    },
		    /**
		     * Route for:
		     * - POST `/users/@me/channels`
		     */
		    userChannels() {
		        return `/users/@me/channels`;
		    },
		    /**
		     * Route for:
		     * - GET `/users/@me/connections`
		     */
		    userConnections() {
		        return `/users/@me/connections`;
		    },
		    /**
		     * Route for:
		     * - GET `/voice/regions`
		     */
		    voiceRegions() {
		        return `/voice/regions`;
		    },
		    /**
		     * Route for:
		     * - GET  `/channels/{channel.id}/webhooks`
		     * - POST `/channels/{channel.id}/webhooks`
		     */
		    channelWebhooks(channelId) {
		        return `/channels/${channelId}/webhooks`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/webhooks`
		     */
		    guildWebhooks(guildId) {
		        return `/guilds/${guildId}/webhooks`;
		    },
		    /**
		     * Route for:
		     * - GET    `/webhooks/{webhook.id}`
		     * - GET    `/webhooks/{webhook.id}/{webhook.token}`
		     * - PATCH  `/webhooks/{webhook.id}`
		     * - PATCH  `/webhooks/{webhook.id}/{webhook.token}`
		     * - DELETE `/webhooks/{webhook.id}`
		     * - DELETE `/webhooks/{webhook.id}/{webhook.token}`
		     * - POST   `/webhooks/{webhook.id}/{webhook.token}`
		     *
		     * - POST   `/webhooks/{application.id}/{interaction.token}`
		     */
		    webhook(webhookId, webhookToken) {
		        const parts = ['', 'webhooks', webhookId];
		        if (webhookToken)
		            parts.push(webhookToken);
		        return parts.join('/');
		    },
		    /**
		     * Route for:
		     * - GET    `/webhooks/{webhook.id}/{webhook.token}/messages/@original`
		     * - GET    `/webhooks/{webhook.id}/{webhook.token}/messages/{message.id}`
		     * - PATCH  `/webhooks/{webhook.id}/{webhook.token}/messages/@original`
		     * - PATCH  `/webhooks/{webhook.id}/{webhook.token}/messages/{message.id}`
		     * - DELETE `/webhooks/{webhook.id}/{webhook.token}/messages/@original`
		     * - DELETE `/webhooks/{webhook.id}/{webhook.token}/messages/{message.id}`
		     *
		     * - PATCH  `/webhooks/{application.id}/{interaction.token}/messages/@original`
		     * - PATCH  `/webhooks/{application.id}/{interaction.token}/messages/{message.id}`
		     * - DELETE `/webhooks/{application.id}/{interaction.token}/messages/{message.id}`
		     */
		    webhookMessage(webhookId, webhookToken, messageId = '@original') {
		        return `/webhooks/${webhookId}/${webhookToken}/messages/${messageId}`;
		    },
		    /**
		     * Route for:
		     * - POST `/webhooks/{webhook.id}/{webhook.token}/github`
		     * - POST `/webhooks/{webhook.id}/{webhook.token}/slack`
		     */
		    webhookPlatform(webhookId, webhookToken, platform) {
		        return `/webhooks/${webhookId}/${webhookToken}/${platform}`;
		    },
		    /**
		     * Route for:
		     * - GET `/gateway`
		     */
		    gateway() {
		        return `/gateway`;
		    },
		    /**
		     * Route for:
		     * - GET `/gateway/bot`
		     */
		    gatewayBot() {
		        return `/gateway/bot`;
		    },
		    /**
		     * Route for:
		     * - GET `/oauth2/applications/@me`
		     */
		    oauth2CurrentApplication() {
		        return `/oauth2/applications/@me`;
		    },
		    /**
		     * Route for:
		     * - GET `/oauth2/@me`
		     */
		    oauth2CurrentAuthorization() {
		        return `/oauth2/@me`;
		    },
		    /**
		     * Route for:
		     * - GET `/oauth2/authorize`
		     */
		    oauth2Authorization() {
		        return `/oauth2/authorize`;
		    },
		    /**
		     * Route for:
		     * - POST `/oauth2/token`
		     */
		    oauth2TokenExchange() {
		        return `/oauth2/token`;
		    },
		    /**
		     * Route for:
		     * - POST `/oauth2/token/revoke`
		     */
		    oauth2TokenRevocation() {
		        return `/oauth2/token/revoke`;
		    },
		    /**
		     * Route for:
		     * - GET  `/applications/{application.id}/commands`
		     * - PUT  `/applications/{application.id}/commands`
		     * - POST `/applications/{application.id}/commands`
		     */
		    applicationCommands(applicationId) {
		        return `/applications/${applicationId}/commands`;
		    },
		    /**
		     * Route for:
		     * - GET    `/applications/{application.id}/commands/{command.id}`
		     * - PATCH  `/applications/{application.id}/commands/{command.id}`
		     * - DELETE `/applications/{application.id}/commands/{command.id}`
		     */
		    applicationCommand(applicationId, commandId) {
		        return `/applications/${applicationId}/commands/${commandId}`;
		    },
		    /**
		     * Route for:
		     * - GET  `/applications/{application.id}/guilds/{guild.id}/commands`
		     * - PUT  `/applications/{application.id}/guilds/{guild.id}/commands`
		     * - POST `/applications/{application.id}/guilds/{guild.id}/commands`
		     */
		    applicationGuildCommands(applicationId, guildId) {
		        return `/applications/${applicationId}/guilds/${guildId}/commands`;
		    },
		    /**
		     * Route for:
		     * - GET    `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}`
		     * - PATCH  `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}`
		     * - DELETE `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}`
		     */
		    applicationGuildCommand(applicationId, guildId, commandId) {
		        return `/applications/${applicationId}/guilds/${guildId}/commands/${commandId}`;
		    },
		    /**
		     * Route for:
		     * - POST `/interactions/{interaction.id}/{interaction.token}/callback`
		     */
		    interactionCallback(interactionId, interactionToken) {
		        return `/interactions/${interactionId}/${interactionToken}/callback`;
		    },
		    /**
		     * Route for:
		     * - GET   `/guilds/{guild.id}/member-verification`
		     * - PATCH `/guilds/{guild.id}/member-verification`
		     */
		    guildMemberVerification(guildId) {
		        return `/guilds/${guildId}/member-verification`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/voice-states/@me`
		     * - GET `/guilds/{guild.id}/voice-states/{user.id}`
		     * - PATCH `/guilds/{guild.id}/voice-states/@me`
		     * - PATCH `/guilds/{guild.id}/voice-states/{user.id}`
		     */
		    guildVoiceState(guildId, userId = '@me') {
		        return `/guilds/${guildId}/voice-states/${userId}`;
		    },
		    /**
		     * Route for:
		     * - GET `/applications/{application.id}/guilds/{guild.id}/commands/permissions`
		     * - PUT `/applications/{application.id}/guilds/{guild.id}/commands/permissions`
		     */
		    guildApplicationCommandsPermissions(applicationId, guildId) {
		        return `/applications/${applicationId}/guilds/${guildId}/commands/permissions`;
		    },
		    /**
		     * Route for:
		     * - GET `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}/permissions`
		     * - PUT `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}/permissions`
		     */
		    applicationCommandPermissions(applicationId, guildId, commandId) {
		        return `/applications/${applicationId}/guilds/${guildId}/commands/${commandId}/permissions`;
		    },
		    /**
		     * Route for:
		     * - GET   `/guilds/{guild.id}/welcome-screen`
		     * - PATCH `/guilds/{guild.id}/welcome-screen`
		     */
		    guildWelcomeScreen(guildId) {
		        return `/guilds/${guildId}/welcome-screen`;
		    },
		    /**
		     * Route for:
		     * - POST `/stage-instances`
		     */
		    stageInstances() {
		        return `/stage-instances`;
		    },
		    /**
		     * Route for:
		     * - GET `/stage-instances/{channel.id}`
		     * - PATCH `/stage-instances/{channel.id}`
		     * - DELETE `/stage-instances/{channel.id}`
		     */
		    stageInstance(channelId) {
		        return `/stage-instances/${channelId}`;
		    },
		    /**
		     * Route for:
		     * - GET `/stickers/{sticker.id}`
		     */
		    sticker(stickerId) {
		        return `/stickers/${stickerId}`;
		    },
		    /**
		     * Route for:
		     * - GET `/sticker-packs`
		     */
		    stickerPacks() {
		        return '/sticker-packs';
		    },
		    /**
		     * Route for:
		     * - GET `/sticker-packs/{pack.id}`
		     */
		    stickerPack(packId) {
		        return `/sticker-packs/${packId}`;
		    },
		    /**
		     * Route for:
		     * - GET `/sticker-packs`
		     *
		     * @deprecated Use {@link Routes.stickerPacks} instead.
		     */
		    nitroStickerPacks() {
		        return '/sticker-packs';
		    },
		    /**
		     * Route for:
		     * - GET  `/guilds/{guild.id}/stickers`
		     * - POST `/guilds/{guild.id}/stickers`
		     */
		    guildStickers(guildId) {
		        return `/guilds/${guildId}/stickers`;
		    },
		    /**
		     * Route for:
		     * - GET    `/guilds/{guild.id}/stickers/{sticker.id}`
		     * - PATCH  `/guilds/{guild.id}/stickers/{sticker.id}`
		     * - DELETE `/guilds/{guild.id}/stickers/{sticker.id}`
		     */
		    guildSticker(guildId, stickerId) {
		        return `/guilds/${guildId}/stickers/${stickerId}`;
		    },
		    /**
		     * Route for:
		     * - GET  `/guilds/{guild.id}/scheduled-events`
		     * - POST `/guilds/{guild.id}/scheduled-events`
		     */
		    guildScheduledEvents(guildId) {
		        return `/guilds/${guildId}/scheduled-events`;
		    },
		    /**
		     * Route for:
		     * - GET  `/guilds/{guild.id}/scheduled-events/{guildScheduledEvent.id}`
		     * - PATCH `/guilds/{guild.id}/scheduled-events/{guildScheduledEvent.id}`
		     * - DELETE `/guilds/{guild.id}/scheduled-events/{guildScheduledEvent.id}`
		     */
		    guildScheduledEvent(guildId, guildScheduledEventId) {
		        return `/guilds/${guildId}/scheduled-events/${guildScheduledEventId}`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/scheduled-events/{guildScheduledEvent.id}/users`
		     */
		    guildScheduledEventUsers(guildId, guildScheduledEventId) {
		        return `/guilds/${guildId}/scheduled-events/${guildScheduledEventId}/users`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/onboarding`
		     * - PUT `/guilds/{guild.id}/onboarding`
		     */
		    guildOnboarding(guildId) {
		        return `/guilds/${guildId}/onboarding`;
		    },
		    /**
		     * Route for:
		     * - GET `/applications/@me`
		     * - PATCH `/applications/@me`
		     */
		    currentApplication() {
		        return '/applications/@me';
		    },
		    /**
		     * Route for:
		     * - GET `/applications/{application.id}/entitlements`
		     * - POST `/applications/{application.id}/entitlements`
		     */
		    entitlements(applicationId) {
		        return `/applications/${applicationId}/entitlements`;
		    },
		    /**
		     * Route for:
		     * - DELETE `/applications/{application.id}/entitlements/{entitlement.id}`
		     */
		    entitlement(applicationId, entitlementId) {
		        return `/applications/${applicationId}/entitlements/${entitlementId}`;
		    },
		    /**
		     * Route for:
		     * - GET `/applications/{application.id}/skus`
		     */
		    skus(applicationId) {
		        return `/applications/${applicationId}/skus`;
		    },
		    /**
		     * Route for:
		     * - POST `/guilds/{guild.id}/bulk-ban`
		     */
		    guildBulkBan(guildId) {
		        return `/guilds/${guildId}/bulk-ban`;
		    },
		    /**
		     * Route for:
		     * - POST `/applications/{application.id}/entitlements/{entitlement.id}/consume`
		     */
		    consumeEntitlement(applicationId, entitlementId) {
		        return `/applications/${applicationId}/entitlements/${entitlementId}/consume`;
		    },
		    /**
		     * Route for:
		     * - GET `/applications/{application.id}/emojis`
		     * - POST `/applications/{application.id}/emojis`
		     */
		    applicationEmojis(applicationId) {
		        return `/applications/${applicationId}/emojis`;
		    },
		    /**
		     * Route for:
		     * - GET `/applications/{application.id}/emojis/{emoji.id}`
		     * - PATCH `/applications/{application.id}/emojis/{emoji.id}`
		     * - DELETE `/applications/{application.id}/emojis/{emoji.id}`
		     */
		    applicationEmoji(applicationId, emojiId) {
		        return `/applications/${applicationId}/emojis/${emojiId}`;
		    },
		};
		exports.StickerPackApplicationId = '710982414301790216';
		var ImageFormat;
		(function (ImageFormat) {
		    ImageFormat["JPEG"] = "jpeg";
		    ImageFormat["PNG"] = "png";
		    ImageFormat["WebP"] = "webp";
		    ImageFormat["GIF"] = "gif";
		    ImageFormat["Lottie"] = "json";
		})(ImageFormat || (exports.ImageFormat = ImageFormat = {}));
		exports.CDNRoutes = {
		    /**
		     * Route for:
		     * - GET `/emojis/{emoji.id}.{png|jpeg|webp|gif}`
		     *
		     * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format
		     *
		     * This route supports the extensions: PNG, JPEG, WebP, GIF
		     */
		    emoji(emojiId, format) {
		        return `/emojis/${emojiId}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/icons/{guild.id}/{guild.icon}.{png|jpeg|webp|gif}`
		     *
		     * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format
		     *
		     * This route supports the extensions: PNG, JPEG, WebP, GIF
		     */
		    guildIcon(guildId, guildIcon, format) {
		        return `/icons/${guildId}/${guildIcon}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/splashes/{guild.id}/{guild.splash}.{png|jpeg|webp}`
		     *
		     * This route supports the extensions: PNG, JPEG, WebP
		     */
		    guildSplash(guildId, guildSplash, format) {
		        return `/splashes/${guildId}/${guildSplash}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/discovery-splashes/{guild.id}/{guild.discovery_splash}.{png|jpeg|webp}`
		     *
		     * This route supports the extensions: PNG, JPEG, WebP
		     */
		    guildDiscoverySplash(guildId, guildDiscoverySplash, format) {
		        return `/discovery-splashes/${guildId}/${guildDiscoverySplash}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/banners/{guild.id}/{guild.banner}.{png|jpeg|webp|gif}`
		     *
		     * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format
		     *
		     * This route supports the extensions: PNG, JPEG, WebP, GIF
		     */
		    guildBanner(guildId, guildBanner, format) {
		        return `/banners/${guildId}/${guildBanner}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/banners/{user.id}/{user.banner}.{png|jpeg|webp|gif}`
		     *
		     * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format
		     *
		     * This route supports the extensions: PNG, JPEG, WebP, GIF
		     */
		    userBanner(userId, userBanner, format) {
		        return `/banners/${userId}/${userBanner}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/embed/avatars/{index}.png`
		     *
		     * The value for `index` parameter depends on whether the user is [migrated to the new username system](https://discord.com/developers/docs/change-log#unique-usernames-on-discord).
		     * For users on the new username system, `index` will be `(user.id >> 22) % 6`.
		     * For users on the legacy username system, `index` will be `user.discriminator % 5`.
		     *
		     * This route supports the extension: PNG
		     */
		    defaultUserAvatar(index) {
		        return `/embed/avatars/${index}.png`;
		    },
		    /**
		     * Route for:
		     * - GET `/avatars/{user.id}/{user.avatar}.{png|jpeg|webp|gif}`
		     *
		     * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format
		     *
		     * This route supports the extensions: PNG, JPEG, WebP, GIF
		     */
		    userAvatar(userId, userAvatar, format) {
		        return `/avatars/${userId}/${userAvatar}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/users/{user.id}/avatars/{guild_member.avatar}.{png|jpeg|webp|gif}`
		     *
		     * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format
		     *
		     * This route supports the extensions: PNG, JPEG, WebP, GIF
		     */
		    guildMemberAvatar(guildId, userId, memberAvatar, format) {
		        return `/guilds/${guildId}/users/${userId}/avatars/${memberAvatar}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/avatar-decorations/{user.id}/{user.avatar_decoration}.png`
		     *
		     * This route supports the extension: PNG
		     *
		     * @deprecated Use {@link CDNRoutes.avatarDecoration} instead.
		     */
		    userAvatarDecoration(userId, userAvatarDecoration) {
		        return `/avatar-decorations/${userId}/${userAvatarDecoration}.png`;
		    },
		    /**
		     * Route for:
		     * - GET `/avatar-decoration-presets/{avatar_decoration_data_asset}.png`
		     *
		     * This route supports the extension: PNG
		     */
		    avatarDecoration(avatarDecorationDataAsset) {
		        return `/avatar-decoration-presets/${avatarDecorationDataAsset}.png`;
		    },
		    /**
		     * Route for:
		     * - GET `/app-icons/{application.id}/{application.icon}.{png|jpeg|webp}`
		     *
		     * This route supports the extensions: PNG, JPEG, WebP
		     */
		    applicationIcon(applicationId, applicationIcon, format) {
		        return `/app-icons/${applicationId}/${applicationIcon}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/app-icons/{application.id}/{application.cover_image}.{png|jpeg|webp}`
		     *
		     * This route supports the extensions: PNG, JPEG, WebP
		     */
		    applicationCover(applicationId, applicationCoverImage, format) {
		        return `/app-icons/${applicationId}/${applicationCoverImage}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/app-assets/{application.id}/{application.asset_id}.{png|jpeg|webp}`
		     *
		     * This route supports the extensions: PNG, JPEG, WebP
		     */
		    applicationAsset(applicationId, applicationAssetId, format) {
		        return `/app-assets/${applicationId}/${applicationAssetId}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/app-assets/{application.id}/achievements/{achievement.id}/icons/{achievement.icon}.{png|jpeg|webp}`
		     *
		     * This route supports the extensions: PNG, JPEG, WebP
		     */
		    achievementIcon(applicationId, achievementId, achievementIconHash, format) {
		        return `/app-assets/${applicationId}/achievements/${achievementId}/icons/${achievementIconHash}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/app-assets/710982414301790216/store/{sticker_pack.banner.asset_id}.{png|jpeg|webp}`
		     *
		     * This route supports the extensions: PNG, JPEG, WebP
		     */
		    stickerPackBanner(stickerPackBannerAssetId, format) {
		        return `/app-assets/${exports.StickerPackApplicationId}/store/${stickerPackBannerAssetId}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/app-assets/${application.id}/store/${asset.id}.{png|jpeg|webp}}`
		     *
		     * This route supports the extensions: PNG, JPEG, WebP
		     */
		    storePageAsset(applicationId, assetId, format = ImageFormat.PNG) {
		        return `/app-assets/${applicationId}/store/${assetId}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/team-icons/{team.id}/{team.icon}.{png|jpeg|webp}`
		     *
		     * This route supports the extensions: PNG, JPEG, WebP
		     */
		    teamIcon(teamId, teamIcon, format) {
		        return `/team-icons/${teamId}/${teamIcon}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/stickers/{sticker.id}.{png|json}`
		     *
		     * This route supports the extensions: PNG, Lottie, GIF
		     */
		    sticker(stickerId, format) {
		        return `/stickers/${stickerId}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/role-icons/{role.id}/{role.icon}.{png|jpeg|webp}`
		     *
		     * This route supports the extensions: PNG, JPEG, WebP
		     */
		    roleIcon(roleId, roleIcon, format) {
		        return `/role-icons/${roleId}/${roleIcon}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/guild-events/{guild_scheduled_event.id}/{guild_scheduled_event.image}.{png|jpeg|webp}`
		     *
		     * This route supports the extensions: PNG, JPEG, WebP
		     */
		    guildScheduledEventCover(guildScheduledEventId, guildScheduledEventCoverImage, format) {
		        return `/guild-events/${guildScheduledEventId}/${guildScheduledEventCoverImage}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/${guild.id}/users/${user.id}/banners/${guild_member.banner}.{png|jpeg|webp|gif}`
		     *
		     * This route supports the extensions: PNG, JPEG, WebP, GIF
		     */
		    guildMemberBanner(guildId, userId, guildMemberBanner, format) {
		        return `/guilds/${guildId}/users/${userId}/banners/${guildMemberBanner}.${format}`;
		    },
		};
		exports.RouteBases = {
		    api: `https://discord.com/api/v${exports.APIVersion}`,
		    cdn: 'https://cdn.discordapp.com',
		    media: 'https://media.discordapp.net',
		    invite: 'https://discord.gg',
		    template: 'https://discord.new',
		    gift: 'https://discord.gift',
		    scheduledEvent: 'https://discord.com/events',
		};
		// Freeze bases object
		Object.freeze(exports.RouteBases);
		exports.OAuth2Routes = {
		    authorizationURL: `${exports.RouteBases.api}${exports.Routes.oauth2Authorization()}`,
		    tokenURL: `${exports.RouteBases.api}${exports.Routes.oauth2TokenExchange()}`,
		    /**
		     * See https://tools.ietf.org/html/rfc7009
		     */
		    tokenRevocationURL: `${exports.RouteBases.api}${exports.Routes.oauth2TokenRevocation()}`,
		};
		// Freeze OAuth2 route object
		Object.freeze(exports.OAuth2Routes);
		
	} (v10$r));
	return v10$r;
}

var v10Exports$c = requireV10$f();
var mod$e = /*@__PURE__*/getDefaultExportFromCjs(v10Exports$c);

const APIVersion$2 = mod$e.APIVersion;
const CDNRoutes$2 = mod$e.CDNRoutes;
const EntitlementOwnerType$2 = mod$e.EntitlementOwnerType;
const ImageFormat$2 = mod$e.ImageFormat;
const Locale$2 = mod$e.Locale;
const OAuth2Routes$2 = mod$e.OAuth2Routes;
const RESTJSONErrorCodes$2 = mod$e.RESTJSONErrorCodes;
const ReactionType$1 = mod$e.ReactionType;
const RouteBases$2 = mod$e.RouteBases;
const Routes$2 = mod$e.Routes;
const StickerPackApplicationId$2 = mod$e.StickerPackApplicationId;

var v10$q = /*#__PURE__*/Object.freeze({
	__proto__: null,
	APIVersion: APIVersion$2,
	CDNRoutes: CDNRoutes$2,
	EntitlementOwnerType: EntitlementOwnerType$2,
	ImageFormat: ImageFormat$2,
	Locale: Locale$2,
	OAuth2Routes: OAuth2Routes$2,
	RESTJSONErrorCodes: RESTJSONErrorCodes$2,
	ReactionType: ReactionType$1,
	RouteBases: RouteBases$2,
	Routes: Routes$2,
	StickerPackApplicationId: StickerPackApplicationId$2,
	default: mod$e
});

var require$$3$2 = /*@__PURE__*/getAugmentedNamespace(v10$q);

var v10$p = {};

var common$8 = {};

var hasRequiredCommon$8;

function requireCommon$8 () {
	if (hasRequiredCommon$8) return common$8;
	hasRequiredCommon$8 = 1;
	Object.defineProperty(common$8, "__esModule", { value: true });
	common$8.RPCCloseEventCodes = common$8.RPCErrorCodes = void 0;
	/**
	 * https://discord.com/developers/docs/topics/opcodes-and-status-codes#rpc-rpc-error-codes
	 */
	var RPCErrorCodes;
	(function (RPCErrorCodes) {
	    RPCErrorCodes[RPCErrorCodes["UnknownError"] = 1000] = "UnknownError";
	    RPCErrorCodes[RPCErrorCodes["InvalidPayload"] = 4000] = "InvalidPayload";
	    RPCErrorCodes[RPCErrorCodes["InvalidCommand"] = 4002] = "InvalidCommand";
	    RPCErrorCodes[RPCErrorCodes["InvalidGuild"] = 4003] = "InvalidGuild";
	    RPCErrorCodes[RPCErrorCodes["InvalidEvent"] = 4004] = "InvalidEvent";
	    RPCErrorCodes[RPCErrorCodes["InvalidChannel"] = 4005] = "InvalidChannel";
	    RPCErrorCodes[RPCErrorCodes["InvalidPermissions"] = 4006] = "InvalidPermissions";
	    RPCErrorCodes[RPCErrorCodes["InvalidClientId"] = 4007] = "InvalidClientId";
	    RPCErrorCodes[RPCErrorCodes["InvalidOrigin"] = 4008] = "InvalidOrigin";
	    RPCErrorCodes[RPCErrorCodes["InvalidToken"] = 4009] = "InvalidToken";
	    RPCErrorCodes[RPCErrorCodes["InvalidUser"] = 4010] = "InvalidUser";
	    RPCErrorCodes[RPCErrorCodes["OAuth2Error"] = 5000] = "OAuth2Error";
	    RPCErrorCodes[RPCErrorCodes["SelectChannelTimedOut"] = 5001] = "SelectChannelTimedOut";
	    RPCErrorCodes[RPCErrorCodes["GetGuildTimedOut"] = 5002] = "GetGuildTimedOut";
	    RPCErrorCodes[RPCErrorCodes["SelectVoiceForceRequired"] = 5003] = "SelectVoiceForceRequired";
	    RPCErrorCodes[RPCErrorCodes["CaptureShortcutAlreadyListening"] = 5004] = "CaptureShortcutAlreadyListening";
	})(RPCErrorCodes || (common$8.RPCErrorCodes = RPCErrorCodes = {}));
	/**
	 * https://discord.com/developers/docs/topics/opcodes-and-status-codes#rpc-rpc-close-event-codes
	 */
	var RPCCloseEventCodes;
	(function (RPCCloseEventCodes) {
	    RPCCloseEventCodes[RPCCloseEventCodes["InvalidClientId"] = 4000] = "InvalidClientId";
	    RPCCloseEventCodes[RPCCloseEventCodes["InvalidOrigin"] = 4001] = "InvalidOrigin";
	    RPCCloseEventCodes[RPCCloseEventCodes["RateLimited"] = 4002] = "RateLimited";
	    RPCCloseEventCodes[RPCCloseEventCodes["TokenRevoked"] = 4003] = "TokenRevoked";
	    RPCCloseEventCodes[RPCCloseEventCodes["InvalidVersion"] = 4004] = "InvalidVersion";
	    RPCCloseEventCodes[RPCCloseEventCodes["InvalidEncoding"] = 4005] = "InvalidEncoding";
	})(RPCCloseEventCodes || (common$8.RPCCloseEventCodes = RPCCloseEventCodes = {}));
	
	return common$8;
}

var hasRequiredV10$e;

function requireV10$e () {
	if (hasRequiredV10$e) return v10$p;
	hasRequiredV10$e = 1;
	(function (exports) {
		var __createBinding = (v10$p && v10$p.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (v10$p && v10$p.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(requireCommon$8(), exports);
		
	} (v10$p));
	return v10$p;
}

var v10Exports$b = requireV10$e();
var mod$d = /*@__PURE__*/getDefaultExportFromCjs(v10Exports$b);

const RPCCloseEventCodes$2 = mod$d.RPCCloseEventCodes;
const RPCErrorCodes$2 = mod$d.RPCErrorCodes;

var v10$o = /*#__PURE__*/Object.freeze({
	__proto__: null,
	RPCCloseEventCodes: RPCCloseEventCodes$2,
	RPCErrorCodes: RPCErrorCodes$2,
	default: mod$d
});

var require$$4$2 = /*@__PURE__*/getAugmentedNamespace(v10$o);

var v10$n = {};

var hasRequiredV10$d;

function requireV10$d () {
	if (hasRequiredV10$d) return v10$n;
	hasRequiredV10$d = 1;
	Object.defineProperty(v10$n, "__esModule", { value: true });
	v10$n.isDMInteraction = isDMInteraction;
	v10$n.isGuildInteraction = isGuildInteraction;
	v10$n.isApplicationCommandDMInteraction = isApplicationCommandDMInteraction;
	v10$n.isApplicationCommandGuildInteraction = isApplicationCommandGuildInteraction;
	v10$n.isMessageComponentDMInteraction = isMessageComponentDMInteraction;
	v10$n.isMessageComponentGuildInteraction = isMessageComponentGuildInteraction;
	v10$n.isLinkButton = isLinkButton;
	v10$n.isInteractionButton = isInteractionButton;
	v10$n.isMessageComponentInteraction = isMessageComponentInteraction;
	v10$n.isMessageComponentButtonInteraction = isMessageComponentButtonInteraction;
	v10$n.isMessageComponentSelectMenuInteraction = isMessageComponentSelectMenuInteraction;
	v10$n.isChatInputApplicationCommandInteraction = isChatInputApplicationCommandInteraction;
	v10$n.isContextMenuApplicationCommandInteraction = isContextMenuApplicationCommandInteraction;
	const index_1 = require$$2$2;
	// Interactions
	/**
	 * A type-guard check for DM interactions
	 *
	 * @param interaction The interaction to check against
	 * @returns A boolean that indicates if the interaction was received in a DM channel
	 */
	function isDMInteraction(interaction) {
	    return Reflect.has(interaction, 'user');
	}
	/**
	 * A type-guard check for guild interactions
	 *
	 * @param interaction The interaction to check against
	 * @returns A boolean that indicates if the interaction was received in a guild
	 */
	function isGuildInteraction(interaction) {
	    return Reflect.has(interaction, 'guild_id');
	}
	// ApplicationCommandInteractions
	/**
	 * A type-guard check for DM application command interactions
	 *
	 * @param interaction The application command interaction to check against
	 * @returns A boolean that indicates if the application command interaction was received in a DM channel
	 */
	function isApplicationCommandDMInteraction(interaction) {
	    return isDMInteraction(interaction);
	}
	/**
	 * A type-guard check for guild application command interactions
	 *
	 * @param interaction The interaction to check against
	 * @returns A boolean that indicates if the application command interaction was received in a guild
	 */
	function isApplicationCommandGuildInteraction(interaction) {
	    return isGuildInteraction(interaction);
	}
	// MessageComponentInteractions
	/**
	 * A type-guard check for DM message component interactions
	 *
	 * @param interaction The message component interaction to check against
	 * @returns A boolean that indicates if the message component interaction was received in a DM channel
	 */
	function isMessageComponentDMInteraction(interaction) {
	    return isDMInteraction(interaction);
	}
	/**
	 * A type-guard check for guild message component interactions
	 *
	 * @param interaction The interaction to check against
	 * @returns A boolean that indicates if the message component interaction was received in a guild
	 */
	function isMessageComponentGuildInteraction(interaction) {
	    return isGuildInteraction(interaction);
	}
	// Buttons
	/**
	 * A type-guard check for buttons that have a `url` attached to them.
	 *
	 * @param component The button to check against
	 * @returns A boolean that indicates if the button has a `url` attached to it
	 */
	function isLinkButton(component) {
	    return component.style === index_1.ButtonStyle.Link;
	}
	/**
	 * A type-guard check for buttons that have a `custom_id` attached to them.
	 *
	 * @param component The button to check against
	 * @returns A boolean that indicates if the button has a `custom_id` attached to it
	 */
	function isInteractionButton(component) {
	    return component.style !== index_1.ButtonStyle.Link;
	}
	// Message Components
	/**
	 * A type-guard check for message component interactions
	 *
	 * @param interaction The interaction to check against
	 * @returns A boolean that indicates if the interaction is a message component
	 */
	function isMessageComponentInteraction(interaction) {
	    return interaction.type === index_1.InteractionType.MessageComponent;
	}
	/**
	 * A type-guard check for button message component interactions
	 *
	 * @param interaction The message component interaction to check against
	 * @returns A boolean that indicates if the message component is a button
	 */
	function isMessageComponentButtonInteraction(interaction) {
	    return interaction.data.component_type === index_1.ComponentType.Button;
	}
	/**
	 * A type-guard check for select menu message component interactions
	 *
	 * @param interaction The message component interaction to check against
	 * @returns A boolean that indicates if the message component is a select menu
	 */
	function isMessageComponentSelectMenuInteraction(interaction) {
	    return [
	        index_1.ComponentType.StringSelect,
	        index_1.ComponentType.UserSelect,
	        index_1.ComponentType.RoleSelect,
	        index_1.ComponentType.MentionableSelect,
	        index_1.ComponentType.ChannelSelect,
	    ].includes(interaction.data.component_type);
	}
	// Application Commands
	/**
	 * A type-guard check for chat input application commands.
	 *
	 * @param interaction The interaction to check against
	 * @returns A boolean that indicates if the interaction is a chat input application command
	 */
	function isChatInputApplicationCommandInteraction(interaction) {
	    return interaction.data.type === index_1.ApplicationCommandType.ChatInput;
	}
	/**
	 * A type-guard check for context menu application commands.
	 *
	 * @param interaction The interaction to check against
	 * @returns A boolean that indicates if the interaction is a context menu application command
	 */
	function isContextMenuApplicationCommandInteraction(interaction) {
	    return (interaction.data.type === index_1.ApplicationCommandType.Message ||
	        interaction.data.type === index_1.ApplicationCommandType.User);
	}
	
	return v10$n;
}

var v10Exports$a = requireV10$d();
var mod$c = /*@__PURE__*/getDefaultExportFromCjs(v10Exports$a);

const isApplicationCommandDMInteraction$2 = mod$c.isApplicationCommandDMInteraction;
const isApplicationCommandGuildInteraction$2 = mod$c.isApplicationCommandGuildInteraction;
const isChatInputApplicationCommandInteraction$2 = mod$c.isChatInputApplicationCommandInteraction;
const isContextMenuApplicationCommandInteraction$2 = mod$c.isContextMenuApplicationCommandInteraction;
const isDMInteraction$2 = mod$c.isDMInteraction;
const isGuildInteraction$2 = mod$c.isGuildInteraction;
const isInteractionButton$2 = mod$c.isInteractionButton;
const isLinkButton$2 = mod$c.isLinkButton;
const isMessageComponentButtonInteraction$2 = mod$c.isMessageComponentButtonInteraction;
const isMessageComponentDMInteraction$2 = mod$c.isMessageComponentDMInteraction;
const isMessageComponentGuildInteraction$2 = mod$c.isMessageComponentGuildInteraction;
const isMessageComponentInteraction$2 = mod$c.isMessageComponentInteraction;
const isMessageComponentSelectMenuInteraction$2 = mod$c.isMessageComponentSelectMenuInteraction;

var v10$m = /*#__PURE__*/Object.freeze({
	__proto__: null,
	default: mod$c,
	isApplicationCommandDMInteraction: isApplicationCommandDMInteraction$2,
	isApplicationCommandGuildInteraction: isApplicationCommandGuildInteraction$2,
	isChatInputApplicationCommandInteraction: isChatInputApplicationCommandInteraction$2,
	isContextMenuApplicationCommandInteraction: isContextMenuApplicationCommandInteraction$2,
	isDMInteraction: isDMInteraction$2,
	isGuildInteraction: isGuildInteraction$2,
	isInteractionButton: isInteractionButton$2,
	isLinkButton: isLinkButton$2,
	isMessageComponentButtonInteraction: isMessageComponentButtonInteraction$2,
	isMessageComponentDMInteraction: isMessageComponentDMInteraction$2,
	isMessageComponentGuildInteraction: isMessageComponentGuildInteraction$2,
	isMessageComponentInteraction: isMessageComponentInteraction$2,
	isMessageComponentSelectMenuInteraction: isMessageComponentSelectMenuInteraction$2
});

var require$$5$3 = /*@__PURE__*/getAugmentedNamespace(v10$m);

var hasRequiredV10$c;

function requireV10$c () {
	if (hasRequiredV10$c) return v10$w;
	hasRequiredV10$c = 1;
	(function (exports) {
		var __createBinding = (v10$w && v10$w.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (v10$w && v10$w.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.Utils = void 0;
		__exportStar(require$$0$2, exports);
		__exportStar(require$$1$2, exports);
		__exportStar(require$$2$2, exports);
		__exportStar(require$$3$2, exports);
		__exportStar(require$$4$2, exports);
		exports.Utils = require$$5$3;
		
	} (v10$w));
	return v10$w;
}

var dist$6;
var hasRequiredDist$6;

function requireDist$6 () {
	if (hasRequiredDist$6) return dist$6;
	hasRequiredDist$6 = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

	// src/index.ts
	var src_exports = {};
	__export(src_exports, {
	  Collection: () => Collection,
	  version: () => version
	});
	dist$6 = __toCommonJS(src_exports);

	// src/collection.ts
	var Collection = class _Collection extends Map {
	  static {
	    __name(this, "Collection");
	  }
	  /**
	   * Obtains the value of the given key if it exists, otherwise sets and returns the value provided by the default value generator.
	   *
	   * @param key - The key to get if it exists, or set otherwise
	   * @param defaultValueGenerator - A function that generates the default value
	   * @example
	   * ```ts
	   * collection.ensure(guildId, () => defaultGuildConfig);
	   * ```
	   */
	  ensure(key, defaultValueGenerator) {
	    if (this.has(key)) return this.get(key);
	    if (typeof defaultValueGenerator !== "function") throw new TypeError(`${defaultValueGenerator} is not a function`);
	    const defaultValue = defaultValueGenerator(key, this);
	    this.set(key, defaultValue);
	    return defaultValue;
	  }
	  /**
	   * Checks if all of the elements exist in the collection.
	   *
	   * @param keys - The keys of the elements to check for
	   * @returns `true` if all of the elements exist, `false` if at least one does not exist.
	   */
	  hasAll(...keys) {
	    return keys.every((key) => super.has(key));
	  }
	  /**
	   * Checks if any of the elements exist in the collection.
	   *
	   * @param keys - The keys of the elements to check for
	   * @returns `true` if any of the elements exist, `false` if none exist.
	   */
	  hasAny(...keys) {
	    return keys.some((key) => super.has(key));
	  }
	  first(amount) {
	    if (amount === void 0) return this.values().next().value;
	    if (amount < 0) return this.last(amount * -1);
	    amount = Math.min(this.size, amount);
	    const iter = this.values();
	    return Array.from({ length: amount }, () => iter.next().value);
	  }
	  firstKey(amount) {
	    if (amount === void 0) return this.keys().next().value;
	    if (amount < 0) return this.lastKey(amount * -1);
	    amount = Math.min(this.size, amount);
	    const iter = this.keys();
	    return Array.from({ length: amount }, () => iter.next().value);
	  }
	  last(amount) {
	    const arr = [...this.values()];
	    if (amount === void 0) return arr[arr.length - 1];
	    if (amount < 0) return this.first(amount * -1);
	    if (!amount) return [];
	    return arr.slice(-amount);
	  }
	  lastKey(amount) {
	    const arr = [...this.keys()];
	    if (amount === void 0) return arr[arr.length - 1];
	    if (amount < 0) return this.firstKey(amount * -1);
	    if (!amount) return [];
	    return arr.slice(-amount);
	  }
	  /**
	   * Identical to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at | Array.at()}.
	   * Returns the item at a given index, allowing for positive and negative integers.
	   * Negative integers count back from the last item in the collection.
	   *
	   * @param index - The index of the element to obtain
	   */
	  at(index) {
	    index = Math.floor(index);
	    const arr = [...this.values()];
	    return arr.at(index);
	  }
	  /**
	   * Identical to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at | Array.at()}.
	   * Returns the key at a given index, allowing for positive and negative integers.
	   * Negative integers count back from the last item in the collection.
	   *
	   * @param index - The index of the key to obtain
	   */
	  keyAt(index) {
	    index = Math.floor(index);
	    const arr = [...this.keys()];
	    return arr.at(index);
	  }
	  random(amount) {
	    const arr = [...this.values()];
	    if (amount === void 0) return arr[Math.floor(Math.random() * arr.length)];
	    if (!arr.length || !amount) return [];
	    return Array.from(
	      { length: Math.min(amount, arr.length) },
	      () => arr.splice(Math.floor(Math.random() * arr.length), 1)[0]
	    );
	  }
	  randomKey(amount) {
	    const arr = [...this.keys()];
	    if (amount === void 0) return arr[Math.floor(Math.random() * arr.length)];
	    if (!arr.length || !amount) return [];
	    return Array.from(
	      { length: Math.min(amount, arr.length) },
	      () => arr.splice(Math.floor(Math.random() * arr.length), 1)[0]
	    );
	  }
	  /**
	   * Identical to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse | Array.reverse()}
	   * but returns a Collection instead of an Array.
	   */
	  reverse() {
	    const entries = [...this.entries()].reverse();
	    this.clear();
	    for (const [key, value] of entries) this.set(key, value);
	    return this;
	  }
	  find(fn, thisArg) {
	    if (typeof fn !== "function") throw new TypeError(`${fn} is not a function`);
	    if (thisArg !== void 0) fn = fn.bind(thisArg);
	    for (const [key, val] of this) {
	      if (fn(val, key, this)) return val;
	    }
	    return void 0;
	  }
	  findKey(fn, thisArg) {
	    if (typeof fn !== "function") throw new TypeError(`${fn} is not a function`);
	    if (thisArg !== void 0) fn = fn.bind(thisArg);
	    for (const [key, val] of this) {
	      if (fn(val, key, this)) return key;
	    }
	    return void 0;
	  }
	  findLast(fn, thisArg) {
	    if (typeof fn !== "function") throw new TypeError(`${fn} is not a function`);
	    if (thisArg !== void 0) fn = fn.bind(thisArg);
	    const entries = [...this.entries()];
	    for (let index = entries.length - 1; index >= 0; index--) {
	      const val = entries[index][1];
	      const key = entries[index][0];
	      if (fn(val, key, this)) return val;
	    }
	    return void 0;
	  }
	  findLastKey(fn, thisArg) {
	    if (typeof fn !== "function") throw new TypeError(`${fn} is not a function`);
	    if (thisArg !== void 0) fn = fn.bind(thisArg);
	    const entries = [...this.entries()];
	    for (let index = entries.length - 1; index >= 0; index--) {
	      const key = entries[index][0];
	      const val = entries[index][1];
	      if (fn(val, key, this)) return key;
	    }
	    return void 0;
	  }
	  sweep(fn, thisArg) {
	    if (typeof fn !== "function") throw new TypeError(`${fn} is not a function`);
	    if (thisArg !== void 0) fn = fn.bind(thisArg);
	    const previousSize = this.size;
	    for (const [key, val] of this) {
	      if (fn(val, key, this)) this.delete(key);
	    }
	    return previousSize - this.size;
	  }
	  filter(fn, thisArg) {
	    if (typeof fn !== "function") throw new TypeError(`${fn} is not a function`);
	    if (thisArg !== void 0) fn = fn.bind(thisArg);
	    const results = new this.constructor[Symbol.species]();
	    for (const [key, val] of this) {
	      if (fn(val, key, this)) results.set(key, val);
	    }
	    return results;
	  }
	  partition(fn, thisArg) {
	    if (typeof fn !== "function") throw new TypeError(`${fn} is not a function`);
	    if (thisArg !== void 0) fn = fn.bind(thisArg);
	    const results = [
	      new this.constructor[Symbol.species](),
	      new this.constructor[Symbol.species]()
	    ];
	    for (const [key, val] of this) {
	      if (fn(val, key, this)) {
	        results[0].set(key, val);
	      } else {
	        results[1].set(key, val);
	      }
	    }
	    return results;
	  }
	  flatMap(fn, thisArg) {
	    const collections = this.map(fn, thisArg);
	    return new this.constructor[Symbol.species]().concat(...collections);
	  }
	  map(fn, thisArg) {
	    if (typeof fn !== "function") throw new TypeError(`${fn} is not a function`);
	    if (thisArg !== void 0) fn = fn.bind(thisArg);
	    const iter = this.entries();
	    return Array.from({ length: this.size }, () => {
	      const [key, value] = iter.next().value;
	      return fn(value, key, this);
	    });
	  }
	  mapValues(fn, thisArg) {
	    if (typeof fn !== "function") throw new TypeError(`${fn} is not a function`);
	    if (thisArg !== void 0) fn = fn.bind(thisArg);
	    const coll = new this.constructor[Symbol.species]();
	    for (const [key, val] of this) coll.set(key, fn(val, key, this));
	    return coll;
	  }
	  some(fn, thisArg) {
	    if (typeof fn !== "function") throw new TypeError(`${fn} is not a function`);
	    if (thisArg !== void 0) fn = fn.bind(thisArg);
	    for (const [key, val] of this) {
	      if (fn(val, key, this)) return true;
	    }
	    return false;
	  }
	  every(fn, thisArg) {
	    if (typeof fn !== "function") throw new TypeError(`${fn} is not a function`);
	    if (thisArg !== void 0) fn = fn.bind(thisArg);
	    for (const [key, val] of this) {
	      if (!fn(val, key, this)) return false;
	    }
	    return true;
	  }
	  reduce(fn, initialValue) {
	    if (typeof fn !== "function") throw new TypeError(`${fn} is not a function`);
	    let accumulator;
	    const iterator = this.entries();
	    if (initialValue === void 0) {
	      if (this.size === 0) throw new TypeError("Reduce of empty collection with no initial value");
	      accumulator = iterator.next().value[1];
	    } else {
	      accumulator = initialValue;
	    }
	    for (const [key, value] of iterator) {
	      accumulator = fn(accumulator, value, key, this);
	    }
	    return accumulator;
	  }
	  reduceRight(fn, initialValue) {
	    if (typeof fn !== "function") throw new TypeError(`${fn} is not a function`);
	    const entries = [...this.entries()];
	    let accumulator;
	    let index;
	    if (initialValue === void 0) {
	      if (entries.length === 0) throw new TypeError("Reduce of empty collection with no initial value");
	      accumulator = entries[entries.length - 1][1];
	      index = entries.length - 1;
	    } else {
	      accumulator = initialValue;
	      index = entries.length;
	    }
	    while (--index >= 0) {
	      const key = entries[index][0];
	      const val = entries[index][1];
	      accumulator = fn(accumulator, val, key, this);
	    }
	    return accumulator;
	  }
	  each(fn, thisArg) {
	    if (typeof fn !== "function") throw new TypeError(`${fn} is not a function`);
	    if (thisArg !== void 0) fn = fn.bind(thisArg);
	    for (const [key, value] of this) {
	      fn(value, key, this);
	    }
	    return this;
	  }
	  tap(fn, thisArg) {
	    if (typeof fn !== "function") throw new TypeError(`${fn} is not a function`);
	    if (thisArg !== void 0) fn = fn.bind(thisArg);
	    fn(this);
	    return this;
	  }
	  /**
	   * Creates an identical shallow copy of this collection.
	   *
	   * @example
	   * ```ts
	   * const newColl = someColl.clone();
	   * ```
	   */
	  clone() {
	    return new this.constructor[Symbol.species](this);
	  }
	  /**
	   * Combines this collection with others into a new collection. None of the source collections are modified.
	   *
	   * @param collections - Collections to merge
	   * @example
	   * ```ts
	   * const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);
	   * ```
	   */
	  concat(...collections) {
	    const newColl = this.clone();
	    for (const coll of collections) {
	      for (const [key, val] of coll) newColl.set(key, val);
	    }
	    return newColl;
	  }
	  /**
	   * Checks if this collection shares identical items with another.
	   * This is different to checking for equality using equal-signs, because
	   * the collections may be different objects, but contain the same data.
	   *
	   * @param collection - Collection to compare with
	   * @returns Whether the collections have identical contents
	   */
	  equals(collection) {
	    if (!collection) return false;
	    if (this === collection) return true;
	    if (this.size !== collection.size) return false;
	    for (const [key, value] of this) {
	      if (!collection.has(key) || value !== collection.get(key)) {
	        return false;
	      }
	    }
	    return true;
	  }
	  /**
	   * The sort method sorts the items of a collection in place and returns it.
	   * The sort is not necessarily stable in Node 10 or older.
	   * The default sort order is according to string Unicode code points.
	   *
	   * @param compareFunction - Specifies a function that defines the sort order.
	   * If omitted, the collection is sorted according to each character's Unicode code point value, according to the string conversion of each element.
	   * @example
	   * ```ts
	   * collection.sort((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);
	   * ```
	   */
	  sort(compareFunction = _Collection.defaultSort) {
	    const entries = [...this.entries()];
	    entries.sort((a, b) => compareFunction(a[1], b[1], a[0], b[0]));
	    super.clear();
	    for (const [key, value] of entries) {
	      super.set(key, value);
	    }
	    return this;
	  }
	  /**
	   * The intersection method returns a new collection containing the items where the key is present in both collections.
	   *
	   * @param other - The other Collection to filter against
	   * @example
	   * ```ts
	   * const col1 = new Collection([['a', 1], ['b', 2]]);
	   * const col2 = new Collection([['a', 1], ['c', 3]]);
	   * const intersection = col1.intersection(col2);
	   * console.log(col1.intersection(col2));
	   * // => Collection { 'a' => 1 }
	   * ```
	   */
	  intersection(other) {
	    const coll = new this.constructor[Symbol.species]();
	    for (const [key, value] of this) {
	      if (other.has(key)) coll.set(key, value);
	    }
	    return coll;
	  }
	  /**
	   * Returns a new collection containing the items where the key is present in either of the collections.
	   *
	   * @remarks
	   *
	   * If the collections have any items with the same key, the value from the first collection will be used.
	   * @param other - The other Collection to filter against
	   * @example
	   * ```ts
	   * const col1 = new Collection([['a', 1], ['b', 2]]);
	   * const col2 = new Collection([['a', 1], ['b', 3], ['c', 3]]);
	   * const union = col1.union(col2);
	   * console.log(union);
	   * // => Collection { 'a' => 1, 'b' => 2, 'c' => 3 }
	   * ```
	   */
	  union(other) {
	    const coll = new this.constructor[Symbol.species](this);
	    for (const [key, value] of other) {
	      if (!coll.has(key)) coll.set(key, value);
	    }
	    return coll;
	  }
	  /**
	   * Returns a new collection containing the items where the key is present in this collection but not the other.
	   *
	   * @param other - The other Collection to filter against
	   * @example
	   * ```ts
	   * const col1 = new Collection([['a', 1], ['b', 2]]);
	   * const col2 = new Collection([['a', 1], ['c', 3]]);
	   * console.log(col1.difference(col2));
	   * // => Collection { 'b' => 2 }
	   * console.log(col2.difference(col1));
	   * // => Collection { 'c' => 3 }
	   * ```
	   */
	  difference(other) {
	    const coll = new this.constructor[Symbol.species]();
	    for (const [key, value] of this) {
	      if (!other.has(key)) coll.set(key, value);
	    }
	    return coll;
	  }
	  /**
	   * Returns a new collection containing only the items where the keys are present in either collection, but not both.
	   *
	   * @param other - The other Collection to filter against
	   * @example
	   * ```ts
	   * const col1 = new Collection([['a', 1], ['b', 2]]);
	   * const col2 = new Collection([['a', 1], ['c', 3]]);
	   * const symmetricDifference = col1.symmetricDifference(col2);
	   * console.log(col1.symmetricDifference(col2));
	   * // => Collection { 'b' => 2, 'c' => 3 }
	   * ```
	   */
	  symmetricDifference(other) {
	    const coll = new this.constructor[Symbol.species]();
	    for (const [key, value] of this) {
	      if (!other.has(key)) coll.set(key, value);
	    }
	    for (const [key, value] of other) {
	      if (!this.has(key)) coll.set(key, value);
	    }
	    return coll;
	  }
	  /**
	   * Merges two Collections together into a new Collection.
	   *
	   * @param other - The other Collection to merge with
	   * @param whenInSelf - Function getting the result if the entry only exists in this Collection
	   * @param whenInOther - Function getting the result if the entry only exists in the other Collection
	   * @param whenInBoth - Function getting the result if the entry exists in both Collections
	   * @example
	   * ```ts
	   * // Sums up the entries in two collections.
	   * coll.merge(
	   *  other,
	   *  x => ({ keep: true, value: x }),
	   *  y => ({ keep: true, value: y }),
	   *  (x, y) => ({ keep: true, value: x + y }),
	   * );
	   * ```
	   * @example
	   * ```ts
	   * // Intersects two collections in a left-biased manner.
	   * coll.merge(
	   *  other,
	   *  x => ({ keep: false }),
	   *  y => ({ keep: false }),
	   *  (x, _) => ({ keep: true, value: x }),
	   * );
	   * ```
	   */
	  merge(other, whenInSelf, whenInOther, whenInBoth) {
	    const coll = new this.constructor[Symbol.species]();
	    const keys = /* @__PURE__ */ new Set([...this.keys(), ...other.keys()]);
	    for (const key of keys) {
	      const hasInSelf = this.has(key);
	      const hasInOther = other.has(key);
	      if (hasInSelf && hasInOther) {
	        const result = whenInBoth(this.get(key), other.get(key), key);
	        if (result.keep) coll.set(key, result.value);
	      } else if (hasInSelf) {
	        const result = whenInSelf(this.get(key), key);
	        if (result.keep) coll.set(key, result.value);
	      } else if (hasInOther) {
	        const result = whenInOther(other.get(key), key);
	        if (result.keep) coll.set(key, result.value);
	      }
	    }
	    return coll;
	  }
	  /**
	   * Identical to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toReversed | Array.toReversed()}
	   * but returns a Collection instead of an Array.
	   */
	  toReversed() {
	    return new this.constructor[Symbol.species](this).reverse();
	  }
	  /**
	   * The sorted method sorts the items of a collection and returns it.
	   * The sort is not necessarily stable in Node 10 or older.
	   * The default sort order is according to string Unicode code points.
	   *
	   * @param compareFunction - Specifies a function that defines the sort order.
	   * If omitted, the collection is sorted according to each character's Unicode code point value,
	   * according to the string conversion of each element.
	   * @example
	   * ```ts
	   * collection.sorted((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);
	   * ```
	   */
	  toSorted(compareFunction = _Collection.defaultSort) {
	    return new this.constructor[Symbol.species](this).sort((av, bv, ak, bk) => compareFunction(av, bv, ak, bk));
	  }
	  toJSON() {
	    return [...this.entries()];
	  }
	  static defaultSort(firstValue, secondValue) {
	    return Number(firstValue > secondValue) || Number(firstValue === secondValue) - 1;
	  }
	  /**
	   * Creates a Collection from a list of entries.
	   *
	   * @param entries - The list of entries
	   * @param combine - Function to combine an existing entry with a new one
	   * @example
	   * ```ts
	   * Collection.combineEntries([["a", 1], ["b", 2], ["a", 2]], (x, y) => x + y);
	   * // returns Collection { "a" => 3, "b" => 2 }
	   * ```
	   */
	  static combineEntries(entries, combine) {
	    const coll = new _Collection();
	    for (const [key, value] of entries) {
	      if (coll.has(key)) {
	        coll.set(key, combine(coll.get(key), value, key));
	      } else {
	        coll.set(key, value);
	      }
	    }
	    return coll;
	  }
	};

	// src/index.ts
	var version = "2.1.1";
	
	return dist$6;
}

var cjs$2 = {};

var hasRequiredCjs$2;

function requireCjs$2 () {
	if (hasRequiredCjs$2) return cjs$2;
	hasRequiredCjs$2 = 1;

	var __defProp = Object.defineProperty;
	var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
	var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
	var __publicField = (obj, key, value) => {
	  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
	  return value;
	};

	// src/lib/Snowflake.ts
	var IncrementSymbol = Symbol("@sapphire/snowflake.increment");
	var EpochSymbol = Symbol("@sapphire/snowflake.epoch");
	var ProcessIdSymbol = Symbol("@sapphire/snowflake.processId");
	var WorkerIdSymbol = Symbol("@sapphire/snowflake.workerId");
	var MaximumWorkerId = 0b11111n;
	var MaximumProcessId = 0b11111n;
	var MaximumIncrement = 0b111111111111n;
	var _a, _b, _c, _d;
	var _Snowflake = class _Snowflake {
	  /**
	   * @param epoch the epoch to use
	   */
	  constructor(epoch) {
	    /**
	     * Alias for {@link deconstruct}
	     */
	    // eslint-disable-next-line @typescript-eslint/unbound-method
	    __publicField(this, "decode", this.deconstruct);
	    /**
	     * Internal reference of the epoch passed in the constructor
	     * @internal
	     */
	    __publicField(this, _a);
	    /**
	     * Internal incrementor for generating snowflakes
	     * @internal
	     */
	    __publicField(this, _b, 0n);
	    /**
	     * The process ID that will be used by default in the generate method
	     * @internal
	     */
	    __publicField(this, _c, 1n);
	    /**
	     * The worker ID that will be used by default in the generate method
	     * @internal
	     */
	    __publicField(this, _d, 0n);
	    this[EpochSymbol] = BigInt(epoch instanceof Date ? epoch.getTime() : epoch);
	  }
	  /**
	   * The epoch for this snowflake
	   */
	  get epoch() {
	    return this[EpochSymbol];
	  }
	  /**
	   * Gets the configured process ID
	   */
	  get processId() {
	    return this[ProcessIdSymbol];
	  }
	  /**
	   * Sets the process ID that will be used by default for the {@link generate} method
	   * @param value The new value, will be coerced to BigInt and masked with `0b11111n`
	   */
	  set processId(value) {
	    this[ProcessIdSymbol] = BigInt(value) & MaximumProcessId;
	  }
	  /**
	   * Gets the configured worker ID
	   */
	  get workerId() {
	    return this[WorkerIdSymbol];
	  }
	  /**
	   * Sets the worker ID that will be used by default for the {@link generate} method
	   * @param value The new value, will be coerced to BigInt and masked with `0b11111n`
	   */
	  set workerId(value) {
	    this[WorkerIdSymbol] = BigInt(value) & MaximumWorkerId;
	  }
	  /**
	   * Generates a snowflake given an epoch and optionally a timestamp
	   * @param options options to pass into the generator, see {@link SnowflakeGenerateOptions}
	   *
	   * **note** when `increment` is not provided it defaults to the private `increment` of the instance
	   * @example
	   * ```typescript
	   * const epoch = new Date('2000-01-01T00:00:00.000Z');
	   * const snowflake = new Snowflake(epoch).generate();
	   * ```
	   * @returns A unique snowflake
	   */
	  generate({
	    increment,
	    timestamp = Date.now(),
	    workerId = this[WorkerIdSymbol],
	    processId = this[ProcessIdSymbol]
	  } = {}) {
	    if (timestamp instanceof Date)
	      timestamp = BigInt(timestamp.getTime());
	    else if (typeof timestamp === "number")
	      timestamp = BigInt(timestamp);
	    else if (typeof timestamp !== "bigint") {
	      throw new TypeError(`"timestamp" argument must be a number, bigint, or Date (received ${typeof timestamp})`);
	    }
	    if (typeof increment !== "bigint") {
	      increment = this[IncrementSymbol];
	      this[IncrementSymbol] = increment + 1n & MaximumIncrement;
	    }
	    return timestamp - this[EpochSymbol] << 22n | (workerId & MaximumWorkerId) << 17n | (processId & MaximumProcessId) << 12n | increment & MaximumIncrement;
	  }
	  /**
	   * Deconstructs a snowflake given a snowflake ID
	   * @param id the snowflake to deconstruct
	   * @returns a deconstructed snowflake
	   * @example
	   * ```typescript
	   * const epoch = new Date('2000-01-01T00:00:00.000Z');
	   * const snowflake = new Snowflake(epoch).deconstruct('3971046231244935168');
	   * ```
	   */
	  deconstruct(id) {
	    const bigIntId = BigInt(id);
	    const epoch = this[EpochSymbol];
	    return {
	      id: bigIntId,
	      timestamp: (bigIntId >> 22n) + epoch,
	      workerId: bigIntId >> 17n & MaximumWorkerId,
	      processId: bigIntId >> 12n & MaximumProcessId,
	      increment: bigIntId & MaximumIncrement,
	      epoch
	    };
	  }
	  /**
	   * Retrieves the timestamp field's value from a snowflake.
	   * @param id The snowflake to get the timestamp value from.
	   * @returns The UNIX timestamp that is stored in `id`.
	   */
	  timestampFrom(id) {
	    return Number((BigInt(id) >> 22n) + this[EpochSymbol]);
	  }
	  /**
	   * Returns a number indicating whether a reference snowflake comes before, or after, or is same as the given
	   * snowflake in sort order.
	   * @param a The first snowflake to compare.
	   * @param b The second snowflake to compare.
	   * @returns `-1` if `a` is older than `b`, `0` if `a` and `b` are equals, `1` if `a` is newer than `b`.
	   * @example Sort snowflakes in ascending order
	   * ```typescript
	   * const ids = ['737141877803057244', '1056191128120082432', '254360814063058944'];
	   * console.log(ids.sort((a, b) => Snowflake.compare(a, b)));
	   * // → ['254360814063058944', '737141877803057244', '1056191128120082432'];
	   * ```
	   * @example Sort snowflakes in descending order
	   * ```typescript
	   * const ids = ['737141877803057244', '1056191128120082432', '254360814063058944'];
	   * console.log(ids.sort((a, b) => -Snowflake.compare(a, b)));
	   * // → ['1056191128120082432', '737141877803057244', '254360814063058944'];
	   * ```
	   */
	  static compare(a, b) {
	    const typeA = typeof a;
	    return typeA === typeof b ? typeA === "string" ? cmpString(a, b) : cmpBigInt(a, b) : cmpBigInt(BigInt(a), BigInt(b));
	  }
	};
	_a = EpochSymbol, _b = IncrementSymbol, _c = ProcessIdSymbol, _d = WorkerIdSymbol;
	__name(_Snowflake, "Snowflake");
	var Snowflake = _Snowflake;
	function cmpBigInt(a, b) {
	  return a === b ? 0 : a < b ? -1 : 1;
	}
	__name(cmpBigInt, "cmpBigInt");
	function cmpString(a, b) {
	  return a === b ? 0 : a.length < b.length ? -1 : a.length > b.length ? 1 : a < b ? -1 : 1;
	}
	__name(cmpString, "cmpString");

	// src/lib/DiscordSnowflake.ts
	var DiscordSnowflake = new Snowflake(1420070400000n);

	// src/lib/TwitterSnowflake.ts
	var TwitterSnowflake = new Snowflake(1288834974657n);

	cjs$2.DiscordSnowflake = DiscordSnowflake;
	cjs$2.MaximumIncrement = MaximumIncrement;
	cjs$2.MaximumProcessId = MaximumProcessId;
	cjs$2.MaximumWorkerId = MaximumWorkerId;
	cjs$2.Snowflake = Snowflake;
	cjs$2.TwitterSnowflake = TwitterSnowflake;
	
	
	return cjs$2;
}

var dist$5;
var hasRequiredDist$5;

function requireDist$5 () {
	if (hasRequiredDist$5) return dist$5;
	hasRequiredDist$5 = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

	// src/index.ts
	var src_exports = {};
	__export(src_exports, {
	  AbortError: () => AbortError,
	  AsyncEventEmitter: () => AsyncEventEmitter
	});
	dist$5 = __toCommonJS(src_exports);
	function validateListener(input) {
	  if (typeof input !== "function") {
	    throw new TypeError(`The listener argument must be a function. Received ${typeof input}`);
	  }
	}
	__name(validateListener, "validateListener");
	function validateAbortSignal(input) {
	  if (input && !(input instanceof AbortSignal)) {
	    throw new TypeError(`The signal option must be an AbortSignal. Received ${input}`);
	  }
	}
	__name(validateAbortSignal, "validateAbortSignal");
	function spliceOne(list, index) {
	  for (; index + 1 < list.length; index++) {
	    list[index] = list[index + 1];
	  }
	  list.pop();
	}
	__name(spliceOne, "spliceOne");
	function arrayClone(arr) {
	  switch (arr.length) {
	    case 2:
	      return [arr[0], arr[1]];
	    case 3:
	      return [arr[0], arr[1], arr[2]];
	    case 4:
	      return [arr[0], arr[1], arr[2], arr[3]];
	    case 5:
	      return [arr[0], arr[1], arr[2], arr[3], arr[4]];
	    case 6:
	      return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]];
	  }
	  return arr.slice();
	}
	__name(arrayClone, "arrayClone");
	function identicalSequenceRange(a, b) {
	  for (let i = 0; i < a.length - 3; i++) {
	    const pos = b.indexOf(a[i]);
	    if (pos !== -1) {
	      const rest = b.length - pos;
	      if (rest > 3) {
	        let len = 1;
	        const maxLen = Math.min(a.length - i, rest);
	        while (maxLen > len && a[i + len] === b[pos + len]) {
	          len++;
	        }
	        if (len > 3) {
	          return [len, i];
	        }
	      }
	    }
	  }
	  return [0, 0];
	}
	__name(identicalSequenceRange, "identicalSequenceRange");
	function enhanceStackTrace(err, own) {
	  let ctorInfo = "";
	  try {
	    const { name } = this.constructor;
	    if (name !== "AsyncEventEmitter") ctorInfo = ` on ${name} instance`;
	  } catch {
	  }
	  const sep = `
Emitted 'error' event${ctorInfo} at:
`;
	  const errStack = err.stack.split("\n").slice(1);
	  const ownStack = own.stack.split("\n").slice(1);
	  const { 0: len, 1: off } = identicalSequenceRange(ownStack, errStack);
	  if (len > 0) {
	    ownStack.splice(off + 1, len - 2, "    [... lines matching original stack trace ...]");
	  }
	  return err.stack + sep + ownStack.join("\n");
	}
	__name(enhanceStackTrace, "enhanceStackTrace");
	var _AsyncEventEmitter = class _AsyncEventEmitter {
	  constructor() {
	    this._events = {
	      __proto__: null
	    };
	    this._eventCount = 0;
	    this._maxListeners = 10;
	    this._internalPromiseMap = /* @__PURE__ */ new Map();
	    this._wrapperId = 0n;
	  }
	  addListener(eventName, listener) {
	    validateListener(listener);
	    const wrapped = this._wrapListener(eventName, listener, false);
	    this._addListener(eventName, wrapped, false);
	    return this;
	  }
	  on(eventName, listener) {
	    return this.addListener(eventName, listener);
	  }
	  once(eventName, listener) {
	    validateListener(listener);
	    const wrapped = this._wrapListener(eventName, listener, true);
	    this._addListener(eventName, wrapped, false);
	    return this;
	  }
	  removeListener(eventName, listener) {
	    validateListener(listener);
	    const events = this._events;
	    const eventList = events[eventName];
	    if (eventList === void 0) {
	      return this;
	    }
	    if (eventList === listener || eventList.listener === listener) {
	      if (--this._eventCount === 0) {
	        this._events = { __proto__: null };
	      } else {
	        delete events[eventName];
	        if (events.removeListener) {
	          this.emit(
	            "removeListener",
	            eventName,
	            eventList.listener ?? eventList
	          );
	        }
	      }
	    } else if (typeof eventList !== "function") {
	      let position = -1;
	      for (let i = eventList.length - 1; i >= 0; i--) {
	        if (eventList[i] === listener || eventList[i].listener === listener) {
	          position = i;
	          break;
	        }
	      }
	      if (position < 0) {
	        return this;
	      }
	      if (position === 0) {
	        eventList.shift();
	      } else {
	        spliceOne(eventList, position);
	      }
	      if (eventList.length === 0) {
	        delete events[eventName];
	        --this._eventCount;
	      }
	      if (events.removeListener !== void 0) {
	        this.emit("removeListener", eventName, listener);
	      }
	    }
	    return this;
	  }
	  off(eventName, listener) {
	    return this.removeListener(eventName, listener);
	  }
	  removeAllListeners(event) {
	    const events = this._events;
	    if (events.removeListener === void 0) {
	      if (!event) {
	        this._events = { __proto__: null };
	        this._eventCount = 0;
	      } else if (events[event] !== void 0) {
	        if (--this._eventCount === 0) {
	          this._events = { __proto__: null };
	        } else {
	          delete events[event];
	        }
	      }
	      return this;
	    }
	    if (!event) {
	      for (const key of Reflect.ownKeys(events)) {
	        if (key === "removeListener") {
	          continue;
	        }
	        this.removeAllListeners(key);
	      }
	      this.removeAllListeners("removeListener");
	      this._events = { __proto__: null };
	      this._eventCount = 0;
	      return this;
	    }
	    const listeners = events[event];
	    if (typeof listeners === "function") {
	      this.removeListener(event, listeners);
	    } else if (listeners !== void 0) {
	      for (let i = listeners.length - 1; i >= 0; i--) {
	        this.removeListener(event, listeners[i]);
	      }
	    }
	    return this;
	  }
	  setMaxListeners(n) {
	    if (typeof n !== "number" || n < 0 || Number.isNaN(n)) {
	      throw new RangeError(`Expected to get a non-negative number for "setMaxListeners", got ${n} instead`);
	    }
	    this._maxListeners = n;
	    return this;
	  }
	  getMaxListeners() {
	    return this._maxListeners;
	  }
	  listeners(eventName) {
	    const eventList = this._events[eventName];
	    if (eventList === void 0) {
	      return [];
	    }
	    if (typeof eventList === "function") {
	      return [eventList.listener ?? eventList];
	    }
	    const ret = arrayClone(eventList);
	    for (let i = 0; i < ret.length; ++i) {
	      const orig = ret[i].listener;
	      if (typeof orig === "function") {
	        ret[i] = orig;
	      }
	    }
	    return ret;
	  }
	  rawListeners(eventName) {
	    const eventList = this._events[eventName];
	    if (eventList === void 0) {
	      return [];
	    }
	    if (typeof eventList === "function") {
	      return [eventList];
	    }
	    return arrayClone(eventList);
	  }
	  emit(eventName, ...args) {
	    let doError = eventName === "error";
	    const events = this._events;
	    if (events !== void 0) {
	      doError = doError && events.error === void 0;
	    } else if (!doError) {
	      return false;
	    }
	    if (doError) {
	      let er;
	      if (args.length > 0) {
	        er = args[0];
	      }
	      if (er instanceof Error) {
	        try {
	          const capture = {};
	          Error.captureStackTrace(capture, _AsyncEventEmitter.prototype.emit);
	          Object.defineProperty(er, "stack", {
	            value: enhanceStackTrace.call(this, er, capture),
	            configurable: true
	          });
	        } catch {
	        }
	        throw er;
	      }
	      const stringifiedError = String(er);
	      const err = new Error(`Unhandled 'error' event emitted, received ${stringifiedError}`);
	      err.context = er;
	      throw err;
	    }
	    const handlers = events[eventName];
	    if (handlers === void 0) {
	      return false;
	    }
	    if (typeof handlers === "function") {
	      const result = handlers.apply(this, args);
	      if (result !== void 0 && result !== null) {
	        handleMaybeAsync(this, result);
	      }
	    } else {
	      const len = handlers.length;
	      const listeners = arrayClone(handlers);
	      for (let i = 0; i < len; ++i) {
	        const result = listeners[i].apply(this, args);
	        if (result !== void 0 && result !== null) {
	          handleMaybeAsync(this, result);
	        }
	      }
	    }
	    return true;
	  }
	  listenerCount(eventName) {
	    const events = this._events;
	    if (events === void 0) {
	      return 0;
	    }
	    const eventListeners = events[eventName];
	    if (typeof eventListeners === "function") {
	      return 1;
	    }
	    return eventListeners?.length ?? 0;
	  }
	  prependListener(eventName, listener) {
	    validateListener(listener);
	    const wrapped = this._wrapListener(eventName, listener, false);
	    this._addListener(eventName, wrapped, true);
	    return this;
	  }
	  prependOnceListener(eventName, listener) {
	    validateListener(listener);
	    const wrapped = this._wrapListener(eventName, listener, true);
	    this._addListener(eventName, wrapped, true);
	    return this;
	  }
	  eventNames() {
	    return this._eventCount > 0 ? Reflect.ownKeys(this._events) : [];
	  }
	  async waitForAllListenersToComplete() {
	    const promises = [...this._internalPromiseMap.values()];
	    if (promises.length === 0) {
	      return false;
	    }
	    await Promise.all(promises);
	    return true;
	  }
	  _addListener(eventName, wrappedListener, prepend) {
	    if (this._events.newListener !== void 0) {
	      this.emit(
	        "newListener",
	        eventName,
	        wrappedListener.listener ?? wrappedListener
	      );
	    }
	    let existing = this._events[eventName];
	    if (existing === void 0) {
	      existing = this._events[eventName] = wrappedListener;
	      ++this._eventCount;
	    } else if (typeof existing === "function") {
	      existing = this._events[eventName] = prepend ? [wrappedListener, existing] : [existing, wrappedListener];
	    } else if (prepend) {
	      existing.unshift(wrappedListener);
	    } else {
	      existing.push(wrappedListener);
	    }
	    const existingWarnedAboutMaxListeners = Reflect.get(existing, "_hasWarnedAboutMaxListeners");
	    if (this._maxListeners > 0 && existing.length > this._maxListeners && !existingWarnedAboutMaxListeners) {
	      Reflect.set(existing, "_hasWarnedAboutMaxListeners", true);
	      const warningMessage = [
	        `Possible AsyncEventEmitter memory leak detected. ${existing.length} ${String(
	          eventName
	        )} listeners added to ${this.constructor.name}.`,
	        `Use emitter.setMaxListeners() to increase the limit.`
	      ].join(" ");
	      console.warn(warningMessage);
	    }
	  }
	  _wrapListener(eventName, listener, once) {
	    if (!once) {
	      return listener;
	    }
	    const state = {
	      fired: false,
	      wrapFn: void 0,
	      eventEmitter: this,
	      eventName,
	      listener
	    };
	    const aliased = onceWrapper;
	    const wrapped = aliased.bind(state);
	    wrapped.listener = listener;
	    state.wrapFn = wrapped;
	    return wrapped;
	  }
	  static listenerCount(emitter, eventName) {
	    return emitter.listenerCount(eventName);
	  }
	  static async once(emitter, eventName, options = {}) {
	    const signal = options?.signal;
	    validateAbortSignal(signal);
	    if (signal?.aborted) {
	      throw new AbortError(void 0, { cause: getReason(signal) });
	    }
	    return new Promise((resolve, reject) => {
	      const errorListener = /* @__PURE__ */ __name((err) => {
	        emitter.removeListener(eventName, resolver);
	        if (signal) {
	          eventTargetAgnosticRemoveListener(emitter, eventName, abortListener);
	        }
	        reject(err);
	      }, "errorListener");
	      const resolver = /* @__PURE__ */ __name((...args) => {
	        emitter.removeListener("error", errorListener);
	        if (signal) {
	          eventTargetAgnosticRemoveListener(signal, "abort", abortListener);
	        }
	        resolve(args);
	      }, "resolver");
	      emitter.once(eventName, resolver);
	      if (eventName !== "error") {
	        emitter.once("error", errorListener);
	      }
	      const abortListener = /* @__PURE__ */ __name(() => {
	        eventTargetAgnosticRemoveListener(emitter, eventName, resolver);
	        eventTargetAgnosticRemoveListener(emitter, "error", errorListener);
	        reject(new AbortError(void 0, { cause: getReason(signal) }));
	      }, "abortListener");
	      if (signal) {
	        eventTargetAgnosticAddListener(signal, "abort", abortListener, { once: true });
	      }
	    });
	  }
	  static on(emitter, eventName, options = {}) {
	    const signal = options?.signal;
	    validateAbortSignal(signal);
	    if (signal?.aborted) {
	      throw new AbortError(void 0, { cause: getReason(signal) });
	    }
	    const unconsumedEvents = [];
	    const unconsumedPromises = [];
	    let error = null;
	    let finished = false;
	    const abortListener = /* @__PURE__ */ __name(() => {
	      errorHandler(new AbortError(void 0, { cause: getReason(signal) }));
	    }, "abortListener");
	    const eventHandler = /* @__PURE__ */ __name((...args) => {
	      const promise = unconsumedPromises.shift();
	      if (promise) {
	        promise.resolve(createIterResult(args, false));
	      } else {
	        unconsumedEvents.push(args);
	      }
	    }, "eventHandler");
	    const errorHandler = /* @__PURE__ */ __name((err) => {
	      finished = true;
	      const toError = unconsumedPromises.shift();
	      if (toError) {
	        toError.reject(err);
	      } else {
	        error = err;
	      }
	      void iterator.return();
	    }, "errorHandler");
	    const iterator = Object.setPrototypeOf(
	      {
	        next() {
	          const value = unconsumedEvents.shift();
	          if (value) {
	            return Promise.resolve(createIterResult(value, false));
	          }
	          if (error) {
	            const p = Promise.reject(error);
	            error = null;
	            return p;
	          }
	          if (finished) {
	            return Promise.resolve(createIterResult(void 0, true));
	          }
	          return new Promise((resolve, reject) => {
	            unconsumedPromises.push({ resolve, reject });
	          });
	        },
	        return() {
	          emitter.off(eventName, eventHandler);
	          emitter.off("error", errorHandler);
	          if (signal) {
	            eventTargetAgnosticRemoveListener(signal, "abort", abortListener);
	          }
	          finished = true;
	          const doneResult = createIterResult(void 0, true);
	          for (const promise of unconsumedPromises) {
	            promise.resolve(doneResult);
	          }
	          return Promise.resolve(doneResult);
	        },
	        throw(err) {
	          if (!err || !(err instanceof Error)) {
	            throw new TypeError(
	              `Expected Error instance to be thrown in AsyncEventEmitter.AsyncIterator. Got ${err}`
	            );
	          }
	          error = err;
	          emitter.off(eventName, eventHandler);
	          emitter.off("error", errorHandler);
	        },
	        [Symbol.asyncIterator]() {
	          return this;
	        }
	      },
	      AsyncIteratorPrototype
	    );
	    emitter.on(eventName, eventHandler);
	    if (eventName !== "error") {
	      emitter.on("error", errorHandler);
	    }
	    if (signal) {
	      eventTargetAgnosticAddListener(signal, "abort", abortListener);
	    }
	    return iterator;
	  }
	};
	__name(_AsyncEventEmitter, "AsyncEventEmitter");
	var AsyncEventEmitter = _AsyncEventEmitter;
	function onceWrapper() {
	  if (!this.fired) {
	    this.eventEmitter.removeListener(this.eventName, this.wrapFn);
	    this.fired = true;
	    if (arguments.length === 0) {
	      return this.listener.call(this.eventEmitter);
	    }
	    return this.listener.apply(this.eventEmitter, arguments);
	  }
	}
	__name(onceWrapper, "onceWrapper");
	function getReason(signal) {
	  return signal?.reason;
	}
	__name(getReason, "getReason");
	function eventTargetAgnosticRemoveListener(emitter, name, listener, flags) {
	  if (typeof emitter.off === "function") {
	    emitter.off(name, listener);
	  } else if (typeof emitter.removeEventListener === "function") {
	    emitter.removeEventListener(name, listener, flags);
	  }
	}
	__name(eventTargetAgnosticRemoveListener, "eventTargetAgnosticRemoveListener");
	function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
	  if (typeof emitter.on === "function") {
	    if (flags?.once) {
	      emitter.once(name, listener);
	    } else {
	      emitter.on(name, listener);
	    }
	  } else if (typeof emitter.addEventListener === "function") {
	    emitter.addEventListener(name, listener, flags);
	  }
	}
	__name(eventTargetAgnosticAddListener, "eventTargetAgnosticAddListener");
	var AsyncIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf(async function* () {
	}).prototype);
	function createIterResult(value, done) {
	  return { value, done };
	}
	__name(createIterResult, "createIterResult");
	var _AbortError = class _AbortError extends Error {
	  constructor(message = "The operation was aborted", options = void 0) {
	    if (options !== void 0 && typeof options !== "object") {
	      throw new TypeError(`Failed to create AbortError: options is not an object or undefined`);
	    }
	    super(message, options);
	    this.code = "ABORT_ERR";
	    this.name = "AbortError";
	  }
	};
	__name(_AbortError, "AbortError");
	var AbortError = _AbortError;
	function handleMaybeAsync(emitter, result) {
	  try {
	    const the = result.then;
	    const fin = result.finally;
	    if (typeof the === "function") {
	      the.call(result, void 0, (error) => {
	        setTimeout(() => {
	          emitter.emit("error", error);
	        }, 0);
	      });
	    }
	    if (typeof fin === "function") {
	      const promiseId = String(++emitter["_wrapperId"]);
	      emitter["_internalPromiseMap"].set(promiseId, result);
	      fin.call(result, /* @__PURE__ */ __name(function final() {
	        emitter["_internalPromiseMap"].delete(promiseId);
	      }, "final"));
	    }
	  } catch (err) {
	    emitter.emit("error", err);
	  }
	}
	__name(handleMaybeAsync, "handleMaybeAsync");
	
	return dist$5;
}

var dist$4 = {};

var patternTree = {};

var toHex = {};

var hasRequiredToHex;

function requireToHex () {
	if (hasRequiredToHex) return toHex;
	hasRequiredToHex = 1;
	Object.defineProperty(toHex, "__esModule", { value: true });
	toHex.fromHex = toHex.toHex = void 0;
	const hex = (num) => new Number(num).toString(16).toLowerCase();
	const toHex$1 = (num) => `0x${hex(num).length === 1 ? "0" + hex(num) : hex(num)}`;
	toHex.toHex = toHex$1;
	const fromHex = (hex) => new Number(hex);
	toHex.fromHex = fromHex;
	return toHex;
}

var tree = {};

var hasRequiredTree$1;

function requireTree$1 () {
	if (hasRequiredTree$1) return tree;
	hasRequiredTree$1 = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.createComplexNode = exports.createNode = exports.merge = void 0;
		const createMatch = (leaf) => ({
		    typename: leaf.typename,
		    mime: leaf.info.mime,
		    extension: leaf.info.extension,
		});
		const isMatchingNode = (tree, path) => tree && path.length === 0;
		const head = (arr) => arr[0];
		const tail = (arr) => arr.slice(1, arr.length);
		const merge = (node, tree) => {
		    if (node.bytes.length === 0)
		        return tree;
		    const currentByte = head(node.bytes); // 0
		    const path = tail(node.bytes); // [1,2]
		    const currentTree = tree.bytes[currentByte];
		    // traversed to end. Just add key to leaf.
		    if (isMatchingNode(currentTree, path)) {
		        const matchingNode = tree.bytes[currentByte];
		        tree.bytes[currentByte] = {
		            ...matchingNode,
		            matches: [
		                ...(matchingNode.matches ? matchingNode.matches : []),
		                createMatch(node),
		            ],
		        };
		        return tree;
		    }
		    // Path exists already, Merge subtree
		    if (tree.bytes[currentByte]) {
		        tree.bytes[currentByte] = exports.merge(exports.createNode(node.typename, path, node.info), tree.bytes[currentByte]);
		        return tree;
		    }
		    // Tree did not exist before
		    if (!tree.bytes[currentByte]) {
		        tree.bytes[currentByte] = {
		            ...tree.bytes[currentByte],
		            ...exports.createComplexNode(node.typename, path, node.info),
		        };
		    }
		    return tree;
		};
		exports.merge = merge;
		const createNode = (typename, bytes, info) => {
		    return { typename, bytes, info: info ? info : {} };
		};
		exports.createNode = createNode;
		const createComplexNode = (typename, bytes, info) => {
		    let obj = {
		        bytes: {},
		        matches: undefined,
		    };
		    const currentKey = head(bytes); // 0
		    const path = tail(bytes); // [1,2]
		    if (bytes.length === 0) {
		        return {
		            matches: [
		                createMatch({
		                    typename: typename,
		                    info: info ? { extension: info.extension, mime: info.mime } : {},
		                }),
		            ],
		            bytes: {},
		        };
		    }
		    obj.bytes[currentKey] = exports.createComplexNode(typename, path, info);
		    return obj;
		};
		exports.createComplexNode = createComplexNode; 
	} (tree));
	return tree;
}

var hasRequiredPatternTree;

function requirePatternTree () {
	if (hasRequiredPatternTree) return patternTree;
	hasRequiredPatternTree = 1;
	Object.defineProperty(patternTree, "__esModule", { value: true });
	const toHex_1 = requireToHex();
	const tree_1 = requireTree$1();
	// https://en.wikipedia.org/wiki/List_of_file_signatures
	let tree = {
	    noOffset: null,
	    offset: {},
	};
	const add = (typename, signature, additionalInfo, offset) => {
	    if (offset) {
	        const existing = tree.offset[toHex_1.toHex(offset)];
	        if (!existing) {
	            tree.offset[toHex_1.toHex(offset)] = tree_1.createComplexNode(typename, signature.map((e) => e.toLowerCase()), additionalInfo);
	        }
	        else {
	            const merged = tree_1.merge(tree_1.createNode(typename, signature.map((e) => e.toLowerCase()), additionalInfo), { ...existing });
	            tree.offset[toHex_1.toHex(offset)] = merged;
	        }
	    }
	    else {
	        if (tree.noOffset === null) {
	            tree.noOffset = tree_1.createComplexNode(typename, signature.map((e) => e.toLowerCase()), additionalInfo);
	        }
	        else {
	            tree.noOffset = tree_1.merge(tree_1.createNode(typename, signature.map((e) => e.toLowerCase()), additionalInfo), tree.noOffset);
	        }
	    }
	};
	add("gif", ["0x47", "0x49", "0x46", "0x38", "0x37", "0x61"], {
	    mime: "image/gif",
	    extension: "gif",
	});
	add("gif", ["0x47", "0x49", "0x46", "0x38", "0x39", "0x61"], {
	    mime: "image/gif",
	    extension: "gif",
	});
	add("jpg", ["0xFF", "0xD8", "0xFF"], {
	    mime: "image/jpeg",
	    extension: "jpeg",
	});
	add("webp", [
	    "0x52",
	    "0x49",
	    "0x46",
	    "0x46",
	    "?",
	    "?",
	    "?",
	    "?",
	    "0x57",
	    "0x45",
	    "0x42",
	    "0x50",
	], { mime: "image/webp", extension: "webp" });
	add("heif", ["0x66", "0x74", "0x79", "0x70", "0x6D", "0x69", "0x66", "0x31"], { mime: "image/heif", extension: "heif" }, 4);
	add("heif", ["0x66", "0x74", "0x79", "0x70", "0x68", "0x65", "0x69", "0x63"], { mime: "image/heif", extension: "heic" }, 4);
	add("rpm", ["0xed", "0xab", "0xee", "0xdb"]);
	add("bin", ["0x53", "0x50", "0x30", "0x31"], {
	    mime: "application/octet-stream",
	    extension: "bin",
	});
	add("pic", ["0x00"]);
	add("pif", ["0x00"]);
	add("sea", ["0x00"]);
	add("ytr", ["0x00"]);
	// 66747970
	// 6D703432
	add("mp4", ["0x66", "0x74", "0x79", "0x70"], { mime: "video/mp4", extension: "mp4" }, 0x4);
	add("ttf", ["0x00", "0x01", "0x00", "0x00", "0x00"], {
	    mime: "font/ttf",
	    extension: "ttf",
	});
	add("otf", ["0x4F", "0x54", "0x54", "0x4F"], {
	    mime: "font/otf",
	    extension: "otf",
	});
	add("eot", ["0x50", "0x4C"], {
	    mime: "application/vnd.ms-fontobject",
	    extension: "eot",
	});
	add("woff", ["0x77", "0x4F", "0x46", "0x46"], {
	    mime: "font/woff",
	    extension: "woff",
	});
	add("woff2", ["0x77", "0x4F", "0x46", "0x32"], {
	    mime: "font/woff2",
	    extension: "woff2",
	});
	add("pdb", [
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x00",
	]);
	add("dba", ["0xBE", "0xBA", "0xFE", "0xCA"]);
	add("dba2", ["0x00", "0x01", "0x42", "0x44"]);
	add("tda", ["0x00", "0x01", "0x44", "0x54"]);
	add("tda2", ["0x00", "0x01", "0x00", "0x00"]);
	add("ico", ["0x00", "0x00", "0x01", "0x00"], {
	    mime: "image/x-icon",
	    extension: "ico",
	});
	add("3gp", ["0x66", "0x74", "0x79", "0x70", "0x33", "0x67"]);
	add("z", ["0x1F", "0x9D"]);
	add("tar.z", ["0x1F", "0xA0"]);
	add("bac", [
	    "0x42",
	    "0x41",
	    "0x43",
	    "0x4B",
	    "0x4D",
	    "0x49",
	    "0x4B",
	    "0x45",
	    "0x44",
	    "0x49",
	    "0x53",
	    "0x4B",
	]);
	add("bz2", ["0x42", "0x5A", "0x68"], {
	    mime: "application/x-bzip2",
	    extension: "bz2",
	});
	add("tif", ["0x49", "0x49", "0x2A", "0x00"], {
	    mime: "image/tiff",
	    extension: "tif",
	});
	add("tiff", ["0x4D", "0x4D", "0x00", "0x2A"], {
	    mime: "image/tiff",
	    extension: "tiff",
	});
	add("cr2", [
	    "0x49",
	    "0x49",
	    "0x2A",
	    "0x00",
	    "0x10",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x43",
	    "0x52",
	]);
	add("cin", ["0x80", "0x2A", "0x5F", "0xD7"]);
	add("cin1", ["0x52", "0x4E", "0x43", "0x01"]);
	add("cin2", ["0x52", "0x4E", "0x43", "0x02"]);
	add("dpx", ["0x53", "0x44", "0x50", "0x58"]);
	add("dpx2", ["0x58", "0x50", "0x44", "0x53"]);
	add("exr", ["0x76", "0x2F", "0x31", "0x01"]);
	add("bpg", ["0x42", "0x50", "0x47", "0xFB"]);
	add("ilbm", [
	    "0x46",
	    "0x4F",
	    "0x52",
	    "0x4D",
	    "?",
	    "?",
	    "?",
	    "?",
	    "0x49",
	    "0x4C",
	    "0x42",
	    "0x4D",
	]);
	add("8svx", [
	    "0x46",
	    "0x4F",
	    "0x52",
	    "0x4D",
	    "?",
	    "?",
	    "?",
	    "?",
	    "0x38",
	    "0x53",
	    "0x56",
	    "0x58",
	]);
	add("acbm", [
	    "0x46",
	    "0x4F",
	    "0x52",
	    "0x4D",
	    "?",
	    "?",
	    "?",
	    "?",
	    "0x41",
	    "0x43",
	    "0x42",
	    "0x4D",
	]);
	add("anbm", [
	    "0x46",
	    "0x4F",
	    "0x52",
	    "0x4D",
	    "?",
	    "?",
	    "?",
	    "?",
	    "0x41",
	    "0x4E",
	    "0x42",
	    "0x4D",
	]);
	add("anim", [
	    "0x46",
	    "0x4F",
	    "0x52",
	    "0x4D",
	    "?",
	    "?",
	    "?",
	    "?",
	    "0x41",
	    "0x4E",
	    "0x49",
	    "0x4D",
	]);
	add("faxx", [
	    "0x46",
	    "0x4F",
	    "0x52",
	    "0x4D",
	    "?",
	    "?",
	    "?",
	    "?",
	    "0x46",
	    "0x41",
	    "0x58",
	    "0x58",
	]);
	add("ftxt", [
	    "0x46",
	    "0x4F",
	    "0x52",
	    "0x4D",
	    "?",
	    "?",
	    "?",
	    "?",
	    "0x46",
	    "0x54",
	    "0x58",
	    "0x54",
	]);
	add("smus", [
	    "0x46",
	    "0x4F",
	    "0x52",
	    "0x4D",
	    "?",
	    "?",
	    "?",
	    "?",
	    "0x53",
	    "0x4D",
	    "0x55",
	    "0x53",
	]);
	add("cmus", [
	    "0x46",
	    "0x4F",
	    "0x52",
	    "0x4D",
	    "?",
	    "?",
	    "?",
	    "?",
	    "0x43",
	    "0x4D",
	    "0x55",
	    "0x53",
	]);
	add("yuvn", [
	    "0x46",
	    "0x4F",
	    "0x52",
	    "0x4D",
	    "?",
	    "?",
	    "?",
	    "?",
	    "0x59",
	    "0x55",
	    "0x56",
	    "0x4E",
	]);
	add("iff", [
	    "0x46",
	    "0x4F",
	    "0x52",
	    "0x4D",
	    "?",
	    "?",
	    "?",
	    "?",
	    "0x46",
	    "0x41",
	    "0x4E",
	    "0x54",
	]);
	add("aiff", [
	    "0x46",
	    "0x4F",
	    "0x52",
	    "0x4D",
	    "?",
	    "?",
	    "?",
	    "?",
	    "0x41",
	    "0x49",
	    "0x46",
	    "0x46",
	], { mime: "audio/x-aiff", extension: "aiff" });
	add("idx", ["0x49", "0x4E", "0x44", "0x58"]);
	add("lz", ["0x4C", "0x5A", "0x49", "0x50"]);
	add("exe", ["0x4D", "0x5A"]);
	add("zip", ["0x50", "0x4B", "0x03", "0x04"], {
	    mime: "application/zip",
	    extension: "zip",
	});
	add("zip", ["0x50", "0x4B", "0x05", "0x06"], {
	    mime: "application/zip",
	    extension: "zip",
	});
	add("zip", ["0x50", "0x4B", "0x07", "0x08"], {
	    mime: "application/zip",
	    extension: "zip",
	});
	add("jar", ["0x50", "0x4B", "0x03", "0x04"], {
	    mime: "application/java-archive",
	    extension: "jar",
	});
	add("jar", ["0x50", "0x4B", "0x05", "0x06"], {
	    mime: "application/java-archive",
	    extension: "jar",
	});
	add("jar", ["0x50", "0x4B", "0x07", "0x08"], {
	    mime: "application/java-archive",
	    extension: "jar",
	});
	add("odt", ["0x50", "0x4B", "0x03", "0x04"], {
	    mime: "application/vnd.oasis.opendocument.text",
	    extension: "odt",
	});
	add("odt", ["0x50", "0x4B", "0x05", "0x06"], {
	    mime: "application/vnd.oasis.opendocument.text",
	    extension: "odt",
	});
	add("odt", ["0x50", "0x4B", "0x07", "0x08"], {
	    mime: "application/vnd.oasis.opendocument.text",
	    extension: "odt",
	});
	add("ods", ["0x50", "0x4B", "0x03", "0x04"], {
	    mime: "application/vnd.oasis.opendocument.spreadsheet",
	    extension: "ods",
	});
	add("ods", ["0x50", "0x4B", "0x05", "0x06"], {
	    mime: "application/vnd.oasis.opendocument.spreadsheet",
	    extension: "ods",
	});
	add("ods", ["0x50", "0x4B", "0x07", "0x08"], {
	    mime: "application/vnd.oasis.opendocument.spreadsheet",
	    extension: "ods",
	});
	add("odp", ["0x50", "0x4B", "0x03", "0x04"], {
	    mime: "application/vnd.oasis.opendocument.presentation",
	    extension: "odp",
	});
	add("odp", ["0x50", "0x4B", "0x05", "0x06"], {
	    mime: "application/vnd.oasis.opendocument.presentation",
	    extension: "odp",
	});
	add("odp", ["0x50", "0x4B", "0x07", "0x08"], {
	    mime: "application/vnd.oasis.opendocument.presentation",
	    extension: "odp",
	});
	add("docx", ["0x50", "0x4B", "0x03", "0x04"], {
	    mime: "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
	    extension: "docx",
	});
	add("docx", ["0x50", "0x4B", "0x05", "0x06"], {
	    mime: "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
	    extension: "docx",
	});
	add("docx", ["0x50", "0x4B", "0x07", "0x08"], {
	    mime: "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
	    extension: "docx",
	});
	add("xlsx", ["0x50", "0x4B", "0x03", "0x04"], {
	    mime: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
	    extension: "xlsx",
	});
	add("xlsx", ["0x50", "0x4B", "0x05", "0x06"], {
	    mime: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
	    extension: "xlsx",
	});
	add("xlsx", ["0x50", "0x4B", "0x07", "0x08"], {
	    mime: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
	    extension: "xlsx",
	});
	add("pptx", ["0x50", "0x4B", "0x03", "0x04"], {
	    mime: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
	    extension: "pptx",
	});
	add("pptx", ["0x50", "0x4B", "0x05", "0x06"], {
	    mime: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
	    extension: "pptx",
	});
	add("pptx", ["0x50", "0x4B", "0x07", "0x08"], {
	    mime: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
	    extension: "pptx",
	});
	add("vsdx", ["0x50", "0x4B", "0x03", "0x04"], {
	    mime: "application/vnd.ms-visio.drawing",
	    extension: "vsdx",
	});
	add("vsdx", ["0x50", "0x4B", "0x05", "0x06"], {
	    mime: "application/vnd.ms-visio.drawing",
	    extension: "vsdx",
	});
	add("vsdx", ["0x50", "0x4B", "0x07", "0x08"], {
	    mime: "application/vnd.ms-visio.drawing",
	    extension: "vsdx",
	});
	add("apk", ["0x50", "0x4B", "0x03", "0x04"], {
	    mime: "application/vnd.android.package-archive",
	    extension: "apk",
	});
	add("apk", ["0x50", "0x4B", "0x05", "0x06"], {
	    mime: "application/vnd.android.package-archive",
	    extension: "apk",
	});
	add("apk", ["0x50", "0x4B", "0x07", "0x08"], {
	    mime: "application/vnd.android.package-archive",
	    extension: "apk",
	});
	add("aar", ["0x50", "0x4B", "0x03", "0x04"], {
	    mime: "application/vnd.android.package-archive",
	    extension: "aar",
	});
	add("aar", ["0x50", "0x4B", "0x05", "0x06"], {
	    mime: "application/vnd.android.package-archive",
	    extension: "aar",
	});
	add("aar", ["0x50", "0x4B", "0x07", "0x08"], {
	    mime: "application/vnd.android.package-archive",
	    extension: "aar",
	});
	add("rar", ["0x52", "0x61", "0x72", "0x21", "0x1A", "0x07", "0x00"], {
	    mime: "application/vnd.rar",
	    extension: "rar",
	});
	add("rar", ["0x52", "0x61", "0x72", "0x21", "0x1A", "0x07", "0x01", "0x00"], {
	    mime: "application/vnd.rar",
	    extension: "rar",
	});
	add("rar", ["0x7F", "0x45", "0x4C", "0x46"], {
	    mime: "application/vnd.rar",
	    extension: "rar",
	});
	add("png", ["0x89", "0x50", "0x4E", "0x47", "0x0D", "0x0A", "0x1A", "0x0A"], {
	    mime: "image/png",
	    extension: "png",
	});
	add("apng", ["0x89", "0x50", "0x4E", "0x47", "0x0D", "0x0A", "0x1A", "0x0A"], {
	    mime: "image/apng",
	    extension: "apng",
	});
	add("class", ["0xCA", "0xFE", "0xBA", "0xBE"]);
	add("class", ["0xEF", "0xBB", "0xBF"]);
	add("class", ["0xFE", "0xed", "0xFA", "0xCE"], undefined, 0x1000);
	add("class", ["0xFE", "0xed", "0xFA", "0xCF"], undefined, 0x1000);
	add("class", ["0xCE", "0xFA", "0xed", "0xFE"]);
	add("class", ["0xCF", "0xFA", "0xed", "0xFE"]);
	add("class", ["0xFF", "0xFE"]);
	add("class", ["0xFF", "0xFE"]);
	add("class", ["0xFF", "0xFE", "0x00", "0x00"]);
	add("ps", ["0x25", "0x21", "0x50", "0x53"], {
	    mime: "application/postscript",
	    extension: ".ps"
	});
	add("pdf", ["0x25", "0x50", "0x44", "0x46"], {
	    mime: "application/pdf",
	    extension: "pdf",
	});
	add("asf", [
	    "0x30",
	    "0x26",
	    "0xB2",
	    "0x75",
	    "0x8E",
	    "0x66",
	    "0xCF",
	    "0x11",
	    "0xA6",
	    "0xD9",
	    "0x00",
	    "0xAA",
	    "0x00",
	    "0x62",
	    "0xCE",
	    "0x6C",
	]);
	add("wma", [
	    "0x30",
	    "0x26",
	    "0xB2",
	    "0x75",
	    "0x8E",
	    "0x66",
	    "0xCF",
	    "0x11",
	    "0xA6",
	    "0xD9",
	    "0x00",
	    "0xAA",
	    "0x00",
	    "0x62",
	    "0xCE",
	    "0x6C",
	]);
	add("wmv", [
	    "0x30",
	    "0x26",
	    "0xB2",
	    "0x75",
	    "0x8E",
	    "0x66",
	    "0xCF",
	    "0x11",
	    "0xA6",
	    "0xD9",
	    "0x00",
	    "0xAA",
	    "0x00",
	    "0x62",
	    "0xCE",
	    "0x6C",
	]);
	add("deploymentimage", [
	    "0x24",
	    "0x53",
	    "0x44",
	    "0x49",
	    "0x30",
	    "0x30",
	    "0x30",
	    "0x31",
	]);
	// ogg video ' theora'
	add("ogv", [
	    "0x4F",
	    "0x67",
	    "0x67",
	    "0x53",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "0x80",
	    "0x74",
	    "0x68",
	    "0x65",
	    "0x6F",
	    "0x72",
	    "0x61",
	], {
	    mime: "video/ogg",
	    extension: "ogv",
	});
	// ogg video '\x01video'
	add("ogm", [
	    "0x4F",
	    "0x67",
	    "0x67",
	    "0x53",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "0x01",
	    "0x76",
	    "0x69",
	    "0x64",
	    "0x65",
	    "0x6F",
	    "0x00",
	], {
	    mime: "video/ogg",
	    extension: "ogm",
	});
	// ogg audio ' FLAC'
	add("oga", [
	    "0x4F",
	    "0x67",
	    "0x67",
	    "0x53",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "0x7F",
	    "0x46",
	    "0x4C",
	    "0x41",
	    "0x43",
	], {
	    mime: "audio/ogg",
	    extension: "oga",
	});
	// ogg audio 'Speex  '
	add("spx", [
	    "0x4F",
	    "0x67",
	    "0x67",
	    "0x53",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "0x53",
	    "0x70",
	    "0x65",
	    "0x65",
	    "0x78",
	    "0x20",
	    "0x20",
	], {
	    mime: "audio/ogg",
	    extension: "spx",
	});
	// ogg audio '\x01vorbis '
	add("ogg", [
	    "0x4F",
	    "0x67",
	    "0x67",
	    "0x53",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "?",
	    "0x01",
	    "0x76",
	    "0x6F",
	    "0x72",
	    "0x62",
	    "0x69",
	    "0x73",
	], {
	    mime: "audio/ogg",
	    extension: "ogg",
	});
	// default OGG container
	add("ogx", ["0x4F", "0x67", "0x67", "0x53"], {
	    mime: "application/ogg",
	    extension: "ogx",
	});
	add("psd", ["0x38", "0x42", "0x50", "0x53"], {
	    mime: "application/x-photoshop",
	    extension: "psd",
	});
	add("clip", ["0x43", "0x53", "0x46", "0x43", "0x48", "0x55", "0x4e", "0x4b"]);
	add("wav", [
	    "0x52",
	    "0x49",
	    "0x46",
	    "0x46",
	    "?",
	    "?",
	    "?",
	    "?",
	    "0x57",
	    "0x41",
	    "0x56",
	    "0x45",
	], { mime: "audio/x-wav", extension: "wav" });
	add("avi", [
	    "0x52",
	    "0x49",
	    "0x46",
	    "0x46",
	    "?",
	    "?",
	    "?",
	    "?",
	    "0x41",
	    "0x56",
	    "0x49",
	    "0x20",
	], { mime: "video/x-msvideo", extension: "avi" });
	add("mp3", ["0xFF", "0xFB"], { mime: "audio/mpeg", extension: "mp3" });
	add("mp3", ["0xFF", "0xF3"], { mime: "audio/mpeg", extension: "mp3" });
	add("mp3", ["0xFF", "0xF2"], { mime: "audio/mpeg", extension: "mp3" });
	add("mp3", ["0x49", "0x44", "0x33"], { mime: "audio/mpeg", extension: "mp3" });
	add("bmp", ["0x42", "0x4D"], { mime: "image/bmp", extension: "bmp" });
	add("iso", ["0x43", "0x44", "0x30", "0x30", "0x31"]);
	add("flac", ["0x66", "0x4C", "0x61", "0x43"]);
	add("mid", ["0x4D", "0x54", "0x68", "0x64"], {
	    mime: "audio/midi",
	    extension: "mid",
	});
	add("midi", ["0x4D", "0x54", "0x68", "0x64"], {
	    mime: "audio/midi",
	    extension: "midi",
	});
	add("doc", ["0xD0", "0xCF", "0x11", "0xE0", "0xA1", "0xB1", "0x1A", "0xE1"], {
	    mime: "application/msword",
	    extension: "doc",
	});
	add("xls", ["0xD0", "0xCF", "0x11", "0xE0", "0xA1", "0xB1", "0x1A", "0xE1"], {
	    mime: "application/vnd.ms-excel",
	    extension: "xls",
	});
	add("ppt", ["0xD0", "0xCF", "0x11", "0xE0", "0xA1", "0xB1", "0x1A", "0xE1"], {
	    mime: "application/vnd.ms-powerpoint",
	    extension: "ppt",
	});
	add("msg", ["0xD0", "0xCF", "0x11", "0xE0", "0xA1", "0xB1", "0x1A", "0xE1"]);
	add("dex", ["0x64", "0x65", "0x78", "0x0A", "0x30", "0x33", "0x35", "0x00"]);
	add("vmdk", ["0x4B", "0x44", "0x4D"]);
	add("crx", ["0x43", "0x72", "0x32", "0x34"]);
	add("fh8", ["0x41", "0x47", "0x44", "0x33"]);
	add("cwk", [
	    "0x05",
	    "0x07",
	    "0x00",
	    "0x00",
	    "0x42",
	    "0x4F",
	    "0x42",
	    "0x4F",
	    "0x05",
	    "0x07",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x01",
	]);
	add("cwk", [
	    "0x06",
	    "0x07",
	    "0xE1",
	    "0x00",
	    "0x42",
	    "0x4F",
	    "0x42",
	    "0x4F",
	    "0x06",
	    "0x07",
	    "0xE1",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x00",
	    "0x01",
	]);
	add("toast", ["0x45", "0x52", "0x02", "0x00", "0x00", "0x00"]);
	add("toast", ["0x8B", "0x45", "0x52", "0x02", "0x00", "0x00", "0x00"]);
	add("dmg", ["0x78", "0x01", "0x73", "0x0D", "0x62", "0x62", "0x60"]);
	add("xar", ["0x78", "0x61", "0x72", "0x21"]);
	add("dat", ["0x50", "0x4D", "0x4F", "0x43", "0x43", "0x4D", "0x4F", "0x43"]);
	add("nes", ["0x4E", "0x45", "0x53", "0x1A"]);
	add("tar", ["0x75", "0x73", "0x74", "0x61", "0x72", "0x00", "0x30", "0x30"], {
	    // As per Mozilla documentation available at:
	    // https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types
	    // or wikipedia page:
	    // https://en.wikipedia.org/wiki/List_of_archive_formats
	    mime: "application/x-tar",
	    extension: "tar"
	}, 0x101);
	add("tar", ["0x75", "0x73", "0x74", "0x61", "0x72", "0x20", "0x20", "0x00"], {
	    mime: "application/x-tar",
	    extension: "tar"
	}, 0x101);
	add("tox", ["0x74", "0x6F", "0x78", "0x33"]);
	add("mlv", ["0x4D", "0x4C", "0x56", "0x49"]);
	add("windowsupdate", [
	    "0x44",
	    "0x43",
	    "0x4D",
	    "0x01",
	    "0x50",
	    "0x41",
	    "0x33",
	    "0x30",
	]);
	add("7z", ["0x37", "0x7A", "0xBC", "0xAF", "0x27", "0x1C"], {
	    mime: "application/x-7z-compressed",
	    extension: "7z",
	});
	add("gz", ["0x1F", "0x8B"], { mime: "application/gzip", extension: "gz" });
	add("tar.gz", ["0x1F", "0x8B"], {
	    mime: "application/gzip",
	    extension: "tar.gz",
	});
	add("xz", ["0xFD", "0x37", "0x7A", "0x58", "0x5A", "0x00", "0x00"], {
	    mime: "application/gzip",
	    extension: "xz",
	});
	add("tar.xz", ["0xFD", "0x37", "0x7A", "0x58", "0x5A", "0x00", "0x00"], {
	    mime: "application/gzip",
	    extension: "tar.xz",
	});
	add("lz2", ["0x04", "0x22", "0x4D", "0x18"]);
	add("cab", ["0x4D", "0x53", "0x43", "0x46"]);
	add("mkv", ["0x1A", "0x45", "0xDF", "0xA3"], {
	    mime: "video/x-matroska",
	    extension: "mkv",
	});
	add("mka", ["0x1A", "0x45", "0xDF", "0xA3"], {
	    mime: "audio/x-matroska",
	    extension: "mka",
	});
	add("mks", ["0x1A", "0x45", "0xDF", "0xA3"], {
	    mime: "video/x-matroska",
	    extension: "mks",
	});
	add("mk3d", ["0x1A", "0x45", "0xDF", "0xA3"]);
	add("webm", ["0x1A", "0x45", "0xDF", "0xA3"], {
	    mime: "audio/webm",
	    extension: "webm",
	});
	add("dcm", ["0x44", "0x49", "0x43", "0x4D"], undefined, 0x80);
	add("xml", ["0x3C", "0x3f", "0x78", "0x6d", "0x6C", "0x20"], {
	    mime: "application/xml",
	    extension: "xml",
	});
	add("wasm", ["0x00", "0x61", "0x73", "0x6d"], {
	    mime: "application/wasm",
	    extension: "wasm",
	});
	add("lep", ["0xCF", "0x84", "0x01"]);
	add("swf", ["0x43", "0x57", "0x53"], {
	    mime: "application/x-shockwave-flash",
	    extension: "swf",
	});
	add("swf", ["0x46", "0x57", "0x53"], {
	    mime: "application/x-shockwave-flash",
	    extension: "swf",
	});
	add("deb", ["0x21", "0x3C", "0x61", "0x72", "0x63", "0x68", "0x3E"]);
	add("rtf", ["0x7B", "0x5C", "0x72", "0x74", "0x66", "0x31"], {
	    mime: "application/rtf",
	    extension: "rtf",
	});
	add("m2p", ["0x00", "0x00", "0x01", "0xBA"]);
	add("vob", ["0x00", "0x00", "0x01", "0xBA"]);
	add("mpg", ["0x00", "0x00", "0x01", "0xBA"], {
	    mime: "video/mpeg",
	    extension: "mpg",
	});
	add("mpeg", ["0x00", "0x00", "0x01", "0xBA"], {
	    mime: "video/mpeg",
	    extension: "mpeg",
	});
	add("mpeg", ["0x47"], { mime: "video/mpeg", extension: "mpeg" });
	add("mpeg", ["0x00", "0x00", "0x01", "0xB3"], {
	    mime: "video/mpeg",
	    extension: "mpeg",
	});
	// mov 'free' TODO: find test file
	add("mov", ["0x66", "0x72", "0x65", "0x65"], {
	    mime: "video/quicktime",
	    extension: "mov",
	}, 0x4);
	// mov 'mdat'
	add("mov", ["0x6D", "0x64", "0x61", "0x74"], {
	    mime: "video/quicktime",
	    extension: "mov",
	}, 0x4);
	// mov 'moov' TODO: find test file
	add("mov", ["0x6D", "0x6F", "0x6F", "0x76"], {
	    mime: "video/quicktime",
	    extension: "mov",
	}, 0x4);
	// move 'wide' TODO: find test file
	add("mov", ["0x77", "0x69", "0x64", "0x65"], {
	    mime: "video/quicktime",
	    extension: "mov",
	}, 0x4);
	// mov 'ftypqt'
	add("mov", ["0x66", "0x74", "0x79", "0x70", "0x71", "0x74"], {
	    mime: "video/quicktime",
	    extension: "mov",
	}, 0x4);
	add("hl2demo", ["0x48", "0x4C", "0x32", "0x44", "0x45", "0x4D", "0x4F"]);
	add("txt", ["0xEF", "0xBB", "0xBF"], {
	    mime: "text/plain; charset=UTF-8",
	    extension: "txt",
	});
	add("txt", ["0xFF", "0xFE"], {
	    mime: "text/plain; charset=UTF-16LE",
	    extension: "txt",
	});
	add("txt", ["0xFE", "0xFF"], {
	    mime: "text/plain; charset=UTF-16BE",
	    extension: "txt",
	});
	add("txt", ["0xFF", "0xFE", "0x00", "0x00"], {
	    mime: "text/plain; charset=UTF-32LE",
	    extension: "txt",
	});
	add("txt", ["0x00", "0x00", "0xFE", "0xFF"], {
	    mime: "text/plain; charset=UTF-32BE",
	    extension: "txt",
	});
	add("SubRip", ["0x31", "0x0D", "0x0A", "0x30", "0x30", "0x3A"], {
	    mime: "application/x-subrip",
	    extension: "srt",
	});
	add("WebVTT", [
	    "0xEF",
	    "0xBB",
	    "0xBF",
	    "0x57",
	    "0x45",
	    "0x42",
	    "0x56",
	    "0x54",
	    "0x54",
	    "0x0A",
	], {
	    mime: "text/vtt",
	    extension: "vtt",
	});
	add("WebVTT", [
	    "0xEF",
	    "0xBB",
	    "0xBF",
	    "0x57",
	    "0x45",
	    "0x42",
	    "0x56",
	    "0x54",
	    "0x54",
	    "0x0D",
	], {
	    mime: "text/vtt",
	    extension: "vtt",
	});
	add("WebVTT", [
	    "0xEF",
	    "0xBB",
	    "0xBF",
	    "0x57",
	    "0x45",
	    "0x42",
	    "0x56",
	    "0x54",
	    "0x54",
	    "0x20",
	], {
	    mime: "text/vtt",
	    extension: "vtt",
	});
	add("WebVTT", [
	    "0xEF",
	    "0xBB",
	    "0xBF",
	    "0x57",
	    "0x45",
	    "0x42",
	    "0x56",
	    "0x54",
	    "0x54",
	    "0x09",
	], {
	    mime: "text/vtt",
	    extension: "vtt",
	});
	add("WebVTT", ["0x57", "0x45", "0x42", "0x56", "0x54", "0x54", "0x0A"], {
	    mime: "text/vtt",
	    extension: "vtt",
	});
	add("WebVTT", ["0x57", "0x45", "0x42", "0x56", "0x54", "0x54", "0x0D"], {
	    mime: "text/vtt",
	    extension: "vtt",
	});
	add("WebVTT", ["0x57", "0x45", "0x42", "0x56", "0x54", "0x54", "0x20"], {
	    mime: "text/vtt",
	    extension: "vtt",
	});
	add("WebVTT", ["0x57", "0x45", "0x42", "0x56", "0x54", "0x54", "0x09"], {
	    mime: "text/vtt",
	    extension: "vtt",
	});
	add("Json", ["0x7B"], {
	    mime: "application/json",
	    extension: ".json",
	});
	add("Json", ["0x5B"], {
	    mime: "application/json",
	    extension: ".json",
	});
	add("ELF", ["0x7F", "0x45", "0x4C", "0x46"], {
	    mime: "application/x-executable",
	    extension: ".elf",
	});
	add("Mach-O", ["0xFE", "0xED", "0xFA", "0xC"], {
	    mime: "application/x-mach-binary",
	    extension: ".o",
	});
	add("Mach-O", ["0xFE", "0xED", "0xFA", "0xCF"], {
	    mime: "application/x-executable",
	    extension: "elf",
	});
	add("EML", ["0x52", "0x65", "0x63", "0x65", "0x69", "0x76", "0x65", "0x64", "0x3A"], {
	    mime: "message/rfc822",
	    extension: ".eml",
	});
	add("SVG", ["0x3c", "0x73", "0x76", "0x67"], {
	    mime: "image/svg+xml",
	    extension: "svg",
	});
	patternTree.default = () => tree;
	return patternTree;
}

var hasRequiredDist$4;

function requireDist$4 () {
	if (hasRequiredDist$4) return dist$4;
	hasRequiredDist$4 = 1;
	(function (exports) {
		var __importDefault = (dist$4 && dist$4.__importDefault) || function (mod) {
		    return (mod && mod.__esModule) ? mod : { "default": mod };
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.filetypeextension = exports.filetypemime = exports.filetypename = exports.filetypeinfo = void 0;
		const pattern_tree_1 = __importDefault(requirePatternTree());
		const toHex_1 = requireToHex();
		const patternTree = pattern_tree_1.default();
		const filetypeinfo = (bytes) => {
		    let tree = patternTree;
		    for (const k of Object.keys(tree.offset)) {
		        const offset = toHex_1.fromHex(k);
		        const offsetExceedsFile = offset >= bytes.length;
		        if (offsetExceedsFile) {
		            continue;
		        }
		        const node = patternTree.offset[k];
		        const guessed = walkTree(offset, bytes, node);
		        if (guessed.length > 0) {
		            return guessed;
		        }
		    }
		    if (tree.noOffset === null) {
		        return [];
		    }
		    return walkTree(0, bytes, tree.noOffset);
		};
		exports.filetypeinfo = filetypeinfo;
		const walkTree = (index, bytes, node) => {
		    let step = node;
		    let guessFile = [];
		    while (true) {
		        const currentByte = toHex_1.toHex(bytes[index]);
		        if (step.bytes["?"] && !step.bytes[currentByte]) {
		            step = step.bytes["?"];
		        }
		        else {
		            step = step.bytes[currentByte];
		        }
		        if (!step) {
		            return guessFile;
		        }
		        if (step && step.matches) {
		            guessFile = step.matches.slice(0);
		        }
		        index += 1;
		    }
		};
		exports.default = exports.filetypeinfo;
		const filetypename = (bytes) => exports.filetypeinfo(bytes).map((e) => e.typename);
		exports.filetypename = filetypename;
		const filetypemime = (bytes) => exports.filetypeinfo(bytes)
		    .map((e) => (e.mime ? e.mime : null))
		    .filter((x) => x !== null);
		exports.filetypemime = filetypemime;
		const filetypeextension = (bytes) => exports.filetypeinfo(bytes)
		    .map((e) => (e.extension ? e.extension : null))
		    .filter((x) => x !== null);
		exports.filetypeextension = filetypeextension; 
	} (dist$4));
	return dist$4;
}

var cjs$1 = {};

var hasRequiredCjs$1;

function requireCjs$1 () {
	if (hasRequiredCjs$1) return cjs$1;
	hasRequiredCjs$1 = 1;

	var __defProp = Object.defineProperty;
	var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
	var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
	var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

	// src/lib/_AsyncQueueEntry.ts
	var _AsyncQueueEntry = class _AsyncQueueEntry {
	  constructor(queue) {
	    __publicField(this, "promise");
	    __publicField(this, "resolve");
	    __publicField(this, "reject");
	    __publicField(this, "queue");
	    __publicField(this, "signal", null);
	    __publicField(this, "signalListener", null);
	    this.queue = queue;
	    this.promise = new Promise((resolve, reject) => {
	      this.resolve = resolve;
	      this.reject = reject;
	    });
	  }
	  setSignal(signal) {
	    if (signal.aborted) return this;
	    this.signal = signal;
	    this.signalListener = () => {
	      const index = this.queue["promises"].indexOf(this);
	      if (index !== -1) this.queue["promises"].splice(index, 1);
	      this.reject(new Error("Request aborted manually"));
	    };
	    this.signal.addEventListener("abort", this.signalListener);
	    return this;
	  }
	  use() {
	    this.dispose();
	    this.resolve();
	    return this;
	  }
	  abort() {
	    this.dispose();
	    this.reject(new Error("Request aborted manually"));
	    return this;
	  }
	  dispose() {
	    if (this.signal) {
	      this.signal.removeEventListener("abort", this.signalListener);
	      this.signal = null;
	      this.signalListener = null;
	    }
	  }
	};
	__name(_AsyncQueueEntry, "AsyncQueueEntry");
	var AsyncQueueEntry = _AsyncQueueEntry;

	// src/lib/AsyncQueue.ts
	var _AsyncQueue = class _AsyncQueue {
	  constructor() {
	    /**
	     * The promises array
	     */
	    __publicField(this, "promises", []);
	  }
	  /**
	   * The amount of entries in the queue, including the head.
	   * @seealso {@link queued} for the queued count.
	   */
	  get remaining() {
	    return this.promises.length;
	  }
	  /**
	   * The amount of queued entries.
	   * @seealso {@link remaining} for the count with the head.
	   */
	  get queued() {
	    return this.remaining === 0 ? 0 : this.remaining - 1;
	  }
	  /**
	   * Waits for last promise and queues a new one
	   * @example
	   * ```typescript
	   * const queue = new AsyncQueue();
	   * async function request(url, options) {
	   *     await queue.wait({ signal: options.signal });
	   *     try {
	   *         const result = await fetch(url, options);
	   *         // Do some operations with 'result'
	   *     } finally {
	   *         // Remove first entry from the queue and resolve for the next entry
	   *         queue.shift();
	   *     }
	   * }
	   *
	   * request(someUrl1, someOptions1); // Will call fetch() immediately
	   * request(someUrl2, someOptions2); // Will call fetch() after the first finished
	   * request(someUrl3, someOptions3); // Will call fetch() after the second finished
	   * ```
	   */
	  wait(options) {
	    const entry = new AsyncQueueEntry(this);
	    if (this.promises.length === 0) {
	      this.promises.push(entry);
	      return Promise.resolve();
	    }
	    this.promises.push(entry);
	    if (options?.signal) entry.setSignal(options.signal);
	    return entry.promise;
	  }
	  /**
	   * Unlocks the head lock and transfers the next lock (if any) to the head.
	   */
	  shift() {
	    if (this.promises.length === 0) return;
	    if (this.promises.length === 1) {
	      this.promises.shift();
	      return;
	    }
	    this.promises.shift();
	    this.promises[0].use();
	  }
	  /**
	   * Aborts all the pending promises.
	   * @note To avoid race conditions, this does **not** unlock the head lock.
	   */
	  abortAll() {
	    if (this.queued === 0) return;
	    for (let i = 1; i < this.promises.length; ++i) {
	      this.promises[i].abort();
	    }
	    this.promises.length = 1;
	  }
	};
	__name(_AsyncQueue, "AsyncQueue");
	var AsyncQueue = _AsyncQueue;

	cjs$1.AsyncQueue = AsyncQueue;
	
	
	return cjs$1;
}

var web;
var hasRequiredWeb;

function requireWeb () {
	if (hasRequiredWeb) return web;
	hasRequiredWeb = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

	// src/web.ts
	var web_exports = {};
	__export(web_exports, {
	  ALLOWED_EXTENSIONS: () => ALLOWED_EXTENSIONS,
	  ALLOWED_SIZES: () => ALLOWED_SIZES,
	  ALLOWED_STICKER_EXTENSIONS: () => ALLOWED_STICKER_EXTENSIONS,
	  BurstHandlerMajorIdKey: () => BurstHandlerMajorIdKey,
	  CDN: () => CDN,
	  DEPRECATION_WARNING_PREFIX: () => DEPRECATION_WARNING_PREFIX,
	  DefaultRestOptions: () => DefaultRestOptions,
	  DefaultUserAgent: () => DefaultUserAgent,
	  DefaultUserAgentAppendix: () => DefaultUserAgentAppendix,
	  DiscordAPIError: () => DiscordAPIError,
	  HTTPError: () => HTTPError,
	  OverwrittenMimeTypes: () => OverwrittenMimeTypes,
	  REST: () => REST,
	  RESTEvents: () => RESTEvents,
	  RateLimitError: () => RateLimitError,
	  RequestMethod: () => RequestMethod,
	  calculateUserDefaultAvatarIndex: () => calculateUserDefaultAvatarIndex,
	  makeURLSearchParams: () => makeURLSearchParams,
	  parseResponse: () => parseResponse,
	  version: () => version
	});
	web = __toCommonJS(web_exports);

	// src/environment.ts
	var defaultStrategy;
	function setDefaultStrategy(newStrategy) {
	  defaultStrategy = newStrategy;
	}
	__name(setDefaultStrategy, "setDefaultStrategy");
	function getDefaultStrategy() {
	  return defaultStrategy;
	}
	__name(getDefaultStrategy, "getDefaultStrategy");

	// src/lib/utils/constants.ts
	var import_util = requireDist$7();
	var import_v10 = requireV10$c();
	var DefaultUserAgent = `DiscordBot (https://discord.js.org, 2.4.0)`;
	var DefaultUserAgentAppendix = (0, import_util.getUserAgentAppendix)();
	var DefaultRestOptions = {
	  agent: null,
	  api: "https://discord.com/api",
	  authPrefix: "Bot",
	  cdn: "https://cdn.discordapp.com",
	  headers: {},
	  invalidRequestWarningInterval: 0,
	  globalRequestsPerSecond: 50,
	  offset: 50,
	  rejectOnRateLimit: null,
	  retries: 3,
	  timeout: 15e3,
	  userAgentAppendix: DefaultUserAgentAppendix,
	  version: import_v10.APIVersion,
	  hashSweepInterval: 144e5,
	  // 4 Hours
	  hashLifetime: 864e5,
	  // 24 Hours
	  handlerSweepInterval: 36e5,
	  // 1 Hour
	  async makeRequest(...args) {
	    return getDefaultStrategy()(...args);
	  },
	  mediaProxy: "https://media.discordapp.net"
	};
	var RESTEvents = /* @__PURE__ */ ((RESTEvents2) => {
	  RESTEvents2["Debug"] = "restDebug";
	  RESTEvents2["HandlerSweep"] = "handlerSweep";
	  RESTEvents2["HashSweep"] = "hashSweep";
	  RESTEvents2["InvalidRequestWarning"] = "invalidRequestWarning";
	  RESTEvents2["RateLimited"] = "rateLimited";
	  RESTEvents2["Response"] = "response";
	  return RESTEvents2;
	})(RESTEvents || {});
	var ALLOWED_EXTENSIONS = ["webp", "png", "jpg", "jpeg", "gif"];
	var ALLOWED_STICKER_EXTENSIONS = ["png", "json", "gif"];
	var ALLOWED_SIZES = [16, 32, 64, 128, 256, 512, 1024, 2048, 4096];
	var OverwrittenMimeTypes = {
	  // https://github.com/discordjs/discord.js/issues/8557
	  "image/apng": "image/png"
	};
	var BurstHandlerMajorIdKey = "burst";
	var DEPRECATION_WARNING_PREFIX = "DeprecationWarning";

	// src/lib/errors/RateLimitError.ts
	var RateLimitError = class _RateLimitError extends Error {
	  static {
	    __name(this, "RateLimitError");
	  }
	  timeToReset;
	  limit;
	  method;
	  hash;
	  url;
	  route;
	  majorParameter;
	  global;
	  retryAfter;
	  sublimitTimeout;
	  scope;
	  constructor({
	    timeToReset,
	    limit,
	    method,
	    hash,
	    url,
	    route,
	    majorParameter,
	    global,
	    retryAfter,
	    sublimitTimeout,
	    scope
	  }) {
	    super();
	    this.timeToReset = timeToReset;
	    this.limit = limit;
	    this.method = method;
	    this.hash = hash;
	    this.url = url;
	    this.route = route;
	    this.majorParameter = majorParameter;
	    this.global = global;
	    this.retryAfter = retryAfter;
	    this.sublimitTimeout = sublimitTimeout;
	    this.scope = scope;
	  }
	  /**
	   * The name of the error
	   */
	  get name() {
	    return `${_RateLimitError.name}[${this.route}]`;
	  }
	};

	// src/lib/utils/types.ts
	var RequestMethod = /* @__PURE__ */ ((RequestMethod2) => {
	  RequestMethod2["Delete"] = "DELETE";
	  RequestMethod2["Get"] = "GET";
	  RequestMethod2["Patch"] = "PATCH";
	  RequestMethod2["Post"] = "POST";
	  RequestMethod2["Put"] = "PUT";
	  return RequestMethod2;
	})(RequestMethod || {});

	// src/lib/utils/utils.ts
	function serializeSearchParam(value) {
	  switch (typeof value) {
	    case "string":
	      return value;
	    case "number":
	    case "bigint":
	    case "boolean":
	      return value.toString();
	    case "object":
	      if (value === null) return null;
	      if (value instanceof Date) {
	        return Number.isNaN(value.getTime()) ? null : value.toISOString();
	      }
	      if (typeof value.toString === "function" && value.toString !== Object.prototype.toString) return value.toString();
	      return null;
	    default:
	      return null;
	  }
	}
	__name(serializeSearchParam, "serializeSearchParam");
	function makeURLSearchParams(options) {
	  const params = new URLSearchParams();
	  if (!options) return params;
	  for (const [key, value] of Object.entries(options)) {
	    const serialized = serializeSearchParam(value);
	    if (serialized !== null) params.append(key, serialized);
	  }
	  return params;
	}
	__name(makeURLSearchParams, "makeURLSearchParams");
	async function parseResponse(res) {
	  if (res.headers.get("Content-Type")?.startsWith("application/json")) {
	    return res.json();
	  }
	  return res.arrayBuffer();
	}
	__name(parseResponse, "parseResponse");
	function hasSublimit(bucketRoute, body, method) {
	  if (bucketRoute === "/channels/:id") {
	    if (typeof body !== "object" || body === null) return false;
	    if (method !== "PATCH" /* Patch */) return false;
	    const castedBody = body;
	    return ["name", "topic"].some((key) => Reflect.has(castedBody, key));
	  }
	  return true;
	}
	__name(hasSublimit, "hasSublimit");
	function shouldRetry(error) {
	  if (error.name === "AbortError") return true;
	  return "code" in error && error.code === "ECONNRESET" || error.message.includes("ECONNRESET");
	}
	__name(shouldRetry, "shouldRetry");
	async function onRateLimit(manager, rateLimitData) {
	  const { options } = manager;
	  if (!options.rejectOnRateLimit) return;
	  const shouldThrow = typeof options.rejectOnRateLimit === "function" ? await options.rejectOnRateLimit(rateLimitData) : options.rejectOnRateLimit.some((route) => rateLimitData.route.startsWith(route.toLowerCase()));
	  if (shouldThrow) {
	    throw new RateLimitError(rateLimitData);
	  }
	}
	__name(onRateLimit, "onRateLimit");
	function calculateUserDefaultAvatarIndex(userId) {
	  return Number(BigInt(userId) >> 22n) % 6;
	}
	__name(calculateUserDefaultAvatarIndex, "calculateUserDefaultAvatarIndex");
	async function sleep(ms) {
	  return new Promise((resolve) => {
	    setTimeout(() => resolve(), ms);
	  });
	}
	__name(sleep, "sleep");
	function isBufferLike(value) {
	  return value instanceof ArrayBuffer || value instanceof Uint8Array || value instanceof Uint8ClampedArray;
	}
	__name(isBufferLike, "isBufferLike");
	function deprecationWarning(message) {
	  if (typeof globalThis.process === "undefined") {
	    console.warn(`${DEPRECATION_WARNING_PREFIX}: ${message}`);
	  } else {
	    process.emitWarning(message, DEPRECATION_WARNING_PREFIX);
	  }
	}
	__name(deprecationWarning, "deprecationWarning");
	function normalizeRateLimitOffset(offset, route) {
	  if (typeof offset === "number") {
	    return Math.max(0, offset);
	  }
	  const result = offset(route);
	  return Math.max(0, result);
	}
	__name(normalizeRateLimitOffset, "normalizeRateLimitOffset");

	// src/lib/CDN.ts
	var deprecationEmittedForEmoji = false;
	var CDN = class {
	  constructor(cdn = DefaultRestOptions.cdn, mediaProxy = DefaultRestOptions.mediaProxy) {
	    this.cdn = cdn;
	    this.mediaProxy = mediaProxy;
	  }
	  static {
	    __name(this, "CDN");
	  }
	  /**
	   * Generates an app asset URL for a client's asset.
	   *
	   * @param clientId - The client id that has the asset
	   * @param assetHash - The hash provided by Discord for this asset
	   * @param options - Optional options for the asset
	   */
	  appAsset(clientId, assetHash, options) {
	    return this.makeURL(`/app-assets/${clientId}/${assetHash}`, options);
	  }
	  /**
	   * Generates an app icon URL for a client's icon.
	   *
	   * @param clientId - The client id that has the icon
	   * @param iconHash - The hash provided by Discord for this icon
	   * @param options - Optional options for the icon
	   */
	  appIcon(clientId, iconHash, options) {
	    return this.makeURL(`/app-icons/${clientId}/${iconHash}`, options);
	  }
	  /**
	   * Generates an avatar URL, e.g. for a user or a webhook.
	   *
	   * @param id - The id that has the icon
	   * @param avatarHash - The hash provided by Discord for this avatar
	   * @param options - Optional options for the avatar
	   */
	  avatar(id, avatarHash, options) {
	    return this.dynamicMakeURL(`/avatars/${id}/${avatarHash}`, avatarHash, options);
	  }
	  avatarDecoration(userIdOrAsset, userAvatarDecoration, options) {
	    if (userAvatarDecoration) {
	      return this.makeURL(`/avatar-decorations/${userIdOrAsset}/${userAvatarDecoration}`, options);
	    }
	    return this.makeURL(`/avatar-decoration-presets/${userIdOrAsset}`, { extension: "png" });
	  }
	  /**
	   * Generates a banner URL, e.g. for a user or a guild.
	   *
	   * @param id - The id that has the banner splash
	   * @param bannerHash - The hash provided by Discord for this banner
	   * @param options - Optional options for the banner
	   */
	  banner(id, bannerHash, options) {
	    return this.dynamicMakeURL(`/banners/${id}/${bannerHash}`, bannerHash, options);
	  }
	  /**
	   * Generates an icon URL for a channel, e.g. a group DM.
	   *
	   * @param channelId - The channel id that has the icon
	   * @param iconHash - The hash provided by Discord for this channel
	   * @param options - Optional options for the icon
	   */
	  channelIcon(channelId, iconHash, options) {
	    return this.makeURL(`/channel-icons/${channelId}/${iconHash}`, options);
	  }
	  /**
	   * Generates a default avatar URL
	   *
	   * @param index - The default avatar index
	   * @remarks
	   * To calculate the index for a user do `(userId >> 22) % 6`,
	   * or `discriminator % 5` if they're using the legacy username system.
	   */
	  defaultAvatar(index) {
	    return this.makeURL(`/embed/avatars/${index}`, { extension: "png" });
	  }
	  /**
	   * Generates a discovery splash URL for a guild's discovery splash.
	   *
	   * @param guildId - The guild id that has the discovery splash
	   * @param splashHash - The hash provided by Discord for this splash
	   * @param options - Optional options for the splash
	   */
	  discoverySplash(guildId, splashHash, options) {
	    return this.makeURL(`/discovery-splashes/${guildId}/${splashHash}`, options);
	  }
	  emoji(emojiId, options) {
	    let resolvedOptions;
	    if (typeof options === "string") {
	      if (!deprecationEmittedForEmoji) {
	        deprecationWarning(
	          "Passing a string for the second parameter of CDN#emoji() is deprecated. Use an object instead."
	        );
	        deprecationEmittedForEmoji = true;
	      }
	      resolvedOptions = { extension: options };
	    } else {
	      resolvedOptions = options;
	    }
	    return this.makeURL(`/emojis/${emojiId}`, resolvedOptions);
	  }
	  /**
	   * Generates a guild member avatar URL.
	   *
	   * @param guildId - The id of the guild
	   * @param userId - The id of the user
	   * @param avatarHash - The hash provided by Discord for this avatar
	   * @param options - Optional options for the avatar
	   */
	  guildMemberAvatar(guildId, userId, avatarHash, options) {
	    return this.dynamicMakeURL(`/guilds/${guildId}/users/${userId}/avatars/${avatarHash}`, avatarHash, options);
	  }
	  /**
	   * Generates a guild member banner URL.
	   *
	   * @param guildId - The id of the guild
	   * @param userId - The id of the user
	   * @param bannerHash - The hash provided by Discord for this banner
	   * @param options - Optional options for the banner
	   */
	  guildMemberBanner(guildId, userId, bannerHash, options) {
	    return this.dynamicMakeURL(`/guilds/${guildId}/users/${userId}/banner`, bannerHash, options);
	  }
	  /**
	   * Generates an icon URL, e.g. for a guild.
	   *
	   * @param id - The id that has the icon splash
	   * @param iconHash - The hash provided by Discord for this icon
	   * @param options - Optional options for the icon
	   */
	  icon(id, iconHash, options) {
	    return this.dynamicMakeURL(`/icons/${id}/${iconHash}`, iconHash, options);
	  }
	  /**
	   * Generates a URL for the icon of a role
	   *
	   * @param roleId - The id of the role that has the icon
	   * @param roleIconHash - The hash provided by Discord for this role icon
	   * @param options - Optional options for the role icon
	   */
	  roleIcon(roleId, roleIconHash, options) {
	    return this.makeURL(`/role-icons/${roleId}/${roleIconHash}`, options);
	  }
	  /**
	   * Generates a guild invite splash URL for a guild's invite splash.
	   *
	   * @param guildId - The guild id that has the invite splash
	   * @param splashHash - The hash provided by Discord for this splash
	   * @param options - Optional options for the splash
	   */
	  splash(guildId, splashHash, options) {
	    return this.makeURL(`/splashes/${guildId}/${splashHash}`, options);
	  }
	  /**
	   * Generates a sticker URL.
	   *
	   * @param stickerId - The sticker id
	   * @param extension - The extension of the sticker
	   * @privateRemarks
	   * Stickers cannot have a `.webp` extension, so we default to a `.png`.
	   * Sticker GIFs do not use the CDN base URL.
	   */
	  sticker(stickerId, extension = "png") {
	    return this.makeURL(`/stickers/${stickerId}`, {
	      allowedExtensions: ALLOWED_STICKER_EXTENSIONS,
	      base: extension === "gif" ? this.mediaProxy : this.cdn,
	      extension
	    });
	  }
	  /**
	   * Generates a sticker pack banner URL.
	   *
	   * @param bannerId - The banner id
	   * @param options - Optional options for the banner
	   */
	  stickerPackBanner(bannerId, options) {
	    return this.makeURL(`/app-assets/710982414301790216/store/${bannerId}`, options);
	  }
	  /**
	   * Generates a team icon URL for a team's icon.
	   *
	   * @param teamId - The team id that has the icon
	   * @param iconHash - The hash provided by Discord for this icon
	   * @param options - Optional options for the icon
	   */
	  teamIcon(teamId, iconHash, options) {
	    return this.makeURL(`/team-icons/${teamId}/${iconHash}`, options);
	  }
	  /**
	   * Generates a cover image for a guild scheduled event.
	   *
	   * @param scheduledEventId - The scheduled event id
	   * @param coverHash - The hash provided by discord for this cover image
	   * @param options - Optional options for the cover image
	   */
	  guildScheduledEventCover(scheduledEventId, coverHash, options) {
	    return this.makeURL(`/guild-events/${scheduledEventId}/${coverHash}`, options);
	  }
	  /**
	   * Constructs the URL for the resource, checking whether or not `hash` starts with `a_` if `dynamic` is set to `true`.
	   *
	   * @param route - The base cdn route
	   * @param hash - The hash provided by Discord for this icon
	   * @param options - Optional options for the link
	   */
	  dynamicMakeURL(route, hash, { forceStatic = false, ...options } = {}) {
	    return this.makeURL(route, !forceStatic && hash.startsWith("a_") ? { ...options, extension: "gif" } : options);
	  }
	  /**
	   * Constructs the URL for the resource
	   *
	   * @param route - The base cdn route
	   * @param options - The extension/size options for the link
	   */
	  makeURL(route, {
	    allowedExtensions = ALLOWED_EXTENSIONS,
	    base = this.cdn,
	    extension = "webp",
	    size
	  } = {}) {
	    extension = String(extension).toLowerCase();
	    if (!allowedExtensions.includes(extension)) {
	      throw new RangeError(`Invalid extension provided: ${extension}
Must be one of: ${allowedExtensions.join(", ")}`);
	    }
	    if (size && !ALLOWED_SIZES.includes(size)) {
	      throw new RangeError(`Invalid size provided: ${size}
Must be one of: ${ALLOWED_SIZES.join(", ")}`);
	    }
	    const url = new URL(`${base}${route}.${extension}`);
	    if (size) {
	      url.searchParams.set("size", String(size));
	    }
	    return url.toString();
	  }
	};

	// src/lib/errors/DiscordAPIError.ts
	function isErrorGroupWrapper(error) {
	  return Reflect.has(error, "_errors");
	}
	__name(isErrorGroupWrapper, "isErrorGroupWrapper");
	function isErrorResponse(error) {
	  return typeof Reflect.get(error, "message") === "string";
	}
	__name(isErrorResponse, "isErrorResponse");
	var DiscordAPIError = class _DiscordAPIError extends Error {
	  /**
	   * @param rawError - The error reported by Discord
	   * @param code - The error code reported by Discord
	   * @param status - The status code of the response
	   * @param method - The method of the request that erred
	   * @param url - The url of the request that erred
	   * @param bodyData - The unparsed data for the request that errored
	   */
	  constructor(rawError, code, status, method, url, bodyData) {
	    super(_DiscordAPIError.getMessage(rawError));
	    this.rawError = rawError;
	    this.code = code;
	    this.status = status;
	    this.method = method;
	    this.url = url;
	    this.requestBody = { files: bodyData.files, json: bodyData.body };
	  }
	  static {
	    __name(this, "DiscordAPIError");
	  }
	  requestBody;
	  /**
	   * The name of the error
	   */
	  get name() {
	    return `${_DiscordAPIError.name}[${this.code}]`;
	  }
	  static getMessage(error) {
	    let flattened = "";
	    if ("code" in error) {
	      if (error.errors) {
	        flattened = [...this.flattenDiscordError(error.errors)].join("\n");
	      }
	      return error.message && flattened ? `${error.message}
${flattened}` : error.message || flattened || "Unknown Error";
	    }
	    return error.error_description ?? "No Description";
	  }
	  static *flattenDiscordError(obj, key = "") {
	    if (isErrorResponse(obj)) {
	      return yield `${key.length ? `${key}[${obj.code}]` : `${obj.code}`}: ${obj.message}`.trim();
	    }
	    for (const [otherKey, val] of Object.entries(obj)) {
	      const nextKey = otherKey.startsWith("_") ? key : key ? Number.isNaN(Number(otherKey)) ? `${key}.${otherKey}` : `${key}[${otherKey}]` : otherKey;
	      if (typeof val === "string") {
	        yield val;
	      } else if (isErrorGroupWrapper(val)) {
	        for (const error of val._errors) {
	          yield* this.flattenDiscordError(error, nextKey);
	        }
	      } else {
	        yield* this.flattenDiscordError(val, nextKey);
	      }
	    }
	  }
	};

	// src/lib/errors/HTTPError.ts
	var HTTPError = class _HTTPError extends Error {
	  /**
	   * @param status - The status code of the response
	   * @param statusText - The status text of the response
	   * @param method - The method of the request that erred
	   * @param url - The url of the request that erred
	   * @param bodyData - The unparsed data for the request that errored
	   */
	  constructor(status, statusText, method, url, bodyData) {
	    super(statusText);
	    this.status = status;
	    this.method = method;
	    this.url = url;
	    this.requestBody = { files: bodyData.files, json: bodyData.body };
	  }
	  static {
	    __name(this, "HTTPError");
	  }
	  requestBody;
	  name = _HTTPError.name;
	};

	// src/lib/REST.ts
	var import_collection = requireDist$6();
	var import_snowflake = /*@__PURE__*/ requireCjs$2();
	var import_async_event_emitter = /*@__PURE__*/ requireDist$5();
	var import_magic_bytes = requireDist$4();

	// src/lib/handlers/Shared.ts
	var invalidCount = 0;
	var invalidCountResetTime = null;
	function incrementInvalidCount(manager) {
	  if (!invalidCountResetTime || invalidCountResetTime < Date.now()) {
	    invalidCountResetTime = Date.now() + 1e3 * 60 * 10;
	    invalidCount = 0;
	  }
	  invalidCount++;
	  const emitInvalid = manager.options.invalidRequestWarningInterval > 0 && invalidCount % manager.options.invalidRequestWarningInterval === 0;
	  if (emitInvalid) {
	    manager.emit("invalidRequestWarning" /* InvalidRequestWarning */, {
	      count: invalidCount,
	      remainingTime: invalidCountResetTime - Date.now()
	    });
	  }
	}
	__name(incrementInvalidCount, "incrementInvalidCount");
	async function makeNetworkRequest(manager, routeId, url, options, requestData, retries) {
	  const controller = new AbortController();
	  const timeout = setTimeout(() => controller.abort(), manager.options.timeout);
	  if (requestData.signal) {
	    if (requestData.signal.aborted) controller.abort();
	    else requestData.signal.addEventListener("abort", () => controller.abort());
	  }
	  let res;
	  try {
	    res = await manager.options.makeRequest(url, { ...options, signal: controller.signal });
	  } catch (error) {
	    if (!(error instanceof Error)) throw error;
	    if (shouldRetry(error) && retries !== manager.options.retries) {
	      return null;
	    }
	    throw error;
	  } finally {
	    clearTimeout(timeout);
	  }
	  if (manager.listenerCount("response" /* Response */)) {
	    manager.emit(
	      "response" /* Response */,
	      {
	        method: options.method ?? "get",
	        path: routeId.original,
	        route: routeId.bucketRoute,
	        options,
	        data: requestData,
	        retries
	      },
	      res instanceof Response ? res.clone() : { ...res }
	    );
	  }
	  return res;
	}
	__name(makeNetworkRequest, "makeNetworkRequest");
	async function handleErrors(manager, res, method, url, requestData, retries) {
	  const status = res.status;
	  if (status >= 500 && status < 600) {
	    if (retries !== manager.options.retries) {
	      return null;
	    }
	    throw new HTTPError(status, res.statusText, method, url, requestData);
	  } else {
	    if (status >= 400 && status < 500) {
	      if (status === 401 && requestData.auth) {
	        manager.setToken(null);
	      }
	      const data = await parseResponse(res);
	      throw new DiscordAPIError(data, "code" in data ? data.code : data.error, status, method, url, requestData);
	    }
	    return res;
	  }
	}
	__name(handleErrors, "handleErrors");

	// src/lib/handlers/BurstHandler.ts
	var BurstHandler = class {
	  /**
	   * @param manager - The request manager
	   * @param hash - The hash that this RequestHandler handles
	   * @param majorParameter - The major parameter for this handler
	   */
	  constructor(manager, hash, majorParameter) {
	    this.manager = manager;
	    this.hash = hash;
	    this.majorParameter = majorParameter;
	    this.id = `${hash}:${majorParameter}`;
	  }
	  static {
	    __name(this, "BurstHandler");
	  }
	  /**
	   * {@inheritdoc IHandler.id}
	   */
	  id;
	  /**
	   * {@inheritDoc IHandler.inactive}
	   */
	  inactive = false;
	  /**
	   * Emits a debug message
	   *
	   * @param message - The message to debug
	   */
	  debug(message) {
	    this.manager.emit("restDebug" /* Debug */, `[REST ${this.id}] ${message}`);
	  }
	  /**
	   * {@inheritDoc IHandler.queueRequest}
	   */
	  async queueRequest(routeId, url, options, requestData) {
	    return this.runRequest(routeId, url, options, requestData);
	  }
	  /**
	   * The method that actually makes the request to the API, and updates info about the bucket accordingly
	   *
	   * @param routeId - The generalized API route with literal ids for major parameters
	   * @param url - The fully resolved URL to make the request to
	   * @param options - The fetch options needed to make the request
	   * @param requestData - Extra data from the user's request needed for errors and additional processing
	   * @param retries - The number of retries this request has already attempted (recursion)
	   */
	  async runRequest(routeId, url, options, requestData, retries = 0) {
	    const method = options.method ?? "get";
	    const res = await makeNetworkRequest(this.manager, routeId, url, options, requestData, retries);
	    if (res === null) {
	      return this.runRequest(routeId, url, options, requestData, ++retries);
	    }
	    const status = res.status;
	    let retryAfter = 0;
	    const retry = res.headers.get("Retry-After");
	    const offset = normalizeRateLimitOffset(this.manager.options.offset, routeId.bucketRoute);
	    if (retry) retryAfter = Number(retry) * 1e3 + offset;
	    if (status === 401 || status === 403 || status === 429) {
	      incrementInvalidCount(this.manager);
	    }
	    if (status >= 200 && status < 300) {
	      return res;
	    } else if (status === 429) {
	      const isGlobal = res.headers.has("X-RateLimit-Global");
	      const scope = res.headers.get("X-RateLimit-Scope") ?? "user";
	      await onRateLimit(this.manager, {
	        global: isGlobal,
	        method,
	        url,
	        route: routeId.bucketRoute,
	        majorParameter: this.majorParameter,
	        hash: this.hash,
	        limit: Number.POSITIVE_INFINITY,
	        timeToReset: retryAfter,
	        retryAfter,
	        sublimitTimeout: 0,
	        scope
	      });
	      this.debug(
	        [
	          "Encountered unexpected 429 rate limit",
	          `  Global         : ${isGlobal}`,
	          `  Method         : ${method}`,
	          `  URL            : ${url}`,
	          `  Bucket         : ${routeId.bucketRoute}`,
	          `  Major parameter: ${routeId.majorParameter}`,
	          `  Hash           : ${this.hash}`,
	          `  Limit          : ${Number.POSITIVE_INFINITY}`,
	          `  Retry After    : ${retryAfter}ms`,
	          `  Sublimit       : None`,
	          `  Scope          : ${scope}`
	        ].join("\n")
	      );
	      await sleep(retryAfter);
	      return this.runRequest(routeId, url, options, requestData, retries);
	    } else {
	      const handled = await handleErrors(this.manager, res, method, url, requestData, retries);
	      if (handled === null) {
	        return this.runRequest(routeId, url, options, requestData, ++retries);
	      }
	      return handled;
	    }
	  }
	};

	// src/lib/handlers/SequentialHandler.ts
	var import_async_queue = /*@__PURE__*/ requireCjs$1();
	var SequentialHandler = class {
	  /**
	   * @param manager - The request manager
	   * @param hash - The hash that this RequestHandler handles
	   * @param majorParameter - The major parameter for this handler
	   */
	  constructor(manager, hash, majorParameter) {
	    this.manager = manager;
	    this.hash = hash;
	    this.majorParameter = majorParameter;
	    this.id = `${hash}:${majorParameter}`;
	  }
	  static {
	    __name(this, "SequentialHandler");
	  }
	  /**
	   * {@inheritDoc IHandler.id}
	   */
	  id;
	  /**
	   * The time this rate limit bucket will reset
	   */
	  reset = -1;
	  /**
	   * The remaining requests that can be made before we are rate limited
	   */
	  remaining = 1;
	  /**
	   * The total number of requests that can be made before we are rate limited
	   */
	  limit = Number.POSITIVE_INFINITY;
	  /**
	   * The interface used to sequence async requests sequentially
	   */
	  #asyncQueue = new import_async_queue.AsyncQueue();
	  /**
	   * The interface used to sequence sublimited async requests sequentially
	   */
	  #sublimitedQueue = null;
	  /**
	   * A promise wrapper for when the sublimited queue is finished being processed or null when not being processed
	   */
	  #sublimitPromise = null;
	  /**
	   * Whether the sublimit queue needs to be shifted in the finally block
	   */
	  #shiftSublimit = false;
	  /**
	   * {@inheritDoc IHandler.inactive}
	   */
	  get inactive() {
	    return this.#asyncQueue.remaining === 0 && (this.#sublimitedQueue === null || this.#sublimitedQueue.remaining === 0) && !this.limited;
	  }
	  /**
	   * If the rate limit bucket is currently limited by the global limit
	   */
	  get globalLimited() {
	    return this.manager.globalRemaining <= 0 && Date.now() < this.manager.globalReset;
	  }
	  /**
	   * If the rate limit bucket is currently limited by its limit
	   */
	  get localLimited() {
	    return this.remaining <= 0 && Date.now() < this.reset;
	  }
	  /**
	   * If the rate limit bucket is currently limited
	   */
	  get limited() {
	    return this.globalLimited || this.localLimited;
	  }
	  /**
	   * The time until queued requests can continue
	   */
	  getTimeToReset(routeId) {
	    const offset = normalizeRateLimitOffset(this.manager.options.offset, routeId.bucketRoute);
	    return this.reset + offset - Date.now();
	  }
	  /**
	   * Emits a debug message
	   *
	   * @param message - The message to debug
	   */
	  debug(message) {
	    this.manager.emit("restDebug" /* Debug */, `[REST ${this.id}] ${message}`);
	  }
	  /**
	   * Delay all requests for the specified amount of time, handling global rate limits
	   *
	   * @param time - The amount of time to delay all requests for
	   */
	  async globalDelayFor(time) {
	    await sleep(time);
	    this.manager.globalDelay = null;
	  }
	  /**
	   * {@inheritDoc IHandler.queueRequest}
	   */
	  async queueRequest(routeId, url, options, requestData) {
	    let queue = this.#asyncQueue;
	    let queueType = 0 /* Standard */;
	    if (this.#sublimitedQueue && hasSublimit(routeId.bucketRoute, requestData.body, options.method)) {
	      queue = this.#sublimitedQueue;
	      queueType = 1 /* Sublimit */;
	    }
	    await queue.wait({ signal: requestData.signal });
	    if (queueType === 0 /* Standard */) {
	      if (this.#sublimitedQueue && hasSublimit(routeId.bucketRoute, requestData.body, options.method)) {
	        queue = this.#sublimitedQueue;
	        const wait = queue.wait();
	        this.#asyncQueue.shift();
	        await wait;
	      } else if (this.#sublimitPromise) {
	        await this.#sublimitPromise.promise;
	      }
	    }
	    try {
	      return await this.runRequest(routeId, url, options, requestData);
	    } finally {
	      queue.shift();
	      if (this.#shiftSublimit) {
	        this.#shiftSublimit = false;
	        this.#sublimitedQueue?.shift();
	      }
	      if (this.#sublimitedQueue?.remaining === 0) {
	        this.#sublimitPromise?.resolve();
	        this.#sublimitedQueue = null;
	      }
	    }
	  }
	  /**
	   * The method that actually makes the request to the api, and updates info about the bucket accordingly
	   *
	   * @param routeId - The generalized api route with literal ids for major parameters
	   * @param url - The fully resolved url to make the request to
	   * @param options - The fetch options needed to make the request
	   * @param requestData - Extra data from the user's request needed for errors and additional processing
	   * @param retries - The number of retries this request has already attempted (recursion)
	   */
	  async runRequest(routeId, url, options, requestData, retries = 0) {
	    while (this.limited) {
	      const isGlobal = this.globalLimited;
	      let limit2;
	      let timeout;
	      let delay;
	      if (isGlobal) {
	        const offset2 = normalizeRateLimitOffset(this.manager.options.offset, routeId.bucketRoute);
	        limit2 = this.manager.options.globalRequestsPerSecond;
	        timeout = this.manager.globalReset + offset2 - Date.now();
	        if (!this.manager.globalDelay) {
	          this.manager.globalDelay = this.globalDelayFor(timeout);
	        }
	        delay = this.manager.globalDelay;
	      } else {
	        limit2 = this.limit;
	        timeout = this.getTimeToReset(routeId);
	        delay = sleep(timeout);
	      }
	      const rateLimitData = {
	        global: isGlobal,
	        method: options.method ?? "get",
	        url,
	        route: routeId.bucketRoute,
	        majorParameter: this.majorParameter,
	        hash: this.hash,
	        limit: limit2,
	        timeToReset: timeout,
	        retryAfter: timeout,
	        sublimitTimeout: 0,
	        scope: "user"
	      };
	      this.manager.emit("rateLimited" /* RateLimited */, rateLimitData);
	      await onRateLimit(this.manager, rateLimitData);
	      if (isGlobal) {
	        this.debug(`Global rate limit hit, blocking all requests for ${timeout}ms`);
	      } else {
	        this.debug(`Waiting ${timeout}ms for rate limit to pass`);
	      }
	      await delay;
	    }
	    if (!this.manager.globalReset || this.manager.globalReset < Date.now()) {
	      this.manager.globalReset = Date.now() + 1e3;
	      this.manager.globalRemaining = this.manager.options.globalRequestsPerSecond;
	    }
	    this.manager.globalRemaining--;
	    const method = options.method ?? "get";
	    const res = await makeNetworkRequest(this.manager, routeId, url, options, requestData, retries);
	    if (res === null) {
	      return this.runRequest(routeId, url, options, requestData, ++retries);
	    }
	    const status = res.status;
	    let retryAfter = 0;
	    const limit = res.headers.get("X-RateLimit-Limit");
	    const remaining = res.headers.get("X-RateLimit-Remaining");
	    const reset = res.headers.get("X-RateLimit-Reset-After");
	    const hash = res.headers.get("X-RateLimit-Bucket");
	    const retry = res.headers.get("Retry-After");
	    const scope = res.headers.get("X-RateLimit-Scope") ?? "user";
	    const offset = normalizeRateLimitOffset(this.manager.options.offset, routeId.bucketRoute);
	    this.limit = limit ? Number(limit) : Number.POSITIVE_INFINITY;
	    this.remaining = remaining ? Number(remaining) : 1;
	    this.reset = reset ? Number(reset) * 1e3 + Date.now() + offset : Date.now();
	    if (retry) retryAfter = Number(retry) * 1e3 + offset;
	    if (hash && hash !== this.hash) {
	      this.debug(["Received bucket hash update", `  Old Hash  : ${this.hash}`, `  New Hash  : ${hash}`].join("\n"));
	      this.manager.hashes.set(`${method}:${routeId.bucketRoute}`, { value: hash, lastAccess: Date.now() });
	    } else if (hash) {
	      const hashData = this.manager.hashes.get(`${method}:${routeId.bucketRoute}`);
	      if (hashData) {
	        hashData.lastAccess = Date.now();
	      }
	    }
	    let sublimitTimeout = null;
	    if (retryAfter > 0) {
	      if (res.headers.has("X-RateLimit-Global")) {
	        this.manager.globalRemaining = 0;
	        this.manager.globalReset = Date.now() + retryAfter;
	      } else if (!this.localLimited) {
	        sublimitTimeout = retryAfter;
	      }
	    }
	    if (status === 401 || status === 403 || status === 429) {
	      incrementInvalidCount(this.manager);
	    }
	    if (res.ok) {
	      return res;
	    } else if (status === 429) {
	      const isGlobal = this.globalLimited;
	      let limit2;
	      let timeout;
	      if (isGlobal) {
	        const offset2 = normalizeRateLimitOffset(this.manager.options.offset, routeId.bucketRoute);
	        limit2 = this.manager.options.globalRequestsPerSecond;
	        timeout = this.manager.globalReset + offset2 - Date.now();
	      } else {
	        limit2 = this.limit;
	        timeout = this.getTimeToReset(routeId);
	      }
	      await onRateLimit(this.manager, {
	        global: isGlobal,
	        method,
	        url,
	        route: routeId.bucketRoute,
	        majorParameter: this.majorParameter,
	        hash: this.hash,
	        limit: limit2,
	        timeToReset: timeout,
	        retryAfter,
	        sublimitTimeout: sublimitTimeout ?? 0,
	        scope
	      });
	      this.debug(
	        [
	          "Encountered unexpected 429 rate limit",
	          `  Global         : ${isGlobal.toString()}`,
	          `  Method         : ${method}`,
	          `  URL            : ${url}`,
	          `  Bucket         : ${routeId.bucketRoute}`,
	          `  Major parameter: ${routeId.majorParameter}`,
	          `  Hash           : ${this.hash}`,
	          `  Limit          : ${limit2}`,
	          `  Retry After    : ${retryAfter}ms`,
	          `  Sublimit       : ${sublimitTimeout ? `${sublimitTimeout}ms` : "None"}`,
	          `  Scope          : ${scope}`
	        ].join("\n")
	      );
	      if (sublimitTimeout) {
	        const firstSublimit = !this.#sublimitedQueue;
	        if (firstSublimit) {
	          this.#sublimitedQueue = new import_async_queue.AsyncQueue();
	          void this.#sublimitedQueue.wait();
	          this.#asyncQueue.shift();
	        }
	        this.#sublimitPromise?.resolve();
	        this.#sublimitPromise = null;
	        await sleep(sublimitTimeout);
	        let resolve;
	        const promise = new Promise((res2) => resolve = res2);
	        this.#sublimitPromise = { promise, resolve };
	        if (firstSublimit) {
	          await this.#asyncQueue.wait();
	          this.#shiftSublimit = true;
	        }
	      }
	      return this.runRequest(routeId, url, options, requestData, retries);
	    } else {
	      const handled = await handleErrors(this.manager, res, method, url, requestData, retries);
	      if (handled === null) {
	        return this.runRequest(routeId, url, options, requestData, ++retries);
	      }
	      return handled;
	    }
	  }
	};

	// src/lib/REST.ts
	var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
	  static {
	    __name(this, "REST");
	  }
	  /**
	   * The {@link https://undici.nodejs.org/#/docs/api/Agent | Agent} for all requests
	   * performed by this manager.
	   */
	  agent = null;
	  cdn;
	  /**
	   * The number of requests remaining in the global bucket
	   */
	  globalRemaining;
	  /**
	   * The promise used to wait out the global rate limit
	   */
	  globalDelay = null;
	  /**
	   * The timestamp at which the global bucket resets
	   */
	  globalReset = -1;
	  /**
	   * API bucket hashes that are cached from provided routes
	   */
	  hashes = new import_collection.Collection();
	  /**
	   * Request handlers created from the bucket hash and the major parameters
	   */
	  handlers = new import_collection.Collection();
	  #token = null;
	  hashTimer;
	  handlerTimer;
	  options;
	  constructor(options = {}) {
	    super();
	    this.cdn = new CDN(options.cdn ?? DefaultRestOptions.cdn, options.mediaProxy ?? DefaultRestOptions.mediaProxy);
	    this.options = { ...DefaultRestOptions, ...options };
	    this.globalRemaining = Math.max(1, this.options.globalRequestsPerSecond);
	    this.agent = options.agent ?? null;
	    this.setupSweepers();
	  }
	  setupSweepers() {
	    const validateMaxInterval = /* @__PURE__ */ __name((interval) => {
	      if (interval > 144e5) {
	        throw new Error("Cannot set an interval greater than 4 hours");
	      }
	    }, "validateMaxInterval");
	    if (this.options.hashSweepInterval !== 0 && this.options.hashSweepInterval !== Number.POSITIVE_INFINITY) {
	      validateMaxInterval(this.options.hashSweepInterval);
	      this.hashTimer = setInterval(() => {
	        const sweptHashes = new import_collection.Collection();
	        const currentDate = Date.now();
	        this.hashes.sweep((val, key) => {
	          if (val.lastAccess === -1) return false;
	          const shouldSweep = Math.floor(currentDate - val.lastAccess) > this.options.hashLifetime;
	          if (shouldSweep) {
	            sweptHashes.set(key, val);
	            this.emit("restDebug" /* Debug */, `Hash ${val.value} for ${key} swept due to lifetime being exceeded`);
	          }
	          return shouldSweep;
	        });
	        this.emit("hashSweep" /* HashSweep */, sweptHashes);
	      }, this.options.hashSweepInterval);
	      this.hashTimer.unref?.();
	    }
	    if (this.options.handlerSweepInterval !== 0 && this.options.handlerSweepInterval !== Number.POSITIVE_INFINITY) {
	      validateMaxInterval(this.options.handlerSweepInterval);
	      this.handlerTimer = setInterval(() => {
	        const sweptHandlers = new import_collection.Collection();
	        this.handlers.sweep((val, key) => {
	          const { inactive } = val;
	          if (inactive) {
	            sweptHandlers.set(key, val);
	            this.emit("restDebug" /* Debug */, `Handler ${val.id} for ${key} swept due to being inactive`);
	          }
	          return inactive;
	        });
	        this.emit("handlerSweep" /* HandlerSweep */, sweptHandlers);
	      }, this.options.handlerSweepInterval);
	      this.handlerTimer.unref?.();
	    }
	  }
	  /**
	   * Runs a get request from the api
	   *
	   * @param fullRoute - The full route to query
	   * @param options - Optional request options
	   */
	  async get(fullRoute, options = {}) {
	    return this.request({ ...options, fullRoute, method: "GET" /* Get */ });
	  }
	  /**
	   * Runs a delete request from the api
	   *
	   * @param fullRoute - The full route to query
	   * @param options - Optional request options
	   */
	  async delete(fullRoute, options = {}) {
	    return this.request({ ...options, fullRoute, method: "DELETE" /* Delete */ });
	  }
	  /**
	   * Runs a post request from the api
	   *
	   * @param fullRoute - The full route to query
	   * @param options - Optional request options
	   */
	  async post(fullRoute, options = {}) {
	    return this.request({ ...options, fullRoute, method: "POST" /* Post */ });
	  }
	  /**
	   * Runs a put request from the api
	   *
	   * @param fullRoute - The full route to query
	   * @param options - Optional request options
	   */
	  async put(fullRoute, options = {}) {
	    return this.request({ ...options, fullRoute, method: "PUT" /* Put */ });
	  }
	  /**
	   * Runs a patch request from the api
	   *
	   * @param fullRoute - The full route to query
	   * @param options - Optional request options
	   */
	  async patch(fullRoute, options = {}) {
	    return this.request({ ...options, fullRoute, method: "PATCH" /* Patch */ });
	  }
	  /**
	   * Runs a request from the api
	   *
	   * @param options - Request options
	   */
	  async request(options) {
	    const response = await this.queueRequest(options);
	    return parseResponse(response);
	  }
	  /**
	   * Sets the default agent to use for requests performed by this manager
	   *
	   * @param agent - The agent to use
	   */
	  setAgent(agent) {
	    this.agent = agent;
	    return this;
	  }
	  /**
	   * Sets the authorization token that should be used for requests
	   *
	   * @param token - The authorization token to use
	   */
	  setToken(token) {
	    this.#token = token;
	    return this;
	  }
	  /**
	   * Queues a request to be sent
	   *
	   * @param request - All the information needed to make a request
	   * @returns The response from the api request
	   */
	  async queueRequest(request) {
	    const routeId = _REST.generateRouteData(request.fullRoute, request.method);
	    const hash = this.hashes.get(`${request.method}:${routeId.bucketRoute}`) ?? {
	      value: `Global(${request.method}:${routeId.bucketRoute})`,
	      lastAccess: -1
	    };
	    const handler = this.handlers.get(`${hash.value}:${routeId.majorParameter}`) ?? this.createHandler(hash.value, routeId.majorParameter);
	    const { url, fetchOptions } = await this.resolveRequest(request);
	    return handler.queueRequest(routeId, url, fetchOptions, {
	      body: request.body,
	      files: request.files,
	      auth: request.auth !== false,
	      signal: request.signal
	    });
	  }
	  /**
	   * Creates a new rate limit handler from a hash, based on the hash and the major parameter
	   *
	   * @param hash - The hash for the route
	   * @param majorParameter - The major parameter for this handler
	   * @internal
	   */
	  createHandler(hash, majorParameter) {
	    const queue = majorParameter === BurstHandlerMajorIdKey ? new BurstHandler(this, hash, majorParameter) : new SequentialHandler(this, hash, majorParameter);
	    this.handlers.set(queue.id, queue);
	    return queue;
	  }
	  /**
	   * Formats the request data to a usable format for fetch
	   *
	   * @param request - The request data
	   */
	  async resolveRequest(request) {
	    const { options } = this;
	    let query = "";
	    if (request.query) {
	      const resolvedQuery = request.query.toString();
	      if (resolvedQuery !== "") {
	        query = `?${resolvedQuery}`;
	      }
	    }
	    const headers = {
	      ...this.options.headers,
	      "User-Agent": `${DefaultUserAgent} ${options.userAgentAppendix}`.trim()
	    };
	    if (request.auth !== false) {
	      if (!this.#token) {
	        throw new Error("Expected token to be set for this request, but none was present");
	      }
	      headers.Authorization = `${request.authPrefix ?? this.options.authPrefix} ${this.#token}`;
	    }
	    if (request.reason?.length) {
	      headers["X-Audit-Log-Reason"] = encodeURIComponent(request.reason);
	    }
	    const url = `${options.api}${request.versioned === false ? "" : `/v${options.version}`}${request.fullRoute}${query}`;
	    let finalBody;
	    let additionalHeaders = {};
	    if (request.files?.length) {
	      const formData = new FormData();
	      for (const [index, file] of request.files.entries()) {
	        const fileKey = file.key ?? `files[${index}]`;
	        if (isBufferLike(file.data)) {
	          let contentType = file.contentType;
	          if (!contentType) {
	            const [parsedType] = (0, import_magic_bytes.filetypeinfo)(file.data);
	            if (parsedType) {
	              contentType = OverwrittenMimeTypes[parsedType.mime] ?? parsedType.mime ?? "application/octet-stream";
	            }
	          }
	          formData.append(fileKey, new Blob([file.data], { type: contentType }), file.name);
	        } else {
	          formData.append(fileKey, new Blob([`${file.data}`], { type: file.contentType }), file.name);
	        }
	      }
	      if (request.body != null) {
	        if (request.appendToFormData) {
	          for (const [key, value] of Object.entries(request.body)) {
	            formData.append(key, value);
	          }
	        } else {
	          formData.append("payload_json", JSON.stringify(request.body));
	        }
	      }
	      finalBody = formData;
	    } else if (request.body != null) {
	      if (request.passThroughBody) {
	        finalBody = request.body;
	      } else {
	        finalBody = JSON.stringify(request.body);
	        additionalHeaders = { "Content-Type": "application/json" };
	      }
	    }
	    const method = request.method.toUpperCase();
	    const fetchOptions = {
	      // Set body to null on get / head requests. This does not follow fetch spec (likely because it causes subtle bugs) but is aligned with what request was doing
	      body: ["GET", "HEAD"].includes(method) ? null : finalBody,
	      headers: { ...request.headers, ...additionalHeaders, ...headers },
	      method,
	      // Prioritize setting an agent per request, use the agent for this instance otherwise.
	      dispatcher: request.dispatcher ?? this.agent ?? void 0
	    };
	    return { url, fetchOptions };
	  }
	  /**
	   * Stops the hash sweeping interval
	   */
	  clearHashSweeper() {
	    clearInterval(this.hashTimer);
	  }
	  /**
	   * Stops the request handler sweeping interval
	   */
	  clearHandlerSweeper() {
	    clearInterval(this.handlerTimer);
	  }
	  /**
	   * Generates route data for an endpoint:method
	   *
	   * @param endpoint - The raw endpoint to generalize
	   * @param method - The HTTP method this endpoint is called without
	   * @internal
	   */
	  static generateRouteData(endpoint, method) {
	    if (endpoint.startsWith("/interactions/") && endpoint.endsWith("/callback")) {
	      return {
	        majorParameter: BurstHandlerMajorIdKey,
	        bucketRoute: "/interactions/:id/:token/callback",
	        original: endpoint
	      };
	    }
	    const majorIdMatch = /(?:^\/webhooks\/(\d{17,19}\/[^/?]+))|(?:^\/(?:channels|guilds|webhooks)\/(\d{17,19}))/.exec(
	      endpoint
	    );
	    const majorId = majorIdMatch?.[2] ?? majorIdMatch?.[1] ?? "global";
	    const baseRoute = endpoint.replaceAll(/\d{17,19}/g, ":id").replace(/\/reactions\/(.*)/, "/reactions/:reaction").replace(/\/webhooks\/:id\/[^/?]+/, "/webhooks/:id/:token");
	    let exceptions = "";
	    if (method === "DELETE" /* Delete */ && baseRoute === "/channels/:id/messages/:id") {
	      const id = /\d{17,19}$/.exec(endpoint)[0];
	      const timestamp = import_snowflake.DiscordSnowflake.timestampFrom(id);
	      if (Date.now() - timestamp > 1e3 * 60 * 60 * 24 * 14) {
	        exceptions += "/Delete Old Message";
	      }
	    }
	    return {
	      majorParameter: majorId,
	      bucketRoute: baseRoute + exceptions,
	      original: endpoint
	    };
	  }
	};

	// src/shared.ts
	var version = "2.4.0";

	// src/web.ts
	setDefaultStrategy(fetch);
	
	return web;
}

var v10$l = {};

var v10$k = {};

var common$7 = {};

var hasRequiredCommon$7;

function requireCommon$7 () {
	if (hasRequiredCommon$7) return common$7;
	hasRequiredCommon$7 = 1;
	Object.defineProperty(common$7, "__esModule", { value: true });
	
	return common$7;
}

var hasRequiredV10$b;

function requireV10$b () {
	if (hasRequiredV10$b) return v10$k;
	hasRequiredV10$b = 1;
	(function (exports) {
		/**
		 * Types extracted from https://discord.com/developers/docs/topics/gateway
		 */
		var __createBinding = (v10$k && v10$k.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (v10$k && v10$k.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.GatewayDispatchEvents = exports.GatewayIntentBits = exports.GatewayCloseCodes = exports.GatewayOpcodes = exports.GatewayVersion = void 0;
		__exportStar(requireCommon$7(), exports);
		exports.GatewayVersion = '10';
		/**
		 * https://discord.com/developers/docs/topics/opcodes-and-status-codes#gateway-gateway-opcodes
		 */
		var GatewayOpcodes;
		(function (GatewayOpcodes) {
		    /**
		     * An event was dispatched
		     */
		    GatewayOpcodes[GatewayOpcodes["Dispatch"] = 0] = "Dispatch";
		    /**
		     * A bidirectional opcode to maintain an active gateway connection.
		     * Fired periodically by the client, or fired by the gateway to request an immediate heartbeat from the client.
		     */
		    GatewayOpcodes[GatewayOpcodes["Heartbeat"] = 1] = "Heartbeat";
		    /**
		     * Starts a new session during the initial handshake
		     */
		    GatewayOpcodes[GatewayOpcodes["Identify"] = 2] = "Identify";
		    /**
		     * Update the client's presence
		     */
		    GatewayOpcodes[GatewayOpcodes["PresenceUpdate"] = 3] = "PresenceUpdate";
		    /**
		     * Used to join/leave or move between voice channels
		     */
		    GatewayOpcodes[GatewayOpcodes["VoiceStateUpdate"] = 4] = "VoiceStateUpdate";
		    /**
		     * Resume a previous session that was disconnected
		     */
		    GatewayOpcodes[GatewayOpcodes["Resume"] = 6] = "Resume";
		    /**
		     * You should attempt to reconnect and resume immediately
		     */
		    GatewayOpcodes[GatewayOpcodes["Reconnect"] = 7] = "Reconnect";
		    /**
		     * Request information about offline guild members in a large guild
		     */
		    GatewayOpcodes[GatewayOpcodes["RequestGuildMembers"] = 8] = "RequestGuildMembers";
		    /**
		     * The session has been invalidated. You should reconnect and identify/resume accordingly
		     */
		    GatewayOpcodes[GatewayOpcodes["InvalidSession"] = 9] = "InvalidSession";
		    /**
		     * Sent immediately after connecting, contains the `heartbeat_interval` to use
		     */
		    GatewayOpcodes[GatewayOpcodes["Hello"] = 10] = "Hello";
		    /**
		     * Sent in response to receiving a heartbeat to acknowledge that it has been received
		     */
		    GatewayOpcodes[GatewayOpcodes["HeartbeatAck"] = 11] = "HeartbeatAck";
		})(GatewayOpcodes || (exports.GatewayOpcodes = GatewayOpcodes = {}));
		/**
		 * https://discord.com/developers/docs/topics/opcodes-and-status-codes#gateway-gateway-close-event-codes
		 */
		var GatewayCloseCodes;
		(function (GatewayCloseCodes) {
		    /**
		     * We're not sure what went wrong. Try reconnecting?
		     */
		    GatewayCloseCodes[GatewayCloseCodes["UnknownError"] = 4000] = "UnknownError";
		    /**
		     * You sent an invalid Gateway opcode or an invalid payload for an opcode. Don't do that!
		     *
		     * See https://discord.com/developers/docs/topics/gateway-events#payload-structure
		     */
		    GatewayCloseCodes[GatewayCloseCodes["UnknownOpcode"] = 4001] = "UnknownOpcode";
		    /**
		     * You sent an invalid payload to us. Don't do that!
		     *
		     * See https://discord.com/developers/docs/topics/gateway#sending-events
		     */
		    GatewayCloseCodes[GatewayCloseCodes["DecodeError"] = 4002] = "DecodeError";
		    /**
		     * You sent us a payload prior to identifying
		     *
		     * See https://discord.com/developers/docs/topics/gateway-events#identify
		     */
		    GatewayCloseCodes[GatewayCloseCodes["NotAuthenticated"] = 4003] = "NotAuthenticated";
		    /**
		     * The account token sent with your identify payload is incorrect
		     *
		     * See https://discord.com/developers/docs/topics/gateway-events#identify
		     */
		    GatewayCloseCodes[GatewayCloseCodes["AuthenticationFailed"] = 4004] = "AuthenticationFailed";
		    /**
		     * You sent more than one identify payload. Don't do that!
		     */
		    GatewayCloseCodes[GatewayCloseCodes["AlreadyAuthenticated"] = 4005] = "AlreadyAuthenticated";
		    /**
		     * The sequence sent when resuming the session was invalid. Reconnect and start a new session
		     *
		     * See https://discord.com/developers/docs/topics/gateway-events#resume
		     */
		    GatewayCloseCodes[GatewayCloseCodes["InvalidSeq"] = 4007] = "InvalidSeq";
		    /**
		     * Woah nelly! You're sending payloads to us too quickly. Slow it down! You will be disconnected on receiving this
		     */
		    GatewayCloseCodes[GatewayCloseCodes["RateLimited"] = 4008] = "RateLimited";
		    /**
		     * Your session timed out. Reconnect and start a new one
		     */
		    GatewayCloseCodes[GatewayCloseCodes["SessionTimedOut"] = 4009] = "SessionTimedOut";
		    /**
		     * You sent us an invalid shard when identifying
		     *
		     * See https://discord.com/developers/docs/topics/gateway#sharding
		     */
		    GatewayCloseCodes[GatewayCloseCodes["InvalidShard"] = 4010] = "InvalidShard";
		    /**
		     * The session would have handled too many guilds - you are required to shard your connection in order to connect
		     *
		     * See https://discord.com/developers/docs/topics/gateway#sharding
		     */
		    GatewayCloseCodes[GatewayCloseCodes["ShardingRequired"] = 4011] = "ShardingRequired";
		    /**
		     * You sent an invalid version for the gateway
		     */
		    GatewayCloseCodes[GatewayCloseCodes["InvalidAPIVersion"] = 4012] = "InvalidAPIVersion";
		    /**
		     * You sent an invalid intent for a Gateway Intent. You may have incorrectly calculated the bitwise value
		     *
		     * See https://discord.com/developers/docs/topics/gateway#gateway-intents
		     */
		    GatewayCloseCodes[GatewayCloseCodes["InvalidIntents"] = 4013] = "InvalidIntents";
		    /**
		     * You sent a disallowed intent for a Gateway Intent. You may have tried to specify an intent that you have not
		     * enabled or are not whitelisted for
		     *
		     * See https://discord.com/developers/docs/topics/gateway#gateway-intents
		     *
		     * See https://discord.com/developers/docs/topics/gateway#privileged-intents
		     */
		    GatewayCloseCodes[GatewayCloseCodes["DisallowedIntents"] = 4014] = "DisallowedIntents";
		})(GatewayCloseCodes || (exports.GatewayCloseCodes = GatewayCloseCodes = {}));
		/**
		 * https://discord.com/developers/docs/topics/gateway#list-of-intents
		 */
		var GatewayIntentBits;
		(function (GatewayIntentBits) {
		    GatewayIntentBits[GatewayIntentBits["Guilds"] = 1] = "Guilds";
		    GatewayIntentBits[GatewayIntentBits["GuildMembers"] = 2] = "GuildMembers";
		    GatewayIntentBits[GatewayIntentBits["GuildModeration"] = 4] = "GuildModeration";
		    /**
		     * @deprecated This is the old name for {@apilink GatewayIntentBits#GuildModeration}
		     */
		    GatewayIntentBits[GatewayIntentBits["GuildBans"] = 4] = "GuildBans";
		    GatewayIntentBits[GatewayIntentBits["GuildEmojisAndStickers"] = 8] = "GuildEmojisAndStickers";
		    GatewayIntentBits[GatewayIntentBits["GuildIntegrations"] = 16] = "GuildIntegrations";
		    GatewayIntentBits[GatewayIntentBits["GuildWebhooks"] = 32] = "GuildWebhooks";
		    GatewayIntentBits[GatewayIntentBits["GuildInvites"] = 64] = "GuildInvites";
		    GatewayIntentBits[GatewayIntentBits["GuildVoiceStates"] = 128] = "GuildVoiceStates";
		    GatewayIntentBits[GatewayIntentBits["GuildPresences"] = 256] = "GuildPresences";
		    GatewayIntentBits[GatewayIntentBits["GuildMessages"] = 512] = "GuildMessages";
		    GatewayIntentBits[GatewayIntentBits["GuildMessageReactions"] = 1024] = "GuildMessageReactions";
		    GatewayIntentBits[GatewayIntentBits["GuildMessageTyping"] = 2048] = "GuildMessageTyping";
		    GatewayIntentBits[GatewayIntentBits["DirectMessages"] = 4096] = "DirectMessages";
		    GatewayIntentBits[GatewayIntentBits["DirectMessageReactions"] = 8192] = "DirectMessageReactions";
		    GatewayIntentBits[GatewayIntentBits["DirectMessageTyping"] = 16384] = "DirectMessageTyping";
		    GatewayIntentBits[GatewayIntentBits["MessageContent"] = 32768] = "MessageContent";
		    GatewayIntentBits[GatewayIntentBits["GuildScheduledEvents"] = 65536] = "GuildScheduledEvents";
		    GatewayIntentBits[GatewayIntentBits["AutoModerationConfiguration"] = 1048576] = "AutoModerationConfiguration";
		    GatewayIntentBits[GatewayIntentBits["AutoModerationExecution"] = 2097152] = "AutoModerationExecution";
		    GatewayIntentBits[GatewayIntentBits["GuildMessagePolls"] = 16777216] = "GuildMessagePolls";
		    GatewayIntentBits[GatewayIntentBits["DirectMessagePolls"] = 33554432] = "DirectMessagePolls";
		})(GatewayIntentBits || (exports.GatewayIntentBits = GatewayIntentBits = {}));
		/**
		 * https://discord.com/developers/docs/topics/gateway-events#receive-events
		 */
		var GatewayDispatchEvents;
		(function (GatewayDispatchEvents) {
		    GatewayDispatchEvents["ApplicationCommandPermissionsUpdate"] = "APPLICATION_COMMAND_PERMISSIONS_UPDATE";
		    GatewayDispatchEvents["ChannelCreate"] = "CHANNEL_CREATE";
		    GatewayDispatchEvents["ChannelDelete"] = "CHANNEL_DELETE";
		    GatewayDispatchEvents["ChannelPinsUpdate"] = "CHANNEL_PINS_UPDATE";
		    GatewayDispatchEvents["ChannelUpdate"] = "CHANNEL_UPDATE";
		    GatewayDispatchEvents["GuildBanAdd"] = "GUILD_BAN_ADD";
		    GatewayDispatchEvents["GuildBanRemove"] = "GUILD_BAN_REMOVE";
		    GatewayDispatchEvents["GuildCreate"] = "GUILD_CREATE";
		    GatewayDispatchEvents["GuildDelete"] = "GUILD_DELETE";
		    GatewayDispatchEvents["GuildEmojisUpdate"] = "GUILD_EMOJIS_UPDATE";
		    GatewayDispatchEvents["GuildIntegrationsUpdate"] = "GUILD_INTEGRATIONS_UPDATE";
		    GatewayDispatchEvents["GuildMemberAdd"] = "GUILD_MEMBER_ADD";
		    GatewayDispatchEvents["GuildMemberRemove"] = "GUILD_MEMBER_REMOVE";
		    GatewayDispatchEvents["GuildMembersChunk"] = "GUILD_MEMBERS_CHUNK";
		    GatewayDispatchEvents["GuildMemberUpdate"] = "GUILD_MEMBER_UPDATE";
		    GatewayDispatchEvents["GuildRoleCreate"] = "GUILD_ROLE_CREATE";
		    GatewayDispatchEvents["GuildRoleDelete"] = "GUILD_ROLE_DELETE";
		    GatewayDispatchEvents["GuildRoleUpdate"] = "GUILD_ROLE_UPDATE";
		    GatewayDispatchEvents["GuildStickersUpdate"] = "GUILD_STICKERS_UPDATE";
		    GatewayDispatchEvents["GuildUpdate"] = "GUILD_UPDATE";
		    GatewayDispatchEvents["IntegrationCreate"] = "INTEGRATION_CREATE";
		    GatewayDispatchEvents["IntegrationDelete"] = "INTEGRATION_DELETE";
		    GatewayDispatchEvents["IntegrationUpdate"] = "INTEGRATION_UPDATE";
		    GatewayDispatchEvents["InteractionCreate"] = "INTERACTION_CREATE";
		    GatewayDispatchEvents["InviteCreate"] = "INVITE_CREATE";
		    GatewayDispatchEvents["InviteDelete"] = "INVITE_DELETE";
		    GatewayDispatchEvents["MessageCreate"] = "MESSAGE_CREATE";
		    GatewayDispatchEvents["MessageDelete"] = "MESSAGE_DELETE";
		    GatewayDispatchEvents["MessageDeleteBulk"] = "MESSAGE_DELETE_BULK";
		    GatewayDispatchEvents["MessageReactionAdd"] = "MESSAGE_REACTION_ADD";
		    GatewayDispatchEvents["MessageReactionRemove"] = "MESSAGE_REACTION_REMOVE";
		    GatewayDispatchEvents["MessageReactionRemoveAll"] = "MESSAGE_REACTION_REMOVE_ALL";
		    GatewayDispatchEvents["MessageReactionRemoveEmoji"] = "MESSAGE_REACTION_REMOVE_EMOJI";
		    GatewayDispatchEvents["MessageUpdate"] = "MESSAGE_UPDATE";
		    GatewayDispatchEvents["PresenceUpdate"] = "PRESENCE_UPDATE";
		    GatewayDispatchEvents["StageInstanceCreate"] = "STAGE_INSTANCE_CREATE";
		    GatewayDispatchEvents["StageInstanceDelete"] = "STAGE_INSTANCE_DELETE";
		    GatewayDispatchEvents["StageInstanceUpdate"] = "STAGE_INSTANCE_UPDATE";
		    GatewayDispatchEvents["Ready"] = "READY";
		    GatewayDispatchEvents["Resumed"] = "RESUMED";
		    GatewayDispatchEvents["ThreadCreate"] = "THREAD_CREATE";
		    GatewayDispatchEvents["ThreadDelete"] = "THREAD_DELETE";
		    GatewayDispatchEvents["ThreadListSync"] = "THREAD_LIST_SYNC";
		    GatewayDispatchEvents["ThreadMembersUpdate"] = "THREAD_MEMBERS_UPDATE";
		    GatewayDispatchEvents["ThreadMemberUpdate"] = "THREAD_MEMBER_UPDATE";
		    GatewayDispatchEvents["ThreadUpdate"] = "THREAD_UPDATE";
		    GatewayDispatchEvents["TypingStart"] = "TYPING_START";
		    GatewayDispatchEvents["UserUpdate"] = "USER_UPDATE";
		    GatewayDispatchEvents["VoiceServerUpdate"] = "VOICE_SERVER_UPDATE";
		    GatewayDispatchEvents["VoiceStateUpdate"] = "VOICE_STATE_UPDATE";
		    GatewayDispatchEvents["WebhooksUpdate"] = "WEBHOOKS_UPDATE";
		    GatewayDispatchEvents["MessagePollVoteAdd"] = "MESSAGE_POLL_VOTE_ADD";
		    GatewayDispatchEvents["MessagePollVoteRemove"] = "MESSAGE_POLL_VOTE_REMOVE";
		    GatewayDispatchEvents["GuildScheduledEventCreate"] = "GUILD_SCHEDULED_EVENT_CREATE";
		    GatewayDispatchEvents["GuildScheduledEventUpdate"] = "GUILD_SCHEDULED_EVENT_UPDATE";
		    GatewayDispatchEvents["GuildScheduledEventDelete"] = "GUILD_SCHEDULED_EVENT_DELETE";
		    GatewayDispatchEvents["GuildScheduledEventUserAdd"] = "GUILD_SCHEDULED_EVENT_USER_ADD";
		    GatewayDispatchEvents["GuildScheduledEventUserRemove"] = "GUILD_SCHEDULED_EVENT_USER_REMOVE";
		    GatewayDispatchEvents["AutoModerationRuleCreate"] = "AUTO_MODERATION_RULE_CREATE";
		    GatewayDispatchEvents["AutoModerationRuleUpdate"] = "AUTO_MODERATION_RULE_UPDATE";
		    GatewayDispatchEvents["AutoModerationRuleDelete"] = "AUTO_MODERATION_RULE_DELETE";
		    GatewayDispatchEvents["AutoModerationActionExecution"] = "AUTO_MODERATION_ACTION_EXECUTION";
		    GatewayDispatchEvents["GuildAuditLogEntryCreate"] = "GUILD_AUDIT_LOG_ENTRY_CREATE";
		    GatewayDispatchEvents["EntitlementCreate"] = "ENTITLEMENT_CREATE";
		    GatewayDispatchEvents["EntitlementUpdate"] = "ENTITLEMENT_UPDATE";
		    GatewayDispatchEvents["EntitlementDelete"] = "ENTITLEMENT_DELETE";
		    GatewayDispatchEvents["SubscriptionCreate"] = "SUBSCRIPTION_CREATE";
		    GatewayDispatchEvents["SubscriptionUpdate"] = "SUBSCRIPTION_UPDATE";
		    GatewayDispatchEvents["SubscriptionDelete"] = "SUBSCRIPTION_DELETE";
		})(GatewayDispatchEvents || (exports.GatewayDispatchEvents = GatewayDispatchEvents = {}));
		// #endregion Shared
		
	} (v10$k));
	return v10$k;
}

var v10Exports$9 = requireV10$b();
var mod$b = /*@__PURE__*/getDefaultExportFromCjs(v10Exports$9);

const GatewayCloseCodes$1 = mod$b.GatewayCloseCodes;
const GatewayDispatchEvents$1 = mod$b.GatewayDispatchEvents;
const GatewayIntentBits$1 = mod$b.GatewayIntentBits;
const GatewayOpcodes$1 = mod$b.GatewayOpcodes;
const GatewayVersion$1 = mod$b.GatewayVersion;

var v10$j = /*#__PURE__*/Object.freeze({
	__proto__: null,
	GatewayCloseCodes: GatewayCloseCodes$1,
	GatewayDispatchEvents: GatewayDispatchEvents$1,
	GatewayIntentBits: GatewayIntentBits$1,
	GatewayOpcodes: GatewayOpcodes$1,
	GatewayVersion: GatewayVersion$1,
	default: mod$b
});

var require$$0$1 = /*@__PURE__*/getAugmentedNamespace(v10$j);

var globals$3 = {};

var hasRequiredGlobals$1;

function requireGlobals$1 () {
	if (hasRequiredGlobals$1) return globals$3;
	hasRequiredGlobals$1 = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.FormattingPatterns = void 0;
		/**
		 * https://discord.com/developers/docs/reference#message-formatting-formats
		 */
		exports.FormattingPatterns = {
		    /**
		     * Regular expression for matching a user mention, strictly without a nickname
		     *
		     * The `id` group property is present on the `exec` result of this expression
		     */
		    User: /<@(?<id>\d{17,20})>/,
		    /**
		     * Regular expression for matching a user mention, strictly with a nickname
		     *
		     * The `id` group property is present on the `exec` result of this expression
		     *
		     * @deprecated Passing `!` in user mentions is no longer necessary / supported, and future message contents won't have it
		     */
		    UserWithNickname: /<@!(?<id>\d{17,20})>/,
		    /**
		     * Regular expression for matching a user mention, with or without a nickname
		     *
		     * The `id` group property is present on the `exec` result of this expression
		     *
		     * @deprecated Passing `!` in user mentions is no longer necessary / supported, and future message contents won't have it
		     */
		    UserWithOptionalNickname: /<@!?(?<id>\d{17,20})>/,
		    /**
		     * Regular expression for matching a channel mention
		     *
		     * The `id` group property is present on the `exec` result of this expression
		     */
		    Channel: /<#(?<id>\d{17,20})>/,
		    /**
		     * Regular expression for matching a role mention
		     *
		     * The `id` group property is present on the `exec` result of this expression
		     */
		    Role: /<@&(?<id>\d{17,20})>/,
		    /**
		     * Regular expression for matching a application command mention
		     *
		     * The `fullName` (possibly including `name`, `subcommandOrGroup` and `subcommand`) and `id` group properties are present on the `exec` result of this expression
		     */
		    SlashCommand: 
		    // eslint-disable-next-line unicorn/no-unsafe-regex
		    /<\/(?<fullName>(?<name>[-_\p{Letter}\p{Number}\p{sc=Deva}\p{sc=Thai}]{1,32})(?: (?<subcommandOrGroup>[-_\p{Letter}\p{Number}\p{sc=Deva}\p{sc=Thai}]{1,32}))?(?: (?<subcommand>[-_\p{Letter}\p{Number}\p{sc=Deva}\p{sc=Thai}]{1,32}))?):(?<id>\d{17,20})>/u,
		    /**
		     * Regular expression for matching a custom emoji, either static or animated
		     *
		     * The `animated`, `name` and `id` group properties are present on the `exec` result of this expression
		     */
		    Emoji: /<(?<animated>a)?:(?<name>\w{2,32}):(?<id>\d{17,20})>/,
		    /**
		     * Regular expression for matching strictly an animated custom emoji
		     *
		     * The `animated`, `name` and `id` group properties are present on the `exec` result of this expression
		     */
		    AnimatedEmoji: /<(?<animated>a):(?<name>\w{2,32}):(?<id>\d{17,20})>/,
		    /**
		     * Regular expression for matching strictly a static custom emoji
		     *
		     * The `name` and `id` group properties are present on the `exec` result of this expression
		     */
		    StaticEmoji: /<:(?<name>\w{2,32}):(?<id>\d{17,20})>/,
		    /**
		     * Regular expression for matching a timestamp, either default or custom styled
		     *
		     * The `timestamp` and `style` group properties are present on the `exec` result of this expression
		     */
		    // eslint-disable-next-line prefer-named-capture-group
		    Timestamp: /<t:(?<timestamp>-?\d{1,13})(:(?<style>[DFRTdft]))?>/,
		    /**
		     * Regular expression for matching strictly default styled timestamps
		     *
		     * The `timestamp` group property is present on the `exec` result of this expression
		     */
		    DefaultStyledTimestamp: /<t:(?<timestamp>-?\d{1,13})>/,
		    /**
		     * Regular expression for matching strictly custom styled timestamps
		     *
		     * The `timestamp` and `style` group properties are present on the `exec` result of this expression
		     */
		    StyledTimestamp: /<t:(?<timestamp>-?\d{1,13}):(?<style>[DFRTdft])>/,
		    /**
		     * Regular expression for matching a guild navigation mention
		     *
		     * The `type` group property is present on the `exec` result of this expression
		     */
		    GuildNavigation: /<id:(?<type>customize|browse|guide|linked-roles)>/,
		    /**
		     * Regular expression for matching a linked role mention
		     *
		     * The `id` group property is present on the `exec` result of this expression
		     */
		    LinkedRole: /<id:linked-roles:(?<id>\d{17,20})>/,
		};
		/**
		 * Freezes the formatting patterns
		 *
		 * @internal
		 */
		Object.freeze(exports.FormattingPatterns);
		
	} (globals$3));
	return globals$3;
}

var globalsExports$1 = requireGlobals$1();
var mod$a = /*@__PURE__*/getDefaultExportFromCjs(globalsExports$1);

const FormattingPatterns$1 = mod$a.FormattingPatterns;

var globals$2 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	FormattingPatterns: FormattingPatterns$1,
	default: mod$a
});

var require$$1$1 = /*@__PURE__*/getAugmentedNamespace(globals$2);

var v10$i = {};

var common$6 = {};

var hasRequiredCommon$6;

function requireCommon$6 () {
	if (hasRequiredCommon$6) return common$6;
	hasRequiredCommon$6 = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.PermissionFlagsBits = void 0;
		/**
		 * https://discord.com/developers/docs/topics/permissions#permissions-bitwise-permission-flags
		 *
		 * These flags are exported as `BigInt`s and NOT numbers. Wrapping them in `Number()`
		 * may cause issues, try to use BigInts as much as possible or modules that can
		 * replicate them in some way
		 */
		exports.PermissionFlagsBits = {
		    /**
		     * Allows creation of instant invites
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    CreateInstantInvite: 1n << 0n,
		    /**
		     * Allows kicking members
		     */
		    // eslint-disable-next-line sonarjs/no-identical-expressions
		    KickMembers: 1n << 1n,
		    /**
		     * Allows banning members
		     */
		    BanMembers: 1n << 2n,
		    /**
		     * Allows all permissions and bypasses channel permission overwrites
		     */
		    Administrator: 1n << 3n,
		    /**
		     * Allows management and editing of channels
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    ManageChannels: 1n << 4n,
		    /**
		     * Allows management and editing of the guild
		     */
		    ManageGuild: 1n << 5n,
		    /**
		     * Allows for the addition of reactions to messages
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    AddReactions: 1n << 6n,
		    /**
		     * Allows for viewing of audit logs
		     */
		    ViewAuditLog: 1n << 7n,
		    /**
		     * Allows for using priority speaker in a voice channel
		     *
		     * Applies to channel types: Voice
		     */
		    PrioritySpeaker: 1n << 8n,
		    /**
		     * Allows the user to go live
		     *
		     * Applies to channel types: Voice, Stage
		     */
		    Stream: 1n << 9n,
		    /**
		     * Allows guild members to view a channel, which includes reading messages in text channels and joining voice channels
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    ViewChannel: 1n << 10n,
		    /**
		     * Allows for sending messages in a channel and creating threads in a forum
		     * (does not allow sending messages in threads)
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    SendMessages: 1n << 11n,
		    /**
		     * Allows for sending of `/tts` messages
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    SendTTSMessages: 1n << 12n,
		    /**
		     * Allows for deletion of other users messages
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    ManageMessages: 1n << 13n,
		    /**
		     * Links sent by users with this permission will be auto-embedded
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    EmbedLinks: 1n << 14n,
		    /**
		     * Allows for uploading images and files
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    AttachFiles: 1n << 15n,
		    /**
		     * Allows for reading of message history
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    ReadMessageHistory: 1n << 16n,
		    /**
		     * Allows for using the `@everyone` tag to notify all users in a channel,
		     * and the `@here` tag to notify all online users in a channel
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    MentionEveryone: 1n << 17n,
		    /**
		     * Allows the usage of custom emojis from other servers
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    UseExternalEmojis: 1n << 18n,
		    /**
		     * Allows for viewing guild insights
		     */
		    ViewGuildInsights: 1n << 19n,
		    /**
		     * Allows for joining of a voice channel
		     *
		     * Applies to channel types: Voice, Stage
		     */
		    Connect: 1n << 20n,
		    /**
		     * Allows for speaking in a voice channel
		     *
		     * Applies to channel types: Voice
		     */
		    Speak: 1n << 21n,
		    /**
		     * Allows for muting members in a voice channel
		     *
		     * Applies to channel types: Voice, Stage
		     */
		    MuteMembers: 1n << 22n,
		    /**
		     * Allows for deafening of members in a voice channel
		     *
		     * Applies to channel types: Voice
		     */
		    DeafenMembers: 1n << 23n,
		    /**
		     * Allows for moving of members between voice channels
		     *
		     * Applies to channel types: Voice, Stage
		     */
		    MoveMembers: 1n << 24n,
		    /**
		     * Allows for using voice-activity-detection in a voice channel
		     *
		     * Applies to channel types: Voice
		     */
		    UseVAD: 1n << 25n,
		    /**
		     * Allows for modification of own nickname
		     */
		    ChangeNickname: 1n << 26n,
		    /**
		     * Allows for modification of other users nicknames
		     */
		    ManageNicknames: 1n << 27n,
		    /**
		     * Allows management and editing of roles
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    ManageRoles: 1n << 28n,
		    /**
		     * Allows management and editing of webhooks
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    ManageWebhooks: 1n << 29n,
		    /**
		     * Allows management and editing of emojis, stickers, and soundboard sounds
		     *
		     * @deprecated This is the old name for {@apilink PermissionFlagsBits#ManageGuildExpressions}
		     */
		    ManageEmojisAndStickers: 1n << 30n,
		    /**
		     * Allows for editing and deleting emojis, stickers, and soundboard sounds created by all users
		     */
		    ManageGuildExpressions: 1n << 30n,
		    /**
		     * Allows members to use application commands, including slash commands and context menu commands
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    UseApplicationCommands: 1n << 31n,
		    /**
		     * Allows for requesting to speak in stage channels
		     *
		     * Applies to channel types: Stage
		     */
		    RequestToSpeak: 1n << 32n,
		    /**
		     * Allows for editing and deleting scheduled events created by all users
		     *
		     * Applies to channel types: Voice, Stage
		     */
		    ManageEvents: 1n << 33n,
		    /**
		     * Allows for deleting and archiving threads, and viewing all private threads
		     *
		     * Applies to channel types: Text
		     */
		    ManageThreads: 1n << 34n,
		    /**
		     * Allows for creating public and announcement threads
		     *
		     * Applies to channel types: Text
		     */
		    CreatePublicThreads: 1n << 35n,
		    /**
		     * Allows for creating private threads
		     *
		     * Applies to channel types: Text
		     */
		    CreatePrivateThreads: 1n << 36n,
		    /**
		     * Allows the usage of custom stickers from other servers
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    UseExternalStickers: 1n << 37n,
		    /**
		     * Allows for sending messages in threads
		     *
		     * Applies to channel types: Text
		     */
		    SendMessagesInThreads: 1n << 38n,
		    /**
		     * Allows for using Activities (applications with the {@apilink ApplicationFlags.Embedded} flag) in a voice channel
		     *
		     * Applies to channel types: Voice
		     */
		    UseEmbeddedActivities: 1n << 39n,
		    /**
		     * Allows for timing out users to prevent them from sending or reacting to messages in chat and threads,
		     * and from speaking in voice and stage channels
		     */
		    ModerateMembers: 1n << 40n,
		    /**
		     * Allows for viewing role subscription insights
		     */
		    ViewCreatorMonetizationAnalytics: 1n << 41n,
		    /**
		     * Allows for using soundboard in a voice channel
		     *
		     * Applies to channel types: Voice
		     */
		    UseSoundboard: 1n << 42n,
		    /**
		     * Allows for creating emojis, stickers, and soundboard sounds, and editing and deleting those created by the current user
		     */
		    CreateGuildExpressions: 1n << 43n,
		    /**
		     * Allows for creating scheduled events, and editing and deleting those created by the current user
		     *
		     * Applies to channel types: Voice, Stage
		     */
		    CreateEvents: 1n << 44n,
		    /**
		     * Allows the usage of custom soundboard sounds from other servers
		     *
		     * Applies to channel types: Voice
		     */
		    UseExternalSounds: 1n << 45n,
		    /**
		     * Allows sending voice messages
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    SendVoiceMessages: 1n << 46n,
		    /**
		     * Allows sending polls
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    SendPolls: 1n << 49n,
		    /**
		     * Allows user-installed apps to send public responses. When disabled, users will still be allowed to use their apps but the responses will be ephemeral. This only applies to apps not also installed to the server
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    UseExternalApps: 1n << 50n,
		};
		/**
		 * Freeze the object of bits, preventing any modifications to it
		 *
		 * @internal
		 */
		Object.freeze(exports.PermissionFlagsBits);
		
	} (common$6));
	return common$6;
}

var application$3 = {};

var hasRequiredApplication$4;

function requireApplication$4 () {
	if (hasRequiredApplication$4) return application$3;
	hasRequiredApplication$4 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/application
	 */
	Object.defineProperty(application$3, "__esModule", { value: true });
	application$3.ApplicationRoleConnectionMetadataType = application$3.ApplicationFlags = void 0;
	/**
	 * https://discord.com/developers/docs/resources/application#application-object-application-flags
	 */
	var ApplicationFlags;
	(function (ApplicationFlags) {
	    /**
	     * @unstable This application flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ApplicationFlags[ApplicationFlags["EmbeddedReleased"] = 2] = "EmbeddedReleased";
	    /**
	     * @unstable This application flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ApplicationFlags[ApplicationFlags["ManagedEmoji"] = 4] = "ManagedEmoji";
	    /**
	     * @unstable This application flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ApplicationFlags[ApplicationFlags["EmbeddedIAP"] = 8] = "EmbeddedIAP";
	    /**
	     * @unstable This application flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ApplicationFlags[ApplicationFlags["GroupDMCreate"] = 16] = "GroupDMCreate";
	    /**
	     * Indicates if an app uses the Auto Moderation API
	     */
	    ApplicationFlags[ApplicationFlags["ApplicationAutoModerationRuleCreateBadge"] = 64] = "ApplicationAutoModerationRuleCreateBadge";
	    /**
	     * @unstable This application flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ApplicationFlags[ApplicationFlags["RPCHasConnected"] = 2048] = "RPCHasConnected";
	    /**
	     * Intent required for bots in 100 or more servers to receive `presence_update` events
	     */
	    ApplicationFlags[ApplicationFlags["GatewayPresence"] = 4096] = "GatewayPresence";
	    /**
	     * Intent required for bots in under 100 servers to receive `presence_update` events, found in Bot Settings
	     */
	    ApplicationFlags[ApplicationFlags["GatewayPresenceLimited"] = 8192] = "GatewayPresenceLimited";
	    /**
	     * Intent required for bots in 100 or more servers to receive member-related events like `guild_member_add`.
	     * See list of member-related events [under `GUILD_MEMBERS`](https://discord.com/developers/docs/topics/gateway#list-of-intents)
	     */
	    ApplicationFlags[ApplicationFlags["GatewayGuildMembers"] = 16384] = "GatewayGuildMembers";
	    /**
	     * Intent required for bots in under 100 servers to receive member-related events like `guild_member_add`, found in Bot Settings.
	     * See list of member-related events [under `GUILD_MEMBERS`](https://discord.com/developers/docs/topics/gateway#list-of-intents)
	     */
	    ApplicationFlags[ApplicationFlags["GatewayGuildMembersLimited"] = 32768] = "GatewayGuildMembersLimited";
	    /**
	     * Indicates unusual growth of an app that prevents verification
	     */
	    ApplicationFlags[ApplicationFlags["VerificationPendingGuildLimit"] = 65536] = "VerificationPendingGuildLimit";
	    /**
	     * Indicates if an app is embedded within the Discord client (currently unavailable publicly)
	     */
	    ApplicationFlags[ApplicationFlags["Embedded"] = 131072] = "Embedded";
	    /**
	     * Intent required for bots in 100 or more servers to receive [message content](https://support-dev.discord.com/hc/en-us/articles/4404772028055)
	     */
	    ApplicationFlags[ApplicationFlags["GatewayMessageContent"] = 262144] = "GatewayMessageContent";
	    /**
	     * Intent required for bots in under 100 servers to receive [message content](https://support-dev.discord.com/hc/en-us/articles/4404772028055),
	     * found in Bot Settings
	     */
	    ApplicationFlags[ApplicationFlags["GatewayMessageContentLimited"] = 524288] = "GatewayMessageContentLimited";
	    /**
	     * @unstable This application flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ApplicationFlags[ApplicationFlags["EmbeddedFirstParty"] = 1048576] = "EmbeddedFirstParty";
	    /**
	     * Indicates if an app has registered global [application commands](https://discord.com/developers/docs/interactions/application-commands)
	     */
	    ApplicationFlags[ApplicationFlags["ApplicationCommandBadge"] = 8388608] = "ApplicationCommandBadge";
	})(ApplicationFlags || (application$3.ApplicationFlags = ApplicationFlags = {}));
	/**
	 * https://discord.com/developers/docs/resources/application-role-connection-metadata#application-role-connection-metadata-object-application-role-connection-metadata-type
	 */
	var ApplicationRoleConnectionMetadataType;
	(function (ApplicationRoleConnectionMetadataType) {
	    /**
	     * The metadata value (`integer`) is less than or equal to the guild's configured value (`integer`)
	     */
	    ApplicationRoleConnectionMetadataType[ApplicationRoleConnectionMetadataType["IntegerLessThanOrEqual"] = 1] = "IntegerLessThanOrEqual";
	    /**
	     * The metadata value (`integer`) is greater than or equal to the guild's configured value (`integer`)
	     */
	    ApplicationRoleConnectionMetadataType[ApplicationRoleConnectionMetadataType["IntegerGreaterThanOrEqual"] = 2] = "IntegerGreaterThanOrEqual";
	    /**
	     * The metadata value (`integer`) is equal to the guild's configured value (`integer`)
	     */
	    ApplicationRoleConnectionMetadataType[ApplicationRoleConnectionMetadataType["IntegerEqual"] = 3] = "IntegerEqual";
	    /**
	     * The metadata value (`integer`) is not equal to the guild's configured value (`integer`)
	     */
	    ApplicationRoleConnectionMetadataType[ApplicationRoleConnectionMetadataType["IntegerNotEqual"] = 4] = "IntegerNotEqual";
	    /**
	     * The metadata value (`ISO8601 string`) is less than or equal to the guild's configured value (`integer`; days before current date)
	     */
	    ApplicationRoleConnectionMetadataType[ApplicationRoleConnectionMetadataType["DatetimeLessThanOrEqual"] = 5] = "DatetimeLessThanOrEqual";
	    /**
	     * The metadata value (`ISO8601 string`) is greater than or equal to the guild's configured value (`integer`; days before current date)
	     */
	    ApplicationRoleConnectionMetadataType[ApplicationRoleConnectionMetadataType["DatetimeGreaterThanOrEqual"] = 6] = "DatetimeGreaterThanOrEqual";
	    /**
	     * The metadata value (`integer`) is equal to the guild's configured value (`integer`; `1`)
	     */
	    ApplicationRoleConnectionMetadataType[ApplicationRoleConnectionMetadataType["BooleanEqual"] = 7] = "BooleanEqual";
	    /**
	     * The metadata value (`integer`) is not equal to the guild's configured value (`integer`; `1`)
	     */
	    ApplicationRoleConnectionMetadataType[ApplicationRoleConnectionMetadataType["BooleanNotEqual"] = 8] = "BooleanNotEqual";
	})(ApplicationRoleConnectionMetadataType || (application$3.ApplicationRoleConnectionMetadataType = ApplicationRoleConnectionMetadataType = {}));
	
	return application$3;
}

var auditLog$3 = {};

var hasRequiredAuditLog$3;

function requireAuditLog$3 () {
	if (hasRequiredAuditLog$3) return auditLog$3;
	hasRequiredAuditLog$3 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/audit-log
	 */
	Object.defineProperty(auditLog$3, "__esModule", { value: true });
	auditLog$3.AuditLogOptionsType = auditLog$3.AuditLogEvent = void 0;
	/**
	 * https://discord.com/developers/docs/resources/audit-log#audit-log-entry-object-audit-log-events
	 */
	var AuditLogEvent;
	(function (AuditLogEvent) {
	    AuditLogEvent[AuditLogEvent["GuildUpdate"] = 1] = "GuildUpdate";
	    AuditLogEvent[AuditLogEvent["ChannelCreate"] = 10] = "ChannelCreate";
	    AuditLogEvent[AuditLogEvent["ChannelUpdate"] = 11] = "ChannelUpdate";
	    AuditLogEvent[AuditLogEvent["ChannelDelete"] = 12] = "ChannelDelete";
	    AuditLogEvent[AuditLogEvent["ChannelOverwriteCreate"] = 13] = "ChannelOverwriteCreate";
	    AuditLogEvent[AuditLogEvent["ChannelOverwriteUpdate"] = 14] = "ChannelOverwriteUpdate";
	    AuditLogEvent[AuditLogEvent["ChannelOverwriteDelete"] = 15] = "ChannelOverwriteDelete";
	    AuditLogEvent[AuditLogEvent["MemberKick"] = 20] = "MemberKick";
	    AuditLogEvent[AuditLogEvent["MemberPrune"] = 21] = "MemberPrune";
	    AuditLogEvent[AuditLogEvent["MemberBanAdd"] = 22] = "MemberBanAdd";
	    AuditLogEvent[AuditLogEvent["MemberBanRemove"] = 23] = "MemberBanRemove";
	    AuditLogEvent[AuditLogEvent["MemberUpdate"] = 24] = "MemberUpdate";
	    AuditLogEvent[AuditLogEvent["MemberRoleUpdate"] = 25] = "MemberRoleUpdate";
	    AuditLogEvent[AuditLogEvent["MemberMove"] = 26] = "MemberMove";
	    AuditLogEvent[AuditLogEvent["MemberDisconnect"] = 27] = "MemberDisconnect";
	    AuditLogEvent[AuditLogEvent["BotAdd"] = 28] = "BotAdd";
	    AuditLogEvent[AuditLogEvent["RoleCreate"] = 30] = "RoleCreate";
	    AuditLogEvent[AuditLogEvent["RoleUpdate"] = 31] = "RoleUpdate";
	    AuditLogEvent[AuditLogEvent["RoleDelete"] = 32] = "RoleDelete";
	    AuditLogEvent[AuditLogEvent["InviteCreate"] = 40] = "InviteCreate";
	    AuditLogEvent[AuditLogEvent["InviteUpdate"] = 41] = "InviteUpdate";
	    AuditLogEvent[AuditLogEvent["InviteDelete"] = 42] = "InviteDelete";
	    AuditLogEvent[AuditLogEvent["WebhookCreate"] = 50] = "WebhookCreate";
	    AuditLogEvent[AuditLogEvent["WebhookUpdate"] = 51] = "WebhookUpdate";
	    AuditLogEvent[AuditLogEvent["WebhookDelete"] = 52] = "WebhookDelete";
	    AuditLogEvent[AuditLogEvent["EmojiCreate"] = 60] = "EmojiCreate";
	    AuditLogEvent[AuditLogEvent["EmojiUpdate"] = 61] = "EmojiUpdate";
	    AuditLogEvent[AuditLogEvent["EmojiDelete"] = 62] = "EmojiDelete";
	    AuditLogEvent[AuditLogEvent["MessageDelete"] = 72] = "MessageDelete";
	    AuditLogEvent[AuditLogEvent["MessageBulkDelete"] = 73] = "MessageBulkDelete";
	    AuditLogEvent[AuditLogEvent["MessagePin"] = 74] = "MessagePin";
	    AuditLogEvent[AuditLogEvent["MessageUnpin"] = 75] = "MessageUnpin";
	    AuditLogEvent[AuditLogEvent["IntegrationCreate"] = 80] = "IntegrationCreate";
	    AuditLogEvent[AuditLogEvent["IntegrationUpdate"] = 81] = "IntegrationUpdate";
	    AuditLogEvent[AuditLogEvent["IntegrationDelete"] = 82] = "IntegrationDelete";
	    AuditLogEvent[AuditLogEvent["StageInstanceCreate"] = 83] = "StageInstanceCreate";
	    AuditLogEvent[AuditLogEvent["StageInstanceUpdate"] = 84] = "StageInstanceUpdate";
	    AuditLogEvent[AuditLogEvent["StageInstanceDelete"] = 85] = "StageInstanceDelete";
	    AuditLogEvent[AuditLogEvent["StickerCreate"] = 90] = "StickerCreate";
	    AuditLogEvent[AuditLogEvent["StickerUpdate"] = 91] = "StickerUpdate";
	    AuditLogEvent[AuditLogEvent["StickerDelete"] = 92] = "StickerDelete";
	    AuditLogEvent[AuditLogEvent["GuildScheduledEventCreate"] = 100] = "GuildScheduledEventCreate";
	    AuditLogEvent[AuditLogEvent["GuildScheduledEventUpdate"] = 101] = "GuildScheduledEventUpdate";
	    AuditLogEvent[AuditLogEvent["GuildScheduledEventDelete"] = 102] = "GuildScheduledEventDelete";
	    AuditLogEvent[AuditLogEvent["ThreadCreate"] = 110] = "ThreadCreate";
	    AuditLogEvent[AuditLogEvent["ThreadUpdate"] = 111] = "ThreadUpdate";
	    AuditLogEvent[AuditLogEvent["ThreadDelete"] = 112] = "ThreadDelete";
	    AuditLogEvent[AuditLogEvent["ApplicationCommandPermissionUpdate"] = 121] = "ApplicationCommandPermissionUpdate";
	    AuditLogEvent[AuditLogEvent["AutoModerationRuleCreate"] = 140] = "AutoModerationRuleCreate";
	    AuditLogEvent[AuditLogEvent["AutoModerationRuleUpdate"] = 141] = "AutoModerationRuleUpdate";
	    AuditLogEvent[AuditLogEvent["AutoModerationRuleDelete"] = 142] = "AutoModerationRuleDelete";
	    AuditLogEvent[AuditLogEvent["AutoModerationBlockMessage"] = 143] = "AutoModerationBlockMessage";
	    AuditLogEvent[AuditLogEvent["AutoModerationFlagToChannel"] = 144] = "AutoModerationFlagToChannel";
	    AuditLogEvent[AuditLogEvent["AutoModerationUserCommunicationDisabled"] = 145] = "AutoModerationUserCommunicationDisabled";
	    AuditLogEvent[AuditLogEvent["CreatorMonetizationRequestCreated"] = 150] = "CreatorMonetizationRequestCreated";
	    AuditLogEvent[AuditLogEvent["CreatorMonetizationTermsAccepted"] = 151] = "CreatorMonetizationTermsAccepted";
	    AuditLogEvent[AuditLogEvent["OnboardingPromptCreate"] = 163] = "OnboardingPromptCreate";
	    AuditLogEvent[AuditLogEvent["OnboardingPromptUpdate"] = 164] = "OnboardingPromptUpdate";
	    AuditLogEvent[AuditLogEvent["OnboardingPromptDelete"] = 165] = "OnboardingPromptDelete";
	    AuditLogEvent[AuditLogEvent["OnboardingCreate"] = 166] = "OnboardingCreate";
	    AuditLogEvent[AuditLogEvent["OnboardingUpdate"] = 167] = "OnboardingUpdate";
	    AuditLogEvent[AuditLogEvent["HomeSettingsCreate"] = 190] = "HomeSettingsCreate";
	    AuditLogEvent[AuditLogEvent["HomeSettingsUpdate"] = 191] = "HomeSettingsUpdate";
	})(AuditLogEvent || (auditLog$3.AuditLogEvent = AuditLogEvent = {}));
	var AuditLogOptionsType;
	(function (AuditLogOptionsType) {
	    AuditLogOptionsType["Role"] = "0";
	    AuditLogOptionsType["Member"] = "1";
	})(AuditLogOptionsType || (auditLog$3.AuditLogOptionsType = AuditLogOptionsType = {}));
	
	return auditLog$3;
}

var autoModeration$3 = {};

var hasRequiredAutoModeration$3;

function requireAutoModeration$3 () {
	if (hasRequiredAutoModeration$3) return autoModeration$3;
	hasRequiredAutoModeration$3 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/auto-moderation
	 */
	Object.defineProperty(autoModeration$3, "__esModule", { value: true });
	autoModeration$3.AutoModerationActionType = autoModeration$3.AutoModerationRuleEventType = autoModeration$3.AutoModerationRuleKeywordPresetType = autoModeration$3.AutoModerationRuleTriggerType = void 0;
	/**
	 * https://discord.com/developers/docs/resources/auto-moderation#auto-moderation-rule-object-trigger-types
	 */
	var AutoModerationRuleTriggerType;
	(function (AutoModerationRuleTriggerType) {
	    /**
	     * Check if content contains words from a user defined list of keywords (Maximum of 6 per guild)
	     */
	    AutoModerationRuleTriggerType[AutoModerationRuleTriggerType["Keyword"] = 1] = "Keyword";
	    /**
	     * Check if content represents generic spam (Maximum of 1 per guild)
	     */
	    AutoModerationRuleTriggerType[AutoModerationRuleTriggerType["Spam"] = 3] = "Spam";
	    /**
	     * Check if content contains words from internal pre-defined wordsets (Maximum of 1 per guild)
	     */
	    AutoModerationRuleTriggerType[AutoModerationRuleTriggerType["KeywordPreset"] = 4] = "KeywordPreset";
	    /**
	     * Check if content contains more mentions than allowed (Maximum of 1 per guild)
	     */
	    AutoModerationRuleTriggerType[AutoModerationRuleTriggerType["MentionSpam"] = 5] = "MentionSpam";
	    /**
	     * Check if member profile contains words from a user defined list of keywords (Maximum of 1 per guild)
	     */
	    AutoModerationRuleTriggerType[AutoModerationRuleTriggerType["MemberProfile"] = 6] = "MemberProfile";
	})(AutoModerationRuleTriggerType || (autoModeration$3.AutoModerationRuleTriggerType = AutoModerationRuleTriggerType = {}));
	/**
	 * https://discord.com/developers/docs/resources/auto-moderation#auto-moderation-rule-object-keyword-preset-types
	 */
	var AutoModerationRuleKeywordPresetType;
	(function (AutoModerationRuleKeywordPresetType) {
	    /**
	     * Words that may be considered forms of swearing or cursing
	     */
	    AutoModerationRuleKeywordPresetType[AutoModerationRuleKeywordPresetType["Profanity"] = 1] = "Profanity";
	    /**
	     * Words that refer to sexually explicit behavior or activity
	     */
	    AutoModerationRuleKeywordPresetType[AutoModerationRuleKeywordPresetType["SexualContent"] = 2] = "SexualContent";
	    /**
	     * Personal insults or words that may be considered hate speech
	     */
	    AutoModerationRuleKeywordPresetType[AutoModerationRuleKeywordPresetType["Slurs"] = 3] = "Slurs";
	})(AutoModerationRuleKeywordPresetType || (autoModeration$3.AutoModerationRuleKeywordPresetType = AutoModerationRuleKeywordPresetType = {}));
	/**
	 * https://discord.com/developers/docs/resources/auto-moderation#auto-moderation-rule-object-event-types
	 */
	var AutoModerationRuleEventType;
	(function (AutoModerationRuleEventType) {
	    /**
	     * When a member sends or edits a message in the guild
	     */
	    AutoModerationRuleEventType[AutoModerationRuleEventType["MessageSend"] = 1] = "MessageSend";
	    /**
	     * When a member edits their profile
	     */
	    AutoModerationRuleEventType[AutoModerationRuleEventType["MemberUpdate"] = 2] = "MemberUpdate";
	})(AutoModerationRuleEventType || (autoModeration$3.AutoModerationRuleEventType = AutoModerationRuleEventType = {}));
	/**
	 * https://discord.com/developers/docs/resources/auto-moderation#auto-moderation-action-object-action-types
	 */
	var AutoModerationActionType;
	(function (AutoModerationActionType) {
	    /**
	     * Blocks a member's message and prevents it from being posted.
	     * A custom explanation can be specified and shown to members whenever their message is blocked
	     */
	    AutoModerationActionType[AutoModerationActionType["BlockMessage"] = 1] = "BlockMessage";
	    /**
	     * Logs user content to a specified channel
	     */
	    AutoModerationActionType[AutoModerationActionType["SendAlertMessage"] = 2] = "SendAlertMessage";
	    /**
	     * Timeout user for specified duration, this action type can be set if the bot has `MODERATE_MEMBERS` permission
	     */
	    AutoModerationActionType[AutoModerationActionType["Timeout"] = 3] = "Timeout";
	    /**
	     * Prevents a member from using text, voice, or other interactions
	     */
	    AutoModerationActionType[AutoModerationActionType["BlockMemberInteraction"] = 4] = "BlockMemberInteraction";
	})(AutoModerationActionType || (autoModeration$3.AutoModerationActionType = AutoModerationActionType = {}));
	
	return autoModeration$3;
}

var channel$5 = {};

var hasRequiredChannel$5;

function requireChannel$5 () {
	if (hasRequiredChannel$5) return channel$5;
	hasRequiredChannel$5 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/channel
	 */
	Object.defineProperty(channel$5, "__esModule", { value: true });
	channel$5.ChannelFlags = channel$5.SelectMenuDefaultValueType = channel$5.TextInputStyle = channel$5.ButtonStyle = channel$5.ComponentType = channel$5.AllowedMentionsTypes = channel$5.AttachmentFlags = channel$5.EmbedType = channel$5.ThreadMemberFlags = channel$5.ThreadAutoArchiveDuration = channel$5.OverwriteType = channel$5.MessageFlags = channel$5.MessageReferenceType = channel$5.MessageActivityType = channel$5.MessageType = channel$5.VideoQualityMode = channel$5.ChannelType = channel$5.ForumLayoutType = channel$5.SortOrderType = void 0;
	/**
	 * https://discord.com/developers/docs/resources/channel/#channel-object-sort-order-types
	 */
	var SortOrderType;
	(function (SortOrderType) {
	    /**
	     * Sort forum posts by activity
	     */
	    SortOrderType[SortOrderType["LatestActivity"] = 0] = "LatestActivity";
	    /**
	     * Sort forum posts by creation time (from most recent to oldest)
	     */
	    SortOrderType[SortOrderType["CreationDate"] = 1] = "CreationDate";
	})(SortOrderType || (channel$5.SortOrderType = SortOrderType = {}));
	/**
	 * https://discord.com/developers/docs/resources/channel/#channel-object-forum-layout-types
	 */
	var ForumLayoutType;
	(function (ForumLayoutType) {
	    /**
	     * No default has been set for forum channel
	     */
	    ForumLayoutType[ForumLayoutType["NotSet"] = 0] = "NotSet";
	    /**
	     * Display posts as a list
	     */
	    ForumLayoutType[ForumLayoutType["ListView"] = 1] = "ListView";
	    /**
	     * Display posts as a collection of tiles
	     */
	    ForumLayoutType[ForumLayoutType["GalleryView"] = 2] = "GalleryView";
	})(ForumLayoutType || (channel$5.ForumLayoutType = ForumLayoutType = {}));
	/**
	 * https://discord.com/developers/docs/resources/channel#channel-object-channel-types
	 */
	var ChannelType;
	(function (ChannelType) {
	    /**
	     * A text channel within a guild
	     */
	    ChannelType[ChannelType["GuildText"] = 0] = "GuildText";
	    /**
	     * A direct message between users
	     */
	    ChannelType[ChannelType["DM"] = 1] = "DM";
	    /**
	     * A voice channel within a guild
	     */
	    ChannelType[ChannelType["GuildVoice"] = 2] = "GuildVoice";
	    /**
	     * A direct message between multiple users
	     */
	    ChannelType[ChannelType["GroupDM"] = 3] = "GroupDM";
	    /**
	     * An organizational category that contains up to 50 channels
	     *
	     * See https://support.discord.com/hc/articles/115001580171
	     */
	    ChannelType[ChannelType["GuildCategory"] = 4] = "GuildCategory";
	    /**
	     * A channel that users can follow and crosspost into their own guild
	     *
	     * See https://support.discord.com/hc/articles/360032008192
	     */
	    ChannelType[ChannelType["GuildAnnouncement"] = 5] = "GuildAnnouncement";
	    /**
	     * A temporary sub-channel within a Guild Announcement channel
	     */
	    ChannelType[ChannelType["AnnouncementThread"] = 10] = "AnnouncementThread";
	    /**
	     * A temporary sub-channel within a Guild Text or Guild Forum channel
	     */
	    ChannelType[ChannelType["PublicThread"] = 11] = "PublicThread";
	    /**
	     * A temporary sub-channel within a Guild Text channel that is only viewable by those invited and those with the Manage Threads permission
	     */
	    ChannelType[ChannelType["PrivateThread"] = 12] = "PrivateThread";
	    /**
	     * A voice channel for hosting events with an audience
	     *
	     * See https://support.discord.com/hc/articles/1500005513722
	     */
	    ChannelType[ChannelType["GuildStageVoice"] = 13] = "GuildStageVoice";
	    /**
	     * The channel in a Student Hub containing the listed servers
	     *
	     * See https://support.discord.com/hc/articles/4406046651927
	     */
	    ChannelType[ChannelType["GuildDirectory"] = 14] = "GuildDirectory";
	    /**
	     * A channel that can only contain threads
	     */
	    ChannelType[ChannelType["GuildForum"] = 15] = "GuildForum";
	    /**
	     * A channel like forum channels but contains media for server subscriptions
	     *
	     * See https://creator-support.discord.com/hc/articles/14346342766743
	     */
	    ChannelType[ChannelType["GuildMedia"] = 16] = "GuildMedia";
	    // EVERYTHING BELOW THIS LINE SHOULD BE OLD NAMES FOR RENAMED ENUM MEMBERS //
	    /**
	     * A channel that users can follow and crosspost into their own guild
	     *
	     * @deprecated This is the old name for {@apilink ChannelType#GuildAnnouncement}
	     *
	     * See https://support.discord.com/hc/articles/360032008192
	     */
	    ChannelType[ChannelType["GuildNews"] = 5] = "GuildNews";
	    /**
	     * A temporary sub-channel within a Guild Announcement channel
	     *
	     * @deprecated This is the old name for {@apilink ChannelType#AnnouncementThread}
	     */
	    // eslint-disable-next-line @typescript-eslint/no-duplicate-enum-values
	    ChannelType[ChannelType["GuildNewsThread"] = 10] = "GuildNewsThread";
	    /**
	     * A temporary sub-channel within a Guild Text channel
	     *
	     * @deprecated This is the old name for {@apilink ChannelType#PublicThread}
	     */
	    ChannelType[ChannelType["GuildPublicThread"] = 11] = "GuildPublicThread";
	    /**
	     * A temporary sub-channel within a Guild Text channel that is only viewable by those invited and those with the Manage Threads permission
	     *
	     * @deprecated This is the old name for {@apilink ChannelType#PrivateThread}
	     */
	    ChannelType[ChannelType["GuildPrivateThread"] = 12] = "GuildPrivateThread";
	})(ChannelType || (channel$5.ChannelType = ChannelType = {}));
	var VideoQualityMode;
	(function (VideoQualityMode) {
	    /**
	     * Discord chooses the quality for optimal performance
	     */
	    VideoQualityMode[VideoQualityMode["Auto"] = 1] = "Auto";
	    /**
	     * 720p
	     */
	    VideoQualityMode[VideoQualityMode["Full"] = 2] = "Full";
	})(VideoQualityMode || (channel$5.VideoQualityMode = VideoQualityMode = {}));
	/**
	 * https://discord.com/developers/docs/resources/channel#message-object-message-types
	 */
	var MessageType;
	(function (MessageType) {
	    MessageType[MessageType["Default"] = 0] = "Default";
	    MessageType[MessageType["RecipientAdd"] = 1] = "RecipientAdd";
	    MessageType[MessageType["RecipientRemove"] = 2] = "RecipientRemove";
	    MessageType[MessageType["Call"] = 3] = "Call";
	    MessageType[MessageType["ChannelNameChange"] = 4] = "ChannelNameChange";
	    MessageType[MessageType["ChannelIconChange"] = 5] = "ChannelIconChange";
	    MessageType[MessageType["ChannelPinnedMessage"] = 6] = "ChannelPinnedMessage";
	    MessageType[MessageType["UserJoin"] = 7] = "UserJoin";
	    MessageType[MessageType["GuildBoost"] = 8] = "GuildBoost";
	    MessageType[MessageType["GuildBoostTier1"] = 9] = "GuildBoostTier1";
	    MessageType[MessageType["GuildBoostTier2"] = 10] = "GuildBoostTier2";
	    MessageType[MessageType["GuildBoostTier3"] = 11] = "GuildBoostTier3";
	    MessageType[MessageType["ChannelFollowAdd"] = 12] = "ChannelFollowAdd";
	    MessageType[MessageType["GuildDiscoveryDisqualified"] = 14] = "GuildDiscoveryDisqualified";
	    MessageType[MessageType["GuildDiscoveryRequalified"] = 15] = "GuildDiscoveryRequalified";
	    MessageType[MessageType["GuildDiscoveryGracePeriodInitialWarning"] = 16] = "GuildDiscoveryGracePeriodInitialWarning";
	    MessageType[MessageType["GuildDiscoveryGracePeriodFinalWarning"] = 17] = "GuildDiscoveryGracePeriodFinalWarning";
	    MessageType[MessageType["ThreadCreated"] = 18] = "ThreadCreated";
	    MessageType[MessageType["Reply"] = 19] = "Reply";
	    MessageType[MessageType["ChatInputCommand"] = 20] = "ChatInputCommand";
	    MessageType[MessageType["ThreadStarterMessage"] = 21] = "ThreadStarterMessage";
	    MessageType[MessageType["GuildInviteReminder"] = 22] = "GuildInviteReminder";
	    MessageType[MessageType["ContextMenuCommand"] = 23] = "ContextMenuCommand";
	    MessageType[MessageType["AutoModerationAction"] = 24] = "AutoModerationAction";
	    MessageType[MessageType["RoleSubscriptionPurchase"] = 25] = "RoleSubscriptionPurchase";
	    MessageType[MessageType["InteractionPremiumUpsell"] = 26] = "InteractionPremiumUpsell";
	    MessageType[MessageType["StageStart"] = 27] = "StageStart";
	    MessageType[MessageType["StageEnd"] = 28] = "StageEnd";
	    MessageType[MessageType["StageSpeaker"] = 29] = "StageSpeaker";
	    /**
	     * @unstable https://github.com/discord/discord-api-docs/pull/5927#discussion_r1107678548
	     */
	    MessageType[MessageType["StageRaiseHand"] = 30] = "StageRaiseHand";
	    MessageType[MessageType["StageTopic"] = 31] = "StageTopic";
	    MessageType[MessageType["GuildApplicationPremiumSubscription"] = 32] = "GuildApplicationPremiumSubscription";
	    MessageType[MessageType["GuildIncidentAlertModeEnabled"] = 36] = "GuildIncidentAlertModeEnabled";
	    MessageType[MessageType["GuildIncidentAlertModeDisabled"] = 37] = "GuildIncidentAlertModeDisabled";
	    MessageType[MessageType["GuildIncidentReportRaid"] = 38] = "GuildIncidentReportRaid";
	    MessageType[MessageType["GuildIncidentReportFalseAlarm"] = 39] = "GuildIncidentReportFalseAlarm";
	    MessageType[MessageType["PurchaseNotification"] = 44] = "PurchaseNotification";
	    MessageType[MessageType["PollResult"] = 46] = "PollResult";
	})(MessageType || (channel$5.MessageType = MessageType = {}));
	/**
	 * https://discord.com/developers/docs/resources/channel#message-object-message-activity-types
	 */
	var MessageActivityType;
	(function (MessageActivityType) {
	    MessageActivityType[MessageActivityType["Join"] = 1] = "Join";
	    MessageActivityType[MessageActivityType["Spectate"] = 2] = "Spectate";
	    MessageActivityType[MessageActivityType["Listen"] = 3] = "Listen";
	    MessageActivityType[MessageActivityType["JoinRequest"] = 5] = "JoinRequest";
	})(MessageActivityType || (channel$5.MessageActivityType = MessageActivityType = {}));
	/**
	 * https://discord.com/developers/docs/resources/channel#message-reference-types
	 */
	var MessageReferenceType;
	(function (MessageReferenceType) {
	    /**
	     * A standard reference used by replies
	     */
	    MessageReferenceType[MessageReferenceType["Default"] = 0] = "Default";
	    /**
	     * Reference used to point to a message at a point in time
	     */
	    MessageReferenceType[MessageReferenceType["Forward"] = 1] = "Forward";
	})(MessageReferenceType || (channel$5.MessageReferenceType = MessageReferenceType = {}));
	/**
	 * https://discord.com/developers/docs/resources/channel#message-object-message-flags
	 */
	var MessageFlags;
	(function (MessageFlags) {
	    /**
	     * This message has been published to subscribed channels (via Channel Following)
	     */
	    MessageFlags[MessageFlags["Crossposted"] = 1] = "Crossposted";
	    /**
	     * This message originated from a message in another channel (via Channel Following)
	     */
	    MessageFlags[MessageFlags["IsCrosspost"] = 2] = "IsCrosspost";
	    /**
	     * Do not include any embeds when serializing this message
	     */
	    MessageFlags[MessageFlags["SuppressEmbeds"] = 4] = "SuppressEmbeds";
	    /**
	     * The source message for this crosspost has been deleted (via Channel Following)
	     */
	    MessageFlags[MessageFlags["SourceMessageDeleted"] = 8] = "SourceMessageDeleted";
	    /**
	     * This message came from the urgent message system
	     */
	    MessageFlags[MessageFlags["Urgent"] = 16] = "Urgent";
	    /**
	     * This message has an associated thread, which shares its id
	     */
	    MessageFlags[MessageFlags["HasThread"] = 32] = "HasThread";
	    /**
	     * This message is only visible to the user who invoked the Interaction
	     */
	    MessageFlags[MessageFlags["Ephemeral"] = 64] = "Ephemeral";
	    /**
	     * This message is an Interaction Response and the bot is "thinking"
	     */
	    MessageFlags[MessageFlags["Loading"] = 128] = "Loading";
	    /**
	     * This message failed to mention some roles and add their members to the thread
	     */
	    MessageFlags[MessageFlags["FailedToMentionSomeRolesInThread"] = 256] = "FailedToMentionSomeRolesInThread";
	    /**
	     * @unstable This message flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    MessageFlags[MessageFlags["ShouldShowLinkNotDiscordWarning"] = 1024] = "ShouldShowLinkNotDiscordWarning";
	    /**
	     * This message will not trigger push and desktop notifications
	     */
	    MessageFlags[MessageFlags["SuppressNotifications"] = 4096] = "SuppressNotifications";
	    /**
	     * This message is a voice message
	     */
	    MessageFlags[MessageFlags["IsVoiceMessage"] = 8192] = "IsVoiceMessage";
	})(MessageFlags || (channel$5.MessageFlags = MessageFlags = {}));
	var OverwriteType;
	(function (OverwriteType) {
	    OverwriteType[OverwriteType["Role"] = 0] = "Role";
	    OverwriteType[OverwriteType["Member"] = 1] = "Member";
	})(OverwriteType || (channel$5.OverwriteType = OverwriteType = {}));
	var ThreadAutoArchiveDuration;
	(function (ThreadAutoArchiveDuration) {
	    ThreadAutoArchiveDuration[ThreadAutoArchiveDuration["OneHour"] = 60] = "OneHour";
	    ThreadAutoArchiveDuration[ThreadAutoArchiveDuration["OneDay"] = 1440] = "OneDay";
	    ThreadAutoArchiveDuration[ThreadAutoArchiveDuration["ThreeDays"] = 4320] = "ThreeDays";
	    ThreadAutoArchiveDuration[ThreadAutoArchiveDuration["OneWeek"] = 10080] = "OneWeek";
	})(ThreadAutoArchiveDuration || (channel$5.ThreadAutoArchiveDuration = ThreadAutoArchiveDuration = {}));
	var ThreadMemberFlags;
	(function (ThreadMemberFlags) {
	    /**
	     * @unstable This thread member flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ThreadMemberFlags[ThreadMemberFlags["HasInteracted"] = 1] = "HasInteracted";
	    /**
	     * @unstable This thread member flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ThreadMemberFlags[ThreadMemberFlags["AllMessages"] = 2] = "AllMessages";
	    /**
	     * @unstable This thread member flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ThreadMemberFlags[ThreadMemberFlags["OnlyMentions"] = 4] = "OnlyMentions";
	    /**
	     * @unstable This thread member flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ThreadMemberFlags[ThreadMemberFlags["NoMessages"] = 8] = "NoMessages";
	})(ThreadMemberFlags || (channel$5.ThreadMemberFlags = ThreadMemberFlags = {}));
	/**
	 * https://discord.com/developers/docs/resources/channel#embed-object-embed-types
	 *
	 * @deprecated *Embed types should be considered deprecated and might be removed in a future API version*
	 */
	var EmbedType;
	(function (EmbedType) {
	    /**
	     * Generic embed rendered from embed attributes
	     */
	    EmbedType["Rich"] = "rich";
	    /**
	     * Image embed
	     */
	    EmbedType["Image"] = "image";
	    /**
	     * Video embed
	     */
	    EmbedType["Video"] = "video";
	    /**
	     * Animated gif image embed rendered as a video embed
	     */
	    EmbedType["GIFV"] = "gifv";
	    /**
	     * Article embed
	     */
	    EmbedType["Article"] = "article";
	    /**
	     * Link embed
	     */
	    EmbedType["Link"] = "link";
	    /**
	     * Auto moderation alert embed
	     *
	     * @unstable This embed type is currently not documented by Discord, but it is returned in the auto moderation system messages.
	     */
	    EmbedType["AutoModerationMessage"] = "auto_moderation_message";
	    /**
	     * Poll result embed
	     */
	    EmbedType["PollResult"] = "poll_result";
	})(EmbedType || (channel$5.EmbedType = EmbedType = {}));
	/**
	 * https://discord.com/developers/docs/resources/channel#attachment-object-attachment-structure-attachment-flags
	 */
	var AttachmentFlags;
	(function (AttachmentFlags) {
	    /**
	     * This attachment has been edited using the remix feature on mobile
	     */
	    AttachmentFlags[AttachmentFlags["IsRemix"] = 4] = "IsRemix";
	})(AttachmentFlags || (channel$5.AttachmentFlags = AttachmentFlags = {}));
	/**
	 * https://discord.com/developers/docs/resources/channel#allowed-mentions-object-allowed-mention-types
	 */
	var AllowedMentionsTypes;
	(function (AllowedMentionsTypes) {
	    /**
	     * Controls @everyone and @here mentions
	     */
	    AllowedMentionsTypes["Everyone"] = "everyone";
	    /**
	     * Controls role mentions
	     */
	    AllowedMentionsTypes["Role"] = "roles";
	    /**
	     * Controls user mentions
	     */
	    AllowedMentionsTypes["User"] = "users";
	})(AllowedMentionsTypes || (channel$5.AllowedMentionsTypes = AllowedMentionsTypes = {}));
	/**
	 * https://discord.com/developers/docs/interactions/message-components#component-object-component-types
	 */
	var ComponentType;
	(function (ComponentType) {
	    /**
	     * Action Row component
	     */
	    ComponentType[ComponentType["ActionRow"] = 1] = "ActionRow";
	    /**
	     * Button component
	     */
	    ComponentType[ComponentType["Button"] = 2] = "Button";
	    /**
	     * Select menu for picking from defined text options
	     */
	    ComponentType[ComponentType["StringSelect"] = 3] = "StringSelect";
	    /**
	     * Text Input component
	     */
	    ComponentType[ComponentType["TextInput"] = 4] = "TextInput";
	    /**
	     * Select menu for users
	     */
	    ComponentType[ComponentType["UserSelect"] = 5] = "UserSelect";
	    /**
	     * Select menu for roles
	     */
	    ComponentType[ComponentType["RoleSelect"] = 6] = "RoleSelect";
	    /**
	     * Select menu for users and roles
	     */
	    ComponentType[ComponentType["MentionableSelect"] = 7] = "MentionableSelect";
	    /**
	     * Select menu for channels
	     */
	    ComponentType[ComponentType["ChannelSelect"] = 8] = "ChannelSelect";
	    // EVERYTHING BELOW THIS LINE SHOULD BE OLD NAMES FOR RENAMED ENUM MEMBERS //
	    /**
	     * Select menu for picking from defined text options
	     *
	     * @deprecated This is the old name for {@apilink ComponentType#StringSelect}
	     */
	    ComponentType[ComponentType["SelectMenu"] = 3] = "SelectMenu";
	})(ComponentType || (channel$5.ComponentType = ComponentType = {}));
	/**
	 * https://discord.com/developers/docs/interactions/message-components#button-object-button-styles
	 */
	var ButtonStyle;
	(function (ButtonStyle) {
	    ButtonStyle[ButtonStyle["Primary"] = 1] = "Primary";
	    ButtonStyle[ButtonStyle["Secondary"] = 2] = "Secondary";
	    ButtonStyle[ButtonStyle["Success"] = 3] = "Success";
	    ButtonStyle[ButtonStyle["Danger"] = 4] = "Danger";
	    ButtonStyle[ButtonStyle["Link"] = 5] = "Link";
	    ButtonStyle[ButtonStyle["Premium"] = 6] = "Premium";
	})(ButtonStyle || (channel$5.ButtonStyle = ButtonStyle = {}));
	/**
	 * https://discord.com/developers/docs/interactions/message-components#text-inputs-text-input-styles
	 */
	var TextInputStyle;
	(function (TextInputStyle) {
	    TextInputStyle[TextInputStyle["Short"] = 1] = "Short";
	    TextInputStyle[TextInputStyle["Paragraph"] = 2] = "Paragraph";
	})(TextInputStyle || (channel$5.TextInputStyle = TextInputStyle = {}));
	/**
	 * https://discord.com/developers/docs/interactions/message-components#select-menu-object-select-default-value-structure
	 */
	var SelectMenuDefaultValueType;
	(function (SelectMenuDefaultValueType) {
	    SelectMenuDefaultValueType["Channel"] = "channel";
	    SelectMenuDefaultValueType["Role"] = "role";
	    SelectMenuDefaultValueType["User"] = "user";
	})(SelectMenuDefaultValueType || (channel$5.SelectMenuDefaultValueType = SelectMenuDefaultValueType = {}));
	/**
	 * https://discord.com/developers/docs/resources/channel#channel-object-channel-flags
	 */
	var ChannelFlags;
	(function (ChannelFlags) {
	    /**
	     * @unstable This channel flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ChannelFlags[ChannelFlags["GuildFeedRemoved"] = 1] = "GuildFeedRemoved";
	    /**
	     * This thread is pinned to the top of its parent forum channel
	     */
	    ChannelFlags[ChannelFlags["Pinned"] = 2] = "Pinned";
	    /**
	     * @unstable This channel flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ChannelFlags[ChannelFlags["ActiveChannelsRemoved"] = 4] = "ActiveChannelsRemoved";
	    /**
	     * Whether a tag is required to be specified when creating a thread in a forum channel.
	     * Tags are specified in the `applied_tags` field
	     */
	    ChannelFlags[ChannelFlags["RequireTag"] = 16] = "RequireTag";
	    /**
	     * @unstable This channel flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ChannelFlags[ChannelFlags["IsSpam"] = 32] = "IsSpam";
	    /**
	     * @unstable This channel flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ChannelFlags[ChannelFlags["IsGuildResourceChannel"] = 128] = "IsGuildResourceChannel";
	    /**
	     * @unstable This channel flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ChannelFlags[ChannelFlags["ClydeAI"] = 256] = "ClydeAI";
	    /**
	     * @unstable This channel flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ChannelFlags[ChannelFlags["IsScheduledForDeletion"] = 512] = "IsScheduledForDeletion";
	    /**
	     * Whether media download options are hidden.
	     */
	    ChannelFlags[ChannelFlags["HideMediaDownloadOptions"] = 32768] = "HideMediaDownloadOptions";
	})(ChannelFlags || (channel$5.ChannelFlags = ChannelFlags = {}));
	
	return channel$5;
}

var emoji$3 = {};

var hasRequiredEmoji$4;

function requireEmoji$4 () {
	if (hasRequiredEmoji$4) return emoji$3;
	hasRequiredEmoji$4 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/emoji
	 */
	Object.defineProperty(emoji$3, "__esModule", { value: true });
	
	return emoji$3;
}

var gateway$3 = {};

var hasRequiredGateway$3;

function requireGateway$3 () {
	if (hasRequiredGateway$3) return gateway$3;
	hasRequiredGateway$3 = 1;
	/**
	 * Types extracted from
	 *  - https://discord.com/developers/docs/topics/gateway
	 *  - https://discord.com/developers/docs/topics/gateway-events
	 */
	Object.defineProperty(gateway$3, "__esModule", { value: true });
	gateway$3.ActivityFlags = gateway$3.ActivityType = gateway$3.ActivityPlatform = gateway$3.PresenceUpdateStatus = void 0;
	/**
	 * https://discord.com/developers/docs/topics/gateway-events#update-presence-status-types
	 */
	var PresenceUpdateStatus;
	(function (PresenceUpdateStatus) {
	    PresenceUpdateStatus["Online"] = "online";
	    PresenceUpdateStatus["DoNotDisturb"] = "dnd";
	    PresenceUpdateStatus["Idle"] = "idle";
	    /**
	     * Invisible and shown as offline
	     */
	    PresenceUpdateStatus["Invisible"] = "invisible";
	    PresenceUpdateStatus["Offline"] = "offline";
	})(PresenceUpdateStatus || (gateway$3.PresenceUpdateStatus = PresenceUpdateStatus = {}));
	/**
	 * @unstable This enum is currently not documented by Discord but has known values which we will try to keep up to date.
	 * Values might be added or removed without a major version bump.
	 */
	var ActivityPlatform;
	(function (ActivityPlatform) {
	    ActivityPlatform["Desktop"] = "desktop";
	    ActivityPlatform["Xbox"] = "xbox";
	    ActivityPlatform["Samsung"] = "samsung";
	    ActivityPlatform["IOS"] = "ios";
	    ActivityPlatform["Android"] = "android";
	    ActivityPlatform["Embedded"] = "embedded";
	    ActivityPlatform["PS4"] = "ps4";
	    ActivityPlatform["PS5"] = "ps5";
	})(ActivityPlatform || (gateway$3.ActivityPlatform = ActivityPlatform = {}));
	/**
	 * https://discord.com/developers/docs/topics/gateway-events#activity-object-activity-types
	 */
	var ActivityType;
	(function (ActivityType) {
	    /**
	     * Playing {game}
	     */
	    ActivityType[ActivityType["Playing"] = 0] = "Playing";
	    /**
	     * Streaming {details}
	     */
	    ActivityType[ActivityType["Streaming"] = 1] = "Streaming";
	    /**
	     * Listening to {name}
	     */
	    ActivityType[ActivityType["Listening"] = 2] = "Listening";
	    /**
	     * Watching {details}
	     */
	    ActivityType[ActivityType["Watching"] = 3] = "Watching";
	    /**
	     * {emoji} {state}
	     */
	    ActivityType[ActivityType["Custom"] = 4] = "Custom";
	    /**
	     * Competing in {name}
	     */
	    ActivityType[ActivityType["Competing"] = 5] = "Competing";
	})(ActivityType || (gateway$3.ActivityType = ActivityType = {}));
	/**
	 * https://discord.com/developers/docs/topics/gateway-events#activity-object-activity-flags
	 */
	var ActivityFlags;
	(function (ActivityFlags) {
	    ActivityFlags[ActivityFlags["Instance"] = 1] = "Instance";
	    ActivityFlags[ActivityFlags["Join"] = 2] = "Join";
	    ActivityFlags[ActivityFlags["Spectate"] = 4] = "Spectate";
	    ActivityFlags[ActivityFlags["JoinRequest"] = 8] = "JoinRequest";
	    ActivityFlags[ActivityFlags["Sync"] = 16] = "Sync";
	    ActivityFlags[ActivityFlags["Play"] = 32] = "Play";
	    ActivityFlags[ActivityFlags["PartyPrivacyFriends"] = 64] = "PartyPrivacyFriends";
	    ActivityFlags[ActivityFlags["PartyPrivacyVoiceChannel"] = 128] = "PartyPrivacyVoiceChannel";
	    ActivityFlags[ActivityFlags["Embedded"] = 256] = "Embedded";
	})(ActivityFlags || (gateway$3.ActivityFlags = ActivityFlags = {}));
	
	return gateway$3;
}

var guild$3 = {};

var hasRequiredGuild$4;

function requireGuild$4 () {
	if (hasRequiredGuild$4) return guild$3;
	hasRequiredGuild$4 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/guild
	 */
	Object.defineProperty(guild$3, "__esModule", { value: true });
	guild$3.GuildOnboardingPromptType = guild$3.GuildOnboardingMode = guild$3.MembershipScreeningFieldType = guild$3.GuildWidgetStyle = guild$3.IntegrationExpireBehavior = guild$3.GuildMemberFlags = guild$3.GuildFeature = guild$3.GuildSystemChannelFlags = guild$3.GuildHubType = guild$3.GuildPremiumTier = guild$3.GuildVerificationLevel = guild$3.GuildNSFWLevel = guild$3.GuildMFALevel = guild$3.GuildExplicitContentFilter = guild$3.GuildDefaultMessageNotifications = void 0;
	/**
	 * https://discord.com/developers/docs/resources/guild#guild-object-default-message-notification-level
	 */
	var GuildDefaultMessageNotifications;
	(function (GuildDefaultMessageNotifications) {
	    GuildDefaultMessageNotifications[GuildDefaultMessageNotifications["AllMessages"] = 0] = "AllMessages";
	    GuildDefaultMessageNotifications[GuildDefaultMessageNotifications["OnlyMentions"] = 1] = "OnlyMentions";
	})(GuildDefaultMessageNotifications || (guild$3.GuildDefaultMessageNotifications = GuildDefaultMessageNotifications = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild#guild-object-explicit-content-filter-level
	 */
	var GuildExplicitContentFilter;
	(function (GuildExplicitContentFilter) {
	    GuildExplicitContentFilter[GuildExplicitContentFilter["Disabled"] = 0] = "Disabled";
	    GuildExplicitContentFilter[GuildExplicitContentFilter["MembersWithoutRoles"] = 1] = "MembersWithoutRoles";
	    GuildExplicitContentFilter[GuildExplicitContentFilter["AllMembers"] = 2] = "AllMembers";
	})(GuildExplicitContentFilter || (guild$3.GuildExplicitContentFilter = GuildExplicitContentFilter = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild#guild-object-mfa-level
	 */
	var GuildMFALevel;
	(function (GuildMFALevel) {
	    GuildMFALevel[GuildMFALevel["None"] = 0] = "None";
	    GuildMFALevel[GuildMFALevel["Elevated"] = 1] = "Elevated";
	})(GuildMFALevel || (guild$3.GuildMFALevel = GuildMFALevel = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild#guild-object-guild-nsfw-level
	 */
	var GuildNSFWLevel;
	(function (GuildNSFWLevel) {
	    GuildNSFWLevel[GuildNSFWLevel["Default"] = 0] = "Default";
	    GuildNSFWLevel[GuildNSFWLevel["Explicit"] = 1] = "Explicit";
	    GuildNSFWLevel[GuildNSFWLevel["Safe"] = 2] = "Safe";
	    GuildNSFWLevel[GuildNSFWLevel["AgeRestricted"] = 3] = "AgeRestricted";
	})(GuildNSFWLevel || (guild$3.GuildNSFWLevel = GuildNSFWLevel = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild#guild-object-verification-level
	 */
	var GuildVerificationLevel;
	(function (GuildVerificationLevel) {
	    /**
	     * Unrestricted
	     */
	    GuildVerificationLevel[GuildVerificationLevel["None"] = 0] = "None";
	    /**
	     * Must have verified email on account
	     */
	    GuildVerificationLevel[GuildVerificationLevel["Low"] = 1] = "Low";
	    /**
	     * Must be registered on Discord for longer than 5 minutes
	     */
	    GuildVerificationLevel[GuildVerificationLevel["Medium"] = 2] = "Medium";
	    /**
	     * Must be a member of the guild for longer than 10 minutes
	     */
	    GuildVerificationLevel[GuildVerificationLevel["High"] = 3] = "High";
	    /**
	     * Must have a verified phone number
	     */
	    GuildVerificationLevel[GuildVerificationLevel["VeryHigh"] = 4] = "VeryHigh";
	})(GuildVerificationLevel || (guild$3.GuildVerificationLevel = GuildVerificationLevel = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild#guild-object-premium-tier
	 */
	var GuildPremiumTier;
	(function (GuildPremiumTier) {
	    GuildPremiumTier[GuildPremiumTier["None"] = 0] = "None";
	    GuildPremiumTier[GuildPremiumTier["Tier1"] = 1] = "Tier1";
	    GuildPremiumTier[GuildPremiumTier["Tier2"] = 2] = "Tier2";
	    GuildPremiumTier[GuildPremiumTier["Tier3"] = 3] = "Tier3";
	})(GuildPremiumTier || (guild$3.GuildPremiumTier = GuildPremiumTier = {}));
	var GuildHubType;
	(function (GuildHubType) {
	    GuildHubType[GuildHubType["Default"] = 0] = "Default";
	    GuildHubType[GuildHubType["HighSchool"] = 1] = "HighSchool";
	    GuildHubType[GuildHubType["College"] = 2] = "College";
	})(GuildHubType || (guild$3.GuildHubType = GuildHubType = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild#guild-object-system-channel-flags
	 */
	var GuildSystemChannelFlags;
	(function (GuildSystemChannelFlags) {
	    /**
	     * Suppress member join notifications
	     */
	    GuildSystemChannelFlags[GuildSystemChannelFlags["SuppressJoinNotifications"] = 1] = "SuppressJoinNotifications";
	    /**
	     * Suppress server boost notifications
	     */
	    GuildSystemChannelFlags[GuildSystemChannelFlags["SuppressPremiumSubscriptions"] = 2] = "SuppressPremiumSubscriptions";
	    /**
	     * Suppress server setup tips
	     */
	    GuildSystemChannelFlags[GuildSystemChannelFlags["SuppressGuildReminderNotifications"] = 4] = "SuppressGuildReminderNotifications";
	    /**
	     * Hide member join sticker reply buttons
	     */
	    GuildSystemChannelFlags[GuildSystemChannelFlags["SuppressJoinNotificationReplies"] = 8] = "SuppressJoinNotificationReplies";
	    /**
	     * Suppress role subscription purchase and renewal notifications
	     */
	    GuildSystemChannelFlags[GuildSystemChannelFlags["SuppressRoleSubscriptionPurchaseNotifications"] = 16] = "SuppressRoleSubscriptionPurchaseNotifications";
	    /**
	     * Hide role subscription sticker reply buttons
	     */
	    GuildSystemChannelFlags[GuildSystemChannelFlags["SuppressRoleSubscriptionPurchaseNotificationReplies"] = 32] = "SuppressRoleSubscriptionPurchaseNotificationReplies";
	})(GuildSystemChannelFlags || (guild$3.GuildSystemChannelFlags = GuildSystemChannelFlags = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild#guild-object-guild-features
	 */
	var GuildFeature;
	(function (GuildFeature) {
	    /**
	     * Guild has access to set an animated guild banner image
	     */
	    GuildFeature["AnimatedBanner"] = "ANIMATED_BANNER";
	    /**
	     * Guild has access to set an animated guild icon
	     */
	    GuildFeature["AnimatedIcon"] = "ANIMATED_ICON";
	    /**
	     * Guild is using the old permissions configuration behavior
	     *
	     * See https://discord.com/developers/docs/change-log#upcoming-application-command-permission-changes
	     */
	    GuildFeature["ApplicationCommandPermissionsV2"] = "APPLICATION_COMMAND_PERMISSIONS_V2";
	    /**
	     * Guild has set up auto moderation rules
	     */
	    GuildFeature["AutoModeration"] = "AUTO_MODERATION";
	    /**
	     * Guild has access to set a guild banner image
	     */
	    GuildFeature["Banner"] = "BANNER";
	    /**
	     * Guild can enable welcome screen, Membership Screening and discovery, and receives community updates
	     */
	    GuildFeature["Community"] = "COMMUNITY";
	    /**
	     * Guild has enabled monetization
	     */
	    GuildFeature["CreatorMonetizableProvisional"] = "CREATOR_MONETIZABLE_PROVISIONAL";
	    /**
	     * Guild has enabled the role subscription promo page
	     */
	    GuildFeature["CreatorStorePage"] = "CREATOR_STORE_PAGE";
	    /**
	     * Guild has been set as a support server on the App Directory
	     */
	    GuildFeature["DeveloperSupportServer"] = "DEVELOPER_SUPPORT_SERVER";
	    /**
	     * Guild is able to be discovered in the directory
	     */
	    GuildFeature["Discoverable"] = "DISCOVERABLE";
	    /**
	     * Guild is able to be featured in the directory
	     */
	    GuildFeature["Featurable"] = "FEATURABLE";
	    /**
	     * Guild is listed in a directory channel
	     */
	    GuildFeature["HasDirectoryEntry"] = "HAS_DIRECTORY_ENTRY";
	    /**
	     * Guild is a Student Hub
	     *
	     * See https://support.discord.com/hc/articles/4406046651927
	     *
	     * @unstable This feature is currently not documented by Discord, but has known value
	     */
	    GuildFeature["Hub"] = "HUB";
	    /**
	     * Guild has disabled invite usage, preventing users from joining
	     */
	    GuildFeature["InvitesDisabled"] = "INVITES_DISABLED";
	    /**
	     * Guild has access to set an invite splash background
	     */
	    GuildFeature["InviteSplash"] = "INVITE_SPLASH";
	    /**
	     * Guild is in a Student Hub
	     *
	     * See https://support.discord.com/hc/articles/4406046651927
	     *
	     * @unstable This feature is currently not documented by Discord, but has known value
	     */
	    GuildFeature["LinkedToHub"] = "LINKED_TO_HUB";
	    /**
	     * Guild has enabled Membership Screening
	     */
	    GuildFeature["MemberVerificationGateEnabled"] = "MEMBER_VERIFICATION_GATE_ENABLED";
	    /**
	     * Guild has enabled monetization
	     *
	     * @unstable This feature is no longer documented by Discord
	     */
	    GuildFeature["MonetizationEnabled"] = "MONETIZATION_ENABLED";
	    /**
	     * Guild has increased custom sticker slots
	     */
	    GuildFeature["MoreStickers"] = "MORE_STICKERS";
	    /**
	     * Guild has access to create news channels
	     */
	    GuildFeature["News"] = "NEWS";
	    /**
	     * Guild is partnered
	     */
	    GuildFeature["Partnered"] = "PARTNERED";
	    /**
	     * Guild can be previewed before joining via Membership Screening or the directory
	     */
	    GuildFeature["PreviewEnabled"] = "PREVIEW_ENABLED";
	    /**
	     * Guild has access to create private threads
	     */
	    GuildFeature["PrivateThreads"] = "PRIVATE_THREADS";
	    /**
	     * Guild has disabled alerts for join raids in the configured safety alerts channel
	     */
	    GuildFeature["RaidAlertsDisabled"] = "RAID_ALERTS_DISABLED";
	    GuildFeature["RelayEnabled"] = "RELAY_ENABLED";
	    /**
	     * Guild is able to set role icons
	     */
	    GuildFeature["RoleIcons"] = "ROLE_ICONS";
	    /**
	     * Guild has role subscriptions that can be purchased
	     */
	    GuildFeature["RoleSubscriptionsAvailableForPurchase"] = "ROLE_SUBSCRIPTIONS_AVAILABLE_FOR_PURCHASE";
	    /**
	     * Guild has enabled role subscriptions
	     */
	    GuildFeature["RoleSubscriptionsEnabled"] = "ROLE_SUBSCRIPTIONS_ENABLED";
	    /**
	     * Guild has enabled ticketed events
	     */
	    GuildFeature["TicketedEventsEnabled"] = "TICKETED_EVENTS_ENABLED";
	    /**
	     * Guild has access to set a vanity URL
	     */
	    GuildFeature["VanityURL"] = "VANITY_URL";
	    /**
	     * Guild is verified
	     */
	    GuildFeature["Verified"] = "VERIFIED";
	    /**
	     * Guild has access to set 384kbps bitrate in voice (previously VIP voice servers)
	     */
	    GuildFeature["VIPRegions"] = "VIP_REGIONS";
	    /**
	     * Guild has enabled the welcome screen
	     */
	    GuildFeature["WelcomeScreenEnabled"] = "WELCOME_SCREEN_ENABLED";
	})(GuildFeature || (guild$3.GuildFeature = GuildFeature = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild#guild-member-object-guild-member-flags
	 */
	var GuildMemberFlags;
	(function (GuildMemberFlags) {
	    /**
	     * Member has left and rejoined the guild
	     */
	    GuildMemberFlags[GuildMemberFlags["DidRejoin"] = 1] = "DidRejoin";
	    /**
	     * Member has completed onboarding
	     */
	    GuildMemberFlags[GuildMemberFlags["CompletedOnboarding"] = 2] = "CompletedOnboarding";
	    /**
	     * Member is exempt from guild verification requirements
	     */
	    GuildMemberFlags[GuildMemberFlags["BypassesVerification"] = 4] = "BypassesVerification";
	    /**
	     * Member has started onboarding
	     */
	    GuildMemberFlags[GuildMemberFlags["StartedOnboarding"] = 8] = "StartedOnboarding";
	    /**
	     * Member is a guest and can only access the voice channel they were invited to
	     */
	    GuildMemberFlags[GuildMemberFlags["IsGuest"] = 16] = "IsGuest";
	    /**
	     * Member has started Server Guide new member actions
	     */
	    GuildMemberFlags[GuildMemberFlags["StartedHomeActions"] = 32] = "StartedHomeActions";
	    /**
	     * Member has completed Server Guide new member actions
	     */
	    GuildMemberFlags[GuildMemberFlags["CompletedHomeActions"] = 64] = "CompletedHomeActions";
	    /**
	     * Member's username, display name, or nickname is blocked by AutoMod
	     */
	    GuildMemberFlags[GuildMemberFlags["AutomodQuarantinedUsernameOrGuildNickname"] = 128] = "AutomodQuarantinedUsernameOrGuildNickname";
	    /**
	     * @deprecated
	     */
	    GuildMemberFlags[GuildMemberFlags["AutomodQuarantinedBio"] = 256] = "AutomodQuarantinedBio";
	    /**
	     * Member has dismissed the DM settings upsell
	     */
	    GuildMemberFlags[GuildMemberFlags["DmSettingsUpsellAcknowledged"] = 512] = "DmSettingsUpsellAcknowledged";
	})(GuildMemberFlags || (guild$3.GuildMemberFlags = GuildMemberFlags = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild#integration-object-integration-expire-behaviors
	 */
	var IntegrationExpireBehavior;
	(function (IntegrationExpireBehavior) {
	    IntegrationExpireBehavior[IntegrationExpireBehavior["RemoveRole"] = 0] = "RemoveRole";
	    IntegrationExpireBehavior[IntegrationExpireBehavior["Kick"] = 1] = "Kick";
	})(IntegrationExpireBehavior || (guild$3.IntegrationExpireBehavior = IntegrationExpireBehavior = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild#get-guild-widget-image-widget-style-options
	 */
	var GuildWidgetStyle;
	(function (GuildWidgetStyle) {
	    /**
	     * Shield style widget with Discord icon and guild members online count
	     */
	    GuildWidgetStyle["Shield"] = "shield";
	    /**
	     * Large image with guild icon, name and online count. "POWERED BY DISCORD" as the footer of the widget
	     */
	    GuildWidgetStyle["Banner1"] = "banner1";
	    /**
	     * Smaller widget style with guild icon, name and online count. Split on the right with Discord logo
	     */
	    GuildWidgetStyle["Banner2"] = "banner2";
	    /**
	     * Large image with guild icon, name and online count. In the footer, Discord logo on the left and "Chat Now" on the right
	     */
	    GuildWidgetStyle["Banner3"] = "banner3";
	    /**
	     * Large Discord logo at the top of the widget. Guild icon, name and online count in the middle portion of the widget
	     * and a "JOIN MY SERVER" button at the bottom
	     */
	    GuildWidgetStyle["Banner4"] = "banner4";
	})(GuildWidgetStyle || (guild$3.GuildWidgetStyle = GuildWidgetStyle = {}));
	var MembershipScreeningFieldType;
	(function (MembershipScreeningFieldType) {
	    /**
	     * Server Rules
	     */
	    MembershipScreeningFieldType["Terms"] = "TERMS";
	})(MembershipScreeningFieldType || (guild$3.MembershipScreeningFieldType = MembershipScreeningFieldType = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild#guild-onboarding-object-onboarding-mode
	 */
	var GuildOnboardingMode;
	(function (GuildOnboardingMode) {
	    /**
	     * Counts only Default Channels towards constraints
	     */
	    GuildOnboardingMode[GuildOnboardingMode["OnboardingDefault"] = 0] = "OnboardingDefault";
	    /**
	     * Counts Default Channels and Questions towards constraints
	     */
	    GuildOnboardingMode[GuildOnboardingMode["OnboardingAdvanced"] = 1] = "OnboardingAdvanced";
	})(GuildOnboardingMode || (guild$3.GuildOnboardingMode = GuildOnboardingMode = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild#guild-onboarding-object-prompt-types
	 */
	var GuildOnboardingPromptType;
	(function (GuildOnboardingPromptType) {
	    GuildOnboardingPromptType[GuildOnboardingPromptType["MultipleChoice"] = 0] = "MultipleChoice";
	    GuildOnboardingPromptType[GuildOnboardingPromptType["Dropdown"] = 1] = "Dropdown";
	})(GuildOnboardingPromptType || (guild$3.GuildOnboardingPromptType = GuildOnboardingPromptType = {}));
	
	return guild$3;
}

var guildScheduledEvent$3 = {};

var hasRequiredGuildScheduledEvent$4;

function requireGuildScheduledEvent$4 () {
	if (hasRequiredGuildScheduledEvent$4) return guildScheduledEvent$3;
	hasRequiredGuildScheduledEvent$4 = 1;
	Object.defineProperty(guildScheduledEvent$3, "__esModule", { value: true });
	guildScheduledEvent$3.GuildScheduledEventPrivacyLevel = guildScheduledEvent$3.GuildScheduledEventStatus = guildScheduledEvent$3.GuildScheduledEventEntityType = guildScheduledEvent$3.GuildScheduledEventRecurrenceRuleMonth = guildScheduledEvent$3.GuildScheduledEventRecurrenceRuleWeekday = guildScheduledEvent$3.GuildScheduledEventRecurrenceRuleFrequency = void 0;
	/**
	 * https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-recurrence-rule-object-guild-scheduled-event-recurrence-rule-frequency
	 */
	var GuildScheduledEventRecurrenceRuleFrequency;
	(function (GuildScheduledEventRecurrenceRuleFrequency) {
	    GuildScheduledEventRecurrenceRuleFrequency[GuildScheduledEventRecurrenceRuleFrequency["Yearly"] = 0] = "Yearly";
	    GuildScheduledEventRecurrenceRuleFrequency[GuildScheduledEventRecurrenceRuleFrequency["Monthly"] = 1] = "Monthly";
	    GuildScheduledEventRecurrenceRuleFrequency[GuildScheduledEventRecurrenceRuleFrequency["Weekly"] = 2] = "Weekly";
	    GuildScheduledEventRecurrenceRuleFrequency[GuildScheduledEventRecurrenceRuleFrequency["Daily"] = 3] = "Daily";
	})(GuildScheduledEventRecurrenceRuleFrequency || (guildScheduledEvent$3.GuildScheduledEventRecurrenceRuleFrequency = GuildScheduledEventRecurrenceRuleFrequency = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-recurrence-rule-object-guild-scheduled-event-recurrence-rule-weekday
	 */
	var GuildScheduledEventRecurrenceRuleWeekday;
	(function (GuildScheduledEventRecurrenceRuleWeekday) {
	    GuildScheduledEventRecurrenceRuleWeekday[GuildScheduledEventRecurrenceRuleWeekday["Monday"] = 0] = "Monday";
	    GuildScheduledEventRecurrenceRuleWeekday[GuildScheduledEventRecurrenceRuleWeekday["Tuesday"] = 1] = "Tuesday";
	    GuildScheduledEventRecurrenceRuleWeekday[GuildScheduledEventRecurrenceRuleWeekday["Wednesday"] = 2] = "Wednesday";
	    GuildScheduledEventRecurrenceRuleWeekday[GuildScheduledEventRecurrenceRuleWeekday["Thursday"] = 3] = "Thursday";
	    GuildScheduledEventRecurrenceRuleWeekday[GuildScheduledEventRecurrenceRuleWeekday["Friday"] = 4] = "Friday";
	    GuildScheduledEventRecurrenceRuleWeekday[GuildScheduledEventRecurrenceRuleWeekday["Saturday"] = 5] = "Saturday";
	    GuildScheduledEventRecurrenceRuleWeekday[GuildScheduledEventRecurrenceRuleWeekday["Sunday"] = 6] = "Sunday";
	})(GuildScheduledEventRecurrenceRuleWeekday || (guildScheduledEvent$3.GuildScheduledEventRecurrenceRuleWeekday = GuildScheduledEventRecurrenceRuleWeekday = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-recurrence-rule-object-guild-scheduled-event-recurrence-rule-month
	 */
	var GuildScheduledEventRecurrenceRuleMonth;
	(function (GuildScheduledEventRecurrenceRuleMonth) {
	    GuildScheduledEventRecurrenceRuleMonth[GuildScheduledEventRecurrenceRuleMonth["January"] = 1] = "January";
	    GuildScheduledEventRecurrenceRuleMonth[GuildScheduledEventRecurrenceRuleMonth["February"] = 2] = "February";
	    GuildScheduledEventRecurrenceRuleMonth[GuildScheduledEventRecurrenceRuleMonth["March"] = 3] = "March";
	    GuildScheduledEventRecurrenceRuleMonth[GuildScheduledEventRecurrenceRuleMonth["April"] = 4] = "April";
	    GuildScheduledEventRecurrenceRuleMonth[GuildScheduledEventRecurrenceRuleMonth["May"] = 5] = "May";
	    GuildScheduledEventRecurrenceRuleMonth[GuildScheduledEventRecurrenceRuleMonth["June"] = 6] = "June";
	    GuildScheduledEventRecurrenceRuleMonth[GuildScheduledEventRecurrenceRuleMonth["July"] = 7] = "July";
	    GuildScheduledEventRecurrenceRuleMonth[GuildScheduledEventRecurrenceRuleMonth["August"] = 8] = "August";
	    GuildScheduledEventRecurrenceRuleMonth[GuildScheduledEventRecurrenceRuleMonth["September"] = 9] = "September";
	    GuildScheduledEventRecurrenceRuleMonth[GuildScheduledEventRecurrenceRuleMonth["October"] = 10] = "October";
	    GuildScheduledEventRecurrenceRuleMonth[GuildScheduledEventRecurrenceRuleMonth["November"] = 11] = "November";
	    GuildScheduledEventRecurrenceRuleMonth[GuildScheduledEventRecurrenceRuleMonth["December"] = 12] = "December";
	})(GuildScheduledEventRecurrenceRuleMonth || (guildScheduledEvent$3.GuildScheduledEventRecurrenceRuleMonth = GuildScheduledEventRecurrenceRuleMonth = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-object-guild-scheduled-event-entity-types
	 */
	var GuildScheduledEventEntityType;
	(function (GuildScheduledEventEntityType) {
	    GuildScheduledEventEntityType[GuildScheduledEventEntityType["StageInstance"] = 1] = "StageInstance";
	    GuildScheduledEventEntityType[GuildScheduledEventEntityType["Voice"] = 2] = "Voice";
	    GuildScheduledEventEntityType[GuildScheduledEventEntityType["External"] = 3] = "External";
	})(GuildScheduledEventEntityType || (guildScheduledEvent$3.GuildScheduledEventEntityType = GuildScheduledEventEntityType = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-object-guild-scheduled-event-status
	 */
	var GuildScheduledEventStatus;
	(function (GuildScheduledEventStatus) {
	    GuildScheduledEventStatus[GuildScheduledEventStatus["Scheduled"] = 1] = "Scheduled";
	    GuildScheduledEventStatus[GuildScheduledEventStatus["Active"] = 2] = "Active";
	    GuildScheduledEventStatus[GuildScheduledEventStatus["Completed"] = 3] = "Completed";
	    GuildScheduledEventStatus[GuildScheduledEventStatus["Canceled"] = 4] = "Canceled";
	})(GuildScheduledEventStatus || (guildScheduledEvent$3.GuildScheduledEventStatus = GuildScheduledEventStatus = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-object-guild-scheduled-event-privacy-level
	 */
	var GuildScheduledEventPrivacyLevel;
	(function (GuildScheduledEventPrivacyLevel) {
	    /**
	     * The scheduled event is only accessible to guild members
	     */
	    GuildScheduledEventPrivacyLevel[GuildScheduledEventPrivacyLevel["GuildOnly"] = 2] = "GuildOnly";
	})(GuildScheduledEventPrivacyLevel || (guildScheduledEvent$3.GuildScheduledEventPrivacyLevel = GuildScheduledEventPrivacyLevel = {}));
	
	return guildScheduledEvent$3;
}

var interactions$3 = {};

var applicationCommands$1 = {};

var chatInput$1 = {};

var attachment$1 = {};

var hasRequiredAttachment$2;

function requireAttachment$2 () {
	if (hasRequiredAttachment$2) return attachment$1;
	hasRequiredAttachment$2 = 1;
	Object.defineProperty(attachment$1, "__esModule", { value: true });
	
	return attachment$1;
}

var base$3 = {};

var hasRequiredBase$4;

function requireBase$4 () {
	if (hasRequiredBase$4) return base$3;
	hasRequiredBase$4 = 1;
	Object.defineProperty(base$3, "__esModule", { value: true });
	
	return base$3;
}

var boolean$1 = {};

var hasRequiredBoolean$1;

function requireBoolean$1 () {
	if (hasRequiredBoolean$1) return boolean$1;
	hasRequiredBoolean$1 = 1;
	Object.defineProperty(boolean$1, "__esModule", { value: true });
	
	return boolean$1;
}

var channel$4 = {};

var hasRequiredChannel$4;

function requireChannel$4 () {
	if (hasRequiredChannel$4) return channel$4;
	hasRequiredChannel$4 = 1;
	Object.defineProperty(channel$4, "__esModule", { value: true });
	
	return channel$4;
}

var integer$1 = {};

var hasRequiredInteger$1;

function requireInteger$1 () {
	if (hasRequiredInteger$1) return integer$1;
	hasRequiredInteger$1 = 1;
	Object.defineProperty(integer$1, "__esModule", { value: true });
	
	return integer$1;
}

var mentionable$1 = {};

var hasRequiredMentionable$1;

function requireMentionable$1 () {
	if (hasRequiredMentionable$1) return mentionable$1;
	hasRequiredMentionable$1 = 1;
	Object.defineProperty(mentionable$1, "__esModule", { value: true });
	
	return mentionable$1;
}

var number$1 = {};

var hasRequiredNumber$1;

function requireNumber$1 () {
	if (hasRequiredNumber$1) return number$1;
	hasRequiredNumber$1 = 1;
	Object.defineProperty(number$1, "__esModule", { value: true });
	
	return number$1;
}

var role$1 = {};

var hasRequiredRole$2;

function requireRole$2 () {
	if (hasRequiredRole$2) return role$1;
	hasRequiredRole$2 = 1;
	Object.defineProperty(role$1, "__esModule", { value: true });
	
	return role$1;
}

var shared$1 = {};

var hasRequiredShared$1;

function requireShared$1 () {
	if (hasRequiredShared$1) return shared$1;
	hasRequiredShared$1 = 1;
	Object.defineProperty(shared$1, "__esModule", { value: true });
	shared$1.ApplicationCommandOptionType = void 0;
	/**
	 * https://discord.com/developers/docs/interactions/application-commands#application-command-object-application-command-option-type
	 */
	var ApplicationCommandOptionType;
	(function (ApplicationCommandOptionType) {
	    ApplicationCommandOptionType[ApplicationCommandOptionType["Subcommand"] = 1] = "Subcommand";
	    ApplicationCommandOptionType[ApplicationCommandOptionType["SubcommandGroup"] = 2] = "SubcommandGroup";
	    ApplicationCommandOptionType[ApplicationCommandOptionType["String"] = 3] = "String";
	    ApplicationCommandOptionType[ApplicationCommandOptionType["Integer"] = 4] = "Integer";
	    ApplicationCommandOptionType[ApplicationCommandOptionType["Boolean"] = 5] = "Boolean";
	    ApplicationCommandOptionType[ApplicationCommandOptionType["User"] = 6] = "User";
	    ApplicationCommandOptionType[ApplicationCommandOptionType["Channel"] = 7] = "Channel";
	    ApplicationCommandOptionType[ApplicationCommandOptionType["Role"] = 8] = "Role";
	    ApplicationCommandOptionType[ApplicationCommandOptionType["Mentionable"] = 9] = "Mentionable";
	    ApplicationCommandOptionType[ApplicationCommandOptionType["Number"] = 10] = "Number";
	    ApplicationCommandOptionType[ApplicationCommandOptionType["Attachment"] = 11] = "Attachment";
	})(ApplicationCommandOptionType || (shared$1.ApplicationCommandOptionType = ApplicationCommandOptionType = {}));
	
	return shared$1;
}

var string$1 = {};

var hasRequiredString$1;

function requireString$1 () {
	if (hasRequiredString$1) return string$1;
	hasRequiredString$1 = 1;
	Object.defineProperty(string$1, "__esModule", { value: true });
	
	return string$1;
}

var subcommand$1 = {};

var hasRequiredSubcommand$1;

function requireSubcommand$1 () {
	if (hasRequiredSubcommand$1) return subcommand$1;
	hasRequiredSubcommand$1 = 1;
	Object.defineProperty(subcommand$1, "__esModule", { value: true });
	
	return subcommand$1;
}

var subcommandGroup$1 = {};

var hasRequiredSubcommandGroup$1;

function requireSubcommandGroup$1 () {
	if (hasRequiredSubcommandGroup$1) return subcommandGroup$1;
	hasRequiredSubcommandGroup$1 = 1;
	Object.defineProperty(subcommandGroup$1, "__esModule", { value: true });
	
	return subcommandGroup$1;
}

var user$5 = {};

var hasRequiredUser$6;

function requireUser$6 () {
	if (hasRequiredUser$6) return user$5;
	hasRequiredUser$6 = 1;
	Object.defineProperty(user$5, "__esModule", { value: true });
	
	return user$5;
}

var hasRequiredChatInput$1;

function requireChatInput$1 () {
	if (hasRequiredChatInput$1) return chatInput$1;
	hasRequiredChatInput$1 = 1;
	(function (exports) {
		var __createBinding = (chatInput$1 && chatInput$1.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (chatInput$1 && chatInput$1.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(requireAttachment$2(), exports);
		__exportStar(requireBase$4(), exports);
		__exportStar(requireBoolean$1(), exports);
		__exportStar(requireChannel$4(), exports);
		__exportStar(requireInteger$1(), exports);
		__exportStar(requireMentionable$1(), exports);
		__exportStar(requireNumber$1(), exports);
		__exportStar(requireRole$2(), exports);
		__exportStar(requireShared$1(), exports);
		__exportStar(requireString$1(), exports);
		__exportStar(requireSubcommand$1(), exports);
		__exportStar(requireSubcommandGroup$1(), exports);
		__exportStar(requireUser$6(), exports);
		
	} (chatInput$1));
	return chatInput$1;
}

var contextMenu$1 = {};

var hasRequiredContextMenu$1;

function requireContextMenu$1 () {
	if (hasRequiredContextMenu$1) return contextMenu$1;
	hasRequiredContextMenu$1 = 1;
	Object.defineProperty(contextMenu$1, "__esModule", { value: true });
	
	return contextMenu$1;
}

var permissions$3 = {};

var hasRequiredPermissions$3;

function requirePermissions$3 () {
	if (hasRequiredPermissions$3) return permissions$3;
	hasRequiredPermissions$3 = 1;
	Object.defineProperty(permissions$3, "__esModule", { value: true });
	permissions$3.APIApplicationCommandPermissionsConstant = permissions$3.ApplicationCommandPermissionType = void 0;
	/**
	 * https://discord.com/developers/docs/interactions/application-commands#application-command-permissions-object-application-command-permission-type
	 */
	var ApplicationCommandPermissionType;
	(function (ApplicationCommandPermissionType) {
	    ApplicationCommandPermissionType[ApplicationCommandPermissionType["Role"] = 1] = "Role";
	    ApplicationCommandPermissionType[ApplicationCommandPermissionType["User"] = 2] = "User";
	    ApplicationCommandPermissionType[ApplicationCommandPermissionType["Channel"] = 3] = "Channel";
	})(ApplicationCommandPermissionType || (permissions$3.ApplicationCommandPermissionType = ApplicationCommandPermissionType = {}));
	/**
	 * https://discord.com/developers/docs/interactions/application-commands#application-command-permissions-object-application-command-permissions-constants
	 */
	permissions$3.APIApplicationCommandPermissionsConstant = {
	    // eslint-disable-next-line unicorn/prefer-native-coercion-functions
	    Everyone: (guildId) => String(guildId),
	    AllChannels: (guildId) => String(BigInt(guildId) - 1n),
	};
	
	return permissions$3;
}

var hasRequiredApplicationCommands$1;

function requireApplicationCommands$1 () {
	if (hasRequiredApplicationCommands$1) return applicationCommands$1;
	hasRequiredApplicationCommands$1 = 1;
	(function (exports) {
		var __createBinding = (applicationCommands$1 && applicationCommands$1.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (applicationCommands$1 && applicationCommands$1.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.EntryPointCommandHandlerType = exports.InteractionContextType = exports.ApplicationIntegrationType = exports.ApplicationCommandType = void 0;
		__exportStar(requireChatInput$1(), exports);
		__exportStar(requireContextMenu$1(), exports);
		__exportStar(requirePermissions$3(), exports);
		/**
		 * https://discord.com/developers/docs/interactions/application-commands#application-command-object-application-command-types
		 */
		var ApplicationCommandType;
		(function (ApplicationCommandType) {
		    /**
		     * Slash commands; a text-based command that shows up when a user types `/`
		     */
		    ApplicationCommandType[ApplicationCommandType["ChatInput"] = 1] = "ChatInput";
		    /**
		     * A UI-based command that shows up when you right click or tap on a user
		     */
		    ApplicationCommandType[ApplicationCommandType["User"] = 2] = "User";
		    /**
		     * A UI-based command that shows up when you right click or tap on a message
		     */
		    ApplicationCommandType[ApplicationCommandType["Message"] = 3] = "Message";
		    /**
		     * A UI-based command that represents the primary way to invoke an app's Activity
		     */
		    ApplicationCommandType[ApplicationCommandType["PrimaryEntryPoint"] = 4] = "PrimaryEntryPoint";
		})(ApplicationCommandType || (exports.ApplicationCommandType = ApplicationCommandType = {}));
		/**
		 * https://discord.com/developers/docs/resources/application#application-object-application-integration-types
		 */
		var ApplicationIntegrationType;
		(function (ApplicationIntegrationType) {
		    /**
		     * App is installable to servers
		     */
		    ApplicationIntegrationType[ApplicationIntegrationType["GuildInstall"] = 0] = "GuildInstall";
		    /**
		     * App is installable to users
		     */
		    ApplicationIntegrationType[ApplicationIntegrationType["UserInstall"] = 1] = "UserInstall";
		})(ApplicationIntegrationType || (exports.ApplicationIntegrationType = ApplicationIntegrationType = {}));
		/**
		 * https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object-interaction-context-types
		 */
		var InteractionContextType;
		(function (InteractionContextType) {
		    /**
		     * Interaction can be used within servers
		     */
		    InteractionContextType[InteractionContextType["Guild"] = 0] = "Guild";
		    /**
		     * Interaction can be used within DMs with the app's bot user
		     */
		    InteractionContextType[InteractionContextType["BotDM"] = 1] = "BotDM";
		    /**
		     * Interaction can be used within Group DMs and DMs other than the app's bot user
		     */
		    InteractionContextType[InteractionContextType["PrivateChannel"] = 2] = "PrivateChannel";
		})(InteractionContextType || (exports.InteractionContextType = InteractionContextType = {}));
		/**
		 * https://discord.com/developers/docs/interactions/application-commands#application-command-object-entry-point-command-handler-types
		 */
		var EntryPointCommandHandlerType;
		(function (EntryPointCommandHandlerType) {
		    /**
		     * The app handles the interaction using an interaction token
		     */
		    EntryPointCommandHandlerType[EntryPointCommandHandlerType["AppHandler"] = 1] = "AppHandler";
		    /**
		     * Discord handles the interaction by launching an Activity and sending a follow-up message without coordinating with
		     * the app
		     */
		    EntryPointCommandHandlerType[EntryPointCommandHandlerType["DiscordLaunchActivity"] = 2] = "DiscordLaunchActivity";
		})(EntryPointCommandHandlerType || (exports.EntryPointCommandHandlerType = EntryPointCommandHandlerType = {}));
		
	} (applicationCommands$1));
	return applicationCommands$1;
}

var autocomplete$1 = {};

var hasRequiredAutocomplete$1;

function requireAutocomplete$1 () {
	if (hasRequiredAutocomplete$1) return autocomplete$1;
	hasRequiredAutocomplete$1 = 1;
	Object.defineProperty(autocomplete$1, "__esModule", { value: true });
	
	return autocomplete$1;
}

var base$2 = {};

var hasRequiredBase$3;

function requireBase$3 () {
	if (hasRequiredBase$3) return base$2;
	hasRequiredBase$3 = 1;
	Object.defineProperty(base$2, "__esModule", { value: true });
	
	return base$2;
}

var messageComponents$1 = {};

var hasRequiredMessageComponents$1;

function requireMessageComponents$1 () {
	if (hasRequiredMessageComponents$1) return messageComponents$1;
	hasRequiredMessageComponents$1 = 1;
	Object.defineProperty(messageComponents$1, "__esModule", { value: true });
	
	return messageComponents$1;
}

var modalSubmit$1 = {};

var hasRequiredModalSubmit$1;

function requireModalSubmit$1 () {
	if (hasRequiredModalSubmit$1) return modalSubmit$1;
	hasRequiredModalSubmit$1 = 1;
	Object.defineProperty(modalSubmit$1, "__esModule", { value: true });
	
	return modalSubmit$1;
}

var ping$1 = {};

var hasRequiredPing$1;

function requirePing$1 () {
	if (hasRequiredPing$1) return ping$1;
	hasRequiredPing$1 = 1;
	Object.defineProperty(ping$1, "__esModule", { value: true });
	
	return ping$1;
}

var responses$1 = {};

var hasRequiredResponses$1;

function requireResponses$1 () {
	if (hasRequiredResponses$1) return responses$1;
	hasRequiredResponses$1 = 1;
	Object.defineProperty(responses$1, "__esModule", { value: true });
	responses$1.InteractionResponseType = responses$1.InteractionType = void 0;
	/**
	 * https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object-interaction-type
	 */
	var InteractionType;
	(function (InteractionType) {
	    InteractionType[InteractionType["Ping"] = 1] = "Ping";
	    InteractionType[InteractionType["ApplicationCommand"] = 2] = "ApplicationCommand";
	    InteractionType[InteractionType["MessageComponent"] = 3] = "MessageComponent";
	    InteractionType[InteractionType["ApplicationCommandAutocomplete"] = 4] = "ApplicationCommandAutocomplete";
	    InteractionType[InteractionType["ModalSubmit"] = 5] = "ModalSubmit";
	})(InteractionType || (responses$1.InteractionType = InteractionType = {}));
	/**
	 * https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-response-object-interaction-callback-type
	 */
	var InteractionResponseType;
	(function (InteractionResponseType) {
	    /**
	     * ACK a `Ping`
	     */
	    InteractionResponseType[InteractionResponseType["Pong"] = 1] = "Pong";
	    /**
	     * Respond to an interaction with a message
	     */
	    InteractionResponseType[InteractionResponseType["ChannelMessageWithSource"] = 4] = "ChannelMessageWithSource";
	    /**
	     * ACK an interaction and edit to a response later, the user sees a loading state
	     */
	    InteractionResponseType[InteractionResponseType["DeferredChannelMessageWithSource"] = 5] = "DeferredChannelMessageWithSource";
	    /**
	     * ACK a button interaction and update it to a loading state
	     */
	    InteractionResponseType[InteractionResponseType["DeferredMessageUpdate"] = 6] = "DeferredMessageUpdate";
	    /**
	     * ACK a button interaction and edit the message to which the button was attached
	     */
	    InteractionResponseType[InteractionResponseType["UpdateMessage"] = 7] = "UpdateMessage";
	    /**
	     * For autocomplete interactions
	     */
	    InteractionResponseType[InteractionResponseType["ApplicationCommandAutocompleteResult"] = 8] = "ApplicationCommandAutocompleteResult";
	    /**
	     * Respond to an interaction with an modal for a user to fill-out
	     */
	    InteractionResponseType[InteractionResponseType["Modal"] = 9] = "Modal";
	    /**
	     * Respond to an interaction with an upgrade button, only available for apps with monetization enabled
	     *
	     * @deprecated See https://discord.com/developers/docs/change-log#premium-apps-new-premium-button-style-deep-linking-url-schemes
	     */
	    InteractionResponseType[InteractionResponseType["PremiumRequired"] = 10] = "PremiumRequired";
	    /**
	     * Launch the Activity associated with the app.
	     *
	     * @remarks
	     * Only available for apps with Activities enabled
	     */
	    InteractionResponseType[InteractionResponseType["LaunchActivity"] = 12] = "LaunchActivity";
	})(InteractionResponseType || (responses$1.InteractionResponseType = InteractionResponseType = {}));
	
	return responses$1;
}

var hasRequiredInteractions$3;

function requireInteractions$3 () {
	if (hasRequiredInteractions$3) return interactions$3;
	hasRequiredInteractions$3 = 1;
	(function (exports) {
		var __createBinding = (interactions$3 && interactions$3.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (interactions$3 && interactions$3.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(requireApplicationCommands$1(), exports);
		__exportStar(requireAutocomplete$1(), exports);
		__exportStar(requireBase$3(), exports);
		__exportStar(requireMessageComponents$1(), exports);
		__exportStar(requireModalSubmit$1(), exports);
		__exportStar(requirePing$1(), exports);
		__exportStar(requireResponses$1(), exports);
		
	} (interactions$3));
	return interactions$3;
}

var invite$3 = {};

var hasRequiredInvite$4;

function requireInvite$4 () {
	if (hasRequiredInvite$4) return invite$3;
	hasRequiredInvite$4 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/invite
	 */
	Object.defineProperty(invite$3, "__esModule", { value: true });
	invite$3.InviteTargetType = invite$3.InviteType = void 0;
	/**
	 * https://discord.com/developers/docs/resources/invite#invite-object-invite-types
	 */
	var InviteType;
	(function (InviteType) {
	    InviteType[InviteType["Guild"] = 0] = "Guild";
	    InviteType[InviteType["GroupDM"] = 1] = "GroupDM";
	    InviteType[InviteType["Friend"] = 2] = "Friend";
	})(InviteType || (invite$3.InviteType = InviteType = {}));
	/**
	 * https://discord.com/developers/docs/resources/invite#invite-object-invite-target-types
	 */
	var InviteTargetType;
	(function (InviteTargetType) {
	    InviteTargetType[InviteTargetType["Stream"] = 1] = "Stream";
	    InviteTargetType[InviteTargetType["EmbeddedApplication"] = 2] = "EmbeddedApplication";
	})(InviteTargetType || (invite$3.InviteTargetType = InviteTargetType = {}));
	
	return invite$3;
}

var oauth2$3 = {};

var hasRequiredOauth2$3;

function requireOauth2$3 () {
	if (hasRequiredOauth2$3) return oauth2$3;
	hasRequiredOauth2$3 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/topics/oauth2
	 */
	Object.defineProperty(oauth2$3, "__esModule", { value: true });
	oauth2$3.OAuth2Scopes = void 0;
	var OAuth2Scopes;
	(function (OAuth2Scopes) {
	    /**
	     * For oauth2 bots, this puts the bot in the user's selected guild by default
	     */
	    OAuth2Scopes["Bot"] = "bot";
	    /**
	     * Allows [/users/@me/connections](https://discord.com/developers/docs/resources/user#get-user-connections)
	     * to return linked third-party accounts
	     *
	     * See https://discord.com/developers/docs/resources/user#get-user-connections
	     */
	    OAuth2Scopes["Connections"] = "connections";
	    /**
	     * Allows your app to see information about the user's DMs and group DMs - requires Discord approval
	     */
	    OAuth2Scopes["DMChannelsRead"] = "dm_channels.read";
	    /**
	     * Enables [/users/@me](https://discord.com/developers/docs/resources/user#get-current-user) to return an `email`
	     *
	     * See https://discord.com/developers/docs/resources/user#get-current-user
	     */
	    OAuth2Scopes["Email"] = "email";
	    /**
	     * Allows [/users/@me](https://discord.com/developers/docs/resources/user#get-current-user) without `email`
	     *
	     * See https://discord.com/developers/docs/resources/user#get-current-user
	     */
	    OAuth2Scopes["Identify"] = "identify";
	    /**
	     * Allows [/users/@me/guilds](https://discord.com/developers/docs/resources/user#get-current-user-guilds)
	     * to return basic information about all of a user's guilds
	     *
	     * See https://discord.com/developers/docs/resources/user#get-current-user-guilds
	     */
	    OAuth2Scopes["Guilds"] = "guilds";
	    /**
	     * Allows [/guilds/{guild.id}/members/{user.id}](https://discord.com/developers/docs/resources/guild#add-guild-member)
	     * to be used for joining users to a guild
	     *
	     * See https://discord.com/developers/docs/resources/guild#add-guild-member
	     */
	    OAuth2Scopes["GuildsJoin"] = "guilds.join";
	    /**
	     * Allows /users/@me/guilds/{guild.id}/member to return a user's member information in a guild
	     *
	     * See https://discord.com/developers/docs/resources/user#get-current-user-guild-member
	     */
	    OAuth2Scopes["GuildsMembersRead"] = "guilds.members.read";
	    /**
	     * Allows your app to join users to a group dm
	     *
	     * See https://discord.com/developers/docs/resources/channel#group-dm-add-recipient
	     */
	    OAuth2Scopes["GroupDMJoins"] = "gdm.join";
	    /**
	     * For local rpc server api access, this allows you to read messages from all client channels
	     * (otherwise restricted to channels/guilds your app creates)
	     */
	    OAuth2Scopes["MessagesRead"] = "messages.read";
	    /**
	     * Allows your app to update a user's connection and metadata for the app
	     */
	    OAuth2Scopes["RoleConnectionsWrite"] = "role_connections.write";
	    /**
	     * For local rpc server access, this allows you to control a user's local Discord client - requires Discord approval
	     */
	    OAuth2Scopes["RPC"] = "rpc";
	    /**
	     * For local rpc server api access, this allows you to receive notifications pushed out to the user - requires Discord approval
	     */
	    OAuth2Scopes["RPCNotificationsRead"] = "rpc.notifications.read";
	    /**
	     * This generates a webhook that is returned in the oauth token response for authorization code grants
	     */
	    OAuth2Scopes["WebhookIncoming"] = "webhook.incoming";
	    /**
	     * Allows your app to connect to voice on user's behalf and see all the voice members - requires Discord approval
	     */
	    OAuth2Scopes["Voice"] = "voice";
	    /**
	     * Allows your app to upload/update builds for a user's applications - requires Discord approval
	     */
	    OAuth2Scopes["ApplicationsBuildsUpload"] = "applications.builds.upload";
	    /**
	     * Allows your app to read build data for a user's applications
	     */
	    OAuth2Scopes["ApplicationsBuildsRead"] = "applications.builds.read";
	    /**
	     * Allows your app to read and update store data (SKUs, store listings, achievements, etc.) for a user's applications
	     */
	    OAuth2Scopes["ApplicationsStoreUpdate"] = "applications.store.update";
	    /**
	     * Allows your app to read entitlements for a user's applications
	     */
	    OAuth2Scopes["ApplicationsEntitlements"] = "applications.entitlements";
	    /**
	     * Allows your app to know a user's friends and implicit relationships - requires Discord approval
	     */
	    OAuth2Scopes["RelationshipsRead"] = "relationships.read";
	    /**
	     * Allows your app to fetch data from a user's "Now Playing/Recently Played" list - requires Discord approval
	     */
	    OAuth2Scopes["ActivitiesRead"] = "activities.read";
	    /**
	     * Allows your app to update a user's activity - requires Discord approval (NOT REQUIRED FOR GAMESDK ACTIVITY MANAGER)
	     *
	     * See https://discord.com/developers/docs/game-sdk/activities
	     */
	    OAuth2Scopes["ActivitiesWrite"] = "activities.write";
	    /**
	     * Allows your app to use Application Commands in a guild
	     *
	     * See https://discord.com/developers/docs/interactions/application-commands
	     */
	    OAuth2Scopes["ApplicationsCommands"] = "applications.commands";
	    /**
	     * Allows your app to update its Application Commands via this bearer token - client credentials grant only
	     *
	     * See https://discord.com/developers/docs/interactions/application-commands
	     */
	    OAuth2Scopes["ApplicationsCommandsUpdate"] = "applications.commands.update";
	    /**
	     * Allows your app to update permissions for its commands using a Bearer token - client credentials grant only
	     *
	     * See https://discord.com/developers/docs/interactions/application-commands
	     */
	    OAuth2Scopes["ApplicationCommandsPermissionsUpdate"] = "applications.commands.permissions.update";
	})(OAuth2Scopes || (oauth2$3.OAuth2Scopes = OAuth2Scopes = {}));
	
	return oauth2$3;
}

var poll$3 = {};

var hasRequiredPoll$4;

function requirePoll$4 () {
	if (hasRequiredPoll$4) return poll$3;
	hasRequiredPoll$4 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/poll
	 */
	Object.defineProperty(poll$3, "__esModule", { value: true });
	poll$3.PollLayoutType = void 0;
	/**
	 * https://discord.com/developers/docs/resources/poll#layout-type
	 */
	var PollLayoutType;
	(function (PollLayoutType) {
	    /**
	     * The, uhm, default layout type
	     */
	    PollLayoutType[PollLayoutType["Default"] = 1] = "Default";
	})(PollLayoutType || (poll$3.PollLayoutType = PollLayoutType = {}));
	
	return poll$3;
}

var permissions$2 = {};

var hasRequiredPermissions$2;

function requirePermissions$2 () {
	if (hasRequiredPermissions$2) return permissions$2;
	hasRequiredPermissions$2 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/topics/permissions
	 */
	Object.defineProperty(permissions$2, "__esModule", { value: true });
	permissions$2.RoleFlags = void 0;
	/**
	 * https://discord.com/developers/docs/topics/permissions#role-object-role-flags
	 */
	var RoleFlags;
	(function (RoleFlags) {
	    /**
	     * Role can be selected by members in an onboarding prompt
	     */
	    RoleFlags[RoleFlags["InPrompt"] = 1] = "InPrompt";
	})(RoleFlags || (permissions$2.RoleFlags = RoleFlags = {}));
	
	return permissions$2;
}

var stageInstance$3 = {};

var hasRequiredStageInstance$4;

function requireStageInstance$4 () {
	if (hasRequiredStageInstance$4) return stageInstance$3;
	hasRequiredStageInstance$4 = 1;
	Object.defineProperty(stageInstance$3, "__esModule", { value: true });
	stageInstance$3.StageInstancePrivacyLevel = void 0;
	/**
	 * https://discord.com/developers/docs/resources/stage-instance#stage-instance-object-privacy-level
	 */
	var StageInstancePrivacyLevel;
	(function (StageInstancePrivacyLevel) {
	    /**
	     * The stage instance is visible publicly, such as on stage discovery
	     *
	     * @deprecated
	     */
	    StageInstancePrivacyLevel[StageInstancePrivacyLevel["Public"] = 1] = "Public";
	    /**
	     * The stage instance is visible to only guild members
	     */
	    StageInstancePrivacyLevel[StageInstancePrivacyLevel["GuildOnly"] = 2] = "GuildOnly";
	})(StageInstancePrivacyLevel || (stageInstance$3.StageInstancePrivacyLevel = StageInstancePrivacyLevel = {}));
	
	return stageInstance$3;
}

var sticker$3 = {};

var hasRequiredSticker$4;

function requireSticker$4 () {
	if (hasRequiredSticker$4) return sticker$3;
	hasRequiredSticker$4 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/sticker
	 */
	Object.defineProperty(sticker$3, "__esModule", { value: true });
	sticker$3.StickerFormatType = sticker$3.StickerType = void 0;
	/**
	 * https://discord.com/developers/docs/resources/sticker#sticker-object-sticker-types
	 */
	var StickerType;
	(function (StickerType) {
	    /**
	     * An official sticker in a pack
	     */
	    StickerType[StickerType["Standard"] = 1] = "Standard";
	    /**
	     * A sticker uploaded to a guild for the guild's members
	     */
	    StickerType[StickerType["Guild"] = 2] = "Guild";
	})(StickerType || (sticker$3.StickerType = StickerType = {}));
	/**
	 * https://discord.com/developers/docs/resources/sticker#sticker-object-sticker-format-types
	 */
	var StickerFormatType;
	(function (StickerFormatType) {
	    StickerFormatType[StickerFormatType["PNG"] = 1] = "PNG";
	    StickerFormatType[StickerFormatType["APNG"] = 2] = "APNG";
	    StickerFormatType[StickerFormatType["Lottie"] = 3] = "Lottie";
	    StickerFormatType[StickerFormatType["GIF"] = 4] = "GIF";
	})(StickerFormatType || (sticker$3.StickerFormatType = StickerFormatType = {}));
	
	return sticker$3;
}

var teams$1 = {};

var hasRequiredTeams$1;

function requireTeams$1 () {
	if (hasRequiredTeams$1) return teams$1;
	hasRequiredTeams$1 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/topics/teams
	 */
	Object.defineProperty(teams$1, "__esModule", { value: true });
	teams$1.TeamMemberRole = teams$1.TeamMemberMembershipState = void 0;
	/**
	 * https://discord.com/developers/docs/topics/teams#data-models-membership-state-enum
	 */
	var TeamMemberMembershipState;
	(function (TeamMemberMembershipState) {
	    TeamMemberMembershipState[TeamMemberMembershipState["Invited"] = 1] = "Invited";
	    TeamMemberMembershipState[TeamMemberMembershipState["Accepted"] = 2] = "Accepted";
	})(TeamMemberMembershipState || (teams$1.TeamMemberMembershipState = TeamMemberMembershipState = {}));
	/**
	 * https://discord.com/developers/docs/topics/teams#team-member-roles-team-member-role-types
	 */
	var TeamMemberRole;
	(function (TeamMemberRole) {
	    TeamMemberRole["Admin"] = "admin";
	    TeamMemberRole["Developer"] = "developer";
	    TeamMemberRole["ReadOnly"] = "read_only";
	})(TeamMemberRole || (teams$1.TeamMemberRole = TeamMemberRole = {}));
	
	return teams$1;
}

var template$3 = {};

var hasRequiredTemplate$3;

function requireTemplate$3 () {
	if (hasRequiredTemplate$3) return template$3;
	hasRequiredTemplate$3 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/guild-template
	 */
	Object.defineProperty(template$3, "__esModule", { value: true });
	
	return template$3;
}

var user$4 = {};

var hasRequiredUser$5;

function requireUser$5 () {
	if (hasRequiredUser$5) return user$4;
	hasRequiredUser$5 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/user
	 */
	Object.defineProperty(user$4, "__esModule", { value: true });
	user$4.ConnectionVisibility = user$4.ConnectionService = user$4.UserPremiumType = user$4.UserFlags = void 0;
	/**
	 * https://discord.com/developers/docs/resources/user#user-object-user-flags
	 */
	var UserFlags;
	(function (UserFlags) {
	    /**
	     * Discord Employee
	     */
	    UserFlags[UserFlags["Staff"] = 1] = "Staff";
	    /**
	     * Partnered Server Owner
	     */
	    UserFlags[UserFlags["Partner"] = 2] = "Partner";
	    /**
	     * HypeSquad Events Member
	     */
	    UserFlags[UserFlags["Hypesquad"] = 4] = "Hypesquad";
	    /**
	     * Bug Hunter Level 1
	     */
	    UserFlags[UserFlags["BugHunterLevel1"] = 8] = "BugHunterLevel1";
	    /**
	     * @unstable This user flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    UserFlags[UserFlags["MFASMS"] = 16] = "MFASMS";
	    /**
	     * @unstable This user flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    UserFlags[UserFlags["PremiumPromoDismissed"] = 32] = "PremiumPromoDismissed";
	    /**
	     * House Bravery Member
	     */
	    UserFlags[UserFlags["HypeSquadOnlineHouse1"] = 64] = "HypeSquadOnlineHouse1";
	    /**
	     * House Brilliance Member
	     */
	    UserFlags[UserFlags["HypeSquadOnlineHouse2"] = 128] = "HypeSquadOnlineHouse2";
	    /**
	     * House Balance Member
	     */
	    UserFlags[UserFlags["HypeSquadOnlineHouse3"] = 256] = "HypeSquadOnlineHouse3";
	    /**
	     * Early Nitro Supporter
	     */
	    UserFlags[UserFlags["PremiumEarlySupporter"] = 512] = "PremiumEarlySupporter";
	    /**
	     * User is a [team](https://discord.com/developers/docs/topics/teams)
	     */
	    UserFlags[UserFlags["TeamPseudoUser"] = 1024] = "TeamPseudoUser";
	    /**
	     * @unstable This user flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    UserFlags[UserFlags["HasUnreadUrgentMessages"] = 8192] = "HasUnreadUrgentMessages";
	    /**
	     * Bug Hunter Level 2
	     */
	    UserFlags[UserFlags["BugHunterLevel2"] = 16384] = "BugHunterLevel2";
	    /**
	     * Verified Bot
	     */
	    UserFlags[UserFlags["VerifiedBot"] = 65536] = "VerifiedBot";
	    /**
	     * Early Verified Bot Developer
	     */
	    UserFlags[UserFlags["VerifiedDeveloper"] = 131072] = "VerifiedDeveloper";
	    /**
	     * Moderator Programs Alumni
	     */
	    UserFlags[UserFlags["CertifiedModerator"] = 262144] = "CertifiedModerator";
	    /**
	     * Bot uses only [HTTP interactions](https://discord.com/developers/docs/interactions/receiving-and-responding#receiving-an-interaction) and is shown in the online member list
	     */
	    UserFlags[UserFlags["BotHTTPInteractions"] = 524288] = "BotHTTPInteractions";
	    /**
	     * User has been identified as spammer
	     *
	     * @unstable This user flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    UserFlags[UserFlags["Spammer"] = 1048576] = "Spammer";
	    /**
	     * @unstable This user flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    UserFlags[UserFlags["DisablePremium"] = 2097152] = "DisablePremium";
	    /**
	     * User is an [Active Developer](https://support-dev.discord.com/hc/articles/10113997751447)
	     */
	    UserFlags[UserFlags["ActiveDeveloper"] = 4194304] = "ActiveDeveloper";
	    /**
	     * User's account has been [quarantined](https://support.discord.com/hc/articles/6461420677527) based on recent activity
	     *
	     * @unstable This user flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     * @privateRemarks
	     *
	     * This value would be 1 << 44, but bit shifting above 1 << 30 requires bigints
	     */
	    UserFlags[UserFlags["Quarantined"] = 17592186044416] = "Quarantined";
	    /**
	     * @unstable This user flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     * @privateRemarks
	     *
	     * This value would be 1 << 50, but bit shifting above 1 << 30 requires bigints
	     */
	    UserFlags[UserFlags["Collaborator"] = 1125899906842624] = "Collaborator";
	    /**
	     * @unstable This user flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     * @privateRemarks
	     *
	     * This value would be 1 << 51, but bit shifting above 1 << 30 requires bigints
	     */
	    UserFlags[UserFlags["RestrictedCollaborator"] = 2251799813685248] = "RestrictedCollaborator";
	})(UserFlags || (user$4.UserFlags = UserFlags = {}));
	/**
	 * https://discord.com/developers/docs/resources/user#user-object-premium-types
	 */
	var UserPremiumType;
	(function (UserPremiumType) {
	    UserPremiumType[UserPremiumType["None"] = 0] = "None";
	    UserPremiumType[UserPremiumType["NitroClassic"] = 1] = "NitroClassic";
	    UserPremiumType[UserPremiumType["Nitro"] = 2] = "Nitro";
	    UserPremiumType[UserPremiumType["NitroBasic"] = 3] = "NitroBasic";
	})(UserPremiumType || (user$4.UserPremiumType = UserPremiumType = {}));
	var ConnectionService;
	(function (ConnectionService) {
	    ConnectionService["AmazonMusic"] = "amazon-music";
	    ConnectionService["BattleNet"] = "battlenet";
	    ConnectionService["BungieNet"] = "bungie";
	    ConnectionService["Domain"] = "domain";
	    ConnectionService["eBay"] = "ebay";
	    ConnectionService["EpicGames"] = "epicgames";
	    ConnectionService["Facebook"] = "facebook";
	    ConnectionService["GitHub"] = "github";
	    ConnectionService["Instagram"] = "instagram";
	    ConnectionService["LeagueOfLegends"] = "leagueoflegends";
	    ConnectionService["PayPal"] = "paypal";
	    ConnectionService["PlayStationNetwork"] = "playstation";
	    ConnectionService["Reddit"] = "reddit";
	    ConnectionService["RiotGames"] = "riotgames";
	    ConnectionService["Roblox"] = "roblox";
	    ConnectionService["Spotify"] = "spotify";
	    ConnectionService["Skype"] = "skype";
	    ConnectionService["Steam"] = "steam";
	    ConnectionService["TikTok"] = "tiktok";
	    ConnectionService["Twitch"] = "twitch";
	    ConnectionService["X"] = "twitter";
	    /**
	     * @deprecated This is the old name for {@apilink ConnectionService#X}
	     */
	    ConnectionService["Twitter"] = "twitter";
	    ConnectionService["Xbox"] = "xbox";
	    ConnectionService["YouTube"] = "youtube";
	})(ConnectionService || (user$4.ConnectionService = ConnectionService = {}));
	var ConnectionVisibility;
	(function (ConnectionVisibility) {
	    /**
	     * Invisible to everyone except the user themselves
	     */
	    ConnectionVisibility[ConnectionVisibility["None"] = 0] = "None";
	    /**
	     * Visible to everyone
	     */
	    ConnectionVisibility[ConnectionVisibility["Everyone"] = 1] = "Everyone";
	})(ConnectionVisibility || (user$4.ConnectionVisibility = ConnectionVisibility = {}));
	
	return user$4;
}

var voice$3 = {};

var hasRequiredVoice$3;

function requireVoice$3 () {
	if (hasRequiredVoice$3) return voice$3;
	hasRequiredVoice$3 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/voice
	 */
	Object.defineProperty(voice$3, "__esModule", { value: true });
	
	return voice$3;
}

var webhook$3 = {};

var hasRequiredWebhook$4;

function requireWebhook$4 () {
	if (hasRequiredWebhook$4) return webhook$3;
	hasRequiredWebhook$4 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/webhook
	 */
	Object.defineProperty(webhook$3, "__esModule", { value: true });
	webhook$3.WebhookType = void 0;
	var WebhookType;
	(function (WebhookType) {
	    /**
	     * Incoming Webhooks can post messages to channels with a generated token
	     */
	    WebhookType[WebhookType["Incoming"] = 1] = "Incoming";
	    /**
	     * Channel Follower Webhooks are internal webhooks used with Channel Following to post new messages into channels
	     */
	    WebhookType[WebhookType["ChannelFollower"] = 2] = "ChannelFollower";
	    /**
	     * Application webhooks are webhooks used with Interactions
	     */
	    WebhookType[WebhookType["Application"] = 3] = "Application";
	})(WebhookType || (webhook$3.WebhookType = WebhookType = {}));
	
	return webhook$3;
}

var monetization$3 = {};

var hasRequiredMonetization$3;

function requireMonetization$3 () {
	if (hasRequiredMonetization$3) return monetization$3;
	hasRequiredMonetization$3 = 1;
	Object.defineProperty(monetization$3, "__esModule", { value: true });
	monetization$3.SubscriptionStatus = monetization$3.SKUType = monetization$3.SKUFlags = monetization$3.EntitlementType = void 0;
	/**
	 * https://discord.com/developers/docs/monetization/entitlements#entitlement-object-entitlement-types
	 */
	var EntitlementType;
	(function (EntitlementType) {
	    /**
	     * Entitlement was purchased by user
	     */
	    EntitlementType[EntitlementType["Purchase"] = 1] = "Purchase";
	    /**
	     * Entitlement for Discord Nitro subscription
	     */
	    EntitlementType[EntitlementType["PremiumSubscription"] = 2] = "PremiumSubscription";
	    /**
	     * Entitlement was gifted by developer
	     */
	    EntitlementType[EntitlementType["DeveloperGift"] = 3] = "DeveloperGift";
	    /**
	     * Entitlement was purchased by a dev in application test mode
	     */
	    EntitlementType[EntitlementType["TestModePurchase"] = 4] = "TestModePurchase";
	    /**
	     * Entitlement was granted when the SKU was free
	     */
	    EntitlementType[EntitlementType["FreePurchase"] = 5] = "FreePurchase";
	    /**
	     * Entitlement was gifted by another user
	     */
	    EntitlementType[EntitlementType["UserGift"] = 6] = "UserGift";
	    /**
	     * Entitlement was claimed by user for free as a Nitro Subscriber
	     */
	    EntitlementType[EntitlementType["PremiumPurchase"] = 7] = "PremiumPurchase";
	    /**
	     * Entitlement was purchased as an app subscription
	     */
	    EntitlementType[EntitlementType["ApplicationSubscription"] = 8] = "ApplicationSubscription";
	})(EntitlementType || (monetization$3.EntitlementType = EntitlementType = {}));
	/**
	 * https://discord.com/developers/docs/monetization/skus#sku-object-sku-flags
	 */
	var SKUFlags;
	(function (SKUFlags) {
	    /**
	     * SKU is available for purchase
	     */
	    SKUFlags[SKUFlags["Available"] = 4] = "Available";
	    /**
	     * Recurring SKU that can be purchased by a user and applied to a single server.
	     * Grants access to every user in that server.
	     */
	    SKUFlags[SKUFlags["GuildSubscription"] = 128] = "GuildSubscription";
	    /**
	     * Recurring SKU purchased by a user for themselves. Grants access to the purchasing user in every server.
	     */
	    SKUFlags[SKUFlags["UserSubscription"] = 256] = "UserSubscription";
	})(SKUFlags || (monetization$3.SKUFlags = SKUFlags = {}));
	/**
	 * https://discord.com/developers/docs/resources/sku#sku-object-sku-types
	 */
	var SKUType;
	(function (SKUType) {
	    /**
	     * Durable one-time purchase
	     */
	    SKUType[SKUType["Durable"] = 2] = "Durable";
	    /**
	     * Consumable one-time purchase
	     */
	    SKUType[SKUType["Consumable"] = 3] = "Consumable";
	    /**
	     * Represents a recurring subscription
	     */
	    SKUType[SKUType["Subscription"] = 5] = "Subscription";
	    /**
	     * System-generated group for each Subscription SKU created
	     */
	    SKUType[SKUType["SubscriptionGroup"] = 6] = "SubscriptionGroup";
	})(SKUType || (monetization$3.SKUType = SKUType = {}));
	/**
	 * https://discord.com/developers/docs/resources/subscription#subscription-statuses
	 */
	var SubscriptionStatus;
	(function (SubscriptionStatus) {
	    /**
	     * Subscription is active and scheduled to renew.
	     */
	    SubscriptionStatus[SubscriptionStatus["Active"] = 0] = "Active";
	    /**
	     * Subscription is active but will not renew.
	     */
	    SubscriptionStatus[SubscriptionStatus["Ending"] = 1] = "Ending";
	    /**
	     * Subscription is inactive and not being charged.
	     */
	    SubscriptionStatus[SubscriptionStatus["Inactive"] = 2] = "Inactive";
	})(SubscriptionStatus || (monetization$3.SubscriptionStatus = SubscriptionStatus = {}));
	
	return monetization$3;
}

var hasRequiredV10$a;

function requireV10$a () {
	if (hasRequiredV10$a) return v10$i;
	hasRequiredV10$a = 1;
	(function (exports) {
		var __createBinding = (v10$i && v10$i.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (v10$i && v10$i.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(requireCommon$6(), exports);
		__exportStar(requireApplication$4(), exports);
		__exportStar(requireAuditLog$3(), exports);
		__exportStar(requireAutoModeration$3(), exports);
		__exportStar(requireChannel$5(), exports);
		__exportStar(requireEmoji$4(), exports);
		__exportStar(requireGateway$3(), exports);
		__exportStar(requireGuild$4(), exports);
		__exportStar(requireGuildScheduledEvent$4(), exports);
		__exportStar(requireInteractions$3(), exports);
		__exportStar(requireInvite$4(), exports);
		__exportStar(requireOauth2$3(), exports);
		__exportStar(requirePoll$4(), exports);
		__exportStar(requirePermissions$2(), exports);
		__exportStar(requireStageInstance$4(), exports);
		__exportStar(requireSticker$4(), exports);
		__exportStar(requireTeams$1(), exports);
		__exportStar(requireTemplate$3(), exports);
		__exportStar(requireUser$5(), exports);
		__exportStar(requireVoice$3(), exports);
		__exportStar(requireWebhook$4(), exports);
		__exportStar(requireMonetization$3(), exports);
		
	} (v10$i));
	return v10$i;
}

var v10Exports$8 = requireV10$a();
var mod$9 = /*@__PURE__*/getDefaultExportFromCjs(v10Exports$8);

const APIApplicationCommandPermissionsConstant$1 = mod$9.APIApplicationCommandPermissionsConstant;
const ActivityFlags$1 = mod$9.ActivityFlags;
const ActivityPlatform$1 = mod$9.ActivityPlatform;
const ActivityType$1 = mod$9.ActivityType;
const AllowedMentionsTypes$1 = mod$9.AllowedMentionsTypes;
const ApplicationCommandOptionType$1 = mod$9.ApplicationCommandOptionType;
const ApplicationCommandPermissionType$1 = mod$9.ApplicationCommandPermissionType;
const ApplicationCommandType$1 = mod$9.ApplicationCommandType;
const ApplicationFlags$1 = mod$9.ApplicationFlags;
const ApplicationIntegrationType = mod$9.ApplicationIntegrationType;
const ApplicationRoleConnectionMetadataType$1 = mod$9.ApplicationRoleConnectionMetadataType;
const AttachmentFlags$1 = mod$9.AttachmentFlags;
const AuditLogEvent$1 = mod$9.AuditLogEvent;
const AuditLogOptionsType$1 = mod$9.AuditLogOptionsType;
const AutoModerationActionType$1 = mod$9.AutoModerationActionType;
const AutoModerationRuleEventType$1 = mod$9.AutoModerationRuleEventType;
const AutoModerationRuleKeywordPresetType$1 = mod$9.AutoModerationRuleKeywordPresetType;
const AutoModerationRuleTriggerType$1 = mod$9.AutoModerationRuleTriggerType;
const ButtonStyle$1 = mod$9.ButtonStyle;
const ChannelFlags$1 = mod$9.ChannelFlags;
const ChannelType$1 = mod$9.ChannelType;
const ComponentType$1 = mod$9.ComponentType;
const ConnectionService$1 = mod$9.ConnectionService;
const ConnectionVisibility$1 = mod$9.ConnectionVisibility;
const EmbedType$1 = mod$9.EmbedType;
const EntitlementType$1 = mod$9.EntitlementType;
const EntryPointCommandHandlerType = mod$9.EntryPointCommandHandlerType;
const ForumLayoutType$1 = mod$9.ForumLayoutType;
const GuildDefaultMessageNotifications$1 = mod$9.GuildDefaultMessageNotifications;
const GuildExplicitContentFilter$1 = mod$9.GuildExplicitContentFilter;
const GuildFeature$1 = mod$9.GuildFeature;
const GuildHubType$1 = mod$9.GuildHubType;
const GuildMFALevel$1 = mod$9.GuildMFALevel;
const GuildMemberFlags$1 = mod$9.GuildMemberFlags;
const GuildNSFWLevel$1 = mod$9.GuildNSFWLevel;
const GuildOnboardingMode$1 = mod$9.GuildOnboardingMode;
const GuildOnboardingPromptType$1 = mod$9.GuildOnboardingPromptType;
const GuildPremiumTier$1 = mod$9.GuildPremiumTier;
const GuildScheduledEventEntityType$1 = mod$9.GuildScheduledEventEntityType;
const GuildScheduledEventPrivacyLevel$1 = mod$9.GuildScheduledEventPrivacyLevel;
const GuildScheduledEventRecurrenceRuleFrequency = mod$9.GuildScheduledEventRecurrenceRuleFrequency;
const GuildScheduledEventRecurrenceRuleMonth = mod$9.GuildScheduledEventRecurrenceRuleMonth;
const GuildScheduledEventRecurrenceRuleWeekday = mod$9.GuildScheduledEventRecurrenceRuleWeekday;
const GuildScheduledEventStatus$1 = mod$9.GuildScheduledEventStatus;
const GuildSystemChannelFlags$1 = mod$9.GuildSystemChannelFlags;
const GuildVerificationLevel$1 = mod$9.GuildVerificationLevel;
const GuildWidgetStyle$1 = mod$9.GuildWidgetStyle;
const IntegrationExpireBehavior$1 = mod$9.IntegrationExpireBehavior;
const InteractionContextType = mod$9.InteractionContextType;
const InteractionResponseType$1 = mod$9.InteractionResponseType;
const InteractionType$1 = mod$9.InteractionType;
const InviteTargetType$1 = mod$9.InviteTargetType;
const InviteType$1 = mod$9.InviteType;
const MembershipScreeningFieldType$1 = mod$9.MembershipScreeningFieldType;
const MessageActivityType$1 = mod$9.MessageActivityType;
const MessageFlags$1 = mod$9.MessageFlags;
const MessageReferenceType = mod$9.MessageReferenceType;
const MessageType$1 = mod$9.MessageType;
const OAuth2Scopes$1 = mod$9.OAuth2Scopes;
const OverwriteType$1 = mod$9.OverwriteType;
const PermissionFlagsBits$1 = mod$9.PermissionFlagsBits;
const PollLayoutType$1 = mod$9.PollLayoutType;
const PresenceUpdateStatus$1 = mod$9.PresenceUpdateStatus;
const RoleFlags$1 = mod$9.RoleFlags;
const SKUFlags$1 = mod$9.SKUFlags;
const SKUType$1 = mod$9.SKUType;
const SelectMenuDefaultValueType$1 = mod$9.SelectMenuDefaultValueType;
const SortOrderType$1 = mod$9.SortOrderType;
const StageInstancePrivacyLevel$1 = mod$9.StageInstancePrivacyLevel;
const StickerFormatType$1 = mod$9.StickerFormatType;
const StickerType$1 = mod$9.StickerType;
const SubscriptionStatus = mod$9.SubscriptionStatus;
const TeamMemberMembershipState$1 = mod$9.TeamMemberMembershipState;
const TeamMemberRole$1 = mod$9.TeamMemberRole;
const TextInputStyle$1 = mod$9.TextInputStyle;
const ThreadAutoArchiveDuration$1 = mod$9.ThreadAutoArchiveDuration;
const ThreadMemberFlags$1 = mod$9.ThreadMemberFlags;
const UserFlags$1 = mod$9.UserFlags;
const UserPremiumType$1 = mod$9.UserPremiumType;
const VideoQualityMode$1 = mod$9.VideoQualityMode;
const WebhookType$1 = mod$9.WebhookType;

var v10$h = /*#__PURE__*/Object.freeze({
	__proto__: null,
	APIApplicationCommandPermissionsConstant: APIApplicationCommandPermissionsConstant$1,
	ActivityFlags: ActivityFlags$1,
	ActivityPlatform: ActivityPlatform$1,
	ActivityType: ActivityType$1,
	AllowedMentionsTypes: AllowedMentionsTypes$1,
	ApplicationCommandOptionType: ApplicationCommandOptionType$1,
	ApplicationCommandPermissionType: ApplicationCommandPermissionType$1,
	ApplicationCommandType: ApplicationCommandType$1,
	ApplicationFlags: ApplicationFlags$1,
	ApplicationIntegrationType: ApplicationIntegrationType,
	ApplicationRoleConnectionMetadataType: ApplicationRoleConnectionMetadataType$1,
	AttachmentFlags: AttachmentFlags$1,
	AuditLogEvent: AuditLogEvent$1,
	AuditLogOptionsType: AuditLogOptionsType$1,
	AutoModerationActionType: AutoModerationActionType$1,
	AutoModerationRuleEventType: AutoModerationRuleEventType$1,
	AutoModerationRuleKeywordPresetType: AutoModerationRuleKeywordPresetType$1,
	AutoModerationRuleTriggerType: AutoModerationRuleTriggerType$1,
	ButtonStyle: ButtonStyle$1,
	ChannelFlags: ChannelFlags$1,
	ChannelType: ChannelType$1,
	ComponentType: ComponentType$1,
	ConnectionService: ConnectionService$1,
	ConnectionVisibility: ConnectionVisibility$1,
	EmbedType: EmbedType$1,
	EntitlementType: EntitlementType$1,
	EntryPointCommandHandlerType: EntryPointCommandHandlerType,
	ForumLayoutType: ForumLayoutType$1,
	GuildDefaultMessageNotifications: GuildDefaultMessageNotifications$1,
	GuildExplicitContentFilter: GuildExplicitContentFilter$1,
	GuildFeature: GuildFeature$1,
	GuildHubType: GuildHubType$1,
	GuildMFALevel: GuildMFALevel$1,
	GuildMemberFlags: GuildMemberFlags$1,
	GuildNSFWLevel: GuildNSFWLevel$1,
	GuildOnboardingMode: GuildOnboardingMode$1,
	GuildOnboardingPromptType: GuildOnboardingPromptType$1,
	GuildPremiumTier: GuildPremiumTier$1,
	GuildScheduledEventEntityType: GuildScheduledEventEntityType$1,
	GuildScheduledEventPrivacyLevel: GuildScheduledEventPrivacyLevel$1,
	GuildScheduledEventRecurrenceRuleFrequency: GuildScheduledEventRecurrenceRuleFrequency,
	GuildScheduledEventRecurrenceRuleMonth: GuildScheduledEventRecurrenceRuleMonth,
	GuildScheduledEventRecurrenceRuleWeekday: GuildScheduledEventRecurrenceRuleWeekday,
	GuildScheduledEventStatus: GuildScheduledEventStatus$1,
	GuildSystemChannelFlags: GuildSystemChannelFlags$1,
	GuildVerificationLevel: GuildVerificationLevel$1,
	GuildWidgetStyle: GuildWidgetStyle$1,
	IntegrationExpireBehavior: IntegrationExpireBehavior$1,
	InteractionContextType: InteractionContextType,
	InteractionResponseType: InteractionResponseType$1,
	InteractionType: InteractionType$1,
	InviteTargetType: InviteTargetType$1,
	InviteType: InviteType$1,
	MembershipScreeningFieldType: MembershipScreeningFieldType$1,
	MessageActivityType: MessageActivityType$1,
	MessageFlags: MessageFlags$1,
	MessageReferenceType: MessageReferenceType,
	MessageType: MessageType$1,
	OAuth2Scopes: OAuth2Scopes$1,
	OverwriteType: OverwriteType$1,
	PermissionFlagsBits: PermissionFlagsBits$1,
	PollLayoutType: PollLayoutType$1,
	PresenceUpdateStatus: PresenceUpdateStatus$1,
	RoleFlags: RoleFlags$1,
	SKUFlags: SKUFlags$1,
	SKUType: SKUType$1,
	SelectMenuDefaultValueType: SelectMenuDefaultValueType$1,
	SortOrderType: SortOrderType$1,
	StageInstancePrivacyLevel: StageInstancePrivacyLevel$1,
	StickerFormatType: StickerFormatType$1,
	StickerType: StickerType$1,
	SubscriptionStatus: SubscriptionStatus,
	TeamMemberMembershipState: TeamMemberMembershipState$1,
	TeamMemberRole: TeamMemberRole$1,
	TextInputStyle: TextInputStyle$1,
	ThreadAutoArchiveDuration: ThreadAutoArchiveDuration$1,
	ThreadMemberFlags: ThreadMemberFlags$1,
	UserFlags: UserFlags$1,
	UserPremiumType: UserPremiumType$1,
	VideoQualityMode: VideoQualityMode$1,
	WebhookType: WebhookType$1,
	default: mod$9
});

var require$$2$1 = /*@__PURE__*/getAugmentedNamespace(v10$h);

var v10$g = {};

var common$5 = {};

var hasRequiredCommon$5;

function requireCommon$5 () {
	if (hasRequiredCommon$5) return common$5;
	hasRequiredCommon$5 = 1;
	Object.defineProperty(common$5, "__esModule", { value: true });
	common$5.Locale = common$5.RESTJSONErrorCodes = void 0;
	/**
	 * https://discord.com/developers/docs/topics/opcodes-and-status-codes#json-json-error-codes
	 */
	var RESTJSONErrorCodes;
	(function (RESTJSONErrorCodes) {
	    RESTJSONErrorCodes[RESTJSONErrorCodes["GeneralError"] = 0] = "GeneralError";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownAccount"] = 10001] = "UnknownAccount";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownApplication"] = 10002] = "UnknownApplication";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownChannel"] = 10003] = "UnknownChannel";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownGuild"] = 10004] = "UnknownGuild";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownIntegration"] = 10005] = "UnknownIntegration";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownInvite"] = 10006] = "UnknownInvite";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownMember"] = 10007] = "UnknownMember";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownMessage"] = 10008] = "UnknownMessage";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownPermissionOverwrite"] = 10009] = "UnknownPermissionOverwrite";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownProvider"] = 10010] = "UnknownProvider";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownRole"] = 10011] = "UnknownRole";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownToken"] = 10012] = "UnknownToken";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownUser"] = 10013] = "UnknownUser";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownEmoji"] = 10014] = "UnknownEmoji";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownWebhook"] = 10015] = "UnknownWebhook";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownWebhookService"] = 10016] = "UnknownWebhookService";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownSession"] = 10020] = "UnknownSession";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownBan"] = 10026] = "UnknownBan";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownSKU"] = 10027] = "UnknownSKU";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownStoreListing"] = 10028] = "UnknownStoreListing";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownEntitlement"] = 10029] = "UnknownEntitlement";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownBuild"] = 10030] = "UnknownBuild";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownLobby"] = 10031] = "UnknownLobby";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownBranch"] = 10032] = "UnknownBranch";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownStoreDirectoryLayout"] = 10033] = "UnknownStoreDirectoryLayout";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownRedistributable"] = 10036] = "UnknownRedistributable";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownGiftCode"] = 10038] = "UnknownGiftCode";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownStream"] = 10049] = "UnknownStream";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownPremiumServerSubscribeCooldown"] = 10050] = "UnknownPremiumServerSubscribeCooldown";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownGuildTemplate"] = 10057] = "UnknownGuildTemplate";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownDiscoverableServerCategory"] = 10059] = "UnknownDiscoverableServerCategory";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownSticker"] = 10060] = "UnknownSticker";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownStickerPack"] = 10061] = "UnknownStickerPack";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownInteraction"] = 10062] = "UnknownInteraction";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownApplicationCommand"] = 10063] = "UnknownApplicationCommand";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownVoiceState"] = 10065] = "UnknownVoiceState";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownApplicationCommandPermissions"] = 10066] = "UnknownApplicationCommandPermissions";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownStageInstance"] = 10067] = "UnknownStageInstance";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownGuildMemberVerificationForm"] = 10068] = "UnknownGuildMemberVerificationForm";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownGuildWelcomeScreen"] = 10069] = "UnknownGuildWelcomeScreen";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownGuildScheduledEvent"] = 10070] = "UnknownGuildScheduledEvent";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownGuildScheduledEventUser"] = 10071] = "UnknownGuildScheduledEventUser";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownTag"] = 10087] = "UnknownTag";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["BotsCannotUseThisEndpoint"] = 20001] = "BotsCannotUseThisEndpoint";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["OnlyBotsCanUseThisEndpoint"] = 20002] = "OnlyBotsCanUseThisEndpoint";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ExplicitContentCannotBeSentToTheDesiredRecipient"] = 20009] = "ExplicitContentCannotBeSentToTheDesiredRecipient";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["NotAuthorizedToPerformThisActionOnThisApplication"] = 20012] = "NotAuthorizedToPerformThisActionOnThisApplication";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ActionCannotBePerformedDueToSlowmodeRateLimit"] = 20016] = "ActionCannotBePerformedDueToSlowmodeRateLimit";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["TheMazeIsntMeantForYou"] = 20017] = "TheMazeIsntMeantForYou";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["OnlyTheOwnerOfThisAccountCanPerformThisAction"] = 20018] = "OnlyTheOwnerOfThisAccountCanPerformThisAction";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["AnnouncementEditLimitExceeded"] = 20022] = "AnnouncementEditLimitExceeded";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnderMinimumAge"] = 20024] = "UnderMinimumAge";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ChannelSendRateLimit"] = 20028] = "ChannelSendRateLimit";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ServerSendRateLimit"] = 20029] = "ServerSendRateLimit";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["StageTopicServerNameServerDescriptionOrChannelNamesContainDisallowedWords"] = 20031] = "StageTopicServerNameServerDescriptionOrChannelNamesContainDisallowedWords";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["GuildPremiumSubscriptionLevelTooLow"] = 20035] = "GuildPremiumSubscriptionLevelTooLow";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfGuildsReached"] = 30001] = "MaximumNumberOfGuildsReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfFriendsReached"] = 30002] = "MaximumNumberOfFriendsReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfPinsReachedForTheChannel"] = 30003] = "MaximumNumberOfPinsReachedForTheChannel";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfRecipientsReached"] = 30004] = "MaximumNumberOfRecipientsReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfGuildRolesReached"] = 30005] = "MaximumNumberOfGuildRolesReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfWebhooksReached"] = 30007] = "MaximumNumberOfWebhooksReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfEmojisReached"] = 30008] = "MaximumNumberOfEmojisReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfReactionsReached"] = 30010] = "MaximumNumberOfReactionsReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfGroupDMsReached"] = 30011] = "MaximumNumberOfGroupDMsReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfGuildChannelsReached"] = 30013] = "MaximumNumberOfGuildChannelsReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfAttachmentsInAMessageReached"] = 30015] = "MaximumNumberOfAttachmentsInAMessageReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfInvitesReached"] = 30016] = "MaximumNumberOfInvitesReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfAnimatedEmojisReached"] = 30018] = "MaximumNumberOfAnimatedEmojisReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfServerMembersReached"] = 30019] = "MaximumNumberOfServerMembersReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfServerCategoriesReached"] = 30030] = "MaximumNumberOfServerCategoriesReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["GuildAlreadyHasTemplate"] = 30031] = "GuildAlreadyHasTemplate";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfApplicationCommandsReached"] = 30032] = "MaximumNumberOfApplicationCommandsReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumThreadParticipantsReached"] = 30033] = "MaximumThreadParticipantsReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumDailyApplicationCommandCreatesReached"] = 30034] = "MaximumDailyApplicationCommandCreatesReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfNonGuildMemberBansHasBeenExceeded"] = 30035] = "MaximumNumberOfNonGuildMemberBansHasBeenExceeded";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfBanFetchesHasBeenReached"] = 30037] = "MaximumNumberOfBanFetchesHasBeenReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfUncompletedGuildScheduledEventsReached"] = 30038] = "MaximumNumberOfUncompletedGuildScheduledEventsReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfStickersReached"] = 30039] = "MaximumNumberOfStickersReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfPruneRequestsHasBeenReached"] = 30040] = "MaximumNumberOfPruneRequestsHasBeenReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfGuildWidgetSettingsUpdatesHasBeenReached"] = 30042] = "MaximumNumberOfGuildWidgetSettingsUpdatesHasBeenReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfEditsToMessagesOlderThanOneHourReached"] = 30046] = "MaximumNumberOfEditsToMessagesOlderThanOneHourReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfPinnedThreadsInForumHasBeenReached"] = 30047] = "MaximumNumberOfPinnedThreadsInForumHasBeenReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfTagsInForumHasBeenReached"] = 30048] = "MaximumNumberOfTagsInForumHasBeenReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["BitrateIsTooHighForChannelOfThisType"] = 30052] = "BitrateIsTooHighForChannelOfThisType";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfPremiumEmojisReached"] = 30056] = "MaximumNumberOfPremiumEmojisReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfWebhooksPerGuildReached"] = 30058] = "MaximumNumberOfWebhooksPerGuildReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfChannelPermissionOverwritesReached"] = 30060] = "MaximumNumberOfChannelPermissionOverwritesReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["TheChannelsForThisGuildAreTooLarge"] = 30061] = "TheChannelsForThisGuildAreTooLarge";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["Unauthorized"] = 40001] = "Unauthorized";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["VerifyYourAccount"] = 40002] = "VerifyYourAccount";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["OpeningDirectMessagesTooFast"] = 40003] = "OpeningDirectMessagesTooFast";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["SendMessagesHasBeenTemporarilyDisabled"] = 40004] = "SendMessagesHasBeenTemporarilyDisabled";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["RequestEntityTooLarge"] = 40005] = "RequestEntityTooLarge";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["FeatureTemporarilyDisabledServerSide"] = 40006] = "FeatureTemporarilyDisabledServerSide";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UserBannedFromThisGuild"] = 40007] = "UserBannedFromThisGuild";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ConnectionHasBeenRevoked"] = 40012] = "ConnectionHasBeenRevoked";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["OnlyConsumableSKUsCanBeConsumed"] = 40018] = "OnlyConsumableSKUsCanBeConsumed";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["YouCanOnlyDeleteSandboxEntitlements"] = 40019] = "YouCanOnlyDeleteSandboxEntitlements";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["TargetUserIsNotConnectedToVoice"] = 40032] = "TargetUserIsNotConnectedToVoice";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ThisMessageWasAlreadyCrossposted"] = 40033] = "ThisMessageWasAlreadyCrossposted";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ApplicationCommandWithThatNameAlreadyExists"] = 40041] = "ApplicationCommandWithThatNameAlreadyExists";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ApplicationInteractionFailedToSend"] = 40043] = "ApplicationInteractionFailedToSend";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotSendAMessageInAForumChannel"] = 40058] = "CannotSendAMessageInAForumChannel";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InteractionHasAlreadyBeenAcknowledged"] = 40060] = "InteractionHasAlreadyBeenAcknowledged";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["TagNamesMustBeUnique"] = 40061] = "TagNamesMustBeUnique";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ServiceResourceIsBeingRateLimited"] = 40062] = "ServiceResourceIsBeingRateLimited";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ThereAreNoTagsAvailableThatCanBeSetByNonModerators"] = 40066] = "ThereAreNoTagsAvailableThatCanBeSetByNonModerators";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["TagRequiredToCreateAForumPostInThisChannel"] = 40067] = "TagRequiredToCreateAForumPostInThisChannel";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["AnEntitlementHasAlreadyBeenGrantedForThisResource"] = 40074] = "AnEntitlementHasAlreadyBeenGrantedForThisResource";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ThisInteractionHasHitTheMaximumNumberOfFollowUpMessages"] = 40094] = "ThisInteractionHasHitTheMaximumNumberOfFollowUpMessages";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CloudflareIsBlockingYourRequest"] = 40333] = "CloudflareIsBlockingYourRequest";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MissingAccess"] = 50001] = "MissingAccess";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidAccountType"] = 50002] = "InvalidAccountType";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotExecuteActionOnDMChannel"] = 50003] = "CannotExecuteActionOnDMChannel";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["GuildWidgetDisabled"] = 50004] = "GuildWidgetDisabled";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotEditMessageAuthoredByAnotherUser"] = 50005] = "CannotEditMessageAuthoredByAnotherUser";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotSendAnEmptyMessage"] = 50006] = "CannotSendAnEmptyMessage";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotSendMessagesToThisUser"] = 50007] = "CannotSendMessagesToThisUser";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotSendMessagesInNonTextChannel"] = 50008] = "CannotSendMessagesInNonTextChannel";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ChannelVerificationLevelTooHighForYouToGainAccess"] = 50009] = "ChannelVerificationLevelTooHighForYouToGainAccess";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["OAuth2ApplicationDoesNotHaveBot"] = 50010] = "OAuth2ApplicationDoesNotHaveBot";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["OAuth2ApplicationLimitReached"] = 50011] = "OAuth2ApplicationLimitReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidOAuth2State"] = 50012] = "InvalidOAuth2State";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MissingPermissions"] = 50013] = "MissingPermissions";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidToken"] = 50014] = "InvalidToken";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["NoteWasTooLong"] = 50015] = "NoteWasTooLong";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ProvidedTooFewOrTooManyMessagesToDelete"] = 50016] = "ProvidedTooFewOrTooManyMessagesToDelete";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidMFALevel"] = 50017] = "InvalidMFALevel";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MessageCanOnlyBePinnedInTheChannelItWasSentIn"] = 50019] = "MessageCanOnlyBePinnedInTheChannelItWasSentIn";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InviteCodeInvalidOrTaken"] = 50020] = "InviteCodeInvalidOrTaken";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotExecuteActionOnSystemMessage"] = 50021] = "CannotExecuteActionOnSystemMessage";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotExecuteActionOnThisChannelType"] = 50024] = "CannotExecuteActionOnThisChannelType";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidOAuth2AccessToken"] = 50025] = "InvalidOAuth2AccessToken";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MissingRequiredOAuth2Scope"] = 50026] = "MissingRequiredOAuth2Scope";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidWebhookToken"] = 50027] = "InvalidWebhookToken";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidRole"] = 50028] = "InvalidRole";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidRecipients"] = 50033] = "InvalidRecipients";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["OneOfTheMessagesProvidedWasTooOldForBulkDelete"] = 50034] = "OneOfTheMessagesProvidedWasTooOldForBulkDelete";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidFormBodyOrContentType"] = 50035] = "InvalidFormBodyOrContentType";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InviteAcceptedToGuildWithoutTheBotBeingIn"] = 50036] = "InviteAcceptedToGuildWithoutTheBotBeingIn";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidActivityAction"] = 50039] = "InvalidActivityAction";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidAPIVersion"] = 50041] = "InvalidAPIVersion";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["FileUploadedExceedsMaximumSize"] = 50045] = "FileUploadedExceedsMaximumSize";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidFileUploaded"] = 50046] = "InvalidFileUploaded";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotSelfRedeemThisGift"] = 50054] = "CannotSelfRedeemThisGift";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidGuild"] = 50055] = "InvalidGuild";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidSKU"] = 50057] = "InvalidSKU";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidRequestOrigin"] = 50067] = "InvalidRequestOrigin";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidMessageType"] = 50068] = "InvalidMessageType";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["PaymentSourceRequiredToRedeemGift"] = 50070] = "PaymentSourceRequiredToRedeemGift";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotModifyASystemWebhook"] = 50073] = "CannotModifyASystemWebhook";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotDeleteChannelRequiredForCommunityGuilds"] = 50074] = "CannotDeleteChannelRequiredForCommunityGuilds";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotEditStickersWithinMessage"] = 50080] = "CannotEditStickersWithinMessage";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidStickerSent"] = 50081] = "InvalidStickerSent";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidActionOnArchivedThread"] = 50083] = "InvalidActionOnArchivedThread";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidThreadNotificationSettings"] = 50084] = "InvalidThreadNotificationSettings";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ParameterEarlierThanCreation"] = 50085] = "ParameterEarlierThanCreation";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CommunityServerChannelsMustBeTextChannels"] = 50086] = "CommunityServerChannelsMustBeTextChannels";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["TheEntityTypeOfTheEventIsDifferentFromTheEntityYouAreTryingToStartTheEventFor"] = 50091] = "TheEntityTypeOfTheEventIsDifferentFromTheEntityYouAreTryingToStartTheEventFor";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ServerNotAvailableInYourLocation"] = 50095] = "ServerNotAvailableInYourLocation";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ServerNeedsMonetizationEnabledToPerformThisAction"] = 50097] = "ServerNeedsMonetizationEnabledToPerformThisAction";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ServerNeedsMoreBoostsToPerformThisAction"] = 50101] = "ServerNeedsMoreBoostsToPerformThisAction";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["RequestBodyContainsInvalidJSON"] = 50109] = "RequestBodyContainsInvalidJSON";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["OwnerCannotBePendingMember"] = 50131] = "OwnerCannotBePendingMember";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["OwnershipCannotBeMovedToABotUser"] = 50132] = "OwnershipCannotBeMovedToABotUser";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["FailedToResizeAssetBelowTheMinimumSize"] = 50138] = "FailedToResizeAssetBelowTheMinimumSize";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotMixSubscriptionAndNonSubscriptionRolesForAnEmoji"] = 50144] = "CannotMixSubscriptionAndNonSubscriptionRolesForAnEmoji";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotConvertBetweenPremiumEmojiAndNormalEmoji"] = 50145] = "CannotConvertBetweenPremiumEmojiAndNormalEmoji";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UploadedFileNotFound"] = 50146] = "UploadedFileNotFound";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["VoiceMessagesDoNotSupportAdditionalContent"] = 50159] = "VoiceMessagesDoNotSupportAdditionalContent";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["VoiceMessagesMustHaveASingleAudioAttachment"] = 50160] = "VoiceMessagesMustHaveASingleAudioAttachment";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["VoiceMessagesMustHaveSupportingMetadata"] = 50161] = "VoiceMessagesMustHaveSupportingMetadata";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["VoiceMessagesCannotBeEdited"] = 50162] = "VoiceMessagesCannotBeEdited";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotDeleteGuildSubscriptionIntegration"] = 50163] = "CannotDeleteGuildSubscriptionIntegration";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["YouCannotSendVoiceMessagesInThisChannel"] = 50173] = "YouCannotSendVoiceMessagesInThisChannel";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["TheUserAccountMustFirstBeVerified"] = 50178] = "TheUserAccountMustFirstBeVerified";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["YouDoNotHavePermissionToSendThisSticker"] = 50600] = "YouDoNotHavePermissionToSendThisSticker";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["TwoFactorAuthenticationIsRequired"] = 60003] = "TwoFactorAuthenticationIsRequired";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["NoUsersWithDiscordTagExist"] = 80004] = "NoUsersWithDiscordTagExist";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ReactionWasBlocked"] = 90001] = "ReactionWasBlocked";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UserCannotUseBurstReactions"] = 90002] = "UserCannotUseBurstReactions";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ApplicationNotYetAvailable"] = 110001] = "ApplicationNotYetAvailable";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["APIResourceOverloaded"] = 130000] = "APIResourceOverloaded";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["TheStageIsAlreadyOpen"] = 150006] = "TheStageIsAlreadyOpen";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotReplyWithoutPermissionToReadMessageHistory"] = 160002] = "CannotReplyWithoutPermissionToReadMessageHistory";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ThreadAlreadyCreatedForMessage"] = 160004] = "ThreadAlreadyCreatedForMessage";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ThreadLocked"] = 160005] = "ThreadLocked";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumActiveThreads"] = 160006] = "MaximumActiveThreads";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumActiveAnnouncementThreads"] = 160007] = "MaximumActiveAnnouncementThreads";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidJSONForUploadedLottieFile"] = 170001] = "InvalidJSONForUploadedLottieFile";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UploadedLottiesCannotContainRasterizedImages"] = 170002] = "UploadedLottiesCannotContainRasterizedImages";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["StickerMaximumFramerateExceeded"] = 170003] = "StickerMaximumFramerateExceeded";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["StickerFrameCountExceedsMaximumOf1000Frames"] = 170004] = "StickerFrameCountExceedsMaximumOf1000Frames";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["LottieAnimationMaximumDimensionsExceeded"] = 170005] = "LottieAnimationMaximumDimensionsExceeded";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["StickerFramerateIsTooSmallOrTooLarge"] = 170006] = "StickerFramerateIsTooSmallOrTooLarge";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["StickerAnimationDurationExceedsMaximumOf5Seconds"] = 170007] = "StickerAnimationDurationExceedsMaximumOf5Seconds";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotUpdateAFinishedEvent"] = 180000] = "CannotUpdateAFinishedEvent";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["FailedToCreateStageNeededForStageEvent"] = 180002] = "FailedToCreateStageNeededForStageEvent";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MessageWasBlockedByAutomaticModeration"] = 200000] = "MessageWasBlockedByAutomaticModeration";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["TitleWasBlockedByAutomaticModeration"] = 200001] = "TitleWasBlockedByAutomaticModeration";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["WebhooksPostedToForumChannelsMustHaveAThreadNameOrThreadId"] = 220001] = "WebhooksPostedToForumChannelsMustHaveAThreadNameOrThreadId";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["WebhooksPostedToForumChannelsCannotHaveBothAThreadNameAndThreadId"] = 220002] = "WebhooksPostedToForumChannelsCannotHaveBothAThreadNameAndThreadId";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["WebhooksCanOnlyCreateThreadsInForumChannels"] = 220003] = "WebhooksCanOnlyCreateThreadsInForumChannels";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["WebhookServicesCannotBeUsedInForumChannels"] = 220004] = "WebhookServicesCannotBeUsedInForumChannels";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MessageBlockedByHarmfulLinksFilter"] = 240000] = "MessageBlockedByHarmfulLinksFilter";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotEnableOnboardingRequirementsAreNotMet"] = 350000] = "CannotEnableOnboardingRequirementsAreNotMet";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotUpdateOnboardingWhileBelowRequirements"] = 350001] = "CannotUpdateOnboardingWhileBelowRequirements";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["FailedToBanUsers"] = 500000] = "FailedToBanUsers";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["PollVotingBlocked"] = 520000] = "PollVotingBlocked";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["PollExpired"] = 520001] = "PollExpired";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidChannelTypeForPollCreation"] = 520002] = "InvalidChannelTypeForPollCreation";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotEditAPollMessage"] = 520003] = "CannotEditAPollMessage";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotUseAnEmojiIncludedWithThePoll"] = 520004] = "CannotUseAnEmojiIncludedWithThePoll";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotExpireANonPollMessage"] = 520006] = "CannotExpireANonPollMessage";
	})(RESTJSONErrorCodes || (common$5.RESTJSONErrorCodes = RESTJSONErrorCodes = {}));
	/**
	 * https://discord.com/developers/docs/reference#locales
	 */
	var Locale;
	(function (Locale) {
	    Locale["Indonesian"] = "id";
	    Locale["EnglishUS"] = "en-US";
	    Locale["EnglishGB"] = "en-GB";
	    Locale["Bulgarian"] = "bg";
	    Locale["ChineseCN"] = "zh-CN";
	    Locale["ChineseTW"] = "zh-TW";
	    Locale["Croatian"] = "hr";
	    Locale["Czech"] = "cs";
	    Locale["Danish"] = "da";
	    Locale["Dutch"] = "nl";
	    Locale["Finnish"] = "fi";
	    Locale["French"] = "fr";
	    Locale["German"] = "de";
	    Locale["Greek"] = "el";
	    Locale["Hindi"] = "hi";
	    Locale["Hungarian"] = "hu";
	    Locale["Italian"] = "it";
	    Locale["Japanese"] = "ja";
	    Locale["Korean"] = "ko";
	    Locale["Lithuanian"] = "lt";
	    Locale["Norwegian"] = "no";
	    Locale["Polish"] = "pl";
	    Locale["PortugueseBR"] = "pt-BR";
	    Locale["Romanian"] = "ro";
	    Locale["Russian"] = "ru";
	    Locale["SpanishES"] = "es-ES";
	    Locale["SpanishLATAM"] = "es-419";
	    Locale["Swedish"] = "sv-SE";
	    Locale["Thai"] = "th";
	    Locale["Turkish"] = "tr";
	    Locale["Ukrainian"] = "uk";
	    Locale["Vietnamese"] = "vi";
	})(Locale || (common$5.Locale = Locale = {}));
	
	return common$5;
}

var application$2 = {};

var hasRequiredApplication$3;

function requireApplication$3 () {
	if (hasRequiredApplication$3) return application$2;
	hasRequiredApplication$3 = 1;
	Object.defineProperty(application$2, "__esModule", { value: true });
	
	return application$2;
}

var auditLog$2 = {};

var hasRequiredAuditLog$2;

function requireAuditLog$2 () {
	if (hasRequiredAuditLog$2) return auditLog$2;
	hasRequiredAuditLog$2 = 1;
	Object.defineProperty(auditLog$2, "__esModule", { value: true });
	
	return auditLog$2;
}

var autoModeration$2 = {};

var hasRequiredAutoModeration$2;

function requireAutoModeration$2 () {
	if (hasRequiredAutoModeration$2) return autoModeration$2;
	hasRequiredAutoModeration$2 = 1;
	Object.defineProperty(autoModeration$2, "__esModule", { value: true });
	
	return autoModeration$2;
}

var channel$3 = {};

var hasRequiredChannel$3;

function requireChannel$3 () {
	if (hasRequiredChannel$3) return channel$3;
	hasRequiredChannel$3 = 1;
	Object.defineProperty(channel$3, "__esModule", { value: true });
	channel$3.ReactionType = void 0;
	/**
	 * https://discord.com/developers/docs/resources/channel#get-reactions-reaction-types
	 */
	var ReactionType;
	(function (ReactionType) {
	    ReactionType[ReactionType["Normal"] = 0] = "Normal";
	    ReactionType[ReactionType["Super"] = 1] = "Super";
	})(ReactionType || (channel$3.ReactionType = ReactionType = {}));
	
	return channel$3;
}

var emoji$2 = {};

var hasRequiredEmoji$3;

function requireEmoji$3 () {
	if (hasRequiredEmoji$3) return emoji$2;
	hasRequiredEmoji$3 = 1;
	Object.defineProperty(emoji$2, "__esModule", { value: true });
	
	return emoji$2;
}

var gateway$2 = {};

var hasRequiredGateway$2;

function requireGateway$2 () {
	if (hasRequiredGateway$2) return gateway$2;
	hasRequiredGateway$2 = 1;
	Object.defineProperty(gateway$2, "__esModule", { value: true });
	
	return gateway$2;
}

var guild$2 = {};

var hasRequiredGuild$3;

function requireGuild$3 () {
	if (hasRequiredGuild$3) return guild$2;
	hasRequiredGuild$3 = 1;
	Object.defineProperty(guild$2, "__esModule", { value: true });
	
	return guild$2;
}

var guildScheduledEvent$2 = {};

var hasRequiredGuildScheduledEvent$3;

function requireGuildScheduledEvent$3 () {
	if (hasRequiredGuildScheduledEvent$3) return guildScheduledEvent$2;
	hasRequiredGuildScheduledEvent$3 = 1;
	Object.defineProperty(guildScheduledEvent$2, "__esModule", { value: true });
	
	return guildScheduledEvent$2;
}

var interactions$2 = {};

var hasRequiredInteractions$2;

function requireInteractions$2 () {
	if (hasRequiredInteractions$2) return interactions$2;
	hasRequiredInteractions$2 = 1;
	Object.defineProperty(interactions$2, "__esModule", { value: true });
	
	return interactions$2;
}

var invite$2 = {};

var hasRequiredInvite$3;

function requireInvite$3 () {
	if (hasRequiredInvite$3) return invite$2;
	hasRequiredInvite$3 = 1;
	Object.defineProperty(invite$2, "__esModule", { value: true });
	
	return invite$2;
}

var oauth2$2 = {};

var hasRequiredOauth2$2;

function requireOauth2$2 () {
	if (hasRequiredOauth2$2) return oauth2$2;
	hasRequiredOauth2$2 = 1;
	Object.defineProperty(oauth2$2, "__esModule", { value: true });
	
	return oauth2$2;
}

var poll$2 = {};

var hasRequiredPoll$3;

function requirePoll$3 () {
	if (hasRequiredPoll$3) return poll$2;
	hasRequiredPoll$3 = 1;
	Object.defineProperty(poll$2, "__esModule", { value: true });
	
	return poll$2;
}

var stageInstance$2 = {};

var hasRequiredStageInstance$3;

function requireStageInstance$3 () {
	if (hasRequiredStageInstance$3) return stageInstance$2;
	hasRequiredStageInstance$3 = 1;
	Object.defineProperty(stageInstance$2, "__esModule", { value: true });
	
	return stageInstance$2;
}

var sticker$2 = {};

var hasRequiredSticker$3;

function requireSticker$3 () {
	if (hasRequiredSticker$3) return sticker$2;
	hasRequiredSticker$3 = 1;
	Object.defineProperty(sticker$2, "__esModule", { value: true });
	
	return sticker$2;
}

var template$2 = {};

var hasRequiredTemplate$2;

function requireTemplate$2 () {
	if (hasRequiredTemplate$2) return template$2;
	hasRequiredTemplate$2 = 1;
	Object.defineProperty(template$2, "__esModule", { value: true });
	
	return template$2;
}

var user$3 = {};

var hasRequiredUser$4;

function requireUser$4 () {
	if (hasRequiredUser$4) return user$3;
	hasRequiredUser$4 = 1;
	Object.defineProperty(user$3, "__esModule", { value: true });
	
	return user$3;
}

var voice$2 = {};

var hasRequiredVoice$2;

function requireVoice$2 () {
	if (hasRequiredVoice$2) return voice$2;
	hasRequiredVoice$2 = 1;
	Object.defineProperty(voice$2, "__esModule", { value: true });
	
	return voice$2;
}

var webhook$2 = {};

var hasRequiredWebhook$3;

function requireWebhook$3 () {
	if (hasRequiredWebhook$3) return webhook$2;
	hasRequiredWebhook$3 = 1;
	Object.defineProperty(webhook$2, "__esModule", { value: true });
	
	return webhook$2;
}

var monetization$2 = {};

var hasRequiredMonetization$2;

function requireMonetization$2 () {
	if (hasRequiredMonetization$2) return monetization$2;
	hasRequiredMonetization$2 = 1;
	Object.defineProperty(monetization$2, "__esModule", { value: true });
	monetization$2.EntitlementOwnerType = void 0;
	/**
	 * https://discord.com/developers/docs/resources/entitlement#create-test-entitlement
	 */
	var EntitlementOwnerType;
	(function (EntitlementOwnerType) {
	    EntitlementOwnerType[EntitlementOwnerType["Guild"] = 1] = "Guild";
	    EntitlementOwnerType[EntitlementOwnerType["User"] = 2] = "User";
	})(EntitlementOwnerType || (monetization$2.EntitlementOwnerType = EntitlementOwnerType = {}));
	
	return monetization$2;
}

var hasRequiredV10$9;

function requireV10$9 () {
	if (hasRequiredV10$9) return v10$g;
	hasRequiredV10$9 = 1;
	(function (exports) {
		var __createBinding = (v10$g && v10$g.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (v10$g && v10$g.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.OAuth2Routes = exports.RouteBases = exports.CDNRoutes = exports.ImageFormat = exports.StickerPackApplicationId = exports.Routes = exports.APIVersion = void 0;
		__exportStar(requireCommon$5(), exports);
		__exportStar(requireApplication$3(), exports);
		__exportStar(requireAuditLog$2(), exports);
		__exportStar(requireAutoModeration$2(), exports);
		__exportStar(requireChannel$3(), exports);
		__exportStar(requireEmoji$3(), exports);
		__exportStar(requireGateway$2(), exports);
		__exportStar(requireGuild$3(), exports);
		__exportStar(requireGuildScheduledEvent$3(), exports);
		__exportStar(requireInteractions$2(), exports);
		__exportStar(requireInvite$3(), exports);
		__exportStar(requireOauth2$2(), exports);
		__exportStar(requirePoll$3(), exports);
		__exportStar(requireStageInstance$3(), exports);
		__exportStar(requireSticker$3(), exports);
		__exportStar(requireTemplate$2(), exports);
		__exportStar(requireUser$4(), exports);
		__exportStar(requireVoice$2(), exports);
		__exportStar(requireWebhook$3(), exports);
		__exportStar(requireMonetization$2(), exports);
		exports.APIVersion = '10';
		exports.Routes = {
		    /**
		     * Route for:
		     * - GET `/applications/{application.id}/role-connections/metadata`
		     * - PUT `/applications/{application.id}/role-connections/metadata`
		     */
		    applicationRoleConnectionMetadata(applicationId) {
		        return `/applications/${applicationId}/role-connections/metadata`;
		    },
		    /**
		     * Route for:
		     * - GET  `/guilds/{guild.id}/auto-moderation/rules`
		     * - POST `/guilds/{guild.id}/auto-moderation/rules`
		     */
		    guildAutoModerationRules(guildId) {
		        return `/guilds/${guildId}/auto-moderation/rules`;
		    },
		    /**
		     * Routes for:
		     * - GET    `/guilds/{guild.id}/auto-moderation/rules/{rule.id}`
		     * - PATCH  `/guilds/{guild.id}/auto-moderation/rules/{rule.id}`
		     * - DELETE `/guilds/{guild.id}/auto-moderation/rules/{rule.id}`
		     */
		    guildAutoModerationRule(guildId, ruleId) {
		        return `/guilds/${guildId}/auto-moderation/rules/${ruleId}`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/audit-logs`
		     */
		    guildAuditLog(guildId) {
		        return `/guilds/${guildId}/audit-logs`;
		    },
		    /**
		     * Route for:
		     * - GET    `/channels/{channel.id}`
		     * - PATCH  `/channels/{channel.id}`
		     * - DELETE `/channels/{channel.id}`
		     */
		    channel(channelId) {
		        return `/channels/${channelId}`;
		    },
		    /**
		     * Route for:
		     * - GET  `/channels/{channel.id}/messages`
		     * - POST `/channels/{channel.id}/messages`
		     */
		    channelMessages(channelId) {
		        return `/channels/${channelId}/messages`;
		    },
		    /**
		     * Route for:
		     * - GET    `/channels/{channel.id}/messages/{message.id}`
		     * - PATCH  `/channels/{channel.id}/messages/{message.id}`
		     * - DELETE `/channels/{channel.id}/messages/{message.id}`
		     */
		    channelMessage(channelId, messageId) {
		        return `/channels/${channelId}/messages/${messageId}`;
		    },
		    /**
		     * Route for:
		     * - POST `/channels/{channel.id}/messages/{message.id}/crosspost`
		     */
		    channelMessageCrosspost(channelId, messageId) {
		        return `/channels/${channelId}/messages/${messageId}/crosspost`;
		    },
		    /**
		     * Route for:
		     * - PUT    `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/@me`
		     * - DELETE `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/@me`
		     *
		     * **Note**: You need to URL encode the emoji yourself
		     */
		    channelMessageOwnReaction(channelId, messageId, emoji) {
		        return `/channels/${channelId}/messages/${messageId}/reactions/${emoji}/@me`;
		    },
		    /**
		     * Route for:
		     * - DELETE `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/{user.id}`
		     *
		     * **Note**: You need to URL encode the emoji yourself
		     */
		    channelMessageUserReaction(channelId, messageId, emoji, userId) {
		        return `/channels/${channelId}/messages/${messageId}/reactions/${emoji}/${userId}`;
		    },
		    /**
		     * Route for:
		     * - GET    `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}`
		     * - DELETE `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}`
		     *
		     * **Note**: You need to URL encode the emoji yourself
		     */
		    channelMessageReaction(channelId, messageId, emoji) {
		        return `/channels/${channelId}/messages/${messageId}/reactions/${emoji}`;
		    },
		    /**
		     * Route for:
		     * - DELETE `/channels/{channel.id}/messages/{message.id}/reactions`
		     */
		    channelMessageAllReactions(channelId, messageId) {
		        return `/channels/${channelId}/messages/${messageId}/reactions`;
		    },
		    /**
		     * Route for:
		     * - POST `/channels/{channel.id}/messages/bulk-delete`
		     */
		    channelBulkDelete(channelId) {
		        return `/channels/${channelId}/messages/bulk-delete`;
		    },
		    /**
		     * Route for:
		     * - PUT    `/channels/{channel.id}/permissions/{overwrite.id}`
		     * - DELETE `/channels/{channel.id}/permissions/{overwrite.id}`
		     */
		    channelPermission(channelId, overwriteId) {
		        return `/channels/${channelId}/permissions/${overwriteId}`;
		    },
		    /**
		     * Route for:
		     * - GET  `/channels/{channel.id}/invites`
		     * - POST `/channels/{channel.id}/invites`
		     */
		    channelInvites(channelId) {
		        return `/channels/${channelId}/invites`;
		    },
		    /**
		     * Route for:
		     * - POST `/channels/{channel.id}/followers`
		     */
		    channelFollowers(channelId) {
		        return `/channels/${channelId}/followers`;
		    },
		    /**
		     * Route for:
		     * - POST `/channels/{channel.id}/typing`
		     */
		    channelTyping(channelId) {
		        return `/channels/${channelId}/typing`;
		    },
		    /**
		     * Route for:
		     * - GET `/channels/{channel.id}/pins`
		     */
		    channelPins(channelId) {
		        return `/channels/${channelId}/pins`;
		    },
		    /**
		     * Route for:
		     * - PUT    `/channels/{channel.id}/pins/{message.id}`
		     * - DELETE `/channels/{channel.id}/pins/{message.id}`
		     */
		    channelPin(channelId, messageId) {
		        return `/channels/${channelId}/pins/${messageId}`;
		    },
		    /**
		     * Route for:
		     * - PUT    `/channels/{channel.id}/recipients/{user.id}`
		     * - DELETE `/channels/{channel.id}/recipients/{user.id}`
		     */
		    channelRecipient(channelId, userId) {
		        return `/channels/${channelId}/recipients/${userId}`;
		    },
		    /**
		     * Route for:
		     * - GET  `/guilds/{guild.id}/emojis`
		     * - POST `/guilds/{guild.id}/emojis`
		     */
		    guildEmojis(guildId) {
		        return `/guilds/${guildId}/emojis`;
		    },
		    /**
		     * Route for:
		     * - GET    `/guilds/{guild.id}/emojis/{emoji.id}`
		     * - PATCH  `/guilds/{guild.id}/emojis/{emoji.id}`
		     * - DELETE `/guilds/{guild.id}/emojis/{emoji.id}`
		     */
		    guildEmoji(guildId, emojiId) {
		        return `/guilds/${guildId}/emojis/${emojiId}`;
		    },
		    /**
		     * Route for:
		     * - POST `/guilds`
		     */
		    guilds() {
		        return '/guilds';
		    },
		    /**
		     * Route for:
		     * - GET    `/guilds/{guild.id}`
		     * - PATCH  `/guilds/{guild.id}`
		     * - DELETE `/guilds/{guild.id}`
		     */
		    guild(guildId) {
		        return `/guilds/${guildId}`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/preview`
		     */
		    guildPreview(guildId) {
		        return `/guilds/${guildId}/preview`;
		    },
		    /**
		     * Route for:
		     * - GET   `/guilds/{guild.id}/channels`
		     * - POST  `/guilds/{guild.id}/channels`
		     * - PATCH `/guilds/{guild.id}/channels`
		     */
		    guildChannels(guildId) {
		        return `/guilds/${guildId}/channels`;
		    },
		    /**
		     * Route for:
		     * - GET    `/guilds/{guild.id}/members/{user.id}`
		     * - PUT    `/guilds/{guild.id}/members/{user.id}`
		     * - PATCH  `/guilds/{guild.id}/members/@me`
		     * - PATCH  `/guilds/{guild.id}/members/{user.id}`
		     * - DELETE `/guilds/{guild.id}/members/{user.id}`
		     */
		    guildMember(guildId, userId = '@me') {
		        return `/guilds/${guildId}/members/${userId}`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/members`
		     */
		    guildMembers(guildId) {
		        return `/guilds/${guildId}/members`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/members/search`
		     */
		    guildMembersSearch(guildId) {
		        return `/guilds/${guildId}/members/search`;
		    },
		    /**
		     * Route for:
		     * - PATCH `/guilds/{guild.id}/members/@me/nick`
		     *
		     * @deprecated Use {@link Routes.guildMember} instead.
		     */
		    guildCurrentMemberNickname(guildId) {
		        return `/guilds/${guildId}/members/@me/nick`;
		    },
		    /**
		     * Route for:
		     * - PUT    `/guilds/{guild.id}/members/{user.id}/roles/{role.id}`
		     * - DELETE `/guilds/{guild.id}/members/{user.id}/roles/{role.id}`
		     */
		    guildMemberRole(guildId, memberId, roleId) {
		        return `/guilds/${guildId}/members/${memberId}/roles/${roleId}`;
		    },
		    /**
		     * Route for:
		     * - POST `/guilds/{guild.id}/mfa`
		     */
		    guildMFA(guildId) {
		        return `/guilds/${guildId}/mfa`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/bans`
		     */
		    guildBans(guildId) {
		        return `/guilds/${guildId}/bans`;
		    },
		    /**
		     * Route for:
		     * - GET    `/guilds/{guild.id}/bans/{user.id}`
		     * - PUT    `/guilds/{guild.id}/bans/{user.id}`
		     * - DELETE `/guilds/{guild.id}/bans/{user.id}`
		     */
		    guildBan(guildId, userId) {
		        return `/guilds/${guildId}/bans/${userId}`;
		    },
		    /**
		     * Route for:
		     * - GET   `/guilds/{guild.id}/roles`
		     * - POST  `/guilds/{guild.id}/roles`
		     * - PATCH `/guilds/{guild.id}/roles`
		     */
		    guildRoles(guildId) {
		        return `/guilds/${guildId}/roles`;
		    },
		    /**
		     * Route for:
		     * - GET    `/guilds/{guild.id}/roles/{role.id}`
		     * - PATCH  `/guilds/{guild.id}/roles/{role.id}`
		     * - DELETE `/guilds/{guild.id}/roles/{role.id}`
		     */
		    guildRole(guildId, roleId) {
		        return `/guilds/${guildId}/roles/${roleId}`;
		    },
		    /**
		     * Route for:
		     * - GET  `/guilds/{guild.id}/prune`
		     * - POST `/guilds/{guild.id}/prune`
		     */
		    guildPrune(guildId) {
		        return `/guilds/${guildId}/prune`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/regions`
		     */
		    guildVoiceRegions(guildId) {
		        return `/guilds/${guildId}/regions`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/invites`
		     */
		    guildInvites(guildId) {
		        return `/guilds/${guildId}/invites`;
		    },
		    /**
		     * Route for:
		     * - GET  `/guilds/{guild.id}/integrations`
		     */
		    guildIntegrations(guildId) {
		        return `/guilds/${guildId}/integrations`;
		    },
		    /**
		     * Route for:
		     * - DELETE `/guilds/{guild.id}/integrations/{integration.id}`
		     */
		    guildIntegration(guildId, integrationId) {
		        return `/guilds/${guildId}/integrations/${integrationId}`;
		    },
		    /**
		     * Route for:
		     * - GET   `/guilds/{guild.id}/widget`
		     * - PATCH `/guilds/{guild.id}/widget`
		     */
		    guildWidgetSettings(guildId) {
		        return `/guilds/${guildId}/widget`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/widget.json`
		     */
		    guildWidgetJSON(guildId) {
		        return `/guilds/${guildId}/widget.json`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/vanity-url`
		     */
		    guildVanityUrl(guildId) {
		        return `/guilds/${guildId}/vanity-url`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/widget.png`
		     */
		    guildWidgetImage(guildId) {
		        return `/guilds/${guildId}/widget.png`;
		    },
		    /**
		     * Route for:
		     * - GET    `/invites/{invite.code}`
		     * - DELETE `/invites/{invite.code}`
		     */
		    invite(code) {
		        return `/invites/${code}`;
		    },
		    /**
		     * Route for:
		     * - GET  `/guilds/templates/{template.code}`
		     * - POST `/guilds/templates/{template.code}`
		     */
		    template(code) {
		        return `/guilds/templates/${code}`;
		    },
		    /**
		     * Route for:
		     * - GET  `/guilds/{guild.id}/templates`
		     * - POST `/guilds/{guild.id}/templates`
		     */
		    guildTemplates(guildId) {
		        return `/guilds/${guildId}/templates`;
		    },
		    /**
		     * Route for:
		     * - PUT    `/guilds/{guild.id}/templates/{template.code}`
		     * - PATCH  `/guilds/{guild.id}/templates/{template.code}`
		     * - DELETE `/guilds/{guild.id}/templates/{template.code}`
		     */
		    guildTemplate(guildId, code) {
		        return `/guilds/${guildId}/templates/${code}`;
		    },
		    /**
		     * Route for:
		     * - GET `/channels/{channel.id}/polls/{message.id}/answers/{answer_id}`
		     */
		    pollAnswerVoters(channelId, messageId, answerId) {
		        return `/channels/${channelId}/polls/${messageId}/answers/${answerId}`;
		    },
		    /**
		     * Route for:
		     * - POST `/channels/{channel.id}/polls/{message.id}/expire`
		     */
		    expirePoll(channelId, messageId) {
		        return `/channels/${channelId}/polls/${messageId}/expire`;
		    },
		    /**
		     * Route for:
		     * - POST `/channels/{channel.id}/threads`
		     * - POST `/channels/{channel.id}/messages/{message.id}/threads`
		     */
		    threads(parentId, messageId) {
		        const parts = ['', 'channels', parentId];
		        if (messageId)
		            parts.push('messages', messageId);
		        parts.push('threads');
		        return parts.join('/');
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/threads/active`
		     */
		    guildActiveThreads(guildId) {
		        return `/guilds/${guildId}/threads/active`;
		    },
		    /**
		     * Route for:
		     * - GET `/channels/{channel.id}/threads/archived/public`
		     * - GET `/channels/{channel.id}/threads/archived/private`
		     */
		    channelThreads(channelId, archivedStatus) {
		        return `/channels/${channelId}/threads/archived/${archivedStatus}`;
		    },
		    /**
		     * Route for:
		     * - GET `/channels/{channel.id}/users/@me/threads/archived/private`
		     */
		    channelJoinedArchivedThreads(channelId) {
		        return `/channels/${channelId}/users/@me/threads/archived/private`;
		    },
		    /**
		     * Route for:
		     * - GET    `/channels/{thread.id}/thread-members`
		     * - GET    `/channels/{thread.id}/thread-members/{user.id}`
		     * - PUT    `/channels/{thread.id}/thread-members/@me`
		     * - PUT    `/channels/{thread.id}/thread-members/{user.id}`
		     * - DELETE `/channels/{thread.id}/thread-members/@me`
		     * - DELETE `/channels/{thread.id}/thread-members/{user.id}`
		     */
		    threadMembers(threadId, userId) {
		        const parts = ['', 'channels', threadId, 'thread-members'];
		        if (userId)
		            parts.push(userId);
		        return parts.join('/');
		    },
		    /**
		     * Route for:
		     * - GET   `/users/@me`
		     * - GET   `/users/{user.id}`
		     * - PATCH `/users/@me`
		     *
		     * @param [userId] The user ID, defaulted to `@me`
		     */
		    user(userId = '@me') {
		        return `/users/${userId}`;
		    },
		    /**
		     * Route for:
		     * - GET `/users/@me/applications/{application.id}/role-connection`
		     * - PUT `/users/@me/applications/{application.id}/role-connection`
		     */
		    userApplicationRoleConnection(applicationId) {
		        return `/users/@me/applications/${applicationId}/role-connection`;
		    },
		    /**
		     * Route for:
		     * - GET `/users/@me/guilds`
		     */
		    userGuilds() {
		        return `/users/@me/guilds`;
		    },
		    /**
		     * Route for:
		     * - GET `/users/@me/guilds/{guild.id}/member`
		     */
		    userGuildMember(guildId) {
		        return `/users/@me/guilds/${guildId}/member`;
		    },
		    /**
		     * Route for:
		     * - DELETE `/users/@me/guilds/{guild.id}`
		     */
		    userGuild(guildId) {
		        return `/users/@me/guilds/${guildId}`;
		    },
		    /**
		     * Route for:
		     * - POST `/users/@me/channels`
		     */
		    userChannels() {
		        return `/users/@me/channels`;
		    },
		    /**
		     * Route for:
		     * - GET `/users/@me/connections`
		     */
		    userConnections() {
		        return `/users/@me/connections`;
		    },
		    /**
		     * Route for:
		     * - GET `/voice/regions`
		     */
		    voiceRegions() {
		        return `/voice/regions`;
		    },
		    /**
		     * Route for:
		     * - GET  `/channels/{channel.id}/webhooks`
		     * - POST `/channels/{channel.id}/webhooks`
		     */
		    channelWebhooks(channelId) {
		        return `/channels/${channelId}/webhooks`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/webhooks`
		     */
		    guildWebhooks(guildId) {
		        return `/guilds/${guildId}/webhooks`;
		    },
		    /**
		     * Route for:
		     * - GET    `/webhooks/{webhook.id}`
		     * - GET    `/webhooks/{webhook.id}/{webhook.token}`
		     * - PATCH  `/webhooks/{webhook.id}`
		     * - PATCH  `/webhooks/{webhook.id}/{webhook.token}`
		     * - DELETE `/webhooks/{webhook.id}`
		     * - DELETE `/webhooks/{webhook.id}/{webhook.token}`
		     * - POST   `/webhooks/{webhook.id}/{webhook.token}`
		     *
		     * - POST   `/webhooks/{application.id}/{interaction.token}`
		     */
		    webhook(webhookId, webhookToken) {
		        const parts = ['', 'webhooks', webhookId];
		        if (webhookToken)
		            parts.push(webhookToken);
		        return parts.join('/');
		    },
		    /**
		     * Route for:
		     * - GET    `/webhooks/{webhook.id}/{webhook.token}/messages/@original`
		     * - GET    `/webhooks/{webhook.id}/{webhook.token}/messages/{message.id}`
		     * - PATCH  `/webhooks/{webhook.id}/{webhook.token}/messages/@original`
		     * - PATCH  `/webhooks/{webhook.id}/{webhook.token}/messages/{message.id}`
		     * - DELETE `/webhooks/{webhook.id}/{webhook.token}/messages/@original`
		     * - DELETE `/webhooks/{webhook.id}/{webhook.token}/messages/{message.id}`
		     *
		     * - PATCH  `/webhooks/{application.id}/{interaction.token}/messages/@original`
		     * - PATCH  `/webhooks/{application.id}/{interaction.token}/messages/{message.id}`
		     * - DELETE `/webhooks/{application.id}/{interaction.token}/messages/{message.id}`
		     */
		    webhookMessage(webhookId, webhookToken, messageId = '@original') {
		        return `/webhooks/${webhookId}/${webhookToken}/messages/${messageId}`;
		    },
		    /**
		     * Route for:
		     * - POST `/webhooks/{webhook.id}/{webhook.token}/github`
		     * - POST `/webhooks/{webhook.id}/{webhook.token}/slack`
		     */
		    webhookPlatform(webhookId, webhookToken, platform) {
		        return `/webhooks/${webhookId}/${webhookToken}/${platform}`;
		    },
		    /**
		     * Route for:
		     * - GET `/gateway`
		     */
		    gateway() {
		        return `/gateway`;
		    },
		    /**
		     * Route for:
		     * - GET `/gateway/bot`
		     */
		    gatewayBot() {
		        return `/gateway/bot`;
		    },
		    /**
		     * Route for:
		     * - GET `/oauth2/applications/@me`
		     */
		    oauth2CurrentApplication() {
		        return `/oauth2/applications/@me`;
		    },
		    /**
		     * Route for:
		     * - GET `/oauth2/@me`
		     */
		    oauth2CurrentAuthorization() {
		        return `/oauth2/@me`;
		    },
		    /**
		     * Route for:
		     * - GET `/oauth2/authorize`
		     */
		    oauth2Authorization() {
		        return `/oauth2/authorize`;
		    },
		    /**
		     * Route for:
		     * - POST `/oauth2/token`
		     */
		    oauth2TokenExchange() {
		        return `/oauth2/token`;
		    },
		    /**
		     * Route for:
		     * - POST `/oauth2/token/revoke`
		     */
		    oauth2TokenRevocation() {
		        return `/oauth2/token/revoke`;
		    },
		    /**
		     * Route for:
		     * - GET  `/applications/{application.id}/commands`
		     * - PUT  `/applications/{application.id}/commands`
		     * - POST `/applications/{application.id}/commands`
		     */
		    applicationCommands(applicationId) {
		        return `/applications/${applicationId}/commands`;
		    },
		    /**
		     * Route for:
		     * - GET    `/applications/{application.id}/commands/{command.id}`
		     * - PATCH  `/applications/{application.id}/commands/{command.id}`
		     * - DELETE `/applications/{application.id}/commands/{command.id}`
		     */
		    applicationCommand(applicationId, commandId) {
		        return `/applications/${applicationId}/commands/${commandId}`;
		    },
		    /**
		     * Route for:
		     * - GET  `/applications/{application.id}/guilds/{guild.id}/commands`
		     * - PUT  `/applications/{application.id}/guilds/{guild.id}/commands`
		     * - POST `/applications/{application.id}/guilds/{guild.id}/commands`
		     */
		    applicationGuildCommands(applicationId, guildId) {
		        return `/applications/${applicationId}/guilds/${guildId}/commands`;
		    },
		    /**
		     * Route for:
		     * - GET    `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}`
		     * - PATCH  `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}`
		     * - DELETE `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}`
		     */
		    applicationGuildCommand(applicationId, guildId, commandId) {
		        return `/applications/${applicationId}/guilds/${guildId}/commands/${commandId}`;
		    },
		    /**
		     * Route for:
		     * - POST `/interactions/{interaction.id}/{interaction.token}/callback`
		     */
		    interactionCallback(interactionId, interactionToken) {
		        return `/interactions/${interactionId}/${interactionToken}/callback`;
		    },
		    /**
		     * Route for:
		     * - GET   `/guilds/{guild.id}/member-verification`
		     * - PATCH `/guilds/{guild.id}/member-verification`
		     */
		    guildMemberVerification(guildId) {
		        return `/guilds/${guildId}/member-verification`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/voice-states/@me`
		     * - GET `/guilds/{guild.id}/voice-states/{user.id}`
		     * - PATCH `/guilds/{guild.id}/voice-states/@me`
		     * - PATCH `/guilds/{guild.id}/voice-states/{user.id}`
		     */
		    guildVoiceState(guildId, userId = '@me') {
		        return `/guilds/${guildId}/voice-states/${userId}`;
		    },
		    /**
		     * Route for:
		     * - GET `/applications/{application.id}/guilds/{guild.id}/commands/permissions`
		     * - PUT `/applications/{application.id}/guilds/{guild.id}/commands/permissions`
		     */
		    guildApplicationCommandsPermissions(applicationId, guildId) {
		        return `/applications/${applicationId}/guilds/${guildId}/commands/permissions`;
		    },
		    /**
		     * Route for:
		     * - GET `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}/permissions`
		     * - PUT `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}/permissions`
		     */
		    applicationCommandPermissions(applicationId, guildId, commandId) {
		        return `/applications/${applicationId}/guilds/${guildId}/commands/${commandId}/permissions`;
		    },
		    /**
		     * Route for:
		     * - GET   `/guilds/{guild.id}/welcome-screen`
		     * - PATCH `/guilds/{guild.id}/welcome-screen`
		     */
		    guildWelcomeScreen(guildId) {
		        return `/guilds/${guildId}/welcome-screen`;
		    },
		    /**
		     * Route for:
		     * - POST `/stage-instances`
		     */
		    stageInstances() {
		        return `/stage-instances`;
		    },
		    /**
		     * Route for:
		     * - GET `/stage-instances/{channel.id}`
		     * - PATCH `/stage-instances/{channel.id}`
		     * - DELETE `/stage-instances/{channel.id}`
		     */
		    stageInstance(channelId) {
		        return `/stage-instances/${channelId}`;
		    },
		    /**
		     * Route for:
		     * - GET `/stickers/{sticker.id}`
		     */
		    sticker(stickerId) {
		        return `/stickers/${stickerId}`;
		    },
		    /**
		     * Route for:
		     * - GET `/sticker-packs`
		     */
		    stickerPacks() {
		        return '/sticker-packs';
		    },
		    /**
		     * Route for:
		     * - GET `/sticker-packs/{pack.id}`
		     */
		    stickerPack(packId) {
		        return `/sticker-packs/${packId}`;
		    },
		    /**
		     * Route for:
		     * - GET `/sticker-packs`
		     *
		     * @deprecated Use {@link Routes.stickerPacks} instead.
		     */
		    nitroStickerPacks() {
		        return '/sticker-packs';
		    },
		    /**
		     * Route for:
		     * - GET  `/guilds/{guild.id}/stickers`
		     * - POST `/guilds/{guild.id}/stickers`
		     */
		    guildStickers(guildId) {
		        return `/guilds/${guildId}/stickers`;
		    },
		    /**
		     * Route for:
		     * - GET    `/guilds/{guild.id}/stickers/{sticker.id}`
		     * - PATCH  `/guilds/{guild.id}/stickers/{sticker.id}`
		     * - DELETE `/guilds/{guild.id}/stickers/{sticker.id}`
		     */
		    guildSticker(guildId, stickerId) {
		        return `/guilds/${guildId}/stickers/${stickerId}`;
		    },
		    /**
		     * Route for:
		     * - GET  `/guilds/{guild.id}/scheduled-events`
		     * - POST `/guilds/{guild.id}/scheduled-events`
		     */
		    guildScheduledEvents(guildId) {
		        return `/guilds/${guildId}/scheduled-events`;
		    },
		    /**
		     * Route for:
		     * - GET  `/guilds/{guild.id}/scheduled-events/{guildScheduledEvent.id}`
		     * - PATCH `/guilds/{guild.id}/scheduled-events/{guildScheduledEvent.id}`
		     * - DELETE `/guilds/{guild.id}/scheduled-events/{guildScheduledEvent.id}`
		     */
		    guildScheduledEvent(guildId, guildScheduledEventId) {
		        return `/guilds/${guildId}/scheduled-events/${guildScheduledEventId}`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/scheduled-events/{guildScheduledEvent.id}/users`
		     */
		    guildScheduledEventUsers(guildId, guildScheduledEventId) {
		        return `/guilds/${guildId}/scheduled-events/${guildScheduledEventId}/users`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/onboarding`
		     * - PUT `/guilds/{guild.id}/onboarding`
		     */
		    guildOnboarding(guildId) {
		        return `/guilds/${guildId}/onboarding`;
		    },
		    /**
		     * Route for:
		     * - GET `/applications/@me`
		     * - PATCH `/applications/@me`
		     */
		    currentApplication() {
		        return '/applications/@me';
		    },
		    /**
		     * Route for:
		     * - GET `/applications/{application.id}/entitlements`
		     * - POST `/applications/{application.id}/entitlements`
		     */
		    entitlements(applicationId) {
		        return `/applications/${applicationId}/entitlements`;
		    },
		    /**
		     * Route for:
		     * - DELETE `/applications/{application.id}/entitlements/{entitlement.id}`
		     */
		    entitlement(applicationId, entitlementId) {
		        return `/applications/${applicationId}/entitlements/${entitlementId}`;
		    },
		    /**
		     * Route for:
		     * - GET `/applications/{application.id}/skus`
		     */
		    skus(applicationId) {
		        return `/applications/${applicationId}/skus`;
		    },
		    /**
		     * Route for:
		     * - POST `/guilds/{guild.id}/bulk-ban`
		     */
		    guildBulkBan(guildId) {
		        return `/guilds/${guildId}/bulk-ban`;
		    },
		    /**
		     * Route for:
		     * - POST `/applications/{application.id}/entitlements/{entitlement.id}/consume`
		     */
		    consumeEntitlement(applicationId, entitlementId) {
		        return `/applications/${applicationId}/entitlements/${entitlementId}/consume`;
		    },
		    /**
		     * Route for:
		     * - GET `/applications/{application.id}/emojis`
		     * - POST `/applications/{application.id}/emojis`
		     */
		    applicationEmojis(applicationId) {
		        return `/applications/${applicationId}/emojis`;
		    },
		    /**
		     * Route for:
		     * - GET `/applications/{application.id}/emojis/{emoji.id}`
		     * - PATCH `/applications/{application.id}/emojis/{emoji.id}`
		     * - DELETE `/applications/{application.id}/emojis/{emoji.id}`
		     */
		    applicationEmoji(applicationId, emojiId) {
		        return `/applications/${applicationId}/emojis/${emojiId}`;
		    },
		    /**
		     * Route for:
		     * - GET `/skus/{sku.id}/subscriptions`
		     */
		    skuSubscriptions(skuId) {
		        return `/skus/${skuId}/subscriptions`;
		    },
		    /**
		     * Route for:
		     * - GET `/skus/{sku.id}/subscriptions/${subscription.id}`
		     */
		    skuSubscription(skuId, subscriptionId) {
		        return `/skus/${skuId}/subscriptions/${subscriptionId}`;
		    },
		};
		exports.StickerPackApplicationId = '710982414301790216';
		var ImageFormat;
		(function (ImageFormat) {
		    ImageFormat["JPEG"] = "jpeg";
		    ImageFormat["PNG"] = "png";
		    ImageFormat["WebP"] = "webp";
		    ImageFormat["GIF"] = "gif";
		    ImageFormat["Lottie"] = "json";
		})(ImageFormat || (exports.ImageFormat = ImageFormat = {}));
		exports.CDNRoutes = {
		    /**
		     * Route for:
		     * - GET `/emojis/{emoji.id}.{png|jpeg|webp|gif}`
		     *
		     * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format
		     *
		     * This route supports the extensions: PNG, JPEG, WebP, GIF
		     */
		    emoji(emojiId, format) {
		        return `/emojis/${emojiId}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/icons/{guild.id}/{guild.icon}.{png|jpeg|webp|gif}`
		     *
		     * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format
		     *
		     * This route supports the extensions: PNG, JPEG, WebP, GIF
		     */
		    guildIcon(guildId, guildIcon, format) {
		        return `/icons/${guildId}/${guildIcon}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/splashes/{guild.id}/{guild.splash}.{png|jpeg|webp}`
		     *
		     * This route supports the extensions: PNG, JPEG, WebP
		     */
		    guildSplash(guildId, guildSplash, format) {
		        return `/splashes/${guildId}/${guildSplash}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/discovery-splashes/{guild.id}/{guild.discovery_splash}.{png|jpeg|webp}`
		     *
		     * This route supports the extensions: PNG, JPEG, WebP
		     */
		    guildDiscoverySplash(guildId, guildDiscoverySplash, format) {
		        return `/discovery-splashes/${guildId}/${guildDiscoverySplash}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/banners/{guild.id}/{guild.banner}.{png|jpeg|webp|gif}`
		     *
		     * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format
		     *
		     * This route supports the extensions: PNG, JPEG, WebP, GIF
		     */
		    guildBanner(guildId, guildBanner, format) {
		        return `/banners/${guildId}/${guildBanner}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/banners/{user.id}/{user.banner}.{png|jpeg|webp|gif}`
		     *
		     * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format
		     *
		     * This route supports the extensions: PNG, JPEG, WebP, GIF
		     */
		    userBanner(userId, userBanner, format) {
		        return `/banners/${userId}/${userBanner}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/embed/avatars/{index}.png`
		     *
		     * The value for `index` parameter depends on whether the user is [migrated to the new username system](https://discord.com/developers/docs/change-log#unique-usernames-on-discord).
		     * For users on the new username system, `index` will be `(user.id >> 22) % 6`.
		     * For users on the legacy username system, `index` will be `user.discriminator % 5`.
		     *
		     * This route supports the extension: PNG
		     */
		    defaultUserAvatar(index) {
		        return `/embed/avatars/${index}.png`;
		    },
		    /**
		     * Route for:
		     * - GET `/avatars/{user.id}/{user.avatar}.{png|jpeg|webp|gif}`
		     *
		     * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format
		     *
		     * This route supports the extensions: PNG, JPEG, WebP, GIF
		     */
		    userAvatar(userId, userAvatar, format) {
		        return `/avatars/${userId}/${userAvatar}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/users/{user.id}/avatars/{guild_member.avatar}.{png|jpeg|webp|gif}`
		     *
		     * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format
		     *
		     * This route supports the extensions: PNG, JPEG, WebP, GIF
		     */
		    guildMemberAvatar(guildId, userId, memberAvatar, format) {
		        return `/guilds/${guildId}/users/${userId}/avatars/${memberAvatar}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/avatar-decorations/{user.id}/{user.avatar_decoration}.png`
		     *
		     * This route supports the extension: PNG
		     *
		     * @deprecated Use {@link CDNRoutes.avatarDecoration} instead.
		     */
		    userAvatarDecoration(userId, userAvatarDecoration) {
		        return `/avatar-decorations/${userId}/${userAvatarDecoration}.png`;
		    },
		    /**
		     * Route for:
		     * - GET `/avatar-decoration-presets/{avatar_decoration_data_asset}.png`
		     *
		     * This route supports the extension: PNG
		     */
		    avatarDecoration(avatarDecorationDataAsset) {
		        return `/avatar-decoration-presets/${avatarDecorationDataAsset}.png`;
		    },
		    /**
		     * Route for:
		     * - GET `/app-icons/{application.id}/{application.icon}.{png|jpeg|webp}`
		     *
		     * This route supports the extensions: PNG, JPEG, WebP
		     */
		    applicationIcon(applicationId, applicationIcon, format) {
		        return `/app-icons/${applicationId}/${applicationIcon}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/app-icons/{application.id}/{application.cover_image}.{png|jpeg|webp}`
		     *
		     * This route supports the extensions: PNG, JPEG, WebP
		     */
		    applicationCover(applicationId, applicationCoverImage, format) {
		        return `/app-icons/${applicationId}/${applicationCoverImage}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/app-assets/{application.id}/{application.asset_id}.{png|jpeg|webp}`
		     *
		     * This route supports the extensions: PNG, JPEG, WebP
		     */
		    applicationAsset(applicationId, applicationAssetId, format) {
		        return `/app-assets/${applicationId}/${applicationAssetId}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/app-assets/{application.id}/achievements/{achievement.id}/icons/{achievement.icon}.{png|jpeg|webp}`
		     *
		     * This route supports the extensions: PNG, JPEG, WebP
		     */
		    achievementIcon(applicationId, achievementId, achievementIconHash, format) {
		        return `/app-assets/${applicationId}/achievements/${achievementId}/icons/${achievementIconHash}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/app-assets/710982414301790216/store/{sticker_pack.banner.asset_id}.{png|jpeg|webp}`
		     *
		     * This route supports the extensions: PNG, JPEG, WebP
		     */
		    stickerPackBanner(stickerPackBannerAssetId, format) {
		        return `/app-assets/${exports.StickerPackApplicationId}/store/${stickerPackBannerAssetId}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/app-assets/${application.id}/store/${asset.id}.{png|jpeg|webp}}`
		     *
		     * This route supports the extensions: PNG, JPEG, WebP
		     */
		    storePageAsset(applicationId, assetId, format = ImageFormat.PNG) {
		        return `/app-assets/${applicationId}/store/${assetId}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/team-icons/{team.id}/{team.icon}.{png|jpeg|webp}`
		     *
		     * This route supports the extensions: PNG, JPEG, WebP
		     */
		    teamIcon(teamId, teamIcon, format) {
		        return `/team-icons/${teamId}/${teamIcon}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/stickers/{sticker.id}.{png|json}`
		     *
		     * This route supports the extensions: PNG, Lottie, GIF
		     */
		    sticker(stickerId, format) {
		        return `/stickers/${stickerId}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/role-icons/{role.id}/{role.icon}.{png|jpeg|webp}`
		     *
		     * This route supports the extensions: PNG, JPEG, WebP
		     */
		    roleIcon(roleId, roleIcon, format) {
		        return `/role-icons/${roleId}/${roleIcon}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/guild-events/{guild_scheduled_event.id}/{guild_scheduled_event.image}.{png|jpeg|webp}`
		     *
		     * This route supports the extensions: PNG, JPEG, WebP
		     */
		    guildScheduledEventCover(guildScheduledEventId, guildScheduledEventCoverImage, format) {
		        return `/guild-events/${guildScheduledEventId}/${guildScheduledEventCoverImage}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/${guild.id}/users/${user.id}/banners/${guild_member.banner}.{png|jpeg|webp|gif}`
		     *
		     * This route supports the extensions: PNG, JPEG, WebP, GIF
		     */
		    guildMemberBanner(guildId, userId, guildMemberBanner, format) {
		        return `/guilds/${guildId}/users/${userId}/banners/${guildMemberBanner}.${format}`;
		    },
		};
		exports.RouteBases = {
		    api: `https://discord.com/api/v${exports.APIVersion}`,
		    cdn: 'https://cdn.discordapp.com',
		    media: 'https://media.discordapp.net',
		    invite: 'https://discord.gg',
		    template: 'https://discord.new',
		    gift: 'https://discord.gift',
		    scheduledEvent: 'https://discord.com/events',
		};
		// Freeze bases object
		Object.freeze(exports.RouteBases);
		exports.OAuth2Routes = {
		    authorizationURL: `${exports.RouteBases.api}${exports.Routes.oauth2Authorization()}`,
		    tokenURL: `${exports.RouteBases.api}${exports.Routes.oauth2TokenExchange()}`,
		    /**
		     * See https://tools.ietf.org/html/rfc7009
		     */
		    tokenRevocationURL: `${exports.RouteBases.api}${exports.Routes.oauth2TokenRevocation()}`,
		};
		// Freeze OAuth2 route object
		Object.freeze(exports.OAuth2Routes);
		
	} (v10$g));
	return v10$g;
}

var v10Exports$7 = requireV10$9();
var mod$8 = /*@__PURE__*/getDefaultExportFromCjs(v10Exports$7);

const APIVersion$1 = mod$8.APIVersion;
const CDNRoutes$1 = mod$8.CDNRoutes;
const EntitlementOwnerType$1 = mod$8.EntitlementOwnerType;
const ImageFormat$1 = mod$8.ImageFormat;
const Locale$1 = mod$8.Locale;
const OAuth2Routes$1 = mod$8.OAuth2Routes;
const RESTJSONErrorCodes$1 = mod$8.RESTJSONErrorCodes;
const ReactionType = mod$8.ReactionType;
const RouteBases$1 = mod$8.RouteBases;
const Routes$1 = mod$8.Routes;
const StickerPackApplicationId$1 = mod$8.StickerPackApplicationId;

var v10$f = /*#__PURE__*/Object.freeze({
	__proto__: null,
	APIVersion: APIVersion$1,
	CDNRoutes: CDNRoutes$1,
	EntitlementOwnerType: EntitlementOwnerType$1,
	ImageFormat: ImageFormat$1,
	Locale: Locale$1,
	OAuth2Routes: OAuth2Routes$1,
	RESTJSONErrorCodes: RESTJSONErrorCodes$1,
	ReactionType: ReactionType,
	RouteBases: RouteBases$1,
	Routes: Routes$1,
	StickerPackApplicationId: StickerPackApplicationId$1,
	default: mod$8
});

var require$$3$1 = /*@__PURE__*/getAugmentedNamespace(v10$f);

var v10$e = {};

var common$4 = {};

var hasRequiredCommon$4;

function requireCommon$4 () {
	if (hasRequiredCommon$4) return common$4;
	hasRequiredCommon$4 = 1;
	Object.defineProperty(common$4, "__esModule", { value: true });
	common$4.RPCCloseEventCodes = common$4.RPCErrorCodes = void 0;
	/**
	 * https://discord.com/developers/docs/topics/opcodes-and-status-codes#rpc-rpc-error-codes
	 */
	var RPCErrorCodes;
	(function (RPCErrorCodes) {
	    RPCErrorCodes[RPCErrorCodes["UnknownError"] = 1000] = "UnknownError";
	    RPCErrorCodes[RPCErrorCodes["InvalidPayload"] = 4000] = "InvalidPayload";
	    RPCErrorCodes[RPCErrorCodes["InvalidCommand"] = 4002] = "InvalidCommand";
	    RPCErrorCodes[RPCErrorCodes["InvalidGuild"] = 4003] = "InvalidGuild";
	    RPCErrorCodes[RPCErrorCodes["InvalidEvent"] = 4004] = "InvalidEvent";
	    RPCErrorCodes[RPCErrorCodes["InvalidChannel"] = 4005] = "InvalidChannel";
	    RPCErrorCodes[RPCErrorCodes["InvalidPermissions"] = 4006] = "InvalidPermissions";
	    RPCErrorCodes[RPCErrorCodes["InvalidClientId"] = 4007] = "InvalidClientId";
	    RPCErrorCodes[RPCErrorCodes["InvalidOrigin"] = 4008] = "InvalidOrigin";
	    RPCErrorCodes[RPCErrorCodes["InvalidToken"] = 4009] = "InvalidToken";
	    RPCErrorCodes[RPCErrorCodes["InvalidUser"] = 4010] = "InvalidUser";
	    RPCErrorCodes[RPCErrorCodes["OAuth2Error"] = 5000] = "OAuth2Error";
	    RPCErrorCodes[RPCErrorCodes["SelectChannelTimedOut"] = 5001] = "SelectChannelTimedOut";
	    RPCErrorCodes[RPCErrorCodes["GetGuildTimedOut"] = 5002] = "GetGuildTimedOut";
	    RPCErrorCodes[RPCErrorCodes["SelectVoiceForceRequired"] = 5003] = "SelectVoiceForceRequired";
	    RPCErrorCodes[RPCErrorCodes["CaptureShortcutAlreadyListening"] = 5004] = "CaptureShortcutAlreadyListening";
	})(RPCErrorCodes || (common$4.RPCErrorCodes = RPCErrorCodes = {}));
	/**
	 * https://discord.com/developers/docs/topics/opcodes-and-status-codes#rpc-rpc-close-event-codes
	 */
	var RPCCloseEventCodes;
	(function (RPCCloseEventCodes) {
	    RPCCloseEventCodes[RPCCloseEventCodes["InvalidClientId"] = 4000] = "InvalidClientId";
	    RPCCloseEventCodes[RPCCloseEventCodes["InvalidOrigin"] = 4001] = "InvalidOrigin";
	    RPCCloseEventCodes[RPCCloseEventCodes["RateLimited"] = 4002] = "RateLimited";
	    RPCCloseEventCodes[RPCCloseEventCodes["TokenRevoked"] = 4003] = "TokenRevoked";
	    RPCCloseEventCodes[RPCCloseEventCodes["InvalidVersion"] = 4004] = "InvalidVersion";
	    RPCCloseEventCodes[RPCCloseEventCodes["InvalidEncoding"] = 4005] = "InvalidEncoding";
	})(RPCCloseEventCodes || (common$4.RPCCloseEventCodes = RPCCloseEventCodes = {}));
	
	return common$4;
}

var hasRequiredV10$8;

function requireV10$8 () {
	if (hasRequiredV10$8) return v10$e;
	hasRequiredV10$8 = 1;
	(function (exports) {
		var __createBinding = (v10$e && v10$e.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (v10$e && v10$e.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(requireCommon$4(), exports);
		
	} (v10$e));
	return v10$e;
}

var v10Exports$6 = requireV10$8();
var mod$7 = /*@__PURE__*/getDefaultExportFromCjs(v10Exports$6);

const RPCCloseEventCodes$1 = mod$7.RPCCloseEventCodes;
const RPCErrorCodes$1 = mod$7.RPCErrorCodes;

var v10$d = /*#__PURE__*/Object.freeze({
	__proto__: null,
	RPCCloseEventCodes: RPCCloseEventCodes$1,
	RPCErrorCodes: RPCErrorCodes$1,
	default: mod$7
});

var require$$4$1 = /*@__PURE__*/getAugmentedNamespace(v10$d);

var v10$c = {};

var hasRequiredV10$7;

function requireV10$7 () {
	if (hasRequiredV10$7) return v10$c;
	hasRequiredV10$7 = 1;
	Object.defineProperty(v10$c, "__esModule", { value: true });
	v10$c.isDMInteraction = isDMInteraction;
	v10$c.isGuildInteraction = isGuildInteraction;
	v10$c.isApplicationCommandDMInteraction = isApplicationCommandDMInteraction;
	v10$c.isApplicationCommandGuildInteraction = isApplicationCommandGuildInteraction;
	v10$c.isMessageComponentDMInteraction = isMessageComponentDMInteraction;
	v10$c.isMessageComponentGuildInteraction = isMessageComponentGuildInteraction;
	v10$c.isLinkButton = isLinkButton;
	v10$c.isInteractionButton = isInteractionButton;
	v10$c.isMessageComponentInteraction = isMessageComponentInteraction;
	v10$c.isMessageComponentButtonInteraction = isMessageComponentButtonInteraction;
	v10$c.isMessageComponentSelectMenuInteraction = isMessageComponentSelectMenuInteraction;
	v10$c.isChatInputApplicationCommandInteraction = isChatInputApplicationCommandInteraction;
	v10$c.isContextMenuApplicationCommandInteraction = isContextMenuApplicationCommandInteraction;
	const index_1 = require$$2$1;
	// Interactions
	/**
	 * A type-guard check for DM interactions
	 *
	 * @param interaction The interaction to check against
	 * @returns A boolean that indicates if the interaction was received in a DM channel
	 */
	function isDMInteraction(interaction) {
	    return Reflect.has(interaction, 'user');
	}
	/**
	 * A type-guard check for guild interactions
	 *
	 * @param interaction The interaction to check against
	 * @returns A boolean that indicates if the interaction was received in a guild
	 */
	function isGuildInteraction(interaction) {
	    return Reflect.has(interaction, 'guild_id');
	}
	// ApplicationCommandInteractions
	/**
	 * A type-guard check for DM application command interactions
	 *
	 * @param interaction The application command interaction to check against
	 * @returns A boolean that indicates if the application command interaction was received in a DM channel
	 */
	function isApplicationCommandDMInteraction(interaction) {
	    return isDMInteraction(interaction);
	}
	/**
	 * A type-guard check for guild application command interactions
	 *
	 * @param interaction The interaction to check against
	 * @returns A boolean that indicates if the application command interaction was received in a guild
	 */
	function isApplicationCommandGuildInteraction(interaction) {
	    return isGuildInteraction(interaction);
	}
	// MessageComponentInteractions
	/**
	 * A type-guard check for DM message component interactions
	 *
	 * @param interaction The message component interaction to check against
	 * @returns A boolean that indicates if the message component interaction was received in a DM channel
	 */
	function isMessageComponentDMInteraction(interaction) {
	    return isDMInteraction(interaction);
	}
	/**
	 * A type-guard check for guild message component interactions
	 *
	 * @param interaction The interaction to check against
	 * @returns A boolean that indicates if the message component interaction was received in a guild
	 */
	function isMessageComponentGuildInteraction(interaction) {
	    return isGuildInteraction(interaction);
	}
	// Buttons
	/**
	 * A type-guard check for buttons that have a `url` attached to them.
	 *
	 * @param component The button to check against
	 * @returns A boolean that indicates if the button has a `url` attached to it
	 */
	function isLinkButton(component) {
	    return component.style === index_1.ButtonStyle.Link;
	}
	/**
	 * A type-guard check for buttons that have a `custom_id` attached to them.
	 *
	 * @param component The button to check against
	 * @returns A boolean that indicates if the button has a `custom_id` attached to it
	 */
	function isInteractionButton(component) {
	    return component.style !== index_1.ButtonStyle.Link;
	}
	// Message Components
	/**
	 * A type-guard check for message component interactions
	 *
	 * @param interaction The interaction to check against
	 * @returns A boolean that indicates if the interaction is a message component
	 */
	function isMessageComponentInteraction(interaction) {
	    return interaction.type === index_1.InteractionType.MessageComponent;
	}
	/**
	 * A type-guard check for button message component interactions
	 *
	 * @param interaction The message component interaction to check against
	 * @returns A boolean that indicates if the message component is a button
	 */
	function isMessageComponentButtonInteraction(interaction) {
	    return interaction.data.component_type === index_1.ComponentType.Button;
	}
	/**
	 * A type-guard check for select menu message component interactions
	 *
	 * @param interaction The message component interaction to check against
	 * @returns A boolean that indicates if the message component is a select menu
	 */
	function isMessageComponentSelectMenuInteraction(interaction) {
	    return [
	        index_1.ComponentType.StringSelect,
	        index_1.ComponentType.UserSelect,
	        index_1.ComponentType.RoleSelect,
	        index_1.ComponentType.MentionableSelect,
	        index_1.ComponentType.ChannelSelect,
	    ].includes(interaction.data.component_type);
	}
	// Application Commands
	/**
	 * A type-guard check for chat input application commands.
	 *
	 * @param interaction The interaction to check against
	 * @returns A boolean that indicates if the interaction is a chat input application command
	 */
	function isChatInputApplicationCommandInteraction(interaction) {
	    return interaction.data.type === index_1.ApplicationCommandType.ChatInput;
	}
	/**
	 * A type-guard check for context menu application commands.
	 *
	 * @param interaction The interaction to check against
	 * @returns A boolean that indicates if the interaction is a context menu application command
	 */
	function isContextMenuApplicationCommandInteraction(interaction) {
	    return (interaction.data.type === index_1.ApplicationCommandType.Message ||
	        interaction.data.type === index_1.ApplicationCommandType.User);
	}
	
	return v10$c;
}

var v10Exports$5 = requireV10$7();
var mod$6 = /*@__PURE__*/getDefaultExportFromCjs(v10Exports$5);

const isApplicationCommandDMInteraction$1 = mod$6.isApplicationCommandDMInteraction;
const isApplicationCommandGuildInteraction$1 = mod$6.isApplicationCommandGuildInteraction;
const isChatInputApplicationCommandInteraction$1 = mod$6.isChatInputApplicationCommandInteraction;
const isContextMenuApplicationCommandInteraction$1 = mod$6.isContextMenuApplicationCommandInteraction;
const isDMInteraction$1 = mod$6.isDMInteraction;
const isGuildInteraction$1 = mod$6.isGuildInteraction;
const isInteractionButton$1 = mod$6.isInteractionButton;
const isLinkButton$1 = mod$6.isLinkButton;
const isMessageComponentButtonInteraction$1 = mod$6.isMessageComponentButtonInteraction;
const isMessageComponentDMInteraction$1 = mod$6.isMessageComponentDMInteraction;
const isMessageComponentGuildInteraction$1 = mod$6.isMessageComponentGuildInteraction;
const isMessageComponentInteraction$1 = mod$6.isMessageComponentInteraction;
const isMessageComponentSelectMenuInteraction$1 = mod$6.isMessageComponentSelectMenuInteraction;

var v10$b = /*#__PURE__*/Object.freeze({
	__proto__: null,
	default: mod$6,
	isApplicationCommandDMInteraction: isApplicationCommandDMInteraction$1,
	isApplicationCommandGuildInteraction: isApplicationCommandGuildInteraction$1,
	isChatInputApplicationCommandInteraction: isChatInputApplicationCommandInteraction$1,
	isContextMenuApplicationCommandInteraction: isContextMenuApplicationCommandInteraction$1,
	isDMInteraction: isDMInteraction$1,
	isGuildInteraction: isGuildInteraction$1,
	isInteractionButton: isInteractionButton$1,
	isLinkButton: isLinkButton$1,
	isMessageComponentButtonInteraction: isMessageComponentButtonInteraction$1,
	isMessageComponentDMInteraction: isMessageComponentDMInteraction$1,
	isMessageComponentGuildInteraction: isMessageComponentGuildInteraction$1,
	isMessageComponentInteraction: isMessageComponentInteraction$1,
	isMessageComponentSelectMenuInteraction: isMessageComponentSelectMenuInteraction$1
});

var require$$5$2 = /*@__PURE__*/getAugmentedNamespace(v10$b);

var hasRequiredV10$6;

function requireV10$6 () {
	if (hasRequiredV10$6) return v10$l;
	hasRequiredV10$6 = 1;
	(function (exports) {
		var __createBinding = (v10$l && v10$l.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (v10$l && v10$l.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.Utils = void 0;
		__exportStar(require$$0$1, exports);
		__exportStar(require$$1$1, exports);
		__exportStar(require$$2$1, exports);
		__exportStar(require$$3$1, exports);
		__exportStar(require$$4$1, exports);
		exports.Utils = require$$5$2;
		
	} (v10$l));
	return v10$l;
}

var errors$1 = {exports: {}};

var ErrorCodes;
var hasRequiredErrorCodes;

function requireErrorCodes () {
	if (hasRequiredErrorCodes) return ErrorCodes;
	hasRequiredErrorCodes = 1;

	/**
	 * @typedef {Object} DiscordjsErrorCodes

	 * @property {'ClientInvalidOption'} ClientInvalidOption
	 * @property {'ClientInvalidProvidedShards'} ClientInvalidProvidedShards
	 * @property {'ClientMissingIntents'} ClientMissingIntents
	 * @property {'ClientNotReady'} ClientNotReady

	 * @property {'TokenInvalid'} TokenInvalid
	 * @property {'TokenMissing'} TokenMissing
	 * @property {'ApplicationCommandPermissionsTokenMissing'} ApplicationCommandPermissionsTokenMissing

	 * @property {'WSCloseRequested'} WSCloseRequested
	 * <warn>This property is deprecated.</warn>
	 * @property {'WSConnectionExists'} WSConnectionExists
	 * <warn>This property is deprecated.</warn>
	 * @property {'WSNotOpen'} WSNotOpen
	 * <warn>This property is deprecated.</warn>
	 * @property {'ManagerDestroyed'} ManagerDestroyed
	 * <warn>This property is deprecated.</warn>

	 * @property {'BitFieldInvalid'} BitFieldInvalid

	 * @property {'ShardingInvalid'} ShardingInvalid
	 * <warn>This property is deprecated.</warn>
	 * @property {'ShardingRequired'} ShardingRequired
	 * <warn>This property is deprecated.</warn>
	 * @property {'InvalidIntents'} InvalidIntents
	 * <warn>This property is deprecated.</warn>
	 * @property {'DisallowedIntents'} DisallowedIntents
	 * <warn>This property is deprecated.</warn>
	 * @property {'ShardingNoShards'} ShardingNoShards
	 * @property {'ShardingInProcess'} ShardingInProcess
	 * @property {'ShardingInvalidEvalBroadcast'} ShardingInvalidEvalBroadcast
	 * @property {'ShardingShardNotFound'} ShardingShardNotFound
	 * @property {'ShardingAlreadySpawned'} ShardingAlreadySpawned
	 * @property {'ShardingProcessExists'} ShardingProcessExists
	 * @property {'ShardingWorkerExists'} ShardingWorkerExists
	 * @property {'ShardingReadyTimeout'} ShardingReadyTimeout
	 * @property {'ShardingReadyDisconnected'} ShardingReadyDisconnected
	 * @property {'ShardingReadyDied'} ShardingReadyDied
	 * @property {'ShardingNoChildExists'} ShardingNoChildExists
	 * @property {'ShardingShardMiscalculation'} ShardingShardMiscalculation

	 * @property {'ColorRange'} ColorRange
	 * @property {'ColorConvert'} ColorConvert

	 * @property {'InviteOptionsMissingChannel'} InviteOptionsMissingChannel

	 * @property {'ButtonLabel'} ButtonLabel
	 * <warn>This property is deprecated.</warn>
	 * @property {'ButtonURL'} ButtonURL
	 * <warn>This property is deprecated.</warn>
	 * @property {'ButtonCustomId'} ButtonCustomId
	 * <warn>This property is deprecated.</warn>

	 * @property {'SelectMenuCustomId'} SelectMenuCustomId
	 * <warn>This property is deprecated.</warn>
	 * @property {'SelectMenuPlaceholder'} SelectMenuPlaceholder
	 * <warn>This property is deprecated.</warn>
	 * @property {'SelectOptionLabel'} SelectOptionLabel
	 * <warn>This property is deprecated.</warn>
	 * @property {'SelectOptionValue'} SelectOptionValue
	 * <warn>This property is deprecated.</warn>
	 * @property {'SelectOptionDescription'} SelectOptionDescription
	 * <warn>This property is deprecated.</warn>

	 * @property {'InteractionCollectorError'} InteractionCollectorError

	 * @property {'FileNotFound'} FileNotFound

	 * @property {'UserBannerNotFetched'} UserBannerNotFetched
	 * <warn>This property is deprecated.</warn>
	 * @property {'UserNoDMChannel'} UserNoDMChannel

	 * @property {'VoiceNotStageChannel'} VoiceNotStageChannel

	 * @property {'VoiceStateNotOwn'} VoiceStateNotOwn
	 * @property {'VoiceStateInvalidType'} VoiceStateInvalidType

	 * @property {'ReqResourceType'} ReqResourceType

	 * @property {'ImageFormat'} ImageFormat
	 * <warn>This property is deprecated.</warn>
	 * @property {'ImageSize'} ImageSize
	 * <warn>This property is deprecated.</warn>

	 * @property {'MessageBulkDeleteType'} MessageBulkDeleteType
	 * @property {'MessageContentType'} MessageContentType
	 * @property {'MessageNonceRequired'} MessageNonceRequired
	 * @property {'MessageNonceType'} MessageNonceType

	 * @property {'SplitMaxLen'} SplitMaxLen
	 * <warn>This property is deprecated.</warn>

	 * @property {'BanResolveId'} BanResolveId
	 * @property {'FetchBanResolveId'} FetchBanResolveId

	 * @property {'PruneDaysType'} PruneDaysType

	 * @property {'GuildChannelResolve'} GuildChannelResolve
	 * @property {'GuildVoiceChannelResolve'} GuildVoiceChannelResolve
	 * @property {'GuildChannelOrphan'} GuildChannelOrphan
	 * @property {'GuildChannelUnowned'} GuildChannelUnowned
	 * @property {'GuildOwned'} GuildOwned
	 * @property {'GuildMembersTimeout'} GuildMembersTimeout
	 * @property {'GuildUncachedMe'} GuildUncachedMe
	 * @property {'ChannelNotCached'} ChannelNotCached
	 * @property {'StageChannelResolve'} StageChannelResolve
	 * @property {'GuildScheduledEventResolve'} GuildScheduledEventResolve
	 * @property {'FetchOwnerId'} FetchOwnerId

	 * @property {'InvalidType'} InvalidType
	 * @property {'InvalidElement'} InvalidElement

	 * @property {'MessageThreadParent'} MessageThreadParent
	 * @property {'MessageExistingThread'} MessageExistingThread
	 * @property {'ThreadInvitableType'} ThreadInvitableType

	 * @property {'WebhookMessage'} WebhookMessage
	 * @property {'WebhookTokenUnavailable'} WebhookTokenUnavailable
	 * @property {'WebhookURLInvalid'} WebhookURLInvalid
	 * @property {'WebhookApplication'} WebhookApplication
	 * @property {'MessageReferenceMissing'} MessageReferenceMissing

	 * @property {'EmojiType'} EmojiType
	 * @property {'EmojiManaged'} EmojiManaged
	 * @property {'MissingManageGuildExpressionsPermission'} MissingManageGuildExpressionsPermission
	 * @property {'MissingManageEmojisAndStickersPermission'} MissingManageEmojisAndStickersPermission
	 * <warn>This property is deprecated. Use `MissingManageGuildExpressionsPermission` instead.</warn>
	 *
	 * @property {'NotGuildSticker'} NotGuildSticker

	 * @property {'ReactionResolveUser'} ReactionResolveUser

	 * @property {'VanityURL'} VanityURL
	 * <warn>This property is deprecated.</warn>

	 * @property {'InviteResolveCode'} InviteResolveCode

	 * @property {'InviteNotFound'} InviteNotFound

	 * @property {'DeleteGroupDMChannel'} DeleteGroupDMChannel
	 * @property {'FetchGroupDMChannel'} FetchGroupDMChannel

	 * @property {'MemberFetchNonceLength'} MemberFetchNonceLength

	 * @property {'GlobalCommandPermissions'} GlobalCommandPermissions
	 * @property {'GuildUncachedEntityResolve'} GuildUncachedEntityResolve

	 * @property {'InteractionAlreadyReplied'} InteractionAlreadyReplied
	 * @property {'InteractionNotReplied'} InteractionNotReplied
	 * @property {'InteractionEphemeralReplied'} InteractionEphemeralReplied
	 * <warn>This property is deprecated.</warn>

	 * @property {'CommandInteractionOptionNotFound'} CommandInteractionOptionNotFound
	 * @property {'CommandInteractionOptionType'} CommandInteractionOptionType
	 * @property {'CommandInteractionOptionEmpty'} CommandInteractionOptionEmpty
	 * @property {'CommandInteractionOptionNoSubcommand'} CommandInteractionOptionNoSubcommand
	 * @property {'CommandInteractionOptionNoSubcommandGroup'} CommandInteractionOptionNoSubcommandGroup
	 * @property {'CommandInteractionOptionInvalidChannelType'} CommandInteractionOptionInvalidChannelType
	 * @property {'AutocompleteInteractionOptionNoFocusedOption'} AutocompleteInteractionOptionNoFocusedOption

	 * @property {'ModalSubmitInteractionFieldNotFound'} ModalSubmitInteractionFieldNotFound
	 * @property {'ModalSubmitInteractionFieldType'} ModalSubmitInteractionFieldType

	 * @property {'InvalidMissingScopes'} InvalidMissingScopes
	 * @property {'InvalidScopesWithPermissions'} InvalidScopesWithPermissions

	 * @property {'NotImplemented'} NotImplemented

	 * @property {'GuildForumMessageRequired'} GuildForumMessageRequired

	 * @property {'SweepFilterReturn'} SweepFilterReturn

	 * @property {'EntitlementCreateInvalidOwner'} EntitlementCreateInvalidOwner

	 * @property {'BulkBanUsersOptionEmpty'} BulkBanUsersOptionEmpty

	 * @property {'PollAlreadyExpired'} PollAlreadyExpired
	 */

	const keys = [
	  'ClientInvalidOption',
	  'ClientInvalidProvidedShards',
	  'ClientMissingIntents',
	  'ClientNotReady',

	  'TokenInvalid',
	  'TokenMissing',
	  'ApplicationCommandPermissionsTokenMissing',

	  'WSCloseRequested',
	  'WSConnectionExists',
	  'WSNotOpen',
	  'ManagerDestroyed',

	  'BitFieldInvalid',

	  'ShardingInvalid',
	  'ShardingRequired',
	  'InvalidIntents',
	  'DisallowedIntents',
	  'ShardingNoShards',
	  'ShardingInProcess',
	  'ShardingInvalidEvalBroadcast',
	  'ShardingShardNotFound',
	  'ShardingAlreadySpawned',
	  'ShardingProcessExists',
	  'ShardingWorkerExists',
	  'ShardingReadyTimeout',
	  'ShardingReadyDisconnected',
	  'ShardingReadyDied',
	  'ShardingNoChildExists',
	  'ShardingShardMiscalculation',

	  'ColorRange',
	  'ColorConvert',

	  'InviteOptionsMissingChannel',

	  'ButtonLabel',
	  'ButtonURL',
	  'ButtonCustomId',

	  'SelectMenuCustomId',
	  'SelectMenuPlaceholder',
	  'SelectOptionLabel',
	  'SelectOptionValue',
	  'SelectOptionDescription',

	  'InteractionCollectorError',

	  'FileNotFound',

	  'UserBannerNotFetched',
	  'UserNoDMChannel',

	  'VoiceNotStageChannel',

	  'VoiceStateNotOwn',
	  'VoiceStateInvalidType',

	  'ReqResourceType',

	  'ImageFormat',
	  'ImageSize',

	  'MessageBulkDeleteType',
	  'MessageContentType',
	  'MessageNonceRequired',
	  'MessageNonceType',

	  'SplitMaxLen',

	  'BanResolveId',
	  'FetchBanResolveId',

	  'PruneDaysType',

	  'GuildChannelResolve',
	  'GuildVoiceChannelResolve',
	  'GuildChannelOrphan',
	  'GuildChannelUnowned',
	  'GuildOwned',
	  'GuildMembersTimeout',
	  'GuildUncachedMe',
	  'ChannelNotCached',
	  'StageChannelResolve',
	  'GuildScheduledEventResolve',
	  'FetchOwnerId',

	  'InvalidType',
	  'InvalidElement',

	  'MessageThreadParent',
	  'MessageExistingThread',
	  'ThreadInvitableType',

	  'WebhookMessage',
	  'WebhookTokenUnavailable',
	  'WebhookURLInvalid',
	  'WebhookApplication',
	  'MessageReferenceMissing',

	  'EmojiType',
	  'EmojiManaged',
	  'MissingManageGuildExpressionsPermission',
	  'MissingManageEmojisAndStickersPermission',

	  'NotGuildSticker',

	  'ReactionResolveUser',

	  'VanityURL',

	  'InviteResolveCode',

	  'InviteNotFound',

	  'DeleteGroupDMChannel',
	  'FetchGroupDMChannel',

	  'MemberFetchNonceLength',

	  'GlobalCommandPermissions',
	  'GuildUncachedEntityResolve',

	  'InteractionAlreadyReplied',
	  'InteractionNotReplied',
	  'InteractionEphemeralReplied',

	  'CommandInteractionOptionNotFound',
	  'CommandInteractionOptionType',
	  'CommandInteractionOptionEmpty',
	  'CommandInteractionOptionNoSubcommand',
	  'CommandInteractionOptionNoSubcommandGroup',
	  'CommandInteractionOptionInvalidChannelType',
	  'AutocompleteInteractionOptionNoFocusedOption',

	  'ModalSubmitInteractionFieldNotFound',
	  'ModalSubmitInteractionFieldType',

	  'InvalidMissingScopes',
	  'InvalidScopesWithPermissions',

	  'NotImplemented',

	  'SweepFilterReturn',

	  'GuildForumMessageRequired',

	  'EntitlementCreateInvalidOwner',

	  'BulkBanUsersOptionEmpty',

	  'PollAlreadyExpired',
	];

	// JSDoc for IntelliSense purposes
	/**
	 * @type {DiscordjsErrorCodes}
	 * @ignore
	 */
	ErrorCodes = Object.fromEntries(keys.map(key => [key, key]));
	return ErrorCodes;
}

var Messages_1;
var hasRequiredMessages;

function requireMessages () {
	if (hasRequiredMessages) return Messages_1;
	hasRequiredMessages = 1;

	const DjsErrorCodes = requireErrorCodes();

	const Messages = {
	  [DjsErrorCodes.ClientInvalidOption]: (prop, must) => `The ${prop} option must be ${must}`,
	  [DjsErrorCodes.ClientInvalidProvidedShards]: 'None of the provided shards were valid.',
	  [DjsErrorCodes.ClientMissingIntents]: 'Valid intents must be provided for the Client.',
	  [DjsErrorCodes.ClientNotReady]: action => `The client needs to be logged in to ${action}.`,

	  [DjsErrorCodes.TokenInvalid]: 'An invalid token was provided.',
	  [DjsErrorCodes.TokenMissing]: 'Request to use token, but token was unavailable to the client.',
	  [DjsErrorCodes.ApplicationCommandPermissionsTokenMissing]:
	    'Editing application command permissions requires an OAuth2 bearer token, but none was provided.',

	  [DjsErrorCodes.WSCloseRequested]: 'WebSocket closed due to user request.',
	  [DjsErrorCodes.WSConnectionExists]: 'There is already an existing WebSocket connection.',
	  [DjsErrorCodes.WSNotOpen]: (data = 'data') => `WebSocket not open to send ${data}`,
	  [DjsErrorCodes.ManagerDestroyed]: 'Manager was destroyed.',

	  [DjsErrorCodes.BitFieldInvalid]: bit => `Invalid bitfield flag or number: ${bit}.`,

	  [DjsErrorCodes.ShardingInvalid]: 'Invalid shard settings were provided.',
	  [DjsErrorCodes.ShardingRequired]: 'This session would have handled too many guilds - Sharding is required.',
	  [DjsErrorCodes.InvalidIntents]: 'Invalid intent provided for WebSocket intents.',
	  [DjsErrorCodes.DisallowedIntents]: 'Privileged intent provided is not enabled or whitelisted.',
	  [DjsErrorCodes.ShardingNoShards]: 'No shards have been spawned.',
	  [DjsErrorCodes.ShardingInProcess]: 'Shards are still being spawned.',
	  [DjsErrorCodes.ShardingInvalidEvalBroadcast]: 'Script to evaluate must be a function',
	  [DjsErrorCodes.ShardingShardNotFound]: id => `Shard ${id} could not be found.`,
	  [DjsErrorCodes.ShardingAlreadySpawned]: count => `Already spawned ${count} shards.`,
	  [DjsErrorCodes.ShardingProcessExists]: id => `Shard ${id} already has an active process.`,
	  [DjsErrorCodes.ShardingWorkerExists]: id => `Shard ${id} already has an active worker.`,
	  [DjsErrorCodes.ShardingReadyTimeout]: id => `Shard ${id}'s Client took too long to become ready.`,
	  [DjsErrorCodes.ShardingReadyDisconnected]: id => `Shard ${id}'s Client disconnected before becoming ready.`,
	  [DjsErrorCodes.ShardingReadyDied]: id => `Shard ${id}'s process exited before its Client became ready.`,
	  [DjsErrorCodes.ShardingNoChildExists]: id => `Shard ${id} has no active process or worker.`,
	  [DjsErrorCodes.ShardingShardMiscalculation]: (shard, guild, count) =>
	    `Calculated invalid shard ${shard} for guild ${guild} with ${count} shards.`,

	  [DjsErrorCodes.ColorRange]: 'Color must be within the range 0 - 16777215 (0xFFFFFF).',
	  [DjsErrorCodes.ColorConvert]: color => `Unable to convert "${color}" to a number.`,

	  [DjsErrorCodes.InviteOptionsMissingChannel]:
	    'A valid guild channel must be provided when GuildScheduledEvent is EXTERNAL.',

	  [DjsErrorCodes.ButtonLabel]: 'MessageButton label must be a string',
	  [DjsErrorCodes.ButtonURL]: 'MessageButton URL must be a string',
	  [DjsErrorCodes.ButtonCustomId]: 'MessageButton customId must be a string',

	  [DjsErrorCodes.SelectMenuCustomId]: 'MessageSelectMenu customId must be a string',
	  [DjsErrorCodes.SelectMenuPlaceholder]: 'MessageSelectMenu placeholder must be a string',
	  [DjsErrorCodes.SelectOptionLabel]: 'MessageSelectOption label must be a string',
	  [DjsErrorCodes.SelectOptionValue]: 'MessageSelectOption value must be a string',
	  [DjsErrorCodes.SelectOptionDescription]: 'MessageSelectOption description must be a string',

	  [DjsErrorCodes.InteractionCollectorError]: reason =>
	    `Collector received no interactions before ending with reason: ${reason}`,

	  [DjsErrorCodes.FileNotFound]: file => `File could not be found: ${file}`,

	  [DjsErrorCodes.UserBannerNotFetched]: "You must fetch this user's banner before trying to generate its URL!",
	  [DjsErrorCodes.UserNoDMChannel]: 'No DM Channel exists!',

	  [DjsErrorCodes.VoiceNotStageChannel]: 'You are only allowed to do this in stage channels.',

	  [DjsErrorCodes.VoiceStateNotOwn]:
	    'You cannot self-deafen/mute/request to speak on VoiceStates that do not belong to the ClientUser.',
	  [DjsErrorCodes.VoiceStateInvalidType]: name => `${name} must be a boolean.`,

	  [DjsErrorCodes.ReqResourceType]: 'The resource must be a string, Buffer or a valid file stream.',

	  [DjsErrorCodes.ImageFormat]: format => `Invalid image format: ${format}`,
	  [DjsErrorCodes.ImageSize]: size => `Invalid image size: ${size}`,

	  [DjsErrorCodes.MessageBulkDeleteType]: 'The messages must be an Array, Collection, or number.',
	  [DjsErrorCodes.MessageContentType]: 'Message content must be a string.',
	  [DjsErrorCodes.MessageNonceRequired]: 'Message nonce is required when enforceNonce is true.',
	  [DjsErrorCodes.MessageNonceType]: 'Message nonce must be an integer or a string.',

	  [DjsErrorCodes.SplitMaxLen]: 'Chunk exceeds the max length and contains no split characters.',

	  [DjsErrorCodes.BanResolveId]: (ban = false) => `Couldn't resolve the user id to ${ban ? 'ban' : 'unban'}.`,
	  [DjsErrorCodes.FetchBanResolveId]: "Couldn't resolve the user id to fetch the ban.",

	  [DjsErrorCodes.PruneDaysType]: 'Days must be a number',

	  [DjsErrorCodes.GuildChannelResolve]: 'Could not resolve channel to a guild channel.',
	  [DjsErrorCodes.GuildVoiceChannelResolve]: 'Could not resolve channel to a guild voice channel.',
	  [DjsErrorCodes.GuildChannelOrphan]: 'Could not find a parent to this guild channel.',
	  [DjsErrorCodes.GuildChannelUnowned]: "The fetched channel does not belong to this manager's guild.",
	  [DjsErrorCodes.GuildOwned]: 'Guild is owned by the client.',
	  [DjsErrorCodes.GuildMembersTimeout]: "Members didn't arrive in time.",
	  [DjsErrorCodes.GuildUncachedMe]: 'The client user as a member of this guild is uncached.',
	  [DjsErrorCodes.ChannelNotCached]: 'Could not find the channel where this message came from in the cache!',
	  [DjsErrorCodes.StageChannelResolve]: 'Could not resolve channel to a stage channel.',
	  [DjsErrorCodes.GuildScheduledEventResolve]: 'Could not resolve the guild scheduled event.',
	  [DjsErrorCodes.FetchOwnerId]: type => `Couldn't resolve the ${type} ownerId to fetch the ${type} member.`,

	  [DjsErrorCodes.InvalidType]: (name, expected, an = false) => `Supplied ${name} is not a${an ? 'n' : ''} ${expected}.`,
	  [DjsErrorCodes.InvalidElement]: (type, name, elem) => `Supplied ${type} ${name} includes an invalid element: ${elem}`,

	  [DjsErrorCodes.MessageThreadParent]: 'The message was not sent in a guild text or news channel',
	  [DjsErrorCodes.MessageExistingThread]: 'The message already has a thread',
	  [DjsErrorCodes.ThreadInvitableType]: type => `Invitable cannot be edited on ${type}`,

	  [DjsErrorCodes.WebhookMessage]: 'The message was not sent by a webhook.',
	  [DjsErrorCodes.WebhookTokenUnavailable]: 'This action requires a webhook token, but none is available.',
	  [DjsErrorCodes.WebhookURLInvalid]: 'The provided webhook URL is not valid.',
	  [DjsErrorCodes.WebhookApplication]: 'This message webhook belongs to an application and cannot be fetched.',
	  [DjsErrorCodes.MessageReferenceMissing]: 'The message does not reference another message',

	  [DjsErrorCodes.EmojiType]: 'Emoji must be a string or GuildEmoji/ReactionEmoji',
	  [DjsErrorCodes.EmojiManaged]: 'Emoji is managed and has no Author.',
	  [DjsErrorCodes.MissingManageGuildExpressionsPermission]: guild =>
	    `Client must have Manage Guild Expressions permission in guild ${guild} to see emoji authors.`,
	  [DjsErrorCodes.MissingManageEmojisAndStickersPermission]: guild =>
	    `Client must have Manage Emojis and Stickers permission in guild ${guild} to see emoji authors.`,

	  [DjsErrorCodes.NotGuildSticker]: 'Sticker is a standard (non-guild) sticker and has no author.',

	  [DjsErrorCodes.ReactionResolveUser]: "Couldn't resolve the user id to remove from the reaction.",

	  [DjsErrorCodes.VanityURL]: 'This guild does not have the vanity URL feature enabled.',

	  [DjsErrorCodes.InviteResolveCode]: 'Could not resolve the code to fetch the invite.',

	  [DjsErrorCodes.InviteNotFound]: 'Could not find the requested invite.',

	  [DjsErrorCodes.DeleteGroupDMChannel]: "Bots don't have access to Group DM Channels and cannot delete them",
	  [DjsErrorCodes.FetchGroupDMChannel]: "Bots don't have access to Group DM Channels and cannot fetch them",

	  [DjsErrorCodes.MemberFetchNonceLength]: 'Nonce length must not exceed 32 characters.',

	  [DjsErrorCodes.GlobalCommandPermissions]:
	    'Permissions for global commands may only be fetched or modified by providing a GuildResolvable ' +
	    "or from a guild's application command manager.",
	  [DjsErrorCodes.GuildUncachedEntityResolve]: type =>
	    `Cannot resolve ${type} from an arbitrary guild, provide an id instead`,

	  [DjsErrorCodes.InteractionAlreadyReplied]: 'The reply to this interaction has already been sent or deferred.',
	  [DjsErrorCodes.InteractionNotReplied]: 'The reply to this interaction has not been sent or deferred.',
	  [DjsErrorCodes.InteractionEphemeralReplied]: 'Ephemeral responses cannot be deleted.',

	  [DjsErrorCodes.CommandInteractionOptionNotFound]: name => `Required option "${name}" not found.`,
	  [DjsErrorCodes.CommandInteractionOptionType]: (name, type, expected) =>
	    `Option "${name}" is of type: ${type}; expected ${expected}.`,
	  [DjsErrorCodes.CommandInteractionOptionEmpty]: (name, type) =>
	    `Required option "${name}" is of type: ${type}; expected a non-empty value.`,
	  [DjsErrorCodes.CommandInteractionOptionNoSubcommand]: 'No subcommand specified for interaction.',
	  [DjsErrorCodes.CommandInteractionOptionNoSubcommandGroup]: 'No subcommand group specified for interaction.',
	  [DjsErrorCodes.CommandInteractionOptionInvalidChannelType]: (name, type, expected) =>
	    `The type of channel of the option "${name}" is: ${type}; expected ${expected}.`,
	  [DjsErrorCodes.AutocompleteInteractionOptionNoFocusedOption]: 'No focused option for autocomplete interaction.',

	  [DjsErrorCodes.ModalSubmitInteractionFieldNotFound]: customId =>
	    `Required field with custom id "${customId}" not found.`,
	  [DjsErrorCodes.ModalSubmitInteractionFieldType]: (customId, type, expected) =>
	    `Field with custom id "${customId}" is of type: ${type}; expected ${expected}.`,

	  [DjsErrorCodes.InvalidMissingScopes]: 'At least one valid scope must be provided for the invite',
	  [DjsErrorCodes.InvalidScopesWithPermissions]: 'Permissions cannot be set without the bot scope.',

	  [DjsErrorCodes.NotImplemented]: (what, name) => `Method ${what} not implemented on ${name}.`,

	  [DjsErrorCodes.SweepFilterReturn]: 'The return value of the sweepFilter function was not false or a Function',

	  [DjsErrorCodes.GuildForumMessageRequired]: 'You must provide a message to create a guild forum thread',

	  [DjsErrorCodes.EntitlementCreateInvalidOwner]:
	    'You must provide either a guild or a user to create an entitlement, but not both',

	  [DjsErrorCodes.BulkBanUsersOptionEmpty]: 'Option "users" array or collection is empty',

	  [DjsErrorCodes.PollAlreadyExpired]: 'This poll has already expired.',
	};

	Messages_1 = Messages;
	return Messages_1;
}

var DJSError;
var hasRequiredDJSError;

function requireDJSError () {
	if (hasRequiredDJSError) return DJSError;
	hasRequiredDJSError = 1;

	// Heavily inspired by node's `internal/errors` module
	const ErrorCodes = requireErrorCodes();
	const Messages = requireMessages();

	/**
	 * Extend an error of some sort into a DiscordjsError.
	 * @param {Error} Base Base error to extend
	 * @returns {DiscordjsError}
	 * @ignore
	 */
	function makeDiscordjsError(Base) {
	  return class DiscordjsError extends Base {
	    constructor(code, ...args) {
	      super(message(code, args));
	      this.code = code;
	      Error.captureStackTrace?.(this, DiscordjsError);
	    }

	    get name() {
	      return `${super.name} [${this.code}]`;
	    }
	  };
	}

	/**
	 * Format the message for an error.
	 * @param {string} code The error code
	 * @param {Array<*>} args Arguments to pass for util format or as function args
	 * @returns {string} Formatted string
	 * @ignore
	 */
	function message(code, args) {
	  if (!(code in ErrorCodes)) throw new Error('Error code must be a valid DiscordjsErrorCodes');
	  const msg = Messages[code];
	  if (!msg) throw new Error(`No message associated with error code: ${code}.`);
	  if (typeof msg === 'function') return msg(...args);
	  if (!args?.length) return msg;
	  args.unshift(msg);
	  return String(...args);
	}

	DJSError = {
	  DiscordjsError: makeDiscordjsError(Error),
	  DiscordjsTypeError: makeDiscordjsError(TypeError),
	  DiscordjsRangeError: makeDiscordjsError(RangeError),
	};
	return DJSError;
}

var hasRequiredErrors$1;

function requireErrors$1 () {
	if (hasRequiredErrors$1) return errors$1.exports;
	hasRequiredErrors$1 = 1;

	errors$1.exports = requireDJSError();
	errors$1.exports.ErrorCodes = requireErrorCodes();
	errors$1.exports.Messages = requireMessages();
	return errors$1.exports;
}

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

var lodash_snakecase;
var hasRequiredLodash_snakecase;

function requireLodash_snakecase () {
	if (hasRequiredLodash_snakecase) return lodash_snakecase;
	hasRequiredLodash_snakecase = 1;
	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';

	/** Used to match words composed of alphanumeric characters. */
	var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

	/** Used to match Latin Unicode letters (excluding mathematical operators). */
	var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

	/** Used to compose unicode character classes. */
	var rsAstralRange = '\\ud800-\\udfff',
	    rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
	    rsComboSymbolsRange = '\\u20d0-\\u20f0',
	    rsDingbatRange = '\\u2700-\\u27bf',
	    rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
	    rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
	    rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
	    rsPunctuationRange = '\\u2000-\\u206f',
	    rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
	    rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
	    rsVarRange = '\\ufe0e\\ufe0f',
	    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

	/** Used to compose unicode capture groups. */
	var rsApos = "['\u2019]",
	    rsBreak = '[' + rsBreakRange + ']',
	    rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
	    rsDigits = '\\d+',
	    rsDingbat = '[' + rsDingbatRange + ']',
	    rsLower = '[' + rsLowerRange + ']',
	    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
	    rsFitz = '\\ud83c[\\udffb-\\udfff]',
	    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	    rsNonAstral = '[^' + rsAstralRange + ']',
	    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	    rsUpper = '[' + rsUpperRange + ']',
	    rsZWJ = '\\u200d';

	/** Used to compose unicode regexes. */
	var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',
	    rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',
	    rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
	    rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
	    reOptMod = rsModifier + '?',
	    rsOptVar = '[' + rsVarRange + ']?',
	    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	    rsSeq = rsOptVar + reOptMod + rsOptJoin,
	    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;

	/** Used to match apostrophes. */
	var reApos = RegExp(rsApos, 'g');

	/**
	 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
	 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
	 */
	var reComboMark = RegExp(rsCombo, 'g');

	/** Used to match complex or compound words. */
	var reUnicodeWord = RegExp([
	  rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
	  rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',
	  rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr,
	  rsUpper + '+' + rsOptUpperContr,
	  rsDigits,
	  rsEmoji
	].join('|'), 'g');

	/** Used to detect strings that need a more robust regexp to match words. */
	var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

	/** Used to map Latin Unicode letters to basic Latin letters. */
	var deburredLetters = {
	  // Latin-1 Supplement block.
	  '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	  '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	  '\xc7': 'C',  '\xe7': 'c',
	  '\xd0': 'D',  '\xf0': 'd',
	  '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	  '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	  '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	  '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	  '\xd1': 'N',  '\xf1': 'n',
	  '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	  '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	  '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	  '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	  '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	  '\xc6': 'Ae', '\xe6': 'ae',
	  '\xde': 'Th', '\xfe': 'th',
	  '\xdf': 'ss',
	  // Latin Extended-A block.
	  '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
	  '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
	  '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
	  '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
	  '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
	  '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
	  '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
	  '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
	  '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
	  '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
	  '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
	  '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
	  '\u0134': 'J',  '\u0135': 'j',
	  '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
	  '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
	  '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
	  '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
	  '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
	  '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
	  '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
	  '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
	  '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
	  '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
	  '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
	  '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
	  '\u0163': 't',  '\u0165': 't', '\u0167': 't',
	  '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
	  '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
	  '\u0174': 'W',  '\u0175': 'w',
	  '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
	  '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
	  '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
	  '\u0132': 'IJ', '\u0133': 'ij',
	  '\u0152': 'Oe', '\u0153': 'oe',
	  '\u0149': "'n", '\u017f': 'ss'
	};

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	/**
	 * A specialized version of `_.reduce` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @param {boolean} [initAccum] Specify using the first element of `array` as
	 *  the initial value.
	 * @returns {*} Returns the accumulated value.
	 */
	function arrayReduce(array, iteratee, accumulator, initAccum) {
	  var index = -1,
	      length = array ? array.length : 0;
	  while (++index < length) {
	    accumulator = iteratee(accumulator, array[index], index, array);
	  }
	  return accumulator;
	}

	/**
	 * Splits an ASCII `string` into an array of its words.
	 *
	 * @private
	 * @param {string} The string to inspect.
	 * @returns {Array} Returns the words of `string`.
	 */
	function asciiWords(string) {
	  return string.match(reAsciiWord) || [];
	}

	/**
	 * The base implementation of `_.propertyOf` without support for deep paths.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Function} Returns the new accessor function.
	 */
	function basePropertyOf(object) {
	  return function(key) {
	    return object == null ? undefined : object[key];
	  };
	}

	/**
	 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
	 * letters to basic Latin letters.
	 *
	 * @private
	 * @param {string} letter The matched letter to deburr.
	 * @returns {string} Returns the deburred letter.
	 */
	var deburrLetter = basePropertyOf(deburredLetters);

	/**
	 * Checks if `string` contains a word composed of Unicode symbols.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {boolean} Returns `true` if a word is found, else `false`.
	 */
	function hasUnicodeWord(string) {
	  return reHasUnicodeWord.test(string);
	}

	/**
	 * Splits a Unicode `string` into an array of its words.
	 *
	 * @private
	 * @param {string} The string to inspect.
	 * @returns {Array} Returns the words of `string`.
	 */
	function unicodeWords(string) {
	  return string.match(reUnicodeWord) || [];
	}

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Built-in value references. */
	var Symbol = root.Symbol;

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolToString = symbolProto ? symbolProto.toString : undefined;

	/**
	 * The base implementation of `_.toString` which doesn't convert nullish
	 * values to empty strings.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return symbolToString ? symbolToString.call(value) : '';
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}

	/**
	 * Creates a function like `_.camelCase`.
	 *
	 * @private
	 * @param {Function} callback The function to combine each word.
	 * @returns {Function} Returns the new compounder function.
	 */
	function createCompounder(callback) {
	  return function(string) {
	    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
	  };
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && objectToString.call(value) == symbolTag);
	}

	/**
	 * Converts `value` to a string. An empty string is returned for `null`
	 * and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	function toString(value) {
	  return value == null ? '' : baseToString(value);
	}

	/**
	 * Deburrs `string` by converting
	 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
	 * letters to basic Latin letters and removing
	 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to deburr.
	 * @returns {string} Returns the deburred string.
	 * @example
	 *
	 * _.deburr('déjà vu');
	 * // => 'deja vu'
	 */
	function deburr(string) {
	  string = toString(string);
	  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
	}

	/**
	 * Converts `string` to
	 * [snake case](https://en.wikipedia.org/wiki/Snake_case).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to convert.
	 * @returns {string} Returns the snake cased string.
	 * @example
	 *
	 * _.snakeCase('Foo Bar');
	 * // => 'foo_bar'
	 *
	 * _.snakeCase('fooBar');
	 * // => 'foo_bar'
	 *
	 * _.snakeCase('--FOO-BAR--');
	 * // => 'foo_bar'
	 */
	var snakeCase = createCompounder(function(result, word, index) {
	  return result + (index ? '_' : '') + word.toLowerCase();
	});

	/**
	 * Splits `string` into an array of its words.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to inspect.
	 * @param {RegExp|string} [pattern] The pattern to match words.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {Array} Returns the words of `string`.
	 * @example
	 *
	 * _.words('fred, barney, & pebbles');
	 * // => ['fred', 'barney', 'pebbles']
	 *
	 * _.words('fred, barney, & pebbles', /[^, ]+/g);
	 * // => ['fred', 'barney', '&', 'pebbles']
	 */
	function words(string, pattern, guard) {
	  string = toString(string);
	  pattern = pattern;

	  if (pattern === undefined) {
	    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
	  }
	  return string.match(pattern) || [];
	}

	lodash_snakecase = snakeCase;
	return lodash_snakecase;
}

var Transformers;
var hasRequiredTransformers;

function requireTransformers () {
	if (hasRequiredTransformers) return Transformers;
	hasRequiredTransformers = 1;

	const { isJSONEncodable } = requireDist$7();
	const snakeCase = requireLodash_snakecase();

	/**
	 * Transforms camel-cased keys into snake cased keys
	 * @param {*} obj The object to transform
	 * @returns {*}
	 */
	function toSnakeCase(obj) {
	  if (typeof obj !== 'object' || !obj) return obj;
	  if (obj instanceof Date) return obj;
	  if (isJSONEncodable(obj)) return toSnakeCase(obj.toJSON());
	  if (Array.isArray(obj)) return obj.map(toSnakeCase);
	  return Object.fromEntries(Object.entries(obj).map(([key, value]) => [snakeCase(key), toSnakeCase(value)]));
	}

	/**
	 * Transforms an API auto moderation action object to a camel-cased variant.
	 * @param {APIAutoModerationAction} autoModerationAction The action to transform
	 * @returns {AutoModerationAction}
	 * @ignore
	 */
	function _transformAPIAutoModerationAction(autoModerationAction) {
	  return {
	    type: autoModerationAction.type,
	    metadata: {
	      durationSeconds: autoModerationAction.metadata.duration_seconds ?? null,
	      channelId: autoModerationAction.metadata.channel_id ?? null,
	      customMessage: autoModerationAction.metadata.custom_message ?? null,
	    },
	  };
	}

	/**
	 * Transforms an API message interaction metadata object to a camel-cased variant.
	 * @param {Client} client The client
	 * @param {APIMessageInteractionMetadata} messageInteractionMetadata The metadata to transform
	 * @returns {MessageInteractionMetadata}
	 * @ignore
	 */
	function _transformAPIMessageInteractionMetadata(client, messageInteractionMetadata) {
	  return {
	    id: messageInteractionMetadata.id,
	    type: messageInteractionMetadata.type,
	    user: client.users._add(messageInteractionMetadata.user),
	    authorizingIntegrationOwners: messageInteractionMetadata.authorizing_integration_owners,
	    originalResponseMessageId: messageInteractionMetadata.original_response_message_id ?? null,
	    interactedMessageId: messageInteractionMetadata.interacted_message_id ?? null,
	    triggeringInteractionMetadata: messageInteractionMetadata.triggering_interaction_metadata
	      ? _transformAPIMessageInteractionMetadata(client, messageInteractionMetadata.triggering_interaction_metadata)
	      : null,
	  };
	}

	Transformers = { toSnakeCase, _transformAPIAutoModerationAction, _transformAPIMessageInteractionMetadata };
	return Transformers;
}

var $schema = "https://json.schemastore.org/package.json";
var name = "discord.js";
var version = "14.16.3";
var description = "A powerful library for interacting with the Discord API";
var main = "./src/index.js";
var types = "./typings/index.d.ts";
var exports$1 = {
	".": {
		"import": {
			types: "./typings/index.d.mts",
			"default": "./src/index.js"
		},
		require: {
			types: "./typings/index.d.ts",
			"default": "./src/index.js"
		}
	}
};
var directories = {
	lib: "src",
	test: "test"
};
var files = [
	"src",
	"typings"
];
var contributors = [
	"Crawl <icrawltogo@gmail.com>",
	"Amish Shah <amishshah.2k@gmail.com>",
	"Vlad Frangu <me@vladfrangu.dev>",
	"SpaceEEC <spaceeec@yahoo.com>",
	"Aura Román <kyradiscord@gmail.com>"
];
var license = "Apache-2.0";
var keywords = [
	"discord",
	"api",
	"bot",
	"client",
	"node",
	"discordapp"
];
var repository = {
	type: "git",
	url: "https://github.com/discordjs/discord.js.git",
	directory: "packages/discord.js"
};
var bugs = {
	url: "https://github.com/discordjs/discord.js/issues"
};
var homepage = "https://discord.js.org";
var funding = "https://github.com/discordjs/discord.js?sponsor";
var dependencies = {
	"@discordjs/builders": "^1.9.0",
	"@discordjs/collection": "1.5.3",
	"@discordjs/ws": "1.1.1",
	"@sapphire/snowflake": "3.5.3",
	"discord-api-types": "0.37.100",
	"fast-deep-equal": "3.1.3",
	"lodash.snakecase": "4.1.1",
	tslib: "^2.6.3",
	undici: "6.19.8",
	"@discordjs/formatters": "^0.5.0",
	"@discordjs/rest": "^2.4.0",
	"@discordjs/util": "^1.1.1"
};
var devDependencies = {
	"@favware/cliff-jumper": "^4.1.0",
	"@types/node": "^16.18.105",
	"@typescript-eslint/eslint-plugin": "^8.2.0",
	"@typescript-eslint/parser": "^8.2.0",
	"cross-env": "^7.0.3",
	dtslint: "4.2.1",
	eslint: "^8.57.0",
	"eslint-formatter-pretty": "^5.0.0",
	jest: "29.7.0",
	prettier: "^3.3.3",
	tsd: "^0.31.1",
	tslint: "6.1.3",
	turbo: "^2.0.14",
	typescript: "~5.5.4",
	"@discordjs/api-extractor": "^7.38.1",
	"@discordjs/docgen": "^0.12.1",
	"@discordjs/scripts": "^0.1.0"
};
var engines = {
	node: ">=18"
};
var publishConfig = {
	provenance: true
};
var scripts = {
	test: "pnpm run docs:test && pnpm run test:typescript",
	"test:typescript": "tsc --noEmit && tsd",
	lint: "prettier --check . && tslint typings/index.d.ts && cross-env ESLINT_USE_FLAT_CONFIG=false eslint --format=pretty src typings",
	format: "prettier --write . && cross-env ESLINT_USE_FLAT_CONFIG=false eslint --fix --format=pretty src",
	fmt: "pnpm run format",
	docs: "docgen -i \"./src/*.js\" \"./src/**/*.js\" -c ./docs/index.json -r ../../ -o ./docs/docs.json && pnpm run docs:new",
	"docs:test": "docgen -i \"./src/*.js\" \"./src/**/*.js\" -c ./docs/index.json -r ../../",
	"docs:new": "api-extractor run --local --minify && generate-split-documentation",
	changelog: "git cliff --prepend ./CHANGELOG.md -u -c ./cliff.toml -r ../../ --include-path 'packages/discord.js/*'",
	release: "cliff-jumper"
};
var require$$40 = {
	$schema: $schema,
	name: name,
	version: version,
	description: description,
	main: main,
	types: types,
	exports: exports$1,
	directories: directories,
	files: files,
	contributors: contributors,
	license: license,
	keywords: keywords,
	repository: repository,
	bugs: bugs,
	homepage: homepage,
	funding: funding,
	dependencies: dependencies,
	devDependencies: devDependencies,
	engines: engines,
	publishConfig: publishConfig,
	scripts: scripts
};

var dist$3;
var hasRequiredDist$3;

function requireDist$3 () {
	if (hasRequiredDist$3) return dist$3;
	hasRequiredDist$3 = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

	// src/index.ts
	var src_exports = {};
	__export(src_exports, {
	  Collection: () => Collection,
	  version: () => version
	});
	dist$3 = __toCommonJS(src_exports);

	// src/collection.ts
	var Collection = class _Collection extends Map {
	  static {
	    __name(this, "Collection");
	  }
	  /**
	   * Obtains the value of the given key if it exists, otherwise sets and returns the value provided by the default value generator.
	   *
	   * @param key - The key to get if it exists, or set otherwise
	   * @param defaultValueGenerator - A function that generates the default value
	   * @example
	   * ```ts
	   * collection.ensure(guildId, () => defaultGuildConfig);
	   * ```
	   */
	  ensure(key, defaultValueGenerator) {
	    if (this.has(key))
	      return this.get(key);
	    if (typeof defaultValueGenerator !== "function")
	      throw new TypeError(`${defaultValueGenerator} is not a function`);
	    const defaultValue = defaultValueGenerator(key, this);
	    this.set(key, defaultValue);
	    return defaultValue;
	  }
	  /**
	   * Checks if all of the elements exist in the collection.
	   *
	   * @param keys - The keys of the elements to check for
	   * @returns `true` if all of the elements exist, `false` if at least one does not exist.
	   */
	  hasAll(...keys) {
	    return keys.every((key) => super.has(key));
	  }
	  /**
	   * Checks if any of the elements exist in the collection.
	   *
	   * @param keys - The keys of the elements to check for
	   * @returns `true` if any of the elements exist, `false` if none exist.
	   */
	  hasAny(...keys) {
	    return keys.some((key) => super.has(key));
	  }
	  first(amount) {
	    if (amount === void 0)
	      return this.values().next().value;
	    if (amount < 0)
	      return this.last(amount * -1);
	    amount = Math.min(this.size, amount);
	    const iter = this.values();
	    return Array.from({ length: amount }, () => iter.next().value);
	  }
	  firstKey(amount) {
	    if (amount === void 0)
	      return this.keys().next().value;
	    if (amount < 0)
	      return this.lastKey(amount * -1);
	    amount = Math.min(this.size, amount);
	    const iter = this.keys();
	    return Array.from({ length: amount }, () => iter.next().value);
	  }
	  last(amount) {
	    const arr = [...this.values()];
	    if (amount === void 0)
	      return arr[arr.length - 1];
	    if (amount < 0)
	      return this.first(amount * -1);
	    if (!amount)
	      return [];
	    return arr.slice(-amount);
	  }
	  lastKey(amount) {
	    const arr = [...this.keys()];
	    if (amount === void 0)
	      return arr[arr.length - 1];
	    if (amount < 0)
	      return this.firstKey(amount * -1);
	    if (!amount)
	      return [];
	    return arr.slice(-amount);
	  }
	  /**
	   * Identical to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at | Array.at()}.
	   * Returns the item at a given index, allowing for positive and negative integers.
	   * Negative integers count back from the last item in the collection.
	   *
	   * @param index - The index of the element to obtain
	   */
	  at(index) {
	    index = Math.floor(index);
	    const arr = [...this.values()];
	    return arr.at(index);
	  }
	  /**
	   * Identical to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at | Array.at()}.
	   * Returns the key at a given index, allowing for positive and negative integers.
	   * Negative integers count back from the last item in the collection.
	   *
	   * @param index - The index of the key to obtain
	   */
	  keyAt(index) {
	    index = Math.floor(index);
	    const arr = [...this.keys()];
	    return arr.at(index);
	  }
	  random(amount) {
	    const arr = [...this.values()];
	    if (amount === void 0)
	      return arr[Math.floor(Math.random() * arr.length)];
	    if (!arr.length || !amount)
	      return [];
	    return Array.from(
	      { length: Math.min(amount, arr.length) },
	      () => arr.splice(Math.floor(Math.random() * arr.length), 1)[0]
	    );
	  }
	  randomKey(amount) {
	    const arr = [...this.keys()];
	    if (amount === void 0)
	      return arr[Math.floor(Math.random() * arr.length)];
	    if (!arr.length || !amount)
	      return [];
	    return Array.from(
	      { length: Math.min(amount, arr.length) },
	      () => arr.splice(Math.floor(Math.random() * arr.length), 1)[0]
	    );
	  }
	  /**
	   * Identical to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse | Array.reverse()}
	   * but returns a Collection instead of an Array.
	   */
	  reverse() {
	    const entries = [...this.entries()].reverse();
	    this.clear();
	    for (const [key, value] of entries)
	      this.set(key, value);
	    return this;
	  }
	  find(fn, thisArg) {
	    if (typeof fn !== "function")
	      throw new TypeError(`${fn} is not a function`);
	    if (thisArg !== void 0)
	      fn = fn.bind(thisArg);
	    for (const [key, val] of this) {
	      if (fn(val, key, this))
	        return val;
	    }
	    return void 0;
	  }
	  findKey(fn, thisArg) {
	    if (typeof fn !== "function")
	      throw new TypeError(`${fn} is not a function`);
	    if (thisArg !== void 0)
	      fn = fn.bind(thisArg);
	    for (const [key, val] of this) {
	      if (fn(val, key, this))
	        return key;
	    }
	    return void 0;
	  }
	  sweep(fn, thisArg) {
	    if (typeof fn !== "function")
	      throw new TypeError(`${fn} is not a function`);
	    if (thisArg !== void 0)
	      fn = fn.bind(thisArg);
	    const previousSize = this.size;
	    for (const [key, val] of this) {
	      if (fn(val, key, this))
	        this.delete(key);
	    }
	    return previousSize - this.size;
	  }
	  filter(fn, thisArg) {
	    if (typeof fn !== "function")
	      throw new TypeError(`${fn} is not a function`);
	    if (thisArg !== void 0)
	      fn = fn.bind(thisArg);
	    const results = new this.constructor[Symbol.species]();
	    for (const [key, val] of this) {
	      if (fn(val, key, this))
	        results.set(key, val);
	    }
	    return results;
	  }
	  partition(fn, thisArg) {
	    if (typeof fn !== "function")
	      throw new TypeError(`${fn} is not a function`);
	    if (thisArg !== void 0)
	      fn = fn.bind(thisArg);
	    const results = [
	      new this.constructor[Symbol.species](),
	      new this.constructor[Symbol.species]()
	    ];
	    for (const [key, val] of this) {
	      if (fn(val, key, this)) {
	        results[0].set(key, val);
	      } else {
	        results[1].set(key, val);
	      }
	    }
	    return results;
	  }
	  flatMap(fn, thisArg) {
	    const collections = this.map(fn, thisArg);
	    return new this.constructor[Symbol.species]().concat(...collections);
	  }
	  map(fn, thisArg) {
	    if (typeof fn !== "function")
	      throw new TypeError(`${fn} is not a function`);
	    if (thisArg !== void 0)
	      fn = fn.bind(thisArg);
	    const iter = this.entries();
	    return Array.from({ length: this.size }, () => {
	      const [key, value] = iter.next().value;
	      return fn(value, key, this);
	    });
	  }
	  mapValues(fn, thisArg) {
	    if (typeof fn !== "function")
	      throw new TypeError(`${fn} is not a function`);
	    if (thisArg !== void 0)
	      fn = fn.bind(thisArg);
	    const coll = new this.constructor[Symbol.species]();
	    for (const [key, val] of this)
	      coll.set(key, fn(val, key, this));
	    return coll;
	  }
	  some(fn, thisArg) {
	    if (typeof fn !== "function")
	      throw new TypeError(`${fn} is not a function`);
	    if (thisArg !== void 0)
	      fn = fn.bind(thisArg);
	    for (const [key, val] of this) {
	      if (fn(val, key, this))
	        return true;
	    }
	    return false;
	  }
	  every(fn, thisArg) {
	    if (typeof fn !== "function")
	      throw new TypeError(`${fn} is not a function`);
	    if (thisArg !== void 0)
	      fn = fn.bind(thisArg);
	    for (const [key, val] of this) {
	      if (!fn(val, key, this))
	        return false;
	    }
	    return true;
	  }
	  /**
	   * Applies a function to produce a single value. Identical in behavior to
	   * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce | Array.reduce()}.
	   *
	   * @param fn - Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,
	   * and `collection`
	   * @param initialValue - Starting value for the accumulator
	   * @example
	   * ```ts
	   * collection.reduce((acc, guild) => acc + guild.memberCount, 0);
	   * ```
	   */
	  reduce(fn, initialValue) {
	    if (typeof fn !== "function")
	      throw new TypeError(`${fn} is not a function`);
	    let accumulator;
	    const iterator = this.entries();
	    if (initialValue === void 0) {
	      if (this.size === 0)
	        throw new TypeError("Reduce of empty collection with no initial value");
	      accumulator = iterator.next().value[1];
	    } else {
	      accumulator = initialValue;
	    }
	    for (const [key, value] of iterator) {
	      accumulator = fn(accumulator, value, key, this);
	    }
	    return accumulator;
	  }
	  each(fn, thisArg) {
	    if (typeof fn !== "function")
	      throw new TypeError(`${fn} is not a function`);
	    if (thisArg !== void 0)
	      fn = fn.bind(thisArg);
	    for (const [key, value] of this) {
	      fn(value, key, this);
	    }
	    return this;
	  }
	  tap(fn, thisArg) {
	    if (typeof fn !== "function")
	      throw new TypeError(`${fn} is not a function`);
	    if (thisArg !== void 0)
	      fn = fn.bind(thisArg);
	    fn(this);
	    return this;
	  }
	  /**
	   * Creates an identical shallow copy of this collection.
	   *
	   * @example
	   * ```ts
	   * const newColl = someColl.clone();
	   * ```
	   */
	  clone() {
	    return new this.constructor[Symbol.species](this);
	  }
	  /**
	   * Combines this collection with others into a new collection. None of the source collections are modified.
	   *
	   * @param collections - Collections to merge
	   * @example
	   * ```ts
	   * const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);
	   * ```
	   */
	  concat(...collections) {
	    const newColl = this.clone();
	    for (const coll of collections) {
	      for (const [key, val] of coll)
	        newColl.set(key, val);
	    }
	    return newColl;
	  }
	  /**
	   * Checks if this collection shares identical items with another.
	   * This is different to checking for equality using equal-signs, because
	   * the collections may be different objects, but contain the same data.
	   *
	   * @param collection - Collection to compare with
	   * @returns Whether the collections have identical contents
	   */
	  equals(collection) {
	    if (!collection)
	      return false;
	    if (this === collection)
	      return true;
	    if (this.size !== collection.size)
	      return false;
	    for (const [key, value] of this) {
	      if (!collection.has(key) || value !== collection.get(key)) {
	        return false;
	      }
	    }
	    return true;
	  }
	  /**
	   * The sort method sorts the items of a collection in place and returns it.
	   * The sort is not necessarily stable in Node 10 or older.
	   * The default sort order is according to string Unicode code points.
	   *
	   * @param compareFunction - Specifies a function that defines the sort order.
	   * If omitted, the collection is sorted according to each character's Unicode code point value, according to the string conversion of each element.
	   * @example
	   * ```ts
	   * collection.sort((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);
	   * ```
	   */
	  sort(compareFunction = _Collection.defaultSort) {
	    const entries = [...this.entries()];
	    entries.sort((a, b) => compareFunction(a[1], b[1], a[0], b[0]));
	    super.clear();
	    for (const [key, value] of entries) {
	      super.set(key, value);
	    }
	    return this;
	  }
	  /**
	   * The intersect method returns a new structure containing items where the keys and values are present in both original structures.
	   *
	   * @param other - The other Collection to filter against
	   */
	  intersect(other) {
	    const coll = new this.constructor[Symbol.species]();
	    for (const [key, value] of other) {
	      if (this.has(key) && Object.is(value, this.get(key))) {
	        coll.set(key, value);
	      }
	    }
	    return coll;
	  }
	  /**
	   * The subtract method returns a new structure containing items where the keys and values of the original structure are not present in the other.
	   *
	   * @param other - The other Collection to filter against
	   */
	  subtract(other) {
	    const coll = new this.constructor[Symbol.species]();
	    for (const [key, value] of this) {
	      if (!other.has(key) || !Object.is(value, other.get(key))) {
	        coll.set(key, value);
	      }
	    }
	    return coll;
	  }
	  /**
	   * The difference method returns a new structure containing items where the key is present in one of the original structures but not the other.
	   *
	   * @param other - The other Collection to filter against
	   */
	  difference(other) {
	    const coll = new this.constructor[Symbol.species]();
	    for (const [key, value] of other) {
	      if (!this.has(key))
	        coll.set(key, value);
	    }
	    for (const [key, value] of this) {
	      if (!other.has(key))
	        coll.set(key, value);
	    }
	    return coll;
	  }
	  /**
	   * Merges two Collections together into a new Collection.
	   *
	   * @param other - The other Collection to merge with
	   * @param whenInSelf - Function getting the result if the entry only exists in this Collection
	   * @param whenInOther - Function getting the result if the entry only exists in the other Collection
	   * @param whenInBoth - Function getting the result if the entry exists in both Collections
	   * @example
	   * ```ts
	   * // Sums up the entries in two collections.
	   * coll.merge(
	   *  other,
	   *  x => ({ keep: true, value: x }),
	   *  y => ({ keep: true, value: y }),
	   *  (x, y) => ({ keep: true, value: x + y }),
	   * );
	   * ```
	   * @example
	   * ```ts
	   * // Intersects two collections in a left-biased manner.
	   * coll.merge(
	   *  other,
	   *  x => ({ keep: false }),
	   *  y => ({ keep: false }),
	   *  (x, _) => ({ keep: true, value: x }),
	   * );
	   * ```
	   */
	  merge(other, whenInSelf, whenInOther, whenInBoth) {
	    const coll = new this.constructor[Symbol.species]();
	    const keys = /* @__PURE__ */ new Set([...this.keys(), ...other.keys()]);
	    for (const key of keys) {
	      const hasInSelf = this.has(key);
	      const hasInOther = other.has(key);
	      if (hasInSelf && hasInOther) {
	        const result = whenInBoth(this.get(key), other.get(key), key);
	        if (result.keep)
	          coll.set(key, result.value);
	      } else if (hasInSelf) {
	        const result = whenInSelf(this.get(key), key);
	        if (result.keep)
	          coll.set(key, result.value);
	      } else if (hasInOther) {
	        const result = whenInOther(other.get(key), key);
	        if (result.keep)
	          coll.set(key, result.value);
	      }
	    }
	    return coll;
	  }
	  /**
	   * The sorted method sorts the items of a collection and returns it.
	   * The sort is not necessarily stable in Node 10 or older.
	   * The default sort order is according to string Unicode code points.
	   *
	   * @param compareFunction - Specifies a function that defines the sort order.
	   * If omitted, the collection is sorted according to each character's Unicode code point value,
	   * according to the string conversion of each element.
	   * @example
	   * ```ts
	   * collection.sorted((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);
	   * ```
	   */
	  sorted(compareFunction = _Collection.defaultSort) {
	    return new this.constructor[Symbol.species](this).sort((av, bv, ak, bk) => compareFunction(av, bv, ak, bk));
	  }
	  toJSON() {
	    return [...this.values()];
	  }
	  static defaultSort(firstValue, secondValue) {
	    return Number(firstValue > secondValue) || Number(firstValue === secondValue) - 1;
	  }
	  /**
	   * Creates a Collection from a list of entries.
	   *
	   * @param entries - The list of entries
	   * @param combine - Function to combine an existing entry with a new one
	   * @example
	   * ```ts
	   * Collection.combineEntries([["a", 1], ["b", 2], ["a", 2]], (x, y) => x + y);
	   * // returns Collection { "a" => 3, "b" => 2 }
	   * ```
	   */
	  static combineEntries(entries, combine) {
	    const coll = new _Collection();
	    for (const [key, value] of entries) {
	      if (coll.has(key)) {
	        coll.set(key, combine(coll.get(key), value, key));
	      } else {
	        coll.set(key, value);
	      }
	    }
	    return coll;
	  }
	};

	// src/index.ts
	var version = "1.5.3";
	
	return dist$3;
}

var LimitedCollection_1;
var hasRequiredLimitedCollection;

function requireLimitedCollection () {
	if (hasRequiredLimitedCollection) return LimitedCollection_1;
	hasRequiredLimitedCollection = 1;

	const { Collection } = requireDist$3();
	const { DiscordjsTypeError, ErrorCodes } = requireErrors$1();

	/**
	 * Options for defining the behavior of a LimitedCollection
	 * @typedef {Object} LimitedCollectionOptions
	 * @property {?number} [maxSize=Infinity] The maximum size of the Collection
	 * @property {?Function} [keepOverLimit=null] A function, which is passed the value and key of an entry, ran to decide
	 * to keep an entry past the maximum size
	 */

	/**
	 * A Collection which holds a max amount of entries.
	 * @extends {Collection}
	 * @param {LimitedCollectionOptions} [options={}] Options for constructing the Collection.
	 * @param {Iterable} [iterable=null] Optional entries passed to the Map constructor.
	 */
	class LimitedCollection extends Collection {
	  constructor(options = {}, iterable) {
	    if (typeof options !== 'object' || options === null) {
	      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'options', 'object', true);
	    }
	    const { maxSize = Infinity, keepOverLimit = null } = options;

	    if (typeof maxSize !== 'number') {
	      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'maxSize', 'number');
	    }
	    if (keepOverLimit !== null && typeof keepOverLimit !== 'function') {
	      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'keepOverLimit', 'function');
	    }

	    super(iterable);

	    /**
	     * The max size of the Collection.
	     * @type {number}
	     */
	    this.maxSize = maxSize;

	    /**
	     * A function called to check if an entry should be kept when the Collection is at max size.
	     * @type {?Function}
	     */
	    this.keepOverLimit = keepOverLimit;
	  }

	  set(key, value) {
	    if (this.maxSize === 0 && !this.keepOverLimit?.(value, key, this)) return this;
	    if (this.size >= this.maxSize && !this.has(key)) {
	      for (const [k, v] of this.entries()) {
	        const keep = this.keepOverLimit?.(v, k, this) ?? false;
	        if (!keep) {
	          this.delete(k);
	          break;
	        }
	      }
	    }
	    return super.set(key, value);
	  }

	  static get [Symbol.species]() {
	    return Collection;
	  }
	}

	LimitedCollection_1 = LimitedCollection;
	return LimitedCollection_1;
}

var Options_1;
var hasRequiredOptions;

function requireOptions () {
	if (hasRequiredOptions) return Options_1;
	hasRequiredOptions = 1;

	const { DefaultRestOptions, DefaultUserAgentAppendix } = requireWeb();
	const { toSnakeCase } = requireTransformers();
	const { version } = require$$40;

	// TODO(ckohen): switch order of params so full manager is first and "type" is optional
	/**
	 * @typedef {Function} CacheFactory
	 * @param {Function} managerType The base manager class the cache is being requested from.
	 * @param {Function} holds The class that the cache will hold.
	 * @param {Function} manager The fully extended manager class the cache is being requested from.
	 * @returns {Collection} A Collection used to store the cache of the manager.
	 */

	/**
	 * Options for a client.
	 * @typedef {Object} ClientOptions
	 * @property {number|number[]|string} [shards] The shard's id to run, or an array of shard ids. If not specified,
	 * the client will spawn {@link ClientOptions#shardCount} shards. If set to `auto`, it will fetch the
	 * recommended amount of shards from Discord and spawn that amount
	 * @property {number} [closeTimeout=5_000] The amount of time in milliseconds to wait for the close frame to be received
	 * from the WebSocket. Don't have this too high/low. It's best to have it between 2_000-6_000 ms.
	 * @property {number} [shardCount=1] The total amount of shards used by all processes of this bot
	 * (e.g. recommended shard count, shard count of the ShardingManager)
	 * @property {CacheFactory} [makeCache] Function to create a cache.
	 * You can use your own function, or the {@link Options} class to customize the Collection used for the cache.
	 * <warn>Overriding the cache used in `GuildManager`, `ChannelManager`, `GuildChannelManager`, `RoleManager`,
	 * and `PermissionOverwriteManager` is unsupported and **will** break functionality</warn>
	 * @property {MessageMentionOptions} [allowedMentions] The default value for {@link BaseMessageOptions#allowedMentions}
	 * @property {Partials[]} [partials] Structures allowed to be partial. This means events can be emitted even when
	 * they're missing all the data for a particular structure. See the "Partial Structures" topic on the
	 * [guide](https://discordjs.guide/popular-topics/partials.html) for some
	 * important usage information, as partials require you to put checks in place when handling data.
	 * @property {boolean} [failIfNotExists=true] The default value for {@link MessageReplyOptions#failIfNotExists}
	 * @property {PresenceData} [presence={}] Presence data to use upon login
	 * @property {IntentsResolvable} intents Intents to enable for this connection
	 * @property {number} [waitGuildTimeout=15_000] Time in milliseconds that clients with the
	 * {@link GatewayIntentBits.Guilds} gateway intent should wait for missing guilds to be received before being ready.
	 * @property {SweeperOptions} [sweepers=this.DefaultSweeperSettings] Options for cache sweeping
	 * @property {WebsocketOptions} [ws] Options for the WebSocket
	 * @property {RESTOptions} [rest] Options for the REST manager
	 * @property {Function} [jsonTransformer] A function used to transform outgoing json data
	 * @property {boolean} [enforceNonce=false] The default value for {@link MessageReplyOptions#enforceNonce}
	 */

	/**
	 * Options for {@link Sweepers} defining the behavior of cache sweeping
	 * @typedef {Object<SweeperKey, SweepOptions>} SweeperOptions
	 */

	/**
	 * Options for sweeping a single type of item from cache
	 * @typedef {Object} SweepOptions
	 * @property {number} interval The interval (in seconds) at which to perform sweeping of the item
	 * @property {number} [lifetime] How long an item should stay in cache until it is considered sweepable.
	 * <warn>This property is only valid for the `invites`, `messages`, and `threads` keys. The `filter` property
	 * is mutually exclusive to this property and takes priority</warn>
	 * @property {GlobalSweepFilter} filter The function used to determine the function passed to the sweep method
	 * <info>This property is optional when the key is `invites`, `messages`, or `threads` and `lifetime` is set</info>
	 */

	/**
	 * A function to determine what strategy to use for sharding internally.
	 * ```js
	 * (manager) => new WorkerShardingStrategy(manager, { shardsPerWorker: 2 })
	 * ```
	 * @typedef {Function} BuildStrategyFunction
	 * @param {WSWebSocketManager} manager The WebSocketManager that is going to initiate the sharding
	 * @returns {IShardingStrategy} The strategy to use for sharding
	 */

	/**
	 * A function to change the concurrency handling for shard identifies of this manager
	 * ```js
	 * async (manager) => {
	 *   const gateway = await manager.fetchGatewayInformation();
	 *   return new SimpleIdentifyThrottler(gateway.session_start_limit.max_concurrency);
	 * }
	 * ```
	 * @typedef {Function} IdentifyThrottlerFunction
	 * @param {WSWebSocketManager} manager The WebSocketManager that is going to initiate the sharding
	 * @returns {Awaitable<IIdentifyThrottler>} The identify throttler that this ws manager will use
	 */

	/**
	 * WebSocket options (these are left as snake_case to match the API)
	 * @typedef {Object} WebsocketOptions
	 * @property {number} [large_threshold=50] Number of members in a guild after which offline users will no longer be
	 * sent in the initial guild member list, must be between 50 and 250
	 * @property {number} [version=10] The Discord gateway version to use <warn>Changing this can break the library;
	 * only set this if you know what you are doing</warn>
	 * @property {BuildStrategyFunction} [buildStrategy] Builds the strategy to use for sharding
	 * @property {IdentifyThrottlerFunction} [buildIdentifyThrottler] Builds the identify throttler to use for sharding
	 */

	/**
	 * Contains various utilities for client options.
	 */
	class Options extends null {
	  /**
	   * The default user agent appendix.
	   * @type {string}
	   * @memberof Options
	   * @private
	   */
	  static userAgentAppendix = `discord.js/${version} ${DefaultUserAgentAppendix}`.trimEnd();

	  /**
	   * The default client options.
	   * @returns {ClientOptions}
	   */
	  static createDefault() {
	    return {
	      closeTimeout: 5_000,
	      waitGuildTimeout: 15_000,
	      shardCount: 1,
	      makeCache: this.cacheWithLimits(this.DefaultMakeCacheSettings),
	      partials: [],
	      failIfNotExists: true,
	      enforceNonce: false,
	      presence: {},
	      sweepers: this.DefaultSweeperSettings,
	      ws: {
	        large_threshold: 50,
	        version: 10,
	      },
	      rest: {
	        ...DefaultRestOptions,
	        userAgentAppendix: this.userAgentAppendix,
	      },
	      jsonTransformer: toSnakeCase,
	    };
	  }

	  /**
	   * Create a cache factory using predefined settings to sweep or limit.
	   * @param {Object<string, LimitedCollectionOptions|number>} [settings={}] Settings passed to the relevant constructor.
	   * If no setting is provided for a manager, it uses Collection.
	   * If a number is provided for a manager, it uses that number as the max size for a LimitedCollection.
	   * If LimitedCollectionOptions are provided for a manager, it uses those settings to form a LimitedCollection.
	   * @returns {CacheFactory}
	   * @example
	   * // Store up to 200 messages per channel and 200 members per guild, always keeping the client member.
	   * Options.cacheWithLimits({
	   *    MessageManager: 200,
	   *    GuildMemberManager: {
	   *      maxSize: 200,
	   *      keepOverLimit: (member) => member.id === client.user.id,
	   *    },
	   *  });
	   */
	  static cacheWithLimits(settings = {}) {
	    const { Collection } = requireDist$3();
	    const LimitedCollection = requireLimitedCollection();

	    return (managerType, _, manager) => {
	      const setting = settings[manager.name] ?? settings[managerType.name];
	      /* eslint-disable-next-line eqeqeq */
	      if (setting == null) {
	        return new Collection();
	      }
	      if (typeof setting === 'number') {
	        if (setting === Infinity) {
	          return new Collection();
	        }
	        return new LimitedCollection({ maxSize: setting });
	      }
	      /* eslint-disable-next-line eqeqeq */
	      const noLimit = setting.maxSize == null || setting.maxSize === Infinity;
	      if (noLimit) {
	        return new Collection();
	      }
	      return new LimitedCollection(setting);
	    };
	  }

	  /**
	   * Create a cache factory that always caches everything.
	   * @returns {CacheFactory}
	   */
	  static cacheEverything() {
	    const { Collection } = requireDist$3();
	    return () => new Collection();
	  }

	  /**
	   * The default settings passed to {@link ClientOptions.makeCache}.
	   * The caches that this changes are:
	   * * `MessageManager` - Limit to 200 messages
	   * <info>If you want to keep default behavior and add on top of it you can use this object and add on to it, e.g.
	   * `makeCache: Options.cacheWithLimits({ ...Options.DefaultMakeCacheSettings, ReactionManager: 0 })`</info>
	   * @type {Object<string, LimitedCollectionOptions|number>}
	   */
	  static get DefaultMakeCacheSettings() {
	    return {
	      MessageManager: 200,
	    };
	  }

	  /**
	   * The default settings passed to {@link ClientOptions.sweepers}.
	   * The sweepers that this changes are:
	   * * `threads` - Sweep archived threads every hour, removing those archived more than 4 hours ago
	   * <info>If you want to keep default behavior and add on top of it you can use this object and add on to it, e.g.
	   * `sweepers: { ...Options.DefaultSweeperSettings, messages: { interval: 300, lifetime: 600 } }`</info>
	   * @type {SweeperOptions}
	   */
	  static get DefaultSweeperSettings() {
	    return {
	      threads: {
	        interval: 3600,
	        lifetime: 14400,
	      },
	    };
	  }
	}

	Options_1 = Options;

	/**
	 * @external RESTOptions
	 * @see {@link https://discord.js.org/docs/packages/rest/stable/RESTOptions:Interface}
	 */

	/**
	 * @external WSWebSocketManager
	 * @see {@link https://discord.js.org/docs/packages/ws/stable/WebSocketManager:Class}
	 */

	/**
	 * @external IShardingStrategy
	 * @see {@link https://discord.js.org/docs/packages/ws/stable/IShardingStrategy:Interface}
	 */

	/**
	 * @external IIdentifyThrottler
	 * @see {@link https://discord.js.org/docs/packages/ws/stable/IIdentifyThrottler:Interface}
	 */
	return Options_1;
}

var undici = {};

var symbols$4;
var hasRequiredSymbols$5;

function requireSymbols$5 () {
	if (hasRequiredSymbols$5) return symbols$4;
	hasRequiredSymbols$5 = 1;
	symbols$4 = {
	  kClose: Symbol('close'),
	  kDestroy: Symbol('destroy'),
	  kDispatch: Symbol('dispatch'),
	  kUrl: Symbol('url'),
	  kWriting: Symbol('writing'),
	  kResuming: Symbol('resuming'),
	  kQueue: Symbol('queue'),
	  kConnect: Symbol('connect'),
	  kConnecting: Symbol('connecting'),
	  kKeepAliveDefaultTimeout: Symbol('default keep alive timeout'),
	  kKeepAliveMaxTimeout: Symbol('max keep alive timeout'),
	  kKeepAliveTimeoutThreshold: Symbol('keep alive timeout threshold'),
	  kKeepAliveTimeoutValue: Symbol('keep alive timeout'),
	  kKeepAlive: Symbol('keep alive'),
	  kHeadersTimeout: Symbol('headers timeout'),
	  kBodyTimeout: Symbol('body timeout'),
	  kServerName: Symbol('server name'),
	  kLocalAddress: Symbol('local address'),
	  kHost: Symbol('host'),
	  kNoRef: Symbol('no ref'),
	  kBodyUsed: Symbol('used'),
	  kBody: Symbol('abstracted request body'),
	  kRunning: Symbol('running'),
	  kBlocking: Symbol('blocking'),
	  kPending: Symbol('pending'),
	  kSize: Symbol('size'),
	  kBusy: Symbol('busy'),
	  kQueued: Symbol('queued'),
	  kFree: Symbol('free'),
	  kConnected: Symbol('connected'),
	  kClosed: Symbol('closed'),
	  kNeedDrain: Symbol('need drain'),
	  kReset: Symbol('reset'),
	  kDestroyed: Symbol.for('nodejs.stream.destroyed'),
	  kResume: Symbol('resume'),
	  kOnError: Symbol('on error'),
	  kMaxHeadersSize: Symbol('max headers size'),
	  kRunningIdx: Symbol('running index'),
	  kPendingIdx: Symbol('pending index'),
	  kError: Symbol('error'),
	  kClients: Symbol('clients'),
	  kClient: Symbol('client'),
	  kParser: Symbol('parser'),
	  kOnDestroyed: Symbol('destroy callbacks'),
	  kPipelining: Symbol('pipelining'),
	  kSocket: Symbol('socket'),
	  kHostHeader: Symbol('host header'),
	  kConnector: Symbol('connector'),
	  kStrictContentLength: Symbol('strict content length'),
	  kMaxRedirections: Symbol('maxRedirections'),
	  kMaxRequests: Symbol('maxRequestsPerClient'),
	  kProxy: Symbol('proxy agent options'),
	  kCounter: Symbol('socket request counter'),
	  kInterceptors: Symbol('dispatch interceptors'),
	  kMaxResponseSize: Symbol('max response size'),
	  kHTTP2Session: Symbol('http2Session'),
	  kHTTP2SessionState: Symbol('http2Session state'),
	  kRetryHandlerDefaultRetry: Symbol('retry agent default retry'),
	  kConstruct: Symbol('constructable'),
	  kListeners: Symbol('listeners'),
	  kHTTPContext: Symbol('http context'),
	  kMaxConcurrentStreams: Symbol('max concurrent streams'),
	  kNoProxyAgent: Symbol('no proxy agent'),
	  kHttpProxyAgent: Symbol('http proxy agent'),
	  kHttpsProxyAgent: Symbol('https proxy agent')
	};
	return symbols$4;
}

var errors;
var hasRequiredErrors;

function requireErrors () {
	if (hasRequiredErrors) return errors;
	hasRequiredErrors = 1;

	class UndiciError extends Error {
	  constructor (message) {
	    super(message);
	    this.name = 'UndiciError';
	    this.code = 'UND_ERR';
	  }
	}

	class ConnectTimeoutError extends UndiciError {
	  constructor (message) {
	    super(message);
	    this.name = 'ConnectTimeoutError';
	    this.message = message || 'Connect Timeout Error';
	    this.code = 'UND_ERR_CONNECT_TIMEOUT';
	  }
	}

	class HeadersTimeoutError extends UndiciError {
	  constructor (message) {
	    super(message);
	    this.name = 'HeadersTimeoutError';
	    this.message = message || 'Headers Timeout Error';
	    this.code = 'UND_ERR_HEADERS_TIMEOUT';
	  }
	}

	class HeadersOverflowError extends UndiciError {
	  constructor (message) {
	    super(message);
	    this.name = 'HeadersOverflowError';
	    this.message = message || 'Headers Overflow Error';
	    this.code = 'UND_ERR_HEADERS_OVERFLOW';
	  }
	}

	class BodyTimeoutError extends UndiciError {
	  constructor (message) {
	    super(message);
	    this.name = 'BodyTimeoutError';
	    this.message = message || 'Body Timeout Error';
	    this.code = 'UND_ERR_BODY_TIMEOUT';
	  }
	}

	class ResponseStatusCodeError extends UndiciError {
	  constructor (message, statusCode, headers, body) {
	    super(message);
	    this.name = 'ResponseStatusCodeError';
	    this.message = message || 'Response Status Code Error';
	    this.code = 'UND_ERR_RESPONSE_STATUS_CODE';
	    this.body = body;
	    this.status = statusCode;
	    this.statusCode = statusCode;
	    this.headers = headers;
	  }
	}

	class InvalidArgumentError extends UndiciError {
	  constructor (message) {
	    super(message);
	    this.name = 'InvalidArgumentError';
	    this.message = message || 'Invalid Argument Error';
	    this.code = 'UND_ERR_INVALID_ARG';
	  }
	}

	class InvalidReturnValueError extends UndiciError {
	  constructor (message) {
	    super(message);
	    this.name = 'InvalidReturnValueError';
	    this.message = message || 'Invalid Return Value Error';
	    this.code = 'UND_ERR_INVALID_RETURN_VALUE';
	  }
	}

	class AbortError extends UndiciError {
	  constructor (message) {
	    super(message);
	    this.name = 'AbortError';
	    this.message = message || 'The operation was aborted';
	  }
	}

	class RequestAbortedError extends AbortError {
	  constructor (message) {
	    super(message);
	    this.name = 'AbortError';
	    this.message = message || 'Request aborted';
	    this.code = 'UND_ERR_ABORTED';
	  }
	}

	class InformationalError extends UndiciError {
	  constructor (message) {
	    super(message);
	    this.name = 'InformationalError';
	    this.message = message || 'Request information';
	    this.code = 'UND_ERR_INFO';
	  }
	}

	class RequestContentLengthMismatchError extends UndiciError {
	  constructor (message) {
	    super(message);
	    this.name = 'RequestContentLengthMismatchError';
	    this.message = message || 'Request body length does not match content-length header';
	    this.code = 'UND_ERR_REQ_CONTENT_LENGTH_MISMATCH';
	  }
	}

	class ResponseContentLengthMismatchError extends UndiciError {
	  constructor (message) {
	    super(message);
	    this.name = 'ResponseContentLengthMismatchError';
	    this.message = message || 'Response body length does not match content-length header';
	    this.code = 'UND_ERR_RES_CONTENT_LENGTH_MISMATCH';
	  }
	}

	class ClientDestroyedError extends UndiciError {
	  constructor (message) {
	    super(message);
	    this.name = 'ClientDestroyedError';
	    this.message = message || 'The client is destroyed';
	    this.code = 'UND_ERR_DESTROYED';
	  }
	}

	class ClientClosedError extends UndiciError {
	  constructor (message) {
	    super(message);
	    this.name = 'ClientClosedError';
	    this.message = message || 'The client is closed';
	    this.code = 'UND_ERR_CLOSED';
	  }
	}

	class SocketError extends UndiciError {
	  constructor (message, socket) {
	    super(message);
	    this.name = 'SocketError';
	    this.message = message || 'Socket error';
	    this.code = 'UND_ERR_SOCKET';
	    this.socket = socket;
	  }
	}

	class NotSupportedError extends UndiciError {
	  constructor (message) {
	    super(message);
	    this.name = 'NotSupportedError';
	    this.message = message || 'Not supported error';
	    this.code = 'UND_ERR_NOT_SUPPORTED';
	  }
	}

	class BalancedPoolMissingUpstreamError extends UndiciError {
	  constructor (message) {
	    super(message);
	    this.name = 'MissingUpstreamError';
	    this.message = message || 'No upstream has been added to the BalancedPool';
	    this.code = 'UND_ERR_BPL_MISSING_UPSTREAM';
	  }
	}

	class HTTPParserError extends Error {
	  constructor (message, code, data) {
	    super(message);
	    this.name = 'HTTPParserError';
	    this.code = code ? `HPE_${code}` : undefined;
	    this.data = data ? data.toString() : undefined;
	  }
	}

	class ResponseExceededMaxSizeError extends UndiciError {
	  constructor (message) {
	    super(message);
	    this.name = 'ResponseExceededMaxSizeError';
	    this.message = message || 'Response content exceeded max size';
	    this.code = 'UND_ERR_RES_EXCEEDED_MAX_SIZE';
	  }
	}

	class RequestRetryError extends UndiciError {
	  constructor (message, code, { headers, data }) {
	    super(message);
	    this.name = 'RequestRetryError';
	    this.message = message || 'Request retry error';
	    this.code = 'UND_ERR_REQ_RETRY';
	    this.statusCode = code;
	    this.data = data;
	    this.headers = headers;
	  }
	}

	class SecureProxyConnectionError extends UndiciError {
	  constructor (cause, message, options) {
	    super(message, { cause, ...(options ?? {}) });
	    this.name = 'SecureProxyConnectionError';
	    this.message = message || 'Secure Proxy Connection failed';
	    this.code = 'UND_ERR_PRX_TLS';
	    this.cause = cause;
	  }
	}

	errors = {
	  AbortError,
	  HTTPParserError,
	  UndiciError,
	  HeadersTimeoutError,
	  HeadersOverflowError,
	  BodyTimeoutError,
	  RequestContentLengthMismatchError,
	  ConnectTimeoutError,
	  ResponseStatusCodeError,
	  InvalidArgumentError,
	  InvalidReturnValueError,
	  RequestAbortedError,
	  ClientDestroyedError,
	  ClientClosedError,
	  InformationalError,
	  SocketError,
	  NotSupportedError,
	  ResponseContentLengthMismatchError,
	  BalancedPoolMissingUpstreamError,
	  ResponseExceededMaxSizeError,
	  RequestRetryError,
	  SecureProxyConnectionError
	};
	return errors;
}

var constants$5;
var hasRequiredConstants$6;

function requireConstants$6 () {
	if (hasRequiredConstants$6) return constants$5;
	hasRequiredConstants$6 = 1;

	/** @type {Record<string, string | undefined>} */
	const headerNameLowerCasedRecord = {};

	// https://developer.mozilla.org/docs/Web/HTTP/Headers
	const wellknownHeaderNames = [
	  'Accept',
	  'Accept-Encoding',
	  'Accept-Language',
	  'Accept-Ranges',
	  'Access-Control-Allow-Credentials',
	  'Access-Control-Allow-Headers',
	  'Access-Control-Allow-Methods',
	  'Access-Control-Allow-Origin',
	  'Access-Control-Expose-Headers',
	  'Access-Control-Max-Age',
	  'Access-Control-Request-Headers',
	  'Access-Control-Request-Method',
	  'Age',
	  'Allow',
	  'Alt-Svc',
	  'Alt-Used',
	  'Authorization',
	  'Cache-Control',
	  'Clear-Site-Data',
	  'Connection',
	  'Content-Disposition',
	  'Content-Encoding',
	  'Content-Language',
	  'Content-Length',
	  'Content-Location',
	  'Content-Range',
	  'Content-Security-Policy',
	  'Content-Security-Policy-Report-Only',
	  'Content-Type',
	  'Cookie',
	  'Cross-Origin-Embedder-Policy',
	  'Cross-Origin-Opener-Policy',
	  'Cross-Origin-Resource-Policy',
	  'Date',
	  'Device-Memory',
	  'Downlink',
	  'ECT',
	  'ETag',
	  'Expect',
	  'Expect-CT',
	  'Expires',
	  'Forwarded',
	  'From',
	  'Host',
	  'If-Match',
	  'If-Modified-Since',
	  'If-None-Match',
	  'If-Range',
	  'If-Unmodified-Since',
	  'Keep-Alive',
	  'Last-Modified',
	  'Link',
	  'Location',
	  'Max-Forwards',
	  'Origin',
	  'Permissions-Policy',
	  'Pragma',
	  'Proxy-Authenticate',
	  'Proxy-Authorization',
	  'RTT',
	  'Range',
	  'Referer',
	  'Referrer-Policy',
	  'Refresh',
	  'Retry-After',
	  'Sec-WebSocket-Accept',
	  'Sec-WebSocket-Extensions',
	  'Sec-WebSocket-Key',
	  'Sec-WebSocket-Protocol',
	  'Sec-WebSocket-Version',
	  'Server',
	  'Server-Timing',
	  'Service-Worker-Allowed',
	  'Service-Worker-Navigation-Preload',
	  'Set-Cookie',
	  'SourceMap',
	  'Strict-Transport-Security',
	  'Supports-Loading-Mode',
	  'TE',
	  'Timing-Allow-Origin',
	  'Trailer',
	  'Transfer-Encoding',
	  'Upgrade',
	  'Upgrade-Insecure-Requests',
	  'User-Agent',
	  'Vary',
	  'Via',
	  'WWW-Authenticate',
	  'X-Content-Type-Options',
	  'X-DNS-Prefetch-Control',
	  'X-Frame-Options',
	  'X-Permitted-Cross-Domain-Policies',
	  'X-Powered-By',
	  'X-Requested-With',
	  'X-XSS-Protection'
	];

	for (let i = 0; i < wellknownHeaderNames.length; ++i) {
	  const key = wellknownHeaderNames[i];
	  const lowerCasedKey = key.toLowerCase();
	  headerNameLowerCasedRecord[key] = headerNameLowerCasedRecord[lowerCasedKey] =
	    lowerCasedKey;
	}

	// Note: object prototypes should not be able to be referenced. e.g. `Object#hasOwnProperty`.
	Object.setPrototypeOf(headerNameLowerCasedRecord, null);

	constants$5 = {
	  wellknownHeaderNames,
	  headerNameLowerCasedRecord
	};
	return constants$5;
}

var tree_1;
var hasRequiredTree;

function requireTree () {
	if (hasRequiredTree) return tree_1;
	hasRequiredTree = 1;

	const {
	  wellknownHeaderNames,
	  headerNameLowerCasedRecord
	} = requireConstants$6();

	class TstNode {
	  /** @type {any} */
	  value = null
	  /** @type {null | TstNode} */
	  left = null
	  /** @type {null | TstNode} */
	  middle = null
	  /** @type {null | TstNode} */
	  right = null
	  /** @type {number} */
	  code
	  /**
	   * @param {string} key
	   * @param {any} value
	   * @param {number} index
	   */
	  constructor (key, value, index) {
	    if (index === undefined || index >= key.length) {
	      throw new TypeError('Unreachable')
	    }
	    const code = this.code = key.charCodeAt(index);
	    // check code is ascii string
	    if (code > 0x7F) {
	      throw new TypeError('key must be ascii string')
	    }
	    if (key.length !== ++index) {
	      this.middle = new TstNode(key, value, index);
	    } else {
	      this.value = value;
	    }
	  }

	  /**
	   * @param {string} key
	   * @param {any} value
	   */
	  add (key, value) {
	    const length = key.length;
	    if (length === 0) {
	      throw new TypeError('Unreachable')
	    }
	    let index = 0;
	    let node = this;
	    while (true) {
	      const code = key.charCodeAt(index);
	      // check code is ascii string
	      if (code > 0x7F) {
	        throw new TypeError('key must be ascii string')
	      }
	      if (node.code === code) {
	        if (length === ++index) {
	          node.value = value;
	          break
	        } else if (node.middle !== null) {
	          node = node.middle;
	        } else {
	          node.middle = new TstNode(key, value, index);
	          break
	        }
	      } else if (node.code < code) {
	        if (node.left !== null) {
	          node = node.left;
	        } else {
	          node.left = new TstNode(key, value, index);
	          break
	        }
	      } else if (node.right !== null) {
	        node = node.right;
	      } else {
	        node.right = new TstNode(key, value, index);
	        break
	      }
	    }
	  }

	  /**
	   * @param {Uint8Array} key
	   * @return {TstNode | null}
	   */
	  search (key) {
	    const keylength = key.length;
	    let index = 0;
	    let node = this;
	    while (node !== null && index < keylength) {
	      let code = key[index];
	      // A-Z
	      // First check if it is bigger than 0x5a.
	      // Lowercase letters have higher char codes than uppercase ones.
	      // Also we assume that headers will mostly contain lowercase characters.
	      if (code <= 0x5a && code >= 0x41) {
	        // Lowercase for uppercase.
	        code |= 32;
	      }
	      while (node !== null) {
	        if (code === node.code) {
	          if (keylength === ++index) {
	            // Returns Node since it is the last key.
	            return node
	          }
	          node = node.middle;
	          break
	        }
	        node = node.code < code ? node.left : node.right;
	      }
	    }
	    return null
	  }
	}

	class TernarySearchTree {
	  /** @type {TstNode | null} */
	  node = null

	  /**
	   * @param {string} key
	   * @param {any} value
	   * */
	  insert (key, value) {
	    if (this.node === null) {
	      this.node = new TstNode(key, value, 0);
	    } else {
	      this.node.add(key, value);
	    }
	  }

	  /**
	   * @param {Uint8Array} key
	   * @return {any}
	   */
	  lookup (key) {
	    return this.node?.search(key)?.value ?? null
	  }
	}

	const tree = new TernarySearchTree();

	for (let i = 0; i < wellknownHeaderNames.length; ++i) {
	  const key = headerNameLowerCasedRecord[wellknownHeaderNames[i]];
	  tree.insert(key, key);
	}

	tree_1 = {
	  TernarySearchTree,
	  tree
	};
	return tree_1;
}

var util$7;
var hasRequiredUtil$8;

function requireUtil$8 () {
	if (hasRequiredUtil$8) return util$7;
	hasRequiredUtil$8 = 1;

	const assert = require$$0$7;
	const { kDestroyed, kBodyUsed, kListeners, kBody } = requireSymbols$5();
	const { IncomingMessage } = require$$2$3;
	const stream = require$$0$8;
	const net = require$$4$4;
	const { Blob } = require$$0$9;
	const nodeUtil = require$$0$a;
	const { stringify } = require$$7$1;
	const { EventEmitter: EE } = require$$0$b;
	const { InvalidArgumentError } = requireErrors();
	const { headerNameLowerCasedRecord } = requireConstants$6();
	const { tree } = requireTree();

	const [nodeMajor, nodeMinor] = process.versions.node.split('.').map(v => Number(v));

	class BodyAsyncIterable {
	  constructor (body) {
	    this[kBody] = body;
	    this[kBodyUsed] = false;
	  }

	  async * [Symbol.asyncIterator] () {
	    assert(!this[kBodyUsed], 'disturbed');
	    this[kBodyUsed] = true;
	    yield * this[kBody];
	  }
	}

	function wrapRequestBody (body) {
	  if (isStream(body)) {
	    // TODO (fix): Provide some way for the user to cache the file to e.g. /tmp
	    // so that it can be dispatched again?
	    // TODO (fix): Do we need 100-expect support to provide a way to do this properly?
	    if (bodyLength(body) === 0) {
	      body
	        .on('data', function () {
	          assert(false);
	        });
	    }

	    if (typeof body.readableDidRead !== 'boolean') {
	      body[kBodyUsed] = false;
	      EE.prototype.on.call(body, 'data', function () {
	        this[kBodyUsed] = true;
	      });
	    }

	    return body
	  } else if (body && typeof body.pipeTo === 'function') {
	    // TODO (fix): We can't access ReadableStream internal state
	    // to determine whether or not it has been disturbed. This is just
	    // a workaround.
	    return new BodyAsyncIterable(body)
	  } else if (
	    body &&
	    typeof body !== 'string' &&
	    !ArrayBuffer.isView(body) &&
	    isIterable(body)
	  ) {
	    // TODO: Should we allow re-using iterable if !this.opts.idempotent
	    // or through some other flag?
	    return new BodyAsyncIterable(body)
	  } else {
	    return body
	  }
	}

	function nop () {}

	function isStream (obj) {
	  return obj && typeof obj === 'object' && typeof obj.pipe === 'function' && typeof obj.on === 'function'
	}

	// based on https://github.com/node-fetch/fetch-blob/blob/8ab587d34080de94140b54f07168451e7d0b655e/index.js#L229-L241 (MIT License)
	function isBlobLike (object) {
	  if (object === null) {
	    return false
	  } else if (object instanceof Blob) {
	    return true
	  } else if (typeof object !== 'object') {
	    return false
	  } else {
	    const sTag = object[Symbol.toStringTag];

	    return (sTag === 'Blob' || sTag === 'File') && (
	      ('stream' in object && typeof object.stream === 'function') ||
	      ('arrayBuffer' in object && typeof object.arrayBuffer === 'function')
	    )
	  }
	}

	function buildURL (url, queryParams) {
	  if (url.includes('?') || url.includes('#')) {
	    throw new Error('Query params cannot be passed when url already contains "?" or "#".')
	  }

	  const stringified = stringify(queryParams);

	  if (stringified) {
	    url += '?' + stringified;
	  }

	  return url
	}

	function isValidPort (port) {
	  const value = parseInt(port, 10);
	  return (
	    value === Number(port) &&
	    value >= 0 &&
	    value <= 65535
	  )
	}

	function isHttpOrHttpsPrefixed (value) {
	  return (
	    value != null &&
	    value[0] === 'h' &&
	    value[1] === 't' &&
	    value[2] === 't' &&
	    value[3] === 'p' &&
	    (
	      value[4] === ':' ||
	      (
	        value[4] === 's' &&
	        value[5] === ':'
	      )
	    )
	  )
	}

	function parseURL (url) {
	  if (typeof url === 'string') {
	    url = new URL(url);

	    if (!isHttpOrHttpsPrefixed(url.origin || url.protocol)) {
	      throw new InvalidArgumentError('Invalid URL protocol: the URL must start with `http:` or `https:`.')
	    }

	    return url
	  }

	  if (!url || typeof url !== 'object') {
	    throw new InvalidArgumentError('Invalid URL: The URL argument must be a non-null object.')
	  }

	  if (!(url instanceof URL)) {
	    if (url.port != null && url.port !== '' && isValidPort(url.port) === false) {
	      throw new InvalidArgumentError('Invalid URL: port must be a valid integer or a string representation of an integer.')
	    }

	    if (url.path != null && typeof url.path !== 'string') {
	      throw new InvalidArgumentError('Invalid URL path: the path must be a string or null/undefined.')
	    }

	    if (url.pathname != null && typeof url.pathname !== 'string') {
	      throw new InvalidArgumentError('Invalid URL pathname: the pathname must be a string or null/undefined.')
	    }

	    if (url.hostname != null && typeof url.hostname !== 'string') {
	      throw new InvalidArgumentError('Invalid URL hostname: the hostname must be a string or null/undefined.')
	    }

	    if (url.origin != null && typeof url.origin !== 'string') {
	      throw new InvalidArgumentError('Invalid URL origin: the origin must be a string or null/undefined.')
	    }

	    if (!isHttpOrHttpsPrefixed(url.origin || url.protocol)) {
	      throw new InvalidArgumentError('Invalid URL protocol: the URL must start with `http:` or `https:`.')
	    }

	    const port = url.port != null
	      ? url.port
	      : (url.protocol === 'https:' ? 443 : 80);
	    let origin = url.origin != null
	      ? url.origin
	      : `${url.protocol || ''}//${url.hostname || ''}:${port}`;
	    let path = url.path != null
	      ? url.path
	      : `${url.pathname || ''}${url.search || ''}`;

	    if (origin[origin.length - 1] === '/') {
	      origin = origin.slice(0, origin.length - 1);
	    }

	    if (path && path[0] !== '/') {
	      path = `/${path}`;
	    }
	    // new URL(path, origin) is unsafe when `path` contains an absolute URL
	    // From https://developer.mozilla.org/en-US/docs/Web/API/URL/URL:
	    // If first parameter is a relative URL, second param is required, and will be used as the base URL.
	    // If first parameter is an absolute URL, a given second param will be ignored.
	    return new URL(`${origin}${path}`)
	  }

	  if (!isHttpOrHttpsPrefixed(url.origin || url.protocol)) {
	    throw new InvalidArgumentError('Invalid URL protocol: the URL must start with `http:` or `https:`.')
	  }

	  return url
	}

	function parseOrigin (url) {
	  url = parseURL(url);

	  if (url.pathname !== '/' || url.search || url.hash) {
	    throw new InvalidArgumentError('invalid url')
	  }

	  return url
	}

	function getHostname (host) {
	  if (host[0] === '[') {
	    const idx = host.indexOf(']');

	    assert(idx !== -1);
	    return host.substring(1, idx)
	  }

	  const idx = host.indexOf(':');
	  if (idx === -1) return host

	  return host.substring(0, idx)
	}

	// IP addresses are not valid server names per RFC6066
	// > Currently, the only server names supported are DNS hostnames
	function getServerName (host) {
	  if (!host) {
	    return null
	  }

	  assert.strictEqual(typeof host, 'string');

	  const servername = getHostname(host);
	  if (net.isIP(servername)) {
	    return ''
	  }

	  return servername
	}

	function deepClone (obj) {
	  return JSON.parse(JSON.stringify(obj))
	}

	function isAsyncIterable (obj) {
	  return !!(obj != null && typeof obj[Symbol.asyncIterator] === 'function')
	}

	function isIterable (obj) {
	  return !!(obj != null && (typeof obj[Symbol.iterator] === 'function' || typeof obj[Symbol.asyncIterator] === 'function'))
	}

	function bodyLength (body) {
	  if (body == null) {
	    return 0
	  } else if (isStream(body)) {
	    const state = body._readableState;
	    return state && state.objectMode === false && state.ended === true && Number.isFinite(state.length)
	      ? state.length
	      : null
	  } else if (isBlobLike(body)) {
	    return body.size != null ? body.size : null
	  } else if (isBuffer(body)) {
	    return body.byteLength
	  }

	  return null
	}

	function isDestroyed (body) {
	  return body && !!(body.destroyed || body[kDestroyed] || (stream.isDestroyed?.(body)))
	}

	function destroy (stream, err) {
	  if (stream == null || !isStream(stream) || isDestroyed(stream)) {
	    return
	  }

	  if (typeof stream.destroy === 'function') {
	    if (Object.getPrototypeOf(stream).constructor === IncomingMessage) {
	      // See: https://github.com/nodejs/node/pull/38505/files
	      stream.socket = null;
	    }

	    stream.destroy(err);
	  } else if (err) {
	    queueMicrotask(() => {
	      stream.emit('error', err);
	    });
	  }

	  if (stream.destroyed !== true) {
	    stream[kDestroyed] = true;
	  }
	}

	const KEEPALIVE_TIMEOUT_EXPR = /timeout=(\d+)/;
	function parseKeepAliveTimeout (val) {
	  const m = val.toString().match(KEEPALIVE_TIMEOUT_EXPR);
	  return m ? parseInt(m[1], 10) * 1000 : null
	}

	/**
	 * Retrieves a header name and returns its lowercase value.
	 * @param {string | Buffer} value Header name
	 * @returns {string}
	 */
	function headerNameToString (value) {
	  return typeof value === 'string'
	    ? headerNameLowerCasedRecord[value] ?? value.toLowerCase()
	    : tree.lookup(value) ?? value.toString('latin1').toLowerCase()
	}

	/**
	 * Receive the buffer as a string and return its lowercase value.
	 * @param {Buffer} value Header name
	 * @returns {string}
	 */
	function bufferToLowerCasedHeaderName (value) {
	  return tree.lookup(value) ?? value.toString('latin1').toLowerCase()
	}

	/**
	 * @param {Record<string, string | string[]> | (Buffer | string | (Buffer | string)[])[]} headers
	 * @param {Record<string, string | string[]>} [obj]
	 * @returns {Record<string, string | string[]>}
	 */
	function parseHeaders (headers, obj) {
	  if (obj === undefined) obj = {};
	  for (let i = 0; i < headers.length; i += 2) {
	    const key = headerNameToString(headers[i]);
	    let val = obj[key];

	    if (val) {
	      if (typeof val === 'string') {
	        val = [val];
	        obj[key] = val;
	      }
	      val.push(headers[i + 1].toString('utf8'));
	    } else {
	      const headersValue = headers[i + 1];
	      if (typeof headersValue === 'string') {
	        obj[key] = headersValue;
	      } else {
	        obj[key] = Array.isArray(headersValue) ? headersValue.map(x => x.toString('utf8')) : headersValue.toString('utf8');
	      }
	    }
	  }

	  // See https://github.com/nodejs/node/pull/46528
	  if ('content-length' in obj && 'content-disposition' in obj) {
	    obj['content-disposition'] = Buffer.from(obj['content-disposition']).toString('latin1');
	  }

	  return obj
	}

	function parseRawHeaders (headers) {
	  const len = headers.length;
	  const ret = new Array(len);

	  let hasContentLength = false;
	  let contentDispositionIdx = -1;
	  let key;
	  let val;
	  let kLen = 0;

	  for (let n = 0; n < headers.length; n += 2) {
	    key = headers[n];
	    val = headers[n + 1];

	    typeof key !== 'string' && (key = key.toString());
	    typeof val !== 'string' && (val = val.toString('utf8'));

	    kLen = key.length;
	    if (kLen === 14 && key[7] === '-' && (key === 'content-length' || key.toLowerCase() === 'content-length')) {
	      hasContentLength = true;
	    } else if (kLen === 19 && key[7] === '-' && (key === 'content-disposition' || key.toLowerCase() === 'content-disposition')) {
	      contentDispositionIdx = n + 1;
	    }
	    ret[n] = key;
	    ret[n + 1] = val;
	  }

	  // See https://github.com/nodejs/node/pull/46528
	  if (hasContentLength && contentDispositionIdx !== -1) {
	    ret[contentDispositionIdx] = Buffer.from(ret[contentDispositionIdx]).toString('latin1');
	  }

	  return ret
	}

	function isBuffer (buffer) {
	  // See, https://github.com/mcollina/undici/pull/319
	  return buffer instanceof Uint8Array || Buffer.isBuffer(buffer)
	}

	function validateHandler (handler, method, upgrade) {
	  if (!handler || typeof handler !== 'object') {
	    throw new InvalidArgumentError('handler must be an object')
	  }

	  if (typeof handler.onConnect !== 'function') {
	    throw new InvalidArgumentError('invalid onConnect method')
	  }

	  if (typeof handler.onError !== 'function') {
	    throw new InvalidArgumentError('invalid onError method')
	  }

	  if (typeof handler.onBodySent !== 'function' && handler.onBodySent !== undefined) {
	    throw new InvalidArgumentError('invalid onBodySent method')
	  }

	  if (upgrade || method === 'CONNECT') {
	    if (typeof handler.onUpgrade !== 'function') {
	      throw new InvalidArgumentError('invalid onUpgrade method')
	    }
	  } else {
	    if (typeof handler.onHeaders !== 'function') {
	      throw new InvalidArgumentError('invalid onHeaders method')
	    }

	    if (typeof handler.onData !== 'function') {
	      throw new InvalidArgumentError('invalid onData method')
	    }

	    if (typeof handler.onComplete !== 'function') {
	      throw new InvalidArgumentError('invalid onComplete method')
	    }
	  }
	}

	// A body is disturbed if it has been read from and it cannot
	// be re-used without losing state or data.
	function isDisturbed (body) {
	  // TODO (fix): Why is body[kBodyUsed] needed?
	  return !!(body && (stream.isDisturbed(body) || body[kBodyUsed]))
	}

	function isErrored (body) {
	  return !!(body && stream.isErrored(body))
	}

	function isReadable (body) {
	  return !!(body && stream.isReadable(body))
	}

	function getSocketInfo (socket) {
	  return {
	    localAddress: socket.localAddress,
	    localPort: socket.localPort,
	    remoteAddress: socket.remoteAddress,
	    remotePort: socket.remotePort,
	    remoteFamily: socket.remoteFamily,
	    timeout: socket.timeout,
	    bytesWritten: socket.bytesWritten,
	    bytesRead: socket.bytesRead
	  }
	}

	/** @type {globalThis['ReadableStream']} */
	function ReadableStreamFrom (iterable) {
	  // We cannot use ReadableStream.from here because it does not return a byte stream.

	  let iterator;
	  return new ReadableStream(
	    {
	      async start () {
	        iterator = iterable[Symbol.asyncIterator]();
	      },
	      async pull (controller) {
	        const { done, value } = await iterator.next();
	        if (done) {
	          queueMicrotask(() => {
	            controller.close();
	            controller.byobRequest?.respond(0);
	          });
	        } else {
	          const buf = Buffer.isBuffer(value) ? value : Buffer.from(value);
	          if (buf.byteLength) {
	            controller.enqueue(new Uint8Array(buf));
	          }
	        }
	        return controller.desiredSize > 0
	      },
	      async cancel (reason) {
	        await iterator.return();
	      },
	      type: 'bytes'
	    }
	  )
	}

	// The chunk should be a FormData instance and contains
	// all the required methods.
	function isFormDataLike (object) {
	  return (
	    object &&
	    typeof object === 'object' &&
	    typeof object.append === 'function' &&
	    typeof object.delete === 'function' &&
	    typeof object.get === 'function' &&
	    typeof object.getAll === 'function' &&
	    typeof object.has === 'function' &&
	    typeof object.set === 'function' &&
	    object[Symbol.toStringTag] === 'FormData'
	  )
	}

	function addAbortListener (signal, listener) {
	  if ('addEventListener' in signal) {
	    signal.addEventListener('abort', listener, { once: true });
	    return () => signal.removeEventListener('abort', listener)
	  }
	  signal.addListener('abort', listener);
	  return () => signal.removeListener('abort', listener)
	}

	const hasToWellFormed = typeof String.prototype.toWellFormed === 'function';
	const hasIsWellFormed = typeof String.prototype.isWellFormed === 'function';

	/**
	 * @param {string} val
	 */
	function toUSVString (val) {
	  return hasToWellFormed ? `${val}`.toWellFormed() : nodeUtil.toUSVString(val)
	}

	/**
	 * @param {string} val
	 */
	// TODO: move this to webidl
	function isUSVString (val) {
	  return hasIsWellFormed ? `${val}`.isWellFormed() : toUSVString(val) === `${val}`
	}

	/**
	 * @see https://tools.ietf.org/html/rfc7230#section-3.2.6
	 * @param {number} c
	 */
	function isTokenCharCode (c) {
	  switch (c) {
	    case 0x22:
	    case 0x28:
	    case 0x29:
	    case 0x2c:
	    case 0x2f:
	    case 0x3a:
	    case 0x3b:
	    case 0x3c:
	    case 0x3d:
	    case 0x3e:
	    case 0x3f:
	    case 0x40:
	    case 0x5b:
	    case 0x5c:
	    case 0x5d:
	    case 0x7b:
	    case 0x7d:
	      // DQUOTE and "(),/:;<=>?@[\]{}"
	      return false
	    default:
	      // VCHAR %x21-7E
	      return c >= 0x21 && c <= 0x7e
	  }
	}

	/**
	 * @param {string} characters
	 */
	function isValidHTTPToken (characters) {
	  if (characters.length === 0) {
	    return false
	  }
	  for (let i = 0; i < characters.length; ++i) {
	    if (!isTokenCharCode(characters.charCodeAt(i))) {
	      return false
	    }
	  }
	  return true
	}

	// headerCharRegex have been lifted from
	// https://github.com/nodejs/node/blob/main/lib/_http_common.js

	/**
	 * Matches if val contains an invalid field-vchar
	 *  field-value    = *( field-content / obs-fold )
	 *  field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]
	 *  field-vchar    = VCHAR / obs-text
	 */
	const headerCharRegex = /[^\t\x20-\x7e\x80-\xff]/;

	/**
	 * @param {string} characters
	 */
	function isValidHeaderValue (characters) {
	  return !headerCharRegex.test(characters)
	}

	// Parsed accordingly to RFC 9110
	// https://www.rfc-editor.org/rfc/rfc9110#field.content-range
	function parseRangeHeader (range) {
	  if (range == null || range === '') return { start: 0, end: null, size: null }

	  const m = range ? range.match(/^bytes (\d+)-(\d+)\/(\d+)?$/) : null;
	  return m
	    ? {
	        start: parseInt(m[1]),
	        end: m[2] ? parseInt(m[2]) : null,
	        size: m[3] ? parseInt(m[3]) : null
	      }
	    : null
	}

	function addListener (obj, name, listener) {
	  const listeners = (obj[kListeners] ??= []);
	  listeners.push([name, listener]);
	  obj.on(name, listener);
	  return obj
	}

	function removeAllListeners (obj) {
	  for (const [name, listener] of obj[kListeners] ?? []) {
	    obj.removeListener(name, listener);
	  }
	  obj[kListeners] = null;
	}

	function errorRequest (client, request, err) {
	  try {
	    request.onError(err);
	    assert(request.aborted);
	  } catch (err) {
	    client.emit('error', err);
	  }
	}

	const kEnumerableProperty = Object.create(null);
	kEnumerableProperty.enumerable = true;

	const normalizedMethodRecordsBase = {
	  delete: 'DELETE',
	  DELETE: 'DELETE',
	  get: 'GET',
	  GET: 'GET',
	  head: 'HEAD',
	  HEAD: 'HEAD',
	  options: 'OPTIONS',
	  OPTIONS: 'OPTIONS',
	  post: 'POST',
	  POST: 'POST',
	  put: 'PUT',
	  PUT: 'PUT'
	};

	const normalizedMethodRecords = {
	  ...normalizedMethodRecordsBase,
	  patch: 'patch',
	  PATCH: 'PATCH'
	};

	// Note: object prototypes should not be able to be referenced. e.g. `Object#hasOwnProperty`.
	Object.setPrototypeOf(normalizedMethodRecordsBase, null);
	Object.setPrototypeOf(normalizedMethodRecords, null);

	util$7 = {
	  kEnumerableProperty,
	  nop,
	  isDisturbed,
	  isErrored,
	  isReadable,
	  toUSVString,
	  isUSVString,
	  isBlobLike,
	  parseOrigin,
	  parseURL,
	  getServerName,
	  isStream,
	  isIterable,
	  isAsyncIterable,
	  isDestroyed,
	  headerNameToString,
	  bufferToLowerCasedHeaderName,
	  addListener,
	  removeAllListeners,
	  errorRequest,
	  parseRawHeaders,
	  parseHeaders,
	  parseKeepAliveTimeout,
	  destroy,
	  bodyLength,
	  deepClone,
	  ReadableStreamFrom,
	  isBuffer,
	  validateHandler,
	  getSocketInfo,
	  isFormDataLike,
	  buildURL,
	  addAbortListener,
	  isValidHTTPToken,
	  isValidHeaderValue,
	  isTokenCharCode,
	  parseRangeHeader,
	  normalizedMethodRecordsBase,
	  normalizedMethodRecords,
	  isValidPort,
	  isHttpOrHttpsPrefixed,
	  nodeMajor,
	  nodeMinor,
	  safeHTTPMethods: ['GET', 'HEAD', 'OPTIONS', 'TRACE'],
	  wrapRequestBody
	};
	return util$7;
}

var diagnostics;
var hasRequiredDiagnostics;

function requireDiagnostics () {
	if (hasRequiredDiagnostics) return diagnostics;
	hasRequiredDiagnostics = 1;
	const diagnosticsChannel = require$$0$c;
	const util = require$$0$a;

	const undiciDebugLog = util.debuglog('undici');
	const fetchDebuglog = util.debuglog('fetch');
	const websocketDebuglog = util.debuglog('websocket');
	let isClientSet = false;
	const channels = {
	  // Client
	  beforeConnect: diagnosticsChannel.channel('undici:client:beforeConnect'),
	  connected: diagnosticsChannel.channel('undici:client:connected'),
	  connectError: diagnosticsChannel.channel('undici:client:connectError'),
	  sendHeaders: diagnosticsChannel.channel('undici:client:sendHeaders'),
	  // Request
	  create: diagnosticsChannel.channel('undici:request:create'),
	  bodySent: diagnosticsChannel.channel('undici:request:bodySent'),
	  headers: diagnosticsChannel.channel('undici:request:headers'),
	  trailers: diagnosticsChannel.channel('undici:request:trailers'),
	  error: diagnosticsChannel.channel('undici:request:error'),
	  // WebSocket
	  open: diagnosticsChannel.channel('undici:websocket:open'),
	  close: diagnosticsChannel.channel('undici:websocket:close'),
	  socketError: diagnosticsChannel.channel('undici:websocket:socket_error'),
	  ping: diagnosticsChannel.channel('undici:websocket:ping'),
	  pong: diagnosticsChannel.channel('undici:websocket:pong')
	};

	if (undiciDebugLog.enabled || fetchDebuglog.enabled) {
	  const debuglog = fetchDebuglog.enabled ? fetchDebuglog : undiciDebugLog;

	  // Track all Client events
	  diagnosticsChannel.channel('undici:client:beforeConnect').subscribe(evt => {
	    const {
	      connectParams: { version, protocol, port, host }
	    } = evt;
	    debuglog(
	      'connecting to %s using %s%s',
	      `${host}${port ? `:${port}` : ''}`,
	      protocol,
	      version
	    );
	  });

	  diagnosticsChannel.channel('undici:client:connected').subscribe(evt => {
	    const {
	      connectParams: { version, protocol, port, host }
	    } = evt;
	    debuglog(
	      'connected to %s using %s%s',
	      `${host}${port ? `:${port}` : ''}`,
	      protocol,
	      version
	    );
	  });

	  diagnosticsChannel.channel('undici:client:connectError').subscribe(evt => {
	    const {
	      connectParams: { version, protocol, port, host },
	      error
	    } = evt;
	    debuglog(
	      'connection to %s using %s%s errored - %s',
	      `${host}${port ? `:${port}` : ''}`,
	      protocol,
	      version,
	      error.message
	    );
	  });

	  diagnosticsChannel.channel('undici:client:sendHeaders').subscribe(evt => {
	    const {
	      request: { method, path, origin }
	    } = evt;
	    debuglog('sending request to %s %s/%s', method, origin, path);
	  });

	  // Track Request events
	  diagnosticsChannel.channel('undici:request:headers').subscribe(evt => {
	    const {
	      request: { method, path, origin },
	      response: { statusCode }
	    } = evt;
	    debuglog(
	      'received response to %s %s/%s - HTTP %d',
	      method,
	      origin,
	      path,
	      statusCode
	    );
	  });

	  diagnosticsChannel.channel('undici:request:trailers').subscribe(evt => {
	    const {
	      request: { method, path, origin }
	    } = evt;
	    debuglog('trailers received from %s %s/%s', method, origin, path);
	  });

	  diagnosticsChannel.channel('undici:request:error').subscribe(evt => {
	    const {
	      request: { method, path, origin },
	      error
	    } = evt;
	    debuglog(
	      'request to %s %s/%s errored - %s',
	      method,
	      origin,
	      path,
	      error.message
	    );
	  });

	  isClientSet = true;
	}

	if (websocketDebuglog.enabled) {
	  if (!isClientSet) {
	    const debuglog = undiciDebugLog.enabled ? undiciDebugLog : websocketDebuglog;
	    diagnosticsChannel.channel('undici:client:beforeConnect').subscribe(evt => {
	      const {
	        connectParams: { version, protocol, port, host }
	      } = evt;
	      debuglog(
	        'connecting to %s%s using %s%s',
	        host,
	        port ? `:${port}` : '',
	        protocol,
	        version
	      );
	    });

	    diagnosticsChannel.channel('undici:client:connected').subscribe(evt => {
	      const {
	        connectParams: { version, protocol, port, host }
	      } = evt;
	      debuglog(
	        'connected to %s%s using %s%s',
	        host,
	        port ? `:${port}` : '',
	        protocol,
	        version
	      );
	    });

	    diagnosticsChannel.channel('undici:client:connectError').subscribe(evt => {
	      const {
	        connectParams: { version, protocol, port, host },
	        error
	      } = evt;
	      debuglog(
	        'connection to %s%s using %s%s errored - %s',
	        host,
	        port ? `:${port}` : '',
	        protocol,
	        version,
	        error.message
	      );
	    });

	    diagnosticsChannel.channel('undici:client:sendHeaders').subscribe(evt => {
	      const {
	        request: { method, path, origin }
	      } = evt;
	      debuglog('sending request to %s %s/%s', method, origin, path);
	    });
	  }

	  // Track all WebSocket events
	  diagnosticsChannel.channel('undici:websocket:open').subscribe(evt => {
	    const {
	      address: { address, port }
	    } = evt;
	    websocketDebuglog('connection opened %s%s', address, port ? `:${port}` : '');
	  });

	  diagnosticsChannel.channel('undici:websocket:close').subscribe(evt => {
	    const { websocket, code, reason } = evt;
	    websocketDebuglog(
	      'closed connection to %s - %s %s',
	      websocket.url,
	      code,
	      reason
	    );
	  });

	  diagnosticsChannel.channel('undici:websocket:socket_error').subscribe(err => {
	    websocketDebuglog('connection errored - %s', err.message);
	  });

	  diagnosticsChannel.channel('undici:websocket:ping').subscribe(evt => {
	    websocketDebuglog('ping received');
	  });

	  diagnosticsChannel.channel('undici:websocket:pong').subscribe(evt => {
	    websocketDebuglog('pong received');
	  });
	}

	diagnostics = {
	  channels
	};
	return diagnostics;
}

var request$1;
var hasRequiredRequest$1;

function requireRequest$1 () {
	if (hasRequiredRequest$1) return request$1;
	hasRequiredRequest$1 = 1;

	const {
	  InvalidArgumentError,
	  NotSupportedError
	} = requireErrors();
	const assert = require$$0$7;
	const {
	  isValidHTTPToken,
	  isValidHeaderValue,
	  isStream,
	  destroy,
	  isBuffer,
	  isFormDataLike,
	  isIterable,
	  isBlobLike,
	  buildURL,
	  validateHandler,
	  getServerName,
	  normalizedMethodRecords
	} = requireUtil$8();
	const { channels } = requireDiagnostics();
	const { headerNameLowerCasedRecord } = requireConstants$6();

	// Verifies that a given path is valid does not contain control chars \x00 to \x20
	const invalidPathRegex = /[^\u0021-\u00ff]/;

	const kHandler = Symbol('handler');

	class Request {
	  constructor (origin, {
	    path,
	    method,
	    body,
	    headers,
	    query,
	    idempotent,
	    blocking,
	    upgrade,
	    headersTimeout,
	    bodyTimeout,
	    reset,
	    throwOnError,
	    expectContinue,
	    servername
	  }, handler) {
	    if (typeof path !== 'string') {
	      throw new InvalidArgumentError('path must be a string')
	    } else if (
	      path[0] !== '/' &&
	      !(path.startsWith('http://') || path.startsWith('https://')) &&
	      method !== 'CONNECT'
	    ) {
	      throw new InvalidArgumentError('path must be an absolute URL or start with a slash')
	    } else if (invalidPathRegex.test(path)) {
	      throw new InvalidArgumentError('invalid request path')
	    }

	    if (typeof method !== 'string') {
	      throw new InvalidArgumentError('method must be a string')
	    } else if (normalizedMethodRecords[method] === undefined && !isValidHTTPToken(method)) {
	      throw new InvalidArgumentError('invalid request method')
	    }

	    if (upgrade && typeof upgrade !== 'string') {
	      throw new InvalidArgumentError('upgrade must be a string')
	    }

	    if (headersTimeout != null && (!Number.isFinite(headersTimeout) || headersTimeout < 0)) {
	      throw new InvalidArgumentError('invalid headersTimeout')
	    }

	    if (bodyTimeout != null && (!Number.isFinite(bodyTimeout) || bodyTimeout < 0)) {
	      throw new InvalidArgumentError('invalid bodyTimeout')
	    }

	    if (reset != null && typeof reset !== 'boolean') {
	      throw new InvalidArgumentError('invalid reset')
	    }

	    if (expectContinue != null && typeof expectContinue !== 'boolean') {
	      throw new InvalidArgumentError('invalid expectContinue')
	    }

	    this.headersTimeout = headersTimeout;

	    this.bodyTimeout = bodyTimeout;

	    this.throwOnError = throwOnError === true;

	    this.method = method;

	    this.abort = null;

	    if (body == null) {
	      this.body = null;
	    } else if (isStream(body)) {
	      this.body = body;

	      const rState = this.body._readableState;
	      if (!rState || !rState.autoDestroy) {
	        this.endHandler = function autoDestroy () {
	          destroy(this);
	        };
	        this.body.on('end', this.endHandler);
	      }

	      this.errorHandler = err => {
	        if (this.abort) {
	          this.abort(err);
	        } else {
	          this.error = err;
	        }
	      };
	      this.body.on('error', this.errorHandler);
	    } else if (isBuffer(body)) {
	      this.body = body.byteLength ? body : null;
	    } else if (ArrayBuffer.isView(body)) {
	      this.body = body.buffer.byteLength ? Buffer.from(body.buffer, body.byteOffset, body.byteLength) : null;
	    } else if (body instanceof ArrayBuffer) {
	      this.body = body.byteLength ? Buffer.from(body) : null;
	    } else if (typeof body === 'string') {
	      this.body = body.length ? Buffer.from(body) : null;
	    } else if (isFormDataLike(body) || isIterable(body) || isBlobLike(body)) {
	      this.body = body;
	    } else {
	      throw new InvalidArgumentError('body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable')
	    }

	    this.completed = false;

	    this.aborted = false;

	    this.upgrade = upgrade || null;

	    this.path = query ? buildURL(path, query) : path;

	    this.origin = origin;

	    this.idempotent = idempotent == null
	      ? method === 'HEAD' || method === 'GET'
	      : idempotent;

	    this.blocking = blocking == null ? false : blocking;

	    this.reset = reset == null ? null : reset;

	    this.host = null;

	    this.contentLength = null;

	    this.contentType = null;

	    this.headers = [];

	    // Only for H2
	    this.expectContinue = expectContinue != null ? expectContinue : false;

	    if (Array.isArray(headers)) {
	      if (headers.length % 2 !== 0) {
	        throw new InvalidArgumentError('headers array must be even')
	      }
	      for (let i = 0; i < headers.length; i += 2) {
	        processHeader(this, headers[i], headers[i + 1]);
	      }
	    } else if (headers && typeof headers === 'object') {
	      if (headers[Symbol.iterator]) {
	        for (const header of headers) {
	          if (!Array.isArray(header) || header.length !== 2) {
	            throw new InvalidArgumentError('headers must be in key-value pair format')
	          }
	          processHeader(this, header[0], header[1]);
	        }
	      } else {
	        const keys = Object.keys(headers);
	        for (let i = 0; i < keys.length; ++i) {
	          processHeader(this, keys[i], headers[keys[i]]);
	        }
	      }
	    } else if (headers != null) {
	      throw new InvalidArgumentError('headers must be an object or an array')
	    }

	    validateHandler(handler, method, upgrade);

	    this.servername = servername || getServerName(this.host);

	    this[kHandler] = handler;

	    if (channels.create.hasSubscribers) {
	      channels.create.publish({ request: this });
	    }
	  }

	  onBodySent (chunk) {
	    if (this[kHandler].onBodySent) {
	      try {
	        return this[kHandler].onBodySent(chunk)
	      } catch (err) {
	        this.abort(err);
	      }
	    }
	  }

	  onRequestSent () {
	    if (channels.bodySent.hasSubscribers) {
	      channels.bodySent.publish({ request: this });
	    }

	    if (this[kHandler].onRequestSent) {
	      try {
	        return this[kHandler].onRequestSent()
	      } catch (err) {
	        this.abort(err);
	      }
	    }
	  }

	  onConnect (abort) {
	    assert(!this.aborted);
	    assert(!this.completed);

	    if (this.error) {
	      abort(this.error);
	    } else {
	      this.abort = abort;
	      return this[kHandler].onConnect(abort)
	    }
	  }

	  onResponseStarted () {
	    return this[kHandler].onResponseStarted?.()
	  }

	  onHeaders (statusCode, headers, resume, statusText) {
	    assert(!this.aborted);
	    assert(!this.completed);

	    if (channels.headers.hasSubscribers) {
	      channels.headers.publish({ request: this, response: { statusCode, headers, statusText } });
	    }

	    try {
	      return this[kHandler].onHeaders(statusCode, headers, resume, statusText)
	    } catch (err) {
	      this.abort(err);
	    }
	  }

	  onData (chunk) {
	    assert(!this.aborted);
	    assert(!this.completed);

	    try {
	      return this[kHandler].onData(chunk)
	    } catch (err) {
	      this.abort(err);
	      return false
	    }
	  }

	  onUpgrade (statusCode, headers, socket) {
	    assert(!this.aborted);
	    assert(!this.completed);

	    return this[kHandler].onUpgrade(statusCode, headers, socket)
	  }

	  onComplete (trailers) {
	    this.onFinally();

	    assert(!this.aborted);

	    this.completed = true;
	    if (channels.trailers.hasSubscribers) {
	      channels.trailers.publish({ request: this, trailers });
	    }

	    try {
	      return this[kHandler].onComplete(trailers)
	    } catch (err) {
	      // TODO (fix): This might be a bad idea?
	      this.onError(err);
	    }
	  }

	  onError (error) {
	    this.onFinally();

	    if (channels.error.hasSubscribers) {
	      channels.error.publish({ request: this, error });
	    }

	    if (this.aborted) {
	      return
	    }
	    this.aborted = true;

	    return this[kHandler].onError(error)
	  }

	  onFinally () {
	    if (this.errorHandler) {
	      this.body.off('error', this.errorHandler);
	      this.errorHandler = null;
	    }

	    if (this.endHandler) {
	      this.body.off('end', this.endHandler);
	      this.endHandler = null;
	    }
	  }

	  addHeader (key, value) {
	    processHeader(this, key, value);
	    return this
	  }
	}

	function processHeader (request, key, val) {
	  if (val && (typeof val === 'object' && !Array.isArray(val))) {
	    throw new InvalidArgumentError(`invalid ${key} header`)
	  } else if (val === undefined) {
	    return
	  }

	  let headerName = headerNameLowerCasedRecord[key];

	  if (headerName === undefined) {
	    headerName = key.toLowerCase();
	    if (headerNameLowerCasedRecord[headerName] === undefined && !isValidHTTPToken(headerName)) {
	      throw new InvalidArgumentError('invalid header key')
	    }
	  }

	  if (Array.isArray(val)) {
	    const arr = [];
	    for (let i = 0; i < val.length; i++) {
	      if (typeof val[i] === 'string') {
	        if (!isValidHeaderValue(val[i])) {
	          throw new InvalidArgumentError(`invalid ${key} header`)
	        }
	        arr.push(val[i]);
	      } else if (val[i] === null) {
	        arr.push('');
	      } else if (typeof val[i] === 'object') {
	        throw new InvalidArgumentError(`invalid ${key} header`)
	      } else {
	        arr.push(`${val[i]}`);
	      }
	    }
	    val = arr;
	  } else if (typeof val === 'string') {
	    if (!isValidHeaderValue(val)) {
	      throw new InvalidArgumentError(`invalid ${key} header`)
	    }
	  } else if (val === null) {
	    val = '';
	  } else {
	    val = `${val}`;
	  }

	  if (request.host === null && headerName === 'host') {
	    if (typeof val !== 'string') {
	      throw new InvalidArgumentError('invalid host header')
	    }
	    // Consumed by Client
	    request.host = val;
	  } else if (request.contentLength === null && headerName === 'content-length') {
	    request.contentLength = parseInt(val, 10);
	    if (!Number.isFinite(request.contentLength)) {
	      throw new InvalidArgumentError('invalid content-length header')
	    }
	  } else if (request.contentType === null && headerName === 'content-type') {
	    request.contentType = val;
	    request.headers.push(key, val);
	  } else if (headerName === 'transfer-encoding' || headerName === 'keep-alive' || headerName === 'upgrade') {
	    throw new InvalidArgumentError(`invalid ${headerName} header`)
	  } else if (headerName === 'connection') {
	    const value = typeof val === 'string' ? val.toLowerCase() : null;
	    if (value !== 'close' && value !== 'keep-alive') {
	      throw new InvalidArgumentError('invalid connection header')
	    }

	    if (value === 'close') {
	      request.reset = true;
	    }
	  } else if (headerName === 'expect') {
	    throw new NotSupportedError('expect header not supported')
	  } else {
	    request.headers.push(key, val);
	  }
	}

	request$1 = Request;
	return request$1;
}

var dispatcher;
var hasRequiredDispatcher;

function requireDispatcher () {
	if (hasRequiredDispatcher) return dispatcher;
	hasRequiredDispatcher = 1;
	const EventEmitter = require$$0$b;

	class Dispatcher extends EventEmitter {
	  dispatch () {
	    throw new Error('not implemented')
	  }

	  close () {
	    throw new Error('not implemented')
	  }

	  destroy () {
	    throw new Error('not implemented')
	  }

	  compose (...args) {
	    // So we handle [interceptor1, interceptor2] or interceptor1, interceptor2, ...
	    const interceptors = Array.isArray(args[0]) ? args[0] : args;
	    let dispatch = this.dispatch.bind(this);

	    for (const interceptor of interceptors) {
	      if (interceptor == null) {
	        continue
	      }

	      if (typeof interceptor !== 'function') {
	        throw new TypeError(`invalid interceptor, expected function received ${typeof interceptor}`)
	      }

	      dispatch = interceptor(dispatch);

	      if (dispatch == null || typeof dispatch !== 'function' || dispatch.length !== 2) {
	        throw new TypeError('invalid interceptor')
	      }
	    }

	    return new ComposedDispatcher(this, dispatch)
	  }
	}

	class ComposedDispatcher extends Dispatcher {
	  #dispatcher = null
	  #dispatch = null

	  constructor (dispatcher, dispatch) {
	    super();
	    this.#dispatcher = dispatcher;
	    this.#dispatch = dispatch;
	  }

	  dispatch (...args) {
	    this.#dispatch(...args);
	  }

	  close (...args) {
	    return this.#dispatcher.close(...args)
	  }

	  destroy (...args) {
	    return this.#dispatcher.destroy(...args)
	  }
	}

	dispatcher = Dispatcher;
	return dispatcher;
}

var dispatcherBase;
var hasRequiredDispatcherBase;

function requireDispatcherBase () {
	if (hasRequiredDispatcherBase) return dispatcherBase;
	hasRequiredDispatcherBase = 1;

	const Dispatcher = requireDispatcher();
	const {
	  ClientDestroyedError,
	  ClientClosedError,
	  InvalidArgumentError
	} = requireErrors();
	const { kDestroy, kClose, kClosed, kDestroyed, kDispatch, kInterceptors } = requireSymbols$5();

	const kOnDestroyed = Symbol('onDestroyed');
	const kOnClosed = Symbol('onClosed');
	const kInterceptedDispatch = Symbol('Intercepted Dispatch');

	class DispatcherBase extends Dispatcher {
	  constructor () {
	    super();

	    this[kDestroyed] = false;
	    this[kOnDestroyed] = null;
	    this[kClosed] = false;
	    this[kOnClosed] = [];
	  }

	  get destroyed () {
	    return this[kDestroyed]
	  }

	  get closed () {
	    return this[kClosed]
	  }

	  get interceptors () {
	    return this[kInterceptors]
	  }

	  set interceptors (newInterceptors) {
	    if (newInterceptors) {
	      for (let i = newInterceptors.length - 1; i >= 0; i--) {
	        const interceptor = this[kInterceptors][i];
	        if (typeof interceptor !== 'function') {
	          throw new InvalidArgumentError('interceptor must be an function')
	        }
	      }
	    }

	    this[kInterceptors] = newInterceptors;
	  }

	  close (callback) {
	    if (callback === undefined) {
	      return new Promise((resolve, reject) => {
	        this.close((err, data) => {
	          return err ? reject(err) : resolve(data)
	        });
	      })
	    }

	    if (typeof callback !== 'function') {
	      throw new InvalidArgumentError('invalid callback')
	    }

	    if (this[kDestroyed]) {
	      queueMicrotask(() => callback(new ClientDestroyedError(), null));
	      return
	    }

	    if (this[kClosed]) {
	      if (this[kOnClosed]) {
	        this[kOnClosed].push(callback);
	      } else {
	        queueMicrotask(() => callback(null, null));
	      }
	      return
	    }

	    this[kClosed] = true;
	    this[kOnClosed].push(callback);

	    const onClosed = () => {
	      const callbacks = this[kOnClosed];
	      this[kOnClosed] = null;
	      for (let i = 0; i < callbacks.length; i++) {
	        callbacks[i](null, null);
	      }
	    };

	    // Should not error.
	    this[kClose]()
	      .then(() => this.destroy())
	      .then(() => {
	        queueMicrotask(onClosed);
	      });
	  }

	  destroy (err, callback) {
	    if (typeof err === 'function') {
	      callback = err;
	      err = null;
	    }

	    if (callback === undefined) {
	      return new Promise((resolve, reject) => {
	        this.destroy(err, (err, data) => {
	          return err ? /* istanbul ignore next: should never error */ reject(err) : resolve(data)
	        });
	      })
	    }

	    if (typeof callback !== 'function') {
	      throw new InvalidArgumentError('invalid callback')
	    }

	    if (this[kDestroyed]) {
	      if (this[kOnDestroyed]) {
	        this[kOnDestroyed].push(callback);
	      } else {
	        queueMicrotask(() => callback(null, null));
	      }
	      return
	    }

	    if (!err) {
	      err = new ClientDestroyedError();
	    }

	    this[kDestroyed] = true;
	    this[kOnDestroyed] = this[kOnDestroyed] || [];
	    this[kOnDestroyed].push(callback);

	    const onDestroyed = () => {
	      const callbacks = this[kOnDestroyed];
	      this[kOnDestroyed] = null;
	      for (let i = 0; i < callbacks.length; i++) {
	        callbacks[i](null, null);
	      }
	    };

	    // Should not error.
	    this[kDestroy](err).then(() => {
	      queueMicrotask(onDestroyed);
	    });
	  }

	  [kInterceptedDispatch] (opts, handler) {
	    if (!this[kInterceptors] || this[kInterceptors].length === 0) {
	      this[kInterceptedDispatch] = this[kDispatch];
	      return this[kDispatch](opts, handler)
	    }

	    let dispatch = this[kDispatch].bind(this);
	    for (let i = this[kInterceptors].length - 1; i >= 0; i--) {
	      dispatch = this[kInterceptors][i](dispatch);
	    }
	    this[kInterceptedDispatch] = dispatch;
	    return dispatch(opts, handler)
	  }

	  dispatch (opts, handler) {
	    if (!handler || typeof handler !== 'object') {
	      throw new InvalidArgumentError('handler must be an object')
	    }

	    try {
	      if (!opts || typeof opts !== 'object') {
	        throw new InvalidArgumentError('opts must be an object.')
	      }

	      if (this[kDestroyed] || this[kOnDestroyed]) {
	        throw new ClientDestroyedError()
	      }

	      if (this[kClosed]) {
	        throw new ClientClosedError()
	      }

	      return this[kInterceptedDispatch](opts, handler)
	    } catch (err) {
	      if (typeof handler.onError !== 'function') {
	        throw new InvalidArgumentError('invalid onError method')
	      }

	      handler.onError(err);

	      return false
	    }
	  }
	}

	dispatcherBase = DispatcherBase;
	return dispatcherBase;
}

var connect;
var hasRequiredConnect;

function requireConnect () {
	if (hasRequiredConnect) return connect;
	hasRequiredConnect = 1;

	const net = require$$4$4;
	const assert = require$$0$7;
	const util = requireUtil$8();
	const { InvalidArgumentError, ConnectTimeoutError } = requireErrors();

	let tls; // include tls conditionally since it is not always available

	// TODO: session re-use does not wait for the first
	// connection to resolve the session and might therefore
	// resolve the same servername multiple times even when
	// re-use is enabled.

	let SessionCache;
	// FIXME: remove workaround when the Node bug is fixed
	// https://github.com/nodejs/node/issues/49344#issuecomment-1741776308
	if (commonjsGlobal.FinalizationRegistry && !(process.env.NODE_V8_COVERAGE || process.env.UNDICI_NO_FG)) {
	  SessionCache = class WeakSessionCache {
	    constructor (maxCachedSessions) {
	      this._maxCachedSessions = maxCachedSessions;
	      this._sessionCache = new Map();
	      this._sessionRegistry = new commonjsGlobal.FinalizationRegistry((key) => {
	        if (this._sessionCache.size < this._maxCachedSessions) {
	          return
	        }

	        const ref = this._sessionCache.get(key);
	        if (ref !== undefined && ref.deref() === undefined) {
	          this._sessionCache.delete(key);
	        }
	      });
	    }

	    get (sessionKey) {
	      const ref = this._sessionCache.get(sessionKey);
	      return ref ? ref.deref() : null
	    }

	    set (sessionKey, session) {
	      if (this._maxCachedSessions === 0) {
	        return
	      }

	      this._sessionCache.set(sessionKey, new WeakRef(session));
	      this._sessionRegistry.register(session, sessionKey);
	    }
	  };
	} else {
	  SessionCache = class SimpleSessionCache {
	    constructor (maxCachedSessions) {
	      this._maxCachedSessions = maxCachedSessions;
	      this._sessionCache = new Map();
	    }

	    get (sessionKey) {
	      return this._sessionCache.get(sessionKey)
	    }

	    set (sessionKey, session) {
	      if (this._maxCachedSessions === 0) {
	        return
	      }

	      if (this._sessionCache.size >= this._maxCachedSessions) {
	        // remove the oldest session
	        const { value: oldestKey } = this._sessionCache.keys().next();
	        this._sessionCache.delete(oldestKey);
	      }

	      this._sessionCache.set(sessionKey, session);
	    }
	  };
	}

	function buildConnector ({ allowH2, maxCachedSessions, socketPath, timeout, session: customSession, ...opts }) {
	  if (maxCachedSessions != null && (!Number.isInteger(maxCachedSessions) || maxCachedSessions < 0)) {
	    throw new InvalidArgumentError('maxCachedSessions must be a positive integer or zero')
	  }

	  const options = { path: socketPath, ...opts };
	  const sessionCache = new SessionCache(maxCachedSessions == null ? 100 : maxCachedSessions);
	  timeout = timeout == null ? 10e3 : timeout;
	  allowH2 = allowH2 != null ? allowH2 : false;
	  return function connect ({ hostname, host, protocol, port, servername, localAddress, httpSocket }, callback) {
	    let socket;
	    if (protocol === 'https:') {
	      if (!tls) {
	        tls = require$$4$5;
	      }
	      servername = servername || options.servername || util.getServerName(host) || null;

	      const sessionKey = servername || hostname;
	      const session = customSession || sessionCache.get(sessionKey) || null;

	      assert(sessionKey);

	      socket = tls.connect({
	        highWaterMark: 16384, // TLS in node can't have bigger HWM anyway...
	        ...options,
	        servername,
	        session,
	        localAddress,
	        // TODO(HTTP/2): Add support for h2c
	        ALPNProtocols: allowH2 ? ['http/1.1', 'h2'] : ['http/1.1'],
	        socket: httpSocket, // upgrade socket connection
	        port: port || 443,
	        host: hostname
	      });

	      socket
	        .on('session', function (session) {
	          // TODO (fix): Can a session become invalid once established? Don't think so?
	          sessionCache.set(sessionKey, session);
	        });
	    } else {
	      assert(!httpSocket, 'httpSocket can only be sent on TLS update');
	      socket = net.connect({
	        highWaterMark: 64 * 1024, // Same as nodejs fs streams.
	        ...options,
	        localAddress,
	        port: port || 80,
	        host: hostname
	      });
	    }

	    // Set TCP keep alive options on the socket here instead of in connect() for the case of assigning the socket
	    if (options.keepAlive == null || options.keepAlive) {
	      const keepAliveInitialDelay = options.keepAliveInitialDelay === undefined ? 60e3 : options.keepAliveInitialDelay;
	      socket.setKeepAlive(true, keepAliveInitialDelay);
	    }

	    const cancelTimeout = setupTimeout(() => onConnectTimeout(socket), timeout);

	    socket
	      .setNoDelay(true)
	      .once(protocol === 'https:' ? 'secureConnect' : 'connect', function () {
	        cancelTimeout();

	        if (callback) {
	          const cb = callback;
	          callback = null;
	          cb(null, this);
	        }
	      })
	      .on('error', function (err) {
	        cancelTimeout();

	        if (callback) {
	          const cb = callback;
	          callback = null;
	          cb(err);
	        }
	      });

	    return socket
	  }
	}

	function setupTimeout (onConnectTimeout, timeout) {
	  if (!timeout) {
	    return () => {}
	  }

	  let s1 = null;
	  let s2 = null;
	  const timeoutId = setTimeout(() => {
	    // setImmediate is added to make sure that we prioritize socket error events over timeouts
	    s1 = setImmediate(() => {
	      if (process.platform === 'win32') {
	        // Windows needs an extra setImmediate probably due to implementation differences in the socket logic
	        s2 = setImmediate(() => onConnectTimeout());
	      } else {
	        onConnectTimeout();
	      }
	    });
	  }, timeout);
	  return () => {
	    clearTimeout(timeoutId);
	    clearImmediate(s1);
	    clearImmediate(s2);
	  }
	}

	function onConnectTimeout (socket) {
	  let message = 'Connect Timeout Error';
	  if (Array.isArray(socket.autoSelectFamilyAttemptedAddresses)) {
	    message += ` (attempted addresses: ${socket.autoSelectFamilyAttemptedAddresses.join(', ')})`;
	  }
	  util.destroy(socket, new ConnectTimeoutError(message));
	}

	connect = buildConnector;
	return connect;
}

var timers;
var hasRequiredTimers;

function requireTimers () {
	if (hasRequiredTimers) return timers;
	hasRequiredTimers = 1;

	const TICK_MS = 499;

	let fastNow = Date.now();
	let fastNowTimeout;

	const fastTimers = [];

	function onTimeout () {
	  fastNow = Date.now();

	  let len = fastTimers.length;
	  let idx = 0;
	  while (idx < len) {
	    const timer = fastTimers[idx];

	    if (timer.state === 0) {
	      timer.state = fastNow + timer.delay - TICK_MS;
	    } else if (timer.state > 0 && fastNow >= timer.state) {
	      timer.state = -1;
	      timer.callback(timer.opaque);
	    }

	    if (timer.state === -1) {
	      timer.state = -2;
	      if (idx !== len - 1) {
	        fastTimers[idx] = fastTimers.pop();
	      } else {
	        fastTimers.pop();
	      }
	      len -= 1;
	    } else {
	      idx += 1;
	    }
	  }

	  if (fastTimers.length > 0) {
	    refreshTimeout();
	  }
	}

	function refreshTimeout () {
	  if (fastNowTimeout?.refresh) {
	    fastNowTimeout.refresh();
	  } else {
	    clearTimeout(fastNowTimeout);
	    fastNowTimeout = setTimeout(onTimeout, TICK_MS);
	    if (fastNowTimeout.unref) {
	      fastNowTimeout.unref();
	    }
	  }
	}

	class Timeout {
	  constructor (callback, delay, opaque) {
	    this.callback = callback;
	    this.delay = delay;
	    this.opaque = opaque;

	    //  -2 not in timer list
	    //  -1 in timer list but inactive
	    //   0 in timer list waiting for time
	    // > 0 in timer list waiting for time to expire
	    this.state = -2;

	    this.refresh();
	  }

	  refresh () {
	    if (this.state === -2) {
	      fastTimers.push(this);
	      if (!fastNowTimeout || fastTimers.length === 1) {
	        refreshTimeout();
	      }
	    }

	    this.state = 0;
	  }

	  clear () {
	    this.state = -1;
	  }
	}

	timers = {
	  setTimeout (callback, delay, opaque) {
	    return delay <= 1e3
	      ? setTimeout(callback, delay, opaque)
	      : new Timeout(callback, delay, opaque)
	  },
	  clearTimeout (timeout) {
	    if (timeout instanceof Timeout) {
	      timeout.clear();
	    } else {
	      clearTimeout(timeout);
	    }
	  }
	};
	return timers;
}

var constants$4 = {};

var utils = {};

var hasRequiredUtils;

function requireUtils () {
	if (hasRequiredUtils) return utils;
	hasRequiredUtils = 1;
	Object.defineProperty(utils, "__esModule", { value: true });
	utils.enumToMap = void 0;
	function enumToMap(obj) {
	    const res = {};
	    Object.keys(obj).forEach((key) => {
	        const value = obj[key];
	        if (typeof value === 'number') {
	            res[key] = value;
	        }
	    });
	    return res;
	}
	utils.enumToMap = enumToMap;
	
	return utils;
}

var hasRequiredConstants$5;

function requireConstants$5 () {
	if (hasRequiredConstants$5) return constants$4;
	hasRequiredConstants$5 = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.SPECIAL_HEADERS = exports.HEADER_STATE = exports.MINOR = exports.MAJOR = exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS = exports.TOKEN = exports.STRICT_TOKEN = exports.HEX = exports.URL_CHAR = exports.STRICT_URL_CHAR = exports.USERINFO_CHARS = exports.MARK = exports.ALPHANUM = exports.NUM = exports.HEX_MAP = exports.NUM_MAP = exports.ALPHA = exports.FINISH = exports.H_METHOD_MAP = exports.METHOD_MAP = exports.METHODS_RTSP = exports.METHODS_ICE = exports.METHODS_HTTP = exports.METHODS = exports.LENIENT_FLAGS = exports.FLAGS = exports.TYPE = exports.ERROR = void 0;
		const utils_1 = requireUtils();
		(function (ERROR) {
		    ERROR[ERROR["OK"] = 0] = "OK";
		    ERROR[ERROR["INTERNAL"] = 1] = "INTERNAL";
		    ERROR[ERROR["STRICT"] = 2] = "STRICT";
		    ERROR[ERROR["LF_EXPECTED"] = 3] = "LF_EXPECTED";
		    ERROR[ERROR["UNEXPECTED_CONTENT_LENGTH"] = 4] = "UNEXPECTED_CONTENT_LENGTH";
		    ERROR[ERROR["CLOSED_CONNECTION"] = 5] = "CLOSED_CONNECTION";
		    ERROR[ERROR["INVALID_METHOD"] = 6] = "INVALID_METHOD";
		    ERROR[ERROR["INVALID_URL"] = 7] = "INVALID_URL";
		    ERROR[ERROR["INVALID_CONSTANT"] = 8] = "INVALID_CONSTANT";
		    ERROR[ERROR["INVALID_VERSION"] = 9] = "INVALID_VERSION";
		    ERROR[ERROR["INVALID_HEADER_TOKEN"] = 10] = "INVALID_HEADER_TOKEN";
		    ERROR[ERROR["INVALID_CONTENT_LENGTH"] = 11] = "INVALID_CONTENT_LENGTH";
		    ERROR[ERROR["INVALID_CHUNK_SIZE"] = 12] = "INVALID_CHUNK_SIZE";
		    ERROR[ERROR["INVALID_STATUS"] = 13] = "INVALID_STATUS";
		    ERROR[ERROR["INVALID_EOF_STATE"] = 14] = "INVALID_EOF_STATE";
		    ERROR[ERROR["INVALID_TRANSFER_ENCODING"] = 15] = "INVALID_TRANSFER_ENCODING";
		    ERROR[ERROR["CB_MESSAGE_BEGIN"] = 16] = "CB_MESSAGE_BEGIN";
		    ERROR[ERROR["CB_HEADERS_COMPLETE"] = 17] = "CB_HEADERS_COMPLETE";
		    ERROR[ERROR["CB_MESSAGE_COMPLETE"] = 18] = "CB_MESSAGE_COMPLETE";
		    ERROR[ERROR["CB_CHUNK_HEADER"] = 19] = "CB_CHUNK_HEADER";
		    ERROR[ERROR["CB_CHUNK_COMPLETE"] = 20] = "CB_CHUNK_COMPLETE";
		    ERROR[ERROR["PAUSED"] = 21] = "PAUSED";
		    ERROR[ERROR["PAUSED_UPGRADE"] = 22] = "PAUSED_UPGRADE";
		    ERROR[ERROR["PAUSED_H2_UPGRADE"] = 23] = "PAUSED_H2_UPGRADE";
		    ERROR[ERROR["USER"] = 24] = "USER";
		})(exports.ERROR || (exports.ERROR = {}));
		(function (TYPE) {
		    TYPE[TYPE["BOTH"] = 0] = "BOTH";
		    TYPE[TYPE["REQUEST"] = 1] = "REQUEST";
		    TYPE[TYPE["RESPONSE"] = 2] = "RESPONSE";
		})(exports.TYPE || (exports.TYPE = {}));
		(function (FLAGS) {
		    FLAGS[FLAGS["CONNECTION_KEEP_ALIVE"] = 1] = "CONNECTION_KEEP_ALIVE";
		    FLAGS[FLAGS["CONNECTION_CLOSE"] = 2] = "CONNECTION_CLOSE";
		    FLAGS[FLAGS["CONNECTION_UPGRADE"] = 4] = "CONNECTION_UPGRADE";
		    FLAGS[FLAGS["CHUNKED"] = 8] = "CHUNKED";
		    FLAGS[FLAGS["UPGRADE"] = 16] = "UPGRADE";
		    FLAGS[FLAGS["CONTENT_LENGTH"] = 32] = "CONTENT_LENGTH";
		    FLAGS[FLAGS["SKIPBODY"] = 64] = "SKIPBODY";
		    FLAGS[FLAGS["TRAILING"] = 128] = "TRAILING";
		    // 1 << 8 is unused
		    FLAGS[FLAGS["TRANSFER_ENCODING"] = 512] = "TRANSFER_ENCODING";
		})(exports.FLAGS || (exports.FLAGS = {}));
		(function (LENIENT_FLAGS) {
		    LENIENT_FLAGS[LENIENT_FLAGS["HEADERS"] = 1] = "HEADERS";
		    LENIENT_FLAGS[LENIENT_FLAGS["CHUNKED_LENGTH"] = 2] = "CHUNKED_LENGTH";
		    LENIENT_FLAGS[LENIENT_FLAGS["KEEP_ALIVE"] = 4] = "KEEP_ALIVE";
		})(exports.LENIENT_FLAGS || (exports.LENIENT_FLAGS = {}));
		var METHODS;
		(function (METHODS) {
		    METHODS[METHODS["DELETE"] = 0] = "DELETE";
		    METHODS[METHODS["GET"] = 1] = "GET";
		    METHODS[METHODS["HEAD"] = 2] = "HEAD";
		    METHODS[METHODS["POST"] = 3] = "POST";
		    METHODS[METHODS["PUT"] = 4] = "PUT";
		    /* pathological */
		    METHODS[METHODS["CONNECT"] = 5] = "CONNECT";
		    METHODS[METHODS["OPTIONS"] = 6] = "OPTIONS";
		    METHODS[METHODS["TRACE"] = 7] = "TRACE";
		    /* WebDAV */
		    METHODS[METHODS["COPY"] = 8] = "COPY";
		    METHODS[METHODS["LOCK"] = 9] = "LOCK";
		    METHODS[METHODS["MKCOL"] = 10] = "MKCOL";
		    METHODS[METHODS["MOVE"] = 11] = "MOVE";
		    METHODS[METHODS["PROPFIND"] = 12] = "PROPFIND";
		    METHODS[METHODS["PROPPATCH"] = 13] = "PROPPATCH";
		    METHODS[METHODS["SEARCH"] = 14] = "SEARCH";
		    METHODS[METHODS["UNLOCK"] = 15] = "UNLOCK";
		    METHODS[METHODS["BIND"] = 16] = "BIND";
		    METHODS[METHODS["REBIND"] = 17] = "REBIND";
		    METHODS[METHODS["UNBIND"] = 18] = "UNBIND";
		    METHODS[METHODS["ACL"] = 19] = "ACL";
		    /* subversion */
		    METHODS[METHODS["REPORT"] = 20] = "REPORT";
		    METHODS[METHODS["MKACTIVITY"] = 21] = "MKACTIVITY";
		    METHODS[METHODS["CHECKOUT"] = 22] = "CHECKOUT";
		    METHODS[METHODS["MERGE"] = 23] = "MERGE";
		    /* upnp */
		    METHODS[METHODS["M-SEARCH"] = 24] = "M-SEARCH";
		    METHODS[METHODS["NOTIFY"] = 25] = "NOTIFY";
		    METHODS[METHODS["SUBSCRIBE"] = 26] = "SUBSCRIBE";
		    METHODS[METHODS["UNSUBSCRIBE"] = 27] = "UNSUBSCRIBE";
		    /* RFC-5789 */
		    METHODS[METHODS["PATCH"] = 28] = "PATCH";
		    METHODS[METHODS["PURGE"] = 29] = "PURGE";
		    /* CalDAV */
		    METHODS[METHODS["MKCALENDAR"] = 30] = "MKCALENDAR";
		    /* RFC-2068, section 19.6.1.2 */
		    METHODS[METHODS["LINK"] = 31] = "LINK";
		    METHODS[METHODS["UNLINK"] = 32] = "UNLINK";
		    /* icecast */
		    METHODS[METHODS["SOURCE"] = 33] = "SOURCE";
		    /* RFC-7540, section 11.6 */
		    METHODS[METHODS["PRI"] = 34] = "PRI";
		    /* RFC-2326 RTSP */
		    METHODS[METHODS["DESCRIBE"] = 35] = "DESCRIBE";
		    METHODS[METHODS["ANNOUNCE"] = 36] = "ANNOUNCE";
		    METHODS[METHODS["SETUP"] = 37] = "SETUP";
		    METHODS[METHODS["PLAY"] = 38] = "PLAY";
		    METHODS[METHODS["PAUSE"] = 39] = "PAUSE";
		    METHODS[METHODS["TEARDOWN"] = 40] = "TEARDOWN";
		    METHODS[METHODS["GET_PARAMETER"] = 41] = "GET_PARAMETER";
		    METHODS[METHODS["SET_PARAMETER"] = 42] = "SET_PARAMETER";
		    METHODS[METHODS["REDIRECT"] = 43] = "REDIRECT";
		    METHODS[METHODS["RECORD"] = 44] = "RECORD";
		    /* RAOP */
		    METHODS[METHODS["FLUSH"] = 45] = "FLUSH";
		})(METHODS = exports.METHODS || (exports.METHODS = {}));
		exports.METHODS_HTTP = [
		    METHODS.DELETE,
		    METHODS.GET,
		    METHODS.HEAD,
		    METHODS.POST,
		    METHODS.PUT,
		    METHODS.CONNECT,
		    METHODS.OPTIONS,
		    METHODS.TRACE,
		    METHODS.COPY,
		    METHODS.LOCK,
		    METHODS.MKCOL,
		    METHODS.MOVE,
		    METHODS.PROPFIND,
		    METHODS.PROPPATCH,
		    METHODS.SEARCH,
		    METHODS.UNLOCK,
		    METHODS.BIND,
		    METHODS.REBIND,
		    METHODS.UNBIND,
		    METHODS.ACL,
		    METHODS.REPORT,
		    METHODS.MKACTIVITY,
		    METHODS.CHECKOUT,
		    METHODS.MERGE,
		    METHODS['M-SEARCH'],
		    METHODS.NOTIFY,
		    METHODS.SUBSCRIBE,
		    METHODS.UNSUBSCRIBE,
		    METHODS.PATCH,
		    METHODS.PURGE,
		    METHODS.MKCALENDAR,
		    METHODS.LINK,
		    METHODS.UNLINK,
		    METHODS.PRI,
		    // TODO(indutny): should we allow it with HTTP?
		    METHODS.SOURCE,
		];
		exports.METHODS_ICE = [
		    METHODS.SOURCE,
		];
		exports.METHODS_RTSP = [
		    METHODS.OPTIONS,
		    METHODS.DESCRIBE,
		    METHODS.ANNOUNCE,
		    METHODS.SETUP,
		    METHODS.PLAY,
		    METHODS.PAUSE,
		    METHODS.TEARDOWN,
		    METHODS.GET_PARAMETER,
		    METHODS.SET_PARAMETER,
		    METHODS.REDIRECT,
		    METHODS.RECORD,
		    METHODS.FLUSH,
		    // For AirPlay
		    METHODS.GET,
		    METHODS.POST,
		];
		exports.METHOD_MAP = utils_1.enumToMap(METHODS);
		exports.H_METHOD_MAP = {};
		Object.keys(exports.METHOD_MAP).forEach((key) => {
		    if (/^H/.test(key)) {
		        exports.H_METHOD_MAP[key] = exports.METHOD_MAP[key];
		    }
		});
		(function (FINISH) {
		    FINISH[FINISH["SAFE"] = 0] = "SAFE";
		    FINISH[FINISH["SAFE_WITH_CB"] = 1] = "SAFE_WITH_CB";
		    FINISH[FINISH["UNSAFE"] = 2] = "UNSAFE";
		})(exports.FINISH || (exports.FINISH = {}));
		exports.ALPHA = [];
		for (let i = 'A'.charCodeAt(0); i <= 'Z'.charCodeAt(0); i++) {
		    // Upper case
		    exports.ALPHA.push(String.fromCharCode(i));
		    // Lower case
		    exports.ALPHA.push(String.fromCharCode(i + 0x20));
		}
		exports.NUM_MAP = {
		    0: 0, 1: 1, 2: 2, 3: 3, 4: 4,
		    5: 5, 6: 6, 7: 7, 8: 8, 9: 9,
		};
		exports.HEX_MAP = {
		    0: 0, 1: 1, 2: 2, 3: 3, 4: 4,
		    5: 5, 6: 6, 7: 7, 8: 8, 9: 9,
		    A: 0XA, B: 0XB, C: 0XC, D: 0XD, E: 0XE, F: 0XF,
		    a: 0xa, b: 0xb, c: 0xc, d: 0xd, e: 0xe, f: 0xf,
		};
		exports.NUM = [
		    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
		];
		exports.ALPHANUM = exports.ALPHA.concat(exports.NUM);
		exports.MARK = ['-', '_', '.', '!', '~', '*', '\'', '(', ')'];
		exports.USERINFO_CHARS = exports.ALPHANUM
		    .concat(exports.MARK)
		    .concat(['%', ';', ':', '&', '=', '+', '$', ',']);
		// TODO(indutny): use RFC
		exports.STRICT_URL_CHAR = [
		    '!', '"', '$', '%', '&', '\'',
		    '(', ')', '*', '+', ',', '-', '.', '/',
		    ':', ';', '<', '=', '>',
		    '@', '[', '\\', ']', '^', '_',
		    '`',
		    '{', '|', '}', '~',
		].concat(exports.ALPHANUM);
		exports.URL_CHAR = exports.STRICT_URL_CHAR
		    .concat(['\t', '\f']);
		// All characters with 0x80 bit set to 1
		for (let i = 0x80; i <= 0xff; i++) {
		    exports.URL_CHAR.push(i);
		}
		exports.HEX = exports.NUM.concat(['a', 'b', 'c', 'd', 'e', 'f', 'A', 'B', 'C', 'D', 'E', 'F']);
		/* Tokens as defined by rfc 2616. Also lowercases them.
		 *        token       = 1*<any CHAR except CTLs or separators>
		 *     separators     = "(" | ")" | "<" | ">" | "@"
		 *                    | "," | ";" | ":" | "\" | <">
		 *                    | "/" | "[" | "]" | "?" | "="
		 *                    | "{" | "}" | SP | HT
		 */
		exports.STRICT_TOKEN = [
		    '!', '#', '$', '%', '&', '\'',
		    '*', '+', '-', '.',
		    '^', '_', '`',
		    '|', '~',
		].concat(exports.ALPHANUM);
		exports.TOKEN = exports.STRICT_TOKEN.concat([' ']);
		/*
		 * Verify that a char is a valid visible (printable) US-ASCII
		 * character or %x80-FF
		 */
		exports.HEADER_CHARS = ['\t'];
		for (let i = 32; i <= 255; i++) {
		    if (i !== 127) {
		        exports.HEADER_CHARS.push(i);
		    }
		}
		// ',' = \x44
		exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS.filter((c) => c !== 44);
		exports.MAJOR = exports.NUM_MAP;
		exports.MINOR = exports.MAJOR;
		var HEADER_STATE;
		(function (HEADER_STATE) {
		    HEADER_STATE[HEADER_STATE["GENERAL"] = 0] = "GENERAL";
		    HEADER_STATE[HEADER_STATE["CONNECTION"] = 1] = "CONNECTION";
		    HEADER_STATE[HEADER_STATE["CONTENT_LENGTH"] = 2] = "CONTENT_LENGTH";
		    HEADER_STATE[HEADER_STATE["TRANSFER_ENCODING"] = 3] = "TRANSFER_ENCODING";
		    HEADER_STATE[HEADER_STATE["UPGRADE"] = 4] = "UPGRADE";
		    HEADER_STATE[HEADER_STATE["CONNECTION_KEEP_ALIVE"] = 5] = "CONNECTION_KEEP_ALIVE";
		    HEADER_STATE[HEADER_STATE["CONNECTION_CLOSE"] = 6] = "CONNECTION_CLOSE";
		    HEADER_STATE[HEADER_STATE["CONNECTION_UPGRADE"] = 7] = "CONNECTION_UPGRADE";
		    HEADER_STATE[HEADER_STATE["TRANSFER_ENCODING_CHUNKED"] = 8] = "TRANSFER_ENCODING_CHUNKED";
		})(HEADER_STATE = exports.HEADER_STATE || (exports.HEADER_STATE = {}));
		exports.SPECIAL_HEADERS = {
		    'connection': HEADER_STATE.CONNECTION,
		    'content-length': HEADER_STATE.CONTENT_LENGTH,
		    'proxy-connection': HEADER_STATE.CONNECTION,
		    'transfer-encoding': HEADER_STATE.TRANSFER_ENCODING,
		    'upgrade': HEADER_STATE.UPGRADE,
		};
		
	} (constants$4));
	return constants$4;
}

var llhttpWasm;
var hasRequiredLlhttpWasm;

function requireLlhttpWasm () {
	if (hasRequiredLlhttpWasm) return llhttpWasm;
	hasRequiredLlhttpWasm = 1;

	const { Buffer } = require$$0$9;

	llhttpWasm = Buffer.from('', 'base64');
	return llhttpWasm;
}

var llhttp_simdWasm;
var hasRequiredLlhttp_simdWasm;

function requireLlhttp_simdWasm () {
	if (hasRequiredLlhttp_simdWasm) return llhttp_simdWasm;
	hasRequiredLlhttp_simdWasm = 1;

	const { Buffer } = require$$0$9;

	llhttp_simdWasm = Buffer.from('', 'base64');
	return llhttp_simdWasm;
}

var constants$3;
var hasRequiredConstants$4;

function requireConstants$4 () {
	if (hasRequiredConstants$4) return constants$3;
	hasRequiredConstants$4 = 1;

	const corsSafeListedMethods = ['GET', 'HEAD', 'POST'];
	const corsSafeListedMethodsSet = new Set(corsSafeListedMethods);

	const nullBodyStatus = [101, 204, 205, 304];

	const redirectStatus = [301, 302, 303, 307, 308];
	const redirectStatusSet = new Set(redirectStatus);

	// https://fetch.spec.whatwg.org/#block-bad-port
	const badPorts = [
	  '1', '7', '9', '11', '13', '15', '17', '19', '20', '21', '22', '23', '25', '37', '42', '43', '53', '69', '77', '79',
	  '87', '95', '101', '102', '103', '104', '109', '110', '111', '113', '115', '117', '119', '123', '135', '137',
	  '139', '143', '161', '179', '389', '427', '465', '512', '513', '514', '515', '526', '530', '531', '532',
	  '540', '548', '554', '556', '563', '587', '601', '636', '989', '990', '993', '995', '1719', '1720', '1723',
	  '2049', '3659', '4045', '4190', '5060', '5061', '6000', '6566', '6665', '6666', '6667', '6668', '6669', '6679',
	  '6697', '10080'
	];

	const badPortsSet = new Set(badPorts);

	// https://w3c.github.io/webappsec-referrer-policy/#referrer-policies
	const referrerPolicy = [
	  '',
	  'no-referrer',
	  'no-referrer-when-downgrade',
	  'same-origin',
	  'origin',
	  'strict-origin',
	  'origin-when-cross-origin',
	  'strict-origin-when-cross-origin',
	  'unsafe-url'
	];
	const referrerPolicySet = new Set(referrerPolicy);

	const requestRedirect = ['follow', 'manual', 'error'];

	const safeMethods = ['GET', 'HEAD', 'OPTIONS', 'TRACE'];
	const safeMethodsSet = new Set(safeMethods);

	const requestMode = ['navigate', 'same-origin', 'no-cors', 'cors'];

	const requestCredentials = ['omit', 'same-origin', 'include'];

	const requestCache = [
	  'default',
	  'no-store',
	  'reload',
	  'no-cache',
	  'force-cache',
	  'only-if-cached'
	];

	// https://fetch.spec.whatwg.org/#request-body-header-name
	const requestBodyHeader = [
	  'content-encoding',
	  'content-language',
	  'content-location',
	  'content-type',
	  // See https://github.com/nodejs/undici/issues/2021
	  // 'Content-Length' is a forbidden header name, which is typically
	  // removed in the Headers implementation. However, undici doesn't
	  // filter out headers, so we add it here.
	  'content-length'
	];

	// https://fetch.spec.whatwg.org/#enumdef-requestduplex
	const requestDuplex = [
	  'half'
	];

	// http://fetch.spec.whatwg.org/#forbidden-method
	const forbiddenMethods = ['CONNECT', 'TRACE', 'TRACK'];
	const forbiddenMethodsSet = new Set(forbiddenMethods);

	const subresource = [
	  'audio',
	  'audioworklet',
	  'font',
	  'image',
	  'manifest',
	  'paintworklet',
	  'script',
	  'style',
	  'track',
	  'video',
	  'xslt',
	  ''
	];
	const subresourceSet = new Set(subresource);

	constants$3 = {
	  subresource,
	  forbiddenMethods,
	  requestBodyHeader,
	  referrerPolicy,
	  requestRedirect,
	  requestMode,
	  requestCredentials,
	  requestCache,
	  redirectStatus,
	  corsSafeListedMethods,
	  nullBodyStatus,
	  safeMethods,
	  badPorts,
	  requestDuplex,
	  subresourceSet,
	  badPortsSet,
	  redirectStatusSet,
	  corsSafeListedMethodsSet,
	  safeMethodsSet,
	  forbiddenMethodsSet,
	  referrerPolicySet
	};
	return constants$3;
}

var global$2;
var hasRequiredGlobal$1;

function requireGlobal$1 () {
	if (hasRequiredGlobal$1) return global$2;
	hasRequiredGlobal$1 = 1;

	// In case of breaking changes, increase the version
	// number to avoid conflicts.
	const globalOrigin = Symbol.for('undici.globalOrigin.1');

	function getGlobalOrigin () {
	  return globalThis[globalOrigin]
	}

	function setGlobalOrigin (newOrigin) {
	  if (newOrigin === undefined) {
	    Object.defineProperty(globalThis, globalOrigin, {
	      value: undefined,
	      writable: true,
	      enumerable: false,
	      configurable: false
	    });

	    return
	  }

	  const parsedURL = new URL(newOrigin);

	  if (parsedURL.protocol !== 'http:' && parsedURL.protocol !== 'https:') {
	    throw new TypeError(`Only http & https urls are allowed, received ${parsedURL.protocol}`)
	  }

	  Object.defineProperty(globalThis, globalOrigin, {
	    value: parsedURL,
	    writable: true,
	    enumerable: false,
	    configurable: false
	  });
	}

	global$2 = {
	  getGlobalOrigin,
	  setGlobalOrigin
	};
	return global$2;
}

var dataUrl;
var hasRequiredDataUrl;

function requireDataUrl () {
	if (hasRequiredDataUrl) return dataUrl;
	hasRequiredDataUrl = 1;

	const assert = require$$0$7;

	const encoder = new TextEncoder();

	/**
	 * @see https://mimesniff.spec.whatwg.org/#http-token-code-point
	 */
	const HTTP_TOKEN_CODEPOINTS = /^[!#$%&'*+\-.^_|~A-Za-z0-9]+$/;
	const HTTP_WHITESPACE_REGEX = /[\u000A\u000D\u0009\u0020]/; // eslint-disable-line
	const ASCII_WHITESPACE_REPLACE_REGEX = /[\u0009\u000A\u000C\u000D\u0020]/g; // eslint-disable-line
	/**
	 * @see https://mimesniff.spec.whatwg.org/#http-quoted-string-token-code-point
	 */
	const HTTP_QUOTED_STRING_TOKENS = /^[\u0009\u0020-\u007E\u0080-\u00FF]+$/; // eslint-disable-line

	// https://fetch.spec.whatwg.org/#data-url-processor
	/** @param {URL} dataURL */
	function dataURLProcessor (dataURL) {
	  // 1. Assert: dataURL’s scheme is "data".
	  assert(dataURL.protocol === 'data:');

	  // 2. Let input be the result of running the URL
	  // serializer on dataURL with exclude fragment
	  // set to true.
	  let input = URLSerializer(dataURL, true);

	  // 3. Remove the leading "data:" string from input.
	  input = input.slice(5);

	  // 4. Let position point at the start of input.
	  const position = { position: 0 };

	  // 5. Let mimeType be the result of collecting a
	  // sequence of code points that are not equal
	  // to U+002C (,), given position.
	  let mimeType = collectASequenceOfCodePointsFast(
	    ',',
	    input,
	    position
	  );

	  // 6. Strip leading and trailing ASCII whitespace
	  // from mimeType.
	  // Undici implementation note: we need to store the
	  // length because if the mimetype has spaces removed,
	  // the wrong amount will be sliced from the input in
	  // step #9
	  const mimeTypeLength = mimeType.length;
	  mimeType = removeASCIIWhitespace(mimeType, true, true);

	  // 7. If position is past the end of input, then
	  // return failure
	  if (position.position >= input.length) {
	    return 'failure'
	  }

	  // 8. Advance position by 1.
	  position.position++;

	  // 9. Let encodedBody be the remainder of input.
	  const encodedBody = input.slice(mimeTypeLength + 1);

	  // 10. Let body be the percent-decoding of encodedBody.
	  let body = stringPercentDecode(encodedBody);

	  // 11. If mimeType ends with U+003B (;), followed by
	  // zero or more U+0020 SPACE, followed by an ASCII
	  // case-insensitive match for "base64", then:
	  if (/;(\u0020){0,}base64$/i.test(mimeType)) {
	    // 1. Let stringBody be the isomorphic decode of body.
	    const stringBody = isomorphicDecode(body);

	    // 2. Set body to the forgiving-base64 decode of
	    // stringBody.
	    body = forgivingBase64(stringBody);

	    // 3. If body is failure, then return failure.
	    if (body === 'failure') {
	      return 'failure'
	    }

	    // 4. Remove the last 6 code points from mimeType.
	    mimeType = mimeType.slice(0, -6);

	    // 5. Remove trailing U+0020 SPACE code points from mimeType,
	    // if any.
	    mimeType = mimeType.replace(/(\u0020)+$/, '');

	    // 6. Remove the last U+003B (;) code point from mimeType.
	    mimeType = mimeType.slice(0, -1);
	  }

	  // 12. If mimeType starts with U+003B (;), then prepend
	  // "text/plain" to mimeType.
	  if (mimeType.startsWith(';')) {
	    mimeType = 'text/plain' + mimeType;
	  }

	  // 13. Let mimeTypeRecord be the result of parsing
	  // mimeType.
	  let mimeTypeRecord = parseMIMEType(mimeType);

	  // 14. If mimeTypeRecord is failure, then set
	  // mimeTypeRecord to text/plain;charset=US-ASCII.
	  if (mimeTypeRecord === 'failure') {
	    mimeTypeRecord = parseMIMEType('text/plain;charset=US-ASCII');
	  }

	  // 15. Return a new data: URL struct whose MIME
	  // type is mimeTypeRecord and body is body.
	  // https://fetch.spec.whatwg.org/#data-url-struct
	  return { mimeType: mimeTypeRecord, body }
	}

	// https://url.spec.whatwg.org/#concept-url-serializer
	/**
	 * @param {URL} url
	 * @param {boolean} excludeFragment
	 */
	function URLSerializer (url, excludeFragment = false) {
	  if (!excludeFragment) {
	    return url.href
	  }

	  const href = url.href;
	  const hashLength = url.hash.length;

	  const serialized = hashLength === 0 ? href : href.substring(0, href.length - hashLength);

	  if (!hashLength && href.endsWith('#')) {
	    return serialized.slice(0, -1)
	  }

	  return serialized
	}

	// https://infra.spec.whatwg.org/#collect-a-sequence-of-code-points
	/**
	 * @param {(char: string) => boolean} condition
	 * @param {string} input
	 * @param {{ position: number }} position
	 */
	function collectASequenceOfCodePoints (condition, input, position) {
	  // 1. Let result be the empty string.
	  let result = '';

	  // 2. While position doesn’t point past the end of input and the
	  // code point at position within input meets the condition condition:
	  while (position.position < input.length && condition(input[position.position])) {
	    // 1. Append that code point to the end of result.
	    result += input[position.position];

	    // 2. Advance position by 1.
	    position.position++;
	  }

	  // 3. Return result.
	  return result
	}

	/**
	 * A faster collectASequenceOfCodePoints that only works when comparing a single character.
	 * @param {string} char
	 * @param {string} input
	 * @param {{ position: number }} position
	 */
	function collectASequenceOfCodePointsFast (char, input, position) {
	  const idx = input.indexOf(char, position.position);
	  const start = position.position;

	  if (idx === -1) {
	    position.position = input.length;
	    return input.slice(start)
	  }

	  position.position = idx;
	  return input.slice(start, position.position)
	}

	// https://url.spec.whatwg.org/#string-percent-decode
	/** @param {string} input */
	function stringPercentDecode (input) {
	  // 1. Let bytes be the UTF-8 encoding of input.
	  const bytes = encoder.encode(input);

	  // 2. Return the percent-decoding of bytes.
	  return percentDecode(bytes)
	}

	/**
	 * @param {number} byte
	 */
	function isHexCharByte (byte) {
	  // 0-9 A-F a-f
	  return (byte >= 0x30 && byte <= 0x39) || (byte >= 0x41 && byte <= 0x46) || (byte >= 0x61 && byte <= 0x66)
	}

	/**
	 * @param {number} byte
	 */
	function hexByteToNumber (byte) {
	  return (
	    // 0-9
	    byte >= 0x30 && byte <= 0x39
	      ? (byte - 48)
	    // Convert to uppercase
	    // ((byte & 0xDF) - 65) + 10
	      : ((byte & 0xDF) - 55)
	  )
	}

	// https://url.spec.whatwg.org/#percent-decode
	/** @param {Uint8Array} input */
	function percentDecode (input) {
	  const length = input.length;
	  // 1. Let output be an empty byte sequence.
	  /** @type {Uint8Array} */
	  const output = new Uint8Array(length);
	  let j = 0;
	  // 2. For each byte byte in input:
	  for (let i = 0; i < length; ++i) {
	    const byte = input[i];

	    // 1. If byte is not 0x25 (%), then append byte to output.
	    if (byte !== 0x25) {
	      output[j++] = byte;

	    // 2. Otherwise, if byte is 0x25 (%) and the next two bytes
	    // after byte in input are not in the ranges
	    // 0x30 (0) to 0x39 (9), 0x41 (A) to 0x46 (F),
	    // and 0x61 (a) to 0x66 (f), all inclusive, append byte
	    // to output.
	    } else if (
	      byte === 0x25 &&
	      !(isHexCharByte(input[i + 1]) && isHexCharByte(input[i + 2]))
	    ) {
	      output[j++] = 0x25;

	    // 3. Otherwise:
	    } else {
	      // 1. Let bytePoint be the two bytes after byte in input,
	      // decoded, and then interpreted as hexadecimal number.
	      // 2. Append a byte whose value is bytePoint to output.
	      output[j++] = (hexByteToNumber(input[i + 1]) << 4) | hexByteToNumber(input[i + 2]);

	      // 3. Skip the next two bytes in input.
	      i += 2;
	    }
	  }

	  // 3. Return output.
	  return length === j ? output : output.subarray(0, j)
	}

	// https://mimesniff.spec.whatwg.org/#parse-a-mime-type
	/** @param {string} input */
	function parseMIMEType (input) {
	  // 1. Remove any leading and trailing HTTP whitespace
	  // from input.
	  input = removeHTTPWhitespace(input, true, true);

	  // 2. Let position be a position variable for input,
	  // initially pointing at the start of input.
	  const position = { position: 0 };

	  // 3. Let type be the result of collecting a sequence
	  // of code points that are not U+002F (/) from
	  // input, given position.
	  const type = collectASequenceOfCodePointsFast(
	    '/',
	    input,
	    position
	  );

	  // 4. If type is the empty string or does not solely
	  // contain HTTP token code points, then return failure.
	  // https://mimesniff.spec.whatwg.org/#http-token-code-point
	  if (type.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(type)) {
	    return 'failure'
	  }

	  // 5. If position is past the end of input, then return
	  // failure
	  if (position.position > input.length) {
	    return 'failure'
	  }

	  // 6. Advance position by 1. (This skips past U+002F (/).)
	  position.position++;

	  // 7. Let subtype be the result of collecting a sequence of
	  // code points that are not U+003B (;) from input, given
	  // position.
	  let subtype = collectASequenceOfCodePointsFast(
	    ';',
	    input,
	    position
	  );

	  // 8. Remove any trailing HTTP whitespace from subtype.
	  subtype = removeHTTPWhitespace(subtype, false, true);

	  // 9. If subtype is the empty string or does not solely
	  // contain HTTP token code points, then return failure.
	  if (subtype.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(subtype)) {
	    return 'failure'
	  }

	  const typeLowercase = type.toLowerCase();
	  const subtypeLowercase = subtype.toLowerCase();

	  // 10. Let mimeType be a new MIME type record whose type
	  // is type, in ASCII lowercase, and subtype is subtype,
	  // in ASCII lowercase.
	  // https://mimesniff.spec.whatwg.org/#mime-type
	  const mimeType = {
	    type: typeLowercase,
	    subtype: subtypeLowercase,
	    /** @type {Map<string, string>} */
	    parameters: new Map(),
	    // https://mimesniff.spec.whatwg.org/#mime-type-essence
	    essence: `${typeLowercase}/${subtypeLowercase}`
	  };

	  // 11. While position is not past the end of input:
	  while (position.position < input.length) {
	    // 1. Advance position by 1. (This skips past U+003B (;).)
	    position.position++;

	    // 2. Collect a sequence of code points that are HTTP
	    // whitespace from input given position.
	    collectASequenceOfCodePoints(
	      // https://fetch.spec.whatwg.org/#http-whitespace
	      char => HTTP_WHITESPACE_REGEX.test(char),
	      input,
	      position
	    );

	    // 3. Let parameterName be the result of collecting a
	    // sequence of code points that are not U+003B (;)
	    // or U+003D (=) from input, given position.
	    let parameterName = collectASequenceOfCodePoints(
	      (char) => char !== ';' && char !== '=',
	      input,
	      position
	    );

	    // 4. Set parameterName to parameterName, in ASCII
	    // lowercase.
	    parameterName = parameterName.toLowerCase();

	    // 5. If position is not past the end of input, then:
	    if (position.position < input.length) {
	      // 1. If the code point at position within input is
	      // U+003B (;), then continue.
	      if (input[position.position] === ';') {
	        continue
	      }

	      // 2. Advance position by 1. (This skips past U+003D (=).)
	      position.position++;
	    }

	    // 6. If position is past the end of input, then break.
	    if (position.position > input.length) {
	      break
	    }

	    // 7. Let parameterValue be null.
	    let parameterValue = null;

	    // 8. If the code point at position within input is
	    // U+0022 ("), then:
	    if (input[position.position] === '"') {
	      // 1. Set parameterValue to the result of collecting
	      // an HTTP quoted string from input, given position
	      // and the extract-value flag.
	      parameterValue = collectAnHTTPQuotedString(input, position, true);

	      // 2. Collect a sequence of code points that are not
	      // U+003B (;) from input, given position.
	      collectASequenceOfCodePointsFast(
	        ';',
	        input,
	        position
	      );

	    // 9. Otherwise:
	    } else {
	      // 1. Set parameterValue to the result of collecting
	      // a sequence of code points that are not U+003B (;)
	      // from input, given position.
	      parameterValue = collectASequenceOfCodePointsFast(
	        ';',
	        input,
	        position
	      );

	      // 2. Remove any trailing HTTP whitespace from parameterValue.
	      parameterValue = removeHTTPWhitespace(parameterValue, false, true);

	      // 3. If parameterValue is the empty string, then continue.
	      if (parameterValue.length === 0) {
	        continue
	      }
	    }

	    // 10. If all of the following are true
	    // - parameterName is not the empty string
	    // - parameterName solely contains HTTP token code points
	    // - parameterValue solely contains HTTP quoted-string token code points
	    // - mimeType’s parameters[parameterName] does not exist
	    // then set mimeType’s parameters[parameterName] to parameterValue.
	    if (
	      parameterName.length !== 0 &&
	      HTTP_TOKEN_CODEPOINTS.test(parameterName) &&
	      (parameterValue.length === 0 || HTTP_QUOTED_STRING_TOKENS.test(parameterValue)) &&
	      !mimeType.parameters.has(parameterName)
	    ) {
	      mimeType.parameters.set(parameterName, parameterValue);
	    }
	  }

	  // 12. Return mimeType.
	  return mimeType
	}

	// https://infra.spec.whatwg.org/#forgiving-base64-decode
	/** @param {string} data */
	function forgivingBase64 (data) {
	  // 1. Remove all ASCII whitespace from data.
	  data = data.replace(ASCII_WHITESPACE_REPLACE_REGEX, '');  // eslint-disable-line

	  let dataLength = data.length;
	  // 2. If data’s code point length divides by 4 leaving
	  // no remainder, then:
	  if (dataLength % 4 === 0) {
	    // 1. If data ends with one or two U+003D (=) code points,
	    // then remove them from data.
	    if (data.charCodeAt(dataLength - 1) === 0x003D) {
	      --dataLength;
	      if (data.charCodeAt(dataLength - 1) === 0x003D) {
	        --dataLength;
	      }
	    }
	  }

	  // 3. If data’s code point length divides by 4 leaving
	  // a remainder of 1, then return failure.
	  if (dataLength % 4 === 1) {
	    return 'failure'
	  }

	  // 4. If data contains a code point that is not one of
	  //  U+002B (+)
	  //  U+002F (/)
	  //  ASCII alphanumeric
	  // then return failure.
	  if (/[^+/0-9A-Za-z]/.test(data.length === dataLength ? data : data.substring(0, dataLength))) {
	    return 'failure'
	  }

	  const buffer = Buffer.from(data, 'base64');
	  return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength)
	}

	// https://fetch.spec.whatwg.org/#collect-an-http-quoted-string
	// tests: https://fetch.spec.whatwg.org/#example-http-quoted-string
	/**
	 * @param {string} input
	 * @param {{ position: number }} position
	 * @param {boolean?} extractValue
	 */
	function collectAnHTTPQuotedString (input, position, extractValue) {
	  // 1. Let positionStart be position.
	  const positionStart = position.position;

	  // 2. Let value be the empty string.
	  let value = '';

	  // 3. Assert: the code point at position within input
	  // is U+0022 (").
	  assert(input[position.position] === '"');

	  // 4. Advance position by 1.
	  position.position++;

	  // 5. While true:
	  while (true) {
	    // 1. Append the result of collecting a sequence of code points
	    // that are not U+0022 (") or U+005C (\) from input, given
	    // position, to value.
	    value += collectASequenceOfCodePoints(
	      (char) => char !== '"' && char !== '\\',
	      input,
	      position
	    );

	    // 2. If position is past the end of input, then break.
	    if (position.position >= input.length) {
	      break
	    }

	    // 3. Let quoteOrBackslash be the code point at position within
	    // input.
	    const quoteOrBackslash = input[position.position];

	    // 4. Advance position by 1.
	    position.position++;

	    // 5. If quoteOrBackslash is U+005C (\), then:
	    if (quoteOrBackslash === '\\') {
	      // 1. If position is past the end of input, then append
	      // U+005C (\) to value and break.
	      if (position.position >= input.length) {
	        value += '\\';
	        break
	      }

	      // 2. Append the code point at position within input to value.
	      value += input[position.position];

	      // 3. Advance position by 1.
	      position.position++;

	    // 6. Otherwise:
	    } else {
	      // 1. Assert: quoteOrBackslash is U+0022 (").
	      assert(quoteOrBackslash === '"');

	      // 2. Break.
	      break
	    }
	  }

	  // 6. If the extract-value flag is set, then return value.
	  if (extractValue) {
	    return value
	  }

	  // 7. Return the code points from positionStart to position,
	  // inclusive, within input.
	  return input.slice(positionStart, position.position)
	}

	/**
	 * @see https://mimesniff.spec.whatwg.org/#serialize-a-mime-type
	 */
	function serializeAMimeType (mimeType) {
	  assert(mimeType !== 'failure');
	  const { parameters, essence } = mimeType;

	  // 1. Let serialization be the concatenation of mimeType’s
	  //    type, U+002F (/), and mimeType’s subtype.
	  let serialization = essence;

	  // 2. For each name → value of mimeType’s parameters:
	  for (let [name, value] of parameters.entries()) {
	    // 1. Append U+003B (;) to serialization.
	    serialization += ';';

	    // 2. Append name to serialization.
	    serialization += name;

	    // 3. Append U+003D (=) to serialization.
	    serialization += '=';

	    // 4. If value does not solely contain HTTP token code
	    //    points or value is the empty string, then:
	    if (!HTTP_TOKEN_CODEPOINTS.test(value)) {
	      // 1. Precede each occurrence of U+0022 (") or
	      //    U+005C (\) in value with U+005C (\).
	      value = value.replace(/(\\|")/g, '\\$1');

	      // 2. Prepend U+0022 (") to value.
	      value = '"' + value;

	      // 3. Append U+0022 (") to value.
	      value += '"';
	    }

	    // 5. Append value to serialization.
	    serialization += value;
	  }

	  // 3. Return serialization.
	  return serialization
	}

	/**
	 * @see https://fetch.spec.whatwg.org/#http-whitespace
	 * @param {number} char
	 */
	function isHTTPWhiteSpace (char) {
	  // "\r\n\t "
	  return char === 0x00d || char === 0x00a || char === 0x009 || char === 0x020
	}

	/**
	 * @see https://fetch.spec.whatwg.org/#http-whitespace
	 * @param {string} str
	 * @param {boolean} [leading=true]
	 * @param {boolean} [trailing=true]
	 */
	function removeHTTPWhitespace (str, leading = true, trailing = true) {
	  return removeChars(str, leading, trailing, isHTTPWhiteSpace)
	}

	/**
	 * @see https://infra.spec.whatwg.org/#ascii-whitespace
	 * @param {number} char
	 */
	function isASCIIWhitespace (char) {
	  // "\r\n\t\f "
	  return char === 0x00d || char === 0x00a || char === 0x009 || char === 0x00c || char === 0x020
	}

	/**
	 * @see https://infra.spec.whatwg.org/#strip-leading-and-trailing-ascii-whitespace
	 * @param {string} str
	 * @param {boolean} [leading=true]
	 * @param {boolean} [trailing=true]
	 */
	function removeASCIIWhitespace (str, leading = true, trailing = true) {
	  return removeChars(str, leading, trailing, isASCIIWhitespace)
	}

	/**
	 * @param {string} str
	 * @param {boolean} leading
	 * @param {boolean} trailing
	 * @param {(charCode: number) => boolean} predicate
	 * @returns
	 */
	function removeChars (str, leading, trailing, predicate) {
	  let lead = 0;
	  let trail = str.length - 1;

	  if (leading) {
	    while (lead < str.length && predicate(str.charCodeAt(lead))) lead++;
	  }

	  if (trailing) {
	    while (trail > 0 && predicate(str.charCodeAt(trail))) trail--;
	  }

	  return lead === 0 && trail === str.length - 1 ? str : str.slice(lead, trail + 1)
	}

	/**
	 * @see https://infra.spec.whatwg.org/#isomorphic-decode
	 * @param {Uint8Array} input
	 * @returns {string}
	 */
	function isomorphicDecode (input) {
	  // 1. To isomorphic decode a byte sequence input, return a string whose code point
	  //    length is equal to input’s length and whose code points have the same values
	  //    as the values of input’s bytes, in the same order.
	  const length = input.length;
	  if ((2 << 15) - 1 > length) {
	    return String.fromCharCode.apply(null, input)
	  }
	  let result = ''; let i = 0;
	  let addition = (2 << 15) - 1;
	  while (i < length) {
	    if (i + addition > length) {
	      addition = length - i;
	    }
	    result += String.fromCharCode.apply(null, input.subarray(i, i += addition));
	  }
	  return result
	}

	/**
	 * @see https://mimesniff.spec.whatwg.org/#minimize-a-supported-mime-type
	 * @param {Exclude<ReturnType<typeof parseMIMEType>, 'failure'>} mimeType
	 */
	function minimizeSupportedMimeType (mimeType) {
	  switch (mimeType.essence) {
	    case 'application/ecmascript':
	    case 'application/javascript':
	    case 'application/x-ecmascript':
	    case 'application/x-javascript':
	    case 'text/ecmascript':
	    case 'text/javascript':
	    case 'text/javascript1.0':
	    case 'text/javascript1.1':
	    case 'text/javascript1.2':
	    case 'text/javascript1.3':
	    case 'text/javascript1.4':
	    case 'text/javascript1.5':
	    case 'text/jscript':
	    case 'text/livescript':
	    case 'text/x-ecmascript':
	    case 'text/x-javascript':
	      // 1. If mimeType is a JavaScript MIME type, then return "text/javascript".
	      return 'text/javascript'
	    case 'application/json':
	    case 'text/json':
	      // 2. If mimeType is a JSON MIME type, then return "application/json".
	      return 'application/json'
	    case 'image/svg+xml':
	      // 3. If mimeType’s essence is "image/svg+xml", then return "image/svg+xml".
	      return 'image/svg+xml'
	    case 'text/xml':
	    case 'application/xml':
	      // 4. If mimeType is an XML MIME type, then return "application/xml".
	      return 'application/xml'
	  }

	  // 2. If mimeType is a JSON MIME type, then return "application/json".
	  if (mimeType.subtype.endsWith('+json')) {
	    return 'application/json'
	  }

	  // 4. If mimeType is an XML MIME type, then return "application/xml".
	  if (mimeType.subtype.endsWith('+xml')) {
	    return 'application/xml'
	  }

	  // 5. If mimeType is supported by the user agent, then return mimeType’s essence.
	  // Technically, node doesn't support any mimetypes.

	  // 6. Return the empty string.
	  return ''
	}

	dataUrl = {
	  dataURLProcessor,
	  URLSerializer,
	  collectASequenceOfCodePoints,
	  collectASequenceOfCodePointsFast,
	  stringPercentDecode,
	  parseMIMEType,
	  collectAnHTTPQuotedString,
	  serializeAMimeType,
	  removeChars,
	  removeHTTPWhitespace,
	  minimizeSupportedMimeType,
	  HTTP_TOKEN_CODEPOINTS,
	  isomorphicDecode
	};
	return dataUrl;
}

var webidl_1;
var hasRequiredWebidl;

function requireWebidl () {
	if (hasRequiredWebidl) return webidl_1;
	hasRequiredWebidl = 1;

	const { types, inspect } = require$$0$a;
	const { toUSVString } = requireUtil$8();

	/** @type {import('../../../types/webidl').Webidl} */
	const webidl = {};
	webidl.converters = {};
	webidl.util = {};
	webidl.errors = {};

	webidl.errors.exception = function (message) {
	  return new TypeError(`${message.header}: ${message.message}`)
	};

	webidl.errors.conversionFailed = function (context) {
	  const plural = context.types.length === 1 ? '' : ' one of';
	  const message =
	    `${context.argument} could not be converted to` +
	    `${plural}: ${context.types.join(', ')}.`;

	  return webidl.errors.exception({
	    header: context.prefix,
	    message
	  })
	};

	webidl.errors.invalidArgument = function (context) {
	  return webidl.errors.exception({
	    header: context.prefix,
	    message: `"${context.value}" is an invalid ${context.type}.`
	  })
	};

	// https://webidl.spec.whatwg.org/#implements
	webidl.brandCheck = function (V, I, opts) {
	  if (opts?.strict !== false) {
	    if (!(V instanceof I)) {
	      const err = new TypeError('Illegal invocation');
	      err.code = 'ERR_INVALID_THIS'; // node compat.
	      throw err
	    }
	  } else {
	    if (V?.[Symbol.toStringTag] !== I.prototype[Symbol.toStringTag]) {
	      const err = new TypeError('Illegal invocation');
	      err.code = 'ERR_INVALID_THIS'; // node compat.
	      throw err
	    }
	  }
	};

	webidl.argumentLengthCheck = function ({ length }, min, ctx) {
	  if (length < min) {
	    throw webidl.errors.exception({
	      message: `${min} argument${min !== 1 ? 's' : ''} required, ` +
	               `but${length ? ' only' : ''} ${length} found.`,
	      header: ctx
	    })
	  }
	};

	webidl.illegalConstructor = function () {
	  throw webidl.errors.exception({
	    header: 'TypeError',
	    message: 'Illegal constructor'
	  })
	};

	// https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values
	webidl.util.Type = function (V) {
	  switch (typeof V) {
	    case 'undefined': return 'Undefined'
	    case 'boolean': return 'Boolean'
	    case 'string': return 'String'
	    case 'symbol': return 'Symbol'
	    case 'number': return 'Number'
	    case 'bigint': return 'BigInt'
	    case 'function':
	    case 'object': {
	      if (V === null) {
	        return 'Null'
	      }

	      return 'Object'
	    }
	  }
	};

	// https://webidl.spec.whatwg.org/#abstract-opdef-converttoint
	webidl.util.ConvertToInt = function (V, bitLength, signedness, opts) {
	  let upperBound;
	  let lowerBound;

	  // 1. If bitLength is 64, then:
	  if (bitLength === 64) {
	    // 1. Let upperBound be 2^53 − 1.
	    upperBound = Math.pow(2, 53) - 1;

	    // 2. If signedness is "unsigned", then let lowerBound be 0.
	    if (signedness === 'unsigned') {
	      lowerBound = 0;
	    } else {
	      // 3. Otherwise let lowerBound be −2^53 + 1.
	      lowerBound = Math.pow(-2, 53) + 1;
	    }
	  } else if (signedness === 'unsigned') {
	    // 2. Otherwise, if signedness is "unsigned", then:

	    // 1. Let lowerBound be 0.
	    lowerBound = 0;

	    // 2. Let upperBound be 2^bitLength − 1.
	    upperBound = Math.pow(2, bitLength) - 1;
	  } else {
	    // 3. Otherwise:

	    // 1. Let lowerBound be -2^bitLength − 1.
	    lowerBound = Math.pow(-2, bitLength) - 1;

	    // 2. Let upperBound be 2^bitLength − 1 − 1.
	    upperBound = Math.pow(2, bitLength - 1) - 1;
	  }

	  // 4. Let x be ? ToNumber(V).
	  let x = Number(V);

	  // 5. If x is −0, then set x to +0.
	  if (x === 0) {
	    x = 0;
	  }

	  // 6. If the conversion is to an IDL type associated
	  //    with the [EnforceRange] extended attribute, then:
	  if (opts?.enforceRange === true) {
	    // 1. If x is NaN, +∞, or −∞, then throw a TypeError.
	    if (
	      Number.isNaN(x) ||
	      x === Number.POSITIVE_INFINITY ||
	      x === Number.NEGATIVE_INFINITY
	    ) {
	      throw webidl.errors.exception({
	        header: 'Integer conversion',
	        message: `Could not convert ${webidl.util.Stringify(V)} to an integer.`
	      })
	    }

	    // 2. Set x to IntegerPart(x).
	    x = webidl.util.IntegerPart(x);

	    // 3. If x < lowerBound or x > upperBound, then
	    //    throw a TypeError.
	    if (x < lowerBound || x > upperBound) {
	      throw webidl.errors.exception({
	        header: 'Integer conversion',
	        message: `Value must be between ${lowerBound}-${upperBound}, got ${x}.`
	      })
	    }

	    // 4. Return x.
	    return x
	  }

	  // 7. If x is not NaN and the conversion is to an IDL
	  //    type associated with the [Clamp] extended
	  //    attribute, then:
	  if (!Number.isNaN(x) && opts?.clamp === true) {
	    // 1. Set x to min(max(x, lowerBound), upperBound).
	    x = Math.min(Math.max(x, lowerBound), upperBound);

	    // 2. Round x to the nearest integer, choosing the
	    //    even integer if it lies halfway between two,
	    //    and choosing +0 rather than −0.
	    if (Math.floor(x) % 2 === 0) {
	      x = Math.floor(x);
	    } else {
	      x = Math.ceil(x);
	    }

	    // 3. Return x.
	    return x
	  }

	  // 8. If x is NaN, +0, +∞, or −∞, then return +0.
	  if (
	    Number.isNaN(x) ||
	    (x === 0 && Object.is(0, x)) ||
	    x === Number.POSITIVE_INFINITY ||
	    x === Number.NEGATIVE_INFINITY
	  ) {
	    return 0
	  }

	  // 9. Set x to IntegerPart(x).
	  x = webidl.util.IntegerPart(x);

	  // 10. Set x to x modulo 2^bitLength.
	  x = x % Math.pow(2, bitLength);

	  // 11. If signedness is "signed" and x ≥ 2^bitLength − 1,
	  //    then return x − 2^bitLength.
	  if (signedness === 'signed' && x >= Math.pow(2, bitLength) - 1) {
	    return x - Math.pow(2, bitLength)
	  }

	  // 12. Otherwise, return x.
	  return x
	};

	// https://webidl.spec.whatwg.org/#abstract-opdef-integerpart
	webidl.util.IntegerPart = function (n) {
	  // 1. Let r be floor(abs(n)).
	  const r = Math.floor(Math.abs(n));

	  // 2. If n < 0, then return -1 × r.
	  if (n < 0) {
	    return -1 * r
	  }

	  // 3. Otherwise, return r.
	  return r
	};

	webidl.util.Stringify = function (V) {
	  const type = webidl.util.Type(V);

	  switch (type) {
	    case 'Symbol':
	      return `Symbol(${V.description})`
	    case 'Object':
	      return inspect(V)
	    case 'String':
	      return `"${V}"`
	    default:
	      return `${V}`
	  }
	};

	// https://webidl.spec.whatwg.org/#es-sequence
	webidl.sequenceConverter = function (converter) {
	  return (V, prefix, argument, Iterable) => {
	    // 1. If Type(V) is not Object, throw a TypeError.
	    if (webidl.util.Type(V) !== 'Object') {
	      throw webidl.errors.exception({
	        header: prefix,
	        message: `${argument} (${webidl.util.Stringify(V)}) is not iterable.`
	      })
	    }

	    // 2. Let method be ? GetMethod(V, @@iterator).
	    /** @type {Generator} */
	    const method = typeof Iterable === 'function' ? Iterable() : V?.[Symbol.iterator]?.();
	    const seq = [];
	    let index = 0;

	    // 3. If method is undefined, throw a TypeError.
	    if (
	      method === undefined ||
	      typeof method.next !== 'function'
	    ) {
	      throw webidl.errors.exception({
	        header: prefix,
	        message: `${argument} is not iterable.`
	      })
	    }

	    // https://webidl.spec.whatwg.org/#create-sequence-from-iterable
	    while (true) {
	      const { done, value } = method.next();

	      if (done) {
	        break
	      }

	      seq.push(converter(value, prefix, `${argument}[${index++}]`));
	    }

	    return seq
	  }
	};

	// https://webidl.spec.whatwg.org/#es-to-record
	webidl.recordConverter = function (keyConverter, valueConverter) {
	  return (O, prefix, argument) => {
	    // 1. If Type(O) is not Object, throw a TypeError.
	    if (webidl.util.Type(O) !== 'Object') {
	      throw webidl.errors.exception({
	        header: prefix,
	        message: `${argument} ("${webidl.util.Type(O)}") is not an Object.`
	      })
	    }

	    // 2. Let result be a new empty instance of record<K, V>.
	    const result = {};

	    if (!types.isProxy(O)) {
	      // 1. Let desc be ? O.[[GetOwnProperty]](key).
	      const keys = [...Object.getOwnPropertyNames(O), ...Object.getOwnPropertySymbols(O)];

	      for (const key of keys) {
	        // 1. Let typedKey be key converted to an IDL value of type K.
	        const typedKey = keyConverter(key, prefix, argument);

	        // 2. Let value be ? Get(O, key).
	        // 3. Let typedValue be value converted to an IDL value of type V.
	        const typedValue = valueConverter(O[key], prefix, argument);

	        // 4. Set result[typedKey] to typedValue.
	        result[typedKey] = typedValue;
	      }

	      // 5. Return result.
	      return result
	    }

	    // 3. Let keys be ? O.[[OwnPropertyKeys]]().
	    const keys = Reflect.ownKeys(O);

	    // 4. For each key of keys.
	    for (const key of keys) {
	      // 1. Let desc be ? O.[[GetOwnProperty]](key).
	      const desc = Reflect.getOwnPropertyDescriptor(O, key);

	      // 2. If desc is not undefined and desc.[[Enumerable]] is true:
	      if (desc?.enumerable) {
	        // 1. Let typedKey be key converted to an IDL value of type K.
	        const typedKey = keyConverter(key, prefix, argument);

	        // 2. Let value be ? Get(O, key).
	        // 3. Let typedValue be value converted to an IDL value of type V.
	        const typedValue = valueConverter(O[key], prefix, argument);

	        // 4. Set result[typedKey] to typedValue.
	        result[typedKey] = typedValue;
	      }
	    }

	    // 5. Return result.
	    return result
	  }
	};

	webidl.interfaceConverter = function (i) {
	  return (V, prefix, argument, opts) => {
	    if (opts?.strict !== false && !(V instanceof i)) {
	      throw webidl.errors.exception({
	        header: prefix,
	        message: `Expected ${argument} ("${webidl.util.Stringify(V)}") to be an instance of ${i.name}.`
	      })
	    }

	    return V
	  }
	};

	webidl.dictionaryConverter = function (converters) {
	  return (dictionary, prefix, argument) => {
	    const type = webidl.util.Type(dictionary);
	    const dict = {};

	    if (type === 'Null' || type === 'Undefined') {
	      return dict
	    } else if (type !== 'Object') {
	      throw webidl.errors.exception({
	        header: prefix,
	        message: `Expected ${dictionary} to be one of: Null, Undefined, Object.`
	      })
	    }

	    for (const options of converters) {
	      const { key, defaultValue, required, converter } = options;

	      if (required === true) {
	        if (!Object.hasOwn(dictionary, key)) {
	          throw webidl.errors.exception({
	            header: prefix,
	            message: `Missing required key "${key}".`
	          })
	        }
	      }

	      let value = dictionary[key];
	      const hasDefault = Object.hasOwn(options, 'defaultValue');

	      // Only use defaultValue if value is undefined and
	      // a defaultValue options was provided.
	      if (hasDefault && value !== null) {
	        value ??= defaultValue();
	      }

	      // A key can be optional and have no default value.
	      // When this happens, do not perform a conversion,
	      // and do not assign the key a value.
	      if (required || hasDefault || value !== undefined) {
	        value = converter(value, prefix, `${argument}.${key}`);

	        if (
	          options.allowedValues &&
	          !options.allowedValues.includes(value)
	        ) {
	          throw webidl.errors.exception({
	            header: prefix,
	            message: `${value} is not an accepted type. Expected one of ${options.allowedValues.join(', ')}.`
	          })
	        }

	        dict[key] = value;
	      }
	    }

	    return dict
	  }
	};

	webidl.nullableConverter = function (converter) {
	  return (V, prefix, argument) => {
	    if (V === null) {
	      return V
	    }

	    return converter(V, prefix, argument)
	  }
	};

	// https://webidl.spec.whatwg.org/#es-DOMString
	webidl.converters.DOMString = function (V, prefix, argument, opts) {
	  // 1. If V is null and the conversion is to an IDL type
	  //    associated with the [LegacyNullToEmptyString]
	  //    extended attribute, then return the DOMString value
	  //    that represents the empty string.
	  if (V === null && opts?.legacyNullToEmptyString) {
	    return ''
	  }

	  // 2. Let x be ? ToString(V).
	  if (typeof V === 'symbol') {
	    throw webidl.errors.exception({
	      header: prefix,
	      message: `${argument} is a symbol, which cannot be converted to a DOMString.`
	    })
	  }

	  // 3. Return the IDL DOMString value that represents the
	  //    same sequence of code units as the one the
	  //    ECMAScript String value x represents.
	  return String(V)
	};

	// https://webidl.spec.whatwg.org/#es-ByteString
	webidl.converters.ByteString = function (V, prefix, argument) {
	  // 1. Let x be ? ToString(V).
	  // Note: DOMString converter perform ? ToString(V)
	  const x = webidl.converters.DOMString(V, prefix, argument);

	  // 2. If the value of any element of x is greater than
	  //    255, then throw a TypeError.
	  for (let index = 0; index < x.length; index++) {
	    if (x.charCodeAt(index) > 255) {
	      throw new TypeError(
	        'Cannot convert argument to a ByteString because the character at ' +
	        `index ${index} has a value of ${x.charCodeAt(index)} which is greater than 255.`
	      )
	    }
	  }

	  // 3. Return an IDL ByteString value whose length is the
	  //    length of x, and where the value of each element is
	  //    the value of the corresponding element of x.
	  return x
	};

	// https://webidl.spec.whatwg.org/#es-USVString
	// TODO: rewrite this so we can control the errors thrown
	webidl.converters.USVString = toUSVString;

	// https://webidl.spec.whatwg.org/#es-boolean
	webidl.converters.boolean = function (V) {
	  // 1. Let x be the result of computing ToBoolean(V).
	  const x = Boolean(V);

	  // 2. Return the IDL boolean value that is the one that represents
	  //    the same truth value as the ECMAScript Boolean value x.
	  return x
	};

	// https://webidl.spec.whatwg.org/#es-any
	webidl.converters.any = function (V) {
	  return V
	};

	// https://webidl.spec.whatwg.org/#es-long-long
	webidl.converters['long long'] = function (V, prefix, argument) {
	  // 1. Let x be ? ConvertToInt(V, 64, "signed").
	  const x = webidl.util.ConvertToInt(V, 64, 'signed', undefined, prefix, argument);

	  // 2. Return the IDL long long value that represents
	  //    the same numeric value as x.
	  return x
	};

	// https://webidl.spec.whatwg.org/#es-unsigned-long-long
	webidl.converters['unsigned long long'] = function (V, prefix, argument) {
	  // 1. Let x be ? ConvertToInt(V, 64, "unsigned").
	  const x = webidl.util.ConvertToInt(V, 64, 'unsigned', undefined, prefix, argument);

	  // 2. Return the IDL unsigned long long value that
	  //    represents the same numeric value as x.
	  return x
	};

	// https://webidl.spec.whatwg.org/#es-unsigned-long
	webidl.converters['unsigned long'] = function (V, prefix, argument) {
	  // 1. Let x be ? ConvertToInt(V, 32, "unsigned").
	  const x = webidl.util.ConvertToInt(V, 32, 'unsigned', undefined, prefix, argument);

	  // 2. Return the IDL unsigned long value that
	  //    represents the same numeric value as x.
	  return x
	};

	// https://webidl.spec.whatwg.org/#es-unsigned-short
	webidl.converters['unsigned short'] = function (V, prefix, argument, opts) {
	  // 1. Let x be ? ConvertToInt(V, 16, "unsigned").
	  const x = webidl.util.ConvertToInt(V, 16, 'unsigned', opts, prefix, argument);

	  // 2. Return the IDL unsigned short value that represents
	  //    the same numeric value as x.
	  return x
	};

	// https://webidl.spec.whatwg.org/#idl-ArrayBuffer
	webidl.converters.ArrayBuffer = function (V, prefix, argument, opts) {
	  // 1. If Type(V) is not Object, or V does not have an
	  //    [[ArrayBufferData]] internal slot, then throw a
	  //    TypeError.
	  // see: https://tc39.es/ecma262/#sec-properties-of-the-arraybuffer-instances
	  // see: https://tc39.es/ecma262/#sec-properties-of-the-sharedarraybuffer-instances
	  if (
	    webidl.util.Type(V) !== 'Object' ||
	    !types.isAnyArrayBuffer(V)
	  ) {
	    throw webidl.errors.conversionFailed({
	      prefix,
	      argument: `${argument} ("${webidl.util.Stringify(V)}")`,
	      types: ['ArrayBuffer']
	    })
	  }

	  // 2. If the conversion is not to an IDL type associated
	  //    with the [AllowShared] extended attribute, and
	  //    IsSharedArrayBuffer(V) is true, then throw a
	  //    TypeError.
	  if (opts?.allowShared === false && types.isSharedArrayBuffer(V)) {
	    throw webidl.errors.exception({
	      header: 'ArrayBuffer',
	      message: 'SharedArrayBuffer is not allowed.'
	    })
	  }

	  // 3. If the conversion is not to an IDL type associated
	  //    with the [AllowResizable] extended attribute, and
	  //    IsResizableArrayBuffer(V) is true, then throw a
	  //    TypeError.
	  if (V.resizable || V.growable) {
	    throw webidl.errors.exception({
	      header: 'ArrayBuffer',
	      message: 'Received a resizable ArrayBuffer.'
	    })
	  }

	  // 4. Return the IDL ArrayBuffer value that is a
	  //    reference to the same object as V.
	  return V
	};

	webidl.converters.TypedArray = function (V, T, prefix, name, opts) {
	  // 1. Let T be the IDL type V is being converted to.

	  // 2. If Type(V) is not Object, or V does not have a
	  //    [[TypedArrayName]] internal slot with a value
	  //    equal to T’s name, then throw a TypeError.
	  if (
	    webidl.util.Type(V) !== 'Object' ||
	    !types.isTypedArray(V) ||
	    V.constructor.name !== T.name
	  ) {
	    throw webidl.errors.conversionFailed({
	      prefix,
	      argument: `${name} ("${webidl.util.Stringify(V)}")`,
	      types: [T.name]
	    })
	  }

	  // 3. If the conversion is not to an IDL type associated
	  //    with the [AllowShared] extended attribute, and
	  //    IsSharedArrayBuffer(V.[[ViewedArrayBuffer]]) is
	  //    true, then throw a TypeError.
	  if (opts?.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {
	    throw webidl.errors.exception({
	      header: 'ArrayBuffer',
	      message: 'SharedArrayBuffer is not allowed.'
	    })
	  }

	  // 4. If the conversion is not to an IDL type associated
	  //    with the [AllowResizable] extended attribute, and
	  //    IsResizableArrayBuffer(V.[[ViewedArrayBuffer]]) is
	  //    true, then throw a TypeError.
	  if (V.buffer.resizable || V.buffer.growable) {
	    throw webidl.errors.exception({
	      header: 'ArrayBuffer',
	      message: 'Received a resizable ArrayBuffer.'
	    })
	  }

	  // 5. Return the IDL value of type T that is a reference
	  //    to the same object as V.
	  return V
	};

	webidl.converters.DataView = function (V, prefix, name, opts) {
	  // 1. If Type(V) is not Object, or V does not have a
	  //    [[DataView]] internal slot, then throw a TypeError.
	  if (webidl.util.Type(V) !== 'Object' || !types.isDataView(V)) {
	    throw webidl.errors.exception({
	      header: prefix,
	      message: `${name} is not a DataView.`
	    })
	  }

	  // 2. If the conversion is not to an IDL type associated
	  //    with the [AllowShared] extended attribute, and
	  //    IsSharedArrayBuffer(V.[[ViewedArrayBuffer]]) is true,
	  //    then throw a TypeError.
	  if (opts?.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {
	    throw webidl.errors.exception({
	      header: 'ArrayBuffer',
	      message: 'SharedArrayBuffer is not allowed.'
	    })
	  }

	  // 3. If the conversion is not to an IDL type associated
	  //    with the [AllowResizable] extended attribute, and
	  //    IsResizableArrayBuffer(V.[[ViewedArrayBuffer]]) is
	  //    true, then throw a TypeError.
	  if (V.buffer.resizable || V.buffer.growable) {
	    throw webidl.errors.exception({
	      header: 'ArrayBuffer',
	      message: 'Received a resizable ArrayBuffer.'
	    })
	  }

	  // 4. Return the IDL DataView value that is a reference
	  //    to the same object as V.
	  return V
	};

	// https://webidl.spec.whatwg.org/#BufferSource
	webidl.converters.BufferSource = function (V, prefix, name, opts) {
	  if (types.isAnyArrayBuffer(V)) {
	    return webidl.converters.ArrayBuffer(V, prefix, name, { ...opts, allowShared: false })
	  }

	  if (types.isTypedArray(V)) {
	    return webidl.converters.TypedArray(V, V.constructor, prefix, name, { ...opts, allowShared: false })
	  }

	  if (types.isDataView(V)) {
	    return webidl.converters.DataView(V, prefix, name, { ...opts, allowShared: false })
	  }

	  throw webidl.errors.conversionFailed({
	    prefix,
	    argument: `${name} ("${webidl.util.Stringify(V)}")`,
	    types: ['BufferSource']
	  })
	};

	webidl.converters['sequence<ByteString>'] = webidl.sequenceConverter(
	  webidl.converters.ByteString
	);

	webidl.converters['sequence<sequence<ByteString>>'] = webidl.sequenceConverter(
	  webidl.converters['sequence<ByteString>']
	);

	webidl.converters['record<ByteString, ByteString>'] = webidl.recordConverter(
	  webidl.converters.ByteString,
	  webidl.converters.ByteString
	);

	webidl_1 = {
	  webidl
	};
	return webidl_1;
}

var util$6;
var hasRequiredUtil$7;

function requireUtil$7 () {
	if (hasRequiredUtil$7) return util$6;
	hasRequiredUtil$7 = 1;

	const { Transform } = require$$0$8;
	const zlib = require$$1$8;
	const { redirectStatusSet, referrerPolicySet: referrerPolicyTokens, badPortsSet } = requireConstants$4();
	const { getGlobalOrigin } = requireGlobal$1();
	const { collectASequenceOfCodePoints, collectAnHTTPQuotedString, removeChars, parseMIMEType } = requireDataUrl();
	const { performance } = require$$5$4;
	const { isBlobLike, ReadableStreamFrom, isValidHTTPToken, normalizedMethodRecordsBase } = requireUtil$8();
	const assert = require$$0$7;
	const { isUint8Array } = require$$8;
	const { webidl } = requireWebidl();

	let supportedHashes = [];

	// https://nodejs.org/api/crypto.html#determining-if-crypto-support-is-unavailable
	/** @type {import('crypto')} */
	let crypto;
	try {
	  crypto = require('node:crypto');
	  const possibleRelevantHashes = ['sha256', 'sha384', 'sha512'];
	  supportedHashes = crypto.getHashes().filter((hash) => possibleRelevantHashes.includes(hash));
	/* c8 ignore next 3 */
	} catch {

	}

	function responseURL (response) {
	  // https://fetch.spec.whatwg.org/#responses
	  // A response has an associated URL. It is a pointer to the last URL
	  // in response’s URL list and null if response’s URL list is empty.
	  const urlList = response.urlList;
	  const length = urlList.length;
	  return length === 0 ? null : urlList[length - 1].toString()
	}

	// https://fetch.spec.whatwg.org/#concept-response-location-url
	function responseLocationURL (response, requestFragment) {
	  // 1. If response’s status is not a redirect status, then return null.
	  if (!redirectStatusSet.has(response.status)) {
	    return null
	  }

	  // 2. Let location be the result of extracting header list values given
	  // `Location` and response’s header list.
	  let location = response.headersList.get('location', true);

	  // 3. If location is a header value, then set location to the result of
	  //    parsing location with response’s URL.
	  if (location !== null && isValidHeaderValue(location)) {
	    if (!isValidEncodedURL(location)) {
	      // Some websites respond location header in UTF-8 form without encoding them as ASCII
	      // and major browsers redirect them to correctly UTF-8 encoded addresses.
	      // Here, we handle that behavior in the same way.
	      location = normalizeBinaryStringToUtf8(location);
	    }
	    location = new URL(location, responseURL(response));
	  }

	  // 4. If location is a URL whose fragment is null, then set location’s
	  // fragment to requestFragment.
	  if (location && !location.hash) {
	    location.hash = requestFragment;
	  }

	  // 5. Return location.
	  return location
	}

	/**
	 * @see https://www.rfc-editor.org/rfc/rfc1738#section-2.2
	 * @param {string} url
	 * @returns {boolean}
	 */
	function isValidEncodedURL (url) {
	  for (let i = 0; i < url.length; ++i) {
	    const code = url.charCodeAt(i);

	    if (
	      code > 0x7E || // Non-US-ASCII + DEL
	      code < 0x20 // Control characters NUL - US
	    ) {
	      return false
	    }
	  }
	  return true
	}

	/**
	 * If string contains non-ASCII characters, assumes it's UTF-8 encoded and decodes it.
	 * Since UTF-8 is a superset of ASCII, this will work for ASCII strings as well.
	 * @param {string} value
	 * @returns {string}
	 */
	function normalizeBinaryStringToUtf8 (value) {
	  return Buffer.from(value, 'binary').toString('utf8')
	}

	/** @returns {URL} */
	function requestCurrentURL (request) {
	  return request.urlList[request.urlList.length - 1]
	}

	function requestBadPort (request) {
	  // 1. Let url be request’s current URL.
	  const url = requestCurrentURL(request);

	  // 2. If url’s scheme is an HTTP(S) scheme and url’s port is a bad port,
	  // then return blocked.
	  if (urlIsHttpHttpsScheme(url) && badPortsSet.has(url.port)) {
	    return 'blocked'
	  }

	  // 3. Return allowed.
	  return 'allowed'
	}

	function isErrorLike (object) {
	  return object instanceof Error || (
	    object?.constructor?.name === 'Error' ||
	    object?.constructor?.name === 'DOMException'
	  )
	}

	// Check whether |statusText| is a ByteString and
	// matches the Reason-Phrase token production.
	// RFC 2616: https://tools.ietf.org/html/rfc2616
	// RFC 7230: https://tools.ietf.org/html/rfc7230
	// "reason-phrase = *( HTAB / SP / VCHAR / obs-text )"
	// https://github.com/chromium/chromium/blob/94.0.4604.1/third_party/blink/renderer/core/fetch/response.cc#L116
	function isValidReasonPhrase (statusText) {
	  for (let i = 0; i < statusText.length; ++i) {
	    const c = statusText.charCodeAt(i);
	    if (
	      !(
	        (
	          c === 0x09 || // HTAB
	          (c >= 0x20 && c <= 0x7e) || // SP / VCHAR
	          (c >= 0x80 && c <= 0xff)
	        ) // obs-text
	      )
	    ) {
	      return false
	    }
	  }
	  return true
	}

	/**
	 * @see https://fetch.spec.whatwg.org/#header-name
	 * @param {string} potentialValue
	 */
	const isValidHeaderName = isValidHTTPToken;

	/**
	 * @see https://fetch.spec.whatwg.org/#header-value
	 * @param {string} potentialValue
	 */
	function isValidHeaderValue (potentialValue) {
	  // - Has no leading or trailing HTTP tab or space bytes.
	  // - Contains no 0x00 (NUL) or HTTP newline bytes.
	  return (
	    potentialValue[0] === '\t' ||
	    potentialValue[0] === ' ' ||
	    potentialValue[potentialValue.length - 1] === '\t' ||
	    potentialValue[potentialValue.length - 1] === ' ' ||
	    potentialValue.includes('\n') ||
	    potentialValue.includes('\r') ||
	    potentialValue.includes('\0')
	  ) === false
	}

	// https://w3c.github.io/webappsec-referrer-policy/#set-requests-referrer-policy-on-redirect
	function setRequestReferrerPolicyOnRedirect (request, actualResponse) {
	  //  Given a request request and a response actualResponse, this algorithm
	  //  updates request’s referrer policy according to the Referrer-Policy
	  //  header (if any) in actualResponse.

	  // 1. Let policy be the result of executing § 8.1 Parse a referrer policy
	  // from a Referrer-Policy header on actualResponse.

	  // 8.1 Parse a referrer policy from a Referrer-Policy header
	  // 1. Let policy-tokens be the result of extracting header list values given `Referrer-Policy` and response’s header list.
	  const { headersList } = actualResponse;
	  // 2. Let policy be the empty string.
	  // 3. For each token in policy-tokens, if token is a referrer policy and token is not the empty string, then set policy to token.
	  // 4. Return policy.
	  const policyHeader = (headersList.get('referrer-policy', true) ?? '').split(',');

	  // Note: As the referrer-policy can contain multiple policies
	  // separated by comma, we need to loop through all of them
	  // and pick the first valid one.
	  // Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy#specify_a_fallback_policy
	  let policy = '';
	  if (policyHeader.length > 0) {
	    // The right-most policy takes precedence.
	    // The left-most policy is the fallback.
	    for (let i = policyHeader.length; i !== 0; i--) {
	      const token = policyHeader[i - 1].trim();
	      if (referrerPolicyTokens.has(token)) {
	        policy = token;
	        break
	      }
	    }
	  }

	  // 2. If policy is not the empty string, then set request’s referrer policy to policy.
	  if (policy !== '') {
	    request.referrerPolicy = policy;
	  }
	}

	// https://fetch.spec.whatwg.org/#cross-origin-resource-policy-check
	function crossOriginResourcePolicyCheck () {
	  // TODO
	  return 'allowed'
	}

	// https://fetch.spec.whatwg.org/#concept-cors-check
	function corsCheck () {
	  // TODO
	  return 'success'
	}

	// https://fetch.spec.whatwg.org/#concept-tao-check
	function TAOCheck () {
	  // TODO
	  return 'success'
	}

	function appendFetchMetadata (httpRequest) {
	  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-dest-header
	  //  TODO

	  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-mode-header

	  //  1. Assert: r’s url is a potentially trustworthy URL.
	  //  TODO

	  //  2. Let header be a Structured Header whose value is a token.
	  let header = null;

	  //  3. Set header’s value to r’s mode.
	  header = httpRequest.mode;

	  //  4. Set a structured field value `Sec-Fetch-Mode`/header in r’s header list.
	  httpRequest.headersList.set('sec-fetch-mode', header, true);

	  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-site-header
	  //  TODO

	  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-user-header
	  //  TODO
	}

	// https://fetch.spec.whatwg.org/#append-a-request-origin-header
	function appendRequestOriginHeader (request) {
	  // 1. Let serializedOrigin be the result of byte-serializing a request origin
	  //    with request.
	  // TODO: implement "byte-serializing a request origin"
	  let serializedOrigin = request.origin;

	  // - "'client' is changed to an origin during fetching."
	  //   This doesn't happen in undici (in most cases) because undici, by default,
	  //   has no concept of origin.
	  // - request.origin can also be set to request.client.origin (client being
	  //   an environment settings object), which is undefined without using
	  //   setGlobalOrigin.
	  if (serializedOrigin === 'client' || serializedOrigin === undefined) {
	    return
	  }

	  // 2. If request’s response tainting is "cors" or request’s mode is "websocket",
	  //    then append (`Origin`, serializedOrigin) to request’s header list.
	  // 3. Otherwise, if request’s method is neither `GET` nor `HEAD`, then:
	  if (request.responseTainting === 'cors' || request.mode === 'websocket') {
	    request.headersList.append('origin', serializedOrigin, true);
	  } else if (request.method !== 'GET' && request.method !== 'HEAD') {
	    // 1. Switch on request’s referrer policy:
	    switch (request.referrerPolicy) {
	      case 'no-referrer':
	        // Set serializedOrigin to `null`.
	        serializedOrigin = null;
	        break
	      case 'no-referrer-when-downgrade':
	      case 'strict-origin':
	      case 'strict-origin-when-cross-origin':
	        // If request’s origin is a tuple origin, its scheme is "https", and
	        // request’s current URL’s scheme is not "https", then set
	        // serializedOrigin to `null`.
	        if (request.origin && urlHasHttpsScheme(request.origin) && !urlHasHttpsScheme(requestCurrentURL(request))) {
	          serializedOrigin = null;
	        }
	        break
	      case 'same-origin':
	        // If request’s origin is not same origin with request’s current URL’s
	        // origin, then set serializedOrigin to `null`.
	        if (!sameOrigin(request, requestCurrentURL(request))) {
	          serializedOrigin = null;
	        }
	        break
	        // Do nothing.
	    }

	    // 2. Append (`Origin`, serializedOrigin) to request’s header list.
	    request.headersList.append('origin', serializedOrigin, true);
	  }
	}

	// https://w3c.github.io/hr-time/#dfn-coarsen-time
	function coarsenTime (timestamp, crossOriginIsolatedCapability) {
	  // TODO
	  return timestamp
	}

	// https://fetch.spec.whatwg.org/#clamp-and-coarsen-connection-timing-info
	function clampAndCoarsenConnectionTimingInfo (connectionTimingInfo, defaultStartTime, crossOriginIsolatedCapability) {
	  if (!connectionTimingInfo?.startTime || connectionTimingInfo.startTime < defaultStartTime) {
	    return {
	      domainLookupStartTime: defaultStartTime,
	      domainLookupEndTime: defaultStartTime,
	      connectionStartTime: defaultStartTime,
	      connectionEndTime: defaultStartTime,
	      secureConnectionStartTime: defaultStartTime,
	      ALPNNegotiatedProtocol: connectionTimingInfo?.ALPNNegotiatedProtocol
	    }
	  }

	  return {
	    domainLookupStartTime: coarsenTime(connectionTimingInfo.domainLookupStartTime),
	    domainLookupEndTime: coarsenTime(connectionTimingInfo.domainLookupEndTime),
	    connectionStartTime: coarsenTime(connectionTimingInfo.connectionStartTime),
	    connectionEndTime: coarsenTime(connectionTimingInfo.connectionEndTime),
	    secureConnectionStartTime: coarsenTime(connectionTimingInfo.secureConnectionStartTime),
	    ALPNNegotiatedProtocol: connectionTimingInfo.ALPNNegotiatedProtocol
	  }
	}

	// https://w3c.github.io/hr-time/#dfn-coarsened-shared-current-time
	function coarsenedSharedCurrentTime (crossOriginIsolatedCapability) {
	  return coarsenTime(performance.now())
	}

	// https://fetch.spec.whatwg.org/#create-an-opaque-timing-info
	function createOpaqueTimingInfo (timingInfo) {
	  return {
	    startTime: timingInfo.startTime ?? 0,
	    redirectStartTime: 0,
	    redirectEndTime: 0,
	    postRedirectStartTime: timingInfo.startTime ?? 0,
	    finalServiceWorkerStartTime: 0,
	    finalNetworkResponseStartTime: 0,
	    finalNetworkRequestStartTime: 0,
	    endTime: 0,
	    encodedBodySize: 0,
	    decodedBodySize: 0,
	    finalConnectionTimingInfo: null
	  }
	}

	// https://html.spec.whatwg.org/multipage/origin.html#policy-container
	function makePolicyContainer () {
	  // Note: the fetch spec doesn't make use of embedder policy or CSP list
	  return {
	    referrerPolicy: 'strict-origin-when-cross-origin'
	  }
	}

	// https://html.spec.whatwg.org/multipage/origin.html#clone-a-policy-container
	function clonePolicyContainer (policyContainer) {
	  return {
	    referrerPolicy: policyContainer.referrerPolicy
	  }
	}

	// https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer
	function determineRequestsReferrer (request) {
	  // 1. Let policy be request's referrer policy.
	  const policy = request.referrerPolicy;

	  // Note: policy cannot (shouldn't) be null or an empty string.
	  assert(policy);

	  // 2. Let environment be request’s client.

	  let referrerSource = null;

	  // 3. Switch on request’s referrer:
	  if (request.referrer === 'client') {
	    // Note: node isn't a browser and doesn't implement document/iframes,
	    // so we bypass this step and replace it with our own.

	    const globalOrigin = getGlobalOrigin();

	    if (!globalOrigin || globalOrigin.origin === 'null') {
	      return 'no-referrer'
	    }

	    // note: we need to clone it as it's mutated
	    referrerSource = new URL(globalOrigin);
	  } else if (request.referrer instanceof URL) {
	    // Let referrerSource be request’s referrer.
	    referrerSource = request.referrer;
	  }

	  // 4. Let request’s referrerURL be the result of stripping referrerSource for
	  //    use as a referrer.
	  let referrerURL = stripURLForReferrer(referrerSource);

	  // 5. Let referrerOrigin be the result of stripping referrerSource for use as
	  //    a referrer, with the origin-only flag set to true.
	  const referrerOrigin = stripURLForReferrer(referrerSource, true);

	  // 6. If the result of serializing referrerURL is a string whose length is
	  //    greater than 4096, set referrerURL to referrerOrigin.
	  if (referrerURL.toString().length > 4096) {
	    referrerURL = referrerOrigin;
	  }

	  const areSameOrigin = sameOrigin(request, referrerURL);
	  const isNonPotentiallyTrustWorthy = isURLPotentiallyTrustworthy(referrerURL) &&
	    !isURLPotentiallyTrustworthy(request.url);

	  // 8. Execute the switch statements corresponding to the value of policy:
	  switch (policy) {
	    case 'origin': return referrerOrigin != null ? referrerOrigin : stripURLForReferrer(referrerSource, true)
	    case 'unsafe-url': return referrerURL
	    case 'same-origin':
	      return areSameOrigin ? referrerOrigin : 'no-referrer'
	    case 'origin-when-cross-origin':
	      return areSameOrigin ? referrerURL : referrerOrigin
	    case 'strict-origin-when-cross-origin': {
	      const currentURL = requestCurrentURL(request);

	      // 1. If the origin of referrerURL and the origin of request’s current
	      //    URL are the same, then return referrerURL.
	      if (sameOrigin(referrerURL, currentURL)) {
	        return referrerURL
	      }

	      // 2. If referrerURL is a potentially trustworthy URL and request’s
	      //    current URL is not a potentially trustworthy URL, then return no
	      //    referrer.
	      if (isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(currentURL)) {
	        return 'no-referrer'
	      }

	      // 3. Return referrerOrigin.
	      return referrerOrigin
	    }
	    case 'strict-origin': // eslint-disable-line
	      /**
	         * 1. If referrerURL is a potentially trustworthy URL and
	         * request’s current URL is not a potentially trustworthy URL,
	         * then return no referrer.
	         * 2. Return referrerOrigin
	        */
	    case 'no-referrer-when-downgrade': // eslint-disable-line
	      /**
	       * 1. If referrerURL is a potentially trustworthy URL and
	       * request’s current URL is not a potentially trustworthy URL,
	       * then return no referrer.
	       * 2. Return referrerOrigin
	      */

	    default: // eslint-disable-line
	      return isNonPotentiallyTrustWorthy ? 'no-referrer' : referrerOrigin
	  }
	}

	/**
	 * @see https://w3c.github.io/webappsec-referrer-policy/#strip-url
	 * @param {URL} url
	 * @param {boolean|undefined} originOnly
	 */
	function stripURLForReferrer (url, originOnly) {
	  // 1. Assert: url is a URL.
	  assert(url instanceof URL);

	  url = new URL(url);

	  // 2. If url’s scheme is a local scheme, then return no referrer.
	  if (url.protocol === 'file:' || url.protocol === 'about:' || url.protocol === 'blank:') {
	    return 'no-referrer'
	  }

	  // 3. Set url’s username to the empty string.
	  url.username = '';

	  // 4. Set url’s password to the empty string.
	  url.password = '';

	  // 5. Set url’s fragment to null.
	  url.hash = '';

	  // 6. If the origin-only flag is true, then:
	  if (originOnly) {
	    // 1. Set url’s path to « the empty string ».
	    url.pathname = '';

	    // 2. Set url’s query to null.
	    url.search = '';
	  }

	  // 7. Return url.
	  return url
	}

	function isURLPotentiallyTrustworthy (url) {
	  if (!(url instanceof URL)) {
	    return false
	  }

	  // If child of about, return true
	  if (url.href === 'about:blank' || url.href === 'about:srcdoc') {
	    return true
	  }

	  // If scheme is data, return true
	  if (url.protocol === 'data:') return true

	  // If file, return true
	  if (url.protocol === 'file:') return true

	  return isOriginPotentiallyTrustworthy(url.origin)

	  function isOriginPotentiallyTrustworthy (origin) {
	    // If origin is explicitly null, return false
	    if (origin == null || origin === 'null') return false

	    const originAsURL = new URL(origin);

	    // If secure, return true
	    if (originAsURL.protocol === 'https:' || originAsURL.protocol === 'wss:') {
	      return true
	    }

	    // If localhost or variants, return true
	    if (/^127(?:\.[0-9]+){0,2}\.[0-9]+$|^\[(?:0*:)*?:?0*1\]$/.test(originAsURL.hostname) ||
	     (originAsURL.hostname === 'localhost' || originAsURL.hostname.includes('localhost.')) ||
	     (originAsURL.hostname.endsWith('.localhost'))) {
	      return true
	    }

	    // If any other, return false
	    return false
	  }
	}

	/**
	 * @see https://w3c.github.io/webappsec-subresource-integrity/#does-response-match-metadatalist
	 * @param {Uint8Array} bytes
	 * @param {string} metadataList
	 */
	function bytesMatch (bytes, metadataList) {
	  // If node is not built with OpenSSL support, we cannot check
	  // a request's integrity, so allow it by default (the spec will
	  // allow requests if an invalid hash is given, as precedence).
	  /* istanbul ignore if: only if node is built with --without-ssl */
	  if (crypto === undefined) {
	    return true
	  }

	  // 1. Let parsedMetadata be the result of parsing metadataList.
	  const parsedMetadata = parseMetadata(metadataList);

	  // 2. If parsedMetadata is no metadata, return true.
	  if (parsedMetadata === 'no metadata') {
	    return true
	  }

	  // 3. If response is not eligible for integrity validation, return false.
	  // TODO

	  // 4. If parsedMetadata is the empty set, return true.
	  if (parsedMetadata.length === 0) {
	    return true
	  }

	  // 5. Let metadata be the result of getting the strongest
	  //    metadata from parsedMetadata.
	  const strongest = getStrongestMetadata(parsedMetadata);
	  const metadata = filterMetadataListByAlgorithm(parsedMetadata, strongest);

	  // 6. For each item in metadata:
	  for (const item of metadata) {
	    // 1. Let algorithm be the alg component of item.
	    const algorithm = item.algo;

	    // 2. Let expectedValue be the val component of item.
	    const expectedValue = item.hash;

	    // See https://github.com/web-platform-tests/wpt/commit/e4c5cc7a5e48093220528dfdd1c4012dc3837a0e
	    // "be liberal with padding". This is annoying, and it's not even in the spec.

	    // 3. Let actualValue be the result of applying algorithm to bytes.
	    let actualValue = crypto.createHash(algorithm).update(bytes).digest('base64');

	    if (actualValue[actualValue.length - 1] === '=') {
	      if (actualValue[actualValue.length - 2] === '=') {
	        actualValue = actualValue.slice(0, -2);
	      } else {
	        actualValue = actualValue.slice(0, -1);
	      }
	    }

	    // 4. If actualValue is a case-sensitive match for expectedValue,
	    //    return true.
	    if (compareBase64Mixed(actualValue, expectedValue)) {
	      return true
	    }
	  }

	  // 7. Return false.
	  return false
	}

	// https://w3c.github.io/webappsec-subresource-integrity/#grammardef-hash-with-options
	// https://www.w3.org/TR/CSP2/#source-list-syntax
	// https://www.rfc-editor.org/rfc/rfc5234#appendix-B.1
	const parseHashWithOptions = /(?<algo>sha256|sha384|sha512)-((?<hash>[A-Za-z0-9+/]+|[A-Za-z0-9_-]+)={0,2}(?:\s|$)( +[!-~]*)?)?/i;

	/**
	 * @see https://w3c.github.io/webappsec-subresource-integrity/#parse-metadata
	 * @param {string} metadata
	 */
	function parseMetadata (metadata) {
	  // 1. Let result be the empty set.
	  /** @type {{ algo: string, hash: string }[]} */
	  const result = [];

	  // 2. Let empty be equal to true.
	  let empty = true;

	  // 3. For each token returned by splitting metadata on spaces:
	  for (const token of metadata.split(' ')) {
	    // 1. Set empty to false.
	    empty = false;

	    // 2. Parse token as a hash-with-options.
	    const parsedToken = parseHashWithOptions.exec(token);

	    // 3. If token does not parse, continue to the next token.
	    if (
	      parsedToken === null ||
	      parsedToken.groups === undefined ||
	      parsedToken.groups.algo === undefined
	    ) {
	      // Note: Chromium blocks the request at this point, but Firefox
	      // gives a warning that an invalid integrity was given. The
	      // correct behavior is to ignore these, and subsequently not
	      // check the integrity of the resource.
	      continue
	    }

	    // 4. Let algorithm be the hash-algo component of token.
	    const algorithm = parsedToken.groups.algo.toLowerCase();

	    // 5. If algorithm is a hash function recognized by the user
	    //    agent, add the parsed token to result.
	    if (supportedHashes.includes(algorithm)) {
	      result.push(parsedToken.groups);
	    }
	  }

	  // 4. Return no metadata if empty is true, otherwise return result.
	  if (empty === true) {
	    return 'no metadata'
	  }

	  return result
	}

	/**
	 * @param {{ algo: 'sha256' | 'sha384' | 'sha512' }[]} metadataList
	 */
	function getStrongestMetadata (metadataList) {
	  // Let algorithm be the algo component of the first item in metadataList.
	  // Can be sha256
	  let algorithm = metadataList[0].algo;
	  // If the algorithm is sha512, then it is the strongest
	  // and we can return immediately
	  if (algorithm[3] === '5') {
	    return algorithm
	  }

	  for (let i = 1; i < metadataList.length; ++i) {
	    const metadata = metadataList[i];
	    // If the algorithm is sha512, then it is the strongest
	    // and we can break the loop immediately
	    if (metadata.algo[3] === '5') {
	      algorithm = 'sha512';
	      break
	    // If the algorithm is sha384, then a potential sha256 or sha384 is ignored
	    } else if (algorithm[3] === '3') {
	      continue
	    // algorithm is sha256, check if algorithm is sha384 and if so, set it as
	    // the strongest
	    } else if (metadata.algo[3] === '3') {
	      algorithm = 'sha384';
	    }
	  }
	  return algorithm
	}

	function filterMetadataListByAlgorithm (metadataList, algorithm) {
	  if (metadataList.length === 1) {
	    return metadataList
	  }

	  let pos = 0;
	  for (let i = 0; i < metadataList.length; ++i) {
	    if (metadataList[i].algo === algorithm) {
	      metadataList[pos++] = metadataList[i];
	    }
	  }

	  metadataList.length = pos;

	  return metadataList
	}

	/**
	 * Compares two base64 strings, allowing for base64url
	 * in the second string.
	 *
	* @param {string} actualValue always base64
	 * @param {string} expectedValue base64 or base64url
	 * @returns {boolean}
	 */
	function compareBase64Mixed (actualValue, expectedValue) {
	  if (actualValue.length !== expectedValue.length) {
	    return false
	  }
	  for (let i = 0; i < actualValue.length; ++i) {
	    if (actualValue[i] !== expectedValue[i]) {
	      if (
	        (actualValue[i] === '+' && expectedValue[i] === '-') ||
	        (actualValue[i] === '/' && expectedValue[i] === '_')
	      ) {
	        continue
	      }
	      return false
	    }
	  }

	  return true
	}

	// https://w3c.github.io/webappsec-upgrade-insecure-requests/#upgrade-request
	function tryUpgradeRequestToAPotentiallyTrustworthyURL (request) {
	  // TODO
	}

	/**
	 * @link {https://html.spec.whatwg.org/multipage/origin.html#same-origin}
	 * @param {URL} A
	 * @param {URL} B
	 */
	function sameOrigin (A, B) {
	  // 1. If A and B are the same opaque origin, then return true.
	  if (A.origin === B.origin && A.origin === 'null') {
	    return true
	  }

	  // 2. If A and B are both tuple origins and their schemes,
	  //    hosts, and port are identical, then return true.
	  if (A.protocol === B.protocol && A.hostname === B.hostname && A.port === B.port) {
	    return true
	  }

	  // 3. Return false.
	  return false
	}

	function createDeferredPromise () {
	  let res;
	  let rej;
	  const promise = new Promise((resolve, reject) => {
	    res = resolve;
	    rej = reject;
	  });

	  return { promise, resolve: res, reject: rej }
	}

	function isAborted (fetchParams) {
	  return fetchParams.controller.state === 'aborted'
	}

	function isCancelled (fetchParams) {
	  return fetchParams.controller.state === 'aborted' ||
	    fetchParams.controller.state === 'terminated'
	}

	/**
	 * @see https://fetch.spec.whatwg.org/#concept-method-normalize
	 * @param {string} method
	 */
	function normalizeMethod (method) {
	  return normalizedMethodRecordsBase[method.toLowerCase()] ?? method
	}

	// https://infra.spec.whatwg.org/#serialize-a-javascript-value-to-a-json-string
	function serializeJavascriptValueToJSONString (value) {
	  // 1. Let result be ? Call(%JSON.stringify%, undefined, « value »).
	  const result = JSON.stringify(value);

	  // 2. If result is undefined, then throw a TypeError.
	  if (result === undefined) {
	    throw new TypeError('Value is not JSON serializable')
	  }

	  // 3. Assert: result is a string.
	  assert(typeof result === 'string');

	  // 4. Return result.
	  return result
	}

	// https://tc39.es/ecma262/#sec-%25iteratorprototype%25-object
	const esIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));

	/**
	 * @see https://webidl.spec.whatwg.org/#dfn-iterator-prototype-object
	 * @param {string} name name of the instance
	 * @param {symbol} kInternalIterator
	 * @param {string | number} [keyIndex]
	 * @param {string | number} [valueIndex]
	 */
	function createIterator (name, kInternalIterator, keyIndex = 0, valueIndex = 1) {
	  class FastIterableIterator {
	    /** @type {any} */
	    #target
	    /** @type {'key' | 'value' | 'key+value'} */
	    #kind
	    /** @type {number} */
	    #index

	    /**
	     * @see https://webidl.spec.whatwg.org/#dfn-default-iterator-object
	     * @param {unknown} target
	     * @param {'key' | 'value' | 'key+value'} kind
	     */
	    constructor (target, kind) {
	      this.#target = target;
	      this.#kind = kind;
	      this.#index = 0;
	    }

	    next () {
	      // 1. Let interface be the interface for which the iterator prototype object exists.
	      // 2. Let thisValue be the this value.
	      // 3. Let object be ? ToObject(thisValue).
	      // 4. If object is a platform object, then perform a security
	      //    check, passing:
	      // 5. If object is not a default iterator object for interface,
	      //    then throw a TypeError.
	      if (typeof this !== 'object' || this === null || !(#target in this)) {
	        throw new TypeError(
	          `'next' called on an object that does not implement interface ${name} Iterator.`
	        )
	      }

	      // 6. Let index be object’s index.
	      // 7. Let kind be object’s kind.
	      // 8. Let values be object’s target's value pairs to iterate over.
	      const index = this.#index;
	      const values = this.#target[kInternalIterator];

	      // 9. Let len be the length of values.
	      const len = values.length;

	      // 10. If index is greater than or equal to len, then return
	      //     CreateIterResultObject(undefined, true).
	      if (index >= len) {
	        return {
	          value: undefined,
	          done: true
	        }
	      }

	      // 11. Let pair be the entry in values at index index.
	      const { [keyIndex]: key, [valueIndex]: value } = values[index];

	      // 12. Set object’s index to index + 1.
	      this.#index = index + 1;

	      // 13. Return the iterator result for pair and kind.

	      // https://webidl.spec.whatwg.org/#iterator-result

	      // 1. Let result be a value determined by the value of kind:
	      let result;
	      switch (this.#kind) {
	        case 'key':
	          // 1. Let idlKey be pair’s key.
	          // 2. Let key be the result of converting idlKey to an
	          //    ECMAScript value.
	          // 3. result is key.
	          result = key;
	          break
	        case 'value':
	          // 1. Let idlValue be pair’s value.
	          // 2. Let value be the result of converting idlValue to
	          //    an ECMAScript value.
	          // 3. result is value.
	          result = value;
	          break
	        case 'key+value':
	          // 1. Let idlKey be pair’s key.
	          // 2. Let idlValue be pair’s value.
	          // 3. Let key be the result of converting idlKey to an
	          //    ECMAScript value.
	          // 4. Let value be the result of converting idlValue to
	          //    an ECMAScript value.
	          // 5. Let array be ! ArrayCreate(2).
	          // 6. Call ! CreateDataProperty(array, "0", key).
	          // 7. Call ! CreateDataProperty(array, "1", value).
	          // 8. result is array.
	          result = [key, value];
	          break
	      }

	      // 2. Return CreateIterResultObject(result, false).
	      return {
	        value: result,
	        done: false
	      }
	    }
	  }

	  // https://webidl.spec.whatwg.org/#dfn-iterator-prototype-object
	  // @ts-ignore
	  delete FastIterableIterator.prototype.constructor;

	  Object.setPrototypeOf(FastIterableIterator.prototype, esIteratorPrototype);

	  Object.defineProperties(FastIterableIterator.prototype, {
	    [Symbol.toStringTag]: {
	      writable: false,
	      enumerable: false,
	      configurable: true,
	      value: `${name} Iterator`
	    },
	    next: { writable: true, enumerable: true, configurable: true }
	  });

	  /**
	   * @param {unknown} target
	   * @param {'key' | 'value' | 'key+value'} kind
	   * @returns {IterableIterator<any>}
	   */
	  return function (target, kind) {
	    return new FastIterableIterator(target, kind)
	  }
	}

	/**
	 * @see https://webidl.spec.whatwg.org/#dfn-iterator-prototype-object
	 * @param {string} name name of the instance
	 * @param {any} object class
	 * @param {symbol} kInternalIterator
	 * @param {string | number} [keyIndex]
	 * @param {string | number} [valueIndex]
	 */
	function iteratorMixin (name, object, kInternalIterator, keyIndex = 0, valueIndex = 1) {
	  const makeIterator = createIterator(name, kInternalIterator, keyIndex, valueIndex);

	  const properties = {
	    keys: {
	      writable: true,
	      enumerable: true,
	      configurable: true,
	      value: function keys () {
	        webidl.brandCheck(this, object);
	        return makeIterator(this, 'key')
	      }
	    },
	    values: {
	      writable: true,
	      enumerable: true,
	      configurable: true,
	      value: function values () {
	        webidl.brandCheck(this, object);
	        return makeIterator(this, 'value')
	      }
	    },
	    entries: {
	      writable: true,
	      enumerable: true,
	      configurable: true,
	      value: function entries () {
	        webidl.brandCheck(this, object);
	        return makeIterator(this, 'key+value')
	      }
	    },
	    forEach: {
	      writable: true,
	      enumerable: true,
	      configurable: true,
	      value: function forEach (callbackfn, thisArg = globalThis) {
	        webidl.brandCheck(this, object);
	        webidl.argumentLengthCheck(arguments, 1, `${name}.forEach`);
	        if (typeof callbackfn !== 'function') {
	          throw new TypeError(
	            `Failed to execute 'forEach' on '${name}': parameter 1 is not of type 'Function'.`
	          )
	        }
	        for (const { 0: key, 1: value } of makeIterator(this, 'key+value')) {
	          callbackfn.call(thisArg, value, key, this);
	        }
	      }
	    }
	  };

	  return Object.defineProperties(object.prototype, {
	    ...properties,
	    [Symbol.iterator]: {
	      writable: true,
	      enumerable: false,
	      configurable: true,
	      value: properties.entries.value
	    }
	  })
	}

	/**
	 * @see https://fetch.spec.whatwg.org/#body-fully-read
	 */
	async function fullyReadBody (body, processBody, processBodyError) {
	  // 1. If taskDestination is null, then set taskDestination to
	  //    the result of starting a new parallel queue.

	  // 2. Let successSteps given a byte sequence bytes be to queue a
	  //    fetch task to run processBody given bytes, with taskDestination.
	  const successSteps = processBody;

	  // 3. Let errorSteps be to queue a fetch task to run processBodyError,
	  //    with taskDestination.
	  const errorSteps = processBodyError;

	  // 4. Let reader be the result of getting a reader for body’s stream.
	  //    If that threw an exception, then run errorSteps with that
	  //    exception and return.
	  let reader;

	  try {
	    reader = body.stream.getReader();
	  } catch (e) {
	    errorSteps(e);
	    return
	  }

	  // 5. Read all bytes from reader, given successSteps and errorSteps.
	  try {
	    successSteps(await readAllBytes(reader));
	  } catch (e) {
	    errorSteps(e);
	  }
	}

	function isReadableStreamLike (stream) {
	  return stream instanceof ReadableStream || (
	    stream[Symbol.toStringTag] === 'ReadableStream' &&
	    typeof stream.tee === 'function'
	  )
	}

	/**
	 * @param {ReadableStreamController<Uint8Array>} controller
	 */
	function readableStreamClose (controller) {
	  try {
	    controller.close();
	    controller.byobRequest?.respond(0);
	  } catch (err) {
	    // TODO: add comment explaining why this error occurs.
	    if (!err.message.includes('Controller is already closed') && !err.message.includes('ReadableStream is already closed')) {
	      throw err
	    }
	  }
	}

	const invalidIsomorphicEncodeValueRegex = /[^\x00-\xFF]/; // eslint-disable-line

	/**
	 * @see https://infra.spec.whatwg.org/#isomorphic-encode
	 * @param {string} input
	 */
	function isomorphicEncode (input) {
	  // 1. Assert: input contains no code points greater than U+00FF.
	  assert(!invalidIsomorphicEncodeValueRegex.test(input));

	  // 2. Return a byte sequence whose length is equal to input’s code
	  //    point length and whose bytes have the same values as the
	  //    values of input’s code points, in the same order
	  return input
	}

	/**
	 * @see https://streams.spec.whatwg.org/#readablestreamdefaultreader-read-all-bytes
	 * @see https://streams.spec.whatwg.org/#read-loop
	 * @param {ReadableStreamDefaultReader} reader
	 */
	async function readAllBytes (reader) {
	  const bytes = [];
	  let byteLength = 0;

	  while (true) {
	    const { done, value: chunk } = await reader.read();

	    if (done) {
	      // 1. Call successSteps with bytes.
	      return Buffer.concat(bytes, byteLength)
	    }

	    // 1. If chunk is not a Uint8Array object, call failureSteps
	    //    with a TypeError and abort these steps.
	    if (!isUint8Array(chunk)) {
	      throw new TypeError('Received non-Uint8Array chunk')
	    }

	    // 2. Append the bytes represented by chunk to bytes.
	    bytes.push(chunk);
	    byteLength += chunk.length;

	    // 3. Read-loop given reader, bytes, successSteps, and failureSteps.
	  }
	}

	/**
	 * @see https://fetch.spec.whatwg.org/#is-local
	 * @param {URL} url
	 */
	function urlIsLocal (url) {
	  assert('protocol' in url); // ensure it's a url object

	  const protocol = url.protocol;

	  return protocol === 'about:' || protocol === 'blob:' || protocol === 'data:'
	}

	/**
	 * @param {string|URL} url
	 * @returns {boolean}
	 */
	function urlHasHttpsScheme (url) {
	  return (
	    (
	      typeof url === 'string' &&
	      url[5] === ':' &&
	      url[0] === 'h' &&
	      url[1] === 't' &&
	      url[2] === 't' &&
	      url[3] === 'p' &&
	      url[4] === 's'
	    ) ||
	    url.protocol === 'https:'
	  )
	}

	/**
	 * @see https://fetch.spec.whatwg.org/#http-scheme
	 * @param {URL} url
	 */
	function urlIsHttpHttpsScheme (url) {
	  assert('protocol' in url); // ensure it's a url object

	  const protocol = url.protocol;

	  return protocol === 'http:' || protocol === 'https:'
	}

	/**
	 * @see https://fetch.spec.whatwg.org/#simple-range-header-value
	 * @param {string} value
	 * @param {boolean} allowWhitespace
	 */
	function simpleRangeHeaderValue (value, allowWhitespace) {
	  // 1. Let data be the isomorphic decoding of value.
	  // Note: isomorphic decoding takes a sequence of bytes (ie. a Uint8Array) and turns it into a string,
	  // nothing more. We obviously don't need to do that if value is a string already.
	  const data = value;

	  // 2. If data does not start with "bytes", then return failure.
	  if (!data.startsWith('bytes')) {
	    return 'failure'
	  }

	  // 3. Let position be a position variable for data, initially pointing at the 5th code point of data.
	  const position = { position: 5 };

	  // 4. If allowWhitespace is true, collect a sequence of code points that are HTTP tab or space,
	  //    from data given position.
	  if (allowWhitespace) {
	    collectASequenceOfCodePoints(
	      (char) => char === '\t' || char === ' ',
	      data,
	      position
	    );
	  }

	  // 5. If the code point at position within data is not U+003D (=), then return failure.
	  if (data.charCodeAt(position.position) !== 0x3D) {
	    return 'failure'
	  }

	  // 6. Advance position by 1.
	  position.position++;

	  // 7. If allowWhitespace is true, collect a sequence of code points that are HTTP tab or space, from
	  //    data given position.
	  if (allowWhitespace) {
	    collectASequenceOfCodePoints(
	      (char) => char === '\t' || char === ' ',
	      data,
	      position
	    );
	  }

	  // 8. Let rangeStart be the result of collecting a sequence of code points that are ASCII digits,
	  //    from data given position.
	  const rangeStart = collectASequenceOfCodePoints(
	    (char) => {
	      const code = char.charCodeAt(0);

	      return code >= 0x30 && code <= 0x39
	    },
	    data,
	    position
	  );

	  // 9. Let rangeStartValue be rangeStart, interpreted as decimal number, if rangeStart is not the
	  //    empty string; otherwise null.
	  const rangeStartValue = rangeStart.length ? Number(rangeStart) : null;

	  // 10. If allowWhitespace is true, collect a sequence of code points that are HTTP tab or space,
	  //     from data given position.
	  if (allowWhitespace) {
	    collectASequenceOfCodePoints(
	      (char) => char === '\t' || char === ' ',
	      data,
	      position
	    );
	  }

	  // 11. If the code point at position within data is not U+002D (-), then return failure.
	  if (data.charCodeAt(position.position) !== 0x2D) {
	    return 'failure'
	  }

	  // 12. Advance position by 1.
	  position.position++;

	  // 13. If allowWhitespace is true, collect a sequence of code points that are HTTP tab
	  //     or space, from data given position.
	  // Note from Khafra: its the same step as in #8 again lol
	  if (allowWhitespace) {
	    collectASequenceOfCodePoints(
	      (char) => char === '\t' || char === ' ',
	      data,
	      position
	    );
	  }

	  // 14. Let rangeEnd be the result of collecting a sequence of code points that are
	  //     ASCII digits, from data given position.
	  // Note from Khafra: you wouldn't guess it, but this is also the same step as #8
	  const rangeEnd = collectASequenceOfCodePoints(
	    (char) => {
	      const code = char.charCodeAt(0);

	      return code >= 0x30 && code <= 0x39
	    },
	    data,
	    position
	  );

	  // 15. Let rangeEndValue be rangeEnd, interpreted as decimal number, if rangeEnd
	  //     is not the empty string; otherwise null.
	  // Note from Khafra: THE SAME STEP, AGAIN!!!
	  // Note: why interpret as a decimal if we only collect ascii digits?
	  const rangeEndValue = rangeEnd.length ? Number(rangeEnd) : null;

	  // 16. If position is not past the end of data, then return failure.
	  if (position.position < data.length) {
	    return 'failure'
	  }

	  // 17. If rangeEndValue and rangeStartValue are null, then return failure.
	  if (rangeEndValue === null && rangeStartValue === null) {
	    return 'failure'
	  }

	  // 18. If rangeStartValue and rangeEndValue are numbers, and rangeStartValue is
	  //     greater than rangeEndValue, then return failure.
	  // Note: ... when can they not be numbers?
	  if (rangeStartValue > rangeEndValue) {
	    return 'failure'
	  }

	  // 19. Return (rangeStartValue, rangeEndValue).
	  return { rangeStartValue, rangeEndValue }
	}

	/**
	 * @see https://fetch.spec.whatwg.org/#build-a-content-range
	 * @param {number} rangeStart
	 * @param {number} rangeEnd
	 * @param {number} fullLength
	 */
	function buildContentRange (rangeStart, rangeEnd, fullLength) {
	  // 1. Let contentRange be `bytes `.
	  let contentRange = 'bytes ';

	  // 2. Append rangeStart, serialized and isomorphic encoded, to contentRange.
	  contentRange += isomorphicEncode(`${rangeStart}`);

	  // 3. Append 0x2D (-) to contentRange.
	  contentRange += '-';

	  // 4. Append rangeEnd, serialized and isomorphic encoded to contentRange.
	  contentRange += isomorphicEncode(`${rangeEnd}`);

	  // 5. Append 0x2F (/) to contentRange.
	  contentRange += '/';

	  // 6. Append fullLength, serialized and isomorphic encoded to contentRange.
	  contentRange += isomorphicEncode(`${fullLength}`);

	  // 7. Return contentRange.
	  return contentRange
	}

	// A Stream, which pipes the response to zlib.createInflate() or
	// zlib.createInflateRaw() depending on the first byte of the Buffer.
	// If the lower byte of the first byte is 0x08, then the stream is
	// interpreted as a zlib stream, otherwise it's interpreted as a
	// raw deflate stream.
	class InflateStream extends Transform {
	  _transform (chunk, encoding, callback) {
	    if (!this._inflateStream) {
	      if (chunk.length === 0) {
	        callback();
	        return
	      }
	      this._inflateStream = (chunk[0] & 0x0F) === 0x08
	        ? zlib.createInflate()
	        : zlib.createInflateRaw();

	      this._inflateStream.on('data', this.push.bind(this));
	      this._inflateStream.on('end', () => this.push(null));
	      this._inflateStream.on('error', (err) => this.destroy(err));
	    }

	    this._inflateStream.write(chunk, encoding, callback);
	  }

	  _final (callback) {
	    if (this._inflateStream) {
	      this._inflateStream.end();
	      this._inflateStream = null;
	    }
	    callback();
	  }
	}

	function createInflate () {
	  return new InflateStream()
	}

	/**
	 * @see https://fetch.spec.whatwg.org/#concept-header-extract-mime-type
	 * @param {import('./headers').HeadersList} headers
	 */
	function extractMimeType (headers) {
	  // 1. Let charset be null.
	  let charset = null;

	  // 2. Let essence be null.
	  let essence = null;

	  // 3. Let mimeType be null.
	  let mimeType = null;

	  // 4. Let values be the result of getting, decoding, and splitting `Content-Type` from headers.
	  const values = getDecodeSplit('content-type', headers);

	  // 5. If values is null, then return failure.
	  if (values === null) {
	    return 'failure'
	  }

	  // 6. For each value of values:
	  for (const value of values) {
	    // 6.1. Let temporaryMimeType be the result of parsing value.
	    const temporaryMimeType = parseMIMEType(value);

	    // 6.2. If temporaryMimeType is failure or its essence is "*/*", then continue.
	    if (temporaryMimeType === 'failure' || temporaryMimeType.essence === '*/*') {
	      continue
	    }

	    // 6.3. Set mimeType to temporaryMimeType.
	    mimeType = temporaryMimeType;

	    // 6.4. If mimeType’s essence is not essence, then:
	    if (mimeType.essence !== essence) {
	      // 6.4.1. Set charset to null.
	      charset = null;

	      // 6.4.2. If mimeType’s parameters["charset"] exists, then set charset to
	      //        mimeType’s parameters["charset"].
	      if (mimeType.parameters.has('charset')) {
	        charset = mimeType.parameters.get('charset');
	      }

	      // 6.4.3. Set essence to mimeType’s essence.
	      essence = mimeType.essence;
	    } else if (!mimeType.parameters.has('charset') && charset !== null) {
	      // 6.5. Otherwise, if mimeType’s parameters["charset"] does not exist, and
	      //      charset is non-null, set mimeType’s parameters["charset"] to charset.
	      mimeType.parameters.set('charset', charset);
	    }
	  }

	  // 7. If mimeType is null, then return failure.
	  if (mimeType == null) {
	    return 'failure'
	  }

	  // 8. Return mimeType.
	  return mimeType
	}

	/**
	 * @see https://fetch.spec.whatwg.org/#header-value-get-decode-and-split
	 * @param {string|null} value
	 */
	function gettingDecodingSplitting (value) {
	  // 1. Let input be the result of isomorphic decoding value.
	  const input = value;

	  // 2. Let position be a position variable for input, initially pointing at the start of input.
	  const position = { position: 0 };

	  // 3. Let values be a list of strings, initially empty.
	  const values = [];

	  // 4. Let temporaryValue be the empty string.
	  let temporaryValue = '';

	  // 5. While position is not past the end of input:
	  while (position.position < input.length) {
	    // 5.1. Append the result of collecting a sequence of code points that are not U+0022 (")
	    //      or U+002C (,) from input, given position, to temporaryValue.
	    temporaryValue += collectASequenceOfCodePoints(
	      (char) => char !== '"' && char !== ',',
	      input,
	      position
	    );

	    // 5.2. If position is not past the end of input, then:
	    if (position.position < input.length) {
	      // 5.2.1. If the code point at position within input is U+0022 ("), then:
	      if (input.charCodeAt(position.position) === 0x22) {
	        // 5.2.1.1. Append the result of collecting an HTTP quoted string from input, given position, to temporaryValue.
	        temporaryValue += collectAnHTTPQuotedString(
	          input,
	          position
	        );

	        // 5.2.1.2. If position is not past the end of input, then continue.
	        if (position.position < input.length) {
	          continue
	        }
	      } else {
	        // 5.2.2. Otherwise:

	        // 5.2.2.1. Assert: the code point at position within input is U+002C (,).
	        assert(input.charCodeAt(position.position) === 0x2C);

	        // 5.2.2.2. Advance position by 1.
	        position.position++;
	      }
	    }

	    // 5.3. Remove all HTTP tab or space from the start and end of temporaryValue.
	    temporaryValue = removeChars(temporaryValue, true, true, (char) => char === 0x9 || char === 0x20);

	    // 5.4. Append temporaryValue to values.
	    values.push(temporaryValue);

	    // 5.6. Set temporaryValue to the empty string.
	    temporaryValue = '';
	  }

	  // 6. Return values.
	  return values
	}

	/**
	 * @see https://fetch.spec.whatwg.org/#concept-header-list-get-decode-split
	 * @param {string} name lowercase header name
	 * @param {import('./headers').HeadersList} list
	 */
	function getDecodeSplit (name, list) {
	  // 1. Let value be the result of getting name from list.
	  const value = list.get(name, true);

	  // 2. If value is null, then return null.
	  if (value === null) {
	    return null
	  }

	  // 3. Return the result of getting, decoding, and splitting value.
	  return gettingDecodingSplitting(value)
	}

	const textDecoder = new TextDecoder();

	/**
	 * @see https://encoding.spec.whatwg.org/#utf-8-decode
	 * @param {Buffer} buffer
	 */
	function utf8DecodeBytes (buffer) {
	  if (buffer.length === 0) {
	    return ''
	  }

	  // 1. Let buffer be the result of peeking three bytes from
	  //    ioQueue, converted to a byte sequence.

	  // 2. If buffer is 0xEF 0xBB 0xBF, then read three
	  //    bytes from ioQueue. (Do nothing with those bytes.)
	  if (buffer[0] === 0xEF && buffer[1] === 0xBB && buffer[2] === 0xBF) {
	    buffer = buffer.subarray(3);
	  }

	  // 3. Process a queue with an instance of UTF-8’s
	  //    decoder, ioQueue, output, and "replacement".
	  const output = textDecoder.decode(buffer);

	  // 4. Return output.
	  return output
	}

	class EnvironmentSettingsObjectBase {
	  get baseUrl () {
	    return getGlobalOrigin()
	  }

	  get origin () {
	    return this.baseUrl?.origin
	  }

	  policyContainer = makePolicyContainer()
	}

	class EnvironmentSettingsObject {
	  settingsObject = new EnvironmentSettingsObjectBase()
	}

	const environmentSettingsObject = new EnvironmentSettingsObject();

	util$6 = {
	  isAborted,
	  isCancelled,
	  isValidEncodedURL,
	  createDeferredPromise,
	  ReadableStreamFrom,
	  tryUpgradeRequestToAPotentiallyTrustworthyURL,
	  clampAndCoarsenConnectionTimingInfo,
	  coarsenedSharedCurrentTime,
	  determineRequestsReferrer,
	  makePolicyContainer,
	  clonePolicyContainer,
	  appendFetchMetadata,
	  appendRequestOriginHeader,
	  TAOCheck,
	  corsCheck,
	  crossOriginResourcePolicyCheck,
	  createOpaqueTimingInfo,
	  setRequestReferrerPolicyOnRedirect,
	  isValidHTTPToken,
	  requestBadPort,
	  requestCurrentURL,
	  responseURL,
	  responseLocationURL,
	  isBlobLike,
	  isURLPotentiallyTrustworthy,
	  isValidReasonPhrase,
	  sameOrigin,
	  normalizeMethod,
	  serializeJavascriptValueToJSONString,
	  iteratorMixin,
	  createIterator,
	  isValidHeaderName,
	  isValidHeaderValue,
	  isErrorLike,
	  fullyReadBody,
	  bytesMatch,
	  isReadableStreamLike,
	  readableStreamClose,
	  isomorphicEncode,
	  urlIsLocal,
	  urlHasHttpsScheme,
	  urlIsHttpHttpsScheme,
	  readAllBytes,
	  simpleRangeHeaderValue,
	  buildContentRange,
	  parseMetadata,
	  createInflate,
	  extractMimeType,
	  getDecodeSplit,
	  utf8DecodeBytes,
	  environmentSettingsObject
	};
	return util$6;
}

var symbols$3;
var hasRequiredSymbols$4;

function requireSymbols$4 () {
	if (hasRequiredSymbols$4) return symbols$3;
	hasRequiredSymbols$4 = 1;

	symbols$3 = {
	  kUrl: Symbol('url'),
	  kHeaders: Symbol('headers'),
	  kSignal: Symbol('signal'),
	  kState: Symbol('state'),
	  kDispatcher: Symbol('dispatcher')
	};
	return symbols$3;
}

var file;
var hasRequiredFile;

function requireFile () {
	if (hasRequiredFile) return file;
	hasRequiredFile = 1;

	const { Blob, File } = require$$0$9;
	const { kState } = requireSymbols$4();
	const { webidl } = requireWebidl();

	// TODO(@KhafraDev): remove
	class FileLike {
	  constructor (blobLike, fileName, options = {}) {
	    // TODO: argument idl type check

	    // The File constructor is invoked with two or three parameters, depending
	    // on whether the optional dictionary parameter is used. When the File()
	    // constructor is invoked, user agents must run the following steps:

	    // 1. Let bytes be the result of processing blob parts given fileBits and
	    // options.

	    // 2. Let n be the fileName argument to the constructor.
	    const n = fileName;

	    // 3. Process FilePropertyBag dictionary argument by running the following
	    // substeps:

	    //    1. If the type member is provided and is not the empty string, let t
	    //    be set to the type dictionary member. If t contains any characters
	    //    outside the range U+0020 to U+007E, then set t to the empty string
	    //    and return from these substeps.
	    //    TODO
	    const t = options.type;

	    //    2. Convert every character in t to ASCII lowercase.
	    //    TODO

	    //    3. If the lastModified member is provided, let d be set to the
	    //    lastModified dictionary member. If it is not provided, set d to the
	    //    current date and time represented as the number of milliseconds since
	    //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).
	    const d = options.lastModified ?? Date.now();

	    // 4. Return a new File object F such that:
	    // F refers to the bytes byte sequence.
	    // F.size is set to the number of total bytes in bytes.
	    // F.name is set to n.
	    // F.type is set to t.
	    // F.lastModified is set to d.

	    this[kState] = {
	      blobLike,
	      name: n,
	      type: t,
	      lastModified: d
	    };
	  }

	  stream (...args) {
	    webidl.brandCheck(this, FileLike);

	    return this[kState].blobLike.stream(...args)
	  }

	  arrayBuffer (...args) {
	    webidl.brandCheck(this, FileLike);

	    return this[kState].blobLike.arrayBuffer(...args)
	  }

	  slice (...args) {
	    webidl.brandCheck(this, FileLike);

	    return this[kState].blobLike.slice(...args)
	  }

	  text (...args) {
	    webidl.brandCheck(this, FileLike);

	    return this[kState].blobLike.text(...args)
	  }

	  get size () {
	    webidl.brandCheck(this, FileLike);

	    return this[kState].blobLike.size
	  }

	  get type () {
	    webidl.brandCheck(this, FileLike);

	    return this[kState].blobLike.type
	  }

	  get name () {
	    webidl.brandCheck(this, FileLike);

	    return this[kState].name
	  }

	  get lastModified () {
	    webidl.brandCheck(this, FileLike);

	    return this[kState].lastModified
	  }

	  get [Symbol.toStringTag] () {
	    return 'File'
	  }
	}

	webidl.converters.Blob = webidl.interfaceConverter(Blob);

	// If this function is moved to ./util.js, some tools (such as
	// rollup) will warn about circular dependencies. See:
	// https://github.com/nodejs/undici/issues/1629
	function isFileLike (object) {
	  return (
	    (object instanceof File) ||
	    (
	      object &&
	      (typeof object.stream === 'function' ||
	      typeof object.arrayBuffer === 'function') &&
	      object[Symbol.toStringTag] === 'File'
	    )
	  )
	}

	file = { FileLike, isFileLike };
	return file;
}

var formdata;
var hasRequiredFormdata;

function requireFormdata () {
	if (hasRequiredFormdata) return formdata;
	hasRequiredFormdata = 1;

	const { isBlobLike, iteratorMixin } = requireUtil$7();
	const { kState } = requireSymbols$4();
	const { kEnumerableProperty } = requireUtil$8();
	const { FileLike, isFileLike } = requireFile();
	const { webidl } = requireWebidl();
	const { File: NativeFile } = require$$0$9;
	const nodeUtil = require$$0$a;

	/** @type {globalThis['File']} */
	const File = globalThis.File ?? NativeFile;

	// https://xhr.spec.whatwg.org/#formdata
	class FormData {
	  constructor (form) {
	    if (form !== undefined) {
	      throw webidl.errors.conversionFailed({
	        prefix: 'FormData constructor',
	        argument: 'Argument 1',
	        types: ['undefined']
	      })
	    }

	    this[kState] = [];
	  }

	  append (name, value, filename = undefined) {
	    webidl.brandCheck(this, FormData);

	    const prefix = 'FormData.append';
	    webidl.argumentLengthCheck(arguments, 2, prefix);

	    if (arguments.length === 3 && !isBlobLike(value)) {
	      throw new TypeError(
	        "Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'"
	      )
	    }

	    // 1. Let value be value if given; otherwise blobValue.

	    name = webidl.converters.USVString(name, prefix, 'name');
	    value = isBlobLike(value)
	      ? webidl.converters.Blob(value, prefix, 'value', { strict: false })
	      : webidl.converters.USVString(value, prefix, 'value');
	    filename = arguments.length === 3
	      ? webidl.converters.USVString(filename, prefix, 'filename')
	      : undefined;

	    // 2. Let entry be the result of creating an entry with
	    // name, value, and filename if given.
	    const entry = makeEntry(name, value, filename);

	    // 3. Append entry to this’s entry list.
	    this[kState].push(entry);
	  }

	  delete (name) {
	    webidl.brandCheck(this, FormData);

	    const prefix = 'FormData.delete';
	    webidl.argumentLengthCheck(arguments, 1, prefix);

	    name = webidl.converters.USVString(name, prefix, 'name');

	    // The delete(name) method steps are to remove all entries whose name
	    // is name from this’s entry list.
	    this[kState] = this[kState].filter(entry => entry.name !== name);
	  }

	  get (name) {
	    webidl.brandCheck(this, FormData);

	    const prefix = 'FormData.get';
	    webidl.argumentLengthCheck(arguments, 1, prefix);

	    name = webidl.converters.USVString(name, prefix, 'name');

	    // 1. If there is no entry whose name is name in this’s entry list,
	    // then return null.
	    const idx = this[kState].findIndex((entry) => entry.name === name);
	    if (idx === -1) {
	      return null
	    }

	    // 2. Return the value of the first entry whose name is name from
	    // this’s entry list.
	    return this[kState][idx].value
	  }

	  getAll (name) {
	    webidl.brandCheck(this, FormData);

	    const prefix = 'FormData.getAll';
	    webidl.argumentLengthCheck(arguments, 1, prefix);

	    name = webidl.converters.USVString(name, prefix, 'name');

	    // 1. If there is no entry whose name is name in this’s entry list,
	    // then return the empty list.
	    // 2. Return the values of all entries whose name is name, in order,
	    // from this’s entry list.
	    return this[kState]
	      .filter((entry) => entry.name === name)
	      .map((entry) => entry.value)
	  }

	  has (name) {
	    webidl.brandCheck(this, FormData);

	    const prefix = 'FormData.has';
	    webidl.argumentLengthCheck(arguments, 1, prefix);

	    name = webidl.converters.USVString(name, prefix, 'name');

	    // The has(name) method steps are to return true if there is an entry
	    // whose name is name in this’s entry list; otherwise false.
	    return this[kState].findIndex((entry) => entry.name === name) !== -1
	  }

	  set (name, value, filename = undefined) {
	    webidl.brandCheck(this, FormData);

	    const prefix = 'FormData.set';
	    webidl.argumentLengthCheck(arguments, 2, prefix);

	    if (arguments.length === 3 && !isBlobLike(value)) {
	      throw new TypeError(
	        "Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'"
	      )
	    }

	    // The set(name, value) and set(name, blobValue, filename) method steps
	    // are:

	    // 1. Let value be value if given; otherwise blobValue.

	    name = webidl.converters.USVString(name, prefix, 'name');
	    value = isBlobLike(value)
	      ? webidl.converters.Blob(value, prefix, 'name', { strict: false })
	      : webidl.converters.USVString(value, prefix, 'name');
	    filename = arguments.length === 3
	      ? webidl.converters.USVString(filename, prefix, 'name')
	      : undefined;

	    // 2. Let entry be the result of creating an entry with name, value, and
	    // filename if given.
	    const entry = makeEntry(name, value, filename);

	    // 3. If there are entries in this’s entry list whose name is name, then
	    // replace the first such entry with entry and remove the others.
	    const idx = this[kState].findIndex((entry) => entry.name === name);
	    if (idx !== -1) {
	      this[kState] = [
	        ...this[kState].slice(0, idx),
	        entry,
	        ...this[kState].slice(idx + 1).filter((entry) => entry.name !== name)
	      ];
	    } else {
	      // 4. Otherwise, append entry to this’s entry list.
	      this[kState].push(entry);
	    }
	  }

	  [nodeUtil.inspect.custom] (depth, options) {
	    const state = this[kState].reduce((a, b) => {
	      if (a[b.name]) {
	        if (Array.isArray(a[b.name])) {
	          a[b.name].push(b.value);
	        } else {
	          a[b.name] = [a[b.name], b.value];
	        }
	      } else {
	        a[b.name] = b.value;
	      }

	      return a
	    }, { __proto__: null });

	    options.depth ??= depth;
	    options.colors ??= true;

	    const output = nodeUtil.formatWithOptions(options, state);

	    // remove [Object null prototype]
	    return `FormData ${output.slice(output.indexOf(']') + 2)}`
	  }
	}

	iteratorMixin('FormData', FormData, kState, 'name', 'value');

	Object.defineProperties(FormData.prototype, {
	  append: kEnumerableProperty,
	  delete: kEnumerableProperty,
	  get: kEnumerableProperty,
	  getAll: kEnumerableProperty,
	  has: kEnumerableProperty,
	  set: kEnumerableProperty,
	  [Symbol.toStringTag]: {
	    value: 'FormData',
	    configurable: true
	  }
	});

	/**
	 * @see https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#create-an-entry
	 * @param {string} name
	 * @param {string|Blob} value
	 * @param {?string} filename
	 * @returns
	 */
	function makeEntry (name, value, filename) {
	  // 1. Set name to the result of converting name into a scalar value string.
	  // Note: This operation was done by the webidl converter USVString.

	  // 2. If value is a string, then set value to the result of converting
	  //    value into a scalar value string.
	  if (typeof value === 'string') ; else {
	    // 3. Otherwise:

	    // 1. If value is not a File object, then set value to a new File object,
	    //    representing the same bytes, whose name attribute value is "blob"
	    if (!isFileLike(value)) {
	      value = value instanceof Blob
	        ? new File([value], 'blob', { type: value.type })
	        : new FileLike(value, 'blob', { type: value.type });
	    }

	    // 2. If filename is given, then set value to a new File object,
	    //    representing the same bytes, whose name attribute is filename.
	    if (filename !== undefined) {
	      /** @type {FilePropertyBag} */
	      const options = {
	        type: value.type,
	        lastModified: value.lastModified
	      };

	      value = value instanceof NativeFile
	        ? new File([value], filename, options)
	        : new FileLike(value, filename, options);
	    }
	  }

	  // 4. Return an entry whose name is name and whose value is value.
	  return { name, value }
	}

	formdata = { FormData, makeEntry };
	return formdata;
}

var formdataParser;
var hasRequiredFormdataParser;

function requireFormdataParser () {
	if (hasRequiredFormdataParser) return formdataParser;
	hasRequiredFormdataParser = 1;

	const { isUSVString, bufferToLowerCasedHeaderName } = requireUtil$8();
	const { utf8DecodeBytes } = requireUtil$7();
	const { HTTP_TOKEN_CODEPOINTS, isomorphicDecode } = requireDataUrl();
	const { isFileLike } = requireFile();
	const { makeEntry } = requireFormdata();
	const assert = require$$0$7;
	const { File: NodeFile } = require$$0$9;

	const File = globalThis.File ?? NodeFile;

	const formDataNameBuffer = Buffer.from('form-data; name="');
	const filenameBuffer = Buffer.from('; filename');
	const dd = Buffer.from('--');
	const ddcrlf = Buffer.from('--\r\n');

	/**
	 * @param {string} chars
	 */
	function isAsciiString (chars) {
	  for (let i = 0; i < chars.length; ++i) {
	    if ((chars.charCodeAt(i) & ~0x7F) !== 0) {
	      return false
	    }
	  }
	  return true
	}

	/**
	 * @see https://andreubotella.github.io/multipart-form-data/#multipart-form-data-boundary
	 * @param {string} boundary
	 */
	function validateBoundary (boundary) {
	  const length = boundary.length;

	  // - its length is greater or equal to 27 and lesser or equal to 70, and
	  if (length < 27 || length > 70) {
	    return false
	  }

	  // - it is composed by bytes in the ranges 0x30 to 0x39, 0x41 to 0x5A, or
	  //   0x61 to 0x7A, inclusive (ASCII alphanumeric), or which are 0x27 ('),
	  //   0x2D (-) or 0x5F (_).
	  for (let i = 0; i < length; ++i) {
	    const cp = boundary.charCodeAt(i);

	    if (!(
	      (cp >= 0x30 && cp <= 0x39) ||
	      (cp >= 0x41 && cp <= 0x5a) ||
	      (cp >= 0x61 && cp <= 0x7a) ||
	      cp === 0x27 ||
	      cp === 0x2d ||
	      cp === 0x5f
	    )) {
	      return false
	    }
	  }

	  return true
	}

	/**
	 * @see https://andreubotella.github.io/multipart-form-data/#multipart-form-data-parser
	 * @param {Buffer} input
	 * @param {ReturnType<import('./data-url')['parseMIMEType']>} mimeType
	 */
	function multipartFormDataParser (input, mimeType) {
	  // 1. Assert: mimeType’s essence is "multipart/form-data".
	  assert(mimeType !== 'failure' && mimeType.essence === 'multipart/form-data');

	  const boundaryString = mimeType.parameters.get('boundary');

	  // 2. If mimeType’s parameters["boundary"] does not exist, return failure.
	  //    Otherwise, let boundary be the result of UTF-8 decoding mimeType’s
	  //    parameters["boundary"].
	  if (boundaryString === undefined) {
	    return 'failure'
	  }

	  const boundary = Buffer.from(`--${boundaryString}`, 'utf8');

	  // 3. Let entry list be an empty entry list.
	  const entryList = [];

	  // 4. Let position be a pointer to a byte in input, initially pointing at
	  //    the first byte.
	  const position = { position: 0 };

	  // Note: undici addition, allow \r\n before the body.
	  if (input[0] === 0x0d && input[1] === 0x0a) {
	    position.position += 2;
	  }

	  // 5. While true:
	  while (true) {
	    // 5.1. If position points to a sequence of bytes starting with 0x2D 0x2D
	    //      (`--`) followed by boundary, advance position by 2 + the length of
	    //      boundary. Otherwise, return failure.
	    // Note: boundary is padded with 2 dashes already, no need to add 2.
	    if (input.subarray(position.position, position.position + boundary.length).equals(boundary)) {
	      position.position += boundary.length;
	    } else {
	      return 'failure'
	    }

	    // 5.2. If position points to the sequence of bytes 0x2D 0x2D 0x0D 0x0A
	    //      (`--` followed by CR LF) followed by the end of input, return entry list.
	    // Note: a body does NOT need to end with CRLF. It can end with --.
	    if (
	      (position.position === input.length - 2 && bufferStartsWith(input, dd, position)) ||
	      (position.position === input.length - 4 && bufferStartsWith(input, ddcrlf, position))
	    ) {
	      return entryList
	    }

	    // 5.3. If position does not point to a sequence of bytes starting with 0x0D
	    //      0x0A (CR LF), return failure.
	    if (input[position.position] !== 0x0d || input[position.position + 1] !== 0x0a) {
	      return 'failure'
	    }

	    // 5.4. Advance position by 2. (This skips past the newline.)
	    position.position += 2;

	    // 5.5. Let name, filename and contentType be the result of parsing
	    //      multipart/form-data headers on input and position, if the result
	    //      is not failure. Otherwise, return failure.
	    const result = parseMultipartFormDataHeaders(input, position);

	    if (result === 'failure') {
	      return 'failure'
	    }

	    let { name, filename, contentType, encoding } = result;

	    // 5.6. Advance position by 2. (This skips past the empty line that marks
	    //      the end of the headers.)
	    position.position += 2;

	    // 5.7. Let body be the empty byte sequence.
	    let body;

	    // 5.8. Body loop: While position is not past the end of input:
	    // TODO: the steps here are completely wrong
	    {
	      const boundaryIndex = input.indexOf(boundary.subarray(2), position.position);

	      if (boundaryIndex === -1) {
	        return 'failure'
	      }

	      body = input.subarray(position.position, boundaryIndex - 4);

	      position.position += body.length;

	      // Note: position must be advanced by the body's length before being
	      // decoded, otherwise the parsing will fail.
	      if (encoding === 'base64') {
	        body = Buffer.from(body.toString(), 'base64');
	      }
	    }

	    // 5.9. If position does not point to a sequence of bytes starting with
	    //      0x0D 0x0A (CR LF), return failure. Otherwise, advance position by 2.
	    if (input[position.position] !== 0x0d || input[position.position + 1] !== 0x0a) {
	      return 'failure'
	    } else {
	      position.position += 2;
	    }

	    // 5.10. If filename is not null:
	    let value;

	    if (filename !== null) {
	      // 5.10.1. If contentType is null, set contentType to "text/plain".
	      contentType ??= 'text/plain';

	      // 5.10.2. If contentType is not an ASCII string, set contentType to the empty string.

	      // Note: `buffer.isAscii` can be used at zero-cost, but converting a string to a buffer is a high overhead.
	      // Content-Type is a relatively small string, so it is faster to use `String#charCodeAt`.
	      if (!isAsciiString(contentType)) {
	        contentType = '';
	      }

	      // 5.10.3. Let value be a new File object with name filename, type contentType, and body body.
	      value = new File([body], filename, { type: contentType });
	    } else {
	      // 5.11. Otherwise:

	      // 5.11.1. Let value be the UTF-8 decoding without BOM of body.
	      value = utf8DecodeBytes(Buffer.from(body));
	    }

	    // 5.12. Assert: name is a scalar value string and value is either a scalar value string or a File object.
	    assert(isUSVString(name));
	    assert((typeof value === 'string' && isUSVString(value)) || isFileLike(value));

	    // 5.13. Create an entry with name and value, and append it to entry list.
	    entryList.push(makeEntry(name, value, filename));
	  }
	}

	/**
	 * @see https://andreubotella.github.io/multipart-form-data/#parse-multipart-form-data-headers
	 * @param {Buffer} input
	 * @param {{ position: number }} position
	 */
	function parseMultipartFormDataHeaders (input, position) {
	  // 1. Let name, filename and contentType be null.
	  let name = null;
	  let filename = null;
	  let contentType = null;
	  let encoding = null;

	  // 2. While true:
	  while (true) {
	    // 2.1. If position points to a sequence of bytes starting with 0x0D 0x0A (CR LF):
	    if (input[position.position] === 0x0d && input[position.position + 1] === 0x0a) {
	      // 2.1.1. If name is null, return failure.
	      if (name === null) {
	        return 'failure'
	      }

	      // 2.1.2. Return name, filename and contentType.
	      return { name, filename, contentType, encoding }
	    }

	    // 2.2. Let header name be the result of collecting a sequence of bytes that are
	    //      not 0x0A (LF), 0x0D (CR) or 0x3A (:), given position.
	    let headerName = collectASequenceOfBytes(
	      (char) => char !== 0x0a && char !== 0x0d && char !== 0x3a,
	      input,
	      position
	    );

	    // 2.3. Remove any HTTP tab or space bytes from the start or end of header name.
	    headerName = removeChars(headerName, true, true, (char) => char === 0x9 || char === 0x20);

	    // 2.4. If header name does not match the field-name token production, return failure.
	    if (!HTTP_TOKEN_CODEPOINTS.test(headerName.toString())) {
	      return 'failure'
	    }

	    // 2.5. If the byte at position is not 0x3A (:), return failure.
	    if (input[position.position] !== 0x3a) {
	      return 'failure'
	    }

	    // 2.6. Advance position by 1.
	    position.position++;

	    // 2.7. Collect a sequence of bytes that are HTTP tab or space bytes given position.
	    //      (Do nothing with those bytes.)
	    collectASequenceOfBytes(
	      (char) => char === 0x20 || char === 0x09,
	      input,
	      position
	    );

	    // 2.8. Byte-lowercase header name and switch on the result:
	    switch (bufferToLowerCasedHeaderName(headerName)) {
	      case 'content-disposition': {
	        // 1. Set name and filename to null.
	        name = filename = null;

	        // 2. If position does not point to a sequence of bytes starting with
	        //    `form-data; name="`, return failure.
	        if (!bufferStartsWith(input, formDataNameBuffer, position)) {
	          return 'failure'
	        }

	        // 3. Advance position so it points at the byte after the next 0x22 (")
	        //    byte (the one in the sequence of bytes matched above).
	        position.position += 17;

	        // 4. Set name to the result of parsing a multipart/form-data name given
	        //    input and position, if the result is not failure. Otherwise, return
	        //    failure.
	        name = parseMultipartFormDataName(input, position);

	        if (name === null) {
	          return 'failure'
	        }

	        // 5. If position points to a sequence of bytes starting with `; filename="`:
	        if (bufferStartsWith(input, filenameBuffer, position)) {
	          // Note: undici also handles filename*
	          let check = position.position + filenameBuffer.length;

	          if (input[check] === 0x2a) {
	            position.position += 1;
	            check += 1;
	          }

	          if (input[check] !== 0x3d || input[check + 1] !== 0x22) { // ="
	            return 'failure'
	          }

	          // 1. Advance position so it points at the byte after the next 0x22 (") byte
	          //    (the one in the sequence of bytes matched above).
	          position.position += 12;

	          // 2. Set filename to the result of parsing a multipart/form-data name given
	          //    input and position, if the result is not failure. Otherwise, return failure.
	          filename = parseMultipartFormDataName(input, position);

	          if (filename === null) {
	            return 'failure'
	          }
	        }

	        break
	      }
	      case 'content-type': {
	        // 1. Let header value be the result of collecting a sequence of bytes that are
	        //    not 0x0A (LF) or 0x0D (CR), given position.
	        let headerValue = collectASequenceOfBytes(
	          (char) => char !== 0x0a && char !== 0x0d,
	          input,
	          position
	        );

	        // 2. Remove any HTTP tab or space bytes from the end of header value.
	        headerValue = removeChars(headerValue, false, true, (char) => char === 0x9 || char === 0x20);

	        // 3. Set contentType to the isomorphic decoding of header value.
	        contentType = isomorphicDecode(headerValue);

	        break
	      }
	      case 'content-transfer-encoding': {
	        let headerValue = collectASequenceOfBytes(
	          (char) => char !== 0x0a && char !== 0x0d,
	          input,
	          position
	        );

	        headerValue = removeChars(headerValue, false, true, (char) => char === 0x9 || char === 0x20);

	        encoding = isomorphicDecode(headerValue);

	        break
	      }
	      default: {
	        // Collect a sequence of bytes that are not 0x0A (LF) or 0x0D (CR), given position.
	        // (Do nothing with those bytes.)
	        collectASequenceOfBytes(
	          (char) => char !== 0x0a && char !== 0x0d,
	          input,
	          position
	        );
	      }
	    }

	    // 2.9. If position does not point to a sequence of bytes starting with 0x0D 0x0A
	    //      (CR LF), return failure. Otherwise, advance position by 2 (past the newline).
	    if (input[position.position] !== 0x0d && input[position.position + 1] !== 0x0a) {
	      return 'failure'
	    } else {
	      position.position += 2;
	    }
	  }
	}

	/**
	 * @see https://andreubotella.github.io/multipart-form-data/#parse-a-multipart-form-data-name
	 * @param {Buffer} input
	 * @param {{ position: number }} position
	 */
	function parseMultipartFormDataName (input, position) {
	  // 1. Assert: The byte at (position - 1) is 0x22 (").
	  assert(input[position.position - 1] === 0x22);

	  // 2. Let name be the result of collecting a sequence of bytes that are not 0x0A (LF), 0x0D (CR) or 0x22 ("), given position.
	  /** @type {string | Buffer} */
	  let name = collectASequenceOfBytes(
	    (char) => char !== 0x0a && char !== 0x0d && char !== 0x22,
	    input,
	    position
	  );

	  // 3. If the byte at position is not 0x22 ("), return failure. Otherwise, advance position by 1.
	  if (input[position.position] !== 0x22) {
	    return null // name could be 'failure'
	  } else {
	    position.position++;
	  }

	  // 4. Replace any occurrence of the following subsequences in name with the given byte:
	  // - `%0A`: 0x0A (LF)
	  // - `%0D`: 0x0D (CR)
	  // - `%22`: 0x22 (")
	  name = new TextDecoder().decode(name)
	    .replace(/%0A/ig, '\n')
	    .replace(/%0D/ig, '\r')
	    .replace(/%22/g, '"');

	  // 5. Return the UTF-8 decoding without BOM of name.
	  return name
	}

	/**
	 * @param {(char: number) => boolean} condition
	 * @param {Buffer} input
	 * @param {{ position: number }} position
	 */
	function collectASequenceOfBytes (condition, input, position) {
	  let start = position.position;

	  while (start < input.length && condition(input[start])) {
	    ++start;
	  }

	  return input.subarray(position.position, (position.position = start))
	}

	/**
	 * @param {Buffer} buf
	 * @param {boolean} leading
	 * @param {boolean} trailing
	 * @param {(charCode: number) => boolean} predicate
	 * @returns {Buffer}
	 */
	function removeChars (buf, leading, trailing, predicate) {
	  let lead = 0;
	  let trail = buf.length - 1;

	  if (leading) {
	    while (lead < buf.length && predicate(buf[lead])) lead++;
	  }

	  {
	    while (trail > 0 && predicate(buf[trail])) trail--;
	  }

	  return lead === 0 && trail === buf.length - 1 ? buf : buf.subarray(lead, trail + 1)
	}

	/**
	 * Checks if {@param buffer} starts with {@param start}
	 * @param {Buffer} buffer
	 * @param {Buffer} start
	 * @param {{ position: number }} position
	 */
	function bufferStartsWith (buffer, start, position) {
	  if (buffer.length < start.length) {
	    return false
	  }

	  for (let i = 0; i < start.length; i++) {
	    if (start[i] !== buffer[position.position + i]) {
	      return false
	    }
	  }

	  return true
	}

	formdataParser = {
	  multipartFormDataParser,
	  validateBoundary
	};
	return formdataParser;
}

var body;
var hasRequiredBody;

function requireBody () {
	if (hasRequiredBody) return body;
	hasRequiredBody = 1;

	const util = requireUtil$8();
	const {
	  ReadableStreamFrom,
	  isBlobLike,
	  isReadableStreamLike,
	  readableStreamClose,
	  createDeferredPromise,
	  fullyReadBody,
	  extractMimeType,
	  utf8DecodeBytes
	} = requireUtil$7();
	const { FormData } = requireFormdata();
	const { kState } = requireSymbols$4();
	const { webidl } = requireWebidl();
	const { Blob } = require$$0$9;
	const assert = require$$0$7;
	const { isErrored, isDisturbed } = require$$0$8;
	const { isArrayBuffer } = require$$8;
	const { serializeAMimeType } = requireDataUrl();
	const { multipartFormDataParser } = requireFormdataParser();

	const textEncoder = new TextEncoder();
	function noop () {}

	const hasFinalizationRegistry = globalThis.FinalizationRegistry && process.version.indexOf('v18') !== 0;
	let streamRegistry;

	if (hasFinalizationRegistry) {
	  streamRegistry = new FinalizationRegistry((weakRef) => {
	    const stream = weakRef.deref();
	    if (stream && !stream.locked && !isDisturbed(stream) && !isErrored(stream)) {
	      stream.cancel('Response object has been garbage collected').catch(noop);
	    }
	  });
	}

	// https://fetch.spec.whatwg.org/#concept-bodyinit-extract
	function extractBody (object, keepalive = false) {
	  // 1. Let stream be null.
	  let stream = null;

	  // 2. If object is a ReadableStream object, then set stream to object.
	  if (object instanceof ReadableStream) {
	    stream = object;
	  } else if (isBlobLike(object)) {
	    // 3. Otherwise, if object is a Blob object, set stream to the
	    //    result of running object’s get stream.
	    stream = object.stream();
	  } else {
	    // 4. Otherwise, set stream to a new ReadableStream object, and set
	    //    up stream with byte reading support.
	    stream = new ReadableStream({
	      async pull (controller) {
	        const buffer = typeof source === 'string' ? textEncoder.encode(source) : source;

	        if (buffer.byteLength) {
	          controller.enqueue(buffer);
	        }

	        queueMicrotask(() => readableStreamClose(controller));
	      },
	      start () {},
	      type: 'bytes'
	    });
	  }

	  // 5. Assert: stream is a ReadableStream object.
	  assert(isReadableStreamLike(stream));

	  // 6. Let action be null.
	  let action = null;

	  // 7. Let source be null.
	  let source = null;

	  // 8. Let length be null.
	  let length = null;

	  // 9. Let type be null.
	  let type = null;

	  // 10. Switch on object:
	  if (typeof object === 'string') {
	    // Set source to the UTF-8 encoding of object.
	    // Note: setting source to a Uint8Array here breaks some mocking assumptions.
	    source = object;

	    // Set type to `text/plain;charset=UTF-8`.
	    type = 'text/plain;charset=UTF-8';
	  } else if (object instanceof URLSearchParams) {
	    // URLSearchParams

	    // spec says to run application/x-www-form-urlencoded on body.list
	    // this is implemented in Node.js as apart of an URLSearchParams instance toString method
	    // See: https://github.com/nodejs/node/blob/e46c680bf2b211bbd52cf959ca17ee98c7f657f5/lib/internal/url.js#L490
	    // and https://github.com/nodejs/node/blob/e46c680bf2b211bbd52cf959ca17ee98c7f657f5/lib/internal/url.js#L1100

	    // Set source to the result of running the application/x-www-form-urlencoded serializer with object’s list.
	    source = object.toString();

	    // Set type to `application/x-www-form-urlencoded;charset=UTF-8`.
	    type = 'application/x-www-form-urlencoded;charset=UTF-8';
	  } else if (isArrayBuffer(object)) {
	    // BufferSource/ArrayBuffer

	    // Set source to a copy of the bytes held by object.
	    source = new Uint8Array(object.slice());
	  } else if (ArrayBuffer.isView(object)) {
	    // BufferSource/ArrayBufferView

	    // Set source to a copy of the bytes held by object.
	    source = new Uint8Array(object.buffer.slice(object.byteOffset, object.byteOffset + object.byteLength));
	  } else if (util.isFormDataLike(object)) {
	    const boundary = `----formdata-undici-0${`${Math.floor(Math.random() * 1e11)}`.padStart(11, '0')}`;
	    const prefix = `--${boundary}\r\nContent-Disposition: form-data`;

	    /*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */
	    const escape = (str) =>
	      str.replace(/\n/g, '%0A').replace(/\r/g, '%0D').replace(/"/g, '%22');
	    const normalizeLinefeeds = (value) => value.replace(/\r?\n|\r/g, '\r\n');

	    // Set action to this step: run the multipart/form-data
	    // encoding algorithm, with object’s entry list and UTF-8.
	    // - This ensures that the body is immutable and can't be changed afterwords
	    // - That the content-length is calculated in advance.
	    // - And that all parts are pre-encoded and ready to be sent.

	    const blobParts = [];
	    const rn = new Uint8Array([13, 10]); // '\r\n'
	    length = 0;
	    let hasUnknownSizeValue = false;

	    for (const [name, value] of object) {
	      if (typeof value === 'string') {
	        const chunk = textEncoder.encode(prefix +
	          `; name="${escape(normalizeLinefeeds(name))}"` +
	          `\r\n\r\n${normalizeLinefeeds(value)}\r\n`);
	        blobParts.push(chunk);
	        length += chunk.byteLength;
	      } else {
	        const chunk = textEncoder.encode(`${prefix}; name="${escape(normalizeLinefeeds(name))}"` +
	          (value.name ? `; filename="${escape(value.name)}"` : '') + '\r\n' +
	          `Content-Type: ${
	            value.type || 'application/octet-stream'
	          }\r\n\r\n`);
	        blobParts.push(chunk, value, rn);
	        if (typeof value.size === 'number') {
	          length += chunk.byteLength + value.size + rn.byteLength;
	        } else {
	          hasUnknownSizeValue = true;
	        }
	      }
	    }

	    const chunk = textEncoder.encode(`--${boundary}--`);
	    blobParts.push(chunk);
	    length += chunk.byteLength;
	    if (hasUnknownSizeValue) {
	      length = null;
	    }

	    // Set source to object.
	    source = object;

	    action = async function * () {
	      for (const part of blobParts) {
	        if (part.stream) {
	          yield * part.stream();
	        } else {
	          yield part;
	        }
	      }
	    };

	    // Set type to `multipart/form-data; boundary=`,
	    // followed by the multipart/form-data boundary string generated
	    // by the multipart/form-data encoding algorithm.
	    type = `multipart/form-data; boundary=${boundary}`;
	  } else if (isBlobLike(object)) {
	    // Blob

	    // Set source to object.
	    source = object;

	    // Set length to object’s size.
	    length = object.size;

	    // If object’s type attribute is not the empty byte sequence, set
	    // type to its value.
	    if (object.type) {
	      type = object.type;
	    }
	  } else if (typeof object[Symbol.asyncIterator] === 'function') {
	    // If keepalive is true, then throw a TypeError.
	    if (keepalive) {
	      throw new TypeError('keepalive')
	    }

	    // If object is disturbed or locked, then throw a TypeError.
	    if (util.isDisturbed(object) || object.locked) {
	      throw new TypeError(
	        'Response body object should not be disturbed or locked'
	      )
	    }

	    stream =
	      object instanceof ReadableStream ? object : ReadableStreamFrom(object);
	  }

	  // 11. If source is a byte sequence, then set action to a
	  // step that returns source and length to source’s length.
	  if (typeof source === 'string' || util.isBuffer(source)) {
	    length = Buffer.byteLength(source);
	  }

	  // 12. If action is non-null, then run these steps in in parallel:
	  if (action != null) {
	    // Run action.
	    let iterator;
	    stream = new ReadableStream({
	      async start () {
	        iterator = action(object)[Symbol.asyncIterator]();
	      },
	      async pull (controller) {
	        const { value, done } = await iterator.next();
	        if (done) {
	          // When running action is done, close stream.
	          queueMicrotask(() => {
	            controller.close();
	            controller.byobRequest?.respond(0);
	          });
	        } else {
	          // Whenever one or more bytes are available and stream is not errored,
	          // enqueue a Uint8Array wrapping an ArrayBuffer containing the available
	          // bytes into stream.
	          if (!isErrored(stream)) {
	            const buffer = new Uint8Array(value);
	            if (buffer.byteLength) {
	              controller.enqueue(buffer);
	            }
	          }
	        }
	        return controller.desiredSize > 0
	      },
	      async cancel (reason) {
	        await iterator.return();
	      },
	      type: 'bytes'
	    });
	  }

	  // 13. Let body be a body whose stream is stream, source is source,
	  // and length is length.
	  const body = { stream, source, length };

	  // 14. Return (body, type).
	  return [body, type]
	}

	// https://fetch.spec.whatwg.org/#bodyinit-safely-extract
	function safelyExtractBody (object, keepalive = false) {
	  // To safely extract a body and a `Content-Type` value from
	  // a byte sequence or BodyInit object object, run these steps:

	  // 1. If object is a ReadableStream object, then:
	  if (object instanceof ReadableStream) {
	    // Assert: object is neither disturbed nor locked.
	    // istanbul ignore next
	    assert(!util.isDisturbed(object), 'The body has already been consumed.');
	    // istanbul ignore next
	    assert(!object.locked, 'The stream is locked.');
	  }

	  // 2. Return the results of extracting object.
	  return extractBody(object, keepalive)
	}

	function cloneBody (instance, body) {
	  // To clone a body body, run these steps:

	  // https://fetch.spec.whatwg.org/#concept-body-clone

	  // 1. Let « out1, out2 » be the result of teeing body’s stream.
	  const [out1, out2] = body.stream.tee();

	  if (hasFinalizationRegistry) {
	    streamRegistry.register(instance, new WeakRef(out1));
	  }

	  // 2. Set body’s stream to out1.
	  body.stream = out1;

	  // 3. Return a body whose stream is out2 and other members are copied from body.
	  return {
	    stream: out2,
	    length: body.length,
	    source: body.source
	  }
	}

	function throwIfAborted (state) {
	  if (state.aborted) {
	    throw new DOMException('The operation was aborted.', 'AbortError')
	  }
	}

	function bodyMixinMethods (instance) {
	  const methods = {
	    blob () {
	      // The blob() method steps are to return the result of
	      // running consume body with this and the following step
	      // given a byte sequence bytes: return a Blob whose
	      // contents are bytes and whose type attribute is this’s
	      // MIME type.
	      return consumeBody(this, (bytes) => {
	        let mimeType = bodyMimeType(this);

	        if (mimeType === null) {
	          mimeType = '';
	        } else if (mimeType) {
	          mimeType = serializeAMimeType(mimeType);
	        }

	        // Return a Blob whose contents are bytes and type attribute
	        // is mimeType.
	        return new Blob([bytes], { type: mimeType })
	      }, instance)
	    },

	    arrayBuffer () {
	      // The arrayBuffer() method steps are to return the result
	      // of running consume body with this and the following step
	      // given a byte sequence bytes: return a new ArrayBuffer
	      // whose contents are bytes.
	      return consumeBody(this, (bytes) => {
	        return new Uint8Array(bytes).buffer
	      }, instance)
	    },

	    text () {
	      // The text() method steps are to return the result of running
	      // consume body with this and UTF-8 decode.
	      return consumeBody(this, utf8DecodeBytes, instance)
	    },

	    json () {
	      // The json() method steps are to return the result of running
	      // consume body with this and parse JSON from bytes.
	      return consumeBody(this, parseJSONFromBytes, instance)
	    },

	    formData () {
	      // The formData() method steps are to return the result of running
	      // consume body with this and the following step given a byte sequence bytes:
	      return consumeBody(this, (value) => {
	        // 1. Let mimeType be the result of get the MIME type with this.
	        const mimeType = bodyMimeType(this);

	        // 2. If mimeType is non-null, then switch on mimeType’s essence and run
	        //    the corresponding steps:
	        if (mimeType !== null) {
	          switch (mimeType.essence) {
	            case 'multipart/form-data': {
	              // 1. ... [long step]
	              const parsed = multipartFormDataParser(value, mimeType);

	              // 2. If that fails for some reason, then throw a TypeError.
	              if (parsed === 'failure') {
	                throw new TypeError('Failed to parse body as FormData.')
	              }

	              // 3. Return a new FormData object, appending each entry,
	              //    resulting from the parsing operation, to its entry list.
	              const fd = new FormData();
	              fd[kState] = parsed;

	              return fd
	            }
	            case 'application/x-www-form-urlencoded': {
	              // 1. Let entries be the result of parsing bytes.
	              const entries = new URLSearchParams(value.toString());

	              // 2. If entries is failure, then throw a TypeError.

	              // 3. Return a new FormData object whose entry list is entries.
	              const fd = new FormData();

	              for (const [name, value] of entries) {
	                fd.append(name, value);
	              }

	              return fd
	            }
	          }
	        }

	        // 3. Throw a TypeError.
	        throw new TypeError(
	          'Content-Type was not one of "multipart/form-data" or "application/x-www-form-urlencoded".'
	        )
	      }, instance)
	    },

	    bytes () {
	      // The bytes() method steps are to return the result of running consume body
	      // with this and the following step given a byte sequence bytes: return the
	      // result of creating a Uint8Array from bytes in this’s relevant realm.
	      return consumeBody(this, (bytes) => {
	        return new Uint8Array(bytes)
	      }, instance)
	    }
	  };

	  return methods
	}

	function mixinBody (prototype) {
	  Object.assign(prototype.prototype, bodyMixinMethods(prototype));
	}

	/**
	 * @see https://fetch.spec.whatwg.org/#concept-body-consume-body
	 * @param {Response|Request} object
	 * @param {(value: unknown) => unknown} convertBytesToJSValue
	 * @param {Response|Request} instance
	 */
	async function consumeBody (object, convertBytesToJSValue, instance) {
	  webidl.brandCheck(object, instance);

	  // 1. If object is unusable, then return a promise rejected
	  //    with a TypeError.
	  if (bodyUnusable(object)) {
	    throw new TypeError('Body is unusable: Body has already been read')
	  }

	  throwIfAborted(object[kState]);

	  // 2. Let promise be a new promise.
	  const promise = createDeferredPromise();

	  // 3. Let errorSteps given error be to reject promise with error.
	  const errorSteps = (error) => promise.reject(error);

	  // 4. Let successSteps given a byte sequence data be to resolve
	  //    promise with the result of running convertBytesToJSValue
	  //    with data. If that threw an exception, then run errorSteps
	  //    with that exception.
	  const successSteps = (data) => {
	    try {
	      promise.resolve(convertBytesToJSValue(data));
	    } catch (e) {
	      errorSteps(e);
	    }
	  };

	  // 5. If object’s body is null, then run successSteps with an
	  //    empty byte sequence.
	  if (object[kState].body == null) {
	    successSteps(Buffer.allocUnsafe(0));
	    return promise.promise
	  }

	  // 6. Otherwise, fully read object’s body given successSteps,
	  //    errorSteps, and object’s relevant global object.
	  await fullyReadBody(object[kState].body, successSteps, errorSteps);

	  // 7. Return promise.
	  return promise.promise
	}

	// https://fetch.spec.whatwg.org/#body-unusable
	function bodyUnusable (object) {
	  const body = object[kState].body;

	  // An object including the Body interface mixin is
	  // said to be unusable if its body is non-null and
	  // its body’s stream is disturbed or locked.
	  return body != null && (body.stream.locked || util.isDisturbed(body.stream))
	}

	/**
	 * @see https://infra.spec.whatwg.org/#parse-json-bytes-to-a-javascript-value
	 * @param {Uint8Array} bytes
	 */
	function parseJSONFromBytes (bytes) {
	  return JSON.parse(utf8DecodeBytes(bytes))
	}

	/**
	 * @see https://fetch.spec.whatwg.org/#concept-body-mime-type
	 * @param {import('./response').Response|import('./request').Request} requestOrResponse
	 */
	function bodyMimeType (requestOrResponse) {
	  // 1. Let headers be null.
	  // 2. If requestOrResponse is a Request object, then set headers to requestOrResponse’s request’s header list.
	  // 3. Otherwise, set headers to requestOrResponse’s response’s header list.
	  /** @type {import('./headers').HeadersList} */
	  const headers = requestOrResponse[kState].headersList;

	  // 4. Let mimeType be the result of extracting a MIME type from headers.
	  const mimeType = extractMimeType(headers);

	  // 5. If mimeType is failure, then return null.
	  if (mimeType === 'failure') {
	    return null
	  }

	  // 6. Return mimeType.
	  return mimeType
	}

	body = {
	  extractBody,
	  safelyExtractBody,
	  cloneBody,
	  mixinBody,
	  streamRegistry,
	  hasFinalizationRegistry,
	  bodyUnusable
	};
	return body;
}

var clientH1;
var hasRequiredClientH1;

function requireClientH1 () {
	if (hasRequiredClientH1) return clientH1;
	hasRequiredClientH1 = 1;

	/* global WebAssembly */

	const assert = require$$0$7;
	const util = requireUtil$8();
	const { channels } = requireDiagnostics();
	const timers = requireTimers();
	const {
	  RequestContentLengthMismatchError,
	  ResponseContentLengthMismatchError,
	  RequestAbortedError,
	  HeadersTimeoutError,
	  HeadersOverflowError,
	  SocketError,
	  InformationalError,
	  BodyTimeoutError,
	  HTTPParserError,
	  ResponseExceededMaxSizeError
	} = requireErrors();
	const {
	  kUrl,
	  kReset,
	  kClient,
	  kParser,
	  kBlocking,
	  kRunning,
	  kPending,
	  kSize,
	  kWriting,
	  kQueue,
	  kNoRef,
	  kKeepAliveDefaultTimeout,
	  kHostHeader,
	  kPendingIdx,
	  kRunningIdx,
	  kError,
	  kPipelining,
	  kSocket,
	  kKeepAliveTimeoutValue,
	  kMaxHeadersSize,
	  kKeepAliveMaxTimeout,
	  kKeepAliveTimeoutThreshold,
	  kHeadersTimeout,
	  kBodyTimeout,
	  kStrictContentLength,
	  kMaxRequests,
	  kCounter,
	  kMaxResponseSize,
	  kOnError,
	  kResume,
	  kHTTPContext
	} = requireSymbols$5();

	const constants = requireConstants$5();
	const EMPTY_BUF = Buffer.alloc(0);
	const FastBuffer = Buffer[Symbol.species];
	const addListener = util.addListener;
	const removeAllListeners = util.removeAllListeners;

	let extractBody;

	async function lazyllhttp () {
	  const llhttpWasmData = process.env.JEST_WORKER_ID ? requireLlhttpWasm() : undefined;

	  let mod;
	  try {
	    mod = await WebAssembly.compile(requireLlhttp_simdWasm());
	  } catch (e) {
	    /* istanbul ignore next */

	    // We could check if the error was caused by the simd option not
	    // being enabled, but the occurring of this other error
	    // * https://github.com/emscripten-core/emscripten/issues/11495
	    // got me to remove that check to avoid breaking Node 12.
	    mod = await WebAssembly.compile(llhttpWasmData || requireLlhttpWasm());
	  }

	  return await WebAssembly.instantiate(mod, {
	    env: {
	      /* eslint-disable camelcase */

	      wasm_on_url: (p, at, len) => {
	        /* istanbul ignore next */
	        return 0
	      },
	      wasm_on_status: (p, at, len) => {
	        assert.strictEqual(currentParser.ptr, p);
	        const start = at - currentBufferPtr + currentBufferRef.byteOffset;
	        return currentParser.onStatus(new FastBuffer(currentBufferRef.buffer, start, len)) || 0
	      },
	      wasm_on_message_begin: (p) => {
	        assert.strictEqual(currentParser.ptr, p);
	        return currentParser.onMessageBegin() || 0
	      },
	      wasm_on_header_field: (p, at, len) => {
	        assert.strictEqual(currentParser.ptr, p);
	        const start = at - currentBufferPtr + currentBufferRef.byteOffset;
	        return currentParser.onHeaderField(new FastBuffer(currentBufferRef.buffer, start, len)) || 0
	      },
	      wasm_on_header_value: (p, at, len) => {
	        assert.strictEqual(currentParser.ptr, p);
	        const start = at - currentBufferPtr + currentBufferRef.byteOffset;
	        return currentParser.onHeaderValue(new FastBuffer(currentBufferRef.buffer, start, len)) || 0
	      },
	      wasm_on_headers_complete: (p, statusCode, upgrade, shouldKeepAlive) => {
	        assert.strictEqual(currentParser.ptr, p);
	        return currentParser.onHeadersComplete(statusCode, Boolean(upgrade), Boolean(shouldKeepAlive)) || 0
	      },
	      wasm_on_body: (p, at, len) => {
	        assert.strictEqual(currentParser.ptr, p);
	        const start = at - currentBufferPtr + currentBufferRef.byteOffset;
	        return currentParser.onBody(new FastBuffer(currentBufferRef.buffer, start, len)) || 0
	      },
	      wasm_on_message_complete: (p) => {
	        assert.strictEqual(currentParser.ptr, p);
	        return currentParser.onMessageComplete() || 0
	      }

	      /* eslint-enable camelcase */
	    }
	  })
	}

	let llhttpInstance = null;
	let llhttpPromise = lazyllhttp();
	llhttpPromise.catch();

	let currentParser = null;
	let currentBufferRef = null;
	let currentBufferSize = 0;
	let currentBufferPtr = null;

	const TIMEOUT_HEADERS = 1;
	const TIMEOUT_BODY = 2;
	const TIMEOUT_IDLE = 3;

	class Parser {
	  constructor (client, socket, { exports }) {
	    assert(Number.isFinite(client[kMaxHeadersSize]) && client[kMaxHeadersSize] > 0);

	    this.llhttp = exports;
	    this.ptr = this.llhttp.llhttp_alloc(constants.TYPE.RESPONSE);
	    this.client = client;
	    this.socket = socket;
	    this.timeout = null;
	    this.timeoutValue = null;
	    this.timeoutType = null;
	    this.statusCode = null;
	    this.statusText = '';
	    this.upgrade = false;
	    this.headers = [];
	    this.headersSize = 0;
	    this.headersMaxSize = client[kMaxHeadersSize];
	    this.shouldKeepAlive = false;
	    this.paused = false;
	    this.resume = this.resume.bind(this);

	    this.bytesRead = 0;

	    this.keepAlive = '';
	    this.contentLength = '';
	    this.connection = '';
	    this.maxResponseSize = client[kMaxResponseSize];
	  }

	  setTimeout (value, type) {
	    this.timeoutType = type;
	    if (value !== this.timeoutValue) {
	      timers.clearTimeout(this.timeout);
	      if (value) {
	        this.timeout = timers.setTimeout(onParserTimeout, value, this);
	        // istanbul ignore else: only for jest
	        if (this.timeout.unref) {
	          this.timeout.unref();
	        }
	      } else {
	        this.timeout = null;
	      }
	      this.timeoutValue = value;
	    } else if (this.timeout) {
	      // istanbul ignore else: only for jest
	      if (this.timeout.refresh) {
	        this.timeout.refresh();
	      }
	    }
	  }

	  resume () {
	    if (this.socket.destroyed || !this.paused) {
	      return
	    }

	    assert(this.ptr != null);
	    assert(currentParser == null);

	    this.llhttp.llhttp_resume(this.ptr);

	    assert(this.timeoutType === TIMEOUT_BODY);
	    if (this.timeout) {
	      // istanbul ignore else: only for jest
	      if (this.timeout.refresh) {
	        this.timeout.refresh();
	      }
	    }

	    this.paused = false;
	    this.execute(this.socket.read() || EMPTY_BUF); // Flush parser.
	    this.readMore();
	  }

	  readMore () {
	    while (!this.paused && this.ptr) {
	      const chunk = this.socket.read();
	      if (chunk === null) {
	        break
	      }
	      this.execute(chunk);
	    }
	  }

	  execute (data) {
	    assert(this.ptr != null);
	    assert(currentParser == null);
	    assert(!this.paused);

	    const { socket, llhttp } = this;

	    if (data.length > currentBufferSize) {
	      if (currentBufferPtr) {
	        llhttp.free(currentBufferPtr);
	      }
	      currentBufferSize = Math.ceil(data.length / 4096) * 4096;
	      currentBufferPtr = llhttp.malloc(currentBufferSize);
	    }

	    new Uint8Array(llhttp.memory.buffer, currentBufferPtr, currentBufferSize).set(data);

	    // Call `execute` on the wasm parser.
	    // We pass the `llhttp_parser` pointer address, the pointer address of buffer view data,
	    // and finally the length of bytes to parse.
	    // The return value is an error code or `constants.ERROR.OK`.
	    try {
	      let ret;

	      try {
	        currentBufferRef = data;
	        currentParser = this;
	        ret = llhttp.llhttp_execute(this.ptr, currentBufferPtr, data.length);
	        /* eslint-disable-next-line no-useless-catch */
	      } catch (err) {
	        /* istanbul ignore next: difficult to make a test case for */
	        throw err
	      } finally {
	        currentParser = null;
	        currentBufferRef = null;
	      }

	      const offset = llhttp.llhttp_get_error_pos(this.ptr) - currentBufferPtr;

	      if (ret === constants.ERROR.PAUSED_UPGRADE) {
	        this.onUpgrade(data.slice(offset));
	      } else if (ret === constants.ERROR.PAUSED) {
	        this.paused = true;
	        socket.unshift(data.slice(offset));
	      } else if (ret !== constants.ERROR.OK) {
	        const ptr = llhttp.llhttp_get_error_reason(this.ptr);
	        let message = '';
	        /* istanbul ignore else: difficult to make a test case for */
	        if (ptr) {
	          const len = new Uint8Array(llhttp.memory.buffer, ptr).indexOf(0);
	          message =
	            'Response does not match the HTTP/1.1 protocol (' +
	            Buffer.from(llhttp.memory.buffer, ptr, len).toString() +
	            ')';
	        }
	        throw new HTTPParserError(message, constants.ERROR[ret], data.slice(offset))
	      }
	    } catch (err) {
	      util.destroy(socket, err);
	    }
	  }

	  destroy () {
	    assert(this.ptr != null);
	    assert(currentParser == null);

	    this.llhttp.llhttp_free(this.ptr);
	    this.ptr = null;

	    timers.clearTimeout(this.timeout);
	    this.timeout = null;
	    this.timeoutValue = null;
	    this.timeoutType = null;

	    this.paused = false;
	  }

	  onStatus (buf) {
	    this.statusText = buf.toString();
	  }

	  onMessageBegin () {
	    const { socket, client } = this;

	    /* istanbul ignore next: difficult to make a test case for */
	    if (socket.destroyed) {
	      return -1
	    }

	    const request = client[kQueue][client[kRunningIdx]];
	    if (!request) {
	      return -1
	    }
	    request.onResponseStarted();
	  }

	  onHeaderField (buf) {
	    const len = this.headers.length;

	    if ((len & 1) === 0) {
	      this.headers.push(buf);
	    } else {
	      this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);
	    }

	    this.trackHeader(buf.length);
	  }

	  onHeaderValue (buf) {
	    let len = this.headers.length;

	    if ((len & 1) === 1) {
	      this.headers.push(buf);
	      len += 1;
	    } else {
	      this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);
	    }

	    const key = this.headers[len - 2];
	    if (key.length === 10) {
	      const headerName = util.bufferToLowerCasedHeaderName(key);
	      if (headerName === 'keep-alive') {
	        this.keepAlive += buf.toString();
	      } else if (headerName === 'connection') {
	        this.connection += buf.toString();
	      }
	    } else if (key.length === 14 && util.bufferToLowerCasedHeaderName(key) === 'content-length') {
	      this.contentLength += buf.toString();
	    }

	    this.trackHeader(buf.length);
	  }

	  trackHeader (len) {
	    this.headersSize += len;
	    if (this.headersSize >= this.headersMaxSize) {
	      util.destroy(this.socket, new HeadersOverflowError());
	    }
	  }

	  onUpgrade (head) {
	    const { upgrade, client, socket, headers, statusCode } = this;

	    assert(upgrade);

	    const request = client[kQueue][client[kRunningIdx]];
	    assert(request);

	    assert(!socket.destroyed);
	    assert(socket === client[kSocket]);
	    assert(!this.paused);
	    assert(request.upgrade || request.method === 'CONNECT');

	    this.statusCode = null;
	    this.statusText = '';
	    this.shouldKeepAlive = null;

	    assert(this.headers.length % 2 === 0);
	    this.headers = [];
	    this.headersSize = 0;

	    socket.unshift(head);

	    socket[kParser].destroy();
	    socket[kParser] = null;

	    socket[kClient] = null;
	    socket[kError] = null;

	    removeAllListeners(socket);

	    client[kSocket] = null;
	    client[kHTTPContext] = null; // TODO (fix): This is hacky...
	    client[kQueue][client[kRunningIdx]++] = null;
	    client.emit('disconnect', client[kUrl], [client], new InformationalError('upgrade'));

	    try {
	      request.onUpgrade(statusCode, headers, socket);
	    } catch (err) {
	      util.destroy(socket, err);
	    }

	    client[kResume]();
	  }

	  onHeadersComplete (statusCode, upgrade, shouldKeepAlive) {
	    const { client, socket, headers, statusText } = this;

	    /* istanbul ignore next: difficult to make a test case for */
	    if (socket.destroyed) {
	      return -1
	    }

	    const request = client[kQueue][client[kRunningIdx]];

	    /* istanbul ignore next: difficult to make a test case for */
	    if (!request) {
	      return -1
	    }

	    assert(!this.upgrade);
	    assert(this.statusCode < 200);

	    if (statusCode === 100) {
	      util.destroy(socket, new SocketError('bad response', util.getSocketInfo(socket)));
	      return -1
	    }

	    /* this can only happen if server is misbehaving */
	    if (upgrade && !request.upgrade) {
	      util.destroy(socket, new SocketError('bad upgrade', util.getSocketInfo(socket)));
	      return -1
	    }

	    assert.strictEqual(this.timeoutType, TIMEOUT_HEADERS);

	    this.statusCode = statusCode;
	    this.shouldKeepAlive = (
	      shouldKeepAlive ||
	      // Override llhttp value which does not allow keepAlive for HEAD.
	      (request.method === 'HEAD' && !socket[kReset] && this.connection.toLowerCase() === 'keep-alive')
	    );

	    if (this.statusCode >= 200) {
	      const bodyTimeout = request.bodyTimeout != null
	        ? request.bodyTimeout
	        : client[kBodyTimeout];
	      this.setTimeout(bodyTimeout, TIMEOUT_BODY);
	    } else if (this.timeout) {
	      // istanbul ignore else: only for jest
	      if (this.timeout.refresh) {
	        this.timeout.refresh();
	      }
	    }

	    if (request.method === 'CONNECT') {
	      assert(client[kRunning] === 1);
	      this.upgrade = true;
	      return 2
	    }

	    if (upgrade) {
	      assert(client[kRunning] === 1);
	      this.upgrade = true;
	      return 2
	    }

	    assert(this.headers.length % 2 === 0);
	    this.headers = [];
	    this.headersSize = 0;

	    if (this.shouldKeepAlive && client[kPipelining]) {
	      const keepAliveTimeout = this.keepAlive ? util.parseKeepAliveTimeout(this.keepAlive) : null;

	      if (keepAliveTimeout != null) {
	        const timeout = Math.min(
	          keepAliveTimeout - client[kKeepAliveTimeoutThreshold],
	          client[kKeepAliveMaxTimeout]
	        );
	        if (timeout <= 0) {
	          socket[kReset] = true;
	        } else {
	          client[kKeepAliveTimeoutValue] = timeout;
	        }
	      } else {
	        client[kKeepAliveTimeoutValue] = client[kKeepAliveDefaultTimeout];
	      }
	    } else {
	      // Stop more requests from being dispatched.
	      socket[kReset] = true;
	    }

	    const pause = request.onHeaders(statusCode, headers, this.resume, statusText) === false;

	    if (request.aborted) {
	      return -1
	    }

	    if (request.method === 'HEAD') {
	      return 1
	    }

	    if (statusCode < 200) {
	      return 1
	    }

	    if (socket[kBlocking]) {
	      socket[kBlocking] = false;
	      client[kResume]();
	    }

	    return pause ? constants.ERROR.PAUSED : 0
	  }

	  onBody (buf) {
	    const { client, socket, statusCode, maxResponseSize } = this;

	    if (socket.destroyed) {
	      return -1
	    }

	    const request = client[kQueue][client[kRunningIdx]];
	    assert(request);

	    assert.strictEqual(this.timeoutType, TIMEOUT_BODY);
	    if (this.timeout) {
	      // istanbul ignore else: only for jest
	      if (this.timeout.refresh) {
	        this.timeout.refresh();
	      }
	    }

	    assert(statusCode >= 200);

	    if (maxResponseSize > -1 && this.bytesRead + buf.length > maxResponseSize) {
	      util.destroy(socket, new ResponseExceededMaxSizeError());
	      return -1
	    }

	    this.bytesRead += buf.length;

	    if (request.onData(buf) === false) {
	      return constants.ERROR.PAUSED
	    }
	  }

	  onMessageComplete () {
	    const { client, socket, statusCode, upgrade, headers, contentLength, bytesRead, shouldKeepAlive } = this;

	    if (socket.destroyed && (!statusCode || shouldKeepAlive)) {
	      return -1
	    }

	    if (upgrade) {
	      return
	    }

	    const request = client[kQueue][client[kRunningIdx]];
	    assert(request);

	    assert(statusCode >= 100);

	    this.statusCode = null;
	    this.statusText = '';
	    this.bytesRead = 0;
	    this.contentLength = '';
	    this.keepAlive = '';
	    this.connection = '';

	    assert(this.headers.length % 2 === 0);
	    this.headers = [];
	    this.headersSize = 0;

	    if (statusCode < 200) {
	      return
	    }

	    /* istanbul ignore next: should be handled by llhttp? */
	    if (request.method !== 'HEAD' && contentLength && bytesRead !== parseInt(contentLength, 10)) {
	      util.destroy(socket, new ResponseContentLengthMismatchError());
	      return -1
	    }

	    request.onComplete(headers);

	    client[kQueue][client[kRunningIdx]++] = null;

	    if (socket[kWriting]) {
	      assert.strictEqual(client[kRunning], 0);
	      // Response completed before request.
	      util.destroy(socket, new InformationalError('reset'));
	      return constants.ERROR.PAUSED
	    } else if (!shouldKeepAlive) {
	      util.destroy(socket, new InformationalError('reset'));
	      return constants.ERROR.PAUSED
	    } else if (socket[kReset] && client[kRunning] === 0) {
	      // Destroy socket once all requests have completed.
	      // The request at the tail of the pipeline is the one
	      // that requested reset and no further requests should
	      // have been queued since then.
	      util.destroy(socket, new InformationalError('reset'));
	      return constants.ERROR.PAUSED
	    } else if (client[kPipelining] == null || client[kPipelining] === 1) {
	      // We must wait a full event loop cycle to reuse this socket to make sure
	      // that non-spec compliant servers are not closing the connection even if they
	      // said they won't.
	      setImmediate(() => client[kResume]());
	    } else {
	      client[kResume]();
	    }
	  }
	}

	function onParserTimeout (parser) {
	  const { socket, timeoutType, client } = parser;

	  /* istanbul ignore else */
	  if (timeoutType === TIMEOUT_HEADERS) {
	    if (!socket[kWriting] || socket.writableNeedDrain || client[kRunning] > 1) {
	      assert(!parser.paused, 'cannot be paused while waiting for headers');
	      util.destroy(socket, new HeadersTimeoutError());
	    }
	  } else if (timeoutType === TIMEOUT_BODY) {
	    if (!parser.paused) {
	      util.destroy(socket, new BodyTimeoutError());
	    }
	  } else if (timeoutType === TIMEOUT_IDLE) {
	    assert(client[kRunning] === 0 && client[kKeepAliveTimeoutValue]);
	    util.destroy(socket, new InformationalError('socket idle timeout'));
	  }
	}

	async function connectH1 (client, socket) {
	  client[kSocket] = socket;

	  if (!llhttpInstance) {
	    llhttpInstance = await llhttpPromise;
	    llhttpPromise = null;
	  }

	  socket[kNoRef] = false;
	  socket[kWriting] = false;
	  socket[kReset] = false;
	  socket[kBlocking] = false;
	  socket[kParser] = new Parser(client, socket, llhttpInstance);

	  addListener(socket, 'error', function (err) {
	    const parser = this[kParser];

	    assert(err.code !== 'ERR_TLS_CERT_ALTNAME_INVALID');

	    // On Mac OS, we get an ECONNRESET even if there is a full body to be forwarded
	    // to the user.
	    if (err.code === 'ECONNRESET' && parser.statusCode && !parser.shouldKeepAlive) {
	      // We treat all incoming data so for as a valid response.
	      parser.onMessageComplete();
	      return
	    }

	    this[kError] = err;

	    this[kClient][kOnError](err);
	  });
	  addListener(socket, 'readable', function () {
	    const parser = this[kParser];

	    if (parser) {
	      parser.readMore();
	    }
	  });
	  addListener(socket, 'end', function () {
	    const parser = this[kParser];

	    if (parser.statusCode && !parser.shouldKeepAlive) {
	      // We treat all incoming data so far as a valid response.
	      parser.onMessageComplete();
	      return
	    }

	    util.destroy(this, new SocketError('other side closed', util.getSocketInfo(this)));
	  });
	  addListener(socket, 'close', function () {
	    const client = this[kClient];
	    const parser = this[kParser];

	    if (parser) {
	      if (!this[kError] && parser.statusCode && !parser.shouldKeepAlive) {
	        // We treat all incoming data so far as a valid response.
	        parser.onMessageComplete();
	      }

	      this[kParser].destroy();
	      this[kParser] = null;
	    }

	    const err = this[kError] || new SocketError('closed', util.getSocketInfo(this));

	    client[kSocket] = null;
	    client[kHTTPContext] = null; // TODO (fix): This is hacky...

	    if (client.destroyed) {
	      assert(client[kPending] === 0);

	      // Fail entire queue.
	      const requests = client[kQueue].splice(client[kRunningIdx]);
	      for (let i = 0; i < requests.length; i++) {
	        const request = requests[i];
	        util.errorRequest(client, request, err);
	      }
	    } else if (client[kRunning] > 0 && err.code !== 'UND_ERR_INFO') {
	      // Fail head of pipeline.
	      const request = client[kQueue][client[kRunningIdx]];
	      client[kQueue][client[kRunningIdx]++] = null;

	      util.errorRequest(client, request, err);
	    }

	    client[kPendingIdx] = client[kRunningIdx];

	    assert(client[kRunning] === 0);

	    client.emit('disconnect', client[kUrl], [client], err);

	    client[kResume]();
	  });

	  let closed = false;
	  socket.on('close', () => {
	    closed = true;
	  });

	  return {
	    version: 'h1',
	    defaultPipelining: 1,
	    write (...args) {
	      return writeH1(client, ...args)
	    },
	    resume () {
	      resumeH1(client);
	    },
	    destroy (err, callback) {
	      if (closed) {
	        queueMicrotask(callback);
	      } else {
	        socket.destroy(err).on('close', callback);
	      }
	    },
	    get destroyed () {
	      return socket.destroyed
	    },
	    busy (request) {
	      if (socket[kWriting] || socket[kReset] || socket[kBlocking]) {
	        return true
	      }

	      if (request) {
	        if (client[kRunning] > 0 && !request.idempotent) {
	          // Non-idempotent request cannot be retried.
	          // Ensure that no other requests are inflight and
	          // could cause failure.
	          return true
	        }

	        if (client[kRunning] > 0 && (request.upgrade || request.method === 'CONNECT')) {
	          // Don't dispatch an upgrade until all preceding requests have completed.
	          // A misbehaving server might upgrade the connection before all pipelined
	          // request has completed.
	          return true
	        }

	        if (client[kRunning] > 0 && util.bodyLength(request.body) !== 0 &&
	          (util.isStream(request.body) || util.isAsyncIterable(request.body) || util.isFormDataLike(request.body))) {
	          // Request with stream or iterator body can error while other requests
	          // are inflight and indirectly error those as well.
	          // Ensure this doesn't happen by waiting for inflight
	          // to complete before dispatching.

	          // Request with stream or iterator body cannot be retried.
	          // Ensure that no other requests are inflight and
	          // could cause failure.
	          return true
	        }
	      }

	      return false
	    }
	  }
	}

	function resumeH1 (client) {
	  const socket = client[kSocket];

	  if (socket && !socket.destroyed) {
	    if (client[kSize] === 0) {
	      if (!socket[kNoRef] && socket.unref) {
	        socket.unref();
	        socket[kNoRef] = true;
	      }
	    } else if (socket[kNoRef] && socket.ref) {
	      socket.ref();
	      socket[kNoRef] = false;
	    }

	    if (client[kSize] === 0) {
	      if (socket[kParser].timeoutType !== TIMEOUT_IDLE) {
	        socket[kParser].setTimeout(client[kKeepAliveTimeoutValue], TIMEOUT_IDLE);
	      }
	    } else if (client[kRunning] > 0 && socket[kParser].statusCode < 200) {
	      if (socket[kParser].timeoutType !== TIMEOUT_HEADERS) {
	        const request = client[kQueue][client[kRunningIdx]];
	        const headersTimeout = request.headersTimeout != null
	          ? request.headersTimeout
	          : client[kHeadersTimeout];
	        socket[kParser].setTimeout(headersTimeout, TIMEOUT_HEADERS);
	      }
	    }
	  }
	}

	// https://www.rfc-editor.org/rfc/rfc7230#section-3.3.2
	function shouldSendContentLength (method) {
	  return method !== 'GET' && method !== 'HEAD' && method !== 'OPTIONS' && method !== 'TRACE' && method !== 'CONNECT'
	}

	function writeH1 (client, request) {
	  const { method, path, host, upgrade, blocking, reset } = request;

	  let { body, headers, contentLength } = request;

	  // https://tools.ietf.org/html/rfc7231#section-4.3.1
	  // https://tools.ietf.org/html/rfc7231#section-4.3.2
	  // https://tools.ietf.org/html/rfc7231#section-4.3.5

	  // Sending a payload body on a request that does not
	  // expect it can cause undefined behavior on some
	  // servers and corrupt connection state. Do not
	  // re-use the connection for further requests.

	  const expectsPayload = (
	    method === 'PUT' ||
	    method === 'POST' ||
	    method === 'PATCH'
	  );

	  if (util.isFormDataLike(body)) {
	    if (!extractBody) {
	      extractBody = requireBody().extractBody;
	    }

	    const [bodyStream, contentType] = extractBody(body);
	    if (request.contentType == null) {
	      headers.push('content-type', contentType);
	    }
	    body = bodyStream.stream;
	    contentLength = bodyStream.length;
	  } else if (util.isBlobLike(body) && request.contentType == null && body.type) {
	    headers.push('content-type', body.type);
	  }

	  if (body && typeof body.read === 'function') {
	    // Try to read EOF in order to get length.
	    body.read(0);
	  }

	  const bodyLength = util.bodyLength(body);

	  contentLength = bodyLength ?? contentLength;

	  if (contentLength === null) {
	    contentLength = request.contentLength;
	  }

	  if (contentLength === 0 && !expectsPayload) {
	    // https://tools.ietf.org/html/rfc7230#section-3.3.2
	    // A user agent SHOULD NOT send a Content-Length header field when
	    // the request message does not contain a payload body and the method
	    // semantics do not anticipate such a body.

	    contentLength = null;
	  }

	  // https://github.com/nodejs/undici/issues/2046
	  // A user agent may send a Content-Length header with 0 value, this should be allowed.
	  if (shouldSendContentLength(method) && contentLength > 0 && request.contentLength !== null && request.contentLength !== contentLength) {
	    if (client[kStrictContentLength]) {
	      util.errorRequest(client, request, new RequestContentLengthMismatchError());
	      return false
	    }

	    process.emitWarning(new RequestContentLengthMismatchError());
	  }

	  const socket = client[kSocket];

	  const abort = (err) => {
	    if (request.aborted || request.completed) {
	      return
	    }

	    util.errorRequest(client, request, err || new RequestAbortedError());

	    util.destroy(body);
	    util.destroy(socket, new InformationalError('aborted'));
	  };

	  try {
	    request.onConnect(abort);
	  } catch (err) {
	    util.errorRequest(client, request, err);
	  }

	  if (request.aborted) {
	    return false
	  }

	  if (method === 'HEAD') {
	    // https://github.com/mcollina/undici/issues/258
	    // Close after a HEAD request to interop with misbehaving servers
	    // that may send a body in the response.

	    socket[kReset] = true;
	  }

	  if (upgrade || method === 'CONNECT') {
	    // On CONNECT or upgrade, block pipeline from dispatching further
	    // requests on this connection.

	    socket[kReset] = true;
	  }

	  if (reset != null) {
	    socket[kReset] = reset;
	  }

	  if (client[kMaxRequests] && socket[kCounter]++ >= client[kMaxRequests]) {
	    socket[kReset] = true;
	  }

	  if (blocking) {
	    socket[kBlocking] = true;
	  }

	  let header = `${method} ${path} HTTP/1.1\r\n`;

	  if (typeof host === 'string') {
	    header += `host: ${host}\r\n`;
	  } else {
	    header += client[kHostHeader];
	  }

	  if (upgrade) {
	    header += `connection: upgrade\r\nupgrade: ${upgrade}\r\n`;
	  } else if (client[kPipelining] && !socket[kReset]) {
	    header += 'connection: keep-alive\r\n';
	  } else {
	    header += 'connection: close\r\n';
	  }

	  if (Array.isArray(headers)) {
	    for (let n = 0; n < headers.length; n += 2) {
	      const key = headers[n + 0];
	      const val = headers[n + 1];

	      if (Array.isArray(val)) {
	        for (let i = 0; i < val.length; i++) {
	          header += `${key}: ${val[i]}\r\n`;
	        }
	      } else {
	        header += `${key}: ${val}\r\n`;
	      }
	    }
	  }

	  if (channels.sendHeaders.hasSubscribers) {
	    channels.sendHeaders.publish({ request, headers: header, socket });
	  }

	  /* istanbul ignore else: assertion */
	  if (!body || bodyLength === 0) {
	    writeBuffer(abort, null, client, request, socket, contentLength, header, expectsPayload);
	  } else if (util.isBuffer(body)) {
	    writeBuffer(abort, body, client, request, socket, contentLength, header, expectsPayload);
	  } else if (util.isBlobLike(body)) {
	    if (typeof body.stream === 'function') {
	      writeIterable(abort, body.stream(), client, request, socket, contentLength, header, expectsPayload);
	    } else {
	      writeBlob(abort, body, client, request, socket, contentLength, header, expectsPayload);
	    }
	  } else if (util.isStream(body)) {
	    writeStream(abort, body, client, request, socket, contentLength, header, expectsPayload);
	  } else if (util.isIterable(body)) {
	    writeIterable(abort, body, client, request, socket, contentLength, header, expectsPayload);
	  } else {
	    assert(false);
	  }

	  return true
	}

	function writeStream (abort, body, client, request, socket, contentLength, header, expectsPayload) {
	  assert(contentLength !== 0 || client[kRunning] === 0, 'stream body cannot be pipelined');

	  let finished = false;

	  const writer = new AsyncWriter({ abort, socket, request, contentLength, client, expectsPayload, header });

	  const onData = function (chunk) {
	    if (finished) {
	      return
	    }

	    try {
	      if (!writer.write(chunk) && this.pause) {
	        this.pause();
	      }
	    } catch (err) {
	      util.destroy(this, err);
	    }
	  };
	  const onDrain = function () {
	    if (finished) {
	      return
	    }

	    if (body.resume) {
	      body.resume();
	    }
	  };
	  const onClose = function () {
	    // 'close' might be emitted *before* 'error' for
	    // broken streams. Wait a tick to avoid this case.
	    queueMicrotask(() => {
	      // It's only safe to remove 'error' listener after
	      // 'close'.
	      body.removeListener('error', onFinished);
	    });

	    if (!finished) {
	      const err = new RequestAbortedError();
	      queueMicrotask(() => onFinished(err));
	    }
	  };
	  const onFinished = function (err) {
	    if (finished) {
	      return
	    }

	    finished = true;

	    assert(socket.destroyed || (socket[kWriting] && client[kRunning] <= 1));

	    socket
	      .off('drain', onDrain)
	      .off('error', onFinished);

	    body
	      .removeListener('data', onData)
	      .removeListener('end', onFinished)
	      .removeListener('close', onClose);

	    if (!err) {
	      try {
	        writer.end();
	      } catch (er) {
	        err = er;
	      }
	    }

	    writer.destroy(err);

	    if (err && (err.code !== 'UND_ERR_INFO' || err.message !== 'reset')) {
	      util.destroy(body, err);
	    } else {
	      util.destroy(body);
	    }
	  };

	  body
	    .on('data', onData)
	    .on('end', onFinished)
	    .on('error', onFinished)
	    .on('close', onClose);

	  if (body.resume) {
	    body.resume();
	  }

	  socket
	    .on('drain', onDrain)
	    .on('error', onFinished);

	  if (body.errorEmitted ?? body.errored) {
	    setImmediate(() => onFinished(body.errored));
	  } else if (body.endEmitted ?? body.readableEnded) {
	    setImmediate(() => onFinished(null));
	  }

	  if (body.closeEmitted ?? body.closed) {
	    setImmediate(onClose);
	  }
	}

	function writeBuffer (abort, body, client, request, socket, contentLength, header, expectsPayload) {
	  try {
	    if (!body) {
	      if (contentLength === 0) {
	        socket.write(`${header}content-length: 0\r\n\r\n`, 'latin1');
	      } else {
	        assert(contentLength === null, 'no body must not have content length');
	        socket.write(`${header}\r\n`, 'latin1');
	      }
	    } else if (util.isBuffer(body)) {
	      assert(contentLength === body.byteLength, 'buffer body must have content length');

	      socket.cork();
	      socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, 'latin1');
	      socket.write(body);
	      socket.uncork();
	      request.onBodySent(body);

	      if (!expectsPayload) {
	        socket[kReset] = true;
	      }
	    }
	    request.onRequestSent();

	    client[kResume]();
	  } catch (err) {
	    abort(err);
	  }
	}

	async function writeBlob (abort, body, client, request, socket, contentLength, header, expectsPayload) {
	  assert(contentLength === body.size, 'blob body must have content length');

	  try {
	    if (contentLength != null && contentLength !== body.size) {
	      throw new RequestContentLengthMismatchError()
	    }

	    const buffer = Buffer.from(await body.arrayBuffer());

	    socket.cork();
	    socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, 'latin1');
	    socket.write(buffer);
	    socket.uncork();

	    request.onBodySent(buffer);
	    request.onRequestSent();

	    if (!expectsPayload) {
	      socket[kReset] = true;
	    }

	    client[kResume]();
	  } catch (err) {
	    abort(err);
	  }
	}

	async function writeIterable (abort, body, client, request, socket, contentLength, header, expectsPayload) {
	  assert(contentLength !== 0 || client[kRunning] === 0, 'iterator body cannot be pipelined');

	  let callback = null;
	  function onDrain () {
	    if (callback) {
	      const cb = callback;
	      callback = null;
	      cb();
	    }
	  }

	  const waitForDrain = () => new Promise((resolve, reject) => {
	    assert(callback === null);

	    if (socket[kError]) {
	      reject(socket[kError]);
	    } else {
	      callback = resolve;
	    }
	  });

	  socket
	    .on('close', onDrain)
	    .on('drain', onDrain);

	  const writer = new AsyncWriter({ abort, socket, request, contentLength, client, expectsPayload, header });
	  try {
	    // It's up to the user to somehow abort the async iterable.
	    for await (const chunk of body) {
	      if (socket[kError]) {
	        throw socket[kError]
	      }

	      if (!writer.write(chunk)) {
	        await waitForDrain();
	      }
	    }

	    writer.end();
	  } catch (err) {
	    writer.destroy(err);
	  } finally {
	    socket
	      .off('close', onDrain)
	      .off('drain', onDrain);
	  }
	}

	class AsyncWriter {
	  constructor ({ abort, socket, request, contentLength, client, expectsPayload, header }) {
	    this.socket = socket;
	    this.request = request;
	    this.contentLength = contentLength;
	    this.client = client;
	    this.bytesWritten = 0;
	    this.expectsPayload = expectsPayload;
	    this.header = header;
	    this.abort = abort;

	    socket[kWriting] = true;
	  }

	  write (chunk) {
	    const { socket, request, contentLength, client, bytesWritten, expectsPayload, header } = this;

	    if (socket[kError]) {
	      throw socket[kError]
	    }

	    if (socket.destroyed) {
	      return false
	    }

	    const len = Buffer.byteLength(chunk);
	    if (!len) {
	      return true
	    }

	    // We should defer writing chunks.
	    if (contentLength !== null && bytesWritten + len > contentLength) {
	      if (client[kStrictContentLength]) {
	        throw new RequestContentLengthMismatchError()
	      }

	      process.emitWarning(new RequestContentLengthMismatchError());
	    }

	    socket.cork();

	    if (bytesWritten === 0) {
	      if (!expectsPayload) {
	        socket[kReset] = true;
	      }

	      if (contentLength === null) {
	        socket.write(`${header}transfer-encoding: chunked\r\n`, 'latin1');
	      } else {
	        socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, 'latin1');
	      }
	    }

	    if (contentLength === null) {
	      socket.write(`\r\n${len.toString(16)}\r\n`, 'latin1');
	    }

	    this.bytesWritten += len;

	    const ret = socket.write(chunk);

	    socket.uncork();

	    request.onBodySent(chunk);

	    if (!ret) {
	      if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {
	        // istanbul ignore else: only for jest
	        if (socket[kParser].timeout.refresh) {
	          socket[kParser].timeout.refresh();
	        }
	      }
	    }

	    return ret
	  }

	  end () {
	    const { socket, contentLength, client, bytesWritten, expectsPayload, header, request } = this;
	    request.onRequestSent();

	    socket[kWriting] = false;

	    if (socket[kError]) {
	      throw socket[kError]
	    }

	    if (socket.destroyed) {
	      return
	    }

	    if (bytesWritten === 0) {
	      if (expectsPayload) {
	        // https://tools.ietf.org/html/rfc7230#section-3.3.2
	        // A user agent SHOULD send a Content-Length in a request message when
	        // no Transfer-Encoding is sent and the request method defines a meaning
	        // for an enclosed payload body.

	        socket.write(`${header}content-length: 0\r\n\r\n`, 'latin1');
	      } else {
	        socket.write(`${header}\r\n`, 'latin1');
	      }
	    } else if (contentLength === null) {
	      socket.write('\r\n0\r\n\r\n', 'latin1');
	    }

	    if (contentLength !== null && bytesWritten !== contentLength) {
	      if (client[kStrictContentLength]) {
	        throw new RequestContentLengthMismatchError()
	      } else {
	        process.emitWarning(new RequestContentLengthMismatchError());
	      }
	    }

	    if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {
	      // istanbul ignore else: only for jest
	      if (socket[kParser].timeout.refresh) {
	        socket[kParser].timeout.refresh();
	      }
	    }

	    client[kResume]();
	  }

	  destroy (err) {
	    const { socket, client, abort } = this;

	    socket[kWriting] = false;

	    if (err) {
	      assert(client[kRunning] <= 1, 'pipeline should only contain this request');
	      abort(err);
	    }
	  }
	}

	clientH1 = connectH1;
	return clientH1;
}

var clientH2;
var hasRequiredClientH2;

function requireClientH2 () {
	if (hasRequiredClientH2) return clientH2;
	hasRequiredClientH2 = 1;

	const assert = require$$0$7;
	const { pipeline } = require$$0$8;
	const util = requireUtil$8();
	const {
	  RequestContentLengthMismatchError,
	  RequestAbortedError,
	  SocketError,
	  InformationalError
	} = requireErrors();
	const {
	  kUrl,
	  kReset,
	  kClient,
	  kRunning,
	  kPending,
	  kQueue,
	  kPendingIdx,
	  kRunningIdx,
	  kError,
	  kSocket,
	  kStrictContentLength,
	  kOnError,
	  kMaxConcurrentStreams,
	  kHTTP2Session,
	  kResume
	} = requireSymbols$5();

	const kOpenStreams = Symbol('open streams');

	// Experimental
	let h2ExperimentalWarned = false;

	/** @type {import('http2')} */
	let http2;
	try {
	  http2 = require('node:http2');
	} catch {
	  // @ts-ignore
	  http2 = { constants: {} };
	}

	const {
	  constants: {
	    HTTP2_HEADER_AUTHORITY,
	    HTTP2_HEADER_METHOD,
	    HTTP2_HEADER_PATH,
	    HTTP2_HEADER_SCHEME,
	    HTTP2_HEADER_CONTENT_LENGTH,
	    HTTP2_HEADER_EXPECT,
	    HTTP2_HEADER_STATUS
	  }
	} = http2;

	function parseH2Headers (headers) {
	  const result = [];

	  for (const [name, value] of Object.entries(headers)) {
	    // h2 may concat the header value by array
	    // e.g. Set-Cookie
	    if (Array.isArray(value)) {
	      for (const subvalue of value) {
	        // we need to provide each header value of header name
	        // because the headers handler expect name-value pair
	        result.push(Buffer.from(name), Buffer.from(subvalue));
	      }
	    } else {
	      result.push(Buffer.from(name), Buffer.from(value));
	    }
	  }

	  return result
	}

	async function connectH2 (client, socket) {
	  client[kSocket] = socket;

	  if (!h2ExperimentalWarned) {
	    h2ExperimentalWarned = true;
	    process.emitWarning('H2 support is experimental, expect them to change at any time.', {
	      code: 'UNDICI-H2'
	    });
	  }

	  const session = http2.connect(client[kUrl], {
	    createConnection: () => socket,
	    peerMaxConcurrentStreams: client[kMaxConcurrentStreams]
	  });

	  session[kOpenStreams] = 0;
	  session[kClient] = client;
	  session[kSocket] = socket;

	  util.addListener(session, 'error', onHttp2SessionError);
	  util.addListener(session, 'frameError', onHttp2FrameError);
	  util.addListener(session, 'end', onHttp2SessionEnd);
	  util.addListener(session, 'goaway', onHTTP2GoAway);
	  util.addListener(session, 'close', function () {
	    const { [kClient]: client } = this;
	    const { [kSocket]: socket } = client;

	    const err = this[kSocket][kError] || this[kError] || new SocketError('closed', util.getSocketInfo(socket));

	    client[kHTTP2Session] = null;

	    if (client.destroyed) {
	      assert(client[kPending] === 0);

	      // Fail entire queue.
	      const requests = client[kQueue].splice(client[kRunningIdx]);
	      for (let i = 0; i < requests.length; i++) {
	        const request = requests[i];
	        util.errorRequest(client, request, err);
	      }
	    }
	  });

	  session.unref();

	  client[kHTTP2Session] = session;
	  socket[kHTTP2Session] = session;

	  util.addListener(socket, 'error', function (err) {
	    assert(err.code !== 'ERR_TLS_CERT_ALTNAME_INVALID');

	    this[kError] = err;

	    this[kClient][kOnError](err);
	  });

	  util.addListener(socket, 'end', function () {
	    util.destroy(this, new SocketError('other side closed', util.getSocketInfo(this)));
	  });

	  util.addListener(socket, 'close', function () {
	    const err = this[kError] || new SocketError('closed', util.getSocketInfo(this));

	    client[kSocket] = null;

	    if (this[kHTTP2Session] != null) {
	      this[kHTTP2Session].destroy(err);
	    }

	    client[kPendingIdx] = client[kRunningIdx];

	    assert(client[kRunning] === 0);

	    client.emit('disconnect', client[kUrl], [client], err);

	    client[kResume]();
	  });

	  let closed = false;
	  socket.on('close', () => {
	    closed = true;
	  });

	  return {
	    version: 'h2',
	    defaultPipelining: Infinity,
	    write (...args) {
	      // TODO (fix): return
	      writeH2(client, ...args);
	    },
	    resume () {

	    },
	    destroy (err, callback) {
	      if (closed) {
	        queueMicrotask(callback);
	      } else {
	        // Destroying the socket will trigger the session close
	        socket.destroy(err).on('close', callback);
	      }
	    },
	    get destroyed () {
	      return socket.destroyed
	    },
	    busy () {
	      return false
	    }
	  }
	}

	function onHttp2SessionError (err) {
	  assert(err.code !== 'ERR_TLS_CERT_ALTNAME_INVALID');

	  this[kSocket][kError] = err;
	  this[kClient][kOnError](err);
	}

	function onHttp2FrameError (type, code, id) {
	  if (id === 0) {
	    const err = new InformationalError(`HTTP/2: "frameError" received - type ${type}, code ${code}`);
	    this[kSocket][kError] = err;
	    this[kClient][kOnError](err);
	  }
	}

	function onHttp2SessionEnd () {
	  const err = new SocketError('other side closed', util.getSocketInfo(this[kSocket]));
	  this.destroy(err);
	  util.destroy(this[kSocket], err);
	}

	/**
	 * This is the root cause of #3011
	 * We need to handle GOAWAY frames properly, and trigger the session close
	 * along with the socket right away
	 */
	function onHTTP2GoAway (code) {
	  const err = new RequestAbortedError(`HTTP/2: "GOAWAY" frame received with code ${code}`);

	  // We need to trigger the close cycle right away
	  // We need to destroy the session and the socket
	  // Requests should be failed with the error after the current one is handled
	  this[kSocket][kError] = err;
	  this[kClient][kOnError](err);

	  this.unref();

	  util.destroy(this[kSocket], err);
	}

	// https://www.rfc-editor.org/rfc/rfc7230#section-3.3.2
	function shouldSendContentLength (method) {
	  return method !== 'GET' && method !== 'HEAD' && method !== 'OPTIONS' && method !== 'TRACE' && method !== 'CONNECT'
	}

	function writeH2 (client, request) {
	  const session = client[kHTTP2Session];
	  const { body, method, path, host, upgrade, expectContinue, signal, headers: reqHeaders } = request;

	  if (upgrade) {
	    util.errorRequest(client, request, new Error('Upgrade not supported for H2'));
	    return false
	  }

	  if (request.aborted) {
	    return false
	  }

	  const headers = {};
	  for (let n = 0; n < reqHeaders.length; n += 2) {
	    const key = reqHeaders[n + 0];
	    const val = reqHeaders[n + 1];

	    if (Array.isArray(val)) {
	      for (let i = 0; i < val.length; i++) {
	        if (headers[key]) {
	          headers[key] += `,${val[i]}`;
	        } else {
	          headers[key] = val[i];
	        }
	      }
	    } else {
	      headers[key] = val;
	    }
	  }

	  /** @type {import('node:http2').ClientHttp2Stream} */
	  let stream;

	  const { hostname, port } = client[kUrl];

	  headers[HTTP2_HEADER_AUTHORITY] = host || `${hostname}${port ? `:${port}` : ''}`;
	  headers[HTTP2_HEADER_METHOD] = method;

	  const abort = (err) => {
	    if (request.aborted || request.completed) {
	      return
	    }

	    err = err || new RequestAbortedError();

	    util.errorRequest(client, request, err);

	    if (stream != null) {
	      util.destroy(stream, err);
	    }

	    // We do not destroy the socket as we can continue using the session
	    // the stream get's destroyed and the session remains to create new streams
	    util.destroy(body, err);
	  };

	  try {
	    // We are already connected, streams are pending.
	    // We can call on connect, and wait for abort
	    request.onConnect(abort);
	  } catch (err) {
	    util.errorRequest(client, request, err);
	  }

	  if (method === 'CONNECT') {
	    session.ref();
	    // We are already connected, streams are pending, first request
	    // will create a new stream. We trigger a request to create the stream and wait until
	    // `ready` event is triggered
	    // We disabled endStream to allow the user to write to the stream
	    stream = session.request(headers, { endStream: false, signal });

	    if (stream.id && !stream.pending) {
	      request.onUpgrade(null, null, stream);
	      ++session[kOpenStreams];
	    } else {
	      stream.once('ready', () => {
	        request.onUpgrade(null, null, stream);
	        ++session[kOpenStreams];
	      });
	    }

	    stream.once('close', () => {
	      session[kOpenStreams] -= 1;
	      if (session[kOpenStreams] === 0) session.unref();
	    });

	    return true
	  }

	  // https://tools.ietf.org/html/rfc7540#section-8.3
	  // :path and :scheme headers must be omitted when sending CONNECT

	  headers[HTTP2_HEADER_PATH] = path;
	  headers[HTTP2_HEADER_SCHEME] = 'https';

	  // https://tools.ietf.org/html/rfc7231#section-4.3.1
	  // https://tools.ietf.org/html/rfc7231#section-4.3.2
	  // https://tools.ietf.org/html/rfc7231#section-4.3.5

	  // Sending a payload body on a request that does not
	  // expect it can cause undefined behavior on some
	  // servers and corrupt connection state. Do not
	  // re-use the connection for further requests.

	  const expectsPayload = (
	    method === 'PUT' ||
	    method === 'POST' ||
	    method === 'PATCH'
	  );

	  if (body && typeof body.read === 'function') {
	    // Try to read EOF in order to get length.
	    body.read(0);
	  }

	  let contentLength = util.bodyLength(body);

	  if (contentLength == null) {
	    contentLength = request.contentLength;
	  }

	  if (contentLength === 0 || !expectsPayload) {
	    // https://tools.ietf.org/html/rfc7230#section-3.3.2
	    // A user agent SHOULD NOT send a Content-Length header field when
	    // the request message does not contain a payload body and the method
	    // semantics do not anticipate such a body.

	    contentLength = null;
	  }

	  // https://github.com/nodejs/undici/issues/2046
	  // A user agent may send a Content-Length header with 0 value, this should be allowed.
	  if (shouldSendContentLength(method) && contentLength > 0 && request.contentLength != null && request.contentLength !== contentLength) {
	    if (client[kStrictContentLength]) {
	      util.errorRequest(client, request, new RequestContentLengthMismatchError());
	      return false
	    }

	    process.emitWarning(new RequestContentLengthMismatchError());
	  }

	  if (contentLength != null) {
	    assert(body, 'no body must not have content length');
	    headers[HTTP2_HEADER_CONTENT_LENGTH] = `${contentLength}`;
	  }

	  session.ref();

	  const shouldEndStream = method === 'GET' || method === 'HEAD' || body === null;
	  if (expectContinue) {
	    headers[HTTP2_HEADER_EXPECT] = '100-continue';
	    stream = session.request(headers, { endStream: shouldEndStream, signal });

	    stream.once('continue', writeBodyH2);
	  } else {
	    stream = session.request(headers, {
	      endStream: shouldEndStream,
	      signal
	    });
	    writeBodyH2();
	  }

	  // Increment counter as we have new streams open
	  ++session[kOpenStreams];

	  stream.once('response', headers => {
	    const { [HTTP2_HEADER_STATUS]: statusCode, ...realHeaders } = headers;
	    request.onResponseStarted();

	    // Due to the stream nature, it is possible we face a race condition
	    // where the stream has been assigned, but the request has been aborted
	    // the request remains in-flight and headers hasn't been received yet
	    // for those scenarios, best effort is to destroy the stream immediately
	    // as there's no value to keep it open.
	    if (request.aborted) {
	      const err = new RequestAbortedError();
	      util.errorRequest(client, request, err);
	      util.destroy(stream, err);
	      return
	    }

	    if (request.onHeaders(Number(statusCode), parseH2Headers(realHeaders), stream.resume.bind(stream), '') === false) {
	      stream.pause();
	    }

	    stream.on('data', (chunk) => {
	      if (request.onData(chunk) === false) {
	        stream.pause();
	      }
	    });
	  });

	  stream.once('end', () => {
	    // When state is null, it means we haven't consumed body and the stream still do not have
	    // a state.
	    // Present specially when using pipeline or stream
	    if (stream.state?.state == null || stream.state.state < 6) {
	      request.onComplete([]);
	      return
	    }

	    // Stream is closed or half-closed-remote (6), decrement counter and cleanup
	    // It does not have sense to continue working with the stream as we do not
	    // have yet RST_STREAM support on client-side
	    if (session[kOpenStreams] === 0) {
	      session.unref();
	    }

	    abort(new InformationalError('HTTP/2: stream half-closed (remote)'));
	  });

	  stream.once('close', () => {
	    session[kOpenStreams] -= 1;
	    if (session[kOpenStreams] === 0) {
	      session.unref();
	    }
	  });

	  stream.once('error', function (err) {
	    abort(err);
	  });

	  stream.once('frameError', (type, code) => {
	    abort(new InformationalError(`HTTP/2: "frameError" received - type ${type}, code ${code}`));
	  });

	  // stream.on('aborted', () => {
	  //   // TODO(HTTP/2): Support aborted
	  // })

	  // stream.on('timeout', () => {
	  //   // TODO(HTTP/2): Support timeout
	  // })

	  // stream.on('push', headers => {
	  //   // TODO(HTTP/2): Support push
	  // })

	  // stream.on('trailers', headers => {
	  //   // TODO(HTTP/2): Support trailers
	  // })

	  return true

	  function writeBodyH2 () {
	    /* istanbul ignore else: assertion */
	    if (!body || contentLength === 0) {
	      writeBuffer(
	        abort,
	        stream,
	        null,
	        client,
	        request,
	        client[kSocket],
	        contentLength,
	        expectsPayload
	      );
	    } else if (util.isBuffer(body)) {
	      writeBuffer(
	        abort,
	        stream,
	        body,
	        client,
	        request,
	        client[kSocket],
	        contentLength,
	        expectsPayload
	      );
	    } else if (util.isBlobLike(body)) {
	      if (typeof body.stream === 'function') {
	        writeIterable(
	          abort,
	          stream,
	          body.stream(),
	          client,
	          request,
	          client[kSocket],
	          contentLength,
	          expectsPayload
	        );
	      } else {
	        writeBlob(
	          abort,
	          stream,
	          body,
	          client,
	          request,
	          client[kSocket],
	          contentLength,
	          expectsPayload
	        );
	      }
	    } else if (util.isStream(body)) {
	      writeStream(
	        abort,
	        client[kSocket],
	        expectsPayload,
	        stream,
	        body,
	        client,
	        request,
	        contentLength
	      );
	    } else if (util.isIterable(body)) {
	      writeIterable(
	        abort,
	        stream,
	        body,
	        client,
	        request,
	        client[kSocket],
	        contentLength,
	        expectsPayload
	      );
	    } else {
	      assert(false);
	    }
	  }
	}

	function writeBuffer (abort, h2stream, body, client, request, socket, contentLength, expectsPayload) {
	  try {
	    if (body != null && util.isBuffer(body)) {
	      assert(contentLength === body.byteLength, 'buffer body must have content length');
	      h2stream.cork();
	      h2stream.write(body);
	      h2stream.uncork();
	      h2stream.end();

	      request.onBodySent(body);
	    }

	    if (!expectsPayload) {
	      socket[kReset] = true;
	    }

	    request.onRequestSent();
	    client[kResume]();
	  } catch (error) {
	    abort(error);
	  }
	}

	function writeStream (abort, socket, expectsPayload, h2stream, body, client, request, contentLength) {
	  assert(contentLength !== 0 || client[kRunning] === 0, 'stream body cannot be pipelined');

	  // For HTTP/2, is enough to pipe the stream
	  const pipe = pipeline(
	    body,
	    h2stream,
	    (err) => {
	      if (err) {
	        util.destroy(pipe, err);
	        abort(err);
	      } else {
	        util.removeAllListeners(pipe);
	        request.onRequestSent();

	        if (!expectsPayload) {
	          socket[kReset] = true;
	        }

	        client[kResume]();
	      }
	    }
	  );

	  util.addListener(pipe, 'data', onPipeData);

	  function onPipeData (chunk) {
	    request.onBodySent(chunk);
	  }
	}

	async function writeBlob (abort, h2stream, body, client, request, socket, contentLength, expectsPayload) {
	  assert(contentLength === body.size, 'blob body must have content length');

	  try {
	    if (contentLength != null && contentLength !== body.size) {
	      throw new RequestContentLengthMismatchError()
	    }

	    const buffer = Buffer.from(await body.arrayBuffer());

	    h2stream.cork();
	    h2stream.write(buffer);
	    h2stream.uncork();
	    h2stream.end();

	    request.onBodySent(buffer);
	    request.onRequestSent();

	    if (!expectsPayload) {
	      socket[kReset] = true;
	    }

	    client[kResume]();
	  } catch (err) {
	    abort(err);
	  }
	}

	async function writeIterable (abort, h2stream, body, client, request, socket, contentLength, expectsPayload) {
	  assert(contentLength !== 0 || client[kRunning] === 0, 'iterator body cannot be pipelined');

	  let callback = null;
	  function onDrain () {
	    if (callback) {
	      const cb = callback;
	      callback = null;
	      cb();
	    }
	  }

	  const waitForDrain = () => new Promise((resolve, reject) => {
	    assert(callback === null);

	    if (socket[kError]) {
	      reject(socket[kError]);
	    } else {
	      callback = resolve;
	    }
	  });

	  h2stream
	    .on('close', onDrain)
	    .on('drain', onDrain);

	  try {
	    // It's up to the user to somehow abort the async iterable.
	    for await (const chunk of body) {
	      if (socket[kError]) {
	        throw socket[kError]
	      }

	      const res = h2stream.write(chunk);
	      request.onBodySent(chunk);
	      if (!res) {
	        await waitForDrain();
	      }
	    }

	    h2stream.end();

	    request.onRequestSent();

	    if (!expectsPayload) {
	      socket[kReset] = true;
	    }

	    client[kResume]();
	  } catch (err) {
	    abort(err);
	  } finally {
	    h2stream
	      .off('close', onDrain)
	      .off('drain', onDrain);
	  }
	}

	clientH2 = connectH2;
	return clientH2;
}

var redirectHandler;
var hasRequiredRedirectHandler;

function requireRedirectHandler () {
	if (hasRequiredRedirectHandler) return redirectHandler;
	hasRequiredRedirectHandler = 1;

	const util = requireUtil$8();
	const { kBodyUsed } = requireSymbols$5();
	const assert = require$$0$7;
	const { InvalidArgumentError } = requireErrors();
	const EE = require$$0$b;

	const redirectableStatusCodes = [300, 301, 302, 303, 307, 308];

	const kBody = Symbol('body');

	class BodyAsyncIterable {
	  constructor (body) {
	    this[kBody] = body;
	    this[kBodyUsed] = false;
	  }

	  async * [Symbol.asyncIterator] () {
	    assert(!this[kBodyUsed], 'disturbed');
	    this[kBodyUsed] = true;
	    yield * this[kBody];
	  }
	}

	class RedirectHandler {
	  constructor (dispatch, maxRedirections, opts, handler) {
	    if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {
	      throw new InvalidArgumentError('maxRedirections must be a positive number')
	    }

	    util.validateHandler(handler, opts.method, opts.upgrade);

	    this.dispatch = dispatch;
	    this.location = null;
	    this.abort = null;
	    this.opts = { ...opts, maxRedirections: 0 }; // opts must be a copy
	    this.maxRedirections = maxRedirections;
	    this.handler = handler;
	    this.history = [];
	    this.redirectionLimitReached = false;

	    if (util.isStream(this.opts.body)) {
	      // TODO (fix): Provide some way for the user to cache the file to e.g. /tmp
	      // so that it can be dispatched again?
	      // TODO (fix): Do we need 100-expect support to provide a way to do this properly?
	      if (util.bodyLength(this.opts.body) === 0) {
	        this.opts.body
	          .on('data', function () {
	            assert(false);
	          });
	      }

	      if (typeof this.opts.body.readableDidRead !== 'boolean') {
	        this.opts.body[kBodyUsed] = false;
	        EE.prototype.on.call(this.opts.body, 'data', function () {
	          this[kBodyUsed] = true;
	        });
	      }
	    } else if (this.opts.body && typeof this.opts.body.pipeTo === 'function') {
	      // TODO (fix): We can't access ReadableStream internal state
	      // to determine whether or not it has been disturbed. This is just
	      // a workaround.
	      this.opts.body = new BodyAsyncIterable(this.opts.body);
	    } else if (
	      this.opts.body &&
	      typeof this.opts.body !== 'string' &&
	      !ArrayBuffer.isView(this.opts.body) &&
	      util.isIterable(this.opts.body)
	    ) {
	      // TODO: Should we allow re-using iterable if !this.opts.idempotent
	      // or through some other flag?
	      this.opts.body = new BodyAsyncIterable(this.opts.body);
	    }
	  }

	  onConnect (abort) {
	    this.abort = abort;
	    this.handler.onConnect(abort, { history: this.history });
	  }

	  onUpgrade (statusCode, headers, socket) {
	    this.handler.onUpgrade(statusCode, headers, socket);
	  }

	  onError (error) {
	    this.handler.onError(error);
	  }

	  onHeaders (statusCode, headers, resume, statusText) {
	    this.location = this.history.length >= this.maxRedirections || util.isDisturbed(this.opts.body)
	      ? null
	      : parseLocation(statusCode, headers);

	    if (this.opts.throwOnMaxRedirect && this.history.length >= this.maxRedirections) {
	      if (this.request) {
	        this.request.abort(new Error('max redirects'));
	      }

	      this.redirectionLimitReached = true;
	      this.abort(new Error('max redirects'));
	      return
	    }

	    if (this.opts.origin) {
	      this.history.push(new URL(this.opts.path, this.opts.origin));
	    }

	    if (!this.location) {
	      return this.handler.onHeaders(statusCode, headers, resume, statusText)
	    }

	    const { origin, pathname, search } = util.parseURL(new URL(this.location, this.opts.origin && new URL(this.opts.path, this.opts.origin)));
	    const path = search ? `${pathname}${search}` : pathname;

	    // Remove headers referring to the original URL.
	    // By default it is Host only, unless it's a 303 (see below), which removes also all Content-* headers.
	    // https://tools.ietf.org/html/rfc7231#section-6.4
	    this.opts.headers = cleanRequestHeaders(this.opts.headers, statusCode === 303, this.opts.origin !== origin);
	    this.opts.path = path;
	    this.opts.origin = origin;
	    this.opts.maxRedirections = 0;
	    this.opts.query = null;

	    // https://tools.ietf.org/html/rfc7231#section-6.4.4
	    // In case of HTTP 303, always replace method to be either HEAD or GET
	    if (statusCode === 303 && this.opts.method !== 'HEAD') {
	      this.opts.method = 'GET';
	      this.opts.body = null;
	    }
	  }

	  onData (chunk) {
	    if (this.location) ; else {
	      return this.handler.onData(chunk)
	    }
	  }

	  onComplete (trailers) {
	    if (this.location) {
	      /*
	        https://tools.ietf.org/html/rfc7231#section-6.4

	        TLDR: undici always ignores 3xx response trailers as they are not expected in case of redirections
	        and neither are useful if present.

	        See comment on onData method above for more detailed information.
	      */

	      this.location = null;
	      this.abort = null;

	      this.dispatch(this.opts, this);
	    } else {
	      this.handler.onComplete(trailers);
	    }
	  }

	  onBodySent (chunk) {
	    if (this.handler.onBodySent) {
	      this.handler.onBodySent(chunk);
	    }
	  }
	}

	function parseLocation (statusCode, headers) {
	  if (redirectableStatusCodes.indexOf(statusCode) === -1) {
	    return null
	  }

	  for (let i = 0; i < headers.length; i += 2) {
	    if (headers[i].length === 8 && util.headerNameToString(headers[i]) === 'location') {
	      return headers[i + 1]
	    }
	  }
	}

	// https://tools.ietf.org/html/rfc7231#section-6.4.4
	function shouldRemoveHeader (header, removeContent, unknownOrigin) {
	  if (header.length === 4) {
	    return util.headerNameToString(header) === 'host'
	  }
	  if (removeContent && util.headerNameToString(header).startsWith('content-')) {
	    return true
	  }
	  if (unknownOrigin && (header.length === 13 || header.length === 6 || header.length === 19)) {
	    const name = util.headerNameToString(header);
	    return name === 'authorization' || name === 'cookie' || name === 'proxy-authorization'
	  }
	  return false
	}

	// https://tools.ietf.org/html/rfc7231#section-6.4
	function cleanRequestHeaders (headers, removeContent, unknownOrigin) {
	  const ret = [];
	  if (Array.isArray(headers)) {
	    for (let i = 0; i < headers.length; i += 2) {
	      if (!shouldRemoveHeader(headers[i], removeContent, unknownOrigin)) {
	        ret.push(headers[i], headers[i + 1]);
	      }
	    }
	  } else if (headers && typeof headers === 'object') {
	    for (const key of Object.keys(headers)) {
	      if (!shouldRemoveHeader(key, removeContent, unknownOrigin)) {
	        ret.push(key, headers[key]);
	      }
	    }
	  } else {
	    assert(headers == null, 'headers must be an object or an array');
	  }
	  return ret
	}

	redirectHandler = RedirectHandler;
	return redirectHandler;
}

var redirectInterceptor;
var hasRequiredRedirectInterceptor;

function requireRedirectInterceptor () {
	if (hasRequiredRedirectInterceptor) return redirectInterceptor;
	hasRequiredRedirectInterceptor = 1;

	const RedirectHandler = requireRedirectHandler();

	function createRedirectInterceptor ({ maxRedirections: defaultMaxRedirections }) {
	  return (dispatch) => {
	    return function Intercept (opts, handler) {
	      const { maxRedirections = defaultMaxRedirections } = opts;

	      if (!maxRedirections) {
	        return dispatch(opts, handler)
	      }

	      const redirectHandler = new RedirectHandler(dispatch, maxRedirections, opts, handler);
	      opts = { ...opts, maxRedirections: 0 }; // Stop sub dispatcher from also redirecting.
	      return dispatch(opts, redirectHandler)
	    }
	  }
	}

	redirectInterceptor = createRedirectInterceptor;
	return redirectInterceptor;
}

var client$1;
var hasRequiredClient$1;

function requireClient$1 () {
	if (hasRequiredClient$1) return client$1;
	hasRequiredClient$1 = 1;

	const assert = require$$0$7;
	const net = require$$4$4;
	const http = require$$2$3;
	const util = requireUtil$8();
	const { channels } = requireDiagnostics();
	const Request = requireRequest$1();
	const DispatcherBase = requireDispatcherBase();
	const {
	  InvalidArgumentError,
	  InformationalError,
	  ClientDestroyedError
	} = requireErrors();
	const buildConnector = requireConnect();
	const {
	  kUrl,
	  kServerName,
	  kClient,
	  kBusy,
	  kConnect,
	  kResuming,
	  kRunning,
	  kPending,
	  kSize,
	  kQueue,
	  kConnected,
	  kConnecting,
	  kNeedDrain,
	  kKeepAliveDefaultTimeout,
	  kHostHeader,
	  kPendingIdx,
	  kRunningIdx,
	  kError,
	  kPipelining,
	  kKeepAliveTimeoutValue,
	  kMaxHeadersSize,
	  kKeepAliveMaxTimeout,
	  kKeepAliveTimeoutThreshold,
	  kHeadersTimeout,
	  kBodyTimeout,
	  kStrictContentLength,
	  kConnector,
	  kMaxRedirections,
	  kMaxRequests,
	  kCounter,
	  kClose,
	  kDestroy,
	  kDispatch,
	  kInterceptors,
	  kLocalAddress,
	  kMaxResponseSize,
	  kOnError,
	  kHTTPContext,
	  kMaxConcurrentStreams,
	  kResume
	} = requireSymbols$5();
	const connectH1 = requireClientH1();
	const connectH2 = requireClientH2();
	let deprecatedInterceptorWarned = false;

	const kClosedResolve = Symbol('kClosedResolve');

	function getPipelining (client) {
	  return client[kPipelining] ?? client[kHTTPContext]?.defaultPipelining ?? 1
	}

	/**
	 * @type {import('../../types/client.js').default}
	 */
	class Client extends DispatcherBase {
	  /**
	   *
	   * @param {string|URL} url
	   * @param {import('../../types/client.js').Client.Options} options
	   */
	  constructor (url, {
	    interceptors,
	    maxHeaderSize,
	    headersTimeout,
	    socketTimeout,
	    requestTimeout,
	    connectTimeout,
	    bodyTimeout,
	    idleTimeout,
	    keepAlive,
	    keepAliveTimeout,
	    maxKeepAliveTimeout,
	    keepAliveMaxTimeout,
	    keepAliveTimeoutThreshold,
	    socketPath,
	    pipelining,
	    tls,
	    strictContentLength,
	    maxCachedSessions,
	    maxRedirections,
	    connect,
	    maxRequestsPerClient,
	    localAddress,
	    maxResponseSize,
	    autoSelectFamily,
	    autoSelectFamilyAttemptTimeout,
	    // h2
	    maxConcurrentStreams,
	    allowH2
	  } = {}) {
	    super();

	    if (keepAlive !== undefined) {
	      throw new InvalidArgumentError('unsupported keepAlive, use pipelining=0 instead')
	    }

	    if (socketTimeout !== undefined) {
	      throw new InvalidArgumentError('unsupported socketTimeout, use headersTimeout & bodyTimeout instead')
	    }

	    if (requestTimeout !== undefined) {
	      throw new InvalidArgumentError('unsupported requestTimeout, use headersTimeout & bodyTimeout instead')
	    }

	    if (idleTimeout !== undefined) {
	      throw new InvalidArgumentError('unsupported idleTimeout, use keepAliveTimeout instead')
	    }

	    if (maxKeepAliveTimeout !== undefined) {
	      throw new InvalidArgumentError('unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead')
	    }

	    if (maxHeaderSize != null && !Number.isFinite(maxHeaderSize)) {
	      throw new InvalidArgumentError('invalid maxHeaderSize')
	    }

	    if (socketPath != null && typeof socketPath !== 'string') {
	      throw new InvalidArgumentError('invalid socketPath')
	    }

	    if (connectTimeout != null && (!Number.isFinite(connectTimeout) || connectTimeout < 0)) {
	      throw new InvalidArgumentError('invalid connectTimeout')
	    }

	    if (keepAliveTimeout != null && (!Number.isFinite(keepAliveTimeout) || keepAliveTimeout <= 0)) {
	      throw new InvalidArgumentError('invalid keepAliveTimeout')
	    }

	    if (keepAliveMaxTimeout != null && (!Number.isFinite(keepAliveMaxTimeout) || keepAliveMaxTimeout <= 0)) {
	      throw new InvalidArgumentError('invalid keepAliveMaxTimeout')
	    }

	    if (keepAliveTimeoutThreshold != null && !Number.isFinite(keepAliveTimeoutThreshold)) {
	      throw new InvalidArgumentError('invalid keepAliveTimeoutThreshold')
	    }

	    if (headersTimeout != null && (!Number.isInteger(headersTimeout) || headersTimeout < 0)) {
	      throw new InvalidArgumentError('headersTimeout must be a positive integer or zero')
	    }

	    if (bodyTimeout != null && (!Number.isInteger(bodyTimeout) || bodyTimeout < 0)) {
	      throw new InvalidArgumentError('bodyTimeout must be a positive integer or zero')
	    }

	    if (connect != null && typeof connect !== 'function' && typeof connect !== 'object') {
	      throw new InvalidArgumentError('connect must be a function or an object')
	    }

	    if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {
	      throw new InvalidArgumentError('maxRedirections must be a positive number')
	    }

	    if (maxRequestsPerClient != null && (!Number.isInteger(maxRequestsPerClient) || maxRequestsPerClient < 0)) {
	      throw new InvalidArgumentError('maxRequestsPerClient must be a positive number')
	    }

	    if (localAddress != null && (typeof localAddress !== 'string' || net.isIP(localAddress) === 0)) {
	      throw new InvalidArgumentError('localAddress must be valid string IP address')
	    }

	    if (maxResponseSize != null && (!Number.isInteger(maxResponseSize) || maxResponseSize < -1)) {
	      throw new InvalidArgumentError('maxResponseSize must be a positive number')
	    }

	    if (
	      autoSelectFamilyAttemptTimeout != null &&
	      (!Number.isInteger(autoSelectFamilyAttemptTimeout) || autoSelectFamilyAttemptTimeout < -1)
	    ) {
	      throw new InvalidArgumentError('autoSelectFamilyAttemptTimeout must be a positive number')
	    }

	    // h2
	    if (allowH2 != null && typeof allowH2 !== 'boolean') {
	      throw new InvalidArgumentError('allowH2 must be a valid boolean value')
	    }

	    if (maxConcurrentStreams != null && (typeof maxConcurrentStreams !== 'number' || maxConcurrentStreams < 1)) {
	      throw new InvalidArgumentError('maxConcurrentStreams must be a positive integer, greater than 0')
	    }

	    if (typeof connect !== 'function') {
	      connect = buildConnector({
	        ...tls,
	        maxCachedSessions,
	        allowH2,
	        socketPath,
	        timeout: connectTimeout,
	        ...(autoSelectFamily ? { autoSelectFamily, autoSelectFamilyAttemptTimeout } : undefined),
	        ...connect
	      });
	    }

	    if (interceptors?.Client && Array.isArray(interceptors.Client)) {
	      this[kInterceptors] = interceptors.Client;
	      if (!deprecatedInterceptorWarned) {
	        deprecatedInterceptorWarned = true;
	        process.emitWarning('Client.Options#interceptor is deprecated. Use Dispatcher#compose instead.', {
	          code: 'UNDICI-CLIENT-INTERCEPTOR-DEPRECATED'
	        });
	      }
	    } else {
	      this[kInterceptors] = [createRedirectInterceptor({ maxRedirections })];
	    }

	    this[kUrl] = util.parseOrigin(url);
	    this[kConnector] = connect;
	    this[kPipelining] = pipelining != null ? pipelining : 1;
	    this[kMaxHeadersSize] = maxHeaderSize || http.maxHeaderSize;
	    this[kKeepAliveDefaultTimeout] = keepAliveTimeout == null ? 4e3 : keepAliveTimeout;
	    this[kKeepAliveMaxTimeout] = keepAliveMaxTimeout == null ? 600e3 : keepAliveMaxTimeout;
	    this[kKeepAliveTimeoutThreshold] = keepAliveTimeoutThreshold == null ? 2e3 : keepAliveTimeoutThreshold;
	    this[kKeepAliveTimeoutValue] = this[kKeepAliveDefaultTimeout];
	    this[kServerName] = null;
	    this[kLocalAddress] = localAddress != null ? localAddress : null;
	    this[kResuming] = 0; // 0, idle, 1, scheduled, 2 resuming
	    this[kNeedDrain] = 0; // 0, idle, 1, scheduled, 2 resuming
	    this[kHostHeader] = `host: ${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ''}\r\n`;
	    this[kBodyTimeout] = bodyTimeout != null ? bodyTimeout : 300e3;
	    this[kHeadersTimeout] = headersTimeout != null ? headersTimeout : 300e3;
	    this[kStrictContentLength] = strictContentLength == null ? true : strictContentLength;
	    this[kMaxRedirections] = maxRedirections;
	    this[kMaxRequests] = maxRequestsPerClient;
	    this[kClosedResolve] = null;
	    this[kMaxResponseSize] = maxResponseSize > -1 ? maxResponseSize : -1;
	    this[kMaxConcurrentStreams] = maxConcurrentStreams != null ? maxConcurrentStreams : 100; // Max peerConcurrentStreams for a Node h2 server
	    this[kHTTPContext] = null;

	    // kQueue is built up of 3 sections separated by
	    // the kRunningIdx and kPendingIdx indices.
	    // |   complete   |   running   |   pending   |
	    //                ^ kRunningIdx ^ kPendingIdx ^ kQueue.length
	    // kRunningIdx points to the first running element.
	    // kPendingIdx points to the first pending element.
	    // This implements a fast queue with an amortized
	    // time of O(1).

	    this[kQueue] = [];
	    this[kRunningIdx] = 0;
	    this[kPendingIdx] = 0;

	    this[kResume] = (sync) => resume(this, sync);
	    this[kOnError] = (err) => onError(this, err);
	  }

	  get pipelining () {
	    return this[kPipelining]
	  }

	  set pipelining (value) {
	    this[kPipelining] = value;
	    this[kResume](true);
	  }

	  get [kPending] () {
	    return this[kQueue].length - this[kPendingIdx]
	  }

	  get [kRunning] () {
	    return this[kPendingIdx] - this[kRunningIdx]
	  }

	  get [kSize] () {
	    return this[kQueue].length - this[kRunningIdx]
	  }

	  get [kConnected] () {
	    return !!this[kHTTPContext] && !this[kConnecting] && !this[kHTTPContext].destroyed
	  }

	  get [kBusy] () {
	    return Boolean(
	      this[kHTTPContext]?.busy(null) ||
	      (this[kSize] >= (getPipelining(this) || 1)) ||
	      this[kPending] > 0
	    )
	  }

	  /* istanbul ignore: only used for test */
	  [kConnect] (cb) {
	    connect(this);
	    this.once('connect', cb);
	  }

	  [kDispatch] (opts, handler) {
	    const origin = opts.origin || this[kUrl].origin;
	    const request = new Request(origin, opts, handler);

	    this[kQueue].push(request);
	    if (this[kResuming]) ; else if (util.bodyLength(request.body) == null && util.isIterable(request.body)) {
	      // Wait a tick in case stream/iterator is ended in the same tick.
	      this[kResuming] = 1;
	      queueMicrotask(() => resume(this));
	    } else {
	      this[kResume](true);
	    }

	    if (this[kResuming] && this[kNeedDrain] !== 2 && this[kBusy]) {
	      this[kNeedDrain] = 2;
	    }

	    return this[kNeedDrain] < 2
	  }

	  async [kClose] () {
	    // TODO: for H2 we need to gracefully flush the remaining enqueued
	    // request and close each stream.
	    return new Promise((resolve) => {
	      if (this[kSize]) {
	        this[kClosedResolve] = resolve;
	      } else {
	        resolve(null);
	      }
	    })
	  }

	  async [kDestroy] (err) {
	    return new Promise((resolve) => {
	      const requests = this[kQueue].splice(this[kPendingIdx]);
	      for (let i = 0; i < requests.length; i++) {
	        const request = requests[i];
	        util.errorRequest(this, request, err);
	      }

	      const callback = () => {
	        if (this[kClosedResolve]) {
	          // TODO (fix): Should we error here with ClientDestroyedError?
	          this[kClosedResolve]();
	          this[kClosedResolve] = null;
	        }
	        resolve(null);
	      };

	      if (this[kHTTPContext]) {
	        this[kHTTPContext].destroy(err, callback);
	        this[kHTTPContext] = null;
	      } else {
	        queueMicrotask(callback);
	      }

	      this[kResume]();
	    })
	  }
	}

	const createRedirectInterceptor = requireRedirectInterceptor();

	function onError (client, err) {
	  if (
	    client[kRunning] === 0 &&
	    err.code !== 'UND_ERR_INFO' &&
	    err.code !== 'UND_ERR_SOCKET'
	  ) {
	    // Error is not caused by running request and not a recoverable
	    // socket error.

	    assert(client[kPendingIdx] === client[kRunningIdx]);

	    const requests = client[kQueue].splice(client[kRunningIdx]);

	    for (let i = 0; i < requests.length; i++) {
	      const request = requests[i];
	      util.errorRequest(client, request, err);
	    }
	    assert(client[kSize] === 0);
	  }
	}

	async function connect (client) {
	  assert(!client[kConnecting]);
	  assert(!client[kHTTPContext]);

	  let { host, hostname, protocol, port } = client[kUrl];

	  // Resolve ipv6
	  if (hostname[0] === '[') {
	    const idx = hostname.indexOf(']');

	    assert(idx !== -1);
	    const ip = hostname.substring(1, idx);

	    assert(net.isIP(ip));
	    hostname = ip;
	  }

	  client[kConnecting] = true;

	  if (channels.beforeConnect.hasSubscribers) {
	    channels.beforeConnect.publish({
	      connectParams: {
	        host,
	        hostname,
	        protocol,
	        port,
	        version: client[kHTTPContext]?.version,
	        servername: client[kServerName],
	        localAddress: client[kLocalAddress]
	      },
	      connector: client[kConnector]
	    });
	  }

	  try {
	    const socket = await new Promise((resolve, reject) => {
	      client[kConnector]({
	        host,
	        hostname,
	        protocol,
	        port,
	        servername: client[kServerName],
	        localAddress: client[kLocalAddress]
	      }, (err, socket) => {
	        if (err) {
	          reject(err);
	        } else {
	          resolve(socket);
	        }
	      });
	    });

	    if (client.destroyed) {
	      util.destroy(socket.on('error', () => {}), new ClientDestroyedError());
	      return
	    }

	    assert(socket);

	    try {
	      client[kHTTPContext] = socket.alpnProtocol === 'h2'
	        ? await connectH2(client, socket)
	        : await connectH1(client, socket);
	    } catch (err) {
	      socket.destroy().on('error', () => {});
	      throw err
	    }

	    client[kConnecting] = false;

	    socket[kCounter] = 0;
	    socket[kMaxRequests] = client[kMaxRequests];
	    socket[kClient] = client;
	    socket[kError] = null;

	    if (channels.connected.hasSubscribers) {
	      channels.connected.publish({
	        connectParams: {
	          host,
	          hostname,
	          protocol,
	          port,
	          version: client[kHTTPContext]?.version,
	          servername: client[kServerName],
	          localAddress: client[kLocalAddress]
	        },
	        connector: client[kConnector],
	        socket
	      });
	    }
	    client.emit('connect', client[kUrl], [client]);
	  } catch (err) {
	    if (client.destroyed) {
	      return
	    }

	    client[kConnecting] = false;

	    if (channels.connectError.hasSubscribers) {
	      channels.connectError.publish({
	        connectParams: {
	          host,
	          hostname,
	          protocol,
	          port,
	          version: client[kHTTPContext]?.version,
	          servername: client[kServerName],
	          localAddress: client[kLocalAddress]
	        },
	        connector: client[kConnector],
	        error: err
	      });
	    }

	    if (err.code === 'ERR_TLS_CERT_ALTNAME_INVALID') {
	      assert(client[kRunning] === 0);
	      while (client[kPending] > 0 && client[kQueue][client[kPendingIdx]].servername === client[kServerName]) {
	        const request = client[kQueue][client[kPendingIdx]++];
	        util.errorRequest(client, request, err);
	      }
	    } else {
	      onError(client, err);
	    }

	    client.emit('connectionError', client[kUrl], [client], err);
	  }

	  client[kResume]();
	}

	function emitDrain (client) {
	  client[kNeedDrain] = 0;
	  client.emit('drain', client[kUrl], [client]);
	}

	function resume (client, sync) {
	  if (client[kResuming] === 2) {
	    return
	  }

	  client[kResuming] = 2;

	  _resume(client, sync);
	  client[kResuming] = 0;

	  if (client[kRunningIdx] > 256) {
	    client[kQueue].splice(0, client[kRunningIdx]);
	    client[kPendingIdx] -= client[kRunningIdx];
	    client[kRunningIdx] = 0;
	  }
	}

	function _resume (client, sync) {
	  while (true) {
	    if (client.destroyed) {
	      assert(client[kPending] === 0);
	      return
	    }

	    if (client[kClosedResolve] && !client[kSize]) {
	      client[kClosedResolve]();
	      client[kClosedResolve] = null;
	      return
	    }

	    if (client[kHTTPContext]) {
	      client[kHTTPContext].resume();
	    }

	    if (client[kBusy]) {
	      client[kNeedDrain] = 2;
	    } else if (client[kNeedDrain] === 2) {
	      if (sync) {
	        client[kNeedDrain] = 1;
	        queueMicrotask(() => emitDrain(client));
	      } else {
	        emitDrain(client);
	      }
	      continue
	    }

	    if (client[kPending] === 0) {
	      return
	    }

	    if (client[kRunning] >= (getPipelining(client) || 1)) {
	      return
	    }

	    const request = client[kQueue][client[kPendingIdx]];

	    if (client[kUrl].protocol === 'https:' && client[kServerName] !== request.servername) {
	      if (client[kRunning] > 0) {
	        return
	      }

	      client[kServerName] = request.servername;
	      client[kHTTPContext]?.destroy(new InformationalError('servername changed'), () => {
	        client[kHTTPContext] = null;
	        resume(client);
	      });
	    }

	    if (client[kConnecting]) {
	      return
	    }

	    if (!client[kHTTPContext]) {
	      connect(client);
	      return
	    }

	    if (client[kHTTPContext].destroyed) {
	      return
	    }

	    if (client[kHTTPContext].busy(request)) {
	      return
	    }

	    if (!request.aborted && client[kHTTPContext].write(request)) {
	      client[kPendingIdx]++;
	    } else {
	      client[kQueue].splice(client[kPendingIdx], 1);
	    }
	  }
	}

	client$1 = Client;
	return client$1;
}

/* eslint-disable */

var fixedQueue;
var hasRequiredFixedQueue;

function requireFixedQueue () {
	if (hasRequiredFixedQueue) return fixedQueue;
	hasRequiredFixedQueue = 1;

	// Extracted from node/lib/internal/fixed_queue.js

	// Currently optimal queue size, tested on V8 6.0 - 6.6. Must be power of two.
	const kSize = 2048;
	const kMask = kSize - 1;

	// The FixedQueue is implemented as a singly-linked list of fixed-size
	// circular buffers. It looks something like this:
	//
	//  head                                                       tail
	//    |                                                          |
	//    v                                                          v
	// +-----------+ <-----\       +-----------+ <------\         +-----------+
	// |  [null]   |        \----- |   next    |         \------- |   next    |
	// +-----------+               +-----------+                  +-----------+
	// |   item    | <-- bottom    |   item    | <-- bottom       |  [empty]  |
	// |   item    |               |   item    |                  |  [empty]  |
	// |   item    |               |   item    |                  |  [empty]  |
	// |   item    |               |   item    |                  |  [empty]  |
	// |   item    |               |   item    |       bottom --> |   item    |
	// |   item    |               |   item    |                  |   item    |
	// |    ...    |               |    ...    |                  |    ...    |
	// |   item    |               |   item    |                  |   item    |
	// |   item    |               |   item    |                  |   item    |
	// |  [empty]  | <-- top       |   item    |                  |   item    |
	// |  [empty]  |               |   item    |                  |   item    |
	// |  [empty]  |               |  [empty]  | <-- top  top --> |  [empty]  |
	// +-----------+               +-----------+                  +-----------+
	//
	// Or, if there is only one circular buffer, it looks something
	// like either of these:
	//
	//  head   tail                                 head   tail
	//    |     |                                     |     |
	//    v     v                                     v     v
	// +-----------+                               +-----------+
	// |  [null]   |                               |  [null]   |
	// +-----------+                               +-----------+
	// |  [empty]  |                               |   item    |
	// |  [empty]  |                               |   item    |
	// |   item    | <-- bottom            top --> |  [empty]  |
	// |   item    |                               |  [empty]  |
	// |  [empty]  | <-- top            bottom --> |   item    |
	// |  [empty]  |                               |   item    |
	// +-----------+                               +-----------+
	//
	// Adding a value means moving `top` forward by one, removing means
	// moving `bottom` forward by one. After reaching the end, the queue
	// wraps around.
	//
	// When `top === bottom` the current queue is empty and when
	// `top + 1 === bottom` it's full. This wastes a single space of storage
	// but allows much quicker checks.

	class FixedCircularBuffer {
	  constructor() {
	    this.bottom = 0;
	    this.top = 0;
	    this.list = new Array(kSize);
	    this.next = null;
	  }

	  isEmpty() {
	    return this.top === this.bottom;
	  }

	  isFull() {
	    return ((this.top + 1) & kMask) === this.bottom;
	  }

	  push(data) {
	    this.list[this.top] = data;
	    this.top = (this.top + 1) & kMask;
	  }

	  shift() {
	    const nextItem = this.list[this.bottom];
	    if (nextItem === undefined)
	      return null;
	    this.list[this.bottom] = undefined;
	    this.bottom = (this.bottom + 1) & kMask;
	    return nextItem;
	  }
	}

	fixedQueue = class FixedQueue {
	  constructor() {
	    this.head = this.tail = new FixedCircularBuffer();
	  }

	  isEmpty() {
	    return this.head.isEmpty();
	  }

	  push(data) {
	    if (this.head.isFull()) {
	      // Head is full: Creates a new queue, sets the old queue's `.next` to it,
	      // and sets it as the new main queue.
	      this.head = this.head.next = new FixedCircularBuffer();
	    }
	    this.head.push(data);
	  }

	  shift() {
	    const tail = this.tail;
	    const next = tail.shift();
	    if (tail.isEmpty() && tail.next !== null) {
	      // If there is another queue, it forms the new tail.
	      this.tail = tail.next;
	    }
	    return next;
	  }
	};
	return fixedQueue;
}

var poolStats;
var hasRequiredPoolStats;

function requirePoolStats () {
	if (hasRequiredPoolStats) return poolStats;
	hasRequiredPoolStats = 1;
	const { kFree, kConnected, kPending, kQueued, kRunning, kSize } = requireSymbols$5();
	const kPool = Symbol('pool');

	class PoolStats {
	  constructor (pool) {
	    this[kPool] = pool;
	  }

	  get connected () {
	    return this[kPool][kConnected]
	  }

	  get free () {
	    return this[kPool][kFree]
	  }

	  get pending () {
	    return this[kPool][kPending]
	  }

	  get queued () {
	    return this[kPool][kQueued]
	  }

	  get running () {
	    return this[kPool][kRunning]
	  }

	  get size () {
	    return this[kPool][kSize]
	  }
	}

	poolStats = PoolStats;
	return poolStats;
}

var poolBase;
var hasRequiredPoolBase;

function requirePoolBase () {
	if (hasRequiredPoolBase) return poolBase;
	hasRequiredPoolBase = 1;

	const DispatcherBase = requireDispatcherBase();
	const FixedQueue = requireFixedQueue();
	const { kConnected, kSize, kRunning, kPending, kQueued, kBusy, kFree, kUrl, kClose, kDestroy, kDispatch } = requireSymbols$5();
	const PoolStats = requirePoolStats();

	const kClients = Symbol('clients');
	const kNeedDrain = Symbol('needDrain');
	const kQueue = Symbol('queue');
	const kClosedResolve = Symbol('closed resolve');
	const kOnDrain = Symbol('onDrain');
	const kOnConnect = Symbol('onConnect');
	const kOnDisconnect = Symbol('onDisconnect');
	const kOnConnectionError = Symbol('onConnectionError');
	const kGetDispatcher = Symbol('get dispatcher');
	const kAddClient = Symbol('add client');
	const kRemoveClient = Symbol('remove client');
	const kStats = Symbol('stats');

	class PoolBase extends DispatcherBase {
	  constructor () {
	    super();

	    this[kQueue] = new FixedQueue();
	    this[kClients] = [];
	    this[kQueued] = 0;

	    const pool = this;

	    this[kOnDrain] = function onDrain (origin, targets) {
	      const queue = pool[kQueue];

	      let needDrain = false;

	      while (!needDrain) {
	        const item = queue.shift();
	        if (!item) {
	          break
	        }
	        pool[kQueued]--;
	        needDrain = !this.dispatch(item.opts, item.handler);
	      }

	      this[kNeedDrain] = needDrain;

	      if (!this[kNeedDrain] && pool[kNeedDrain]) {
	        pool[kNeedDrain] = false;
	        pool.emit('drain', origin, [pool, ...targets]);
	      }

	      if (pool[kClosedResolve] && queue.isEmpty()) {
	        Promise
	          .all(pool[kClients].map(c => c.close()))
	          .then(pool[kClosedResolve]);
	      }
	    };

	    this[kOnConnect] = (origin, targets) => {
	      pool.emit('connect', origin, [pool, ...targets]);
	    };

	    this[kOnDisconnect] = (origin, targets, err) => {
	      pool.emit('disconnect', origin, [pool, ...targets], err);
	    };

	    this[kOnConnectionError] = (origin, targets, err) => {
	      pool.emit('connectionError', origin, [pool, ...targets], err);
	    };

	    this[kStats] = new PoolStats(this);
	  }

	  get [kBusy] () {
	    return this[kNeedDrain]
	  }

	  get [kConnected] () {
	    return this[kClients].filter(client => client[kConnected]).length
	  }

	  get [kFree] () {
	    return this[kClients].filter(client => client[kConnected] && !client[kNeedDrain]).length
	  }

	  get [kPending] () {
	    let ret = this[kQueued];
	    for (const { [kPending]: pending } of this[kClients]) {
	      ret += pending;
	    }
	    return ret
	  }

	  get [kRunning] () {
	    let ret = 0;
	    for (const { [kRunning]: running } of this[kClients]) {
	      ret += running;
	    }
	    return ret
	  }

	  get [kSize] () {
	    let ret = this[kQueued];
	    for (const { [kSize]: size } of this[kClients]) {
	      ret += size;
	    }
	    return ret
	  }

	  get stats () {
	    return this[kStats]
	  }

	  async [kClose] () {
	    if (this[kQueue].isEmpty()) {
	      return Promise.all(this[kClients].map(c => c.close()))
	    } else {
	      return new Promise((resolve) => {
	        this[kClosedResolve] = resolve;
	      })
	    }
	  }

	  async [kDestroy] (err) {
	    while (true) {
	      const item = this[kQueue].shift();
	      if (!item) {
	        break
	      }
	      item.handler.onError(err);
	    }

	    return Promise.all(this[kClients].map(c => c.destroy(err)))
	  }

	  [kDispatch] (opts, handler) {
	    const dispatcher = this[kGetDispatcher]();

	    if (!dispatcher) {
	      this[kNeedDrain] = true;
	      this[kQueue].push({ opts, handler });
	      this[kQueued]++;
	    } else if (!dispatcher.dispatch(opts, handler)) {
	      dispatcher[kNeedDrain] = true;
	      this[kNeedDrain] = !this[kGetDispatcher]();
	    }

	    return !this[kNeedDrain]
	  }

	  [kAddClient] (client) {
	    client
	      .on('drain', this[kOnDrain])
	      .on('connect', this[kOnConnect])
	      .on('disconnect', this[kOnDisconnect])
	      .on('connectionError', this[kOnConnectionError]);

	    this[kClients].push(client);

	    if (this[kNeedDrain]) {
	      queueMicrotask(() => {
	        if (this[kNeedDrain]) {
	          this[kOnDrain](client[kUrl], [this, client]);
	        }
	      });
	    }

	    return this
	  }

	  [kRemoveClient] (client) {
	    client.close(() => {
	      const idx = this[kClients].indexOf(client);
	      if (idx !== -1) {
	        this[kClients].splice(idx, 1);
	      }
	    });

	    this[kNeedDrain] = this[kClients].some(dispatcher => (
	      !dispatcher[kNeedDrain] &&
	      dispatcher.closed !== true &&
	      dispatcher.destroyed !== true
	    ));
	  }
	}

	poolBase = {
	  PoolBase,
	  kClients,
	  kNeedDrain,
	  kAddClient,
	  kRemoveClient,
	  kGetDispatcher
	};
	return poolBase;
}

var pool;
var hasRequiredPool;

function requirePool () {
	if (hasRequiredPool) return pool;
	hasRequiredPool = 1;

	const {
	  PoolBase,
	  kClients,
	  kNeedDrain,
	  kAddClient,
	  kGetDispatcher
	} = requirePoolBase();
	const Client = requireClient$1();
	const {
	  InvalidArgumentError
	} = requireErrors();
	const util = requireUtil$8();
	const { kUrl, kInterceptors } = requireSymbols$5();
	const buildConnector = requireConnect();

	const kOptions = Symbol('options');
	const kConnections = Symbol('connections');
	const kFactory = Symbol('factory');

	function defaultFactory (origin, opts) {
	  return new Client(origin, opts)
	}

	class Pool extends PoolBase {
	  constructor (origin, {
	    connections,
	    factory = defaultFactory,
	    connect,
	    connectTimeout,
	    tls,
	    maxCachedSessions,
	    socketPath,
	    autoSelectFamily,
	    autoSelectFamilyAttemptTimeout,
	    allowH2,
	    ...options
	  } = {}) {
	    super();

	    if (connections != null && (!Number.isFinite(connections) || connections < 0)) {
	      throw new InvalidArgumentError('invalid connections')
	    }

	    if (typeof factory !== 'function') {
	      throw new InvalidArgumentError('factory must be a function.')
	    }

	    if (connect != null && typeof connect !== 'function' && typeof connect !== 'object') {
	      throw new InvalidArgumentError('connect must be a function or an object')
	    }

	    if (typeof connect !== 'function') {
	      connect = buildConnector({
	        ...tls,
	        maxCachedSessions,
	        allowH2,
	        socketPath,
	        timeout: connectTimeout,
	        ...(autoSelectFamily ? { autoSelectFamily, autoSelectFamilyAttemptTimeout } : undefined),
	        ...connect
	      });
	    }

	    this[kInterceptors] = options.interceptors?.Pool && Array.isArray(options.interceptors.Pool)
	      ? options.interceptors.Pool
	      : [];
	    this[kConnections] = connections || null;
	    this[kUrl] = util.parseOrigin(origin);
	    this[kOptions] = { ...util.deepClone(options), connect, allowH2 };
	    this[kOptions].interceptors = options.interceptors
	      ? { ...options.interceptors }
	      : undefined;
	    this[kFactory] = factory;
	  }

	  [kGetDispatcher] () {
	    for (const client of this[kClients]) {
	      if (!client[kNeedDrain]) {
	        return client
	      }
	    }

	    if (!this[kConnections] || this[kClients].length < this[kConnections]) {
	      const dispatcher = this[kFactory](this[kUrl], this[kOptions]);
	      this[kAddClient](dispatcher);
	      return dispatcher
	    }
	  }
	}

	pool = Pool;
	return pool;
}

var balancedPool;
var hasRequiredBalancedPool;

function requireBalancedPool () {
	if (hasRequiredBalancedPool) return balancedPool;
	hasRequiredBalancedPool = 1;

	const {
	  BalancedPoolMissingUpstreamError,
	  InvalidArgumentError
	} = requireErrors();
	const {
	  PoolBase,
	  kClients,
	  kNeedDrain,
	  kAddClient,
	  kRemoveClient,
	  kGetDispatcher
	} = requirePoolBase();
	const Pool = requirePool();
	const { kUrl, kInterceptors } = requireSymbols$5();
	const { parseOrigin } = requireUtil$8();
	const kFactory = Symbol('factory');

	const kOptions = Symbol('options');
	const kGreatestCommonDivisor = Symbol('kGreatestCommonDivisor');
	const kCurrentWeight = Symbol('kCurrentWeight');
	const kIndex = Symbol('kIndex');
	const kWeight = Symbol('kWeight');
	const kMaxWeightPerServer = Symbol('kMaxWeightPerServer');
	const kErrorPenalty = Symbol('kErrorPenalty');

	/**
	 * Calculate the greatest common divisor of two numbers by
	 * using the Euclidean algorithm.
	 *
	 * @param {number} a
	 * @param {number} b
	 * @returns {number}
	 */
	function getGreatestCommonDivisor (a, b) {
	  if (a === 0) return b

	  while (b !== 0) {
	    const t = b;
	    b = a % b;
	    a = t;
	  }
	  return a
	}

	function defaultFactory (origin, opts) {
	  return new Pool(origin, opts)
	}

	class BalancedPool extends PoolBase {
	  constructor (upstreams = [], { factory = defaultFactory, ...opts } = {}) {
	    super();

	    this[kOptions] = opts;
	    this[kIndex] = -1;
	    this[kCurrentWeight] = 0;

	    this[kMaxWeightPerServer] = this[kOptions].maxWeightPerServer || 100;
	    this[kErrorPenalty] = this[kOptions].errorPenalty || 15;

	    if (!Array.isArray(upstreams)) {
	      upstreams = [upstreams];
	    }

	    if (typeof factory !== 'function') {
	      throw new InvalidArgumentError('factory must be a function.')
	    }

	    this[kInterceptors] = opts.interceptors?.BalancedPool && Array.isArray(opts.interceptors.BalancedPool)
	      ? opts.interceptors.BalancedPool
	      : [];
	    this[kFactory] = factory;

	    for (const upstream of upstreams) {
	      this.addUpstream(upstream);
	    }
	    this._updateBalancedPoolStats();
	  }

	  addUpstream (upstream) {
	    const upstreamOrigin = parseOrigin(upstream).origin;

	    if (this[kClients].find((pool) => (
	      pool[kUrl].origin === upstreamOrigin &&
	      pool.closed !== true &&
	      pool.destroyed !== true
	    ))) {
	      return this
	    }
	    const pool = this[kFactory](upstreamOrigin, Object.assign({}, this[kOptions]));

	    this[kAddClient](pool);
	    pool.on('connect', () => {
	      pool[kWeight] = Math.min(this[kMaxWeightPerServer], pool[kWeight] + this[kErrorPenalty]);
	    });

	    pool.on('connectionError', () => {
	      pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);
	      this._updateBalancedPoolStats();
	    });

	    pool.on('disconnect', (...args) => {
	      const err = args[2];
	      if (err && err.code === 'UND_ERR_SOCKET') {
	        // decrease the weight of the pool.
	        pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);
	        this._updateBalancedPoolStats();
	      }
	    });

	    for (const client of this[kClients]) {
	      client[kWeight] = this[kMaxWeightPerServer];
	    }

	    this._updateBalancedPoolStats();

	    return this
	  }

	  _updateBalancedPoolStats () {
	    let result = 0;
	    for (let i = 0; i < this[kClients].length; i++) {
	      result = getGreatestCommonDivisor(this[kClients][i][kWeight], result);
	    }

	    this[kGreatestCommonDivisor] = result;
	  }

	  removeUpstream (upstream) {
	    const upstreamOrigin = parseOrigin(upstream).origin;

	    const pool = this[kClients].find((pool) => (
	      pool[kUrl].origin === upstreamOrigin &&
	      pool.closed !== true &&
	      pool.destroyed !== true
	    ));

	    if (pool) {
	      this[kRemoveClient](pool);
	    }

	    return this
	  }

	  get upstreams () {
	    return this[kClients]
	      .filter(dispatcher => dispatcher.closed !== true && dispatcher.destroyed !== true)
	      .map((p) => p[kUrl].origin)
	  }

	  [kGetDispatcher] () {
	    // We validate that pools is greater than 0,
	    // otherwise we would have to wait until an upstream
	    // is added, which might never happen.
	    if (this[kClients].length === 0) {
	      throw new BalancedPoolMissingUpstreamError()
	    }

	    const dispatcher = this[kClients].find(dispatcher => (
	      !dispatcher[kNeedDrain] &&
	      dispatcher.closed !== true &&
	      dispatcher.destroyed !== true
	    ));

	    if (!dispatcher) {
	      return
	    }

	    const allClientsBusy = this[kClients].map(pool => pool[kNeedDrain]).reduce((a, b) => a && b, true);

	    if (allClientsBusy) {
	      return
	    }

	    let counter = 0;

	    let maxWeightIndex = this[kClients].findIndex(pool => !pool[kNeedDrain]);

	    while (counter++ < this[kClients].length) {
	      this[kIndex] = (this[kIndex] + 1) % this[kClients].length;
	      const pool = this[kClients][this[kIndex]];

	      // find pool index with the largest weight
	      if (pool[kWeight] > this[kClients][maxWeightIndex][kWeight] && !pool[kNeedDrain]) {
	        maxWeightIndex = this[kIndex];
	      }

	      // decrease the current weight every `this[kClients].length`.
	      if (this[kIndex] === 0) {
	        // Set the current weight to the next lower weight.
	        this[kCurrentWeight] = this[kCurrentWeight] - this[kGreatestCommonDivisor];

	        if (this[kCurrentWeight] <= 0) {
	          this[kCurrentWeight] = this[kMaxWeightPerServer];
	        }
	      }
	      if (pool[kWeight] >= this[kCurrentWeight] && (!pool[kNeedDrain])) {
	        return pool
	      }
	    }

	    this[kCurrentWeight] = this[kClients][maxWeightIndex][kWeight];
	    this[kIndex] = maxWeightIndex;
	    return this[kClients][maxWeightIndex]
	  }
	}

	balancedPool = BalancedPool;
	return balancedPool;
}

var agent;
var hasRequiredAgent;

function requireAgent () {
	if (hasRequiredAgent) return agent;
	hasRequiredAgent = 1;

	const { InvalidArgumentError } = requireErrors();
	const { kClients, kRunning, kClose, kDestroy, kDispatch, kInterceptors } = requireSymbols$5();
	const DispatcherBase = requireDispatcherBase();
	const Pool = requirePool();
	const Client = requireClient$1();
	const util = requireUtil$8();
	const createRedirectInterceptor = requireRedirectInterceptor();

	const kOnConnect = Symbol('onConnect');
	const kOnDisconnect = Symbol('onDisconnect');
	const kOnConnectionError = Symbol('onConnectionError');
	const kMaxRedirections = Symbol('maxRedirections');
	const kOnDrain = Symbol('onDrain');
	const kFactory = Symbol('factory');
	const kOptions = Symbol('options');

	function defaultFactory (origin, opts) {
	  return opts && opts.connections === 1
	    ? new Client(origin, opts)
	    : new Pool(origin, opts)
	}

	class Agent extends DispatcherBase {
	  constructor ({ factory = defaultFactory, maxRedirections = 0, connect, ...options } = {}) {
	    super();

	    if (typeof factory !== 'function') {
	      throw new InvalidArgumentError('factory must be a function.')
	    }

	    if (connect != null && typeof connect !== 'function' && typeof connect !== 'object') {
	      throw new InvalidArgumentError('connect must be a function or an object')
	    }

	    if (!Number.isInteger(maxRedirections) || maxRedirections < 0) {
	      throw new InvalidArgumentError('maxRedirections must be a positive number')
	    }

	    if (connect && typeof connect !== 'function') {
	      connect = { ...connect };
	    }

	    this[kInterceptors] = options.interceptors?.Agent && Array.isArray(options.interceptors.Agent)
	      ? options.interceptors.Agent
	      : [createRedirectInterceptor({ maxRedirections })];

	    this[kOptions] = { ...util.deepClone(options), connect };
	    this[kOptions].interceptors = options.interceptors
	      ? { ...options.interceptors }
	      : undefined;
	    this[kMaxRedirections] = maxRedirections;
	    this[kFactory] = factory;
	    this[kClients] = new Map();

	    this[kOnDrain] = (origin, targets) => {
	      this.emit('drain', origin, [this, ...targets]);
	    };

	    this[kOnConnect] = (origin, targets) => {
	      this.emit('connect', origin, [this, ...targets]);
	    };

	    this[kOnDisconnect] = (origin, targets, err) => {
	      this.emit('disconnect', origin, [this, ...targets], err);
	    };

	    this[kOnConnectionError] = (origin, targets, err) => {
	      this.emit('connectionError', origin, [this, ...targets], err);
	    };
	  }

	  get [kRunning] () {
	    let ret = 0;
	    for (const client of this[kClients].values()) {
	      ret += client[kRunning];
	    }
	    return ret
	  }

	  [kDispatch] (opts, handler) {
	    let key;
	    if (opts.origin && (typeof opts.origin === 'string' || opts.origin instanceof URL)) {
	      key = String(opts.origin);
	    } else {
	      throw new InvalidArgumentError('opts.origin must be a non-empty string or URL.')
	    }

	    let dispatcher = this[kClients].get(key);

	    if (!dispatcher) {
	      dispatcher = this[kFactory](opts.origin, this[kOptions])
	        .on('drain', this[kOnDrain])
	        .on('connect', this[kOnConnect])
	        .on('disconnect', this[kOnDisconnect])
	        .on('connectionError', this[kOnConnectionError]);

	      // This introduces a tiny memory leak, as dispatchers are never removed from the map.
	      // TODO(mcollina): remove te timer when the client/pool do not have any more
	      // active connections.
	      this[kClients].set(key, dispatcher);
	    }

	    return dispatcher.dispatch(opts, handler)
	  }

	  async [kClose] () {
	    const closePromises = [];
	    for (const client of this[kClients].values()) {
	      closePromises.push(client.close());
	    }
	    this[kClients].clear();

	    await Promise.all(closePromises);
	  }

	  async [kDestroy] (err) {
	    const destroyPromises = [];
	    for (const client of this[kClients].values()) {
	      destroyPromises.push(client.destroy(err));
	    }
	    this[kClients].clear();

	    await Promise.all(destroyPromises);
	  }
	}

	agent = Agent;
	return agent;
}

var proxyAgent;
var hasRequiredProxyAgent;

function requireProxyAgent () {
	if (hasRequiredProxyAgent) return proxyAgent;
	hasRequiredProxyAgent = 1;

	const { kProxy, kClose, kDestroy, kInterceptors } = requireSymbols$5();
	const { URL } = require$$1$9;
	const Agent = requireAgent();
	const Pool = requirePool();
	const DispatcherBase = requireDispatcherBase();
	const { InvalidArgumentError, RequestAbortedError, SecureProxyConnectionError } = requireErrors();
	const buildConnector = requireConnect();

	const kAgent = Symbol('proxy agent');
	const kClient = Symbol('proxy client');
	const kProxyHeaders = Symbol('proxy headers');
	const kRequestTls = Symbol('request tls settings');
	const kProxyTls = Symbol('proxy tls settings');
	const kConnectEndpoint = Symbol('connect endpoint function');

	function defaultProtocolPort (protocol) {
	  return protocol === 'https:' ? 443 : 80
	}

	function defaultFactory (origin, opts) {
	  return new Pool(origin, opts)
	}

	class ProxyAgent extends DispatcherBase {
	  constructor (opts) {
	    super();

	    if (!opts || (typeof opts === 'object' && !(opts instanceof URL) && !opts.uri)) {
	      throw new InvalidArgumentError('Proxy uri is mandatory')
	    }

	    const { clientFactory = defaultFactory } = opts;
	    if (typeof clientFactory !== 'function') {
	      throw new InvalidArgumentError('Proxy opts.clientFactory must be a function.')
	    }

	    const url = this.#getUrl(opts);
	    const { href, origin, port, protocol, username, password, hostname: proxyHostname } = url;

	    this[kProxy] = { uri: href, protocol };
	    this[kInterceptors] = opts.interceptors?.ProxyAgent && Array.isArray(opts.interceptors.ProxyAgent)
	      ? opts.interceptors.ProxyAgent
	      : [];
	    this[kRequestTls] = opts.requestTls;
	    this[kProxyTls] = opts.proxyTls;
	    this[kProxyHeaders] = opts.headers || {};

	    if (opts.auth && opts.token) {
	      throw new InvalidArgumentError('opts.auth cannot be used in combination with opts.token')
	    } else if (opts.auth) {
	      /* @deprecated in favour of opts.token */
	      this[kProxyHeaders]['proxy-authorization'] = `Basic ${opts.auth}`;
	    } else if (opts.token) {
	      this[kProxyHeaders]['proxy-authorization'] = opts.token;
	    } else if (username && password) {
	      this[kProxyHeaders]['proxy-authorization'] = `Basic ${Buffer.from(`${decodeURIComponent(username)}:${decodeURIComponent(password)}`).toString('base64')}`;
	    }

	    const connect = buildConnector({ ...opts.proxyTls });
	    this[kConnectEndpoint] = buildConnector({ ...opts.requestTls });
	    this[kClient] = clientFactory(url, { connect });
	    this[kAgent] = new Agent({
	      ...opts,
	      connect: async (opts, callback) => {
	        let requestedPath = opts.host;
	        if (!opts.port) {
	          requestedPath += `:${defaultProtocolPort(opts.protocol)}`;
	        }
	        try {
	          const { socket, statusCode } = await this[kClient].connect({
	            origin,
	            port,
	            path: requestedPath,
	            signal: opts.signal,
	            headers: {
	              ...this[kProxyHeaders],
	              host: opts.host
	            },
	            servername: this[kProxyTls]?.servername || proxyHostname
	          });
	          if (statusCode !== 200) {
	            socket.on('error', () => {}).destroy();
	            callback(new RequestAbortedError(`Proxy response (${statusCode}) !== 200 when HTTP Tunneling`));
	          }
	          if (opts.protocol !== 'https:') {
	            callback(null, socket);
	            return
	          }
	          let servername;
	          if (this[kRequestTls]) {
	            servername = this[kRequestTls].servername;
	          } else {
	            servername = opts.servername;
	          }
	          this[kConnectEndpoint]({ ...opts, servername, httpSocket: socket }, callback);
	        } catch (err) {
	          if (err.code === 'ERR_TLS_CERT_ALTNAME_INVALID') {
	            // Throw a custom error to avoid loop in client.js#connect
	            callback(new SecureProxyConnectionError(err));
	          } else {
	            callback(err);
	          }
	        }
	      }
	    });
	  }

	  dispatch (opts, handler) {
	    const headers = buildHeaders(opts.headers);
	    throwIfProxyAuthIsSent(headers);

	    if (headers && !('host' in headers) && !('Host' in headers)) {
	      const { host } = new URL(opts.origin);
	      headers.host = host;
	    }

	    return this[kAgent].dispatch(
	      {
	        ...opts,
	        headers
	      },
	      handler
	    )
	  }

	  /**
	   * @param {import('../types/proxy-agent').ProxyAgent.Options | string | URL} opts
	   * @returns {URL}
	   */
	  #getUrl (opts) {
	    if (typeof opts === 'string') {
	      return new URL(opts)
	    } else if (opts instanceof URL) {
	      return opts
	    } else {
	      return new URL(opts.uri)
	    }
	  }

	  async [kClose] () {
	    await this[kAgent].close();
	    await this[kClient].close();
	  }

	  async [kDestroy] () {
	    await this[kAgent].destroy();
	    await this[kClient].destroy();
	  }
	}

	/**
	 * @param {string[] | Record<string, string>} headers
	 * @returns {Record<string, string>}
	 */
	function buildHeaders (headers) {
	  // When using undici.fetch, the headers list is stored
	  // as an array.
	  if (Array.isArray(headers)) {
	    /** @type {Record<string, string>} */
	    const headersPair = {};

	    for (let i = 0; i < headers.length; i += 2) {
	      headersPair[headers[i]] = headers[i + 1];
	    }

	    return headersPair
	  }

	  return headers
	}

	/**
	 * @param {Record<string, string>} headers
	 *
	 * Previous versions of ProxyAgent suggests the Proxy-Authorization in request headers
	 * Nevertheless, it was changed and to avoid a security vulnerability by end users
	 * this check was created.
	 * It should be removed in the next major version for performance reasons
	 */
	function throwIfProxyAuthIsSent (headers) {
	  const existProxyAuth = headers && Object.keys(headers)
	    .find((key) => key.toLowerCase() === 'proxy-authorization');
	  if (existProxyAuth) {
	    throw new InvalidArgumentError('Proxy-Authorization should be sent in ProxyAgent constructor')
	  }
	}

	proxyAgent = ProxyAgent;
	return proxyAgent;
}

var envHttpProxyAgent;
var hasRequiredEnvHttpProxyAgent;

function requireEnvHttpProxyAgent () {
	if (hasRequiredEnvHttpProxyAgent) return envHttpProxyAgent;
	hasRequiredEnvHttpProxyAgent = 1;

	const DispatcherBase = requireDispatcherBase();
	const { kClose, kDestroy, kClosed, kDestroyed, kDispatch, kNoProxyAgent, kHttpProxyAgent, kHttpsProxyAgent } = requireSymbols$5();
	const ProxyAgent = requireProxyAgent();
	const Agent = requireAgent();

	const DEFAULT_PORTS = {
	  'http:': 80,
	  'https:': 443
	};

	let experimentalWarned = false;

	class EnvHttpProxyAgent extends DispatcherBase {
	  #noProxyValue = null
	  #noProxyEntries = null
	  #opts = null

	  constructor (opts = {}) {
	    super();
	    this.#opts = opts;

	    if (!experimentalWarned) {
	      experimentalWarned = true;
	      process.emitWarning('EnvHttpProxyAgent is experimental, expect them to change at any time.', {
	        code: 'UNDICI-EHPA'
	      });
	    }

	    const { httpProxy, httpsProxy, noProxy, ...agentOpts } = opts;

	    this[kNoProxyAgent] = new Agent(agentOpts);

	    const HTTP_PROXY = httpProxy ?? process.env.http_proxy ?? process.env.HTTP_PROXY;
	    if (HTTP_PROXY) {
	      this[kHttpProxyAgent] = new ProxyAgent({ ...agentOpts, uri: HTTP_PROXY });
	    } else {
	      this[kHttpProxyAgent] = this[kNoProxyAgent];
	    }

	    const HTTPS_PROXY = httpsProxy ?? process.env.https_proxy ?? process.env.HTTPS_PROXY;
	    if (HTTPS_PROXY) {
	      this[kHttpsProxyAgent] = new ProxyAgent({ ...agentOpts, uri: HTTPS_PROXY });
	    } else {
	      this[kHttpsProxyAgent] = this[kHttpProxyAgent];
	    }

	    this.#parseNoProxy();
	  }

	  [kDispatch] (opts, handler) {
	    const url = new URL(opts.origin);
	    const agent = this.#getProxyAgentForUrl(url);
	    return agent.dispatch(opts, handler)
	  }

	  async [kClose] () {
	    await this[kNoProxyAgent].close();
	    if (!this[kHttpProxyAgent][kClosed]) {
	      await this[kHttpProxyAgent].close();
	    }
	    if (!this[kHttpsProxyAgent][kClosed]) {
	      await this[kHttpsProxyAgent].close();
	    }
	  }

	  async [kDestroy] (err) {
	    await this[kNoProxyAgent].destroy(err);
	    if (!this[kHttpProxyAgent][kDestroyed]) {
	      await this[kHttpProxyAgent].destroy(err);
	    }
	    if (!this[kHttpsProxyAgent][kDestroyed]) {
	      await this[kHttpsProxyAgent].destroy(err);
	    }
	  }

	  #getProxyAgentForUrl (url) {
	    let { protocol, host: hostname, port } = url;

	    // Stripping ports in this way instead of using parsedUrl.hostname to make
	    // sure that the brackets around IPv6 addresses are kept.
	    hostname = hostname.replace(/:\d*$/, '').toLowerCase();
	    port = Number.parseInt(port, 10) || DEFAULT_PORTS[protocol] || 0;
	    if (!this.#shouldProxy(hostname, port)) {
	      return this[kNoProxyAgent]
	    }
	    if (protocol === 'https:') {
	      return this[kHttpsProxyAgent]
	    }
	    return this[kHttpProxyAgent]
	  }

	  #shouldProxy (hostname, port) {
	    if (this.#noProxyChanged) {
	      this.#parseNoProxy();
	    }

	    if (this.#noProxyEntries.length === 0) {
	      return true // Always proxy if NO_PROXY is not set or empty.
	    }
	    if (this.#noProxyValue === '*') {
	      return false // Never proxy if wildcard is set.
	    }

	    for (let i = 0; i < this.#noProxyEntries.length; i++) {
	      const entry = this.#noProxyEntries[i];
	      if (entry.port && entry.port !== port) {
	        continue // Skip if ports don't match.
	      }
	      if (!/^[.*]/.test(entry.hostname)) {
	        // No wildcards, so don't proxy only if there is not an exact match.
	        if (hostname === entry.hostname) {
	          return false
	        }
	      } else {
	        // Don't proxy if the hostname ends with the no_proxy host.
	        if (hostname.endsWith(entry.hostname.replace(/^\*/, ''))) {
	          return false
	        }
	      }
	    }

	    return true
	  }

	  #parseNoProxy () {
	    const noProxyValue = this.#opts.noProxy ?? this.#noProxyEnv;
	    const noProxySplit = noProxyValue.split(/[,\s]/);
	    const noProxyEntries = [];

	    for (let i = 0; i < noProxySplit.length; i++) {
	      const entry = noProxySplit[i];
	      if (!entry) {
	        continue
	      }
	      const parsed = entry.match(/^(.+):(\d+)$/);
	      noProxyEntries.push({
	        hostname: (parsed ? parsed[1] : entry).toLowerCase(),
	        port: parsed ? Number.parseInt(parsed[2], 10) : 0
	      });
	    }

	    this.#noProxyValue = noProxyValue;
	    this.#noProxyEntries = noProxyEntries;
	  }

	  get #noProxyChanged () {
	    if (this.#opts.noProxy !== undefined) {
	      return false
	    }
	    return this.#noProxyValue !== this.#noProxyEnv
	  }

	  get #noProxyEnv () {
	    return process.env.no_proxy ?? process.env.NO_PROXY ?? ''
	  }
	}

	envHttpProxyAgent = EnvHttpProxyAgent;
	return envHttpProxyAgent;
}

var retryHandler;
var hasRequiredRetryHandler;

function requireRetryHandler () {
	if (hasRequiredRetryHandler) return retryHandler;
	hasRequiredRetryHandler = 1;
	const assert = require$$0$7;

	const { kRetryHandlerDefaultRetry } = requireSymbols$5();
	const { RequestRetryError } = requireErrors();
	const {
	  isDisturbed,
	  parseHeaders,
	  parseRangeHeader,
	  wrapRequestBody
	} = requireUtil$8();

	function calculateRetryAfterHeader (retryAfter) {
	  const current = Date.now();
	  return new Date(retryAfter).getTime() - current
	}

	class RetryHandler {
	  constructor (opts, handlers) {
	    const { retryOptions, ...dispatchOpts } = opts;
	    const {
	      // Retry scoped
	      retry: retryFn,
	      maxRetries,
	      maxTimeout,
	      minTimeout,
	      timeoutFactor,
	      // Response scoped
	      methods,
	      errorCodes,
	      retryAfter,
	      statusCodes
	    } = retryOptions ?? {};

	    this.dispatch = handlers.dispatch;
	    this.handler = handlers.handler;
	    this.opts = { ...dispatchOpts, body: wrapRequestBody(opts.body) };
	    this.abort = null;
	    this.aborted = false;
	    this.retryOpts = {
	      retry: retryFn ?? RetryHandler[kRetryHandlerDefaultRetry],
	      retryAfter: retryAfter ?? true,
	      maxTimeout: maxTimeout ?? 30 * 1000, // 30s,
	      minTimeout: minTimeout ?? 500, // .5s
	      timeoutFactor: timeoutFactor ?? 2,
	      maxRetries: maxRetries ?? 5,
	      // What errors we should retry
	      methods: methods ?? ['GET', 'HEAD', 'OPTIONS', 'PUT', 'DELETE', 'TRACE'],
	      // Indicates which errors to retry
	      statusCodes: statusCodes ?? [500, 502, 503, 504, 429],
	      // List of errors to retry
	      errorCodes: errorCodes ?? [
	        'ECONNRESET',
	        'ECONNREFUSED',
	        'ENOTFOUND',
	        'ENETDOWN',
	        'ENETUNREACH',
	        'EHOSTDOWN',
	        'EHOSTUNREACH',
	        'EPIPE',
	        'UND_ERR_SOCKET'
	      ]
	    };

	    this.retryCount = 0;
	    this.retryCountCheckpoint = 0;
	    this.start = 0;
	    this.end = null;
	    this.etag = null;
	    this.resume = null;

	    // Handle possible onConnect duplication
	    this.handler.onConnect(reason => {
	      this.aborted = true;
	      if (this.abort) {
	        this.abort(reason);
	      } else {
	        this.reason = reason;
	      }
	    });
	  }

	  onRequestSent () {
	    if (this.handler.onRequestSent) {
	      this.handler.onRequestSent();
	    }
	  }

	  onUpgrade (statusCode, headers, socket) {
	    if (this.handler.onUpgrade) {
	      this.handler.onUpgrade(statusCode, headers, socket);
	    }
	  }

	  onConnect (abort) {
	    if (this.aborted) {
	      abort(this.reason);
	    } else {
	      this.abort = abort;
	    }
	  }

	  onBodySent (chunk) {
	    if (this.handler.onBodySent) return this.handler.onBodySent(chunk)
	  }

	  static [kRetryHandlerDefaultRetry] (err, { state, opts }, cb) {
	    const { statusCode, code, headers } = err;
	    const { method, retryOptions } = opts;
	    const {
	      maxRetries,
	      minTimeout,
	      maxTimeout,
	      timeoutFactor,
	      statusCodes,
	      errorCodes,
	      methods
	    } = retryOptions;
	    const { counter } = state;

	    // Any code that is not a Undici's originated and allowed to retry
	    if (code && code !== 'UND_ERR_REQ_RETRY' && !errorCodes.includes(code)) {
	      cb(err);
	      return
	    }

	    // If a set of method are provided and the current method is not in the list
	    if (Array.isArray(methods) && !methods.includes(method)) {
	      cb(err);
	      return
	    }

	    // If a set of status code are provided and the current status code is not in the list
	    if (
	      statusCode != null &&
	      Array.isArray(statusCodes) &&
	      !statusCodes.includes(statusCode)
	    ) {
	      cb(err);
	      return
	    }

	    // If we reached the max number of retries
	    if (counter > maxRetries) {
	      cb(err);
	      return
	    }

	    let retryAfterHeader = headers?.['retry-after'];
	    if (retryAfterHeader) {
	      retryAfterHeader = Number(retryAfterHeader);
	      retryAfterHeader = Number.isNaN(retryAfterHeader)
	        ? calculateRetryAfterHeader(retryAfterHeader)
	        : retryAfterHeader * 1e3; // Retry-After is in seconds
	    }

	    const retryTimeout =
	      retryAfterHeader > 0
	        ? Math.min(retryAfterHeader, maxTimeout)
	        : Math.min(minTimeout * timeoutFactor ** (counter - 1), maxTimeout);

	    setTimeout(() => cb(null), retryTimeout);
	  }

	  onHeaders (statusCode, rawHeaders, resume, statusMessage) {
	    const headers = parseHeaders(rawHeaders);

	    this.retryCount += 1;

	    if (statusCode >= 300) {
	      if (this.retryOpts.statusCodes.includes(statusCode) === false) {
	        return this.handler.onHeaders(
	          statusCode,
	          rawHeaders,
	          resume,
	          statusMessage
	        )
	      } else {
	        this.abort(
	          new RequestRetryError('Request failed', statusCode, {
	            headers,
	            data: {
	              count: this.retryCount
	            }
	          })
	        );
	        return false
	      }
	    }

	    // Checkpoint for resume from where we left it
	    if (this.resume != null) {
	      this.resume = null;

	      if (statusCode !== 206) {
	        return true
	      }

	      const contentRange = parseRangeHeader(headers['content-range']);
	      // If no content range
	      if (!contentRange) {
	        this.abort(
	          new RequestRetryError('Content-Range mismatch', statusCode, {
	            headers,
	            data: { count: this.retryCount }
	          })
	        );
	        return false
	      }

	      // Let's start with a weak etag check
	      if (this.etag != null && this.etag !== headers.etag) {
	        this.abort(
	          new RequestRetryError('ETag mismatch', statusCode, {
	            headers,
	            data: { count: this.retryCount }
	          })
	        );
	        return false
	      }

	      const { start, size, end = size } = contentRange;

	      assert(this.start === start, 'content-range mismatch');
	      assert(this.end == null || this.end === end, 'content-range mismatch');

	      this.resume = resume;
	      return true
	    }

	    if (this.end == null) {
	      if (statusCode === 206) {
	        // First time we receive 206
	        const range = parseRangeHeader(headers['content-range']);

	        if (range == null) {
	          return this.handler.onHeaders(
	            statusCode,
	            rawHeaders,
	            resume,
	            statusMessage
	          )
	        }

	        const { start, size, end = size } = range;
	        assert(
	          start != null && Number.isFinite(start),
	          'content-range mismatch'
	        );
	        assert(end != null && Number.isFinite(end), 'invalid content-length');

	        this.start = start;
	        this.end = end;
	      }

	      // We make our best to checkpoint the body for further range headers
	      if (this.end == null) {
	        const contentLength = headers['content-length'];
	        this.end = contentLength != null ? Number(contentLength) : null;
	      }

	      assert(Number.isFinite(this.start));
	      assert(
	        this.end == null || Number.isFinite(this.end),
	        'invalid content-length'
	      );

	      this.resume = resume;
	      this.etag = headers.etag != null ? headers.etag : null;

	      // Weak etags are not useful for comparison nor cache
	      // for instance not safe to assume if the response is byte-per-byte
	      // equal
	      if (this.etag != null && this.etag.startsWith('W/')) {
	        this.etag = null;
	      }

	      return this.handler.onHeaders(
	        statusCode,
	        rawHeaders,
	        resume,
	        statusMessage
	      )
	    }

	    const err = new RequestRetryError('Request failed', statusCode, {
	      headers,
	      data: { count: this.retryCount }
	    });

	    this.abort(err);

	    return false
	  }

	  onData (chunk) {
	    this.start += chunk.length;

	    return this.handler.onData(chunk)
	  }

	  onComplete (rawTrailers) {
	    this.retryCount = 0;
	    return this.handler.onComplete(rawTrailers)
	  }

	  onError (err) {
	    if (this.aborted || isDisturbed(this.opts.body)) {
	      return this.handler.onError(err)
	    }

	    // We reconcile in case of a mix between network errors
	    // and server error response
	    if (this.retryCount - this.retryCountCheckpoint > 0) {
	      // We count the difference between the last checkpoint and the current retry count
	      this.retryCount =
	        this.retryCountCheckpoint +
	        (this.retryCount - this.retryCountCheckpoint);
	    } else {
	      this.retryCount += 1;
	    }

	    this.retryOpts.retry(
	      err,
	      {
	        state: { counter: this.retryCount },
	        opts: { retryOptions: this.retryOpts, ...this.opts }
	      },
	      onRetry.bind(this)
	    );

	    function onRetry (err) {
	      if (err != null || this.aborted || isDisturbed(this.opts.body)) {
	        return this.handler.onError(err)
	      }

	      if (this.start !== 0) {
	        const headers = { range: `bytes=${this.start}-${this.end ?? ''}` };

	        // Weak etag check - weak etags will make comparison algorithms never match
	        if (this.etag != null) {
	          headers['if-match'] = this.etag;
	        }

	        this.opts = {
	          ...this.opts,
	          headers: {
	            ...this.opts.headers,
	            ...headers
	          }
	        };
	      }

	      try {
	        this.retryCountCheckpoint = this.retryCount;
	        this.dispatch(this.opts, this);
	      } catch (err) {
	        this.handler.onError(err);
	      }
	    }
	  }
	}

	retryHandler = RetryHandler;
	return retryHandler;
}

var retryAgent;
var hasRequiredRetryAgent;

function requireRetryAgent () {
	if (hasRequiredRetryAgent) return retryAgent;
	hasRequiredRetryAgent = 1;

	const Dispatcher = requireDispatcher();
	const RetryHandler = requireRetryHandler();

	class RetryAgent extends Dispatcher {
	  #agent = null
	  #options = null
	  constructor (agent, options = {}) {
	    super(options);
	    this.#agent = agent;
	    this.#options = options;
	  }

	  dispatch (opts, handler) {
	    const retry = new RetryHandler({
	      ...opts,
	      retryOptions: this.#options
	    }, {
	      dispatch: this.#agent.dispatch.bind(this.#agent),
	      handler
	    });
	    return this.#agent.dispatch(opts, retry)
	  }

	  close () {
	    return this.#agent.close()
	  }

	  destroy () {
	    return this.#agent.destroy()
	  }
	}

	retryAgent = RetryAgent;
	return retryAgent;
}

var api = {};

var apiRequest = {exports: {}};

var readable;
var hasRequiredReadable;

function requireReadable () {
	if (hasRequiredReadable) return readable;
	hasRequiredReadable = 1;

	const assert = require$$0$7;
	const { Readable } = require$$0$8;
	const { RequestAbortedError, NotSupportedError, InvalidArgumentError, AbortError } = requireErrors();
	const util = requireUtil$8();
	const { ReadableStreamFrom } = requireUtil$8();

	const kConsume = Symbol('kConsume');
	const kReading = Symbol('kReading');
	const kBody = Symbol('kBody');
	const kAbort = Symbol('kAbort');
	const kContentType = Symbol('kContentType');
	const kContentLength = Symbol('kContentLength');

	const noop = () => {};

	class BodyReadable extends Readable {
	  constructor ({
	    resume,
	    abort,
	    contentType = '',
	    contentLength,
	    highWaterMark = 64 * 1024 // Same as nodejs fs streams.
	  }) {
	    super({
	      autoDestroy: true,
	      read: resume,
	      highWaterMark
	    });

	    this._readableState.dataEmitted = false;

	    this[kAbort] = abort;
	    this[kConsume] = null;
	    this[kBody] = null;
	    this[kContentType] = contentType;
	    this[kContentLength] = contentLength;

	    // Is stream being consumed through Readable API?
	    // This is an optimization so that we avoid checking
	    // for 'data' and 'readable' listeners in the hot path
	    // inside push().
	    this[kReading] = false;
	  }

	  destroy (err) {
	    if (!err && !this._readableState.endEmitted) {
	      err = new RequestAbortedError();
	    }

	    if (err) {
	      this[kAbort]();
	    }

	    return super.destroy(err)
	  }

	  _destroy (err, callback) {
	    // Workaround for Node "bug". If the stream is destroyed in same
	    // tick as it is created, then a user who is waiting for a
	    // promise (i.e micro tick) for installing a 'error' listener will
	    // never get a chance and will always encounter an unhandled exception.
	    if (!this[kReading]) {
	      setImmediate(() => {
	        callback(err);
	      });
	    } else {
	      callback(err);
	    }
	  }

	  on (ev, ...args) {
	    if (ev === 'data' || ev === 'readable') {
	      this[kReading] = true;
	    }
	    return super.on(ev, ...args)
	  }

	  addListener (ev, ...args) {
	    return this.on(ev, ...args)
	  }

	  off (ev, ...args) {
	    const ret = super.off(ev, ...args);
	    if (ev === 'data' || ev === 'readable') {
	      this[kReading] = (
	        this.listenerCount('data') > 0 ||
	        this.listenerCount('readable') > 0
	      );
	    }
	    return ret
	  }

	  removeListener (ev, ...args) {
	    return this.off(ev, ...args)
	  }

	  push (chunk) {
	    if (this[kConsume] && chunk !== null) {
	      consumePush(this[kConsume], chunk);
	      return this[kReading] ? super.push(chunk) : true
	    }
	    return super.push(chunk)
	  }

	  // https://fetch.spec.whatwg.org/#dom-body-text
	  async text () {
	    return consume(this, 'text')
	  }

	  // https://fetch.spec.whatwg.org/#dom-body-json
	  async json () {
	    return consume(this, 'json')
	  }

	  // https://fetch.spec.whatwg.org/#dom-body-blob
	  async blob () {
	    return consume(this, 'blob')
	  }

	  // https://fetch.spec.whatwg.org/#dom-body-arraybuffer
	  async arrayBuffer () {
	    return consume(this, 'arrayBuffer')
	  }

	  // https://fetch.spec.whatwg.org/#dom-body-formdata
	  async formData () {
	    // TODO: Implement.
	    throw new NotSupportedError()
	  }

	  // https://fetch.spec.whatwg.org/#dom-body-bodyused
	  get bodyUsed () {
	    return util.isDisturbed(this)
	  }

	  // https://fetch.spec.whatwg.org/#dom-body-body
	  get body () {
	    if (!this[kBody]) {
	      this[kBody] = ReadableStreamFrom(this);
	      if (this[kConsume]) {
	        // TODO: Is this the best way to force a lock?
	        this[kBody].getReader(); // Ensure stream is locked.
	        assert(this[kBody].locked);
	      }
	    }
	    return this[kBody]
	  }

	  async dump (opts) {
	    let limit = Number.isFinite(opts?.limit) ? opts.limit : 128 * 1024;
	    const signal = opts?.signal;

	    if (signal != null && (typeof signal !== 'object' || !('aborted' in signal))) {
	      throw new InvalidArgumentError('signal must be an AbortSignal')
	    }

	    signal?.throwIfAborted();

	    if (this._readableState.closeEmitted) {
	      return null
	    }

	    return await new Promise((resolve, reject) => {
	      if (this[kContentLength] > limit) {
	        this.destroy(new AbortError());
	      }

	      const onAbort = () => {
	        this.destroy(signal.reason ?? new AbortError());
	      };
	      signal?.addEventListener('abort', onAbort);

	      this
	        .on('close', function () {
	          signal?.removeEventListener('abort', onAbort);
	          if (signal?.aborted) {
	            reject(signal.reason ?? new AbortError());
	          } else {
	            resolve(null);
	          }
	        })
	        .on('error', noop)
	        .on('data', function (chunk) {
	          limit -= chunk.length;
	          if (limit <= 0) {
	            this.destroy();
	          }
	        })
	        .resume();
	    })
	  }
	}

	// https://streams.spec.whatwg.org/#readablestream-locked
	function isLocked (self) {
	  // Consume is an implicit lock.
	  return (self[kBody] && self[kBody].locked === true) || self[kConsume]
	}

	// https://fetch.spec.whatwg.org/#body-unusable
	function isUnusable (self) {
	  return util.isDisturbed(self) || isLocked(self)
	}

	async function consume (stream, type) {
	  assert(!stream[kConsume]);

	  return new Promise((resolve, reject) => {
	    if (isUnusable(stream)) {
	      const rState = stream._readableState;
	      if (rState.destroyed && rState.closeEmitted === false) {
	        stream
	          .on('error', err => {
	            reject(err);
	          })
	          .on('close', () => {
	            reject(new TypeError('unusable'));
	          });
	      } else {
	        reject(rState.errored ?? new TypeError('unusable'));
	      }
	    } else {
	      queueMicrotask(() => {
	        stream[kConsume] = {
	          type,
	          stream,
	          resolve,
	          reject,
	          length: 0,
	          body: []
	        };

	        stream
	          .on('error', function (err) {
	            consumeFinish(this[kConsume], err);
	          })
	          .on('close', function () {
	            if (this[kConsume].body !== null) {
	              consumeFinish(this[kConsume], new RequestAbortedError());
	            }
	          });

	        consumeStart(stream[kConsume]);
	      });
	    }
	  })
	}

	function consumeStart (consume) {
	  if (consume.body === null) {
	    return
	  }

	  const { _readableState: state } = consume.stream;

	  if (state.bufferIndex) {
	    const start = state.bufferIndex;
	    const end = state.buffer.length;
	    for (let n = start; n < end; n++) {
	      consumePush(consume, state.buffer[n]);
	    }
	  } else {
	    for (const chunk of state.buffer) {
	      consumePush(consume, chunk);
	    }
	  }

	  if (state.endEmitted) {
	    consumeEnd(this[kConsume]);
	  } else {
	    consume.stream.on('end', function () {
	      consumeEnd(this[kConsume]);
	    });
	  }

	  consume.stream.resume();

	  while (consume.stream.read() != null) {
	    // Loop
	  }
	}

	/**
	 * @param {Buffer[]} chunks
	 * @param {number} length
	 */
	function chunksDecode (chunks, length) {
	  if (chunks.length === 0 || length === 0) {
	    return ''
	  }
	  const buffer = chunks.length === 1 ? chunks[0] : Buffer.concat(chunks, length);
	  const bufferLength = buffer.length;

	  // Skip BOM.
	  const start =
	    bufferLength > 2 &&
	    buffer[0] === 0xef &&
	    buffer[1] === 0xbb &&
	    buffer[2] === 0xbf
	      ? 3
	      : 0;
	  return buffer.utf8Slice(start, bufferLength)
	}

	function consumeEnd (consume) {
	  const { type, body, resolve, stream, length } = consume;

	  try {
	    if (type === 'text') {
	      resolve(chunksDecode(body, length));
	    } else if (type === 'json') {
	      resolve(JSON.parse(chunksDecode(body, length)));
	    } else if (type === 'arrayBuffer') {
	      const dst = new Uint8Array(length);

	      let pos = 0;
	      for (const buf of body) {
	        dst.set(buf, pos);
	        pos += buf.byteLength;
	      }

	      resolve(dst.buffer);
	    } else if (type === 'blob') {
	      resolve(new Blob(body, { type: stream[kContentType] }));
	    }

	    consumeFinish(consume);
	  } catch (err) {
	    stream.destroy(err);
	  }
	}

	function consumePush (consume, chunk) {
	  consume.length += chunk.length;
	  consume.body.push(chunk);
	}

	function consumeFinish (consume, err) {
	  if (consume.body === null) {
	    return
	  }

	  if (err) {
	    consume.reject(err);
	  } else {
	    consume.resolve();
	  }

	  consume.type = null;
	  consume.stream = null;
	  consume.resolve = null;
	  consume.reject = null;
	  consume.length = 0;
	  consume.body = null;
	}

	readable = { Readable: BodyReadable, chunksDecode };
	return readable;
}

var util$5;
var hasRequiredUtil$6;

function requireUtil$6 () {
	if (hasRequiredUtil$6) return util$5;
	hasRequiredUtil$6 = 1;
	const assert = require$$0$7;
	const {
	  ResponseStatusCodeError
	} = requireErrors();

	const { chunksDecode } = requireReadable();
	const CHUNK_LIMIT = 128 * 1024;

	async function getResolveErrorBodyCallback ({ callback, body, contentType, statusCode, statusMessage, headers }) {
	  assert(body);

	  let chunks = [];
	  let length = 0;

	  try {
	    for await (const chunk of body) {
	      chunks.push(chunk);
	      length += chunk.length;
	      if (length > CHUNK_LIMIT) {
	        chunks = [];
	        length = 0;
	        break
	      }
	    }
	  } catch {
	    chunks = [];
	    length = 0;
	    // Do nothing....
	  }

	  const message = `Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`;

	  if (statusCode === 204 || !contentType || !length) {
	    queueMicrotask(() => callback(new ResponseStatusCodeError(message, statusCode, headers)));
	    return
	  }

	  const stackTraceLimit = Error.stackTraceLimit;
	  Error.stackTraceLimit = 0;
	  let payload;

	  try {
	    if (isContentTypeApplicationJson(contentType)) {
	      payload = JSON.parse(chunksDecode(chunks, length));
	    } else if (isContentTypeText(contentType)) {
	      payload = chunksDecode(chunks, length);
	    }
	  } catch {
	    // process in a callback to avoid throwing in the microtask queue
	  } finally {
	    Error.stackTraceLimit = stackTraceLimit;
	  }
	  queueMicrotask(() => callback(new ResponseStatusCodeError(message, statusCode, headers, payload)));
	}

	const isContentTypeApplicationJson = (contentType) => {
	  return (
	    contentType.length > 15 &&
	    contentType[11] === '/' &&
	    contentType[0] === 'a' &&
	    contentType[1] === 'p' &&
	    contentType[2] === 'p' &&
	    contentType[3] === 'l' &&
	    contentType[4] === 'i' &&
	    contentType[5] === 'c' &&
	    contentType[6] === 'a' &&
	    contentType[7] === 't' &&
	    contentType[8] === 'i' &&
	    contentType[9] === 'o' &&
	    contentType[10] === 'n' &&
	    contentType[12] === 'j' &&
	    contentType[13] === 's' &&
	    contentType[14] === 'o' &&
	    contentType[15] === 'n'
	  )
	};

	const isContentTypeText = (contentType) => {
	  return (
	    contentType.length > 4 &&
	    contentType[4] === '/' &&
	    contentType[0] === 't' &&
	    contentType[1] === 'e' &&
	    contentType[2] === 'x' &&
	    contentType[3] === 't'
	  )
	};

	util$5 = {
	  getResolveErrorBodyCallback,
	  isContentTypeApplicationJson,
	  isContentTypeText
	};
	return util$5;
}

var hasRequiredApiRequest;

function requireApiRequest () {
	if (hasRequiredApiRequest) return apiRequest.exports;
	hasRequiredApiRequest = 1;

	const assert = require$$0$7;
	const { Readable } = requireReadable();
	const { InvalidArgumentError, RequestAbortedError } = requireErrors();
	const util = requireUtil$8();
	const { getResolveErrorBodyCallback } = requireUtil$6();
	const { AsyncResource } = require$$5$5;

	class RequestHandler extends AsyncResource {
	  constructor (opts, callback) {
	    if (!opts || typeof opts !== 'object') {
	      throw new InvalidArgumentError('invalid opts')
	    }

	    const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError, highWaterMark } = opts;

	    try {
	      if (typeof callback !== 'function') {
	        throw new InvalidArgumentError('invalid callback')
	      }

	      if (highWaterMark && (typeof highWaterMark !== 'number' || highWaterMark < 0)) {
	        throw new InvalidArgumentError('invalid highWaterMark')
	      }

	      if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {
	        throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')
	      }

	      if (method === 'CONNECT') {
	        throw new InvalidArgumentError('invalid method')
	      }

	      if (onInfo && typeof onInfo !== 'function') {
	        throw new InvalidArgumentError('invalid onInfo callback')
	      }

	      super('UNDICI_REQUEST');
	    } catch (err) {
	      if (util.isStream(body)) {
	        util.destroy(body.on('error', util.nop), err);
	      }
	      throw err
	    }

	    this.method = method;
	    this.responseHeaders = responseHeaders || null;
	    this.opaque = opaque || null;
	    this.callback = callback;
	    this.res = null;
	    this.abort = null;
	    this.body = body;
	    this.trailers = {};
	    this.context = null;
	    this.onInfo = onInfo || null;
	    this.throwOnError = throwOnError;
	    this.highWaterMark = highWaterMark;
	    this.signal = signal;
	    this.reason = null;
	    this.removeAbortListener = null;

	    if (util.isStream(body)) {
	      body.on('error', (err) => {
	        this.onError(err);
	      });
	    }

	    if (this.signal) {
	      if (this.signal.aborted) {
	        this.reason = this.signal.reason ?? new RequestAbortedError();
	      } else {
	        this.removeAbortListener = util.addAbortListener(this.signal, () => {
	          this.reason = this.signal.reason ?? new RequestAbortedError();
	          if (this.res) {
	            util.destroy(this.res, this.reason);
	          } else if (this.abort) {
	            this.abort(this.reason);
	          }

	          if (this.removeAbortListener) {
	            this.res?.off('close', this.removeAbortListener);
	            this.removeAbortListener();
	            this.removeAbortListener = null;
	          }
	        });
	      }
	    }
	  }

	  onConnect (abort, context) {
	    if (this.reason) {
	      abort(this.reason);
	      return
	    }

	    assert(this.callback);

	    this.abort = abort;
	    this.context = context;
	  }

	  onHeaders (statusCode, rawHeaders, resume, statusMessage) {
	    const { callback, opaque, abort, context, responseHeaders, highWaterMark } = this;

	    const headers = responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);

	    if (statusCode < 200) {
	      if (this.onInfo) {
	        this.onInfo({ statusCode, headers });
	      }
	      return
	    }

	    const parsedHeaders = responseHeaders === 'raw' ? util.parseHeaders(rawHeaders) : headers;
	    const contentType = parsedHeaders['content-type'];
	    const contentLength = parsedHeaders['content-length'];
	    const res = new Readable({
	      resume,
	      abort,
	      contentType,
	      contentLength: this.method !== 'HEAD' && contentLength
	        ? Number(contentLength)
	        : null,
	      highWaterMark
	    });

	    if (this.removeAbortListener) {
	      res.on('close', this.removeAbortListener);
	    }

	    this.callback = null;
	    this.res = res;
	    if (callback !== null) {
	      if (this.throwOnError && statusCode >= 400) {
	        this.runInAsyncScope(getResolveErrorBodyCallback, null,
	          { callback, body: res, contentType, statusCode, statusMessage, headers }
	        );
	      } else {
	        this.runInAsyncScope(callback, null, null, {
	          statusCode,
	          headers,
	          trailers: this.trailers,
	          opaque,
	          body: res,
	          context
	        });
	      }
	    }
	  }

	  onData (chunk) {
	    return this.res.push(chunk)
	  }

	  onComplete (trailers) {
	    util.parseHeaders(trailers, this.trailers);
	    this.res.push(null);
	  }

	  onError (err) {
	    const { res, callback, body, opaque } = this;

	    if (callback) {
	      // TODO: Does this need queueMicrotask?
	      this.callback = null;
	      queueMicrotask(() => {
	        this.runInAsyncScope(callback, null, err, { opaque });
	      });
	    }

	    if (res) {
	      this.res = null;
	      // Ensure all queued handlers are invoked before destroying res.
	      queueMicrotask(() => {
	        util.destroy(res, err);
	      });
	    }

	    if (body) {
	      this.body = null;
	      util.destroy(body, err);
	    }

	    if (this.removeAbortListener) {
	      res?.off('close', this.removeAbortListener);
	      this.removeAbortListener();
	      this.removeAbortListener = null;
	    }
	  }
	}

	function request (opts, callback) {
	  if (callback === undefined) {
	    return new Promise((resolve, reject) => {
	      request.call(this, opts, (err, data) => {
	        return err ? reject(err) : resolve(data)
	      });
	    })
	  }

	  try {
	    this.dispatch(opts, new RequestHandler(opts, callback));
	  } catch (err) {
	    if (typeof callback !== 'function') {
	      throw err
	    }
	    const opaque = opts?.opaque;
	    queueMicrotask(() => callback(err, { opaque }));
	  }
	}

	apiRequest.exports = request;
	apiRequest.exports.RequestHandler = RequestHandler;
	return apiRequest.exports;
}

var abortSignal;
var hasRequiredAbortSignal;

function requireAbortSignal () {
	if (hasRequiredAbortSignal) return abortSignal;
	hasRequiredAbortSignal = 1;
	const { addAbortListener } = requireUtil$8();
	const { RequestAbortedError } = requireErrors();

	const kListener = Symbol('kListener');
	const kSignal = Symbol('kSignal');

	function abort (self) {
	  if (self.abort) {
	    self.abort(self[kSignal]?.reason);
	  } else {
	    self.reason = self[kSignal]?.reason ?? new RequestAbortedError();
	  }
	  removeSignal(self);
	}

	function addSignal (self, signal) {
	  self.reason = null;

	  self[kSignal] = null;
	  self[kListener] = null;

	  if (!signal) {
	    return
	  }

	  if (signal.aborted) {
	    abort(self);
	    return
	  }

	  self[kSignal] = signal;
	  self[kListener] = () => {
	    abort(self);
	  };

	  addAbortListener(self[kSignal], self[kListener]);
	}

	function removeSignal (self) {
	  if (!self[kSignal]) {
	    return
	  }

	  if ('removeEventListener' in self[kSignal]) {
	    self[kSignal].removeEventListener('abort', self[kListener]);
	  } else {
	    self[kSignal].removeListener('abort', self[kListener]);
	  }

	  self[kSignal] = null;
	  self[kListener] = null;
	}

	abortSignal = {
	  addSignal,
	  removeSignal
	};
	return abortSignal;
}

var apiStream;
var hasRequiredApiStream;

function requireApiStream () {
	if (hasRequiredApiStream) return apiStream;
	hasRequiredApiStream = 1;

	const assert = require$$0$7;
	const { finished, PassThrough } = require$$0$8;
	const { InvalidArgumentError, InvalidReturnValueError } = requireErrors();
	const util = requireUtil$8();
	const { getResolveErrorBodyCallback } = requireUtil$6();
	const { AsyncResource } = require$$5$5;
	const { addSignal, removeSignal } = requireAbortSignal();

	class StreamHandler extends AsyncResource {
	  constructor (opts, factory, callback) {
	    if (!opts || typeof opts !== 'object') {
	      throw new InvalidArgumentError('invalid opts')
	    }

	    const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError } = opts;

	    try {
	      if (typeof callback !== 'function') {
	        throw new InvalidArgumentError('invalid callback')
	      }

	      if (typeof factory !== 'function') {
	        throw new InvalidArgumentError('invalid factory')
	      }

	      if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {
	        throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')
	      }

	      if (method === 'CONNECT') {
	        throw new InvalidArgumentError('invalid method')
	      }

	      if (onInfo && typeof onInfo !== 'function') {
	        throw new InvalidArgumentError('invalid onInfo callback')
	      }

	      super('UNDICI_STREAM');
	    } catch (err) {
	      if (util.isStream(body)) {
	        util.destroy(body.on('error', util.nop), err);
	      }
	      throw err
	    }

	    this.responseHeaders = responseHeaders || null;
	    this.opaque = opaque || null;
	    this.factory = factory;
	    this.callback = callback;
	    this.res = null;
	    this.abort = null;
	    this.context = null;
	    this.trailers = null;
	    this.body = body;
	    this.onInfo = onInfo || null;
	    this.throwOnError = throwOnError || false;

	    if (util.isStream(body)) {
	      body.on('error', (err) => {
	        this.onError(err);
	      });
	    }

	    addSignal(this, signal);
	  }

	  onConnect (abort, context) {
	    if (this.reason) {
	      abort(this.reason);
	      return
	    }

	    assert(this.callback);

	    this.abort = abort;
	    this.context = context;
	  }

	  onHeaders (statusCode, rawHeaders, resume, statusMessage) {
	    const { factory, opaque, context, callback, responseHeaders } = this;

	    const headers = responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);

	    if (statusCode < 200) {
	      if (this.onInfo) {
	        this.onInfo({ statusCode, headers });
	      }
	      return
	    }

	    this.factory = null;

	    let res;

	    if (this.throwOnError && statusCode >= 400) {
	      const parsedHeaders = responseHeaders === 'raw' ? util.parseHeaders(rawHeaders) : headers;
	      const contentType = parsedHeaders['content-type'];
	      res = new PassThrough();

	      this.callback = null;
	      this.runInAsyncScope(getResolveErrorBodyCallback, null,
	        { callback, body: res, contentType, statusCode, statusMessage, headers }
	      );
	    } else {
	      if (factory === null) {
	        return
	      }

	      res = this.runInAsyncScope(factory, null, {
	        statusCode,
	        headers,
	        opaque,
	        context
	      });

	      if (
	        !res ||
	        typeof res.write !== 'function' ||
	        typeof res.end !== 'function' ||
	        typeof res.on !== 'function'
	      ) {
	        throw new InvalidReturnValueError('expected Writable')
	      }

	      // TODO: Avoid finished. It registers an unnecessary amount of listeners.
	      finished(res, { readable: false }, (err) => {
	        const { callback, res, opaque, trailers, abort } = this;

	        this.res = null;
	        if (err || !res.readable) {
	          util.destroy(res, err);
	        }

	        this.callback = null;
	        this.runInAsyncScope(callback, null, err || null, { opaque, trailers });

	        if (err) {
	          abort();
	        }
	      });
	    }

	    res.on('drain', resume);

	    this.res = res;

	    const needDrain = res.writableNeedDrain !== undefined
	      ? res.writableNeedDrain
	      : res._writableState?.needDrain;

	    return needDrain !== true
	  }

	  onData (chunk) {
	    const { res } = this;

	    return res ? res.write(chunk) : true
	  }

	  onComplete (trailers) {
	    const { res } = this;

	    removeSignal(this);

	    if (!res) {
	      return
	    }

	    this.trailers = util.parseHeaders(trailers);

	    res.end();
	  }

	  onError (err) {
	    const { res, callback, opaque, body } = this;

	    removeSignal(this);

	    this.factory = null;

	    if (res) {
	      this.res = null;
	      util.destroy(res, err);
	    } else if (callback) {
	      this.callback = null;
	      queueMicrotask(() => {
	        this.runInAsyncScope(callback, null, err, { opaque });
	      });
	    }

	    if (body) {
	      this.body = null;
	      util.destroy(body, err);
	    }
	  }
	}

	function stream (opts, factory, callback) {
	  if (callback === undefined) {
	    return new Promise((resolve, reject) => {
	      stream.call(this, opts, factory, (err, data) => {
	        return err ? reject(err) : resolve(data)
	      });
	    })
	  }

	  try {
	    this.dispatch(opts, new StreamHandler(opts, factory, callback));
	  } catch (err) {
	    if (typeof callback !== 'function') {
	      throw err
	    }
	    const opaque = opts?.opaque;
	    queueMicrotask(() => callback(err, { opaque }));
	  }
	}

	apiStream = stream;
	return apiStream;
}

var apiPipeline;
var hasRequiredApiPipeline;

function requireApiPipeline () {
	if (hasRequiredApiPipeline) return apiPipeline;
	hasRequiredApiPipeline = 1;

	const {
	  Readable,
	  Duplex,
	  PassThrough
	} = require$$0$8;
	const {
	  InvalidArgumentError,
	  InvalidReturnValueError,
	  RequestAbortedError
	} = requireErrors();
	const util = requireUtil$8();
	const { AsyncResource } = require$$5$5;
	const { addSignal, removeSignal } = requireAbortSignal();
	const assert = require$$0$7;

	const kResume = Symbol('resume');

	class PipelineRequest extends Readable {
	  constructor () {
	    super({ autoDestroy: true });

	    this[kResume] = null;
	  }

	  _read () {
	    const { [kResume]: resume } = this;

	    if (resume) {
	      this[kResume] = null;
	      resume();
	    }
	  }

	  _destroy (err, callback) {
	    this._read();

	    callback(err);
	  }
	}

	class PipelineResponse extends Readable {
	  constructor (resume) {
	    super({ autoDestroy: true });
	    this[kResume] = resume;
	  }

	  _read () {
	    this[kResume]();
	  }

	  _destroy (err, callback) {
	    if (!err && !this._readableState.endEmitted) {
	      err = new RequestAbortedError();
	    }

	    callback(err);
	  }
	}

	class PipelineHandler extends AsyncResource {
	  constructor (opts, handler) {
	    if (!opts || typeof opts !== 'object') {
	      throw new InvalidArgumentError('invalid opts')
	    }

	    if (typeof handler !== 'function') {
	      throw new InvalidArgumentError('invalid handler')
	    }

	    const { signal, method, opaque, onInfo, responseHeaders } = opts;

	    if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {
	      throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')
	    }

	    if (method === 'CONNECT') {
	      throw new InvalidArgumentError('invalid method')
	    }

	    if (onInfo && typeof onInfo !== 'function') {
	      throw new InvalidArgumentError('invalid onInfo callback')
	    }

	    super('UNDICI_PIPELINE');

	    this.opaque = opaque || null;
	    this.responseHeaders = responseHeaders || null;
	    this.handler = handler;
	    this.abort = null;
	    this.context = null;
	    this.onInfo = onInfo || null;

	    this.req = new PipelineRequest().on('error', util.nop);

	    this.ret = new Duplex({
	      readableObjectMode: opts.objectMode,
	      autoDestroy: true,
	      read: () => {
	        const { body } = this;

	        if (body?.resume) {
	          body.resume();
	        }
	      },
	      write: (chunk, encoding, callback) => {
	        const { req } = this;

	        if (req.push(chunk, encoding) || req._readableState.destroyed) {
	          callback();
	        } else {
	          req[kResume] = callback;
	        }
	      },
	      destroy: (err, callback) => {
	        const { body, req, res, ret, abort } = this;

	        if (!err && !ret._readableState.endEmitted) {
	          err = new RequestAbortedError();
	        }

	        if (abort && err) {
	          abort();
	        }

	        util.destroy(body, err);
	        util.destroy(req, err);
	        util.destroy(res, err);

	        removeSignal(this);

	        callback(err);
	      }
	    }).on('prefinish', () => {
	      const { req } = this;

	      // Node < 15 does not call _final in same tick.
	      req.push(null);
	    });

	    this.res = null;

	    addSignal(this, signal);
	  }

	  onConnect (abort, context) {
	    const { ret, res } = this;

	    if (this.reason) {
	      abort(this.reason);
	      return
	    }

	    assert(!res, 'pipeline cannot be retried');
	    assert(!ret.destroyed);

	    this.abort = abort;
	    this.context = context;
	  }

	  onHeaders (statusCode, rawHeaders, resume) {
	    const { opaque, handler, context } = this;

	    if (statusCode < 200) {
	      if (this.onInfo) {
	        const headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
	        this.onInfo({ statusCode, headers });
	      }
	      return
	    }

	    this.res = new PipelineResponse(resume);

	    let body;
	    try {
	      this.handler = null;
	      const headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
	      body = this.runInAsyncScope(handler, null, {
	        statusCode,
	        headers,
	        opaque,
	        body: this.res,
	        context
	      });
	    } catch (err) {
	      this.res.on('error', util.nop);
	      throw err
	    }

	    if (!body || typeof body.on !== 'function') {
	      throw new InvalidReturnValueError('expected Readable')
	    }

	    body
	      .on('data', (chunk) => {
	        const { ret, body } = this;

	        if (!ret.push(chunk) && body.pause) {
	          body.pause();
	        }
	      })
	      .on('error', (err) => {
	        const { ret } = this;

	        util.destroy(ret, err);
	      })
	      .on('end', () => {
	        const { ret } = this;

	        ret.push(null);
	      })
	      .on('close', () => {
	        const { ret } = this;

	        if (!ret._readableState.ended) {
	          util.destroy(ret, new RequestAbortedError());
	        }
	      });

	    this.body = body;
	  }

	  onData (chunk) {
	    const { res } = this;
	    return res.push(chunk)
	  }

	  onComplete (trailers) {
	    const { res } = this;
	    res.push(null);
	  }

	  onError (err) {
	    const { ret } = this;
	    this.handler = null;
	    util.destroy(ret, err);
	  }
	}

	function pipeline (opts, handler) {
	  try {
	    const pipelineHandler = new PipelineHandler(opts, handler);
	    this.dispatch({ ...opts, body: pipelineHandler.req }, pipelineHandler);
	    return pipelineHandler.ret
	  } catch (err) {
	    return new PassThrough().destroy(err)
	  }
	}

	apiPipeline = pipeline;
	return apiPipeline;
}

var apiUpgrade;
var hasRequiredApiUpgrade;

function requireApiUpgrade () {
	if (hasRequiredApiUpgrade) return apiUpgrade;
	hasRequiredApiUpgrade = 1;

	const { InvalidArgumentError, SocketError } = requireErrors();
	const { AsyncResource } = require$$5$5;
	const util = requireUtil$8();
	const { addSignal, removeSignal } = requireAbortSignal();
	const assert = require$$0$7;

	class UpgradeHandler extends AsyncResource {
	  constructor (opts, callback) {
	    if (!opts || typeof opts !== 'object') {
	      throw new InvalidArgumentError('invalid opts')
	    }

	    if (typeof callback !== 'function') {
	      throw new InvalidArgumentError('invalid callback')
	    }

	    const { signal, opaque, responseHeaders } = opts;

	    if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {
	      throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')
	    }

	    super('UNDICI_UPGRADE');

	    this.responseHeaders = responseHeaders || null;
	    this.opaque = opaque || null;
	    this.callback = callback;
	    this.abort = null;
	    this.context = null;

	    addSignal(this, signal);
	  }

	  onConnect (abort, context) {
	    if (this.reason) {
	      abort(this.reason);
	      return
	    }

	    assert(this.callback);

	    this.abort = abort;
	    this.context = null;
	  }

	  onHeaders () {
	    throw new SocketError('bad upgrade', null)
	  }

	  onUpgrade (statusCode, rawHeaders, socket) {
	    const { callback, opaque, context } = this;

	    assert.strictEqual(statusCode, 101);

	    removeSignal(this);

	    this.callback = null;
	    const headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
	    this.runInAsyncScope(callback, null, null, {
	      headers,
	      socket,
	      opaque,
	      context
	    });
	  }

	  onError (err) {
	    const { callback, opaque } = this;

	    removeSignal(this);

	    if (callback) {
	      this.callback = null;
	      queueMicrotask(() => {
	        this.runInAsyncScope(callback, null, err, { opaque });
	      });
	    }
	  }
	}

	function upgrade (opts, callback) {
	  if (callback === undefined) {
	    return new Promise((resolve, reject) => {
	      upgrade.call(this, opts, (err, data) => {
	        return err ? reject(err) : resolve(data)
	      });
	    })
	  }

	  try {
	    const upgradeHandler = new UpgradeHandler(opts, callback);
	    this.dispatch({
	      ...opts,
	      method: opts.method || 'GET',
	      upgrade: opts.protocol || 'Websocket'
	    }, upgradeHandler);
	  } catch (err) {
	    if (typeof callback !== 'function') {
	      throw err
	    }
	    const opaque = opts?.opaque;
	    queueMicrotask(() => callback(err, { opaque }));
	  }
	}

	apiUpgrade = upgrade;
	return apiUpgrade;
}

var apiConnect;
var hasRequiredApiConnect;

function requireApiConnect () {
	if (hasRequiredApiConnect) return apiConnect;
	hasRequiredApiConnect = 1;

	const assert = require$$0$7;
	const { AsyncResource } = require$$5$5;
	const { InvalidArgumentError, SocketError } = requireErrors();
	const util = requireUtil$8();
	const { addSignal, removeSignal } = requireAbortSignal();

	class ConnectHandler extends AsyncResource {
	  constructor (opts, callback) {
	    if (!opts || typeof opts !== 'object') {
	      throw new InvalidArgumentError('invalid opts')
	    }

	    if (typeof callback !== 'function') {
	      throw new InvalidArgumentError('invalid callback')
	    }

	    const { signal, opaque, responseHeaders } = opts;

	    if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {
	      throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')
	    }

	    super('UNDICI_CONNECT');

	    this.opaque = opaque || null;
	    this.responseHeaders = responseHeaders || null;
	    this.callback = callback;
	    this.abort = null;

	    addSignal(this, signal);
	  }

	  onConnect (abort, context) {
	    if (this.reason) {
	      abort(this.reason);
	      return
	    }

	    assert(this.callback);

	    this.abort = abort;
	    this.context = context;
	  }

	  onHeaders () {
	    throw new SocketError('bad connect', null)
	  }

	  onUpgrade (statusCode, rawHeaders, socket) {
	    const { callback, opaque, context } = this;

	    removeSignal(this);

	    this.callback = null;

	    let headers = rawHeaders;
	    // Indicates is an HTTP2Session
	    if (headers != null) {
	      headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
	    }

	    this.runInAsyncScope(callback, null, null, {
	      statusCode,
	      headers,
	      socket,
	      opaque,
	      context
	    });
	  }

	  onError (err) {
	    const { callback, opaque } = this;

	    removeSignal(this);

	    if (callback) {
	      this.callback = null;
	      queueMicrotask(() => {
	        this.runInAsyncScope(callback, null, err, { opaque });
	      });
	    }
	  }
	}

	function connect (opts, callback) {
	  if (callback === undefined) {
	    return new Promise((resolve, reject) => {
	      connect.call(this, opts, (err, data) => {
	        return err ? reject(err) : resolve(data)
	      });
	    })
	  }

	  try {
	    const connectHandler = new ConnectHandler(opts, callback);
	    this.dispatch({ ...opts, method: 'CONNECT' }, connectHandler);
	  } catch (err) {
	    if (typeof callback !== 'function') {
	      throw err
	    }
	    const opaque = opts?.opaque;
	    queueMicrotask(() => callback(err, { opaque }));
	  }
	}

	apiConnect = connect;
	return apiConnect;
}

var hasRequiredApi;

function requireApi () {
	if (hasRequiredApi) return api;
	hasRequiredApi = 1;

	api.request = requireApiRequest();
	api.stream = requireApiStream();
	api.pipeline = requireApiPipeline();
	api.upgrade = requireApiUpgrade();
	api.connect = requireApiConnect();
	return api;
}

var mockErrors;
var hasRequiredMockErrors;

function requireMockErrors () {
	if (hasRequiredMockErrors) return mockErrors;
	hasRequiredMockErrors = 1;

	const { UndiciError } = requireErrors();

	class MockNotMatchedError extends UndiciError {
	  constructor (message) {
	    super(message);
	    Error.captureStackTrace(this, MockNotMatchedError);
	    this.name = 'MockNotMatchedError';
	    this.message = message || 'The request does not match any registered mock dispatches';
	    this.code = 'UND_MOCK_ERR_MOCK_NOT_MATCHED';
	  }
	}

	mockErrors = {
	  MockNotMatchedError
	};
	return mockErrors;
}

var mockSymbols;
var hasRequiredMockSymbols;

function requireMockSymbols () {
	if (hasRequiredMockSymbols) return mockSymbols;
	hasRequiredMockSymbols = 1;

	mockSymbols = {
	  kAgent: Symbol('agent'),
	  kOptions: Symbol('options'),
	  kFactory: Symbol('factory'),
	  kDispatches: Symbol('dispatches'),
	  kDispatchKey: Symbol('dispatch key'),
	  kDefaultHeaders: Symbol('default headers'),
	  kDefaultTrailers: Symbol('default trailers'),
	  kContentLength: Symbol('content length'),
	  kMockAgent: Symbol('mock agent'),
	  kMockAgentSet: Symbol('mock agent set'),
	  kMockAgentGet: Symbol('mock agent get'),
	  kMockDispatch: Symbol('mock dispatch'),
	  kClose: Symbol('close'),
	  kOriginalClose: Symbol('original agent close'),
	  kOrigin: Symbol('origin'),
	  kIsMockActive: Symbol('is mock active'),
	  kNetConnect: Symbol('net connect'),
	  kGetNetConnect: Symbol('get net connect'),
	  kConnected: Symbol('connected')
	};
	return mockSymbols;
}

var mockUtils;
var hasRequiredMockUtils;

function requireMockUtils () {
	if (hasRequiredMockUtils) return mockUtils;
	hasRequiredMockUtils = 1;

	const { MockNotMatchedError } = requireMockErrors();
	const {
	  kDispatches,
	  kMockAgent,
	  kOriginalDispatch,
	  kOrigin,
	  kGetNetConnect
	} = requireMockSymbols();
	const { buildURL } = requireUtil$8();
	const { STATUS_CODES } = require$$2$3;
	const {
	  types: {
	    isPromise
	  }
	} = require$$0$a;

	function matchValue (match, value) {
	  if (typeof match === 'string') {
	    return match === value
	  }
	  if (match instanceof RegExp) {
	    return match.test(value)
	  }
	  if (typeof match === 'function') {
	    return match(value) === true
	  }
	  return false
	}

	function lowerCaseEntries (headers) {
	  return Object.fromEntries(
	    Object.entries(headers).map(([headerName, headerValue]) => {
	      return [headerName.toLocaleLowerCase(), headerValue]
	    })
	  )
	}

	/**
	 * @param {import('../../index').Headers|string[]|Record<string, string>} headers
	 * @param {string} key
	 */
	function getHeaderByName (headers, key) {
	  if (Array.isArray(headers)) {
	    for (let i = 0; i < headers.length; i += 2) {
	      if (headers[i].toLocaleLowerCase() === key.toLocaleLowerCase()) {
	        return headers[i + 1]
	      }
	    }

	    return undefined
	  } else if (typeof headers.get === 'function') {
	    return headers.get(key)
	  } else {
	    return lowerCaseEntries(headers)[key.toLocaleLowerCase()]
	  }
	}

	/** @param {string[]} headers */
	function buildHeadersFromArray (headers) { // fetch HeadersList
	  const clone = headers.slice();
	  const entries = [];
	  for (let index = 0; index < clone.length; index += 2) {
	    entries.push([clone[index], clone[index + 1]]);
	  }
	  return Object.fromEntries(entries)
	}

	function matchHeaders (mockDispatch, headers) {
	  if (typeof mockDispatch.headers === 'function') {
	    if (Array.isArray(headers)) { // fetch HeadersList
	      headers = buildHeadersFromArray(headers);
	    }
	    return mockDispatch.headers(headers ? lowerCaseEntries(headers) : {})
	  }
	  if (typeof mockDispatch.headers === 'undefined') {
	    return true
	  }
	  if (typeof headers !== 'object' || typeof mockDispatch.headers !== 'object') {
	    return false
	  }

	  for (const [matchHeaderName, matchHeaderValue] of Object.entries(mockDispatch.headers)) {
	    const headerValue = getHeaderByName(headers, matchHeaderName);

	    if (!matchValue(matchHeaderValue, headerValue)) {
	      return false
	    }
	  }
	  return true
	}

	function safeUrl (path) {
	  if (typeof path !== 'string') {
	    return path
	  }

	  const pathSegments = path.split('?');

	  if (pathSegments.length !== 2) {
	    return path
	  }

	  const qp = new URLSearchParams(pathSegments.pop());
	  qp.sort();
	  return [...pathSegments, qp.toString()].join('?')
	}

	function matchKey (mockDispatch, { path, method, body, headers }) {
	  const pathMatch = matchValue(mockDispatch.path, path);
	  const methodMatch = matchValue(mockDispatch.method, method);
	  const bodyMatch = typeof mockDispatch.body !== 'undefined' ? matchValue(mockDispatch.body, body) : true;
	  const headersMatch = matchHeaders(mockDispatch, headers);
	  return pathMatch && methodMatch && bodyMatch && headersMatch
	}

	function getResponseData (data) {
	  if (Buffer.isBuffer(data)) {
	    return data
	  } else if (typeof data === 'object') {
	    return JSON.stringify(data)
	  } else {
	    return data.toString()
	  }
	}

	function getMockDispatch (mockDispatches, key) {
	  const basePath = key.query ? buildURL(key.path, key.query) : key.path;
	  const resolvedPath = typeof basePath === 'string' ? safeUrl(basePath) : basePath;

	  // Match path
	  let matchedMockDispatches = mockDispatches.filter(({ consumed }) => !consumed).filter(({ path }) => matchValue(safeUrl(path), resolvedPath));
	  if (matchedMockDispatches.length === 0) {
	    throw new MockNotMatchedError(`Mock dispatch not matched for path '${resolvedPath}'`)
	  }

	  // Match method
	  matchedMockDispatches = matchedMockDispatches.filter(({ method }) => matchValue(method, key.method));
	  if (matchedMockDispatches.length === 0) {
	    throw new MockNotMatchedError(`Mock dispatch not matched for method '${key.method}' on path '${resolvedPath}'`)
	  }

	  // Match body
	  matchedMockDispatches = matchedMockDispatches.filter(({ body }) => typeof body !== 'undefined' ? matchValue(body, key.body) : true);
	  if (matchedMockDispatches.length === 0) {
	    throw new MockNotMatchedError(`Mock dispatch not matched for body '${key.body}' on path '${resolvedPath}'`)
	  }

	  // Match headers
	  matchedMockDispatches = matchedMockDispatches.filter((mockDispatch) => matchHeaders(mockDispatch, key.headers));
	  if (matchedMockDispatches.length === 0) {
	    const headers = typeof key.headers === 'object' ? JSON.stringify(key.headers) : key.headers;
	    throw new MockNotMatchedError(`Mock dispatch not matched for headers '${headers}' on path '${resolvedPath}'`)
	  }

	  return matchedMockDispatches[0]
	}

	function addMockDispatch (mockDispatches, key, data) {
	  const baseData = { timesInvoked: 0, times: 1, persist: false, consumed: false };
	  const replyData = typeof data === 'function' ? { callback: data } : { ...data };
	  const newMockDispatch = { ...baseData, ...key, pending: true, data: { error: null, ...replyData } };
	  mockDispatches.push(newMockDispatch);
	  return newMockDispatch
	}

	function deleteMockDispatch (mockDispatches, key) {
	  const index = mockDispatches.findIndex(dispatch => {
	    if (!dispatch.consumed) {
	      return false
	    }
	    return matchKey(dispatch, key)
	  });
	  if (index !== -1) {
	    mockDispatches.splice(index, 1);
	  }
	}

	function buildKey (opts) {
	  const { path, method, body, headers, query } = opts;
	  return {
	    path,
	    method,
	    body,
	    headers,
	    query
	  }
	}

	function generateKeyValues (data) {
	  const keys = Object.keys(data);
	  const result = [];
	  for (let i = 0; i < keys.length; ++i) {
	    const key = keys[i];
	    const value = data[key];
	    const name = Buffer.from(`${key}`);
	    if (Array.isArray(value)) {
	      for (let j = 0; j < value.length; ++j) {
	        result.push(name, Buffer.from(`${value[j]}`));
	      }
	    } else {
	      result.push(name, Buffer.from(`${value}`));
	    }
	  }
	  return result
	}

	/**
	 * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
	 * @param {number} statusCode
	 */
	function getStatusText (statusCode) {
	  return STATUS_CODES[statusCode] || 'unknown'
	}

	async function getResponse (body) {
	  const buffers = [];
	  for await (const data of body) {
	    buffers.push(data);
	  }
	  return Buffer.concat(buffers).toString('utf8')
	}

	/**
	 * Mock dispatch function used to simulate undici dispatches
	 */
	function mockDispatch (opts, handler) {
	  // Get mock dispatch from built key
	  const key = buildKey(opts);
	  const mockDispatch = getMockDispatch(this[kDispatches], key);

	  mockDispatch.timesInvoked++;

	  // Here's where we resolve a callback if a callback is present for the dispatch data.
	  if (mockDispatch.data.callback) {
	    mockDispatch.data = { ...mockDispatch.data, ...mockDispatch.data.callback(opts) };
	  }

	  // Parse mockDispatch data
	  const { data: { statusCode, data, headers, trailers, error }, delay, persist } = mockDispatch;
	  const { timesInvoked, times } = mockDispatch;

	  // If it's used up and not persistent, mark as consumed
	  mockDispatch.consumed = !persist && timesInvoked >= times;
	  mockDispatch.pending = timesInvoked < times;

	  // If specified, trigger dispatch error
	  if (error !== null) {
	    deleteMockDispatch(this[kDispatches], key);
	    handler.onError(error);
	    return true
	  }

	  // Handle the request with a delay if necessary
	  if (typeof delay === 'number' && delay > 0) {
	    setTimeout(() => {
	      handleReply(this[kDispatches]);
	    }, delay);
	  } else {
	    handleReply(this[kDispatches]);
	  }

	  function handleReply (mockDispatches, _data = data) {
	    // fetch's HeadersList is a 1D string array
	    const optsHeaders = Array.isArray(opts.headers)
	      ? buildHeadersFromArray(opts.headers)
	      : opts.headers;
	    const body = typeof _data === 'function'
	      ? _data({ ...opts, headers: optsHeaders })
	      : _data;

	    // util.types.isPromise is likely needed for jest.
	    if (isPromise(body)) {
	      // If handleReply is asynchronous, throwing an error
	      // in the callback will reject the promise, rather than
	      // synchronously throw the error, which breaks some tests.
	      // Rather, we wait for the callback to resolve if it is a
	      // promise, and then re-run handleReply with the new body.
	      body.then((newData) => handleReply(mockDispatches, newData));
	      return
	    }

	    const responseData = getResponseData(body);
	    const responseHeaders = generateKeyValues(headers);
	    const responseTrailers = generateKeyValues(trailers);

	    handler.onConnect?.(err => handler.onError(err), null);
	    handler.onHeaders?.(statusCode, responseHeaders, resume, getStatusText(statusCode));
	    handler.onData?.(Buffer.from(responseData));
	    handler.onComplete?.(responseTrailers);
	    deleteMockDispatch(mockDispatches, key);
	  }

	  function resume () {}

	  return true
	}

	function buildMockDispatch () {
	  const agent = this[kMockAgent];
	  const origin = this[kOrigin];
	  const originalDispatch = this[kOriginalDispatch];

	  return function dispatch (opts, handler) {
	    if (agent.isMockActive) {
	      try {
	        mockDispatch.call(this, opts, handler);
	      } catch (error) {
	        if (error instanceof MockNotMatchedError) {
	          const netConnect = agent[kGetNetConnect]();
	          if (netConnect === false) {
	            throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect disabled)`)
	          }
	          if (checkNetConnect(netConnect, origin)) {
	            originalDispatch.call(this, opts, handler);
	          } else {
	            throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect is not enabled for this origin)`)
	          }
	        } else {
	          throw error
	        }
	      }
	    } else {
	      originalDispatch.call(this, opts, handler);
	    }
	  }
	}

	function checkNetConnect (netConnect, origin) {
	  const url = new URL(origin);
	  if (netConnect === true) {
	    return true
	  } else if (Array.isArray(netConnect) && netConnect.some((matcher) => matchValue(matcher, url.host))) {
	    return true
	  }
	  return false
	}

	function buildMockOptions (opts) {
	  if (opts) {
	    const { agent, ...mockOptions } = opts;
	    return mockOptions
	  }
	}

	mockUtils = {
	  getResponseData,
	  getMockDispatch,
	  addMockDispatch,
	  deleteMockDispatch,
	  buildKey,
	  generateKeyValues,
	  matchValue,
	  getResponse,
	  getStatusText,
	  mockDispatch,
	  buildMockDispatch,
	  checkNetConnect,
	  buildMockOptions,
	  getHeaderByName,
	  buildHeadersFromArray
	};
	return mockUtils;
}

var mockInterceptor = {};

var hasRequiredMockInterceptor;

function requireMockInterceptor () {
	if (hasRequiredMockInterceptor) return mockInterceptor;
	hasRequiredMockInterceptor = 1;

	const { getResponseData, buildKey, addMockDispatch } = requireMockUtils();
	const {
	  kDispatches,
	  kDispatchKey,
	  kDefaultHeaders,
	  kDefaultTrailers,
	  kContentLength,
	  kMockDispatch
	} = requireMockSymbols();
	const { InvalidArgumentError } = requireErrors();
	const { buildURL } = requireUtil$8();

	/**
	 * Defines the scope API for an interceptor reply
	 */
	class MockScope {
	  constructor (mockDispatch) {
	    this[kMockDispatch] = mockDispatch;
	  }

	  /**
	   * Delay a reply by a set amount in ms.
	   */
	  delay (waitInMs) {
	    if (typeof waitInMs !== 'number' || !Number.isInteger(waitInMs) || waitInMs <= 0) {
	      throw new InvalidArgumentError('waitInMs must be a valid integer > 0')
	    }

	    this[kMockDispatch].delay = waitInMs;
	    return this
	  }

	  /**
	   * For a defined reply, never mark as consumed.
	   */
	  persist () {
	    this[kMockDispatch].persist = true;
	    return this
	  }

	  /**
	   * Allow one to define a reply for a set amount of matching requests.
	   */
	  times (repeatTimes) {
	    if (typeof repeatTimes !== 'number' || !Number.isInteger(repeatTimes) || repeatTimes <= 0) {
	      throw new InvalidArgumentError('repeatTimes must be a valid integer > 0')
	    }

	    this[kMockDispatch].times = repeatTimes;
	    return this
	  }
	}

	/**
	 * Defines an interceptor for a Mock
	 */
	class MockInterceptor {
	  constructor (opts, mockDispatches) {
	    if (typeof opts !== 'object') {
	      throw new InvalidArgumentError('opts must be an object')
	    }
	    if (typeof opts.path === 'undefined') {
	      throw new InvalidArgumentError('opts.path must be defined')
	    }
	    if (typeof opts.method === 'undefined') {
	      opts.method = 'GET';
	    }
	    // See https://github.com/nodejs/undici/issues/1245
	    // As per RFC 3986, clients are not supposed to send URI
	    // fragments to servers when they retrieve a document,
	    if (typeof opts.path === 'string') {
	      if (opts.query) {
	        opts.path = buildURL(opts.path, opts.query);
	      } else {
	        // Matches https://github.com/nodejs/undici/blob/main/lib/web/fetch/index.js#L1811
	        const parsedURL = new URL(opts.path, 'data://');
	        opts.path = parsedURL.pathname + parsedURL.search;
	      }
	    }
	    if (typeof opts.method === 'string') {
	      opts.method = opts.method.toUpperCase();
	    }

	    this[kDispatchKey] = buildKey(opts);
	    this[kDispatches] = mockDispatches;
	    this[kDefaultHeaders] = {};
	    this[kDefaultTrailers] = {};
	    this[kContentLength] = false;
	  }

	  createMockScopeDispatchData ({ statusCode, data, responseOptions }) {
	    const responseData = getResponseData(data);
	    const contentLength = this[kContentLength] ? { 'content-length': responseData.length } : {};
	    const headers = { ...this[kDefaultHeaders], ...contentLength, ...responseOptions.headers };
	    const trailers = { ...this[kDefaultTrailers], ...responseOptions.trailers };

	    return { statusCode, data, headers, trailers }
	  }

	  validateReplyParameters (replyParameters) {
	    if (typeof replyParameters.statusCode === 'undefined') {
	      throw new InvalidArgumentError('statusCode must be defined')
	    }
	    if (typeof replyParameters.responseOptions !== 'object' || replyParameters.responseOptions === null) {
	      throw new InvalidArgumentError('responseOptions must be an object')
	    }
	  }

	  /**
	   * Mock an undici request with a defined reply.
	   */
	  reply (replyOptionsCallbackOrStatusCode) {
	    // Values of reply aren't available right now as they
	    // can only be available when the reply callback is invoked.
	    if (typeof replyOptionsCallbackOrStatusCode === 'function') {
	      // We'll first wrap the provided callback in another function,
	      // this function will properly resolve the data from the callback
	      // when invoked.
	      const wrappedDefaultsCallback = (opts) => {
	        // Our reply options callback contains the parameter for statusCode, data and options.
	        const resolvedData = replyOptionsCallbackOrStatusCode(opts);

	        // Check if it is in the right format
	        if (typeof resolvedData !== 'object' || resolvedData === null) {
	          throw new InvalidArgumentError('reply options callback must return an object')
	        }

	        const replyParameters = { data: '', responseOptions: {}, ...resolvedData };
	        this.validateReplyParameters(replyParameters);
	        // Since the values can be obtained immediately we return them
	        // from this higher order function that will be resolved later.
	        return {
	          ...this.createMockScopeDispatchData(replyParameters)
	        }
	      };

	      // Add usual dispatch data, but this time set the data parameter to function that will eventually provide data.
	      const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], wrappedDefaultsCallback);
	      return new MockScope(newMockDispatch)
	    }

	    // We can have either one or three parameters, if we get here,
	    // we should have 1-3 parameters. So we spread the arguments of
	    // this function to obtain the parameters, since replyData will always
	    // just be the statusCode.
	    const replyParameters = {
	      statusCode: replyOptionsCallbackOrStatusCode,
	      data: arguments[1] === undefined ? '' : arguments[1],
	      responseOptions: arguments[2] === undefined ? {} : arguments[2]
	    };
	    this.validateReplyParameters(replyParameters);

	    // Send in-already provided data like usual
	    const dispatchData = this.createMockScopeDispatchData(replyParameters);
	    const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], dispatchData);
	    return new MockScope(newMockDispatch)
	  }

	  /**
	   * Mock an undici request with a defined error.
	   */
	  replyWithError (error) {
	    if (typeof error === 'undefined') {
	      throw new InvalidArgumentError('error must be defined')
	    }

	    const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], { error });
	    return new MockScope(newMockDispatch)
	  }

	  /**
	   * Set default reply headers on the interceptor for subsequent replies
	   */
	  defaultReplyHeaders (headers) {
	    if (typeof headers === 'undefined') {
	      throw new InvalidArgumentError('headers must be defined')
	    }

	    this[kDefaultHeaders] = headers;
	    return this
	  }

	  /**
	   * Set default reply trailers on the interceptor for subsequent replies
	   */
	  defaultReplyTrailers (trailers) {
	    if (typeof trailers === 'undefined') {
	      throw new InvalidArgumentError('trailers must be defined')
	    }

	    this[kDefaultTrailers] = trailers;
	    return this
	  }

	  /**
	   * Set reply content length header for replies on the interceptor
	   */
	  replyContentLength () {
	    this[kContentLength] = true;
	    return this
	  }
	}

	mockInterceptor.MockInterceptor = MockInterceptor;
	mockInterceptor.MockScope = MockScope;
	return mockInterceptor;
}

var mockClient;
var hasRequiredMockClient;

function requireMockClient () {
	if (hasRequiredMockClient) return mockClient;
	hasRequiredMockClient = 1;

	const { promisify } = require$$0$a;
	const Client = requireClient$1();
	const { buildMockDispatch } = requireMockUtils();
	const {
	  kDispatches,
	  kMockAgent,
	  kClose,
	  kOriginalClose,
	  kOrigin,
	  kOriginalDispatch,
	  kConnected
	} = requireMockSymbols();
	const { MockInterceptor } = requireMockInterceptor();
	const Symbols = requireSymbols$5();
	const { InvalidArgumentError } = requireErrors();

	/**
	 * MockClient provides an API that extends the Client to influence the mockDispatches.
	 */
	class MockClient extends Client {
	  constructor (origin, opts) {
	    super(origin, opts);

	    if (!opts || !opts.agent || typeof opts.agent.dispatch !== 'function') {
	      throw new InvalidArgumentError('Argument opts.agent must implement Agent')
	    }

	    this[kMockAgent] = opts.agent;
	    this[kOrigin] = origin;
	    this[kDispatches] = [];
	    this[kConnected] = 1;
	    this[kOriginalDispatch] = this.dispatch;
	    this[kOriginalClose] = this.close.bind(this);

	    this.dispatch = buildMockDispatch.call(this);
	    this.close = this[kClose];
	  }

	  get [Symbols.kConnected] () {
	    return this[kConnected]
	  }

	  /**
	   * Sets up the base interceptor for mocking replies from undici.
	   */
	  intercept (opts) {
	    return new MockInterceptor(opts, this[kDispatches])
	  }

	  async [kClose] () {
	    await promisify(this[kOriginalClose])();
	    this[kConnected] = 0;
	    this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);
	  }
	}

	mockClient = MockClient;
	return mockClient;
}

var mockPool;
var hasRequiredMockPool;

function requireMockPool () {
	if (hasRequiredMockPool) return mockPool;
	hasRequiredMockPool = 1;

	const { promisify } = require$$0$a;
	const Pool = requirePool();
	const { buildMockDispatch } = requireMockUtils();
	const {
	  kDispatches,
	  kMockAgent,
	  kClose,
	  kOriginalClose,
	  kOrigin,
	  kOriginalDispatch,
	  kConnected
	} = requireMockSymbols();
	const { MockInterceptor } = requireMockInterceptor();
	const Symbols = requireSymbols$5();
	const { InvalidArgumentError } = requireErrors();

	/**
	 * MockPool provides an API that extends the Pool to influence the mockDispatches.
	 */
	class MockPool extends Pool {
	  constructor (origin, opts) {
	    super(origin, opts);

	    if (!opts || !opts.agent || typeof opts.agent.dispatch !== 'function') {
	      throw new InvalidArgumentError('Argument opts.agent must implement Agent')
	    }

	    this[kMockAgent] = opts.agent;
	    this[kOrigin] = origin;
	    this[kDispatches] = [];
	    this[kConnected] = 1;
	    this[kOriginalDispatch] = this.dispatch;
	    this[kOriginalClose] = this.close.bind(this);

	    this.dispatch = buildMockDispatch.call(this);
	    this.close = this[kClose];
	  }

	  get [Symbols.kConnected] () {
	    return this[kConnected]
	  }

	  /**
	   * Sets up the base interceptor for mocking replies from undici.
	   */
	  intercept (opts) {
	    return new MockInterceptor(opts, this[kDispatches])
	  }

	  async [kClose] () {
	    await promisify(this[kOriginalClose])();
	    this[kConnected] = 0;
	    this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);
	  }
	}

	mockPool = MockPool;
	return mockPool;
}

var pluralizer;
var hasRequiredPluralizer;

function requirePluralizer () {
	if (hasRequiredPluralizer) return pluralizer;
	hasRequiredPluralizer = 1;

	const singulars = {
	  pronoun: 'it',
	  is: 'is',
	  was: 'was',
	  this: 'this'
	};

	const plurals = {
	  pronoun: 'they',
	  is: 'are',
	  was: 'were',
	  this: 'these'
	};

	pluralizer = class Pluralizer {
	  constructor (singular, plural) {
	    this.singular = singular;
	    this.plural = plural;
	  }

	  pluralize (count) {
	    const one = count === 1;
	    const keys = one ? singulars : plurals;
	    const noun = one ? this.singular : this.plural;
	    return { ...keys, count, noun }
	  }
	};
	return pluralizer;
}

var pendingInterceptorsFormatter;
var hasRequiredPendingInterceptorsFormatter;

function requirePendingInterceptorsFormatter () {
	if (hasRequiredPendingInterceptorsFormatter) return pendingInterceptorsFormatter;
	hasRequiredPendingInterceptorsFormatter = 1;

	const { Transform } = require$$0$8;
	const { Console } = require$$1$a;

	const PERSISTENT = process.versions.icu ? '✅' : 'Y ';
	const NOT_PERSISTENT = process.versions.icu ? '❌' : 'N ';

	/**
	 * Gets the output of `console.table(…)` as a string.
	 */
	pendingInterceptorsFormatter = class PendingInterceptorsFormatter {
	  constructor ({ disableColors } = {}) {
	    this.transform = new Transform({
	      transform (chunk, _enc, cb) {
	        cb(null, chunk);
	      }
	    });

	    this.logger = new Console({
	      stdout: this.transform,
	      inspectOptions: {
	        colors: !disableColors && !process.env.CI
	      }
	    });
	  }

	  format (pendingInterceptors) {
	    const withPrettyHeaders = pendingInterceptors.map(
	      ({ method, path, data: { statusCode }, persist, times, timesInvoked, origin }) => ({
	        Method: method,
	        Origin: origin,
	        Path: path,
	        'Status code': statusCode,
	        Persistent: persist ? PERSISTENT : NOT_PERSISTENT,
	        Invocations: timesInvoked,
	        Remaining: persist ? Infinity : times - timesInvoked
	      }));

	    this.logger.table(withPrettyHeaders);
	    return this.transform.read().toString()
	  }
	};
	return pendingInterceptorsFormatter;
}

var mockAgent;
var hasRequiredMockAgent;

function requireMockAgent () {
	if (hasRequiredMockAgent) return mockAgent;
	hasRequiredMockAgent = 1;

	const { kClients } = requireSymbols$5();
	const Agent = requireAgent();
	const {
	  kAgent,
	  kMockAgentSet,
	  kMockAgentGet,
	  kDispatches,
	  kIsMockActive,
	  kNetConnect,
	  kGetNetConnect,
	  kOptions,
	  kFactory
	} = requireMockSymbols();
	const MockClient = requireMockClient();
	const MockPool = requireMockPool();
	const { matchValue, buildMockOptions } = requireMockUtils();
	const { InvalidArgumentError, UndiciError } = requireErrors();
	const Dispatcher = requireDispatcher();
	const Pluralizer = requirePluralizer();
	const PendingInterceptorsFormatter = requirePendingInterceptorsFormatter();

	class MockAgent extends Dispatcher {
	  constructor (opts) {
	    super(opts);

	    this[kNetConnect] = true;
	    this[kIsMockActive] = true;

	    // Instantiate Agent and encapsulate
	    if ((opts?.agent && typeof opts.agent.dispatch !== 'function')) {
	      throw new InvalidArgumentError('Argument opts.agent must implement Agent')
	    }
	    const agent = opts?.agent ? opts.agent : new Agent(opts);
	    this[kAgent] = agent;

	    this[kClients] = agent[kClients];
	    this[kOptions] = buildMockOptions(opts);
	  }

	  get (origin) {
	    let dispatcher = this[kMockAgentGet](origin);

	    if (!dispatcher) {
	      dispatcher = this[kFactory](origin);
	      this[kMockAgentSet](origin, dispatcher);
	    }
	    return dispatcher
	  }

	  dispatch (opts, handler) {
	    // Call MockAgent.get to perform additional setup before dispatching as normal
	    this.get(opts.origin);
	    return this[kAgent].dispatch(opts, handler)
	  }

	  async close () {
	    await this[kAgent].close();
	    this[kClients].clear();
	  }

	  deactivate () {
	    this[kIsMockActive] = false;
	  }

	  activate () {
	    this[kIsMockActive] = true;
	  }

	  enableNetConnect (matcher) {
	    if (typeof matcher === 'string' || typeof matcher === 'function' || matcher instanceof RegExp) {
	      if (Array.isArray(this[kNetConnect])) {
	        this[kNetConnect].push(matcher);
	      } else {
	        this[kNetConnect] = [matcher];
	      }
	    } else if (typeof matcher === 'undefined') {
	      this[kNetConnect] = true;
	    } else {
	      throw new InvalidArgumentError('Unsupported matcher. Must be one of String|Function|RegExp.')
	    }
	  }

	  disableNetConnect () {
	    this[kNetConnect] = false;
	  }

	  // This is required to bypass issues caused by using global symbols - see:
	  // https://github.com/nodejs/undici/issues/1447
	  get isMockActive () {
	    return this[kIsMockActive]
	  }

	  [kMockAgentSet] (origin, dispatcher) {
	    this[kClients].set(origin, dispatcher);
	  }

	  [kFactory] (origin) {
	    const mockOptions = Object.assign({ agent: this }, this[kOptions]);
	    return this[kOptions] && this[kOptions].connections === 1
	      ? new MockClient(origin, mockOptions)
	      : new MockPool(origin, mockOptions)
	  }

	  [kMockAgentGet] (origin) {
	    // First check if we can immediately find it
	    const client = this[kClients].get(origin);
	    if (client) {
	      return client
	    }

	    // If the origin is not a string create a dummy parent pool and return to user
	    if (typeof origin !== 'string') {
	      const dispatcher = this[kFactory]('http://localhost:9999');
	      this[kMockAgentSet](origin, dispatcher);
	      return dispatcher
	    }

	    // If we match, create a pool and assign the same dispatches
	    for (const [keyMatcher, nonExplicitDispatcher] of Array.from(this[kClients])) {
	      if (nonExplicitDispatcher && typeof keyMatcher !== 'string' && matchValue(keyMatcher, origin)) {
	        const dispatcher = this[kFactory](origin);
	        this[kMockAgentSet](origin, dispatcher);
	        dispatcher[kDispatches] = nonExplicitDispatcher[kDispatches];
	        return dispatcher
	      }
	    }
	  }

	  [kGetNetConnect] () {
	    return this[kNetConnect]
	  }

	  pendingInterceptors () {
	    const mockAgentClients = this[kClients];

	    return Array.from(mockAgentClients.entries())
	      .flatMap(([origin, scope]) => scope[kDispatches].map(dispatch => ({ ...dispatch, origin })))
	      .filter(({ pending }) => pending)
	  }

	  assertNoPendingInterceptors ({ pendingInterceptorsFormatter = new PendingInterceptorsFormatter() } = {}) {
	    const pending = this.pendingInterceptors();

	    if (pending.length === 0) {
	      return
	    }

	    const pluralizer = new Pluralizer('interceptor', 'interceptors').pluralize(pending.length);

	    throw new UndiciError(`
${pluralizer.count} ${pluralizer.noun} ${pluralizer.is} pending:

${pendingInterceptorsFormatter.format(pending)}
`.trim())
	  }
	}

	mockAgent = MockAgent;
	return mockAgent;
}

var global$1;
var hasRequiredGlobal;

function requireGlobal () {
	if (hasRequiredGlobal) return global$1;
	hasRequiredGlobal = 1;

	// We include a version number for the Dispatcher API. In case of breaking changes,
	// this version number must be increased to avoid conflicts.
	const globalDispatcher = Symbol.for('undici.globalDispatcher.1');
	const { InvalidArgumentError } = requireErrors();
	const Agent = requireAgent();

	if (getGlobalDispatcher() === undefined) {
	  setGlobalDispatcher(new Agent());
	}

	function setGlobalDispatcher (agent) {
	  if (!agent || typeof agent.dispatch !== 'function') {
	    throw new InvalidArgumentError('Argument agent must implement Agent')
	  }
	  Object.defineProperty(globalThis, globalDispatcher, {
	    value: agent,
	    writable: true,
	    enumerable: false,
	    configurable: false
	  });
	}

	function getGlobalDispatcher () {
	  return globalThis[globalDispatcher]
	}

	global$1 = {
	  setGlobalDispatcher,
	  getGlobalDispatcher
	};
	return global$1;
}

var decoratorHandler;
var hasRequiredDecoratorHandler;

function requireDecoratorHandler () {
	if (hasRequiredDecoratorHandler) return decoratorHandler;
	hasRequiredDecoratorHandler = 1;

	decoratorHandler = class DecoratorHandler {
	  #handler

	  constructor (handler) {
	    if (typeof handler !== 'object' || handler === null) {
	      throw new TypeError('handler must be an object')
	    }
	    this.#handler = handler;
	  }

	  onConnect (...args) {
	    return this.#handler.onConnect?.(...args)
	  }

	  onError (...args) {
	    return this.#handler.onError?.(...args)
	  }

	  onUpgrade (...args) {
	    return this.#handler.onUpgrade?.(...args)
	  }

	  onResponseStarted (...args) {
	    return this.#handler.onResponseStarted?.(...args)
	  }

	  onHeaders (...args) {
	    return this.#handler.onHeaders?.(...args)
	  }

	  onData (...args) {
	    return this.#handler.onData?.(...args)
	  }

	  onComplete (...args) {
	    return this.#handler.onComplete?.(...args)
	  }

	  onBodySent (...args) {
	    return this.#handler.onBodySent?.(...args)
	  }
	};
	return decoratorHandler;
}

var redirect;
var hasRequiredRedirect;

function requireRedirect () {
	if (hasRequiredRedirect) return redirect;
	hasRequiredRedirect = 1;
	const RedirectHandler = requireRedirectHandler();

	redirect = opts => {
	  const globalMaxRedirections = opts?.maxRedirections;
	  return dispatch => {
	    return function redirectInterceptor (opts, handler) {
	      const { maxRedirections = globalMaxRedirections, ...baseOpts } = opts;

	      if (!maxRedirections) {
	        return dispatch(opts, handler)
	      }

	      const redirectHandler = new RedirectHandler(
	        dispatch,
	        maxRedirections,
	        opts,
	        handler
	      );

	      return dispatch(baseOpts, redirectHandler)
	    }
	  }
	};
	return redirect;
}

var retry;
var hasRequiredRetry;

function requireRetry () {
	if (hasRequiredRetry) return retry;
	hasRequiredRetry = 1;
	const RetryHandler = requireRetryHandler();

	retry = globalOpts => {
	  return dispatch => {
	    return function retryInterceptor (opts, handler) {
	      return dispatch(
	        opts,
	        new RetryHandler(
	          { ...opts, retryOptions: { ...globalOpts, ...opts.retryOptions } },
	          {
	            handler,
	            dispatch
	          }
	        )
	      )
	    }
	  }
	};
	return retry;
}

var dump;
var hasRequiredDump;

function requireDump () {
	if (hasRequiredDump) return dump;
	hasRequiredDump = 1;

	const util = requireUtil$8();
	const { InvalidArgumentError, RequestAbortedError } = requireErrors();
	const DecoratorHandler = requireDecoratorHandler();

	class DumpHandler extends DecoratorHandler {
	  #maxSize = 1024 * 1024
	  #abort = null
	  #dumped = false
	  #aborted = false
	  #size = 0
	  #reason = null
	  #handler = null

	  constructor ({ maxSize }, handler) {
	    super(handler);

	    if (maxSize != null && (!Number.isFinite(maxSize) || maxSize < 1)) {
	      throw new InvalidArgumentError('maxSize must be a number greater than 0')
	    }

	    this.#maxSize = maxSize ?? this.#maxSize;
	    this.#handler = handler;
	  }

	  onConnect (abort) {
	    this.#abort = abort;

	    this.#handler.onConnect(this.#customAbort.bind(this));
	  }

	  #customAbort (reason) {
	    this.#aborted = true;
	    this.#reason = reason;
	  }

	  // TODO: will require adjustment after new hooks are out
	  onHeaders (statusCode, rawHeaders, resume, statusMessage) {
	    const headers = util.parseHeaders(rawHeaders);
	    const contentLength = headers['content-length'];

	    if (contentLength != null && contentLength > this.#maxSize) {
	      throw new RequestAbortedError(
	        `Response size (${contentLength}) larger than maxSize (${
	          this.#maxSize
	        })`
	      )
	    }

	    if (this.#aborted) {
	      return true
	    }

	    return this.#handler.onHeaders(
	      statusCode,
	      rawHeaders,
	      resume,
	      statusMessage
	    )
	  }

	  onError (err) {
	    if (this.#dumped) {
	      return
	    }

	    err = this.#reason ?? err;

	    this.#handler.onError(err);
	  }

	  onData (chunk) {
	    this.#size = this.#size + chunk.length;

	    if (this.#size >= this.#maxSize) {
	      this.#dumped = true;

	      if (this.#aborted) {
	        this.#handler.onError(this.#reason);
	      } else {
	        this.#handler.onComplete([]);
	      }
	    }

	    return true
	  }

	  onComplete (trailers) {
	    if (this.#dumped) {
	      return
	    }

	    if (this.#aborted) {
	      this.#handler.onError(this.reason);
	      return
	    }

	    this.#handler.onComplete(trailers);
	  }
	}

	function createDumpInterceptor (
	  { maxSize: defaultMaxSize } = {
	    maxSize: 1024 * 1024
	  }
	) {
	  return dispatch => {
	    return function Intercept (opts, handler) {
	      const { dumpMaxSize = defaultMaxSize } =
	        opts;

	      const dumpHandler = new DumpHandler(
	        { maxSize: dumpMaxSize },
	        handler
	      );

	      return dispatch(opts, dumpHandler)
	    }
	  }
	}

	dump = createDumpInterceptor;
	return dump;
}

var headers;
var hasRequiredHeaders;

function requireHeaders () {
	if (hasRequiredHeaders) return headers;
	hasRequiredHeaders = 1;

	const { kConstruct } = requireSymbols$5();
	const { kEnumerableProperty } = requireUtil$8();
	const {
	  iteratorMixin,
	  isValidHeaderName,
	  isValidHeaderValue
	} = requireUtil$7();
	const { webidl } = requireWebidl();
	const assert = require$$0$7;
	const util = require$$0$a;

	const kHeadersMap = Symbol('headers map');
	const kHeadersSortedMap = Symbol('headers map sorted');

	/**
	 * @param {number} code
	 */
	function isHTTPWhiteSpaceCharCode (code) {
	  return code === 0x00a || code === 0x00d || code === 0x009 || code === 0x020
	}

	/**
	 * @see https://fetch.spec.whatwg.org/#concept-header-value-normalize
	 * @param {string} potentialValue
	 */
	function headerValueNormalize (potentialValue) {
	  //  To normalize a byte sequence potentialValue, remove
	  //  any leading and trailing HTTP whitespace bytes from
	  //  potentialValue.
	  let i = 0; let j = potentialValue.length;

	  while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(j - 1))) --j;
	  while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(i))) ++i;

	  return i === 0 && j === potentialValue.length ? potentialValue : potentialValue.substring(i, j)
	}

	function fill (headers, object) {
	  // To fill a Headers object headers with a given object object, run these steps:

	  // 1. If object is a sequence, then for each header in object:
	  // Note: webidl conversion to array has already been done.
	  if (Array.isArray(object)) {
	    for (let i = 0; i < object.length; ++i) {
	      const header = object[i];
	      // 1. If header does not contain exactly two items, then throw a TypeError.
	      if (header.length !== 2) {
	        throw webidl.errors.exception({
	          header: 'Headers constructor',
	          message: `expected name/value pair to be length 2, found ${header.length}.`
	        })
	      }

	      // 2. Append (header’s first item, header’s second item) to headers.
	      appendHeader(headers, header[0], header[1]);
	    }
	  } else if (typeof object === 'object' && object !== null) {
	    // Note: null should throw

	    // 2. Otherwise, object is a record, then for each key → value in object,
	    //    append (key, value) to headers
	    const keys = Object.keys(object);
	    for (let i = 0; i < keys.length; ++i) {
	      appendHeader(headers, keys[i], object[keys[i]]);
	    }
	  } else {
	    throw webidl.errors.conversionFailed({
	      prefix: 'Headers constructor',
	      argument: 'Argument 1',
	      types: ['sequence<sequence<ByteString>>', 'record<ByteString, ByteString>']
	    })
	  }
	}

	/**
	 * @see https://fetch.spec.whatwg.org/#concept-headers-append
	 */
	function appendHeader (headers, name, value) {
	  // 1. Normalize value.
	  value = headerValueNormalize(value);

	  // 2. If name is not a header name or value is not a
	  //    header value, then throw a TypeError.
	  if (!isValidHeaderName(name)) {
	    throw webidl.errors.invalidArgument({
	      prefix: 'Headers.append',
	      value: name,
	      type: 'header name'
	    })
	  } else if (!isValidHeaderValue(value)) {
	    throw webidl.errors.invalidArgument({
	      prefix: 'Headers.append',
	      value,
	      type: 'header value'
	    })
	  }

	  // 3. If headers’s guard is "immutable", then throw a TypeError.
	  // 4. Otherwise, if headers’s guard is "request" and name is a
	  //    forbidden header name, return.
	  // 5. Otherwise, if headers’s guard is "request-no-cors":
	  //    TODO
	  // Note: undici does not implement forbidden header names
	  if (getHeadersGuard(headers) === 'immutable') {
	    throw new TypeError('immutable')
	  }

	  // 6. Otherwise, if headers’s guard is "response" and name is a
	  //    forbidden response-header name, return.

	  // 7. Append (name, value) to headers’s header list.
	  return getHeadersList(headers).append(name, value, false)

	  // 8. If headers’s guard is "request-no-cors", then remove
	  //    privileged no-CORS request headers from headers
	}

	function compareHeaderName (a, b) {
	  return a[0] < b[0] ? -1 : 1
	}

	class HeadersList {
	  /** @type {[string, string][]|null} */
	  cookies = null

	  constructor (init) {
	    if (init instanceof HeadersList) {
	      this[kHeadersMap] = new Map(init[kHeadersMap]);
	      this[kHeadersSortedMap] = init[kHeadersSortedMap];
	      this.cookies = init.cookies === null ? null : [...init.cookies];
	    } else {
	      this[kHeadersMap] = new Map(init);
	      this[kHeadersSortedMap] = null;
	    }
	  }

	  /**
	   * @see https://fetch.spec.whatwg.org/#header-list-contains
	   * @param {string} name
	   * @param {boolean} isLowerCase
	   */
	  contains (name, isLowerCase) {
	    // A header list list contains a header name name if list
	    // contains a header whose name is a byte-case-insensitive
	    // match for name.

	    return this[kHeadersMap].has(isLowerCase ? name : name.toLowerCase())
	  }

	  clear () {
	    this[kHeadersMap].clear();
	    this[kHeadersSortedMap] = null;
	    this.cookies = null;
	  }

	  /**
	   * @see https://fetch.spec.whatwg.org/#concept-header-list-append
	   * @param {string} name
	   * @param {string} value
	   * @param {boolean} isLowerCase
	   */
	  append (name, value, isLowerCase) {
	    this[kHeadersSortedMap] = null;

	    // 1. If list contains name, then set name to the first such
	    //    header’s name.
	    const lowercaseName = isLowerCase ? name : name.toLowerCase();
	    const exists = this[kHeadersMap].get(lowercaseName);

	    // 2. Append (name, value) to list.
	    if (exists) {
	      const delimiter = lowercaseName === 'cookie' ? '; ' : ', ';
	      this[kHeadersMap].set(lowercaseName, {
	        name: exists.name,
	        value: `${exists.value}${delimiter}${value}`
	      });
	    } else {
	      this[kHeadersMap].set(lowercaseName, { name, value });
	    }

	    if (lowercaseName === 'set-cookie') {
	      (this.cookies ??= []).push(value);
	    }
	  }

	  /**
	   * @see https://fetch.spec.whatwg.org/#concept-header-list-set
	   * @param {string} name
	   * @param {string} value
	   * @param {boolean} isLowerCase
	   */
	  set (name, value, isLowerCase) {
	    this[kHeadersSortedMap] = null;
	    const lowercaseName = isLowerCase ? name : name.toLowerCase();

	    if (lowercaseName === 'set-cookie') {
	      this.cookies = [value];
	    }

	    // 1. If list contains name, then set the value of
	    //    the first such header to value and remove the
	    //    others.
	    // 2. Otherwise, append header (name, value) to list.
	    this[kHeadersMap].set(lowercaseName, { name, value });
	  }

	  /**
	   * @see https://fetch.spec.whatwg.org/#concept-header-list-delete
	   * @param {string} name
	   * @param {boolean} isLowerCase
	   */
	  delete (name, isLowerCase) {
	    this[kHeadersSortedMap] = null;
	    if (!isLowerCase) name = name.toLowerCase();

	    if (name === 'set-cookie') {
	      this.cookies = null;
	    }

	    this[kHeadersMap].delete(name);
	  }

	  /**
	   * @see https://fetch.spec.whatwg.org/#concept-header-list-get
	   * @param {string} name
	   * @param {boolean} isLowerCase
	   * @returns {string | null}
	   */
	  get (name, isLowerCase) {
	    // 1. If list does not contain name, then return null.
	    // 2. Return the values of all headers in list whose name
	    //    is a byte-case-insensitive match for name,
	    //    separated from each other by 0x2C 0x20, in order.
	    return this[kHeadersMap].get(isLowerCase ? name : name.toLowerCase())?.value ?? null
	  }

	  * [Symbol.iterator] () {
	    // use the lowercased name
	    for (const { 0: name, 1: { value } } of this[kHeadersMap]) {
	      yield [name, value];
	    }
	  }

	  get entries () {
	    const headers = {};

	    if (this[kHeadersMap].size !== 0) {
	      for (const { name, value } of this[kHeadersMap].values()) {
	        headers[name] = value;
	      }
	    }

	    return headers
	  }

	  rawValues () {
	    return this[kHeadersMap].values()
	  }

	  get entriesList () {
	    const headers = [];

	    if (this[kHeadersMap].size !== 0) {
	      for (const { 0: lowerName, 1: { name, value } } of this[kHeadersMap]) {
	        if (lowerName === 'set-cookie') {
	          for (const cookie of this.cookies) {
	            headers.push([name, cookie]);
	          }
	        } else {
	          headers.push([name, value]);
	        }
	      }
	    }

	    return headers
	  }

	  // https://fetch.spec.whatwg.org/#convert-header-names-to-a-sorted-lowercase-set
	  toSortedArray () {
	    const size = this[kHeadersMap].size;
	    const array = new Array(size);
	    // In most cases, you will use the fast-path.
	    // fast-path: Use binary insertion sort for small arrays.
	    if (size <= 32) {
	      if (size === 0) {
	        // If empty, it is an empty array. To avoid the first index assignment.
	        return array
	      }
	      // Improve performance by unrolling loop and avoiding double-loop.
	      // Double-loop-less version of the binary insertion sort.
	      const iterator = this[kHeadersMap][Symbol.iterator]();
	      const firstValue = iterator.next().value;
	      // set [name, value] to first index.
	      array[0] = [firstValue[0], firstValue[1].value];
	      // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine
	      // 3.2.2. Assert: value is non-null.
	      assert(firstValue[1].value !== null);
	      for (
	        let i = 1, j = 0, right = 0, left = 0, pivot = 0, x, value;
	        i < size;
	        ++i
	      ) {
	        // get next value
	        value = iterator.next().value;
	        // set [name, value] to current index.
	        x = array[i] = [value[0], value[1].value];
	        // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine
	        // 3.2.2. Assert: value is non-null.
	        assert(x[1] !== null);
	        left = 0;
	        right = i;
	        // binary search
	        while (left < right) {
	          // middle index
	          pivot = left + ((right - left) >> 1);
	          // compare header name
	          if (array[pivot][0] <= x[0]) {
	            left = pivot + 1;
	          } else {
	            right = pivot;
	          }
	        }
	        if (i !== pivot) {
	          j = i;
	          while (j > left) {
	            array[j] = array[--j];
	          }
	          array[left] = x;
	        }
	      }
	      /* c8 ignore next 4 */
	      if (!iterator.next().done) {
	        // This is for debugging and will never be called.
	        throw new TypeError('Unreachable')
	      }
	      return array
	    } else {
	      // This case would be a rare occurrence.
	      // slow-path: fallback
	      let i = 0;
	      for (const { 0: name, 1: { value } } of this[kHeadersMap]) {
	        array[i++] = [name, value];
	        // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine
	        // 3.2.2. Assert: value is non-null.
	        assert(value !== null);
	      }
	      return array.sort(compareHeaderName)
	    }
	  }
	}

	// https://fetch.spec.whatwg.org/#headers-class
	class Headers {
	  #guard
	  #headersList

	  constructor (init = undefined) {
	    if (init === kConstruct) {
	      return
	    }

	    this.#headersList = new HeadersList();

	    // The new Headers(init) constructor steps are:

	    // 1. Set this’s guard to "none".
	    this.#guard = 'none';

	    // 2. If init is given, then fill this with init.
	    if (init !== undefined) {
	      init = webidl.converters.HeadersInit(init, 'Headers contructor', 'init');
	      fill(this, init);
	    }
	  }

	  // https://fetch.spec.whatwg.org/#dom-headers-append
	  append (name, value) {
	    webidl.brandCheck(this, Headers);

	    webidl.argumentLengthCheck(arguments, 2, 'Headers.append');

	    const prefix = 'Headers.append';
	    name = webidl.converters.ByteString(name, prefix, 'name');
	    value = webidl.converters.ByteString(value, prefix, 'value');

	    return appendHeader(this, name, value)
	  }

	  // https://fetch.spec.whatwg.org/#dom-headers-delete
	  delete (name) {
	    webidl.brandCheck(this, Headers);

	    webidl.argumentLengthCheck(arguments, 1, 'Headers.delete');

	    const prefix = 'Headers.delete';
	    name = webidl.converters.ByteString(name, prefix, 'name');

	    // 1. If name is not a header name, then throw a TypeError.
	    if (!isValidHeaderName(name)) {
	      throw webidl.errors.invalidArgument({
	        prefix: 'Headers.delete',
	        value: name,
	        type: 'header name'
	      })
	    }

	    // 2. If this’s guard is "immutable", then throw a TypeError.
	    // 3. Otherwise, if this’s guard is "request" and name is a
	    //    forbidden header name, return.
	    // 4. Otherwise, if this’s guard is "request-no-cors", name
	    //    is not a no-CORS-safelisted request-header name, and
	    //    name is not a privileged no-CORS request-header name,
	    //    return.
	    // 5. Otherwise, if this’s guard is "response" and name is
	    //    a forbidden response-header name, return.
	    // Note: undici does not implement forbidden header names
	    if (this.#guard === 'immutable') {
	      throw new TypeError('immutable')
	    }

	    // 6. If this’s header list does not contain name, then
	    //    return.
	    if (!this.#headersList.contains(name, false)) {
	      return
	    }

	    // 7. Delete name from this’s header list.
	    // 8. If this’s guard is "request-no-cors", then remove
	    //    privileged no-CORS request headers from this.
	    this.#headersList.delete(name, false);
	  }

	  // https://fetch.spec.whatwg.org/#dom-headers-get
	  get (name) {
	    webidl.brandCheck(this, Headers);

	    webidl.argumentLengthCheck(arguments, 1, 'Headers.get');

	    const prefix = 'Headers.get';
	    name = webidl.converters.ByteString(name, prefix, 'name');

	    // 1. If name is not a header name, then throw a TypeError.
	    if (!isValidHeaderName(name)) {
	      throw webidl.errors.invalidArgument({
	        prefix,
	        value: name,
	        type: 'header name'
	      })
	    }

	    // 2. Return the result of getting name from this’s header
	    //    list.
	    return this.#headersList.get(name, false)
	  }

	  // https://fetch.spec.whatwg.org/#dom-headers-has
	  has (name) {
	    webidl.brandCheck(this, Headers);

	    webidl.argumentLengthCheck(arguments, 1, 'Headers.has');

	    const prefix = 'Headers.has';
	    name = webidl.converters.ByteString(name, prefix, 'name');

	    // 1. If name is not a header name, then throw a TypeError.
	    if (!isValidHeaderName(name)) {
	      throw webidl.errors.invalidArgument({
	        prefix,
	        value: name,
	        type: 'header name'
	      })
	    }

	    // 2. Return true if this’s header list contains name;
	    //    otherwise false.
	    return this.#headersList.contains(name, false)
	  }

	  // https://fetch.spec.whatwg.org/#dom-headers-set
	  set (name, value) {
	    webidl.brandCheck(this, Headers);

	    webidl.argumentLengthCheck(arguments, 2, 'Headers.set');

	    const prefix = 'Headers.set';
	    name = webidl.converters.ByteString(name, prefix, 'name');
	    value = webidl.converters.ByteString(value, prefix, 'value');

	    // 1. Normalize value.
	    value = headerValueNormalize(value);

	    // 2. If name is not a header name or value is not a
	    //    header value, then throw a TypeError.
	    if (!isValidHeaderName(name)) {
	      throw webidl.errors.invalidArgument({
	        prefix,
	        value: name,
	        type: 'header name'
	      })
	    } else if (!isValidHeaderValue(value)) {
	      throw webidl.errors.invalidArgument({
	        prefix,
	        value,
	        type: 'header value'
	      })
	    }

	    // 3. If this’s guard is "immutable", then throw a TypeError.
	    // 4. Otherwise, if this’s guard is "request" and name is a
	    //    forbidden header name, return.
	    // 5. Otherwise, if this’s guard is "request-no-cors" and
	    //    name/value is not a no-CORS-safelisted request-header,
	    //    return.
	    // 6. Otherwise, if this’s guard is "response" and name is a
	    //    forbidden response-header name, return.
	    // Note: undici does not implement forbidden header names
	    if (this.#guard === 'immutable') {
	      throw new TypeError('immutable')
	    }

	    // 7. Set (name, value) in this’s header list.
	    // 8. If this’s guard is "request-no-cors", then remove
	    //    privileged no-CORS request headers from this
	    this.#headersList.set(name, value, false);
	  }

	  // https://fetch.spec.whatwg.org/#dom-headers-getsetcookie
	  getSetCookie () {
	    webidl.brandCheck(this, Headers);

	    // 1. If this’s header list does not contain `Set-Cookie`, then return « ».
	    // 2. Return the values of all headers in this’s header list whose name is
	    //    a byte-case-insensitive match for `Set-Cookie`, in order.

	    const list = this.#headersList.cookies;

	    if (list) {
	      return [...list]
	    }

	    return []
	  }

	  // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine
	  get [kHeadersSortedMap] () {
	    if (this.#headersList[kHeadersSortedMap]) {
	      return this.#headersList[kHeadersSortedMap]
	    }

	    // 1. Let headers be an empty list of headers with the key being the name
	    //    and value the value.
	    const headers = [];

	    // 2. Let names be the result of convert header names to a sorted-lowercase
	    //    set with all the names of the headers in list.
	    const names = this.#headersList.toSortedArray();

	    const cookies = this.#headersList.cookies;

	    // fast-path
	    if (cookies === null || cookies.length === 1) {
	      // Note: The non-null assertion of value has already been done by `HeadersList#toSortedArray`
	      return (this.#headersList[kHeadersSortedMap] = names)
	    }

	    // 3. For each name of names:
	    for (let i = 0; i < names.length; ++i) {
	      const { 0: name, 1: value } = names[i];
	      // 1. If name is `set-cookie`, then:
	      if (name === 'set-cookie') {
	        // 1. Let values be a list of all values of headers in list whose name
	        //    is a byte-case-insensitive match for name, in order.

	        // 2. For each value of values:
	        // 1. Append (name, value) to headers.
	        for (let j = 0; j < cookies.length; ++j) {
	          headers.push([name, cookies[j]]);
	        }
	      } else {
	        // 2. Otherwise:

	        // 1. Let value be the result of getting name from list.

	        // 2. Assert: value is non-null.
	        // Note: This operation was done by `HeadersList#toSortedArray`.

	        // 3. Append (name, value) to headers.
	        headers.push([name, value]);
	      }
	    }

	    // 4. Return headers.
	    return (this.#headersList[kHeadersSortedMap] = headers)
	  }

	  [util.inspect.custom] (depth, options) {
	    options.depth ??= depth;

	    return `Headers ${util.formatWithOptions(options, this.#headersList.entries)}`
	  }

	  static getHeadersGuard (o) {
	    return o.#guard
	  }

	  static setHeadersGuard (o, guard) {
	    o.#guard = guard;
	  }

	  static getHeadersList (o) {
	    return o.#headersList
	  }

	  static setHeadersList (o, list) {
	    o.#headersList = list;
	  }
	}

	const { getHeadersGuard, setHeadersGuard, getHeadersList, setHeadersList } = Headers;
	Reflect.deleteProperty(Headers, 'getHeadersGuard');
	Reflect.deleteProperty(Headers, 'setHeadersGuard');
	Reflect.deleteProperty(Headers, 'getHeadersList');
	Reflect.deleteProperty(Headers, 'setHeadersList');

	iteratorMixin('Headers', Headers, kHeadersSortedMap, 0, 1);

	Object.defineProperties(Headers.prototype, {
	  append: kEnumerableProperty,
	  delete: kEnumerableProperty,
	  get: kEnumerableProperty,
	  has: kEnumerableProperty,
	  set: kEnumerableProperty,
	  getSetCookie: kEnumerableProperty,
	  [Symbol.toStringTag]: {
	    value: 'Headers',
	    configurable: true
	  },
	  [util.inspect.custom]: {
	    enumerable: false
	  }
	});

	webidl.converters.HeadersInit = function (V, prefix, argument) {
	  if (webidl.util.Type(V) === 'Object') {
	    const iterator = Reflect.get(V, Symbol.iterator);

	    // A work-around to ensure we send the properly-cased Headers when V is a Headers object.
	    // Read https://github.com/nodejs/undici/pull/3159#issuecomment-2075537226 before touching, please.
	    if (!util.types.isProxy(V) && iterator === Headers.prototype.entries) { // Headers object
	      try {
	        return getHeadersList(V).entriesList
	      } catch {
	        // fall-through
	      }
	    }

	    if (typeof iterator === 'function') {
	      return webidl.converters['sequence<sequence<ByteString>>'](V, prefix, argument, iterator.bind(V))
	    }

	    return webidl.converters['record<ByteString, ByteString>'](V, prefix, argument)
	  }

	  throw webidl.errors.conversionFailed({
	    prefix: 'Headers constructor',
	    argument: 'Argument 1',
	    types: ['sequence<sequence<ByteString>>', 'record<ByteString, ByteString>']
	  })
	};

	headers = {
	  fill,
	  // for test.
	  compareHeaderName,
	  Headers,
	  HeadersList,
	  getHeadersGuard,
	  setHeadersGuard,
	  setHeadersList,
	  getHeadersList
	};
	return headers;
}

var response;
var hasRequiredResponse;

function requireResponse () {
	if (hasRequiredResponse) return response;
	hasRequiredResponse = 1;

	const { Headers, HeadersList, fill, getHeadersGuard, setHeadersGuard, setHeadersList } = requireHeaders();
	const { extractBody, cloneBody, mixinBody, hasFinalizationRegistry, streamRegistry, bodyUnusable } = requireBody();
	const util = requireUtil$8();
	const nodeUtil = require$$0$a;
	const { kEnumerableProperty } = util;
	const {
	  isValidReasonPhrase,
	  isCancelled,
	  isAborted,
	  isBlobLike,
	  serializeJavascriptValueToJSONString,
	  isErrorLike,
	  isomorphicEncode,
	  environmentSettingsObject: relevantRealm
	} = requireUtil$7();
	const {
	  redirectStatusSet,
	  nullBodyStatus
	} = requireConstants$4();
	const { kState, kHeaders } = requireSymbols$4();
	const { webidl } = requireWebidl();
	const { FormData } = requireFormdata();
	const { URLSerializer } = requireDataUrl();
	const { kConstruct } = requireSymbols$5();
	const assert = require$$0$7;
	const { types } = require$$0$a;

	const textEncoder = new TextEncoder('utf-8');

	// https://fetch.spec.whatwg.org/#response-class
	class Response {
	  // Creates network error Response.
	  static error () {
	    // The static error() method steps are to return the result of creating a
	    // Response object, given a new network error, "immutable", and this’s
	    // relevant Realm.
	    const responseObject = fromInnerResponse(makeNetworkError(), 'immutable');

	    return responseObject
	  }

	  // https://fetch.spec.whatwg.org/#dom-response-json
	  static json (data, init = {}) {
	    webidl.argumentLengthCheck(arguments, 1, 'Response.json');

	    if (init !== null) {
	      init = webidl.converters.ResponseInit(init);
	    }

	    // 1. Let bytes the result of running serialize a JavaScript value to JSON bytes on data.
	    const bytes = textEncoder.encode(
	      serializeJavascriptValueToJSONString(data)
	    );

	    // 2. Let body be the result of extracting bytes.
	    const body = extractBody(bytes);

	    // 3. Let responseObject be the result of creating a Response object, given a new response,
	    //    "response", and this’s relevant Realm.
	    const responseObject = fromInnerResponse(makeResponse({}), 'response');

	    // 4. Perform initialize a response given responseObject, init, and (body, "application/json").
	    initializeResponse(responseObject, init, { body: body[0], type: 'application/json' });

	    // 5. Return responseObject.
	    return responseObject
	  }

	  // Creates a redirect Response that redirects to url with status status.
	  static redirect (url, status = 302) {
	    webidl.argumentLengthCheck(arguments, 1, 'Response.redirect');

	    url = webidl.converters.USVString(url);
	    status = webidl.converters['unsigned short'](status);

	    // 1. Let parsedURL be the result of parsing url with current settings
	    // object’s API base URL.
	    // 2. If parsedURL is failure, then throw a TypeError.
	    // TODO: base-URL?
	    let parsedURL;
	    try {
	      parsedURL = new URL(url, relevantRealm.settingsObject.baseUrl);
	    } catch (err) {
	      throw new TypeError(`Failed to parse URL from ${url}`, { cause: err })
	    }

	    // 3. If status is not a redirect status, then throw a RangeError.
	    if (!redirectStatusSet.has(status)) {
	      throw new RangeError(`Invalid status code ${status}`)
	    }

	    // 4. Let responseObject be the result of creating a Response object,
	    // given a new response, "immutable", and this’s relevant Realm.
	    const responseObject = fromInnerResponse(makeResponse({}), 'immutable');

	    // 5. Set responseObject’s response’s status to status.
	    responseObject[kState].status = status;

	    // 6. Let value be parsedURL, serialized and isomorphic encoded.
	    const value = isomorphicEncode(URLSerializer(parsedURL));

	    // 7. Append `Location`/value to responseObject’s response’s header list.
	    responseObject[kState].headersList.append('location', value, true);

	    // 8. Return responseObject.
	    return responseObject
	  }

	  // https://fetch.spec.whatwg.org/#dom-response
	  constructor (body = null, init = {}) {
	    if (body === kConstruct) {
	      return
	    }

	    if (body !== null) {
	      body = webidl.converters.BodyInit(body);
	    }

	    init = webidl.converters.ResponseInit(init);

	    // 1. Set this’s response to a new response.
	    this[kState] = makeResponse({});

	    // 2. Set this’s headers to a new Headers object with this’s relevant
	    // Realm, whose header list is this’s response’s header list and guard
	    // is "response".
	    this[kHeaders] = new Headers(kConstruct);
	    setHeadersGuard(this[kHeaders], 'response');
	    setHeadersList(this[kHeaders], this[kState].headersList);

	    // 3. Let bodyWithType be null.
	    let bodyWithType = null;

	    // 4. If body is non-null, then set bodyWithType to the result of extracting body.
	    if (body != null) {
	      const [extractedBody, type] = extractBody(body);
	      bodyWithType = { body: extractedBody, type };
	    }

	    // 5. Perform initialize a response given this, init, and bodyWithType.
	    initializeResponse(this, init, bodyWithType);
	  }

	  // Returns response’s type, e.g., "cors".
	  get type () {
	    webidl.brandCheck(this, Response);

	    // The type getter steps are to return this’s response’s type.
	    return this[kState].type
	  }

	  // Returns response’s URL, if it has one; otherwise the empty string.
	  get url () {
	    webidl.brandCheck(this, Response);

	    const urlList = this[kState].urlList;

	    // The url getter steps are to return the empty string if this’s
	    // response’s URL is null; otherwise this’s response’s URL,
	    // serialized with exclude fragment set to true.
	    const url = urlList[urlList.length - 1] ?? null;

	    if (url === null) {
	      return ''
	    }

	    return URLSerializer(url, true)
	  }

	  // Returns whether response was obtained through a redirect.
	  get redirected () {
	    webidl.brandCheck(this, Response);

	    // The redirected getter steps are to return true if this’s response’s URL
	    // list has more than one item; otherwise false.
	    return this[kState].urlList.length > 1
	  }

	  // Returns response’s status.
	  get status () {
	    webidl.brandCheck(this, Response);

	    // The status getter steps are to return this’s response’s status.
	    return this[kState].status
	  }

	  // Returns whether response’s status is an ok status.
	  get ok () {
	    webidl.brandCheck(this, Response);

	    // The ok getter steps are to return true if this’s response’s status is an
	    // ok status; otherwise false.
	    return this[kState].status >= 200 && this[kState].status <= 299
	  }

	  // Returns response’s status message.
	  get statusText () {
	    webidl.brandCheck(this, Response);

	    // The statusText getter steps are to return this’s response’s status
	    // message.
	    return this[kState].statusText
	  }

	  // Returns response’s headers as Headers.
	  get headers () {
	    webidl.brandCheck(this, Response);

	    // The headers getter steps are to return this’s headers.
	    return this[kHeaders]
	  }

	  get body () {
	    webidl.brandCheck(this, Response);

	    return this[kState].body ? this[kState].body.stream : null
	  }

	  get bodyUsed () {
	    webidl.brandCheck(this, Response);

	    return !!this[kState].body && util.isDisturbed(this[kState].body.stream)
	  }

	  // Returns a clone of response.
	  clone () {
	    webidl.brandCheck(this, Response);

	    // 1. If this is unusable, then throw a TypeError.
	    if (bodyUnusable(this)) {
	      throw webidl.errors.exception({
	        header: 'Response.clone',
	        message: 'Body has already been consumed.'
	      })
	    }

	    // 2. Let clonedResponse be the result of cloning this’s response.
	    const clonedResponse = cloneResponse(this[kState]);

	    // 3. Return the result of creating a Response object, given
	    // clonedResponse, this’s headers’s guard, and this’s relevant Realm.
	    return fromInnerResponse(clonedResponse, getHeadersGuard(this[kHeaders]))
	  }

	  [nodeUtil.inspect.custom] (depth, options) {
	    if (options.depth === null) {
	      options.depth = 2;
	    }

	    options.colors ??= true;

	    const properties = {
	      status: this.status,
	      statusText: this.statusText,
	      headers: this.headers,
	      body: this.body,
	      bodyUsed: this.bodyUsed,
	      ok: this.ok,
	      redirected: this.redirected,
	      type: this.type,
	      url: this.url
	    };

	    return `Response ${nodeUtil.formatWithOptions(options, properties)}`
	  }
	}

	mixinBody(Response);

	Object.defineProperties(Response.prototype, {
	  type: kEnumerableProperty,
	  url: kEnumerableProperty,
	  status: kEnumerableProperty,
	  ok: kEnumerableProperty,
	  redirected: kEnumerableProperty,
	  statusText: kEnumerableProperty,
	  headers: kEnumerableProperty,
	  clone: kEnumerableProperty,
	  body: kEnumerableProperty,
	  bodyUsed: kEnumerableProperty,
	  [Symbol.toStringTag]: {
	    value: 'Response',
	    configurable: true
	  }
	});

	Object.defineProperties(Response, {
	  json: kEnumerableProperty,
	  redirect: kEnumerableProperty,
	  error: kEnumerableProperty
	});

	// https://fetch.spec.whatwg.org/#concept-response-clone
	function cloneResponse (response) {
	  // To clone a response response, run these steps:

	  // 1. If response is a filtered response, then return a new identical
	  // filtered response whose internal response is a clone of response’s
	  // internal response.
	  if (response.internalResponse) {
	    return filterResponse(
	      cloneResponse(response.internalResponse),
	      response.type
	    )
	  }

	  // 2. Let newResponse be a copy of response, except for its body.
	  const newResponse = makeResponse({ ...response, body: null });

	  // 3. If response’s body is non-null, then set newResponse’s body to the
	  // result of cloning response’s body.
	  if (response.body != null) {
	    newResponse.body = cloneBody(newResponse, response.body);
	  }

	  // 4. Return newResponse.
	  return newResponse
	}

	function makeResponse (init) {
	  return {
	    aborted: false,
	    rangeRequested: false,
	    timingAllowPassed: false,
	    requestIncludesCredentials: false,
	    type: 'default',
	    status: 200,
	    timingInfo: null,
	    cacheState: '',
	    statusText: '',
	    ...init,
	    headersList: init?.headersList
	      ? new HeadersList(init?.headersList)
	      : new HeadersList(),
	    urlList: init?.urlList ? [...init.urlList] : []
	  }
	}

	function makeNetworkError (reason) {
	  const isError = isErrorLike(reason);
	  return makeResponse({
	    type: 'error',
	    status: 0,
	    error: isError
	      ? reason
	      : new Error(reason ? String(reason) : reason),
	    aborted: reason && reason.name === 'AbortError'
	  })
	}

	// @see https://fetch.spec.whatwg.org/#concept-network-error
	function isNetworkError (response) {
	  return (
	    // A network error is a response whose type is "error",
	    response.type === 'error' &&
	    // status is 0
	    response.status === 0
	  )
	}

	function makeFilteredResponse (response, state) {
	  state = {
	    internalResponse: response,
	    ...state
	  };

	  return new Proxy(response, {
	    get (target, p) {
	      return p in state ? state[p] : target[p]
	    },
	    set (target, p, value) {
	      assert(!(p in state));
	      target[p] = value;
	      return true
	    }
	  })
	}

	// https://fetch.spec.whatwg.org/#concept-filtered-response
	function filterResponse (response, type) {
	  // Set response to the following filtered response with response as its
	  // internal response, depending on request’s response tainting:
	  if (type === 'basic') {
	    // A basic filtered response is a filtered response whose type is "basic"
	    // and header list excludes any headers in internal response’s header list
	    // whose name is a forbidden response-header name.

	    // Note: undici does not implement forbidden response-header names
	    return makeFilteredResponse(response, {
	      type: 'basic',
	      headersList: response.headersList
	    })
	  } else if (type === 'cors') {
	    // A CORS filtered response is a filtered response whose type is "cors"
	    // and header list excludes any headers in internal response’s header
	    // list whose name is not a CORS-safelisted response-header name, given
	    // internal response’s CORS-exposed header-name list.

	    // Note: undici does not implement CORS-safelisted response-header names
	    return makeFilteredResponse(response, {
	      type: 'cors',
	      headersList: response.headersList
	    })
	  } else if (type === 'opaque') {
	    // An opaque filtered response is a filtered response whose type is
	    // "opaque", URL list is the empty list, status is 0, status message
	    // is the empty byte sequence, header list is empty, and body is null.

	    return makeFilteredResponse(response, {
	      type: 'opaque',
	      urlList: Object.freeze([]),
	      status: 0,
	      statusText: '',
	      body: null
	    })
	  } else if (type === 'opaqueredirect') {
	    // An opaque-redirect filtered response is a filtered response whose type
	    // is "opaqueredirect", status is 0, status message is the empty byte
	    // sequence, header list is empty, and body is null.

	    return makeFilteredResponse(response, {
	      type: 'opaqueredirect',
	      status: 0,
	      statusText: '',
	      headersList: [],
	      body: null
	    })
	  } else {
	    assert(false);
	  }
	}

	// https://fetch.spec.whatwg.org/#appropriate-network-error
	function makeAppropriateNetworkError (fetchParams, err = null) {
	  // 1. Assert: fetchParams is canceled.
	  assert(isCancelled(fetchParams));

	  // 2. Return an aborted network error if fetchParams is aborted;
	  // otherwise return a network error.
	  return isAborted(fetchParams)
	    ? makeNetworkError(Object.assign(new DOMException('The operation was aborted.', 'AbortError'), { cause: err }))
	    : makeNetworkError(Object.assign(new DOMException('Request was cancelled.'), { cause: err }))
	}

	// https://whatpr.org/fetch/1392.html#initialize-a-response
	function initializeResponse (response, init, body) {
	  // 1. If init["status"] is not in the range 200 to 599, inclusive, then
	  //    throw a RangeError.
	  if (init.status !== null && (init.status < 200 || init.status > 599)) {
	    throw new RangeError('init["status"] must be in the range of 200 to 599, inclusive.')
	  }

	  // 2. If init["statusText"] does not match the reason-phrase token production,
	  //    then throw a TypeError.
	  if ('statusText' in init && init.statusText != null) {
	    // See, https://datatracker.ietf.org/doc/html/rfc7230#section-3.1.2:
	    //   reason-phrase  = *( HTAB / SP / VCHAR / obs-text )
	    if (!isValidReasonPhrase(String(init.statusText))) {
	      throw new TypeError('Invalid statusText')
	    }
	  }

	  // 3. Set response’s response’s status to init["status"].
	  if ('status' in init && init.status != null) {
	    response[kState].status = init.status;
	  }

	  // 4. Set response’s response’s status message to init["statusText"].
	  if ('statusText' in init && init.statusText != null) {
	    response[kState].statusText = init.statusText;
	  }

	  // 5. If init["headers"] exists, then fill response’s headers with init["headers"].
	  if ('headers' in init && init.headers != null) {
	    fill(response[kHeaders], init.headers);
	  }

	  // 6. If body was given, then:
	  if (body) {
	    // 1. If response's status is a null body status, then throw a TypeError.
	    if (nullBodyStatus.includes(response.status)) {
	      throw webidl.errors.exception({
	        header: 'Response constructor',
	        message: `Invalid response status code ${response.status}`
	      })
	    }

	    // 2. Set response's body to body's body.
	    response[kState].body = body.body;

	    // 3. If body's type is non-null and response's header list does not contain
	    //    `Content-Type`, then append (`Content-Type`, body's type) to response's header list.
	    if (body.type != null && !response[kState].headersList.contains('content-type', true)) {
	      response[kState].headersList.append('content-type', body.type, true);
	    }
	  }
	}

	/**
	 * @see https://fetch.spec.whatwg.org/#response-create
	 * @param {any} innerResponse
	 * @param {'request' | 'immutable' | 'request-no-cors' | 'response' | 'none'} guard
	 * @returns {Response}
	 */
	function fromInnerResponse (innerResponse, guard) {
	  const response = new Response(kConstruct);
	  response[kState] = innerResponse;
	  response[kHeaders] = new Headers(kConstruct);
	  setHeadersList(response[kHeaders], innerResponse.headersList);
	  setHeadersGuard(response[kHeaders], guard);

	  if (hasFinalizationRegistry && innerResponse.body?.stream) {
	    // If the target (response) is reclaimed, the cleanup callback may be called at some point with
	    // the held value provided for it (innerResponse.body.stream). The held value can be any value:
	    // a primitive or an object, even undefined. If the held value is an object, the registry keeps
	    // a strong reference to it (so it can pass it to the cleanup callback later). Reworded from
	    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry
	    streamRegistry.register(response, new WeakRef(innerResponse.body.stream));
	  }

	  return response
	}

	webidl.converters.ReadableStream = webidl.interfaceConverter(
	  ReadableStream
	);

	webidl.converters.FormData = webidl.interfaceConverter(
	  FormData
	);

	webidl.converters.URLSearchParams = webidl.interfaceConverter(
	  URLSearchParams
	);

	// https://fetch.spec.whatwg.org/#typedefdef-xmlhttprequestbodyinit
	webidl.converters.XMLHttpRequestBodyInit = function (V, prefix, name) {
	  if (typeof V === 'string') {
	    return webidl.converters.USVString(V, prefix, name)
	  }

	  if (isBlobLike(V)) {
	    return webidl.converters.Blob(V, prefix, name, { strict: false })
	  }

	  if (ArrayBuffer.isView(V) || types.isArrayBuffer(V)) {
	    return webidl.converters.BufferSource(V, prefix, name)
	  }

	  if (util.isFormDataLike(V)) {
	    return webidl.converters.FormData(V, prefix, name, { strict: false })
	  }

	  if (V instanceof URLSearchParams) {
	    return webidl.converters.URLSearchParams(V, prefix, name)
	  }

	  return webidl.converters.DOMString(V, prefix, name)
	};

	// https://fetch.spec.whatwg.org/#bodyinit
	webidl.converters.BodyInit = function (V, prefix, argument) {
	  if (V instanceof ReadableStream) {
	    return webidl.converters.ReadableStream(V, prefix, argument)
	  }

	  // Note: the spec doesn't include async iterables,
	  // this is an undici extension.
	  if (V?.[Symbol.asyncIterator]) {
	    return V
	  }

	  return webidl.converters.XMLHttpRequestBodyInit(V, prefix, argument)
	};

	webidl.converters.ResponseInit = webidl.dictionaryConverter([
	  {
	    key: 'status',
	    converter: webidl.converters['unsigned short'],
	    defaultValue: () => 200
	  },
	  {
	    key: 'statusText',
	    converter: webidl.converters.ByteString,
	    defaultValue: () => ''
	  },
	  {
	    key: 'headers',
	    converter: webidl.converters.HeadersInit
	  }
	]);

	response = {
	  isNetworkError,
	  makeNetworkError,
	  makeResponse,
	  makeAppropriateNetworkError,
	  filterResponse,
	  Response,
	  cloneResponse,
	  fromInnerResponse
	};
	return response;
}

var dispatcherWeakref;
var hasRequiredDispatcherWeakref;

function requireDispatcherWeakref () {
	if (hasRequiredDispatcherWeakref) return dispatcherWeakref;
	hasRequiredDispatcherWeakref = 1;

	const { kConnected, kSize } = requireSymbols$5();

	class CompatWeakRef {
	  constructor (value) {
	    this.value = value;
	  }

	  deref () {
	    return this.value[kConnected] === 0 && this.value[kSize] === 0
	      ? undefined
	      : this.value
	  }
	}

	class CompatFinalizer {
	  constructor (finalizer) {
	    this.finalizer = finalizer;
	  }

	  register (dispatcher, key) {
	    if (dispatcher.on) {
	      dispatcher.on('disconnect', () => {
	        if (dispatcher[kConnected] === 0 && dispatcher[kSize] === 0) {
	          this.finalizer(key);
	        }
	      });
	    }
	  }

	  unregister (key) {}
	}

	dispatcherWeakref = function () {
	  // FIXME: remove workaround when the Node bug is backported to v18
	  // https://github.com/nodejs/node/issues/49344#issuecomment-1741776308
	  if (process.env.NODE_V8_COVERAGE && process.version.startsWith('v18')) {
	    process._rawDebug('Using compatibility WeakRef and FinalizationRegistry');
	    return {
	      WeakRef: CompatWeakRef,
	      FinalizationRegistry: CompatFinalizer
	    }
	  }
	  return { WeakRef, FinalizationRegistry }
	};
	return dispatcherWeakref;
}

/* globals AbortController */

var request;
var hasRequiredRequest;

function requireRequest () {
	if (hasRequiredRequest) return request;
	hasRequiredRequest = 1;

	const { extractBody, mixinBody, cloneBody, bodyUnusable } = requireBody();
	const { Headers, fill: fillHeaders, HeadersList, setHeadersGuard, getHeadersGuard, setHeadersList, getHeadersList } = requireHeaders();
	const { FinalizationRegistry } = requireDispatcherWeakref()();
	const util = requireUtil$8();
	const nodeUtil = require$$0$a;
	const {
	  isValidHTTPToken,
	  sameOrigin,
	  environmentSettingsObject
	} = requireUtil$7();
	const {
	  forbiddenMethodsSet,
	  corsSafeListedMethodsSet,
	  referrerPolicy,
	  requestRedirect,
	  requestMode,
	  requestCredentials,
	  requestCache,
	  requestDuplex
	} = requireConstants$4();
	const { kEnumerableProperty, normalizedMethodRecordsBase, normalizedMethodRecords } = util;
	const { kHeaders, kSignal, kState, kDispatcher } = requireSymbols$4();
	const { webidl } = requireWebidl();
	const { URLSerializer } = requireDataUrl();
	const { kConstruct } = requireSymbols$5();
	const assert = require$$0$7;
	const { getMaxListeners, setMaxListeners, getEventListeners, defaultMaxListeners } = require$$0$b;

	const kAbortController = Symbol('abortController');

	const requestFinalizer = new FinalizationRegistry(({ signal, abort }) => {
	  signal.removeEventListener('abort', abort);
	});

	const dependentControllerMap = new WeakMap();

	function buildAbort (acRef) {
	  return abort

	  function abort () {
	    const ac = acRef.deref();
	    if (ac !== undefined) {
	      // Currently, there is a problem with FinalizationRegistry.
	      // https://github.com/nodejs/node/issues/49344
	      // https://github.com/nodejs/node/issues/47748
	      // In the case of abort, the first step is to unregister from it.
	      // If the controller can refer to it, it is still registered.
	      // It will be removed in the future.
	      requestFinalizer.unregister(abort);

	      // Unsubscribe a listener.
	      // FinalizationRegistry will no longer be called, so this must be done.
	      this.removeEventListener('abort', abort);

	      ac.abort(this.reason);

	      const controllerList = dependentControllerMap.get(ac.signal);

	      if (controllerList !== undefined) {
	        if (controllerList.size !== 0) {
	          for (const ref of controllerList) {
	            const ctrl = ref.deref();
	            if (ctrl !== undefined) {
	              ctrl.abort(this.reason);
	            }
	          }
	          controllerList.clear();
	        }
	        dependentControllerMap.delete(ac.signal);
	      }
	    }
	  }
	}

	let patchMethodWarning = false;

	// https://fetch.spec.whatwg.org/#request-class
	class Request {
	  // https://fetch.spec.whatwg.org/#dom-request
	  constructor (input, init = {}) {
	    if (input === kConstruct) {
	      return
	    }

	    const prefix = 'Request constructor';
	    webidl.argumentLengthCheck(arguments, 1, prefix);

	    input = webidl.converters.RequestInfo(input, prefix, 'input');
	    init = webidl.converters.RequestInit(init, prefix, 'init');

	    // 1. Let request be null.
	    let request = null;

	    // 2. Let fallbackMode be null.
	    let fallbackMode = null;

	    // 3. Let baseURL be this’s relevant settings object’s API base URL.
	    const baseUrl = environmentSettingsObject.settingsObject.baseUrl;

	    // 4. Let signal be null.
	    let signal = null;

	    // 5. If input is a string, then:
	    if (typeof input === 'string') {
	      this[kDispatcher] = init.dispatcher;

	      // 1. Let parsedURL be the result of parsing input with baseURL.
	      // 2. If parsedURL is failure, then throw a TypeError.
	      let parsedURL;
	      try {
	        parsedURL = new URL(input, baseUrl);
	      } catch (err) {
	        throw new TypeError('Failed to parse URL from ' + input, { cause: err })
	      }

	      // 3. If parsedURL includes credentials, then throw a TypeError.
	      if (parsedURL.username || parsedURL.password) {
	        throw new TypeError(
	          'Request cannot be constructed from a URL that includes credentials: ' +
	            input
	        )
	      }

	      // 4. Set request to a new request whose URL is parsedURL.
	      request = makeRequest({ urlList: [parsedURL] });

	      // 5. Set fallbackMode to "cors".
	      fallbackMode = 'cors';
	    } else {
	      this[kDispatcher] = init.dispatcher || input[kDispatcher];

	      // 6. Otherwise:

	      // 7. Assert: input is a Request object.
	      assert(input instanceof Request);

	      // 8. Set request to input’s request.
	      request = input[kState];

	      // 9. Set signal to input’s signal.
	      signal = input[kSignal];
	    }

	    // 7. Let origin be this’s relevant settings object’s origin.
	    const origin = environmentSettingsObject.settingsObject.origin;

	    // 8. Let window be "client".
	    let window = 'client';

	    // 9. If request’s window is an environment settings object and its origin
	    // is same origin with origin, then set window to request’s window.
	    if (
	      request.window?.constructor?.name === 'EnvironmentSettingsObject' &&
	      sameOrigin(request.window, origin)
	    ) {
	      window = request.window;
	    }

	    // 10. If init["window"] exists and is non-null, then throw a TypeError.
	    if (init.window != null) {
	      throw new TypeError(`'window' option '${window}' must be null`)
	    }

	    // 11. If init["window"] exists, then set window to "no-window".
	    if ('window' in init) {
	      window = 'no-window';
	    }

	    // 12. Set request to a new request with the following properties:
	    request = makeRequest({
	      // URL request’s URL.
	      // undici implementation note: this is set as the first item in request's urlList in makeRequest
	      // method request’s method.
	      method: request.method,
	      // header list A copy of request’s header list.
	      // undici implementation note: headersList is cloned in makeRequest
	      headersList: request.headersList,
	      // unsafe-request flag Set.
	      unsafeRequest: request.unsafeRequest,
	      // client This’s relevant settings object.
	      client: environmentSettingsObject.settingsObject,
	      // window window.
	      window,
	      // priority request’s priority.
	      priority: request.priority,
	      // origin request’s origin. The propagation of the origin is only significant for navigation requests
	      // being handled by a service worker. In this scenario a request can have an origin that is different
	      // from the current client.
	      origin: request.origin,
	      // referrer request’s referrer.
	      referrer: request.referrer,
	      // referrer policy request’s referrer policy.
	      referrerPolicy: request.referrerPolicy,
	      // mode request’s mode.
	      mode: request.mode,
	      // credentials mode request’s credentials mode.
	      credentials: request.credentials,
	      // cache mode request’s cache mode.
	      cache: request.cache,
	      // redirect mode request’s redirect mode.
	      redirect: request.redirect,
	      // integrity metadata request’s integrity metadata.
	      integrity: request.integrity,
	      // keepalive request’s keepalive.
	      keepalive: request.keepalive,
	      // reload-navigation flag request’s reload-navigation flag.
	      reloadNavigation: request.reloadNavigation,
	      // history-navigation flag request’s history-navigation flag.
	      historyNavigation: request.historyNavigation,
	      // URL list A clone of request’s URL list.
	      urlList: [...request.urlList]
	    });

	    const initHasKey = Object.keys(init).length !== 0;

	    // 13. If init is not empty, then:
	    if (initHasKey) {
	      // 1. If request’s mode is "navigate", then set it to "same-origin".
	      if (request.mode === 'navigate') {
	        request.mode = 'same-origin';
	      }

	      // 2. Unset request’s reload-navigation flag.
	      request.reloadNavigation = false;

	      // 3. Unset request’s history-navigation flag.
	      request.historyNavigation = false;

	      // 4. Set request’s origin to "client".
	      request.origin = 'client';

	      // 5. Set request’s referrer to "client"
	      request.referrer = 'client';

	      // 6. Set request’s referrer policy to the empty string.
	      request.referrerPolicy = '';

	      // 7. Set request’s URL to request’s current URL.
	      request.url = request.urlList[request.urlList.length - 1];

	      // 8. Set request’s URL list to « request’s URL ».
	      request.urlList = [request.url];
	    }

	    // 14. If init["referrer"] exists, then:
	    if (init.referrer !== undefined) {
	      // 1. Let referrer be init["referrer"].
	      const referrer = init.referrer;

	      // 2. If referrer is the empty string, then set request’s referrer to "no-referrer".
	      if (referrer === '') {
	        request.referrer = 'no-referrer';
	      } else {
	        // 1. Let parsedReferrer be the result of parsing referrer with
	        // baseURL.
	        // 2. If parsedReferrer is failure, then throw a TypeError.
	        let parsedReferrer;
	        try {
	          parsedReferrer = new URL(referrer, baseUrl);
	        } catch (err) {
	          throw new TypeError(`Referrer "${referrer}" is not a valid URL.`, { cause: err })
	        }

	        // 3. If one of the following is true
	        // - parsedReferrer’s scheme is "about" and path is the string "client"
	        // - parsedReferrer’s origin is not same origin with origin
	        // then set request’s referrer to "client".
	        if (
	          (parsedReferrer.protocol === 'about:' && parsedReferrer.hostname === 'client') ||
	          (origin && !sameOrigin(parsedReferrer, environmentSettingsObject.settingsObject.baseUrl))
	        ) {
	          request.referrer = 'client';
	        } else {
	          // 4. Otherwise, set request’s referrer to parsedReferrer.
	          request.referrer = parsedReferrer;
	        }
	      }
	    }

	    // 15. If init["referrerPolicy"] exists, then set request’s referrer policy
	    // to it.
	    if (init.referrerPolicy !== undefined) {
	      request.referrerPolicy = init.referrerPolicy;
	    }

	    // 16. Let mode be init["mode"] if it exists, and fallbackMode otherwise.
	    let mode;
	    if (init.mode !== undefined) {
	      mode = init.mode;
	    } else {
	      mode = fallbackMode;
	    }

	    // 17. If mode is "navigate", then throw a TypeError.
	    if (mode === 'navigate') {
	      throw webidl.errors.exception({
	        header: 'Request constructor',
	        message: 'invalid request mode navigate.'
	      })
	    }

	    // 18. If mode is non-null, set request’s mode to mode.
	    if (mode != null) {
	      request.mode = mode;
	    }

	    // 19. If init["credentials"] exists, then set request’s credentials mode
	    // to it.
	    if (init.credentials !== undefined) {
	      request.credentials = init.credentials;
	    }

	    // 18. If init["cache"] exists, then set request’s cache mode to it.
	    if (init.cache !== undefined) {
	      request.cache = init.cache;
	    }

	    // 21. If request’s cache mode is "only-if-cached" and request’s mode is
	    // not "same-origin", then throw a TypeError.
	    if (request.cache === 'only-if-cached' && request.mode !== 'same-origin') {
	      throw new TypeError(
	        "'only-if-cached' can be set only with 'same-origin' mode"
	      )
	    }

	    // 22. If init["redirect"] exists, then set request’s redirect mode to it.
	    if (init.redirect !== undefined) {
	      request.redirect = init.redirect;
	    }

	    // 23. If init["integrity"] exists, then set request’s integrity metadata to it.
	    if (init.integrity != null) {
	      request.integrity = String(init.integrity);
	    }

	    // 24. If init["keepalive"] exists, then set request’s keepalive to it.
	    if (init.keepalive !== undefined) {
	      request.keepalive = Boolean(init.keepalive);
	    }

	    // 25. If init["method"] exists, then:
	    if (init.method !== undefined) {
	      // 1. Let method be init["method"].
	      let method = init.method;

	      const mayBeNormalized = normalizedMethodRecords[method];

	      if (mayBeNormalized !== undefined) {
	        // Note: Bypass validation DELETE, GET, HEAD, OPTIONS, POST, PUT, PATCH and these lowercase ones
	        request.method = mayBeNormalized;
	      } else {
	        // 2. If method is not a method or method is a forbidden method, then
	        // throw a TypeError.
	        if (!isValidHTTPToken(method)) {
	          throw new TypeError(`'${method}' is not a valid HTTP method.`)
	        }

	        const upperCase = method.toUpperCase();

	        if (forbiddenMethodsSet.has(upperCase)) {
	          throw new TypeError(`'${method}' HTTP method is unsupported.`)
	        }

	        // 3. Normalize method.
	        // https://fetch.spec.whatwg.org/#concept-method-normalize
	        // Note: must be in uppercase
	        method = normalizedMethodRecordsBase[upperCase] ?? method;

	        // 4. Set request’s method to method.
	        request.method = method;
	      }

	      if (!patchMethodWarning && request.method === 'patch') {
	        process.emitWarning('Using `patch` is highly likely to result in a `405 Method Not Allowed`. `PATCH` is much more likely to succeed.', {
	          code: 'UNDICI-FETCH-patch'
	        });

	        patchMethodWarning = true;
	      }
	    }

	    // 26. If init["signal"] exists, then set signal to it.
	    if (init.signal !== undefined) {
	      signal = init.signal;
	    }

	    // 27. Set this’s request to request.
	    this[kState] = request;

	    // 28. Set this’s signal to a new AbortSignal object with this’s relevant
	    // Realm.
	    // TODO: could this be simplified with AbortSignal.any
	    // (https://dom.spec.whatwg.org/#dom-abortsignal-any)
	    const ac = new AbortController();
	    this[kSignal] = ac.signal;

	    // 29. If signal is not null, then make this’s signal follow signal.
	    if (signal != null) {
	      if (
	        !signal ||
	        typeof signal.aborted !== 'boolean' ||
	        typeof signal.addEventListener !== 'function'
	      ) {
	        throw new TypeError(
	          "Failed to construct 'Request': member signal is not of type AbortSignal."
	        )
	      }

	      if (signal.aborted) {
	        ac.abort(signal.reason);
	      } else {
	        // Keep a strong ref to ac while request object
	        // is alive. This is needed to prevent AbortController
	        // from being prematurely garbage collected.
	        // See, https://github.com/nodejs/undici/issues/1926.
	        this[kAbortController] = ac;

	        const acRef = new WeakRef(ac);
	        const abort = buildAbort(acRef);

	        // Third-party AbortControllers may not work with these.
	        // See, https://github.com/nodejs/undici/pull/1910#issuecomment-1464495619.
	        try {
	          // If the max amount of listeners is equal to the default, increase it
	          // This is only available in node >= v19.9.0
	          if (typeof getMaxListeners === 'function' && getMaxListeners(signal) === defaultMaxListeners) {
	            setMaxListeners(1500, signal);
	          } else if (getEventListeners(signal, 'abort').length >= defaultMaxListeners) {
	            setMaxListeners(1500, signal);
	          }
	        } catch {}

	        util.addAbortListener(signal, abort);
	        // The third argument must be a registry key to be unregistered.
	        // Without it, you cannot unregister.
	        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry
	        // abort is used as the unregister key. (because it is unique)
	        requestFinalizer.register(ac, { signal, abort }, abort);
	      }
	    }

	    // 30. Set this’s headers to a new Headers object with this’s relevant
	    // Realm, whose header list is request’s header list and guard is
	    // "request".
	    this[kHeaders] = new Headers(kConstruct);
	    setHeadersList(this[kHeaders], request.headersList);
	    setHeadersGuard(this[kHeaders], 'request');

	    // 31. If this’s request’s mode is "no-cors", then:
	    if (mode === 'no-cors') {
	      // 1. If this’s request’s method is not a CORS-safelisted method,
	      // then throw a TypeError.
	      if (!corsSafeListedMethodsSet.has(request.method)) {
	        throw new TypeError(
	          `'${request.method} is unsupported in no-cors mode.`
	        )
	      }

	      // 2. Set this’s headers’s guard to "request-no-cors".
	      setHeadersGuard(this[kHeaders], 'request-no-cors');
	    }

	    // 32. If init is not empty, then:
	    if (initHasKey) {
	      /** @type {HeadersList} */
	      const headersList = getHeadersList(this[kHeaders]);
	      // 1. Let headers be a copy of this’s headers and its associated header
	      // list.
	      // 2. If init["headers"] exists, then set headers to init["headers"].
	      const headers = init.headers !== undefined ? init.headers : new HeadersList(headersList);

	      // 3. Empty this’s headers’s header list.
	      headersList.clear();

	      // 4. If headers is a Headers object, then for each header in its header
	      // list, append header’s name/header’s value to this’s headers.
	      if (headers instanceof HeadersList) {
	        for (const { name, value } of headers.rawValues()) {
	          headersList.append(name, value, false);
	        }
	        // Note: Copy the `set-cookie` meta-data.
	        headersList.cookies = headers.cookies;
	      } else {
	        // 5. Otherwise, fill this’s headers with headers.
	        fillHeaders(this[kHeaders], headers);
	      }
	    }

	    // 33. Let inputBody be input’s request’s body if input is a Request
	    // object; otherwise null.
	    const inputBody = input instanceof Request ? input[kState].body : null;

	    // 34. If either init["body"] exists and is non-null or inputBody is
	    // non-null, and request’s method is `GET` or `HEAD`, then throw a
	    // TypeError.
	    if (
	      (init.body != null || inputBody != null) &&
	      (request.method === 'GET' || request.method === 'HEAD')
	    ) {
	      throw new TypeError('Request with GET/HEAD method cannot have body.')
	    }

	    // 35. Let initBody be null.
	    let initBody = null;

	    // 36. If init["body"] exists and is non-null, then:
	    if (init.body != null) {
	      // 1. Let Content-Type be null.
	      // 2. Set initBody and Content-Type to the result of extracting
	      // init["body"], with keepalive set to request’s keepalive.
	      const [extractedBody, contentType] = extractBody(
	        init.body,
	        request.keepalive
	      );
	      initBody = extractedBody;

	      // 3, If Content-Type is non-null and this’s headers’s header list does
	      // not contain `Content-Type`, then append `Content-Type`/Content-Type to
	      // this’s headers.
	      if (contentType && !getHeadersList(this[kHeaders]).contains('content-type', true)) {
	        this[kHeaders].append('content-type', contentType);
	      }
	    }

	    // 37. Let inputOrInitBody be initBody if it is non-null; otherwise
	    // inputBody.
	    const inputOrInitBody = initBody ?? inputBody;

	    // 38. If inputOrInitBody is non-null and inputOrInitBody’s source is
	    // null, then:
	    if (inputOrInitBody != null && inputOrInitBody.source == null) {
	      // 1. If initBody is non-null and init["duplex"] does not exist,
	      //    then throw a TypeError.
	      if (initBody != null && init.duplex == null) {
	        throw new TypeError('RequestInit: duplex option is required when sending a body.')
	      }

	      // 2. If this’s request’s mode is neither "same-origin" nor "cors",
	      // then throw a TypeError.
	      if (request.mode !== 'same-origin' && request.mode !== 'cors') {
	        throw new TypeError(
	          'If request is made from ReadableStream, mode should be "same-origin" or "cors"'
	        )
	      }

	      // 3. Set this’s request’s use-CORS-preflight flag.
	      request.useCORSPreflightFlag = true;
	    }

	    // 39. Let finalBody be inputOrInitBody.
	    let finalBody = inputOrInitBody;

	    // 40. If initBody is null and inputBody is non-null, then:
	    if (initBody == null && inputBody != null) {
	      // 1. If input is unusable, then throw a TypeError.
	      if (bodyUnusable(input)) {
	        throw new TypeError(
	          'Cannot construct a Request with a Request object that has already been used.'
	        )
	      }

	      // 2. Set finalBody to the result of creating a proxy for inputBody.
	      // https://streams.spec.whatwg.org/#readablestream-create-a-proxy
	      const identityTransform = new TransformStream();
	      inputBody.stream.pipeThrough(identityTransform);
	      finalBody = {
	        source: inputBody.source,
	        length: inputBody.length,
	        stream: identityTransform.readable
	      };
	    }

	    // 41. Set this’s request’s body to finalBody.
	    this[kState].body = finalBody;
	  }

	  // Returns request’s HTTP method, which is "GET" by default.
	  get method () {
	    webidl.brandCheck(this, Request);

	    // The method getter steps are to return this’s request’s method.
	    return this[kState].method
	  }

	  // Returns the URL of request as a string.
	  get url () {
	    webidl.brandCheck(this, Request);

	    // The url getter steps are to return this’s request’s URL, serialized.
	    return URLSerializer(this[kState].url)
	  }

	  // Returns a Headers object consisting of the headers associated with request.
	  // Note that headers added in the network layer by the user agent will not
	  // be accounted for in this object, e.g., the "Host" header.
	  get headers () {
	    webidl.brandCheck(this, Request);

	    // The headers getter steps are to return this’s headers.
	    return this[kHeaders]
	  }

	  // Returns the kind of resource requested by request, e.g., "document"
	  // or "script".
	  get destination () {
	    webidl.brandCheck(this, Request);

	    // The destination getter are to return this’s request’s destination.
	    return this[kState].destination
	  }

	  // Returns the referrer of request. Its value can be a same-origin URL if
	  // explicitly set in init, the empty string to indicate no referrer, and
	  // "about:client" when defaulting to the global’s default. This is used
	  // during fetching to determine the value of the `Referer` header of the
	  // request being made.
	  get referrer () {
	    webidl.brandCheck(this, Request);

	    // 1. If this’s request’s referrer is "no-referrer", then return the
	    // empty string.
	    if (this[kState].referrer === 'no-referrer') {
	      return ''
	    }

	    // 2. If this’s request’s referrer is "client", then return
	    // "about:client".
	    if (this[kState].referrer === 'client') {
	      return 'about:client'
	    }

	    // Return this’s request’s referrer, serialized.
	    return this[kState].referrer.toString()
	  }

	  // Returns the referrer policy associated with request.
	  // This is used during fetching to compute the value of the request’s
	  // referrer.
	  get referrerPolicy () {
	    webidl.brandCheck(this, Request);

	    // The referrerPolicy getter steps are to return this’s request’s referrer policy.
	    return this[kState].referrerPolicy
	  }

	  // Returns the mode associated with request, which is a string indicating
	  // whether the request will use CORS, or will be restricted to same-origin
	  // URLs.
	  get mode () {
	    webidl.brandCheck(this, Request);

	    // The mode getter steps are to return this’s request’s mode.
	    return this[kState].mode
	  }

	  // Returns the credentials mode associated with request,
	  // which is a string indicating whether credentials will be sent with the
	  // request always, never, or only when sent to a same-origin URL.
	  get credentials () {
	    // The credentials getter steps are to return this’s request’s credentials mode.
	    return this[kState].credentials
	  }

	  // Returns the cache mode associated with request,
	  // which is a string indicating how the request will
	  // interact with the browser’s cache when fetching.
	  get cache () {
	    webidl.brandCheck(this, Request);

	    // The cache getter steps are to return this’s request’s cache mode.
	    return this[kState].cache
	  }

	  // Returns the redirect mode associated with request,
	  // which is a string indicating how redirects for the
	  // request will be handled during fetching. A request
	  // will follow redirects by default.
	  get redirect () {
	    webidl.brandCheck(this, Request);

	    // The redirect getter steps are to return this’s request’s redirect mode.
	    return this[kState].redirect
	  }

	  // Returns request’s subresource integrity metadata, which is a
	  // cryptographic hash of the resource being fetched. Its value
	  // consists of multiple hashes separated by whitespace. [SRI]
	  get integrity () {
	    webidl.brandCheck(this, Request);

	    // The integrity getter steps are to return this’s request’s integrity
	    // metadata.
	    return this[kState].integrity
	  }

	  // Returns a boolean indicating whether or not request can outlive the
	  // global in which it was created.
	  get keepalive () {
	    webidl.brandCheck(this, Request);

	    // The keepalive getter steps are to return this’s request’s keepalive.
	    return this[kState].keepalive
	  }

	  // Returns a boolean indicating whether or not request is for a reload
	  // navigation.
	  get isReloadNavigation () {
	    webidl.brandCheck(this, Request);

	    // The isReloadNavigation getter steps are to return true if this’s
	    // request’s reload-navigation flag is set; otherwise false.
	    return this[kState].reloadNavigation
	  }

	  // Returns a boolean indicating whether or not request is for a history
	  // navigation (a.k.a. back-forward navigation).
	  get isHistoryNavigation () {
	    webidl.brandCheck(this, Request);

	    // The isHistoryNavigation getter steps are to return true if this’s request’s
	    // history-navigation flag is set; otherwise false.
	    return this[kState].historyNavigation
	  }

	  // Returns the signal associated with request, which is an AbortSignal
	  // object indicating whether or not request has been aborted, and its
	  // abort event handler.
	  get signal () {
	    webidl.brandCheck(this, Request);

	    // The signal getter steps are to return this’s signal.
	    return this[kSignal]
	  }

	  get body () {
	    webidl.brandCheck(this, Request);

	    return this[kState].body ? this[kState].body.stream : null
	  }

	  get bodyUsed () {
	    webidl.brandCheck(this, Request);

	    return !!this[kState].body && util.isDisturbed(this[kState].body.stream)
	  }

	  get duplex () {
	    webidl.brandCheck(this, Request);

	    return 'half'
	  }

	  // Returns a clone of request.
	  clone () {
	    webidl.brandCheck(this, Request);

	    // 1. If this is unusable, then throw a TypeError.
	    if (bodyUnusable(this)) {
	      throw new TypeError('unusable')
	    }

	    // 2. Let clonedRequest be the result of cloning this’s request.
	    const clonedRequest = cloneRequest(this[kState]);

	    // 3. Let clonedRequestObject be the result of creating a Request object,
	    // given clonedRequest, this’s headers’s guard, and this’s relevant Realm.
	    // 4. Make clonedRequestObject’s signal follow this’s signal.
	    const ac = new AbortController();
	    if (this.signal.aborted) {
	      ac.abort(this.signal.reason);
	    } else {
	      let list = dependentControllerMap.get(this.signal);
	      if (list === undefined) {
	        list = new Set();
	        dependentControllerMap.set(this.signal, list);
	      }
	      const acRef = new WeakRef(ac);
	      list.add(acRef);
	      util.addAbortListener(
	        ac.signal,
	        buildAbort(acRef)
	      );
	    }

	    // 4. Return clonedRequestObject.
	    return fromInnerRequest(clonedRequest, ac.signal, getHeadersGuard(this[kHeaders]))
	  }

	  [nodeUtil.inspect.custom] (depth, options) {
	    if (options.depth === null) {
	      options.depth = 2;
	    }

	    options.colors ??= true;

	    const properties = {
	      method: this.method,
	      url: this.url,
	      headers: this.headers,
	      destination: this.destination,
	      referrer: this.referrer,
	      referrerPolicy: this.referrerPolicy,
	      mode: this.mode,
	      credentials: this.credentials,
	      cache: this.cache,
	      redirect: this.redirect,
	      integrity: this.integrity,
	      keepalive: this.keepalive,
	      isReloadNavigation: this.isReloadNavigation,
	      isHistoryNavigation: this.isHistoryNavigation,
	      signal: this.signal
	    };

	    return `Request ${nodeUtil.formatWithOptions(options, properties)}`
	  }
	}

	mixinBody(Request);

	// https://fetch.spec.whatwg.org/#requests
	function makeRequest (init) {
	  return {
	    method: init.method ?? 'GET',
	    localURLsOnly: init.localURLsOnly ?? false,
	    unsafeRequest: init.unsafeRequest ?? false,
	    body: init.body ?? null,
	    client: init.client ?? null,
	    reservedClient: init.reservedClient ?? null,
	    replacesClientId: init.replacesClientId ?? '',
	    window: init.window ?? 'client',
	    keepalive: init.keepalive ?? false,
	    serviceWorkers: init.serviceWorkers ?? 'all',
	    initiator: init.initiator ?? '',
	    destination: init.destination ?? '',
	    priority: init.priority ?? null,
	    origin: init.origin ?? 'client',
	    policyContainer: init.policyContainer ?? 'client',
	    referrer: init.referrer ?? 'client',
	    referrerPolicy: init.referrerPolicy ?? '',
	    mode: init.mode ?? 'no-cors',
	    useCORSPreflightFlag: init.useCORSPreflightFlag ?? false,
	    credentials: init.credentials ?? 'same-origin',
	    useCredentials: init.useCredentials ?? false,
	    cache: init.cache ?? 'default',
	    redirect: init.redirect ?? 'follow',
	    integrity: init.integrity ?? '',
	    cryptoGraphicsNonceMetadata: init.cryptoGraphicsNonceMetadata ?? '',
	    parserMetadata: init.parserMetadata ?? '',
	    reloadNavigation: init.reloadNavigation ?? false,
	    historyNavigation: init.historyNavigation ?? false,
	    userActivation: init.userActivation ?? false,
	    taintedOrigin: init.taintedOrigin ?? false,
	    redirectCount: init.redirectCount ?? 0,
	    responseTainting: init.responseTainting ?? 'basic',
	    preventNoCacheCacheControlHeaderModification: init.preventNoCacheCacheControlHeaderModification ?? false,
	    done: init.done ?? false,
	    timingAllowFailed: init.timingAllowFailed ?? false,
	    urlList: init.urlList,
	    url: init.urlList[0],
	    headersList: init.headersList
	      ? new HeadersList(init.headersList)
	      : new HeadersList()
	  }
	}

	// https://fetch.spec.whatwg.org/#concept-request-clone
	function cloneRequest (request) {
	  // To clone a request request, run these steps:

	  // 1. Let newRequest be a copy of request, except for its body.
	  const newRequest = makeRequest({ ...request, body: null });

	  // 2. If request’s body is non-null, set newRequest’s body to the
	  // result of cloning request’s body.
	  if (request.body != null) {
	    newRequest.body = cloneBody(newRequest, request.body);
	  }

	  // 3. Return newRequest.
	  return newRequest
	}

	/**
	 * @see https://fetch.spec.whatwg.org/#request-create
	 * @param {any} innerRequest
	 * @param {AbortSignal} signal
	 * @param {'request' | 'immutable' | 'request-no-cors' | 'response' | 'none'} guard
	 * @returns {Request}
	 */
	function fromInnerRequest (innerRequest, signal, guard) {
	  const request = new Request(kConstruct);
	  request[kState] = innerRequest;
	  request[kSignal] = signal;
	  request[kHeaders] = new Headers(kConstruct);
	  setHeadersList(request[kHeaders], innerRequest.headersList);
	  setHeadersGuard(request[kHeaders], guard);
	  return request
	}

	Object.defineProperties(Request.prototype, {
	  method: kEnumerableProperty,
	  url: kEnumerableProperty,
	  headers: kEnumerableProperty,
	  redirect: kEnumerableProperty,
	  clone: kEnumerableProperty,
	  signal: kEnumerableProperty,
	  duplex: kEnumerableProperty,
	  destination: kEnumerableProperty,
	  body: kEnumerableProperty,
	  bodyUsed: kEnumerableProperty,
	  isHistoryNavigation: kEnumerableProperty,
	  isReloadNavigation: kEnumerableProperty,
	  keepalive: kEnumerableProperty,
	  integrity: kEnumerableProperty,
	  cache: kEnumerableProperty,
	  credentials: kEnumerableProperty,
	  attribute: kEnumerableProperty,
	  referrerPolicy: kEnumerableProperty,
	  referrer: kEnumerableProperty,
	  mode: kEnumerableProperty,
	  [Symbol.toStringTag]: {
	    value: 'Request',
	    configurable: true
	  }
	});

	webidl.converters.Request = webidl.interfaceConverter(
	  Request
	);

	// https://fetch.spec.whatwg.org/#requestinfo
	webidl.converters.RequestInfo = function (V, prefix, argument) {
	  if (typeof V === 'string') {
	    return webidl.converters.USVString(V, prefix, argument)
	  }

	  if (V instanceof Request) {
	    return webidl.converters.Request(V, prefix, argument)
	  }

	  return webidl.converters.USVString(V, prefix, argument)
	};

	webidl.converters.AbortSignal = webidl.interfaceConverter(
	  AbortSignal
	);

	// https://fetch.spec.whatwg.org/#requestinit
	webidl.converters.RequestInit = webidl.dictionaryConverter([
	  {
	    key: 'method',
	    converter: webidl.converters.ByteString
	  },
	  {
	    key: 'headers',
	    converter: webidl.converters.HeadersInit
	  },
	  {
	    key: 'body',
	    converter: webidl.nullableConverter(
	      webidl.converters.BodyInit
	    )
	  },
	  {
	    key: 'referrer',
	    converter: webidl.converters.USVString
	  },
	  {
	    key: 'referrerPolicy',
	    converter: webidl.converters.DOMString,
	    // https://w3c.github.io/webappsec-referrer-policy/#referrer-policy
	    allowedValues: referrerPolicy
	  },
	  {
	    key: 'mode',
	    converter: webidl.converters.DOMString,
	    // https://fetch.spec.whatwg.org/#concept-request-mode
	    allowedValues: requestMode
	  },
	  {
	    key: 'credentials',
	    converter: webidl.converters.DOMString,
	    // https://fetch.spec.whatwg.org/#requestcredentials
	    allowedValues: requestCredentials
	  },
	  {
	    key: 'cache',
	    converter: webidl.converters.DOMString,
	    // https://fetch.spec.whatwg.org/#requestcache
	    allowedValues: requestCache
	  },
	  {
	    key: 'redirect',
	    converter: webidl.converters.DOMString,
	    // https://fetch.spec.whatwg.org/#requestredirect
	    allowedValues: requestRedirect
	  },
	  {
	    key: 'integrity',
	    converter: webidl.converters.DOMString
	  },
	  {
	    key: 'keepalive',
	    converter: webidl.converters.boolean
	  },
	  {
	    key: 'signal',
	    converter: webidl.nullableConverter(
	      (signal) => webidl.converters.AbortSignal(
	        signal,
	        'RequestInit',
	        'signal',
	        { strict: false }
	      )
	    )
	  },
	  {
	    key: 'window',
	    converter: webidl.converters.any
	  },
	  {
	    key: 'duplex',
	    converter: webidl.converters.DOMString,
	    allowedValues: requestDuplex
	  },
	  {
	    key: 'dispatcher', // undici specific option
	    converter: webidl.converters.any
	  }
	]);

	request = { Request, makeRequest, fromInnerRequest, cloneRequest };
	return request;
}

var fetch_1;
var hasRequiredFetch;

function requireFetch () {
	if (hasRequiredFetch) return fetch_1;
	hasRequiredFetch = 1;

	const {
	  makeNetworkError,
	  makeAppropriateNetworkError,
	  filterResponse,
	  makeResponse,
	  fromInnerResponse
	} = requireResponse();
	const { HeadersList } = requireHeaders();
	const { Request, cloneRequest } = requireRequest();
	const zlib = require$$1$8;
	const {
	  bytesMatch,
	  makePolicyContainer,
	  clonePolicyContainer,
	  requestBadPort,
	  TAOCheck,
	  appendRequestOriginHeader,
	  responseLocationURL,
	  requestCurrentURL,
	  setRequestReferrerPolicyOnRedirect,
	  tryUpgradeRequestToAPotentiallyTrustworthyURL,
	  createOpaqueTimingInfo,
	  appendFetchMetadata,
	  corsCheck,
	  crossOriginResourcePolicyCheck,
	  determineRequestsReferrer,
	  coarsenedSharedCurrentTime,
	  createDeferredPromise,
	  isBlobLike,
	  sameOrigin,
	  isCancelled,
	  isAborted,
	  isErrorLike,
	  fullyReadBody,
	  readableStreamClose,
	  isomorphicEncode,
	  urlIsLocal,
	  urlIsHttpHttpsScheme,
	  urlHasHttpsScheme,
	  clampAndCoarsenConnectionTimingInfo,
	  simpleRangeHeaderValue,
	  buildContentRange,
	  createInflate,
	  extractMimeType
	} = requireUtil$7();
	const { kState, kDispatcher } = requireSymbols$4();
	const assert = require$$0$7;
	const { safelyExtractBody, extractBody } = requireBody();
	const {
	  redirectStatusSet,
	  nullBodyStatus,
	  safeMethodsSet,
	  requestBodyHeader,
	  subresourceSet
	} = requireConstants$4();
	const EE = require$$0$b;
	const { Readable, pipeline, finished } = require$$0$8;
	const { addAbortListener, isErrored, isReadable, bufferToLowerCasedHeaderName } = requireUtil$8();
	const { dataURLProcessor, serializeAMimeType, minimizeSupportedMimeType } = requireDataUrl();
	const { getGlobalDispatcher } = requireGlobal();
	const { webidl } = requireWebidl();
	const { STATUS_CODES } = require$$2$3;
	const GET_OR_HEAD = ['GET', 'HEAD'];

	const defaultUserAgent = typeof __UNDICI_IS_NODE__ !== 'undefined' || typeof esbuildDetection !== 'undefined'
	  ? 'node'
	  : 'undici';

	/** @type {import('buffer').resolveObjectURL} */
	let resolveObjectURL;

	class Fetch extends EE {
	  constructor (dispatcher) {
	    super();

	    this.dispatcher = dispatcher;
	    this.connection = null;
	    this.dump = false;
	    this.state = 'ongoing';
	  }

	  terminate (reason) {
	    if (this.state !== 'ongoing') {
	      return
	    }

	    this.state = 'terminated';
	    this.connection?.destroy(reason);
	    this.emit('terminated', reason);
	  }

	  // https://fetch.spec.whatwg.org/#fetch-controller-abort
	  abort (error) {
	    if (this.state !== 'ongoing') {
	      return
	    }

	    // 1. Set controller’s state to "aborted".
	    this.state = 'aborted';

	    // 2. Let fallbackError be an "AbortError" DOMException.
	    // 3. Set error to fallbackError if it is not given.
	    if (!error) {
	      error = new DOMException('The operation was aborted.', 'AbortError');
	    }

	    // 4. Let serializedError be StructuredSerialize(error).
	    //    If that threw an exception, catch it, and let
	    //    serializedError be StructuredSerialize(fallbackError).

	    // 5. Set controller’s serialized abort reason to serializedError.
	    this.serializedAbortReason = error;

	    this.connection?.destroy(error);
	    this.emit('terminated', error);
	  }
	}

	function handleFetchDone (response) {
	  finalizeAndReportTiming(response, 'fetch');
	}

	// https://fetch.spec.whatwg.org/#fetch-method
	function fetch (input, init = undefined) {
	  webidl.argumentLengthCheck(arguments, 1, 'globalThis.fetch');

	  // 1. Let p be a new promise.
	  let p = createDeferredPromise();

	  // 2. Let requestObject be the result of invoking the initial value of
	  // Request as constructor with input and init as arguments. If this throws
	  // an exception, reject p with it and return p.
	  let requestObject;

	  try {
	    requestObject = new Request(input, init);
	  } catch (e) {
	    p.reject(e);
	    return p.promise
	  }

	  // 3. Let request be requestObject’s request.
	  const request = requestObject[kState];

	  // 4. If requestObject’s signal’s aborted flag is set, then:
	  if (requestObject.signal.aborted) {
	    // 1. Abort the fetch() call with p, request, null, and
	    //    requestObject’s signal’s abort reason.
	    abortFetch(p, request, null, requestObject.signal.reason);

	    // 2. Return p.
	    return p.promise
	  }

	  // 5. Let globalObject be request’s client’s global object.
	  const globalObject = request.client.globalObject;

	  // 6. If globalObject is a ServiceWorkerGlobalScope object, then set
	  // request’s service-workers mode to "none".
	  if (globalObject?.constructor?.name === 'ServiceWorkerGlobalScope') {
	    request.serviceWorkers = 'none';
	  }

	  // 7. Let responseObject be null.
	  let responseObject = null;

	  // 8. Let relevantRealm be this’s relevant Realm.

	  // 9. Let locallyAborted be false.
	  let locallyAborted = false;

	  // 10. Let controller be null.
	  let controller = null;

	  // 11. Add the following abort steps to requestObject’s signal:
	  addAbortListener(
	    requestObject.signal,
	    () => {
	      // 1. Set locallyAborted to true.
	      locallyAborted = true;

	      // 2. Assert: controller is non-null.
	      assert(controller != null);

	      // 3. Abort controller with requestObject’s signal’s abort reason.
	      controller.abort(requestObject.signal.reason);

	      const realResponse = responseObject?.deref();

	      // 4. Abort the fetch() call with p, request, responseObject,
	      //    and requestObject’s signal’s abort reason.
	      abortFetch(p, request, realResponse, requestObject.signal.reason);
	    }
	  );

	  // 12. Let handleFetchDone given response response be to finalize and
	  // report timing with response, globalObject, and "fetch".
	  // see function handleFetchDone

	  // 13. Set controller to the result of calling fetch given request,
	  // with processResponseEndOfBody set to handleFetchDone, and processResponse
	  // given response being these substeps:

	  const processResponse = (response) => {
	    // 1. If locallyAborted is true, terminate these substeps.
	    if (locallyAborted) {
	      return
	    }

	    // 2. If response’s aborted flag is set, then:
	    if (response.aborted) {
	      // 1. Let deserializedError be the result of deserialize a serialized
	      //    abort reason given controller’s serialized abort reason and
	      //    relevantRealm.

	      // 2. Abort the fetch() call with p, request, responseObject, and
	      //    deserializedError.

	      abortFetch(p, request, responseObject, controller.serializedAbortReason);
	      return
	    }

	    // 3. If response is a network error, then reject p with a TypeError
	    // and terminate these substeps.
	    if (response.type === 'error') {
	      p.reject(new TypeError('fetch failed', { cause: response.error }));
	      return
	    }

	    // 4. Set responseObject to the result of creating a Response object,
	    // given response, "immutable", and relevantRealm.
	    responseObject = new WeakRef(fromInnerResponse(response, 'immutable'));

	    // 5. Resolve p with responseObject.
	    p.resolve(responseObject.deref());
	    p = null;
	  };

	  controller = fetching({
	    request,
	    processResponseEndOfBody: handleFetchDone,
	    processResponse,
	    dispatcher: requestObject[kDispatcher] // undici
	  });

	  // 14. Return p.
	  return p.promise
	}

	// https://fetch.spec.whatwg.org/#finalize-and-report-timing
	function finalizeAndReportTiming (response, initiatorType = 'other') {
	  // 1. If response is an aborted network error, then return.
	  if (response.type === 'error' && response.aborted) {
	    return
	  }

	  // 2. If response’s URL list is null or empty, then return.
	  if (!response.urlList?.length) {
	    return
	  }

	  // 3. Let originalURL be response’s URL list[0].
	  const originalURL = response.urlList[0];

	  // 4. Let timingInfo be response’s timing info.
	  let timingInfo = response.timingInfo;

	  // 5. Let cacheState be response’s cache state.
	  let cacheState = response.cacheState;

	  // 6. If originalURL’s scheme is not an HTTP(S) scheme, then return.
	  if (!urlIsHttpHttpsScheme(originalURL)) {
	    return
	  }

	  // 7. If timingInfo is null, then return.
	  if (timingInfo === null) {
	    return
	  }

	  // 8. If response’s timing allow passed flag is not set, then:
	  if (!response.timingAllowPassed) {
	    //  1. Set timingInfo to a the result of creating an opaque timing info for timingInfo.
	    timingInfo = createOpaqueTimingInfo({
	      startTime: timingInfo.startTime
	    });

	    //  2. Set cacheState to the empty string.
	    cacheState = '';
	  }

	  // 9. Set timingInfo’s end time to the coarsened shared current time
	  // given global’s relevant settings object’s cross-origin isolated
	  // capability.
	  // TODO: given global’s relevant settings object’s cross-origin isolated
	  // capability?
	  timingInfo.endTime = coarsenedSharedCurrentTime();

	  // 10. Set response’s timing info to timingInfo.
	  response.timingInfo = timingInfo;

	  // 11. Mark resource timing for timingInfo, originalURL, initiatorType,
	  // global, and cacheState.
	  markResourceTiming(
	    timingInfo,
	    originalURL.href,
	    initiatorType,
	    globalThis,
	    cacheState
	  );
	}

	// https://w3c.github.io/resource-timing/#dfn-mark-resource-timing
	const markResourceTiming = performance.markResourceTiming;

	// https://fetch.spec.whatwg.org/#abort-fetch
	function abortFetch (p, request, responseObject, error) {
	  // 1. Reject promise with error.
	  if (p) {
	    // We might have already resolved the promise at this stage
	    p.reject(error);
	  }

	  // 2. If request’s body is not null and is readable, then cancel request’s
	  // body with error.
	  if (request.body != null && isReadable(request.body?.stream)) {
	    request.body.stream.cancel(error).catch((err) => {
	      if (err.code === 'ERR_INVALID_STATE') {
	        // Node bug?
	        return
	      }
	      throw err
	    });
	  }

	  // 3. If responseObject is null, then return.
	  if (responseObject == null) {
	    return
	  }

	  // 4. Let response be responseObject’s response.
	  const response = responseObject[kState];

	  // 5. If response’s body is not null and is readable, then error response’s
	  // body with error.
	  if (response.body != null && isReadable(response.body?.stream)) {
	    response.body.stream.cancel(error).catch((err) => {
	      if (err.code === 'ERR_INVALID_STATE') {
	        // Node bug?
	        return
	      }
	      throw err
	    });
	  }
	}

	// https://fetch.spec.whatwg.org/#fetching
	function fetching ({
	  request,
	  processRequestBodyChunkLength,
	  processRequestEndOfBody,
	  processResponse,
	  processResponseEndOfBody,
	  processResponseConsumeBody,
	  useParallelQueue = false,
	  dispatcher = getGlobalDispatcher() // undici
	}) {
	  // Ensure that the dispatcher is set accordingly
	  assert(dispatcher);

	  // 1. Let taskDestination be null.
	  let taskDestination = null;

	  // 2. Let crossOriginIsolatedCapability be false.
	  let crossOriginIsolatedCapability = false;

	  // 3. If request’s client is non-null, then:
	  if (request.client != null) {
	    // 1. Set taskDestination to request’s client’s global object.
	    taskDestination = request.client.globalObject;

	    // 2. Set crossOriginIsolatedCapability to request’s client’s cross-origin
	    // isolated capability.
	    crossOriginIsolatedCapability =
	      request.client.crossOriginIsolatedCapability;
	  }

	  // 4. If useParallelQueue is true, then set taskDestination to the result of
	  // starting a new parallel queue.
	  // TODO

	  // 5. Let timingInfo be a new fetch timing info whose start time and
	  // post-redirect start time are the coarsened shared current time given
	  // crossOriginIsolatedCapability.
	  const currentTime = coarsenedSharedCurrentTime(crossOriginIsolatedCapability);
	  const timingInfo = createOpaqueTimingInfo({
	    startTime: currentTime
	  });

	  // 6. Let fetchParams be a new fetch params whose
	  // request is request,
	  // timing info is timingInfo,
	  // process request body chunk length is processRequestBodyChunkLength,
	  // process request end-of-body is processRequestEndOfBody,
	  // process response is processResponse,
	  // process response consume body is processResponseConsumeBody,
	  // process response end-of-body is processResponseEndOfBody,
	  // task destination is taskDestination,
	  // and cross-origin isolated capability is crossOriginIsolatedCapability.
	  const fetchParams = {
	    controller: new Fetch(dispatcher),
	    request,
	    timingInfo,
	    processRequestBodyChunkLength,
	    processRequestEndOfBody,
	    processResponse,
	    processResponseConsumeBody,
	    processResponseEndOfBody,
	    taskDestination,
	    crossOriginIsolatedCapability
	  };

	  // 7. If request’s body is a byte sequence, then set request’s body to
	  //    request’s body as a body.
	  // NOTE: Since fetching is only called from fetch, body should already be
	  // extracted.
	  assert(!request.body || request.body.stream);

	  // 8. If request’s window is "client", then set request’s window to request’s
	  // client, if request’s client’s global object is a Window object; otherwise
	  // "no-window".
	  if (request.window === 'client') {
	    // TODO: What if request.client is null?
	    request.window =
	      request.client?.globalObject?.constructor?.name === 'Window'
	        ? request.client
	        : 'no-window';
	  }

	  // 9. If request’s origin is "client", then set request’s origin to request’s
	  // client’s origin.
	  if (request.origin === 'client') {
	    request.origin = request.client.origin;
	  }

	  // 10. If all of the following conditions are true:
	  // TODO

	  // 11. If request’s policy container is "client", then:
	  if (request.policyContainer === 'client') {
	    // 1. If request’s client is non-null, then set request’s policy
	    // container to a clone of request’s client’s policy container. [HTML]
	    if (request.client != null) {
	      request.policyContainer = clonePolicyContainer(
	        request.client.policyContainer
	      );
	    } else {
	      // 2. Otherwise, set request’s policy container to a new policy
	      // container.
	      request.policyContainer = makePolicyContainer();
	    }
	  }

	  // 12. If request’s header list does not contain `Accept`, then:
	  if (!request.headersList.contains('accept', true)) {
	    // 1. Let value be `*/*`.
	    const value = '*/*';

	    // 2. A user agent should set value to the first matching statement, if
	    // any, switching on request’s destination:
	    // "document"
	    // "frame"
	    // "iframe"
	    // `text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8`
	    // "image"
	    // `image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5`
	    // "style"
	    // `text/css,*/*;q=0.1`
	    // TODO

	    // 3. Append `Accept`/value to request’s header list.
	    request.headersList.append('accept', value, true);
	  }

	  // 13. If request’s header list does not contain `Accept-Language`, then
	  // user agents should append `Accept-Language`/an appropriate value to
	  // request’s header list.
	  if (!request.headersList.contains('accept-language', true)) {
	    request.headersList.append('accept-language', '*', true);
	  }

	  // 14. If request’s priority is null, then use request’s initiator and
	  // destination appropriately in setting request’s priority to a
	  // user-agent-defined object.
	  if (request.priority === null) ;

	  // 15. If request is a subresource request, then:
	  if (subresourceSet.has(request.destination)) ;

	  // 16. Run main fetch given fetchParams.
	  mainFetch(fetchParams)
	    .catch(err => {
	      fetchParams.controller.terminate(err);
	    });

	  // 17. Return fetchParam's controller
	  return fetchParams.controller
	}

	// https://fetch.spec.whatwg.org/#concept-main-fetch
	async function mainFetch (fetchParams, recursive = false) {
	  // 1. Let request be fetchParams’s request.
	  const request = fetchParams.request;

	  // 2. Let response be null.
	  let response = null;

	  // 3. If request’s local-URLs-only flag is set and request’s current URL is
	  // not local, then set response to a network error.
	  if (request.localURLsOnly && !urlIsLocal(requestCurrentURL(request))) {
	    response = makeNetworkError('local URLs only');
	  }

	  // 4. Run report Content Security Policy violations for request.
	  // TODO

	  // 5. Upgrade request to a potentially trustworthy URL, if appropriate.
	  tryUpgradeRequestToAPotentiallyTrustworthyURL(request);

	  // 6. If should request be blocked due to a bad port, should fetching request
	  // be blocked as mixed content, or should request be blocked by Content
	  // Security Policy returns blocked, then set response to a network error.
	  if (requestBadPort(request) === 'blocked') {
	    response = makeNetworkError('bad port');
	  }
	  // TODO: should fetching request be blocked as mixed content?
	  // TODO: should request be blocked by Content Security Policy?

	  // 7. If request’s referrer policy is the empty string, then set request’s
	  // referrer policy to request’s policy container’s referrer policy.
	  if (request.referrerPolicy === '') {
	    request.referrerPolicy = request.policyContainer.referrerPolicy;
	  }

	  // 8. If request’s referrer is not "no-referrer", then set request’s
	  // referrer to the result of invoking determine request’s referrer.
	  if (request.referrer !== 'no-referrer') {
	    request.referrer = determineRequestsReferrer(request);
	  }

	  // 9. Set request’s current URL’s scheme to "https" if all of the following
	  // conditions are true:
	  // - request’s current URL’s scheme is "http"
	  // - request’s current URL’s host is a domain
	  // - Matching request’s current URL’s host per Known HSTS Host Domain Name
	  //   Matching results in either a superdomain match with an asserted
	  //   includeSubDomains directive or a congruent match (with or without an
	  //   asserted includeSubDomains directive). [HSTS]
	  // TODO

	  // 10. If recursive is false, then run the remaining steps in parallel.
	  // TODO

	  // 11. If response is null, then set response to the result of running
	  // the steps corresponding to the first matching statement:
	  if (response === null) {
	    response = await (async () => {
	      const currentURL = requestCurrentURL(request);

	      if (
	        // - request’s current URL’s origin is same origin with request’s origin,
	        //   and request’s response tainting is "basic"
	        (sameOrigin(currentURL, request.url) && request.responseTainting === 'basic') ||
	        // request’s current URL’s scheme is "data"
	        (currentURL.protocol === 'data:') ||
	        // - request’s mode is "navigate" or "websocket"
	        (request.mode === 'navigate' || request.mode === 'websocket')
	      ) {
	        // 1. Set request’s response tainting to "basic".
	        request.responseTainting = 'basic';

	        // 2. Return the result of running scheme fetch given fetchParams.
	        return await schemeFetch(fetchParams)
	      }

	      // request’s mode is "same-origin"
	      if (request.mode === 'same-origin') {
	        // 1. Return a network error.
	        return makeNetworkError('request mode cannot be "same-origin"')
	      }

	      // request’s mode is "no-cors"
	      if (request.mode === 'no-cors') {
	        // 1. If request’s redirect mode is not "follow", then return a network
	        // error.
	        if (request.redirect !== 'follow') {
	          return makeNetworkError(
	            'redirect mode cannot be "follow" for "no-cors" request'
	          )
	        }

	        // 2. Set request’s response tainting to "opaque".
	        request.responseTainting = 'opaque';

	        // 3. Return the result of running scheme fetch given fetchParams.
	        return await schemeFetch(fetchParams)
	      }

	      // request’s current URL’s scheme is not an HTTP(S) scheme
	      if (!urlIsHttpHttpsScheme(requestCurrentURL(request))) {
	        // Return a network error.
	        return makeNetworkError('URL scheme must be a HTTP(S) scheme')
	      }

	      // - request’s use-CORS-preflight flag is set
	      // - request’s unsafe-request flag is set and either request’s method is
	      //   not a CORS-safelisted method or CORS-unsafe request-header names with
	      //   request’s header list is not empty
	      //    1. Set request’s response tainting to "cors".
	      //    2. Let corsWithPreflightResponse be the result of running HTTP fetch
	      //    given fetchParams and true.
	      //    3. If corsWithPreflightResponse is a network error, then clear cache
	      //    entries using request.
	      //    4. Return corsWithPreflightResponse.
	      // TODO

	      // Otherwise
	      //    1. Set request’s response tainting to "cors".
	      request.responseTainting = 'cors';

	      //    2. Return the result of running HTTP fetch given fetchParams.
	      return await httpFetch(fetchParams)
	    })();
	  }

	  // 12. If recursive is true, then return response.
	  if (recursive) {
	    return response
	  }

	  // 13. If response is not a network error and response is not a filtered
	  // response, then:
	  if (response.status !== 0 && !response.internalResponse) {
	    // If request’s response tainting is "cors", then:
	    if (request.responseTainting === 'cors') ;

	    // Set response to the following filtered response with response as its
	    // internal response, depending on request’s response tainting:
	    if (request.responseTainting === 'basic') {
	      response = filterResponse(response, 'basic');
	    } else if (request.responseTainting === 'cors') {
	      response = filterResponse(response, 'cors');
	    } else if (request.responseTainting === 'opaque') {
	      response = filterResponse(response, 'opaque');
	    } else {
	      assert(false);
	    }
	  }

	  // 14. Let internalResponse be response, if response is a network error,
	  // and response’s internal response otherwise.
	  let internalResponse =
	    response.status === 0 ? response : response.internalResponse;

	  // 15. If internalResponse’s URL list is empty, then set it to a clone of
	  // request’s URL list.
	  if (internalResponse.urlList.length === 0) {
	    internalResponse.urlList.push(...request.urlList);
	  }

	  // 16. If request’s timing allow failed flag is unset, then set
	  // internalResponse’s timing allow passed flag.
	  if (!request.timingAllowFailed) {
	    response.timingAllowPassed = true;
	  }

	  // 17. If response is not a network error and any of the following returns
	  // blocked
	  // - should internalResponse to request be blocked as mixed content
	  // - should internalResponse to request be blocked by Content Security Policy
	  // - should internalResponse to request be blocked due to its MIME type
	  // - should internalResponse to request be blocked due to nosniff
	  // TODO

	  // 18. If response’s type is "opaque", internalResponse’s status is 206,
	  // internalResponse’s range-requested flag is set, and request’s header
	  // list does not contain `Range`, then set response and internalResponse
	  // to a network error.
	  if (
	    response.type === 'opaque' &&
	    internalResponse.status === 206 &&
	    internalResponse.rangeRequested &&
	    !request.headers.contains('range', true)
	  ) {
	    response = internalResponse = makeNetworkError();
	  }

	  // 19. If response is not a network error and either request’s method is
	  // `HEAD` or `CONNECT`, or internalResponse’s status is a null body status,
	  // set internalResponse’s body to null and disregard any enqueuing toward
	  // it (if any).
	  if (
	    response.status !== 0 &&
	    (request.method === 'HEAD' ||
	      request.method === 'CONNECT' ||
	      nullBodyStatus.includes(internalResponse.status))
	  ) {
	    internalResponse.body = null;
	    fetchParams.controller.dump = true;
	  }

	  // 20. If request’s integrity metadata is not the empty string, then:
	  if (request.integrity) {
	    // 1. Let processBodyError be this step: run fetch finale given fetchParams
	    // and a network error.
	    const processBodyError = (reason) =>
	      fetchFinale(fetchParams, makeNetworkError(reason));

	    // 2. If request’s response tainting is "opaque", or response’s body is null,
	    // then run processBodyError and abort these steps.
	    if (request.responseTainting === 'opaque' || response.body == null) {
	      processBodyError(response.error);
	      return
	    }

	    // 3. Let processBody given bytes be these steps:
	    const processBody = (bytes) => {
	      // 1. If bytes do not match request’s integrity metadata,
	      // then run processBodyError and abort these steps. [SRI]
	      if (!bytesMatch(bytes, request.integrity)) {
	        processBodyError('integrity mismatch');
	        return
	      }

	      // 2. Set response’s body to bytes as a body.
	      response.body = safelyExtractBody(bytes)[0];

	      // 3. Run fetch finale given fetchParams and response.
	      fetchFinale(fetchParams, response);
	    };

	    // 4. Fully read response’s body given processBody and processBodyError.
	    await fullyReadBody(response.body, processBody, processBodyError);
	  } else {
	    // 21. Otherwise, run fetch finale given fetchParams and response.
	    fetchFinale(fetchParams, response);
	  }
	}

	// https://fetch.spec.whatwg.org/#concept-scheme-fetch
	// given a fetch params fetchParams
	function schemeFetch (fetchParams) {
	  // Note: since the connection is destroyed on redirect, which sets fetchParams to a
	  // cancelled state, we do not want this condition to trigger *unless* there have been
	  // no redirects. See https://github.com/nodejs/undici/issues/1776
	  // 1. If fetchParams is canceled, then return the appropriate network error for fetchParams.
	  if (isCancelled(fetchParams) && fetchParams.request.redirectCount === 0) {
	    return Promise.resolve(makeAppropriateNetworkError(fetchParams))
	  }

	  // 2. Let request be fetchParams’s request.
	  const { request } = fetchParams;

	  const { protocol: scheme } = requestCurrentURL(request);

	  // 3. Switch on request’s current URL’s scheme and run the associated steps:
	  switch (scheme) {
	    case 'about:': {
	      // If request’s current URL’s path is the string "blank", then return a new response
	      // whose status message is `OK`, header list is « (`Content-Type`, `text/html;charset=utf-8`) »,
	      // and body is the empty byte sequence as a body.

	      // Otherwise, return a network error.
	      return Promise.resolve(makeNetworkError('about scheme is not supported'))
	    }
	    case 'blob:': {
	      if (!resolveObjectURL) {
	        resolveObjectURL = require$$0$9.resolveObjectURL;
	      }

	      // 1. Let blobURLEntry be request’s current URL’s blob URL entry.
	      const blobURLEntry = requestCurrentURL(request);

	      // https://github.com/web-platform-tests/wpt/blob/7b0ebaccc62b566a1965396e5be7bb2bc06f841f/FileAPI/url/resources/fetch-tests.js#L52-L56
	      // Buffer.resolveObjectURL does not ignore URL queries.
	      if (blobURLEntry.search.length !== 0) {
	        return Promise.resolve(makeNetworkError('NetworkError when attempting to fetch resource.'))
	      }

	      const blob = resolveObjectURL(blobURLEntry.toString());

	      // 2. If request’s method is not `GET`, blobURLEntry is null, or blobURLEntry’s
	      //    object is not a Blob object, then return a network error.
	      if (request.method !== 'GET' || !isBlobLike(blob)) {
	        return Promise.resolve(makeNetworkError('invalid method'))
	      }

	      // 3. Let blob be blobURLEntry’s object.
	      // Note: done above

	      // 4. Let response be a new response.
	      const response = makeResponse();

	      // 5. Let fullLength be blob’s size.
	      const fullLength = blob.size;

	      // 6. Let serializedFullLength be fullLength, serialized and isomorphic encoded.
	      const serializedFullLength = isomorphicEncode(`${fullLength}`);

	      // 7. Let type be blob’s type.
	      const type = blob.type;

	      // 8. If request’s header list does not contain `Range`:
	      // 9. Otherwise:
	      if (!request.headersList.contains('range', true)) {
	        // 1. Let bodyWithType be the result of safely extracting blob.
	        // Note: in the FileAPI a blob "object" is a Blob *or* a MediaSource.
	        // In node, this can only ever be a Blob. Therefore we can safely
	        // use extractBody directly.
	        const bodyWithType = extractBody(blob);

	        // 2. Set response’s status message to `OK`.
	        response.statusText = 'OK';

	        // 3. Set response’s body to bodyWithType’s body.
	        response.body = bodyWithType[0];

	        // 4. Set response’s header list to « (`Content-Length`, serializedFullLength), (`Content-Type`, type) ».
	        response.headersList.set('content-length', serializedFullLength, true);
	        response.headersList.set('content-type', type, true);
	      } else {
	        // 1. Set response’s range-requested flag.
	        response.rangeRequested = true;

	        // 2. Let rangeHeader be the result of getting `Range` from request’s header list.
	        const rangeHeader = request.headersList.get('range', true);

	        // 3. Let rangeValue be the result of parsing a single range header value given rangeHeader and true.
	        const rangeValue = simpleRangeHeaderValue(rangeHeader, true);

	        // 4. If rangeValue is failure, then return a network error.
	        if (rangeValue === 'failure') {
	          return Promise.resolve(makeNetworkError('failed to fetch the data URL'))
	        }

	        // 5. Let (rangeStart, rangeEnd) be rangeValue.
	        let { rangeStartValue: rangeStart, rangeEndValue: rangeEnd } = rangeValue;

	        // 6. If rangeStart is null:
	        // 7. Otherwise:
	        if (rangeStart === null) {
	          // 1. Set rangeStart to fullLength − rangeEnd.
	          rangeStart = fullLength - rangeEnd;

	          // 2. Set rangeEnd to rangeStart + rangeEnd − 1.
	          rangeEnd = rangeStart + rangeEnd - 1;
	        } else {
	          // 1. If rangeStart is greater than or equal to fullLength, then return a network error.
	          if (rangeStart >= fullLength) {
	            return Promise.resolve(makeNetworkError('Range start is greater than the blob\'s size.'))
	          }

	          // 2. If rangeEnd is null or rangeEnd is greater than or equal to fullLength, then set
	          //    rangeEnd to fullLength − 1.
	          if (rangeEnd === null || rangeEnd >= fullLength) {
	            rangeEnd = fullLength - 1;
	          }
	        }

	        // 8. Let slicedBlob be the result of invoking slice blob given blob, rangeStart,
	        //    rangeEnd + 1, and type.
	        const slicedBlob = blob.slice(rangeStart, rangeEnd, type);

	        // 9. Let slicedBodyWithType be the result of safely extracting slicedBlob.
	        // Note: same reason as mentioned above as to why we use extractBody
	        const slicedBodyWithType = extractBody(slicedBlob);

	        // 10. Set response’s body to slicedBodyWithType’s body.
	        response.body = slicedBodyWithType[0];

	        // 11. Let serializedSlicedLength be slicedBlob’s size, serialized and isomorphic encoded.
	        const serializedSlicedLength = isomorphicEncode(`${slicedBlob.size}`);

	        // 12. Let contentRange be the result of invoking build a content range given rangeStart,
	        //     rangeEnd, and fullLength.
	        const contentRange = buildContentRange(rangeStart, rangeEnd, fullLength);

	        // 13. Set response’s status to 206.
	        response.status = 206;

	        // 14. Set response’s status message to `Partial Content`.
	        response.statusText = 'Partial Content';

	        // 15. Set response’s header list to « (`Content-Length`, serializedSlicedLength),
	        //     (`Content-Type`, type), (`Content-Range`, contentRange) ».
	        response.headersList.set('content-length', serializedSlicedLength, true);
	        response.headersList.set('content-type', type, true);
	        response.headersList.set('content-range', contentRange, true);
	      }

	      // 10. Return response.
	      return Promise.resolve(response)
	    }
	    case 'data:': {
	      // 1. Let dataURLStruct be the result of running the
	      //    data: URL processor on request’s current URL.
	      const currentURL = requestCurrentURL(request);
	      const dataURLStruct = dataURLProcessor(currentURL);

	      // 2. If dataURLStruct is failure, then return a
	      //    network error.
	      if (dataURLStruct === 'failure') {
	        return Promise.resolve(makeNetworkError('failed to fetch the data URL'))
	      }

	      // 3. Let mimeType be dataURLStruct’s MIME type, serialized.
	      const mimeType = serializeAMimeType(dataURLStruct.mimeType);

	      // 4. Return a response whose status message is `OK`,
	      //    header list is « (`Content-Type`, mimeType) »,
	      //    and body is dataURLStruct’s body as a body.
	      return Promise.resolve(makeResponse({
	        statusText: 'OK',
	        headersList: [
	          ['content-type', { name: 'Content-Type', value: mimeType }]
	        ],
	        body: safelyExtractBody(dataURLStruct.body)[0]
	      }))
	    }
	    case 'file:': {
	      // For now, unfortunate as it is, file URLs are left as an exercise for the reader.
	      // When in doubt, return a network error.
	      return Promise.resolve(makeNetworkError('not implemented... yet...'))
	    }
	    case 'http:':
	    case 'https:': {
	      // Return the result of running HTTP fetch given fetchParams.

	      return httpFetch(fetchParams)
	        .catch((err) => makeNetworkError(err))
	    }
	    default: {
	      return Promise.resolve(makeNetworkError('unknown scheme'))
	    }
	  }
	}

	// https://fetch.spec.whatwg.org/#finalize-response
	function finalizeResponse (fetchParams, response) {
	  // 1. Set fetchParams’s request’s done flag.
	  fetchParams.request.done = true;

	  // 2, If fetchParams’s process response done is not null, then queue a fetch
	  // task to run fetchParams’s process response done given response, with
	  // fetchParams’s task destination.
	  if (fetchParams.processResponseDone != null) {
	    queueMicrotask(() => fetchParams.processResponseDone(response));
	  }
	}

	// https://fetch.spec.whatwg.org/#fetch-finale
	function fetchFinale (fetchParams, response) {
	  // 1. Let timingInfo be fetchParams’s timing info.
	  let timingInfo = fetchParams.timingInfo;

	  // 2. If response is not a network error and fetchParams’s request’s client is a secure context,
	  //    then set timingInfo’s server-timing headers to the result of getting, decoding, and splitting
	  //    `Server-Timing` from response’s internal response’s header list.
	  // TODO

	  // 3. Let processResponseEndOfBody be the following steps:
	  const processResponseEndOfBody = () => {
	    // 1. Let unsafeEndTime be the unsafe shared current time.
	    const unsafeEndTime = Date.now(); // ?

	    // 2. If fetchParams’s request’s destination is "document", then set fetchParams’s controller’s
	    //    full timing info to fetchParams’s timing info.
	    if (fetchParams.request.destination === 'document') {
	      fetchParams.controller.fullTimingInfo = timingInfo;
	    }

	    // 3. Set fetchParams’s controller’s report timing steps to the following steps given a global object global:
	    fetchParams.controller.reportTimingSteps = () => {
	      // 1. If fetchParams’s request’s URL’s scheme is not an HTTP(S) scheme, then return.
	      if (fetchParams.request.url.protocol !== 'https:') {
	        return
	      }

	      // 2. Set timingInfo’s end time to the relative high resolution time given unsafeEndTime and global.
	      timingInfo.endTime = unsafeEndTime;

	      // 3. Let cacheState be response’s cache state.
	      let cacheState = response.cacheState;

	      // 4. Let bodyInfo be response’s body info.
	      const bodyInfo = response.bodyInfo;

	      // 5. If response’s timing allow passed flag is not set, then set timingInfo to the result of creating an
	      //    opaque timing info for timingInfo and set cacheState to the empty string.
	      if (!response.timingAllowPassed) {
	        timingInfo = createOpaqueTimingInfo(timingInfo);

	        cacheState = '';
	      }

	      // 6. Let responseStatus be 0.
	      let responseStatus = 0;

	      // 7. If fetchParams’s request’s mode is not "navigate" or response’s has-cross-origin-redirects is false:
	      if (fetchParams.request.mode !== 'navigator' || !response.hasCrossOriginRedirects) {
	        // 1. Set responseStatus to response’s status.
	        responseStatus = response.status;

	        // 2. Let mimeType be the result of extracting a MIME type from response’s header list.
	        const mimeType = extractMimeType(response.headersList);

	        // 3. If mimeType is not failure, then set bodyInfo’s content type to the result of minimizing a supported MIME type given mimeType.
	        if (mimeType !== 'failure') {
	          bodyInfo.contentType = minimizeSupportedMimeType(mimeType);
	        }
	      }

	      // 8. If fetchParams’s request’s initiator type is non-null, then mark resource timing given timingInfo,
	      //    fetchParams’s request’s URL, fetchParams’s request’s initiator type, global, cacheState, bodyInfo,
	      //    and responseStatus.
	      if (fetchParams.request.initiatorType != null) {
	        // TODO: update markresourcetiming
	        markResourceTiming(timingInfo, fetchParams.request.url.href, fetchParams.request.initiatorType, globalThis, cacheState, bodyInfo, responseStatus);
	      }
	    };

	    // 4. Let processResponseEndOfBodyTask be the following steps:
	    const processResponseEndOfBodyTask = () => {
	      // 1. Set fetchParams’s request’s done flag.
	      fetchParams.request.done = true;

	      // 2. If fetchParams’s process response end-of-body is non-null, then run fetchParams’s process
	      //    response end-of-body given response.
	      if (fetchParams.processResponseEndOfBody != null) {
	        queueMicrotask(() => fetchParams.processResponseEndOfBody(response));
	      }

	      // 3. If fetchParams’s request’s initiator type is non-null and fetchParams’s request’s client’s
	      //    global object is fetchParams’s task destination, then run fetchParams’s controller’s report
	      //    timing steps given fetchParams’s request’s client’s global object.
	      if (fetchParams.request.initiatorType != null) {
	        fetchParams.controller.reportTimingSteps();
	      }
	    };

	    // 5. Queue a fetch task to run processResponseEndOfBodyTask with fetchParams’s task destination
	    queueMicrotask(() => processResponseEndOfBodyTask());
	  };

	  // 4. If fetchParams’s process response is non-null, then queue a fetch task to run fetchParams’s
	  //    process response given response, with fetchParams’s task destination.
	  if (fetchParams.processResponse != null) {
	    queueMicrotask(() => {
	      fetchParams.processResponse(response);
	      fetchParams.processResponse = null;
	    });
	  }

	  // 5. Let internalResponse be response, if response is a network error; otherwise response’s internal response.
	  const internalResponse = response.type === 'error' ? response : (response.internalResponse ?? response);

	  // 6. If internalResponse’s body is null, then run processResponseEndOfBody.
	  // 7. Otherwise:
	  if (internalResponse.body == null) {
	    processResponseEndOfBody();
	  } else {
	    // mcollina: all the following steps of the specs are skipped.
	    // The internal transform stream is not needed.
	    // See https://github.com/nodejs/undici/pull/3093#issuecomment-2050198541

	    // 1. Let transformStream be a new TransformStream.
	    // 2. Let identityTransformAlgorithm be an algorithm which, given chunk, enqueues chunk in transformStream.
	    // 3. Set up transformStream with transformAlgorithm set to identityTransformAlgorithm and flushAlgorithm
	    //    set to processResponseEndOfBody.
	    // 4. Set internalResponse’s body’s stream to the result of internalResponse’s body’s stream piped through transformStream.

	    finished(internalResponse.body.stream, () => {
	      processResponseEndOfBody();
	    });
	  }
	}

	// https://fetch.spec.whatwg.org/#http-fetch
	async function httpFetch (fetchParams) {
	  // 1. Let request be fetchParams’s request.
	  const request = fetchParams.request;

	  // 2. Let response be null.
	  let response = null;

	  // 3. Let actualResponse be null.
	  let actualResponse = null;

	  // 4. Let timingInfo be fetchParams’s timing info.
	  const timingInfo = fetchParams.timingInfo;

	  // 5. If request’s service-workers mode is "all", then:
	  if (request.serviceWorkers === 'all') ;

	  // 6. If response is null, then:
	  if (response === null) {
	    // 1. If makeCORSPreflight is true and one of these conditions is true:
	    // TODO

	    // 2. If request’s redirect mode is "follow", then set request’s
	    // service-workers mode to "none".
	    if (request.redirect === 'follow') {
	      request.serviceWorkers = 'none';
	    }

	    // 3. Set response and actualResponse to the result of running
	    // HTTP-network-or-cache fetch given fetchParams.
	    actualResponse = response = await httpNetworkOrCacheFetch(fetchParams);

	    // 4. If request’s response tainting is "cors" and a CORS check
	    // for request and response returns failure, then return a network error.
	    if (
	      request.responseTainting === 'cors' &&
	      corsCheck(request, response) === 'failure'
	    ) {
	      return makeNetworkError('cors failure')
	    }

	    // 5. If the TAO check for request and response returns failure, then set
	    // request’s timing allow failed flag.
	    if (TAOCheck(request, response) === 'failure') {
	      request.timingAllowFailed = true;
	    }
	  }

	  // 7. If either request’s response tainting or response’s type
	  // is "opaque", and the cross-origin resource policy check with
	  // request’s origin, request’s client, request’s destination,
	  // and actualResponse returns blocked, then return a network error.
	  if (
	    (request.responseTainting === 'opaque' || response.type === 'opaque') &&
	    crossOriginResourcePolicyCheck(
	      request.origin,
	      request.client,
	      request.destination,
	      actualResponse
	    ) === 'blocked'
	  ) {
	    return makeNetworkError('blocked')
	  }

	  // 8. If actualResponse’s status is a redirect status, then:
	  if (redirectStatusSet.has(actualResponse.status)) {
	    // 1. If actualResponse’s status is not 303, request’s body is not null,
	    // and the connection uses HTTP/2, then user agents may, and are even
	    // encouraged to, transmit an RST_STREAM frame.
	    // See, https://github.com/whatwg/fetch/issues/1288
	    if (request.redirect !== 'manual') {
	      fetchParams.controller.connection.destroy(undefined, false);
	    }

	    // 2. Switch on request’s redirect mode:
	    if (request.redirect === 'error') {
	      // Set response to a network error.
	      response = makeNetworkError('unexpected redirect');
	    } else if (request.redirect === 'manual') {
	      // Set response to an opaque-redirect filtered response whose internal
	      // response is actualResponse.
	      // NOTE(spec): On the web this would return an `opaqueredirect` response,
	      // but that doesn't make sense server side.
	      // See https://github.com/nodejs/undici/issues/1193.
	      response = actualResponse;
	    } else if (request.redirect === 'follow') {
	      // Set response to the result of running HTTP-redirect fetch given
	      // fetchParams and response.
	      response = await httpRedirectFetch(fetchParams, response);
	    } else {
	      assert(false);
	    }
	  }

	  // 9. Set response’s timing info to timingInfo.
	  response.timingInfo = timingInfo;

	  // 10. Return response.
	  return response
	}

	// https://fetch.spec.whatwg.org/#http-redirect-fetch
	function httpRedirectFetch (fetchParams, response) {
	  // 1. Let request be fetchParams’s request.
	  const request = fetchParams.request;

	  // 2. Let actualResponse be response, if response is not a filtered response,
	  // and response’s internal response otherwise.
	  const actualResponse = response.internalResponse
	    ? response.internalResponse
	    : response;

	  // 3. Let locationURL be actualResponse’s location URL given request’s current
	  // URL’s fragment.
	  let locationURL;

	  try {
	    locationURL = responseLocationURL(
	      actualResponse,
	      requestCurrentURL(request).hash
	    );

	    // 4. If locationURL is null, then return response.
	    if (locationURL == null) {
	      return response
	    }
	  } catch (err) {
	    // 5. If locationURL is failure, then return a network error.
	    return Promise.resolve(makeNetworkError(err))
	  }

	  // 6. If locationURL’s scheme is not an HTTP(S) scheme, then return a network
	  // error.
	  if (!urlIsHttpHttpsScheme(locationURL)) {
	    return Promise.resolve(makeNetworkError('URL scheme must be a HTTP(S) scheme'))
	  }

	  // 7. If request’s redirect count is 20, then return a network error.
	  if (request.redirectCount === 20) {
	    return Promise.resolve(makeNetworkError('redirect count exceeded'))
	  }

	  // 8. Increase request’s redirect count by 1.
	  request.redirectCount += 1;

	  // 9. If request’s mode is "cors", locationURL includes credentials, and
	  // request’s origin is not same origin with locationURL’s origin, then return
	  //  a network error.
	  if (
	    request.mode === 'cors' &&
	    (locationURL.username || locationURL.password) &&
	    !sameOrigin(request, locationURL)
	  ) {
	    return Promise.resolve(makeNetworkError('cross origin not allowed for request mode "cors"'))
	  }

	  // 10. If request’s response tainting is "cors" and locationURL includes
	  // credentials, then return a network error.
	  if (
	    request.responseTainting === 'cors' &&
	    (locationURL.username || locationURL.password)
	  ) {
	    return Promise.resolve(makeNetworkError(
	      'URL cannot contain credentials for request mode "cors"'
	    ))
	  }

	  // 11. If actualResponse’s status is not 303, request’s body is non-null,
	  // and request’s body’s source is null, then return a network error.
	  if (
	    actualResponse.status !== 303 &&
	    request.body != null &&
	    request.body.source == null
	  ) {
	    return Promise.resolve(makeNetworkError())
	  }

	  // 12. If one of the following is true
	  // - actualResponse’s status is 301 or 302 and request’s method is `POST`
	  // - actualResponse’s status is 303 and request’s method is not `GET` or `HEAD`
	  if (
	    ([301, 302].includes(actualResponse.status) && request.method === 'POST') ||
	    (actualResponse.status === 303 &&
	      !GET_OR_HEAD.includes(request.method))
	  ) {
	    // then:
	    // 1. Set request’s method to `GET` and request’s body to null.
	    request.method = 'GET';
	    request.body = null;

	    // 2. For each headerName of request-body-header name, delete headerName from
	    // request’s header list.
	    for (const headerName of requestBodyHeader) {
	      request.headersList.delete(headerName);
	    }
	  }

	  // 13. If request’s current URL’s origin is not same origin with locationURL’s
	  //     origin, then for each headerName of CORS non-wildcard request-header name,
	  //     delete headerName from request’s header list.
	  if (!sameOrigin(requestCurrentURL(request), locationURL)) {
	    // https://fetch.spec.whatwg.org/#cors-non-wildcard-request-header-name
	    request.headersList.delete('authorization', true);

	    // https://fetch.spec.whatwg.org/#authentication-entries
	    request.headersList.delete('proxy-authorization', true);

	    // "Cookie" and "Host" are forbidden request-headers, which undici doesn't implement.
	    request.headersList.delete('cookie', true);
	    request.headersList.delete('host', true);
	  }

	  // 14. If request’s body is non-null, then set request’s body to the first return
	  // value of safely extracting request’s body’s source.
	  if (request.body != null) {
	    assert(request.body.source != null);
	    request.body = safelyExtractBody(request.body.source)[0];
	  }

	  // 15. Let timingInfo be fetchParams’s timing info.
	  const timingInfo = fetchParams.timingInfo;

	  // 16. Set timingInfo’s redirect end time and post-redirect start time to the
	  // coarsened shared current time given fetchParams’s cross-origin isolated
	  // capability.
	  timingInfo.redirectEndTime = timingInfo.postRedirectStartTime =
	    coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability);

	  // 17. If timingInfo’s redirect start time is 0, then set timingInfo’s
	  //  redirect start time to timingInfo’s start time.
	  if (timingInfo.redirectStartTime === 0) {
	    timingInfo.redirectStartTime = timingInfo.startTime;
	  }

	  // 18. Append locationURL to request’s URL list.
	  request.urlList.push(locationURL);

	  // 19. Invoke set request’s referrer policy on redirect on request and
	  // actualResponse.
	  setRequestReferrerPolicyOnRedirect(request, actualResponse);

	  // 20. Return the result of running main fetch given fetchParams and true.
	  return mainFetch(fetchParams, true)
	}

	// https://fetch.spec.whatwg.org/#http-network-or-cache-fetch
	async function httpNetworkOrCacheFetch (
	  fetchParams,
	  isAuthenticationFetch = false,
	  isNewConnectionFetch = false
	) {
	  // 1. Let request be fetchParams’s request.
	  const request = fetchParams.request;

	  // 2. Let httpFetchParams be null.
	  let httpFetchParams = null;

	  // 3. Let httpRequest be null.
	  let httpRequest = null;

	  // 4. Let response be null.
	  let response = null;

	  // 8. Run these steps, but abort when the ongoing fetch is terminated:

	  //    1. If request’s window is "no-window" and request’s redirect mode is
	  //    "error", then set httpFetchParams to fetchParams and httpRequest to
	  //    request.
	  if (request.window === 'no-window' && request.redirect === 'error') {
	    httpFetchParams = fetchParams;
	    httpRequest = request;
	  } else {
	    // Otherwise:

	    // 1. Set httpRequest to a clone of request.
	    httpRequest = cloneRequest(request);

	    // 2. Set httpFetchParams to a copy of fetchParams.
	    httpFetchParams = { ...fetchParams };

	    // 3. Set httpFetchParams’s request to httpRequest.
	    httpFetchParams.request = httpRequest;
	  }

	  //    3. Let includeCredentials be true if one of
	  const includeCredentials =
	    request.credentials === 'include' ||
	    (request.credentials === 'same-origin' &&
	      request.responseTainting === 'basic');

	  //    4. Let contentLength be httpRequest’s body’s length, if httpRequest’s
	  //    body is non-null; otherwise null.
	  const contentLength = httpRequest.body ? httpRequest.body.length : null;

	  //    5. Let contentLengthHeaderValue be null.
	  let contentLengthHeaderValue = null;

	  //    6. If httpRequest’s body is null and httpRequest’s method is `POST` or
	  //    `PUT`, then set contentLengthHeaderValue to `0`.
	  if (
	    httpRequest.body == null &&
	    ['POST', 'PUT'].includes(httpRequest.method)
	  ) {
	    contentLengthHeaderValue = '0';
	  }

	  //    7. If contentLength is non-null, then set contentLengthHeaderValue to
	  //    contentLength, serialized and isomorphic encoded.
	  if (contentLength != null) {
	    contentLengthHeaderValue = isomorphicEncode(`${contentLength}`);
	  }

	  //    8. If contentLengthHeaderValue is non-null, then append
	  //    `Content-Length`/contentLengthHeaderValue to httpRequest’s header
	  //    list.
	  if (contentLengthHeaderValue != null) {
	    httpRequest.headersList.append('content-length', contentLengthHeaderValue, true);
	  }

	  //    9. If contentLengthHeaderValue is non-null, then append (`Content-Length`,
	  //    contentLengthHeaderValue) to httpRequest’s header list.

	  //    10. If contentLength is non-null and httpRequest’s keepalive is true,
	  //    then:
	  if (contentLength != null && httpRequest.keepalive) ;

	  //    11. If httpRequest’s referrer is a URL, then append
	  //    `Referer`/httpRequest’s referrer, serialized and isomorphic encoded,
	  //     to httpRequest’s header list.
	  if (httpRequest.referrer instanceof URL) {
	    httpRequest.headersList.append('referer', isomorphicEncode(httpRequest.referrer.href), true);
	  }

	  //    12. Append a request `Origin` header for httpRequest.
	  appendRequestOriginHeader(httpRequest);

	  //    13. Append the Fetch metadata headers for httpRequest. [FETCH-METADATA]
	  appendFetchMetadata(httpRequest);

	  //    14. If httpRequest’s header list does not contain `User-Agent`, then
	  //    user agents should append `User-Agent`/default `User-Agent` value to
	  //    httpRequest’s header list.
	  if (!httpRequest.headersList.contains('user-agent', true)) {
	    httpRequest.headersList.append('user-agent', defaultUserAgent);
	  }

	  //    15. If httpRequest’s cache mode is "default" and httpRequest’s header
	  //    list contains `If-Modified-Since`, `If-None-Match`,
	  //    `If-Unmodified-Since`, `If-Match`, or `If-Range`, then set
	  //    httpRequest’s cache mode to "no-store".
	  if (
	    httpRequest.cache === 'default' &&
	    (httpRequest.headersList.contains('if-modified-since', true) ||
	      httpRequest.headersList.contains('if-none-match', true) ||
	      httpRequest.headersList.contains('if-unmodified-since', true) ||
	      httpRequest.headersList.contains('if-match', true) ||
	      httpRequest.headersList.contains('if-range', true))
	  ) {
	    httpRequest.cache = 'no-store';
	  }

	  //    16. If httpRequest’s cache mode is "no-cache", httpRequest’s prevent
	  //    no-cache cache-control header modification flag is unset, and
	  //    httpRequest’s header list does not contain `Cache-Control`, then append
	  //    `Cache-Control`/`max-age=0` to httpRequest’s header list.
	  if (
	    httpRequest.cache === 'no-cache' &&
	    !httpRequest.preventNoCacheCacheControlHeaderModification &&
	    !httpRequest.headersList.contains('cache-control', true)
	  ) {
	    httpRequest.headersList.append('cache-control', 'max-age=0', true);
	  }

	  //    17. If httpRequest’s cache mode is "no-store" or "reload", then:
	  if (httpRequest.cache === 'no-store' || httpRequest.cache === 'reload') {
	    // 1. If httpRequest’s header list does not contain `Pragma`, then append
	    // `Pragma`/`no-cache` to httpRequest’s header list.
	    if (!httpRequest.headersList.contains('pragma', true)) {
	      httpRequest.headersList.append('pragma', 'no-cache', true);
	    }

	    // 2. If httpRequest’s header list does not contain `Cache-Control`,
	    // then append `Cache-Control`/`no-cache` to httpRequest’s header list.
	    if (!httpRequest.headersList.contains('cache-control', true)) {
	      httpRequest.headersList.append('cache-control', 'no-cache', true);
	    }
	  }

	  //    18. If httpRequest’s header list contains `Range`, then append
	  //    `Accept-Encoding`/`identity` to httpRequest’s header list.
	  if (httpRequest.headersList.contains('range', true)) {
	    httpRequest.headersList.append('accept-encoding', 'identity', true);
	  }

	  //    19. Modify httpRequest’s header list per HTTP. Do not append a given
	  //    header if httpRequest’s header list contains that header’s name.
	  //    TODO: https://github.com/whatwg/fetch/issues/1285#issuecomment-896560129
	  if (!httpRequest.headersList.contains('accept-encoding', true)) {
	    if (urlHasHttpsScheme(requestCurrentURL(httpRequest))) {
	      httpRequest.headersList.append('accept-encoding', 'br, gzip, deflate', true);
	    } else {
	      httpRequest.headersList.append('accept-encoding', 'gzip, deflate', true);
	    }
	  }

	  httpRequest.headersList.delete('host', true);

	  //    21. If there’s a proxy-authentication entry, use it as appropriate.
	  //    TODO: proxy-authentication

	  //    22. Set httpCache to the result of determining the HTTP cache
	  //    partition, given httpRequest.
	  //    TODO: cache

	  //    23. If httpCache is null, then set httpRequest’s cache mode to
	  //    "no-store".
	  {
	    httpRequest.cache = 'no-store';
	  }

	  //    24. If httpRequest’s cache mode is neither "no-store" nor "reload",
	  //    then:
	  if (httpRequest.cache !== 'no-store' && httpRequest.cache !== 'reload') ;

	  // 9. If aborted, then return the appropriate network error for fetchParams.
	  // TODO

	  // 10. If response is null, then:
	  if (response == null) {
	    // 1. If httpRequest’s cache mode is "only-if-cached", then return a
	    // network error.
	    if (httpRequest.cache === 'only-if-cached') {
	      return makeNetworkError('only if cached')
	    }

	    // 2. Let forwardResponse be the result of running HTTP-network fetch
	    // given httpFetchParams, includeCredentials, and isNewConnectionFetch.
	    const forwardResponse = await httpNetworkFetch(
	      httpFetchParams,
	      includeCredentials,
	      isNewConnectionFetch
	    );

	    // 3. If httpRequest’s method is unsafe and forwardResponse’s status is
	    // in the range 200 to 399, inclusive, invalidate appropriate stored
	    // responses in httpCache, as per the "Invalidation" chapter of HTTP
	    // Caching, and set storedResponse to null. [HTTP-CACHING]
	    if (
	      !safeMethodsSet.has(httpRequest.method) &&
	      forwardResponse.status >= 200 &&
	      forwardResponse.status <= 399
	    ) ;

	    // 5. If response is null, then:
	    if (response == null) {
	      // 1. Set response to forwardResponse.
	      response = forwardResponse;

	      // 2. Store httpRequest and forwardResponse in httpCache, as per the
	      // "Storing Responses in Caches" chapter of HTTP Caching. [HTTP-CACHING]
	      // TODO: cache
	    }
	  }

	  // 11. Set response’s URL list to a clone of httpRequest’s URL list.
	  response.urlList = [...httpRequest.urlList];

	  // 12. If httpRequest’s header list contains `Range`, then set response’s
	  // range-requested flag.
	  if (httpRequest.headersList.contains('range', true)) {
	    response.rangeRequested = true;
	  }

	  // 13. Set response’s request-includes-credentials to includeCredentials.
	  response.requestIncludesCredentials = includeCredentials;

	  // 14. If response’s status is 401, httpRequest’s response tainting is not
	  // "cors", includeCredentials is true, and request’s window is an environment
	  // settings object, then:
	  // TODO

	  // 15. If response’s status is 407, then:
	  if (response.status === 407) {
	    // 1. If request’s window is "no-window", then return a network error.
	    if (request.window === 'no-window') {
	      return makeNetworkError()
	    }

	    // 2. ???

	    // 3. If fetchParams is canceled, then return the appropriate network error for fetchParams.
	    if (isCancelled(fetchParams)) {
	      return makeAppropriateNetworkError(fetchParams)
	    }

	    // 4. Prompt the end user as appropriate in request’s window and store
	    // the result as a proxy-authentication entry. [HTTP-AUTH]
	    // TODO: Invoke some kind of callback?

	    // 5. Set response to the result of running HTTP-network-or-cache fetch given
	    // fetchParams.
	    // TODO
	    return makeNetworkError('proxy authentication required')
	  }

	  // 16. If all of the following are true
	  if (
	    // response’s status is 421
	    response.status === 421 &&
	    // isNewConnectionFetch is false
	    !isNewConnectionFetch &&
	    // request’s body is null, or request’s body is non-null and request’s body’s source is non-null
	    (request.body == null || request.body.source != null)
	  ) {
	    // then:

	    // 1. If fetchParams is canceled, then return the appropriate network error for fetchParams.
	    if (isCancelled(fetchParams)) {
	      return makeAppropriateNetworkError(fetchParams)
	    }

	    // 2. Set response to the result of running HTTP-network-or-cache
	    // fetch given fetchParams, isAuthenticationFetch, and true.

	    // TODO (spec): The spec doesn't specify this but we need to cancel
	    // the active response before we can start a new one.
	    // https://github.com/whatwg/fetch/issues/1293
	    fetchParams.controller.connection.destroy();

	    response = await httpNetworkOrCacheFetch(
	      fetchParams,
	      isAuthenticationFetch,
	      true
	    );
	  }

	  // 18. Return response.
	  return response
	}

	// https://fetch.spec.whatwg.org/#http-network-fetch
	async function httpNetworkFetch (
	  fetchParams,
	  includeCredentials = false,
	  forceNewConnection = false
	) {
	  assert(!fetchParams.controller.connection || fetchParams.controller.connection.destroyed);

	  fetchParams.controller.connection = {
	    abort: null,
	    destroyed: false,
	    destroy (err, abort = true) {
	      if (!this.destroyed) {
	        this.destroyed = true;
	        if (abort) {
	          this.abort?.(err ?? new DOMException('The operation was aborted.', 'AbortError'));
	        }
	      }
	    }
	  };

	  // 1. Let request be fetchParams’s request.
	  const request = fetchParams.request;

	  // 2. Let response be null.
	  let response = null;

	  // 3. Let timingInfo be fetchParams’s timing info.
	  const timingInfo = fetchParams.timingInfo;

	  // 5. If httpCache is null, then set request’s cache mode to "no-store".
	  {
	    request.cache = 'no-store';
	  }

	  // 8. Switch on request’s mode:
	  if (request.mode === 'websocket') ;

	  // 9. Run these steps, but abort when the ongoing fetch is terminated:

	  //    1. If connection is failure, then return a network error.

	  //    2. Set timingInfo’s final connection timing info to the result of
	  //    calling clamp and coarsen connection timing info with connection’s
	  //    timing info, timingInfo’s post-redirect start time, and fetchParams’s
	  //    cross-origin isolated capability.

	  //    3. If connection is not an HTTP/2 connection, request’s body is non-null,
	  //    and request’s body’s source is null, then append (`Transfer-Encoding`,
	  //    `chunked`) to request’s header list.

	  //    4. Set timingInfo’s final network-request start time to the coarsened
	  //    shared current time given fetchParams’s cross-origin isolated
	  //    capability.

	  //    5. Set response to the result of making an HTTP request over connection
	  //    using request with the following caveats:

	  //        - Follow the relevant requirements from HTTP. [HTTP] [HTTP-SEMANTICS]
	  //        [HTTP-COND] [HTTP-CACHING] [HTTP-AUTH]

	  //        - If request’s body is non-null, and request’s body’s source is null,
	  //        then the user agent may have a buffer of up to 64 kibibytes and store
	  //        a part of request’s body in that buffer. If the user agent reads from
	  //        request’s body beyond that buffer’s size and the user agent needs to
	  //        resend request, then instead return a network error.

	  //        - Set timingInfo’s final network-response start time to the coarsened
	  //        shared current time given fetchParams’s cross-origin isolated capability,
	  //        immediately after the user agent’s HTTP parser receives the first byte
	  //        of the response (e.g., frame header bytes for HTTP/2 or response status
	  //        line for HTTP/1.x).

	  //        - Wait until all the headers are transmitted.

	  //        - Any responses whose status is in the range 100 to 199, inclusive,
	  //        and is not 101, are to be ignored, except for the purposes of setting
	  //        timingInfo’s final network-response start time above.

	  //    - If request’s header list contains `Transfer-Encoding`/`chunked` and
	  //    response is transferred via HTTP/1.0 or older, then return a network
	  //    error.

	  //    - If the HTTP request results in a TLS client certificate dialog, then:

	  //        1. If request’s window is an environment settings object, make the
	  //        dialog available in request’s window.

	  //        2. Otherwise, return a network error.

	  // To transmit request’s body body, run these steps:
	  let requestBody = null;
	  // 1. If body is null and fetchParams’s process request end-of-body is
	  // non-null, then queue a fetch task given fetchParams’s process request
	  // end-of-body and fetchParams’s task destination.
	  if (request.body == null && fetchParams.processRequestEndOfBody) {
	    queueMicrotask(() => fetchParams.processRequestEndOfBody());
	  } else if (request.body != null) {
	    // 2. Otherwise, if body is non-null:

	    //    1. Let processBodyChunk given bytes be these steps:
	    const processBodyChunk = async function * (bytes) {
	      // 1. If the ongoing fetch is terminated, then abort these steps.
	      if (isCancelled(fetchParams)) {
	        return
	      }

	      // 2. Run this step in parallel: transmit bytes.
	      yield bytes;

	      // 3. If fetchParams’s process request body is non-null, then run
	      // fetchParams’s process request body given bytes’s length.
	      fetchParams.processRequestBodyChunkLength?.(bytes.byteLength);
	    };

	    // 2. Let processEndOfBody be these steps:
	    const processEndOfBody = () => {
	      // 1. If fetchParams is canceled, then abort these steps.
	      if (isCancelled(fetchParams)) {
	        return
	      }

	      // 2. If fetchParams’s process request end-of-body is non-null,
	      // then run fetchParams’s process request end-of-body.
	      if (fetchParams.processRequestEndOfBody) {
	        fetchParams.processRequestEndOfBody();
	      }
	    };

	    // 3. Let processBodyError given e be these steps:
	    const processBodyError = (e) => {
	      // 1. If fetchParams is canceled, then abort these steps.
	      if (isCancelled(fetchParams)) {
	        return
	      }

	      // 2. If e is an "AbortError" DOMException, then abort fetchParams’s controller.
	      if (e.name === 'AbortError') {
	        fetchParams.controller.abort();
	      } else {
	        fetchParams.controller.terminate(e);
	      }
	    };

	    // 4. Incrementally read request’s body given processBodyChunk, processEndOfBody,
	    // processBodyError, and fetchParams’s task destination.
	    requestBody = (async function * () {
	      try {
	        for await (const bytes of request.body.stream) {
	          yield * processBodyChunk(bytes);
	        }
	        processEndOfBody();
	      } catch (err) {
	        processBodyError(err);
	      }
	    })();
	  }

	  try {
	    // socket is only provided for websockets
	    const { body, status, statusText, headersList, socket } = await dispatch({ body: requestBody });

	    if (socket) {
	      response = makeResponse({ status, statusText, headersList, socket });
	    } else {
	      const iterator = body[Symbol.asyncIterator]();
	      fetchParams.controller.next = () => iterator.next();

	      response = makeResponse({ status, statusText, headersList });
	    }
	  } catch (err) {
	    // 10. If aborted, then:
	    if (err.name === 'AbortError') {
	      // 1. If connection uses HTTP/2, then transmit an RST_STREAM frame.
	      fetchParams.controller.connection.destroy();

	      // 2. Return the appropriate network error for fetchParams.
	      return makeAppropriateNetworkError(fetchParams, err)
	    }

	    return makeNetworkError(err)
	  }

	  // 11. Let pullAlgorithm be an action that resumes the ongoing fetch
	  // if it is suspended.
	  const pullAlgorithm = async () => {
	    await fetchParams.controller.resume();
	  };

	  // 12. Let cancelAlgorithm be an algorithm that aborts fetchParams’s
	  // controller with reason, given reason.
	  const cancelAlgorithm = (reason) => {
	    // If the aborted fetch was already terminated, then we do not
	    // need to do anything.
	    if (!isCancelled(fetchParams)) {
	      fetchParams.controller.abort(reason);
	    }
	  };

	  // 13. Let highWaterMark be a non-negative, non-NaN number, chosen by
	  // the user agent.
	  // TODO

	  // 14. Let sizeAlgorithm be an algorithm that accepts a chunk object
	  // and returns a non-negative, non-NaN, non-infinite number, chosen by the user agent.
	  // TODO

	  // 15. Let stream be a new ReadableStream.
	  // 16. Set up stream with byte reading support with pullAlgorithm set to pullAlgorithm,
	  //     cancelAlgorithm set to cancelAlgorithm.
	  const stream = new ReadableStream(
	    {
	      async start (controller) {
	        fetchParams.controller.controller = controller;
	      },
	      async pull (controller) {
	        await pullAlgorithm();
	      },
	      async cancel (reason) {
	        await cancelAlgorithm(reason);
	      },
	      type: 'bytes'
	    }
	  );

	  // 17. Run these steps, but abort when the ongoing fetch is terminated:

	  //    1. Set response’s body to a new body whose stream is stream.
	  response.body = { stream, source: null, length: null };

	  //    2. If response is not a network error and request’s cache mode is
	  //    not "no-store", then update response in httpCache for request.
	  //    TODO

	  //    3. If includeCredentials is true and the user agent is not configured
	  //    to block cookies for request (see section 7 of [COOKIES]), then run the
	  //    "set-cookie-string" parsing algorithm (see section 5.2 of [COOKIES]) on
	  //    the value of each header whose name is a byte-case-insensitive match for
	  //    `Set-Cookie` in response’s header list, if any, and request’s current URL.
	  //    TODO

	  // 18. If aborted, then:
	  // TODO

	  // 19. Run these steps in parallel:

	  //    1. Run these steps, but abort when fetchParams is canceled:
	  fetchParams.controller.onAborted = onAborted;
	  fetchParams.controller.on('terminated', onAborted);
	  fetchParams.controller.resume = async () => {
	    // 1. While true
	    while (true) {
	      // 1-3. See onData...

	      // 4. Set bytes to the result of handling content codings given
	      // codings and bytes.
	      let bytes;
	      let isFailure;
	      try {
	        const { done, value } = await fetchParams.controller.next();

	        if (isAborted(fetchParams)) {
	          break
	        }

	        bytes = done ? undefined : value;
	      } catch (err) {
	        if (fetchParams.controller.ended && !timingInfo.encodedBodySize) {
	          // zlib doesn't like empty streams.
	          bytes = undefined;
	        } else {
	          bytes = err;

	          // err may be propagated from the result of calling readablestream.cancel,
	          // which might not be an error. https://github.com/nodejs/undici/issues/2009
	          isFailure = true;
	        }
	      }

	      if (bytes === undefined) {
	        // 2. Otherwise, if the bytes transmission for response’s message
	        // body is done normally and stream is readable, then close
	        // stream, finalize response for fetchParams and response, and
	        // abort these in-parallel steps.
	        readableStreamClose(fetchParams.controller.controller);

	        finalizeResponse(fetchParams, response);

	        return
	      }

	      // 5. Increase timingInfo’s decoded body size by bytes’s length.
	      timingInfo.decodedBodySize += bytes?.byteLength ?? 0;

	      // 6. If bytes is failure, then terminate fetchParams’s controller.
	      if (isFailure) {
	        fetchParams.controller.terminate(bytes);
	        return
	      }

	      // 7. Enqueue a Uint8Array wrapping an ArrayBuffer containing bytes
	      // into stream.
	      const buffer = new Uint8Array(bytes);
	      if (buffer.byteLength) {
	        fetchParams.controller.controller.enqueue(buffer);
	      }

	      // 8. If stream is errored, then terminate the ongoing fetch.
	      if (isErrored(stream)) {
	        fetchParams.controller.terminate();
	        return
	      }

	      // 9. If stream doesn’t need more data ask the user agent to suspend
	      // the ongoing fetch.
	      if (fetchParams.controller.controller.desiredSize <= 0) {
	        return
	      }
	    }
	  };

	  //    2. If aborted, then:
	  function onAborted (reason) {
	    // 2. If fetchParams is aborted, then:
	    if (isAborted(fetchParams)) {
	      // 1. Set response’s aborted flag.
	      response.aborted = true;

	      // 2. If stream is readable, then error stream with the result of
	      //    deserialize a serialized abort reason given fetchParams’s
	      //    controller’s serialized abort reason and an
	      //    implementation-defined realm.
	      if (isReadable(stream)) {
	        fetchParams.controller.controller.error(
	          fetchParams.controller.serializedAbortReason
	        );
	      }
	    } else {
	      // 3. Otherwise, if stream is readable, error stream with a TypeError.
	      if (isReadable(stream)) {
	        fetchParams.controller.controller.error(new TypeError('terminated', {
	          cause: isErrorLike(reason) ? reason : undefined
	        }));
	      }
	    }

	    // 4. If connection uses HTTP/2, then transmit an RST_STREAM frame.
	    // 5. Otherwise, the user agent should close connection unless it would be bad for performance to do so.
	    fetchParams.controller.connection.destroy();
	  }

	  // 20. Return response.
	  return response

	  function dispatch ({ body }) {
	    const url = requestCurrentURL(request);
	    /** @type {import('../..').Agent} */
	    const agent = fetchParams.controller.dispatcher;

	    return new Promise((resolve, reject) => agent.dispatch(
	      {
	        path: url.pathname + url.search,
	        origin: url.origin,
	        method: request.method,
	        body: agent.isMockActive ? request.body && (request.body.source || request.body.stream) : body,
	        headers: request.headersList.entries,
	        maxRedirections: 0,
	        upgrade: request.mode === 'websocket' ? 'websocket' : undefined
	      },
	      {
	        body: null,
	        abort: null,

	        onConnect (abort) {
	          // TODO (fix): Do we need connection here?
	          const { connection } = fetchParams.controller;

	          // Set timingInfo’s final connection timing info to the result of calling clamp and coarsen
	          // connection timing info with connection’s timing info, timingInfo’s post-redirect start
	          // time, and fetchParams’s cross-origin isolated capability.
	          // TODO: implement connection timing
	          timingInfo.finalConnectionTimingInfo = clampAndCoarsenConnectionTimingInfo(undefined, timingInfo.postRedirectStartTime, fetchParams.crossOriginIsolatedCapability);

	          if (connection.destroyed) {
	            abort(new DOMException('The operation was aborted.', 'AbortError'));
	          } else {
	            fetchParams.controller.on('terminated', abort);
	            this.abort = connection.abort = abort;
	          }

	          // Set timingInfo’s final network-request start time to the coarsened shared current time given
	          // fetchParams’s cross-origin isolated capability.
	          timingInfo.finalNetworkRequestStartTime = coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability);
	        },

	        onResponseStarted () {
	          // Set timingInfo’s final network-response start time to the coarsened shared current
	          // time given fetchParams’s cross-origin isolated capability, immediately after the
	          // user agent’s HTTP parser receives the first byte of the response (e.g., frame header
	          // bytes for HTTP/2 or response status line for HTTP/1.x).
	          timingInfo.finalNetworkResponseStartTime = coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability);
	        },

	        onHeaders (status, rawHeaders, resume, statusText) {
	          if (status < 200) {
	            return
	          }

	          /** @type {string[]} */
	          let codings = [];
	          let location = '';

	          const headersList = new HeadersList();

	          for (let i = 0; i < rawHeaders.length; i += 2) {
	            headersList.append(bufferToLowerCasedHeaderName(rawHeaders[i]), rawHeaders[i + 1].toString('latin1'), true);
	          }
	          const contentEncoding = headersList.get('content-encoding', true);
	          if (contentEncoding) {
	            // https://www.rfc-editor.org/rfc/rfc7231#section-3.1.2.1
	            // "All content-coding values are case-insensitive..."
	            codings = contentEncoding.toLowerCase().split(',').map((x) => x.trim());
	          }
	          location = headersList.get('location', true);

	          this.body = new Readable({ read: resume });

	          const decoders = [];

	          const willFollow = location && request.redirect === 'follow' &&
	            redirectStatusSet.has(status);

	          // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding
	          if (codings.length !== 0 && request.method !== 'HEAD' && request.method !== 'CONNECT' && !nullBodyStatus.includes(status) && !willFollow) {
	            for (let i = 0; i < codings.length; ++i) {
	              const coding = codings[i];
	              // https://www.rfc-editor.org/rfc/rfc9112.html#section-7.2
	              if (coding === 'x-gzip' || coding === 'gzip') {
	                decoders.push(zlib.createGunzip({
	                  // Be less strict when decoding compressed responses, since sometimes
	                  // servers send slightly invalid responses that are still accepted
	                  // by common browsers.
	                  // Always using Z_SYNC_FLUSH is what cURL does.
	                  flush: zlib.constants.Z_SYNC_FLUSH,
	                  finishFlush: zlib.constants.Z_SYNC_FLUSH
	                }));
	              } else if (coding === 'deflate') {
	                decoders.push(createInflate());
	              } else if (coding === 'br') {
	                decoders.push(zlib.createBrotliDecompress());
	              } else {
	                decoders.length = 0;
	                break
	              }
	            }
	          }

	          resolve({
	            status,
	            statusText,
	            headersList,
	            body: decoders.length
	              ? pipeline(this.body, ...decoders, () => { })
	              : this.body.on('error', () => { })
	          });

	          return true
	        },

	        onData (chunk) {
	          if (fetchParams.controller.dump) {
	            return
	          }

	          // 1. If one or more bytes have been transmitted from response’s
	          // message body, then:

	          //  1. Let bytes be the transmitted bytes.
	          const bytes = chunk;

	          //  2. Let codings be the result of extracting header list values
	          //  given `Content-Encoding` and response’s header list.
	          //  See pullAlgorithm.

	          //  3. Increase timingInfo’s encoded body size by bytes’s length.
	          timingInfo.encodedBodySize += bytes.byteLength;

	          //  4. See pullAlgorithm...

	          return this.body.push(bytes)
	        },

	        onComplete () {
	          if (this.abort) {
	            fetchParams.controller.off('terminated', this.abort);
	          }

	          if (fetchParams.controller.onAborted) {
	            fetchParams.controller.off('terminated', fetchParams.controller.onAborted);
	          }

	          fetchParams.controller.ended = true;

	          this.body.push(null);
	        },

	        onError (error) {
	          if (this.abort) {
	            fetchParams.controller.off('terminated', this.abort);
	          }

	          this.body?.destroy(error);

	          fetchParams.controller.terminate(error);

	          reject(error);
	        },

	        onUpgrade (status, rawHeaders, socket) {
	          if (status !== 101) {
	            return
	          }

	          const headersList = new HeadersList();

	          for (let i = 0; i < rawHeaders.length; i += 2) {
	            headersList.append(bufferToLowerCasedHeaderName(rawHeaders[i]), rawHeaders[i + 1].toString('latin1'), true);
	          }

	          resolve({
	            status,
	            statusText: STATUS_CODES[status],
	            headersList,
	            socket
	          });

	          return true
	        }
	      }
	    ))
	  }
	}

	fetch_1 = {
	  fetch,
	  Fetch,
	  fetching,
	  finalizeAndReportTiming
	};
	return fetch_1;
}

var symbols$2;
var hasRequiredSymbols$3;

function requireSymbols$3 () {
	if (hasRequiredSymbols$3) return symbols$2;
	hasRequiredSymbols$3 = 1;

	symbols$2 = {
	  kState: Symbol('FileReader state'),
	  kResult: Symbol('FileReader result'),
	  kError: Symbol('FileReader error'),
	  kLastProgressEventFired: Symbol('FileReader last progress event fired timestamp'),
	  kEvents: Symbol('FileReader events'),
	  kAborted: Symbol('FileReader aborted')
	};
	return symbols$2;
}

var progressevent;
var hasRequiredProgressevent;

function requireProgressevent () {
	if (hasRequiredProgressevent) return progressevent;
	hasRequiredProgressevent = 1;

	const { webidl } = requireWebidl();

	const kState = Symbol('ProgressEvent state');

	/**
	 * @see https://xhr.spec.whatwg.org/#progressevent
	 */
	class ProgressEvent extends Event {
	  constructor (type, eventInitDict = {}) {
	    type = webidl.converters.DOMString(type, 'ProgressEvent constructor', 'type');
	    eventInitDict = webidl.converters.ProgressEventInit(eventInitDict ?? {});

	    super(type, eventInitDict);

	    this[kState] = {
	      lengthComputable: eventInitDict.lengthComputable,
	      loaded: eventInitDict.loaded,
	      total: eventInitDict.total
	    };
	  }

	  get lengthComputable () {
	    webidl.brandCheck(this, ProgressEvent);

	    return this[kState].lengthComputable
	  }

	  get loaded () {
	    webidl.brandCheck(this, ProgressEvent);

	    return this[kState].loaded
	  }

	  get total () {
	    webidl.brandCheck(this, ProgressEvent);

	    return this[kState].total
	  }
	}

	webidl.converters.ProgressEventInit = webidl.dictionaryConverter([
	  {
	    key: 'lengthComputable',
	    converter: webidl.converters.boolean,
	    defaultValue: () => false
	  },
	  {
	    key: 'loaded',
	    converter: webidl.converters['unsigned long long'],
	    defaultValue: () => 0
	  },
	  {
	    key: 'total',
	    converter: webidl.converters['unsigned long long'],
	    defaultValue: () => 0
	  },
	  {
	    key: 'bubbles',
	    converter: webidl.converters.boolean,
	    defaultValue: () => false
	  },
	  {
	    key: 'cancelable',
	    converter: webidl.converters.boolean,
	    defaultValue: () => false
	  },
	  {
	    key: 'composed',
	    converter: webidl.converters.boolean,
	    defaultValue: () => false
	  }
	]);

	progressevent = {
	  ProgressEvent
	};
	return progressevent;
}

var encoding;
var hasRequiredEncoding;

function requireEncoding () {
	if (hasRequiredEncoding) return encoding;
	hasRequiredEncoding = 1;

	/**
	 * @see https://encoding.spec.whatwg.org/#concept-encoding-get
	 * @param {string|undefined} label
	 */
	function getEncoding (label) {
	  if (!label) {
	    return 'failure'
	  }

	  // 1. Remove any leading and trailing ASCII whitespace from label.
	  // 2. If label is an ASCII case-insensitive match for any of the
	  //    labels listed in the table below, then return the
	  //    corresponding encoding; otherwise return failure.
	  switch (label.trim().toLowerCase()) {
	    case 'unicode-1-1-utf-8':
	    case 'unicode11utf8':
	    case 'unicode20utf8':
	    case 'utf-8':
	    case 'utf8':
	    case 'x-unicode20utf8':
	      return 'UTF-8'
	    case '866':
	    case 'cp866':
	    case 'csibm866':
	    case 'ibm866':
	      return 'IBM866'
	    case 'csisolatin2':
	    case 'iso-8859-2':
	    case 'iso-ir-101':
	    case 'iso8859-2':
	    case 'iso88592':
	    case 'iso_8859-2':
	    case 'iso_8859-2:1987':
	    case 'l2':
	    case 'latin2':
	      return 'ISO-8859-2'
	    case 'csisolatin3':
	    case 'iso-8859-3':
	    case 'iso-ir-109':
	    case 'iso8859-3':
	    case 'iso88593':
	    case 'iso_8859-3':
	    case 'iso_8859-3:1988':
	    case 'l3':
	    case 'latin3':
	      return 'ISO-8859-3'
	    case 'csisolatin4':
	    case 'iso-8859-4':
	    case 'iso-ir-110':
	    case 'iso8859-4':
	    case 'iso88594':
	    case 'iso_8859-4':
	    case 'iso_8859-4:1988':
	    case 'l4':
	    case 'latin4':
	      return 'ISO-8859-4'
	    case 'csisolatincyrillic':
	    case 'cyrillic':
	    case 'iso-8859-5':
	    case 'iso-ir-144':
	    case 'iso8859-5':
	    case 'iso88595':
	    case 'iso_8859-5':
	    case 'iso_8859-5:1988':
	      return 'ISO-8859-5'
	    case 'arabic':
	    case 'asmo-708':
	    case 'csiso88596e':
	    case 'csiso88596i':
	    case 'csisolatinarabic':
	    case 'ecma-114':
	    case 'iso-8859-6':
	    case 'iso-8859-6-e':
	    case 'iso-8859-6-i':
	    case 'iso-ir-127':
	    case 'iso8859-6':
	    case 'iso88596':
	    case 'iso_8859-6':
	    case 'iso_8859-6:1987':
	      return 'ISO-8859-6'
	    case 'csisolatingreek':
	    case 'ecma-118':
	    case 'elot_928':
	    case 'greek':
	    case 'greek8':
	    case 'iso-8859-7':
	    case 'iso-ir-126':
	    case 'iso8859-7':
	    case 'iso88597':
	    case 'iso_8859-7':
	    case 'iso_8859-7:1987':
	    case 'sun_eu_greek':
	      return 'ISO-8859-7'
	    case 'csiso88598e':
	    case 'csisolatinhebrew':
	    case 'hebrew':
	    case 'iso-8859-8':
	    case 'iso-8859-8-e':
	    case 'iso-ir-138':
	    case 'iso8859-8':
	    case 'iso88598':
	    case 'iso_8859-8':
	    case 'iso_8859-8:1988':
	    case 'visual':
	      return 'ISO-8859-8'
	    case 'csiso88598i':
	    case 'iso-8859-8-i':
	    case 'logical':
	      return 'ISO-8859-8-I'
	    case 'csisolatin6':
	    case 'iso-8859-10':
	    case 'iso-ir-157':
	    case 'iso8859-10':
	    case 'iso885910':
	    case 'l6':
	    case 'latin6':
	      return 'ISO-8859-10'
	    case 'iso-8859-13':
	    case 'iso8859-13':
	    case 'iso885913':
	      return 'ISO-8859-13'
	    case 'iso-8859-14':
	    case 'iso8859-14':
	    case 'iso885914':
	      return 'ISO-8859-14'
	    case 'csisolatin9':
	    case 'iso-8859-15':
	    case 'iso8859-15':
	    case 'iso885915':
	    case 'iso_8859-15':
	    case 'l9':
	      return 'ISO-8859-15'
	    case 'iso-8859-16':
	      return 'ISO-8859-16'
	    case 'cskoi8r':
	    case 'koi':
	    case 'koi8':
	    case 'koi8-r':
	    case 'koi8_r':
	      return 'KOI8-R'
	    case 'koi8-ru':
	    case 'koi8-u':
	      return 'KOI8-U'
	    case 'csmacintosh':
	    case 'mac':
	    case 'macintosh':
	    case 'x-mac-roman':
	      return 'macintosh'
	    case 'iso-8859-11':
	    case 'iso8859-11':
	    case 'iso885911':
	    case 'tis-620':
	    case 'windows-874':
	      return 'windows-874'
	    case 'cp1250':
	    case 'windows-1250':
	    case 'x-cp1250':
	      return 'windows-1250'
	    case 'cp1251':
	    case 'windows-1251':
	    case 'x-cp1251':
	      return 'windows-1251'
	    case 'ansi_x3.4-1968':
	    case 'ascii':
	    case 'cp1252':
	    case 'cp819':
	    case 'csisolatin1':
	    case 'ibm819':
	    case 'iso-8859-1':
	    case 'iso-ir-100':
	    case 'iso8859-1':
	    case 'iso88591':
	    case 'iso_8859-1':
	    case 'iso_8859-1:1987':
	    case 'l1':
	    case 'latin1':
	    case 'us-ascii':
	    case 'windows-1252':
	    case 'x-cp1252':
	      return 'windows-1252'
	    case 'cp1253':
	    case 'windows-1253':
	    case 'x-cp1253':
	      return 'windows-1253'
	    case 'cp1254':
	    case 'csisolatin5':
	    case 'iso-8859-9':
	    case 'iso-ir-148':
	    case 'iso8859-9':
	    case 'iso88599':
	    case 'iso_8859-9':
	    case 'iso_8859-9:1989':
	    case 'l5':
	    case 'latin5':
	    case 'windows-1254':
	    case 'x-cp1254':
	      return 'windows-1254'
	    case 'cp1255':
	    case 'windows-1255':
	    case 'x-cp1255':
	      return 'windows-1255'
	    case 'cp1256':
	    case 'windows-1256':
	    case 'x-cp1256':
	      return 'windows-1256'
	    case 'cp1257':
	    case 'windows-1257':
	    case 'x-cp1257':
	      return 'windows-1257'
	    case 'cp1258':
	    case 'windows-1258':
	    case 'x-cp1258':
	      return 'windows-1258'
	    case 'x-mac-cyrillic':
	    case 'x-mac-ukrainian':
	      return 'x-mac-cyrillic'
	    case 'chinese':
	    case 'csgb2312':
	    case 'csiso58gb231280':
	    case 'gb2312':
	    case 'gb_2312':
	    case 'gb_2312-80':
	    case 'gbk':
	    case 'iso-ir-58':
	    case 'x-gbk':
	      return 'GBK'
	    case 'gb18030':
	      return 'gb18030'
	    case 'big5':
	    case 'big5-hkscs':
	    case 'cn-big5':
	    case 'csbig5':
	    case 'x-x-big5':
	      return 'Big5'
	    case 'cseucpkdfmtjapanese':
	    case 'euc-jp':
	    case 'x-euc-jp':
	      return 'EUC-JP'
	    case 'csiso2022jp':
	    case 'iso-2022-jp':
	      return 'ISO-2022-JP'
	    case 'csshiftjis':
	    case 'ms932':
	    case 'ms_kanji':
	    case 'shift-jis':
	    case 'shift_jis':
	    case 'sjis':
	    case 'windows-31j':
	    case 'x-sjis':
	      return 'Shift_JIS'
	    case 'cseuckr':
	    case 'csksc56011987':
	    case 'euc-kr':
	    case 'iso-ir-149':
	    case 'korean':
	    case 'ks_c_5601-1987':
	    case 'ks_c_5601-1989':
	    case 'ksc5601':
	    case 'ksc_5601':
	    case 'windows-949':
	      return 'EUC-KR'
	    case 'csiso2022kr':
	    case 'hz-gb-2312':
	    case 'iso-2022-cn':
	    case 'iso-2022-cn-ext':
	    case 'iso-2022-kr':
	    case 'replacement':
	      return 'replacement'
	    case 'unicodefffe':
	    case 'utf-16be':
	      return 'UTF-16BE'
	    case 'csunicode':
	    case 'iso-10646-ucs-2':
	    case 'ucs-2':
	    case 'unicode':
	    case 'unicodefeff':
	    case 'utf-16':
	    case 'utf-16le':
	      return 'UTF-16LE'
	    case 'x-user-defined':
	      return 'x-user-defined'
	    default: return 'failure'
	  }
	}

	encoding = {
	  getEncoding
	};
	return encoding;
}

var util$4;
var hasRequiredUtil$5;

function requireUtil$5 () {
	if (hasRequiredUtil$5) return util$4;
	hasRequiredUtil$5 = 1;

	const {
	  kState,
	  kError,
	  kResult,
	  kAborted,
	  kLastProgressEventFired
	} = requireSymbols$3();
	const { ProgressEvent } = requireProgressevent();
	const { getEncoding } = requireEncoding();
	const { serializeAMimeType, parseMIMEType } = requireDataUrl();
	const { types } = require$$0$a;
	const { StringDecoder } = require$$1$6;
	const { btoa } = require$$0$9;

	/** @type {PropertyDescriptor} */
	const staticPropertyDescriptors = {
	  enumerable: true,
	  writable: false,
	  configurable: false
	};

	/**
	 * @see https://w3c.github.io/FileAPI/#readOperation
	 * @param {import('./filereader').FileReader} fr
	 * @param {import('buffer').Blob} blob
	 * @param {string} type
	 * @param {string?} encodingName
	 */
	function readOperation (fr, blob, type, encodingName) {
	  // 1. If fr’s state is "loading", throw an InvalidStateError
	  //    DOMException.
	  if (fr[kState] === 'loading') {
	    throw new DOMException('Invalid state', 'InvalidStateError')
	  }

	  // 2. Set fr’s state to "loading".
	  fr[kState] = 'loading';

	  // 3. Set fr’s result to null.
	  fr[kResult] = null;

	  // 4. Set fr’s error to null.
	  fr[kError] = null;

	  // 5. Let stream be the result of calling get stream on blob.
	  /** @type {import('stream/web').ReadableStream} */
	  const stream = blob.stream();

	  // 6. Let reader be the result of getting a reader from stream.
	  const reader = stream.getReader();

	  // 7. Let bytes be an empty byte sequence.
	  /** @type {Uint8Array[]} */
	  const bytes = [];

	  // 8. Let chunkPromise be the result of reading a chunk from
	  //    stream with reader.
	  let chunkPromise = reader.read();

	  // 9. Let isFirstChunk be true.
	  let isFirstChunk = true

	  // 10. In parallel, while true:
	  // Note: "In parallel" just means non-blocking
	  // Note 2: readOperation itself cannot be async as double
	  // reading the body would then reject the promise, instead
	  // of throwing an error.
	  ;(async () => {
	    while (!fr[kAborted]) {
	      // 1. Wait for chunkPromise to be fulfilled or rejected.
	      try {
	        const { done, value } = await chunkPromise;

	        // 2. If chunkPromise is fulfilled, and isFirstChunk is
	        //    true, queue a task to fire a progress event called
	        //    loadstart at fr.
	        if (isFirstChunk && !fr[kAborted]) {
	          queueMicrotask(() => {
	            fireAProgressEvent('loadstart', fr);
	          });
	        }

	        // 3. Set isFirstChunk to false.
	        isFirstChunk = false;

	        // 4. If chunkPromise is fulfilled with an object whose
	        //    done property is false and whose value property is
	        //    a Uint8Array object, run these steps:
	        if (!done && types.isUint8Array(value)) {
	          // 1. Let bs be the byte sequence represented by the
	          //    Uint8Array object.

	          // 2. Append bs to bytes.
	          bytes.push(value);

	          // 3. If roughly 50ms have passed since these steps
	          //    were last invoked, queue a task to fire a
	          //    progress event called progress at fr.
	          if (
	            (
	              fr[kLastProgressEventFired] === undefined ||
	              Date.now() - fr[kLastProgressEventFired] >= 50
	            ) &&
	            !fr[kAborted]
	          ) {
	            fr[kLastProgressEventFired] = Date.now();
	            queueMicrotask(() => {
	              fireAProgressEvent('progress', fr);
	            });
	          }

	          // 4. Set chunkPromise to the result of reading a
	          //    chunk from stream with reader.
	          chunkPromise = reader.read();
	        } else if (done) {
	          // 5. Otherwise, if chunkPromise is fulfilled with an
	          //    object whose done property is true, queue a task
	          //    to run the following steps and abort this algorithm:
	          queueMicrotask(() => {
	            // 1. Set fr’s state to "done".
	            fr[kState] = 'done';

	            // 2. Let result be the result of package data given
	            //    bytes, type, blob’s type, and encodingName.
	            try {
	              const result = packageData(bytes, type, blob.type, encodingName);

	              // 4. Else:

	              if (fr[kAborted]) {
	                return
	              }

	              // 1. Set fr’s result to result.
	              fr[kResult] = result;

	              // 2. Fire a progress event called load at the fr.
	              fireAProgressEvent('load', fr);
	            } catch (error) {
	              // 3. If package data threw an exception error:

	              // 1. Set fr’s error to error.
	              fr[kError] = error;

	              // 2. Fire a progress event called error at fr.
	              fireAProgressEvent('error', fr);
	            }

	            // 5. If fr’s state is not "loading", fire a progress
	            //    event called loadend at the fr.
	            if (fr[kState] !== 'loading') {
	              fireAProgressEvent('loadend', fr);
	            }
	          });

	          break
	        }
	      } catch (error) {
	        if (fr[kAborted]) {
	          return
	        }

	        // 6. Otherwise, if chunkPromise is rejected with an
	        //    error error, queue a task to run the following
	        //    steps and abort this algorithm:
	        queueMicrotask(() => {
	          // 1. Set fr’s state to "done".
	          fr[kState] = 'done';

	          // 2. Set fr’s error to error.
	          fr[kError] = error;

	          // 3. Fire a progress event called error at fr.
	          fireAProgressEvent('error', fr);

	          // 4. If fr’s state is not "loading", fire a progress
	          //    event called loadend at fr.
	          if (fr[kState] !== 'loading') {
	            fireAProgressEvent('loadend', fr);
	          }
	        });

	        break
	      }
	    }
	  })();
	}

	/**
	 * @see https://w3c.github.io/FileAPI/#fire-a-progress-event
	 * @see https://dom.spec.whatwg.org/#concept-event-fire
	 * @param {string} e The name of the event
	 * @param {import('./filereader').FileReader} reader
	 */
	function fireAProgressEvent (e, reader) {
	  // The progress event e does not bubble. e.bubbles must be false
	  // The progress event e is NOT cancelable. e.cancelable must be false
	  const event = new ProgressEvent(e, {
	    bubbles: false,
	    cancelable: false
	  });

	  reader.dispatchEvent(event);
	}

	/**
	 * @see https://w3c.github.io/FileAPI/#blob-package-data
	 * @param {Uint8Array[]} bytes
	 * @param {string} type
	 * @param {string?} mimeType
	 * @param {string?} encodingName
	 */
	function packageData (bytes, type, mimeType, encodingName) {
	  // 1. A Blob has an associated package data algorithm, given
	  //    bytes, a type, a optional mimeType, and a optional
	  //    encodingName, which switches on type and runs the
	  //    associated steps:

	  switch (type) {
	    case 'DataURL': {
	      // 1. Return bytes as a DataURL [RFC2397] subject to
	      //    the considerations below:
	      //  * Use mimeType as part of the Data URL if it is
	      //    available in keeping with the Data URL
	      //    specification [RFC2397].
	      //  * If mimeType is not available return a Data URL
	      //    without a media-type. [RFC2397].

	      // https://datatracker.ietf.org/doc/html/rfc2397#section-3
	      // dataurl    := "data:" [ mediatype ] [ ";base64" ] "," data
	      // mediatype  := [ type "/" subtype ] *( ";" parameter )
	      // data       := *urlchar
	      // parameter  := attribute "=" value
	      let dataURL = 'data:';

	      const parsed = parseMIMEType(mimeType || 'application/octet-stream');

	      if (parsed !== 'failure') {
	        dataURL += serializeAMimeType(parsed);
	      }

	      dataURL += ';base64,';

	      const decoder = new StringDecoder('latin1');

	      for (const chunk of bytes) {
	        dataURL += btoa(decoder.write(chunk));
	      }

	      dataURL += btoa(decoder.end());

	      return dataURL
	    }
	    case 'Text': {
	      // 1. Let encoding be failure
	      let encoding = 'failure';

	      // 2. If the encodingName is present, set encoding to the
	      //    result of getting an encoding from encodingName.
	      if (encodingName) {
	        encoding = getEncoding(encodingName);
	      }

	      // 3. If encoding is failure, and mimeType is present:
	      if (encoding === 'failure' && mimeType) {
	        // 1. Let type be the result of parse a MIME type
	        //    given mimeType.
	        const type = parseMIMEType(mimeType);

	        // 2. If type is not failure, set encoding to the result
	        //    of getting an encoding from type’s parameters["charset"].
	        if (type !== 'failure') {
	          encoding = getEncoding(type.parameters.get('charset'));
	        }
	      }

	      // 4. If encoding is failure, then set encoding to UTF-8.
	      if (encoding === 'failure') {
	        encoding = 'UTF-8';
	      }

	      // 5. Decode bytes using fallback encoding encoding, and
	      //    return the result.
	      return decode(bytes, encoding)
	    }
	    case 'ArrayBuffer': {
	      // Return a new ArrayBuffer whose contents are bytes.
	      const sequence = combineByteSequences(bytes);

	      return sequence.buffer
	    }
	    case 'BinaryString': {
	      // Return bytes as a binary string, in which every byte
	      //  is represented by a code unit of equal value [0..255].
	      let binaryString = '';

	      const decoder = new StringDecoder('latin1');

	      for (const chunk of bytes) {
	        binaryString += decoder.write(chunk);
	      }

	      binaryString += decoder.end();

	      return binaryString
	    }
	  }
	}

	/**
	 * @see https://encoding.spec.whatwg.org/#decode
	 * @param {Uint8Array[]} ioQueue
	 * @param {string} encoding
	 */
	function decode (ioQueue, encoding) {
	  const bytes = combineByteSequences(ioQueue);

	  // 1. Let BOMEncoding be the result of BOM sniffing ioQueue.
	  const BOMEncoding = BOMSniffing(bytes);

	  let slice = 0;

	  // 2. If BOMEncoding is non-null:
	  if (BOMEncoding !== null) {
	    // 1. Set encoding to BOMEncoding.
	    encoding = BOMEncoding;

	    // 2. Read three bytes from ioQueue, if BOMEncoding is
	    //    UTF-8; otherwise read two bytes.
	    //    (Do nothing with those bytes.)
	    slice = BOMEncoding === 'UTF-8' ? 3 : 2;
	  }

	  // 3. Process a queue with an instance of encoding’s
	  //    decoder, ioQueue, output, and "replacement".

	  // 4. Return output.

	  const sliced = bytes.slice(slice);
	  return new TextDecoder(encoding).decode(sliced)
	}

	/**
	 * @see https://encoding.spec.whatwg.org/#bom-sniff
	 * @param {Uint8Array} ioQueue
	 */
	function BOMSniffing (ioQueue) {
	  // 1. Let BOM be the result of peeking 3 bytes from ioQueue,
	  //    converted to a byte sequence.
	  const [a, b, c] = ioQueue;

	  // 2. For each of the rows in the table below, starting with
	  //    the first one and going down, if BOM starts with the
	  //    bytes given in the first column, then return the
	  //    encoding given in the cell in the second column of that
	  //    row. Otherwise, return null.
	  if (a === 0xEF && b === 0xBB && c === 0xBF) {
	    return 'UTF-8'
	  } else if (a === 0xFE && b === 0xFF) {
	    return 'UTF-16BE'
	  } else if (a === 0xFF && b === 0xFE) {
	    return 'UTF-16LE'
	  }

	  return null
	}

	/**
	 * @param {Uint8Array[]} sequences
	 */
	function combineByteSequences (sequences) {
	  const size = sequences.reduce((a, b) => {
	    return a + b.byteLength
	  }, 0);

	  let offset = 0;

	  return sequences.reduce((a, b) => {
	    a.set(b, offset);
	    offset += b.byteLength;
	    return a
	  }, new Uint8Array(size))
	}

	util$4 = {
	  staticPropertyDescriptors,
	  readOperation,
	  fireAProgressEvent
	};
	return util$4;
}

var filereader;
var hasRequiredFilereader;

function requireFilereader () {
	if (hasRequiredFilereader) return filereader;
	hasRequiredFilereader = 1;

	const {
	  staticPropertyDescriptors,
	  readOperation,
	  fireAProgressEvent
	} = requireUtil$5();
	const {
	  kState,
	  kError,
	  kResult,
	  kEvents,
	  kAborted
	} = requireSymbols$3();
	const { webidl } = requireWebidl();
	const { kEnumerableProperty } = requireUtil$8();

	class FileReader extends EventTarget {
	  constructor () {
	    super();

	    this[kState] = 'empty';
	    this[kResult] = null;
	    this[kError] = null;
	    this[kEvents] = {
	      loadend: null,
	      error: null,
	      abort: null,
	      load: null,
	      progress: null,
	      loadstart: null
	    };
	  }

	  /**
	   * @see https://w3c.github.io/FileAPI/#dfn-readAsArrayBuffer
	   * @param {import('buffer').Blob} blob
	   */
	  readAsArrayBuffer (blob) {
	    webidl.brandCheck(this, FileReader);

	    webidl.argumentLengthCheck(arguments, 1, 'FileReader.readAsArrayBuffer');

	    blob = webidl.converters.Blob(blob, { strict: false });

	    // The readAsArrayBuffer(blob) method, when invoked,
	    // must initiate a read operation for blob with ArrayBuffer.
	    readOperation(this, blob, 'ArrayBuffer');
	  }

	  /**
	   * @see https://w3c.github.io/FileAPI/#readAsBinaryString
	   * @param {import('buffer').Blob} blob
	   */
	  readAsBinaryString (blob) {
	    webidl.brandCheck(this, FileReader);

	    webidl.argumentLengthCheck(arguments, 1, 'FileReader.readAsBinaryString');

	    blob = webidl.converters.Blob(blob, { strict: false });

	    // The readAsBinaryString(blob) method, when invoked,
	    // must initiate a read operation for blob with BinaryString.
	    readOperation(this, blob, 'BinaryString');
	  }

	  /**
	   * @see https://w3c.github.io/FileAPI/#readAsDataText
	   * @param {import('buffer').Blob} blob
	   * @param {string?} encoding
	   */
	  readAsText (blob, encoding = undefined) {
	    webidl.brandCheck(this, FileReader);

	    webidl.argumentLengthCheck(arguments, 1, 'FileReader.readAsText');

	    blob = webidl.converters.Blob(blob, { strict: false });

	    if (encoding !== undefined) {
	      encoding = webidl.converters.DOMString(encoding, 'FileReader.readAsText', 'encoding');
	    }

	    // The readAsText(blob, encoding) method, when invoked,
	    // must initiate a read operation for blob with Text and encoding.
	    readOperation(this, blob, 'Text', encoding);
	  }

	  /**
	   * @see https://w3c.github.io/FileAPI/#dfn-readAsDataURL
	   * @param {import('buffer').Blob} blob
	   */
	  readAsDataURL (blob) {
	    webidl.brandCheck(this, FileReader);

	    webidl.argumentLengthCheck(arguments, 1, 'FileReader.readAsDataURL');

	    blob = webidl.converters.Blob(blob, { strict: false });

	    // The readAsDataURL(blob) method, when invoked, must
	    // initiate a read operation for blob with DataURL.
	    readOperation(this, blob, 'DataURL');
	  }

	  /**
	   * @see https://w3c.github.io/FileAPI/#dfn-abort
	   */
	  abort () {
	    // 1. If this's state is "empty" or if this's state is
	    //    "done" set this's result to null and terminate
	    //    this algorithm.
	    if (this[kState] === 'empty' || this[kState] === 'done') {
	      this[kResult] = null;
	      return
	    }

	    // 2. If this's state is "loading" set this's state to
	    //    "done" and set this's result to null.
	    if (this[kState] === 'loading') {
	      this[kState] = 'done';
	      this[kResult] = null;
	    }

	    // 3. If there are any tasks from this on the file reading
	    //    task source in an affiliated task queue, then remove
	    //    those tasks from that task queue.
	    this[kAborted] = true;

	    // 4. Terminate the algorithm for the read method being processed.
	    // TODO

	    // 5. Fire a progress event called abort at this.
	    fireAProgressEvent('abort', this);

	    // 6. If this's state is not "loading", fire a progress
	    //    event called loadend at this.
	    if (this[kState] !== 'loading') {
	      fireAProgressEvent('loadend', this);
	    }
	  }

	  /**
	   * @see https://w3c.github.io/FileAPI/#dom-filereader-readystate
	   */
	  get readyState () {
	    webidl.brandCheck(this, FileReader);

	    switch (this[kState]) {
	      case 'empty': return this.EMPTY
	      case 'loading': return this.LOADING
	      case 'done': return this.DONE
	    }
	  }

	  /**
	   * @see https://w3c.github.io/FileAPI/#dom-filereader-result
	   */
	  get result () {
	    webidl.brandCheck(this, FileReader);

	    // The result attribute’s getter, when invoked, must return
	    // this's result.
	    return this[kResult]
	  }

	  /**
	   * @see https://w3c.github.io/FileAPI/#dom-filereader-error
	   */
	  get error () {
	    webidl.brandCheck(this, FileReader);

	    // The error attribute’s getter, when invoked, must return
	    // this's error.
	    return this[kError]
	  }

	  get onloadend () {
	    webidl.brandCheck(this, FileReader);

	    return this[kEvents].loadend
	  }

	  set onloadend (fn) {
	    webidl.brandCheck(this, FileReader);

	    if (this[kEvents].loadend) {
	      this.removeEventListener('loadend', this[kEvents].loadend);
	    }

	    if (typeof fn === 'function') {
	      this[kEvents].loadend = fn;
	      this.addEventListener('loadend', fn);
	    } else {
	      this[kEvents].loadend = null;
	    }
	  }

	  get onerror () {
	    webidl.brandCheck(this, FileReader);

	    return this[kEvents].error
	  }

	  set onerror (fn) {
	    webidl.brandCheck(this, FileReader);

	    if (this[kEvents].error) {
	      this.removeEventListener('error', this[kEvents].error);
	    }

	    if (typeof fn === 'function') {
	      this[kEvents].error = fn;
	      this.addEventListener('error', fn);
	    } else {
	      this[kEvents].error = null;
	    }
	  }

	  get onloadstart () {
	    webidl.brandCheck(this, FileReader);

	    return this[kEvents].loadstart
	  }

	  set onloadstart (fn) {
	    webidl.brandCheck(this, FileReader);

	    if (this[kEvents].loadstart) {
	      this.removeEventListener('loadstart', this[kEvents].loadstart);
	    }

	    if (typeof fn === 'function') {
	      this[kEvents].loadstart = fn;
	      this.addEventListener('loadstart', fn);
	    } else {
	      this[kEvents].loadstart = null;
	    }
	  }

	  get onprogress () {
	    webidl.brandCheck(this, FileReader);

	    return this[kEvents].progress
	  }

	  set onprogress (fn) {
	    webidl.brandCheck(this, FileReader);

	    if (this[kEvents].progress) {
	      this.removeEventListener('progress', this[kEvents].progress);
	    }

	    if (typeof fn === 'function') {
	      this[kEvents].progress = fn;
	      this.addEventListener('progress', fn);
	    } else {
	      this[kEvents].progress = null;
	    }
	  }

	  get onload () {
	    webidl.brandCheck(this, FileReader);

	    return this[kEvents].load
	  }

	  set onload (fn) {
	    webidl.brandCheck(this, FileReader);

	    if (this[kEvents].load) {
	      this.removeEventListener('load', this[kEvents].load);
	    }

	    if (typeof fn === 'function') {
	      this[kEvents].load = fn;
	      this.addEventListener('load', fn);
	    } else {
	      this[kEvents].load = null;
	    }
	  }

	  get onabort () {
	    webidl.brandCheck(this, FileReader);

	    return this[kEvents].abort
	  }

	  set onabort (fn) {
	    webidl.brandCheck(this, FileReader);

	    if (this[kEvents].abort) {
	      this.removeEventListener('abort', this[kEvents].abort);
	    }

	    if (typeof fn === 'function') {
	      this[kEvents].abort = fn;
	      this.addEventListener('abort', fn);
	    } else {
	      this[kEvents].abort = null;
	    }
	  }
	}

	// https://w3c.github.io/FileAPI/#dom-filereader-empty
	FileReader.EMPTY = FileReader.prototype.EMPTY = 0;
	// https://w3c.github.io/FileAPI/#dom-filereader-loading
	FileReader.LOADING = FileReader.prototype.LOADING = 1;
	// https://w3c.github.io/FileAPI/#dom-filereader-done
	FileReader.DONE = FileReader.prototype.DONE = 2;

	Object.defineProperties(FileReader.prototype, {
	  EMPTY: staticPropertyDescriptors,
	  LOADING: staticPropertyDescriptors,
	  DONE: staticPropertyDescriptors,
	  readAsArrayBuffer: kEnumerableProperty,
	  readAsBinaryString: kEnumerableProperty,
	  readAsText: kEnumerableProperty,
	  readAsDataURL: kEnumerableProperty,
	  abort: kEnumerableProperty,
	  readyState: kEnumerableProperty,
	  result: kEnumerableProperty,
	  error: kEnumerableProperty,
	  onloadstart: kEnumerableProperty,
	  onprogress: kEnumerableProperty,
	  onload: kEnumerableProperty,
	  onabort: kEnumerableProperty,
	  onerror: kEnumerableProperty,
	  onloadend: kEnumerableProperty,
	  [Symbol.toStringTag]: {
	    value: 'FileReader',
	    writable: false,
	    enumerable: false,
	    configurable: true
	  }
	});

	Object.defineProperties(FileReader, {
	  EMPTY: staticPropertyDescriptors,
	  LOADING: staticPropertyDescriptors,
	  DONE: staticPropertyDescriptors
	});

	filereader = {
	  FileReader
	};
	return filereader;
}

var symbols$1;
var hasRequiredSymbols$2;

function requireSymbols$2 () {
	if (hasRequiredSymbols$2) return symbols$1;
	hasRequiredSymbols$2 = 1;

	symbols$1 = {
	  kConstruct: requireSymbols$5().kConstruct
	};
	return symbols$1;
}

var util$3;
var hasRequiredUtil$4;

function requireUtil$4 () {
	if (hasRequiredUtil$4) return util$3;
	hasRequiredUtil$4 = 1;

	const assert = require$$0$7;
	const { URLSerializer } = requireDataUrl();
	const { isValidHeaderName } = requireUtil$7();

	/**
	 * @see https://url.spec.whatwg.org/#concept-url-equals
	 * @param {URL} A
	 * @param {URL} B
	 * @param {boolean | undefined} excludeFragment
	 * @returns {boolean}
	 */
	function urlEquals (A, B, excludeFragment = false) {
	  const serializedA = URLSerializer(A, excludeFragment);

	  const serializedB = URLSerializer(B, excludeFragment);

	  return serializedA === serializedB
	}

	/**
	 * @see https://github.com/chromium/chromium/blob/694d20d134cb553d8d89e5500b9148012b1ba299/content/browser/cache_storage/cache_storage_cache.cc#L260-L262
	 * @param {string} header
	 */
	function getFieldValues (header) {
	  assert(header !== null);

	  const values = [];

	  for (let value of header.split(',')) {
	    value = value.trim();

	    if (isValidHeaderName(value)) {
	      values.push(value);
	    }
	  }

	  return values
	}

	util$3 = {
	  urlEquals,
	  getFieldValues
	};
	return util$3;
}

var cache;
var hasRequiredCache;

function requireCache () {
	if (hasRequiredCache) return cache;
	hasRequiredCache = 1;

	const { kConstruct } = requireSymbols$2();
	const { urlEquals, getFieldValues } = requireUtil$4();
	const { kEnumerableProperty, isDisturbed } = requireUtil$8();
	const { webidl } = requireWebidl();
	const { Response, cloneResponse, fromInnerResponse } = requireResponse();
	const { Request, fromInnerRequest } = requireRequest();
	const { kState } = requireSymbols$4();
	const { fetching } = requireFetch();
	const { urlIsHttpHttpsScheme, createDeferredPromise, readAllBytes } = requireUtil$7();
	const assert = require$$0$7;

	/**
	 * @see https://w3c.github.io/ServiceWorker/#dfn-cache-batch-operation
	 * @typedef {Object} CacheBatchOperation
	 * @property {'delete' | 'put'} type
	 * @property {any} request
	 * @property {any} response
	 * @property {import('../../types/cache').CacheQueryOptions} options
	 */

	/**
	 * @see https://w3c.github.io/ServiceWorker/#dfn-request-response-list
	 * @typedef {[any, any][]} requestResponseList
	 */

	class Cache {
	  /**
	   * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-request-response-list
	   * @type {requestResponseList}
	   */
	  #relevantRequestResponseList

	  constructor () {
	    if (arguments[0] !== kConstruct) {
	      webidl.illegalConstructor();
	    }

	    this.#relevantRequestResponseList = arguments[1];
	  }

	  async match (request, options = {}) {
	    webidl.brandCheck(this, Cache);

	    const prefix = 'Cache.match';
	    webidl.argumentLengthCheck(arguments, 1, prefix);

	    request = webidl.converters.RequestInfo(request, prefix, 'request');
	    options = webidl.converters.CacheQueryOptions(options, prefix, 'options');

	    const p = this.#internalMatchAll(request, options, 1);

	    if (p.length === 0) {
	      return
	    }

	    return p[0]
	  }

	  async matchAll (request = undefined, options = {}) {
	    webidl.brandCheck(this, Cache);

	    const prefix = 'Cache.matchAll';
	    if (request !== undefined) request = webidl.converters.RequestInfo(request, prefix, 'request');
	    options = webidl.converters.CacheQueryOptions(options, prefix, 'options');

	    return this.#internalMatchAll(request, options)
	  }

	  async add (request) {
	    webidl.brandCheck(this, Cache);

	    const prefix = 'Cache.add';
	    webidl.argumentLengthCheck(arguments, 1, prefix);

	    request = webidl.converters.RequestInfo(request, prefix, 'request');

	    // 1.
	    const requests = [request];

	    // 2.
	    const responseArrayPromise = this.addAll(requests);

	    // 3.
	    return await responseArrayPromise
	  }

	  async addAll (requests) {
	    webidl.brandCheck(this, Cache);

	    const prefix = 'Cache.addAll';
	    webidl.argumentLengthCheck(arguments, 1, prefix);

	    // 1.
	    const responsePromises = [];

	    // 2.
	    const requestList = [];

	    // 3.
	    for (let request of requests) {
	      if (request === undefined) {
	        throw webidl.errors.conversionFailed({
	          prefix,
	          argument: 'Argument 1',
	          types: ['undefined is not allowed']
	        })
	      }

	      request = webidl.converters.RequestInfo(request);

	      if (typeof request === 'string') {
	        continue
	      }

	      // 3.1
	      const r = request[kState];

	      // 3.2
	      if (!urlIsHttpHttpsScheme(r.url) || r.method !== 'GET') {
	        throw webidl.errors.exception({
	          header: prefix,
	          message: 'Expected http/s scheme when method is not GET.'
	        })
	      }
	    }

	    // 4.
	    /** @type {ReturnType<typeof fetching>[]} */
	    const fetchControllers = [];

	    // 5.
	    for (const request of requests) {
	      // 5.1
	      const r = new Request(request)[kState];

	      // 5.2
	      if (!urlIsHttpHttpsScheme(r.url)) {
	        throw webidl.errors.exception({
	          header: prefix,
	          message: 'Expected http/s scheme.'
	        })
	      }

	      // 5.4
	      r.initiator = 'fetch';
	      r.destination = 'subresource';

	      // 5.5
	      requestList.push(r);

	      // 5.6
	      const responsePromise = createDeferredPromise();

	      // 5.7
	      fetchControllers.push(fetching({
	        request: r,
	        processResponse (response) {
	          // 1.
	          if (response.type === 'error' || response.status === 206 || response.status < 200 || response.status > 299) {
	            responsePromise.reject(webidl.errors.exception({
	              header: 'Cache.addAll',
	              message: 'Received an invalid status code or the request failed.'
	            }));
	          } else if (response.headersList.contains('vary')) { // 2.
	            // 2.1
	            const fieldValues = getFieldValues(response.headersList.get('vary'));

	            // 2.2
	            for (const fieldValue of fieldValues) {
	              // 2.2.1
	              if (fieldValue === '*') {
	                responsePromise.reject(webidl.errors.exception({
	                  header: 'Cache.addAll',
	                  message: 'invalid vary field value'
	                }));

	                for (const controller of fetchControllers) {
	                  controller.abort();
	                }

	                return
	              }
	            }
	          }
	        },
	        processResponseEndOfBody (response) {
	          // 1.
	          if (response.aborted) {
	            responsePromise.reject(new DOMException('aborted', 'AbortError'));
	            return
	          }

	          // 2.
	          responsePromise.resolve(response);
	        }
	      }));

	      // 5.8
	      responsePromises.push(responsePromise.promise);
	    }

	    // 6.
	    const p = Promise.all(responsePromises);

	    // 7.
	    const responses = await p;

	    // 7.1
	    const operations = [];

	    // 7.2
	    let index = 0;

	    // 7.3
	    for (const response of responses) {
	      // 7.3.1
	      /** @type {CacheBatchOperation} */
	      const operation = {
	        type: 'put', // 7.3.2
	        request: requestList[index], // 7.3.3
	        response // 7.3.4
	      };

	      operations.push(operation); // 7.3.5

	      index++; // 7.3.6
	    }

	    // 7.5
	    const cacheJobPromise = createDeferredPromise();

	    // 7.6.1
	    let errorData = null;

	    // 7.6.2
	    try {
	      this.#batchCacheOperations(operations);
	    } catch (e) {
	      errorData = e;
	    }

	    // 7.6.3
	    queueMicrotask(() => {
	      // 7.6.3.1
	      if (errorData === null) {
	        cacheJobPromise.resolve(undefined);
	      } else {
	        // 7.6.3.2
	        cacheJobPromise.reject(errorData);
	      }
	    });

	    // 7.7
	    return cacheJobPromise.promise
	  }

	  async put (request, response) {
	    webidl.brandCheck(this, Cache);

	    const prefix = 'Cache.put';
	    webidl.argumentLengthCheck(arguments, 2, prefix);

	    request = webidl.converters.RequestInfo(request, prefix, 'request');
	    response = webidl.converters.Response(response, prefix, 'response');

	    // 1.
	    let innerRequest = null;

	    // 2.
	    if (request instanceof Request) {
	      innerRequest = request[kState];
	    } else { // 3.
	      innerRequest = new Request(request)[kState];
	    }

	    // 4.
	    if (!urlIsHttpHttpsScheme(innerRequest.url) || innerRequest.method !== 'GET') {
	      throw webidl.errors.exception({
	        header: prefix,
	        message: 'Expected an http/s scheme when method is not GET'
	      })
	    }

	    // 5.
	    const innerResponse = response[kState];

	    // 6.
	    if (innerResponse.status === 206) {
	      throw webidl.errors.exception({
	        header: prefix,
	        message: 'Got 206 status'
	      })
	    }

	    // 7.
	    if (innerResponse.headersList.contains('vary')) {
	      // 7.1.
	      const fieldValues = getFieldValues(innerResponse.headersList.get('vary'));

	      // 7.2.
	      for (const fieldValue of fieldValues) {
	        // 7.2.1
	        if (fieldValue === '*') {
	          throw webidl.errors.exception({
	            header: prefix,
	            message: 'Got * vary field value'
	          })
	        }
	      }
	    }

	    // 8.
	    if (innerResponse.body && (isDisturbed(innerResponse.body.stream) || innerResponse.body.stream.locked)) {
	      throw webidl.errors.exception({
	        header: prefix,
	        message: 'Response body is locked or disturbed'
	      })
	    }

	    // 9.
	    const clonedResponse = cloneResponse(innerResponse);

	    // 10.
	    const bodyReadPromise = createDeferredPromise();

	    // 11.
	    if (innerResponse.body != null) {
	      // 11.1
	      const stream = innerResponse.body.stream;

	      // 11.2
	      const reader = stream.getReader();

	      // 11.3
	      readAllBytes(reader).then(bodyReadPromise.resolve, bodyReadPromise.reject);
	    } else {
	      bodyReadPromise.resolve(undefined);
	    }

	    // 12.
	    /** @type {CacheBatchOperation[]} */
	    const operations = [];

	    // 13.
	    /** @type {CacheBatchOperation} */
	    const operation = {
	      type: 'put', // 14.
	      request: innerRequest, // 15.
	      response: clonedResponse // 16.
	    };

	    // 17.
	    operations.push(operation);

	    // 19.
	    const bytes = await bodyReadPromise.promise;

	    if (clonedResponse.body != null) {
	      clonedResponse.body.source = bytes;
	    }

	    // 19.1
	    const cacheJobPromise = createDeferredPromise();

	    // 19.2.1
	    let errorData = null;

	    // 19.2.2
	    try {
	      this.#batchCacheOperations(operations);
	    } catch (e) {
	      errorData = e;
	    }

	    // 19.2.3
	    queueMicrotask(() => {
	      // 19.2.3.1
	      if (errorData === null) {
	        cacheJobPromise.resolve();
	      } else { // 19.2.3.2
	        cacheJobPromise.reject(errorData);
	      }
	    });

	    return cacheJobPromise.promise
	  }

	  async delete (request, options = {}) {
	    webidl.brandCheck(this, Cache);

	    const prefix = 'Cache.delete';
	    webidl.argumentLengthCheck(arguments, 1, prefix);

	    request = webidl.converters.RequestInfo(request, prefix, 'request');
	    options = webidl.converters.CacheQueryOptions(options, prefix, 'options');

	    /**
	     * @type {Request}
	     */
	    let r = null;

	    if (request instanceof Request) {
	      r = request[kState];

	      if (r.method !== 'GET' && !options.ignoreMethod) {
	        return false
	      }
	    } else {
	      assert(typeof request === 'string');

	      r = new Request(request)[kState];
	    }

	    /** @type {CacheBatchOperation[]} */
	    const operations = [];

	    /** @type {CacheBatchOperation} */
	    const operation = {
	      type: 'delete',
	      request: r,
	      options
	    };

	    operations.push(operation);

	    const cacheJobPromise = createDeferredPromise();

	    let errorData = null;
	    let requestResponses;

	    try {
	      requestResponses = this.#batchCacheOperations(operations);
	    } catch (e) {
	      errorData = e;
	    }

	    queueMicrotask(() => {
	      if (errorData === null) {
	        cacheJobPromise.resolve(!!requestResponses?.length);
	      } else {
	        cacheJobPromise.reject(errorData);
	      }
	    });

	    return cacheJobPromise.promise
	  }

	  /**
	   * @see https://w3c.github.io/ServiceWorker/#dom-cache-keys
	   * @param {any} request
	   * @param {import('../../types/cache').CacheQueryOptions} options
	   * @returns {Promise<readonly Request[]>}
	   */
	  async keys (request = undefined, options = {}) {
	    webidl.brandCheck(this, Cache);

	    const prefix = 'Cache.keys';

	    if (request !== undefined) request = webidl.converters.RequestInfo(request, prefix, 'request');
	    options = webidl.converters.CacheQueryOptions(options, prefix, 'options');

	    // 1.
	    let r = null;

	    // 2.
	    if (request !== undefined) {
	      // 2.1
	      if (request instanceof Request) {
	        // 2.1.1
	        r = request[kState];

	        // 2.1.2
	        if (r.method !== 'GET' && !options.ignoreMethod) {
	          return []
	        }
	      } else if (typeof request === 'string') { // 2.2
	        r = new Request(request)[kState];
	      }
	    }

	    // 4.
	    const promise = createDeferredPromise();

	    // 5.
	    // 5.1
	    const requests = [];

	    // 5.2
	    if (request === undefined) {
	      // 5.2.1
	      for (const requestResponse of this.#relevantRequestResponseList) {
	        // 5.2.1.1
	        requests.push(requestResponse[0]);
	      }
	    } else { // 5.3
	      // 5.3.1
	      const requestResponses = this.#queryCache(r, options);

	      // 5.3.2
	      for (const requestResponse of requestResponses) {
	        // 5.3.2.1
	        requests.push(requestResponse[0]);
	      }
	    }

	    // 5.4
	    queueMicrotask(() => {
	      // 5.4.1
	      const requestList = [];

	      // 5.4.2
	      for (const request of requests) {
	        const requestObject = fromInnerRequest(
	          request,
	          new AbortController().signal,
	          'immutable'
	        );
	        // 5.4.2.1
	        requestList.push(requestObject);
	      }

	      // 5.4.3
	      promise.resolve(Object.freeze(requestList));
	    });

	    return promise.promise
	  }

	  /**
	   * @see https://w3c.github.io/ServiceWorker/#batch-cache-operations-algorithm
	   * @param {CacheBatchOperation[]} operations
	   * @returns {requestResponseList}
	   */
	  #batchCacheOperations (operations) {
	    // 1.
	    const cache = this.#relevantRequestResponseList;

	    // 2.
	    const backupCache = [...cache];

	    // 3.
	    const addedItems = [];

	    // 4.1
	    const resultList = [];

	    try {
	      // 4.2
	      for (const operation of operations) {
	        // 4.2.1
	        if (operation.type !== 'delete' && operation.type !== 'put') {
	          throw webidl.errors.exception({
	            header: 'Cache.#batchCacheOperations',
	            message: 'operation type does not match "delete" or "put"'
	          })
	        }

	        // 4.2.2
	        if (operation.type === 'delete' && operation.response != null) {
	          throw webidl.errors.exception({
	            header: 'Cache.#batchCacheOperations',
	            message: 'delete operation should not have an associated response'
	          })
	        }

	        // 4.2.3
	        if (this.#queryCache(operation.request, operation.options, addedItems).length) {
	          throw new DOMException('???', 'InvalidStateError')
	        }

	        // 4.2.4
	        let requestResponses;

	        // 4.2.5
	        if (operation.type === 'delete') {
	          // 4.2.5.1
	          requestResponses = this.#queryCache(operation.request, operation.options);

	          // TODO: the spec is wrong, this is needed to pass WPTs
	          if (requestResponses.length === 0) {
	            return []
	          }

	          // 4.2.5.2
	          for (const requestResponse of requestResponses) {
	            const idx = cache.indexOf(requestResponse);
	            assert(idx !== -1);

	            // 4.2.5.2.1
	            cache.splice(idx, 1);
	          }
	        } else if (operation.type === 'put') { // 4.2.6
	          // 4.2.6.1
	          if (operation.response == null) {
	            throw webidl.errors.exception({
	              header: 'Cache.#batchCacheOperations',
	              message: 'put operation should have an associated response'
	            })
	          }

	          // 4.2.6.2
	          const r = operation.request;

	          // 4.2.6.3
	          if (!urlIsHttpHttpsScheme(r.url)) {
	            throw webidl.errors.exception({
	              header: 'Cache.#batchCacheOperations',
	              message: 'expected http or https scheme'
	            })
	          }

	          // 4.2.6.4
	          if (r.method !== 'GET') {
	            throw webidl.errors.exception({
	              header: 'Cache.#batchCacheOperations',
	              message: 'not get method'
	            })
	          }

	          // 4.2.6.5
	          if (operation.options != null) {
	            throw webidl.errors.exception({
	              header: 'Cache.#batchCacheOperations',
	              message: 'options must not be defined'
	            })
	          }

	          // 4.2.6.6
	          requestResponses = this.#queryCache(operation.request);

	          // 4.2.6.7
	          for (const requestResponse of requestResponses) {
	            const idx = cache.indexOf(requestResponse);
	            assert(idx !== -1);

	            // 4.2.6.7.1
	            cache.splice(idx, 1);
	          }

	          // 4.2.6.8
	          cache.push([operation.request, operation.response]);

	          // 4.2.6.10
	          addedItems.push([operation.request, operation.response]);
	        }

	        // 4.2.7
	        resultList.push([operation.request, operation.response]);
	      }

	      // 4.3
	      return resultList
	    } catch (e) { // 5.
	      // 5.1
	      this.#relevantRequestResponseList.length = 0;

	      // 5.2
	      this.#relevantRequestResponseList = backupCache;

	      // 5.3
	      throw e
	    }
	  }

	  /**
	   * @see https://w3c.github.io/ServiceWorker/#query-cache
	   * @param {any} requestQuery
	   * @param {import('../../types/cache').CacheQueryOptions} options
	   * @param {requestResponseList} targetStorage
	   * @returns {requestResponseList}
	   */
	  #queryCache (requestQuery, options, targetStorage) {
	    /** @type {requestResponseList} */
	    const resultList = [];

	    const storage = targetStorage ?? this.#relevantRequestResponseList;

	    for (const requestResponse of storage) {
	      const [cachedRequest, cachedResponse] = requestResponse;
	      if (this.#requestMatchesCachedItem(requestQuery, cachedRequest, cachedResponse, options)) {
	        resultList.push(requestResponse);
	      }
	    }

	    return resultList
	  }

	  /**
	   * @see https://w3c.github.io/ServiceWorker/#request-matches-cached-item-algorithm
	   * @param {any} requestQuery
	   * @param {any} request
	   * @param {any | null} response
	   * @param {import('../../types/cache').CacheQueryOptions | undefined} options
	   * @returns {boolean}
	   */
	  #requestMatchesCachedItem (requestQuery, request, response = null, options) {
	    // if (options?.ignoreMethod === false && request.method === 'GET') {
	    //   return false
	    // }

	    const queryURL = new URL(requestQuery.url);

	    const cachedURL = new URL(request.url);

	    if (options?.ignoreSearch) {
	      cachedURL.search = '';

	      queryURL.search = '';
	    }

	    if (!urlEquals(queryURL, cachedURL, true)) {
	      return false
	    }

	    if (
	      response == null ||
	      options?.ignoreVary ||
	      !response.headersList.contains('vary')
	    ) {
	      return true
	    }

	    const fieldValues = getFieldValues(response.headersList.get('vary'));

	    for (const fieldValue of fieldValues) {
	      if (fieldValue === '*') {
	        return false
	      }

	      const requestValue = request.headersList.get(fieldValue);
	      const queryValue = requestQuery.headersList.get(fieldValue);

	      // If one has the header and the other doesn't, or one has
	      // a different value than the other, return false
	      if (requestValue !== queryValue) {
	        return false
	      }
	    }

	    return true
	  }

	  #internalMatchAll (request, options, maxResponses = Infinity) {
	    // 1.
	    let r = null;

	    // 2.
	    if (request !== undefined) {
	      if (request instanceof Request) {
	        // 2.1.1
	        r = request[kState];

	        // 2.1.2
	        if (r.method !== 'GET' && !options.ignoreMethod) {
	          return []
	        }
	      } else if (typeof request === 'string') {
	        // 2.2.1
	        r = new Request(request)[kState];
	      }
	    }

	    // 5.
	    // 5.1
	    const responses = [];

	    // 5.2
	    if (request === undefined) {
	      // 5.2.1
	      for (const requestResponse of this.#relevantRequestResponseList) {
	        responses.push(requestResponse[1]);
	      }
	    } else { // 5.3
	      // 5.3.1
	      const requestResponses = this.#queryCache(r, options);

	      // 5.3.2
	      for (const requestResponse of requestResponses) {
	        responses.push(requestResponse[1]);
	      }
	    }

	    // 5.4
	    // We don't implement CORs so we don't need to loop over the responses, yay!

	    // 5.5.1
	    const responseList = [];

	    // 5.5.2
	    for (const response of responses) {
	      // 5.5.2.1
	      const responseObject = fromInnerResponse(response, 'immutable');

	      responseList.push(responseObject.clone());

	      if (responseList.length >= maxResponses) {
	        break
	      }
	    }

	    // 6.
	    return Object.freeze(responseList)
	  }
	}

	Object.defineProperties(Cache.prototype, {
	  [Symbol.toStringTag]: {
	    value: 'Cache',
	    configurable: true
	  },
	  match: kEnumerableProperty,
	  matchAll: kEnumerableProperty,
	  add: kEnumerableProperty,
	  addAll: kEnumerableProperty,
	  put: kEnumerableProperty,
	  delete: kEnumerableProperty,
	  keys: kEnumerableProperty
	});

	const cacheQueryOptionConverters = [
	  {
	    key: 'ignoreSearch',
	    converter: webidl.converters.boolean,
	    defaultValue: () => false
	  },
	  {
	    key: 'ignoreMethod',
	    converter: webidl.converters.boolean,
	    defaultValue: () => false
	  },
	  {
	    key: 'ignoreVary',
	    converter: webidl.converters.boolean,
	    defaultValue: () => false
	  }
	];

	webidl.converters.CacheQueryOptions = webidl.dictionaryConverter(cacheQueryOptionConverters);

	webidl.converters.MultiCacheQueryOptions = webidl.dictionaryConverter([
	  ...cacheQueryOptionConverters,
	  {
	    key: 'cacheName',
	    converter: webidl.converters.DOMString
	  }
	]);

	webidl.converters.Response = webidl.interfaceConverter(Response);

	webidl.converters['sequence<RequestInfo>'] = webidl.sequenceConverter(
	  webidl.converters.RequestInfo
	);

	cache = {
	  Cache
	};
	return cache;
}

var cachestorage;
var hasRequiredCachestorage;

function requireCachestorage () {
	if (hasRequiredCachestorage) return cachestorage;
	hasRequiredCachestorage = 1;

	const { kConstruct } = requireSymbols$2();
	const { Cache } = requireCache();
	const { webidl } = requireWebidl();
	const { kEnumerableProperty } = requireUtil$8();

	class CacheStorage {
	  /**
	   * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-name-to-cache-map
	   * @type {Map<string, import('./cache').requestResponseList}
	   */
	  #caches = new Map()

	  constructor () {
	    if (arguments[0] !== kConstruct) {
	      webidl.illegalConstructor();
	    }
	  }

	  async match (request, options = {}) {
	    webidl.brandCheck(this, CacheStorage);
	    webidl.argumentLengthCheck(arguments, 1, 'CacheStorage.match');

	    request = webidl.converters.RequestInfo(request);
	    options = webidl.converters.MultiCacheQueryOptions(options);

	    // 1.
	    if (options.cacheName != null) {
	      // 1.1.1.1
	      if (this.#caches.has(options.cacheName)) {
	        // 1.1.1.1.1
	        const cacheList = this.#caches.get(options.cacheName);
	        const cache = new Cache(kConstruct, cacheList);

	        return await cache.match(request, options)
	      }
	    } else { // 2.
	      // 2.2
	      for (const cacheList of this.#caches.values()) {
	        const cache = new Cache(kConstruct, cacheList);

	        // 2.2.1.2
	        const response = await cache.match(request, options);

	        if (response !== undefined) {
	          return response
	        }
	      }
	    }
	  }

	  /**
	   * @see https://w3c.github.io/ServiceWorker/#cache-storage-has
	   * @param {string} cacheName
	   * @returns {Promise<boolean>}
	   */
	  async has (cacheName) {
	    webidl.brandCheck(this, CacheStorage);

	    const prefix = 'CacheStorage.has';
	    webidl.argumentLengthCheck(arguments, 1, prefix);

	    cacheName = webidl.converters.DOMString(cacheName, prefix, 'cacheName');

	    // 2.1.1
	    // 2.2
	    return this.#caches.has(cacheName)
	  }

	  /**
	   * @see https://w3c.github.io/ServiceWorker/#dom-cachestorage-open
	   * @param {string} cacheName
	   * @returns {Promise<Cache>}
	   */
	  async open (cacheName) {
	    webidl.brandCheck(this, CacheStorage);

	    const prefix = 'CacheStorage.open';
	    webidl.argumentLengthCheck(arguments, 1, prefix);

	    cacheName = webidl.converters.DOMString(cacheName, prefix, 'cacheName');

	    // 2.1
	    if (this.#caches.has(cacheName)) {
	      // await caches.open('v1') !== await caches.open('v1')

	      // 2.1.1
	      const cache = this.#caches.get(cacheName);

	      // 2.1.1.1
	      return new Cache(kConstruct, cache)
	    }

	    // 2.2
	    const cache = [];

	    // 2.3
	    this.#caches.set(cacheName, cache);

	    // 2.4
	    return new Cache(kConstruct, cache)
	  }

	  /**
	   * @see https://w3c.github.io/ServiceWorker/#cache-storage-delete
	   * @param {string} cacheName
	   * @returns {Promise<boolean>}
	   */
	  async delete (cacheName) {
	    webidl.brandCheck(this, CacheStorage);

	    const prefix = 'CacheStorage.delete';
	    webidl.argumentLengthCheck(arguments, 1, prefix);

	    cacheName = webidl.converters.DOMString(cacheName, prefix, 'cacheName');

	    return this.#caches.delete(cacheName)
	  }

	  /**
	   * @see https://w3c.github.io/ServiceWorker/#cache-storage-keys
	   * @returns {Promise<string[]>}
	   */
	  async keys () {
	    webidl.brandCheck(this, CacheStorage);

	    // 2.1
	    const keys = this.#caches.keys();

	    // 2.2
	    return [...keys]
	  }
	}

	Object.defineProperties(CacheStorage.prototype, {
	  [Symbol.toStringTag]: {
	    value: 'CacheStorage',
	    configurable: true
	  },
	  match: kEnumerableProperty,
	  has: kEnumerableProperty,
	  open: kEnumerableProperty,
	  delete: kEnumerableProperty,
	  keys: kEnumerableProperty
	});

	cachestorage = {
	  CacheStorage
	};
	return cachestorage;
}

var constants$2;
var hasRequiredConstants$3;

function requireConstants$3 () {
	if (hasRequiredConstants$3) return constants$2;
	hasRequiredConstants$3 = 1;

	// https://wicg.github.io/cookie-store/#cookie-maximum-attribute-value-size
	const maxAttributeValueSize = 1024;

	// https://wicg.github.io/cookie-store/#cookie-maximum-name-value-pair-size
	const maxNameValuePairSize = 4096;

	constants$2 = {
	  maxAttributeValueSize,
	  maxNameValuePairSize
	};
	return constants$2;
}

var util$2;
var hasRequiredUtil$3;

function requireUtil$3 () {
	if (hasRequiredUtil$3) return util$2;
	hasRequiredUtil$3 = 1;

	/**
	 * @param {string} value
	 * @returns {boolean}
	 */
	function isCTLExcludingHtab (value) {
	  for (let i = 0; i < value.length; ++i) {
	    const code = value.charCodeAt(i);

	    if (
	      (code >= 0x00 && code <= 0x08) ||
	      (code >= 0x0A && code <= 0x1F) ||
	      code === 0x7F
	    ) {
	      return true
	    }
	  }
	  return false
	}

	/**
	 CHAR           = <any US-ASCII character (octets 0 - 127)>
	 token          = 1*<any CHAR except CTLs or separators>
	 separators     = "(" | ")" | "<" | ">" | "@"
	                | "," | ";" | ":" | "\" | <">
	                | "/" | "[" | "]" | "?" | "="
	                | "{" | "}" | SP | HT
	 * @param {string} name
	 */
	function validateCookieName (name) {
	  for (let i = 0; i < name.length; ++i) {
	    const code = name.charCodeAt(i);

	    if (
	      code < 0x21 || // exclude CTLs (0-31), SP and HT
	      code > 0x7E || // exclude non-ascii and DEL
	      code === 0x22 || // "
	      code === 0x28 || // (
	      code === 0x29 || // )
	      code === 0x3C || // <
	      code === 0x3E || // >
	      code === 0x40 || // @
	      code === 0x2C || // ,
	      code === 0x3B || // ;
	      code === 0x3A || // :
	      code === 0x5C || // \
	      code === 0x2F || // /
	      code === 0x5B || // [
	      code === 0x5D || // ]
	      code === 0x3F || // ?
	      code === 0x3D || // =
	      code === 0x7B || // {
	      code === 0x7D // }
	    ) {
	      throw new Error('Invalid cookie name')
	    }
	  }
	}

	/**
	 cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )
	 cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E
	                       ; US-ASCII characters excluding CTLs,
	                       ; whitespace DQUOTE, comma, semicolon,
	                       ; and backslash
	 * @param {string} value
	 */
	function validateCookieValue (value) {
	  let len = value.length;
	  let i = 0;

	  // if the value is wrapped in DQUOTE
	  if (value[0] === '"') {
	    if (len === 1 || value[len - 1] !== '"') {
	      throw new Error('Invalid cookie value')
	    }
	    --len;
	    ++i;
	  }

	  while (i < len) {
	    const code = value.charCodeAt(i++);

	    if (
	      code < 0x21 || // exclude CTLs (0-31)
	      code > 0x7E || // non-ascii and DEL (127)
	      code === 0x22 || // "
	      code === 0x2C || // ,
	      code === 0x3B || // ;
	      code === 0x5C // \
	    ) {
	      throw new Error('Invalid cookie value')
	    }
	  }
	}

	/**
	 * path-value        = <any CHAR except CTLs or ";">
	 * @param {string} path
	 */
	function validateCookiePath (path) {
	  for (let i = 0; i < path.length; ++i) {
	    const code = path.charCodeAt(i);

	    if (
	      code < 0x20 || // exclude CTLs (0-31)
	      code === 0x7F || // DEL
	      code === 0x3B // ;
	    ) {
	      throw new Error('Invalid cookie path')
	    }
	  }
	}

	/**
	 * I have no idea why these values aren't allowed to be honest,
	 * but Deno tests these. - Khafra
	 * @param {string} domain
	 */
	function validateCookieDomain (domain) {
	  if (
	    domain.startsWith('-') ||
	    domain.endsWith('.') ||
	    domain.endsWith('-')
	  ) {
	    throw new Error('Invalid cookie domain')
	  }
	}

	const IMFDays = [
	  'Sun', 'Mon', 'Tue', 'Wed',
	  'Thu', 'Fri', 'Sat'
	];

	const IMFMonths = [
	  'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
	  'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'
	];

	const IMFPaddedNumbers = Array(61).fill(0).map((_, i) => i.toString().padStart(2, '0'));

	/**
	 * @see https://www.rfc-editor.org/rfc/rfc7231#section-7.1.1.1
	 * @param {number|Date} date
	  IMF-fixdate  = day-name "," SP date1 SP time-of-day SP GMT
	  ; fixed length/zone/capitalization subset of the format
	  ; see Section 3.3 of [RFC5322]

	  day-name     = %x4D.6F.6E ; "Mon", case-sensitive
	              / %x54.75.65 ; "Tue", case-sensitive
	              / %x57.65.64 ; "Wed", case-sensitive
	              / %x54.68.75 ; "Thu", case-sensitive
	              / %x46.72.69 ; "Fri", case-sensitive
	              / %x53.61.74 ; "Sat", case-sensitive
	              / %x53.75.6E ; "Sun", case-sensitive
	  date1        = day SP month SP year
	                  ; e.g., 02 Jun 1982

	  day          = 2DIGIT
	  month        = %x4A.61.6E ; "Jan", case-sensitive
	              / %x46.65.62 ; "Feb", case-sensitive
	              / %x4D.61.72 ; "Mar", case-sensitive
	              / %x41.70.72 ; "Apr", case-sensitive
	              / %x4D.61.79 ; "May", case-sensitive
	              / %x4A.75.6E ; "Jun", case-sensitive
	              / %x4A.75.6C ; "Jul", case-sensitive
	              / %x41.75.67 ; "Aug", case-sensitive
	              / %x53.65.70 ; "Sep", case-sensitive
	              / %x4F.63.74 ; "Oct", case-sensitive
	              / %x4E.6F.76 ; "Nov", case-sensitive
	              / %x44.65.63 ; "Dec", case-sensitive
	  year         = 4DIGIT

	  GMT          = %x47.4D.54 ; "GMT", case-sensitive

	  time-of-day  = hour ":" minute ":" second
	              ; 00:00:00 - 23:59:60 (leap second)

	  hour         = 2DIGIT
	  minute       = 2DIGIT
	  second       = 2DIGIT
	 */
	function toIMFDate (date) {
	  if (typeof date === 'number') {
	    date = new Date(date);
	  }

	  return `${IMFDays[date.getUTCDay()]}, ${IMFPaddedNumbers[date.getUTCDate()]} ${IMFMonths[date.getUTCMonth()]} ${date.getUTCFullYear()} ${IMFPaddedNumbers[date.getUTCHours()]}:${IMFPaddedNumbers[date.getUTCMinutes()]}:${IMFPaddedNumbers[date.getUTCSeconds()]} GMT`
	}

	/**
	 max-age-av        = "Max-Age=" non-zero-digit *DIGIT
	                       ; In practice, both expires-av and max-age-av
	                       ; are limited to dates representable by the
	                       ; user agent.
	 * @param {number} maxAge
	 */
	function validateCookieMaxAge (maxAge) {
	  if (maxAge < 0) {
	    throw new Error('Invalid cookie max-age')
	  }
	}

	/**
	 * @see https://www.rfc-editor.org/rfc/rfc6265#section-4.1.1
	 * @param {import('./index').Cookie} cookie
	 */
	function stringify (cookie) {
	  if (cookie.name.length === 0) {
	    return null
	  }

	  validateCookieName(cookie.name);
	  validateCookieValue(cookie.value);

	  const out = [`${cookie.name}=${cookie.value}`];

	  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.1
	  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.2
	  if (cookie.name.startsWith('__Secure-')) {
	    cookie.secure = true;
	  }

	  if (cookie.name.startsWith('__Host-')) {
	    cookie.secure = true;
	    cookie.domain = null;
	    cookie.path = '/';
	  }

	  if (cookie.secure) {
	    out.push('Secure');
	  }

	  if (cookie.httpOnly) {
	    out.push('HttpOnly');
	  }

	  if (typeof cookie.maxAge === 'number') {
	    validateCookieMaxAge(cookie.maxAge);
	    out.push(`Max-Age=${cookie.maxAge}`);
	  }

	  if (cookie.domain) {
	    validateCookieDomain(cookie.domain);
	    out.push(`Domain=${cookie.domain}`);
	  }

	  if (cookie.path) {
	    validateCookiePath(cookie.path);
	    out.push(`Path=${cookie.path}`);
	  }

	  if (cookie.expires && cookie.expires.toString() !== 'Invalid Date') {
	    out.push(`Expires=${toIMFDate(cookie.expires)}`);
	  }

	  if (cookie.sameSite) {
	    out.push(`SameSite=${cookie.sameSite}`);
	  }

	  for (const part of cookie.unparsed) {
	    if (!part.includes('=')) {
	      throw new Error('Invalid unparsed')
	    }

	    const [key, ...value] = part.split('=');

	    out.push(`${key.trim()}=${value.join('=')}`);
	  }

	  return out.join('; ')
	}

	util$2 = {
	  isCTLExcludingHtab,
	  validateCookieName,
	  validateCookiePath,
	  validateCookieValue,
	  toIMFDate,
	  stringify
	};
	return util$2;
}

var parse;
var hasRequiredParse;

function requireParse () {
	if (hasRequiredParse) return parse;
	hasRequiredParse = 1;

	const { maxNameValuePairSize, maxAttributeValueSize } = requireConstants$3();
	const { isCTLExcludingHtab } = requireUtil$3();
	const { collectASequenceOfCodePointsFast } = requireDataUrl();
	const assert = require$$0$7;

	/**
	 * @description Parses the field-value attributes of a set-cookie header string.
	 * @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4
	 * @param {string} header
	 * @returns if the header is invalid, null will be returned
	 */
	function parseSetCookie (header) {
	  // 1. If the set-cookie-string contains a %x00-08 / %x0A-1F / %x7F
	  //    character (CTL characters excluding HTAB): Abort these steps and
	  //    ignore the set-cookie-string entirely.
	  if (isCTLExcludingHtab(header)) {
	    return null
	  }

	  let nameValuePair = '';
	  let unparsedAttributes = '';
	  let name = '';
	  let value = '';

	  // 2. If the set-cookie-string contains a %x3B (";") character:
	  if (header.includes(';')) {
	    // 1. The name-value-pair string consists of the characters up to,
	    //    but not including, the first %x3B (";"), and the unparsed-
	    //    attributes consist of the remainder of the set-cookie-string
	    //    (including the %x3B (";") in question).
	    const position = { position: 0 };

	    nameValuePair = collectASequenceOfCodePointsFast(';', header, position);
	    unparsedAttributes = header.slice(position.position);
	  } else {
	    // Otherwise:

	    // 1. The name-value-pair string consists of all the characters
	    //    contained in the set-cookie-string, and the unparsed-
	    //    attributes is the empty string.
	    nameValuePair = header;
	  }

	  // 3. If the name-value-pair string lacks a %x3D ("=") character, then
	  //    the name string is empty, and the value string is the value of
	  //    name-value-pair.
	  if (!nameValuePair.includes('=')) {
	    value = nameValuePair;
	  } else {
	    //    Otherwise, the name string consists of the characters up to, but
	    //    not including, the first %x3D ("=") character, and the (possibly
	    //    empty) value string consists of the characters after the first
	    //    %x3D ("=") character.
	    const position = { position: 0 };
	    name = collectASequenceOfCodePointsFast(
	      '=',
	      nameValuePair,
	      position
	    );
	    value = nameValuePair.slice(position.position + 1);
	  }

	  // 4. Remove any leading or trailing WSP characters from the name
	  //    string and the value string.
	  name = name.trim();
	  value = value.trim();

	  // 5. If the sum of the lengths of the name string and the value string
	  //    is more than 4096 octets, abort these steps and ignore the set-
	  //    cookie-string entirely.
	  if (name.length + value.length > maxNameValuePairSize) {
	    return null
	  }

	  // 6. The cookie-name is the name string, and the cookie-value is the
	  //    value string.
	  return {
	    name, value, ...parseUnparsedAttributes(unparsedAttributes)
	  }
	}

	/**
	 * Parses the remaining attributes of a set-cookie header
	 * @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4
	 * @param {string} unparsedAttributes
	 * @param {[Object.<string, unknown>]={}} cookieAttributeList
	 */
	function parseUnparsedAttributes (unparsedAttributes, cookieAttributeList = {}) {
	  // 1. If the unparsed-attributes string is empty, skip the rest of
	  //    these steps.
	  if (unparsedAttributes.length === 0) {
	    return cookieAttributeList
	  }

	  // 2. Discard the first character of the unparsed-attributes (which
	  //    will be a %x3B (";") character).
	  assert(unparsedAttributes[0] === ';');
	  unparsedAttributes = unparsedAttributes.slice(1);

	  let cookieAv = '';

	  // 3. If the remaining unparsed-attributes contains a %x3B (";")
	  //    character:
	  if (unparsedAttributes.includes(';')) {
	    // 1. Consume the characters of the unparsed-attributes up to, but
	    //    not including, the first %x3B (";") character.
	    cookieAv = collectASequenceOfCodePointsFast(
	      ';',
	      unparsedAttributes,
	      { position: 0 }
	    );
	    unparsedAttributes = unparsedAttributes.slice(cookieAv.length);
	  } else {
	    // Otherwise:

	    // 1. Consume the remainder of the unparsed-attributes.
	    cookieAv = unparsedAttributes;
	    unparsedAttributes = '';
	  }

	  // Let the cookie-av string be the characters consumed in this step.

	  let attributeName = '';
	  let attributeValue = '';

	  // 4. If the cookie-av string contains a %x3D ("=") character:
	  if (cookieAv.includes('=')) {
	    // 1. The (possibly empty) attribute-name string consists of the
	    //    characters up to, but not including, the first %x3D ("=")
	    //    character, and the (possibly empty) attribute-value string
	    //    consists of the characters after the first %x3D ("=")
	    //    character.
	    const position = { position: 0 };

	    attributeName = collectASequenceOfCodePointsFast(
	      '=',
	      cookieAv,
	      position
	    );
	    attributeValue = cookieAv.slice(position.position + 1);
	  } else {
	    // Otherwise:

	    // 1. The attribute-name string consists of the entire cookie-av
	    //    string, and the attribute-value string is empty.
	    attributeName = cookieAv;
	  }

	  // 5. Remove any leading or trailing WSP characters from the attribute-
	  //    name string and the attribute-value string.
	  attributeName = attributeName.trim();
	  attributeValue = attributeValue.trim();

	  // 6. If the attribute-value is longer than 1024 octets, ignore the
	  //    cookie-av string and return to Step 1 of this algorithm.
	  if (attributeValue.length > maxAttributeValueSize) {
	    return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList)
	  }

	  // 7. Process the attribute-name and attribute-value according to the
	  //    requirements in the following subsections.  (Notice that
	  //    attributes with unrecognized attribute-names are ignored.)
	  const attributeNameLowercase = attributeName.toLowerCase();

	  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.1
	  // If the attribute-name case-insensitively matches the string
	  // "Expires", the user agent MUST process the cookie-av as follows.
	  if (attributeNameLowercase === 'expires') {
	    // 1. Let the expiry-time be the result of parsing the attribute-value
	    //    as cookie-date (see Section 5.1.1).
	    const expiryTime = new Date(attributeValue);

	    // 2. If the attribute-value failed to parse as a cookie date, ignore
	    //    the cookie-av.

	    cookieAttributeList.expires = expiryTime;
	  } else if (attributeNameLowercase === 'max-age') {
	    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.2
	    // If the attribute-name case-insensitively matches the string "Max-
	    // Age", the user agent MUST process the cookie-av as follows.

	    // 1. If the first character of the attribute-value is not a DIGIT or a
	    //    "-" character, ignore the cookie-av.
	    const charCode = attributeValue.charCodeAt(0);

	    if ((charCode < 48 || charCode > 57) && attributeValue[0] !== '-') {
	      return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList)
	    }

	    // 2. If the remainder of attribute-value contains a non-DIGIT
	    //    character, ignore the cookie-av.
	    if (!/^\d+$/.test(attributeValue)) {
	      return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList)
	    }

	    // 3. Let delta-seconds be the attribute-value converted to an integer.
	    const deltaSeconds = Number(attributeValue);

	    // 4. Let cookie-age-limit be the maximum age of the cookie (which
	    //    SHOULD be 400 days or less, see Section 4.1.2.2).

	    // 5. Set delta-seconds to the smaller of its present value and cookie-
	    //    age-limit.
	    // deltaSeconds = Math.min(deltaSeconds * 1000, maxExpiresMs)

	    // 6. If delta-seconds is less than or equal to zero (0), let expiry-
	    //    time be the earliest representable date and time.  Otherwise, let
	    //    the expiry-time be the current date and time plus delta-seconds
	    //    seconds.
	    // const expiryTime = deltaSeconds <= 0 ? Date.now() : Date.now() + deltaSeconds

	    // 7. Append an attribute to the cookie-attribute-list with an
	    //    attribute-name of Max-Age and an attribute-value of expiry-time.
	    cookieAttributeList.maxAge = deltaSeconds;
	  } else if (attributeNameLowercase === 'domain') {
	    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.3
	    // If the attribute-name case-insensitively matches the string "Domain",
	    // the user agent MUST process the cookie-av as follows.

	    // 1. Let cookie-domain be the attribute-value.
	    let cookieDomain = attributeValue;

	    // 2. If cookie-domain starts with %x2E ("."), let cookie-domain be
	    //    cookie-domain without its leading %x2E (".").
	    if (cookieDomain[0] === '.') {
	      cookieDomain = cookieDomain.slice(1);
	    }

	    // 3. Convert the cookie-domain to lower case.
	    cookieDomain = cookieDomain.toLowerCase();

	    // 4. Append an attribute to the cookie-attribute-list with an
	    //    attribute-name of Domain and an attribute-value of cookie-domain.
	    cookieAttributeList.domain = cookieDomain;
	  } else if (attributeNameLowercase === 'path') {
	    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.4
	    // If the attribute-name case-insensitively matches the string "Path",
	    // the user agent MUST process the cookie-av as follows.

	    // 1. If the attribute-value is empty or if the first character of the
	    //    attribute-value is not %x2F ("/"):
	    let cookiePath = '';
	    if (attributeValue.length === 0 || attributeValue[0] !== '/') {
	      // 1. Let cookie-path be the default-path.
	      cookiePath = '/';
	    } else {
	      // Otherwise:

	      // 1. Let cookie-path be the attribute-value.
	      cookiePath = attributeValue;
	    }

	    // 2. Append an attribute to the cookie-attribute-list with an
	    //    attribute-name of Path and an attribute-value of cookie-path.
	    cookieAttributeList.path = cookiePath;
	  } else if (attributeNameLowercase === 'secure') {
	    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.5
	    // If the attribute-name case-insensitively matches the string "Secure",
	    // the user agent MUST append an attribute to the cookie-attribute-list
	    // with an attribute-name of Secure and an empty attribute-value.

	    cookieAttributeList.secure = true;
	  } else if (attributeNameLowercase === 'httponly') {
	    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.6
	    // If the attribute-name case-insensitively matches the string
	    // "HttpOnly", the user agent MUST append an attribute to the cookie-
	    // attribute-list with an attribute-name of HttpOnly and an empty
	    // attribute-value.

	    cookieAttributeList.httpOnly = true;
	  } else if (attributeNameLowercase === 'samesite') {
	    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.7
	    // If the attribute-name case-insensitively matches the string
	    // "SameSite", the user agent MUST process the cookie-av as follows:

	    // 1. Let enforcement be "Default".
	    let enforcement = 'Default';

	    const attributeValueLowercase = attributeValue.toLowerCase();
	    // 2. If cookie-av's attribute-value is a case-insensitive match for
	    //    "None", set enforcement to "None".
	    if (attributeValueLowercase.includes('none')) {
	      enforcement = 'None';
	    }

	    // 3. If cookie-av's attribute-value is a case-insensitive match for
	    //    "Strict", set enforcement to "Strict".
	    if (attributeValueLowercase.includes('strict')) {
	      enforcement = 'Strict';
	    }

	    // 4. If cookie-av's attribute-value is a case-insensitive match for
	    //    "Lax", set enforcement to "Lax".
	    if (attributeValueLowercase.includes('lax')) {
	      enforcement = 'Lax';
	    }

	    // 5. Append an attribute to the cookie-attribute-list with an
	    //    attribute-name of "SameSite" and an attribute-value of
	    //    enforcement.
	    cookieAttributeList.sameSite = enforcement;
	  } else {
	    cookieAttributeList.unparsed ??= [];

	    cookieAttributeList.unparsed.push(`${attributeName}=${attributeValue}`);
	  }

	  // 8. Return to Step 1 of this algorithm.
	  return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList)
	}

	parse = {
	  parseSetCookie,
	  parseUnparsedAttributes
	};
	return parse;
}

var cookies;
var hasRequiredCookies;

function requireCookies () {
	if (hasRequiredCookies) return cookies;
	hasRequiredCookies = 1;

	const { parseSetCookie } = requireParse();
	const { stringify } = requireUtil$3();
	const { webidl } = requireWebidl();
	const { Headers } = requireHeaders();

	/**
	 * @typedef {Object} Cookie
	 * @property {string} name
	 * @property {string} value
	 * @property {Date|number|undefined} expires
	 * @property {number|undefined} maxAge
	 * @property {string|undefined} domain
	 * @property {string|undefined} path
	 * @property {boolean|undefined} secure
	 * @property {boolean|undefined} httpOnly
	 * @property {'Strict'|'Lax'|'None'} sameSite
	 * @property {string[]} unparsed
	 */

	/**
	 * @param {Headers} headers
	 * @returns {Record<string, string>}
	 */
	function getCookies (headers) {
	  webidl.argumentLengthCheck(arguments, 1, 'getCookies');

	  webidl.brandCheck(headers, Headers, { strict: false });

	  const cookie = headers.get('cookie');
	  const out = {};

	  if (!cookie) {
	    return out
	  }

	  for (const piece of cookie.split(';')) {
	    const [name, ...value] = piece.split('=');

	    out[name.trim()] = value.join('=');
	  }

	  return out
	}

	/**
	 * @param {Headers} headers
	 * @param {string} name
	 * @param {{ path?: string, domain?: string }|undefined} attributes
	 * @returns {void}
	 */
	function deleteCookie (headers, name, attributes) {
	  webidl.brandCheck(headers, Headers, { strict: false });

	  const prefix = 'deleteCookie';
	  webidl.argumentLengthCheck(arguments, 2, prefix);

	  name = webidl.converters.DOMString(name, prefix, 'name');
	  attributes = webidl.converters.DeleteCookieAttributes(attributes);

	  // Matches behavior of
	  // https://github.com/denoland/deno_std/blob/63827b16330b82489a04614027c33b7904e08be5/http/cookie.ts#L278
	  setCookie(headers, {
	    name,
	    value: '',
	    expires: new Date(0),
	    ...attributes
	  });
	}

	/**
	 * @param {Headers} headers
	 * @returns {Cookie[]}
	 */
	function getSetCookies (headers) {
	  webidl.argumentLengthCheck(arguments, 1, 'getSetCookies');

	  webidl.brandCheck(headers, Headers, { strict: false });

	  const cookies = headers.getSetCookie();

	  if (!cookies) {
	    return []
	  }

	  return cookies.map((pair) => parseSetCookie(pair))
	}

	/**
	 * @param {Headers} headers
	 * @param {Cookie} cookie
	 * @returns {void}
	 */
	function setCookie (headers, cookie) {
	  webidl.argumentLengthCheck(arguments, 2, 'setCookie');

	  webidl.brandCheck(headers, Headers, { strict: false });

	  cookie = webidl.converters.Cookie(cookie);

	  const str = stringify(cookie);

	  if (str) {
	    headers.append('Set-Cookie', str);
	  }
	}

	webidl.converters.DeleteCookieAttributes = webidl.dictionaryConverter([
	  {
	    converter: webidl.nullableConverter(webidl.converters.DOMString),
	    key: 'path',
	    defaultValue: () => null
	  },
	  {
	    converter: webidl.nullableConverter(webidl.converters.DOMString),
	    key: 'domain',
	    defaultValue: () => null
	  }
	]);

	webidl.converters.Cookie = webidl.dictionaryConverter([
	  {
	    converter: webidl.converters.DOMString,
	    key: 'name'
	  },
	  {
	    converter: webidl.converters.DOMString,
	    key: 'value'
	  },
	  {
	    converter: webidl.nullableConverter((value) => {
	      if (typeof value === 'number') {
	        return webidl.converters['unsigned long long'](value)
	      }

	      return new Date(value)
	    }),
	    key: 'expires',
	    defaultValue: () => null
	  },
	  {
	    converter: webidl.nullableConverter(webidl.converters['long long']),
	    key: 'maxAge',
	    defaultValue: () => null
	  },
	  {
	    converter: webidl.nullableConverter(webidl.converters.DOMString),
	    key: 'domain',
	    defaultValue: () => null
	  },
	  {
	    converter: webidl.nullableConverter(webidl.converters.DOMString),
	    key: 'path',
	    defaultValue: () => null
	  },
	  {
	    converter: webidl.nullableConverter(webidl.converters.boolean),
	    key: 'secure',
	    defaultValue: () => null
	  },
	  {
	    converter: webidl.nullableConverter(webidl.converters.boolean),
	    key: 'httpOnly',
	    defaultValue: () => null
	  },
	  {
	    converter: webidl.converters.USVString,
	    key: 'sameSite',
	    allowedValues: ['Strict', 'Lax', 'None']
	  },
	  {
	    converter: webidl.sequenceConverter(webidl.converters.DOMString),
	    key: 'unparsed',
	    defaultValue: () => new Array(0)
	  }
	]);

	cookies = {
	  getCookies,
	  deleteCookie,
	  getSetCookies,
	  setCookie
	};
	return cookies;
}

var events;
var hasRequiredEvents$1;

function requireEvents$1 () {
	if (hasRequiredEvents$1) return events;
	hasRequiredEvents$1 = 1;

	const { webidl } = requireWebidl();
	const { kEnumerableProperty } = requireUtil$8();
	const { kConstruct } = requireSymbols$5();
	const { MessagePort } = require$$5$6;

	/**
	 * @see https://html.spec.whatwg.org/multipage/comms.html#messageevent
	 */
	class MessageEvent extends Event {
	  #eventInit

	  constructor (type, eventInitDict = {}) {
	    if (type === kConstruct) {
	      super(arguments[1], arguments[2]);
	      return
	    }

	    const prefix = 'MessageEvent constructor';
	    webidl.argumentLengthCheck(arguments, 1, prefix);

	    type = webidl.converters.DOMString(type, prefix, 'type');
	    eventInitDict = webidl.converters.MessageEventInit(eventInitDict, prefix, 'eventInitDict');

	    super(type, eventInitDict);

	    this.#eventInit = eventInitDict;
	  }

	  get data () {
	    webidl.brandCheck(this, MessageEvent);

	    return this.#eventInit.data
	  }

	  get origin () {
	    webidl.brandCheck(this, MessageEvent);

	    return this.#eventInit.origin
	  }

	  get lastEventId () {
	    webidl.brandCheck(this, MessageEvent);

	    return this.#eventInit.lastEventId
	  }

	  get source () {
	    webidl.brandCheck(this, MessageEvent);

	    return this.#eventInit.source
	  }

	  get ports () {
	    webidl.brandCheck(this, MessageEvent);

	    if (!Object.isFrozen(this.#eventInit.ports)) {
	      Object.freeze(this.#eventInit.ports);
	    }

	    return this.#eventInit.ports
	  }

	  initMessageEvent (
	    type,
	    bubbles = false,
	    cancelable = false,
	    data = null,
	    origin = '',
	    lastEventId = '',
	    source = null,
	    ports = []
	  ) {
	    webidl.brandCheck(this, MessageEvent);

	    webidl.argumentLengthCheck(arguments, 1, 'MessageEvent.initMessageEvent');

	    return new MessageEvent(type, {
	      bubbles, cancelable, data, origin, lastEventId, source, ports
	    })
	  }

	  static createFastMessageEvent (type, init) {
	    const messageEvent = new MessageEvent(kConstruct, type, init);
	    messageEvent.#eventInit = init;
	    messageEvent.#eventInit.data ??= null;
	    messageEvent.#eventInit.origin ??= '';
	    messageEvent.#eventInit.lastEventId ??= '';
	    messageEvent.#eventInit.source ??= null;
	    messageEvent.#eventInit.ports ??= [];
	    return messageEvent
	  }
	}

	const { createFastMessageEvent } = MessageEvent;
	delete MessageEvent.createFastMessageEvent;

	/**
	 * @see https://websockets.spec.whatwg.org/#the-closeevent-interface
	 */
	class CloseEvent extends Event {
	  #eventInit

	  constructor (type, eventInitDict = {}) {
	    const prefix = 'CloseEvent constructor';
	    webidl.argumentLengthCheck(arguments, 1, prefix);

	    type = webidl.converters.DOMString(type, prefix, 'type');
	    eventInitDict = webidl.converters.CloseEventInit(eventInitDict);

	    super(type, eventInitDict);

	    this.#eventInit = eventInitDict;
	  }

	  get wasClean () {
	    webidl.brandCheck(this, CloseEvent);

	    return this.#eventInit.wasClean
	  }

	  get code () {
	    webidl.brandCheck(this, CloseEvent);

	    return this.#eventInit.code
	  }

	  get reason () {
	    webidl.brandCheck(this, CloseEvent);

	    return this.#eventInit.reason
	  }
	}

	// https://html.spec.whatwg.org/multipage/webappapis.html#the-errorevent-interface
	class ErrorEvent extends Event {
	  #eventInit

	  constructor (type, eventInitDict) {
	    const prefix = 'ErrorEvent constructor';
	    webidl.argumentLengthCheck(arguments, 1, prefix);

	    super(type, eventInitDict);

	    type = webidl.converters.DOMString(type, prefix, 'type');
	    eventInitDict = webidl.converters.ErrorEventInit(eventInitDict ?? {});

	    this.#eventInit = eventInitDict;
	  }

	  get message () {
	    webidl.brandCheck(this, ErrorEvent);

	    return this.#eventInit.message
	  }

	  get filename () {
	    webidl.brandCheck(this, ErrorEvent);

	    return this.#eventInit.filename
	  }

	  get lineno () {
	    webidl.brandCheck(this, ErrorEvent);

	    return this.#eventInit.lineno
	  }

	  get colno () {
	    webidl.brandCheck(this, ErrorEvent);

	    return this.#eventInit.colno
	  }

	  get error () {
	    webidl.brandCheck(this, ErrorEvent);

	    return this.#eventInit.error
	  }
	}

	Object.defineProperties(MessageEvent.prototype, {
	  [Symbol.toStringTag]: {
	    value: 'MessageEvent',
	    configurable: true
	  },
	  data: kEnumerableProperty,
	  origin: kEnumerableProperty,
	  lastEventId: kEnumerableProperty,
	  source: kEnumerableProperty,
	  ports: kEnumerableProperty,
	  initMessageEvent: kEnumerableProperty
	});

	Object.defineProperties(CloseEvent.prototype, {
	  [Symbol.toStringTag]: {
	    value: 'CloseEvent',
	    configurable: true
	  },
	  reason: kEnumerableProperty,
	  code: kEnumerableProperty,
	  wasClean: kEnumerableProperty
	});

	Object.defineProperties(ErrorEvent.prototype, {
	  [Symbol.toStringTag]: {
	    value: 'ErrorEvent',
	    configurable: true
	  },
	  message: kEnumerableProperty,
	  filename: kEnumerableProperty,
	  lineno: kEnumerableProperty,
	  colno: kEnumerableProperty,
	  error: kEnumerableProperty
	});

	webidl.converters.MessagePort = webidl.interfaceConverter(MessagePort);

	webidl.converters['sequence<MessagePort>'] = webidl.sequenceConverter(
	  webidl.converters.MessagePort
	);

	const eventInit = [
	  {
	    key: 'bubbles',
	    converter: webidl.converters.boolean,
	    defaultValue: () => false
	  },
	  {
	    key: 'cancelable',
	    converter: webidl.converters.boolean,
	    defaultValue: () => false
	  },
	  {
	    key: 'composed',
	    converter: webidl.converters.boolean,
	    defaultValue: () => false
	  }
	];

	webidl.converters.MessageEventInit = webidl.dictionaryConverter([
	  ...eventInit,
	  {
	    key: 'data',
	    converter: webidl.converters.any,
	    defaultValue: () => null
	  },
	  {
	    key: 'origin',
	    converter: webidl.converters.USVString,
	    defaultValue: () => ''
	  },
	  {
	    key: 'lastEventId',
	    converter: webidl.converters.DOMString,
	    defaultValue: () => ''
	  },
	  {
	    key: 'source',
	    // Node doesn't implement WindowProxy or ServiceWorker, so the only
	    // valid value for source is a MessagePort.
	    converter: webidl.nullableConverter(webidl.converters.MessagePort),
	    defaultValue: () => null
	  },
	  {
	    key: 'ports',
	    converter: webidl.converters['sequence<MessagePort>'],
	    defaultValue: () => new Array(0)
	  }
	]);

	webidl.converters.CloseEventInit = webidl.dictionaryConverter([
	  ...eventInit,
	  {
	    key: 'wasClean',
	    converter: webidl.converters.boolean,
	    defaultValue: () => false
	  },
	  {
	    key: 'code',
	    converter: webidl.converters['unsigned short'],
	    defaultValue: () => 0
	  },
	  {
	    key: 'reason',
	    converter: webidl.converters.USVString,
	    defaultValue: () => ''
	  }
	]);

	webidl.converters.ErrorEventInit = webidl.dictionaryConverter([
	  ...eventInit,
	  {
	    key: 'message',
	    converter: webidl.converters.DOMString,
	    defaultValue: () => ''
	  },
	  {
	    key: 'filename',
	    converter: webidl.converters.USVString,
	    defaultValue: () => ''
	  },
	  {
	    key: 'lineno',
	    converter: webidl.converters['unsigned long'],
	    defaultValue: () => 0
	  },
	  {
	    key: 'colno',
	    converter: webidl.converters['unsigned long'],
	    defaultValue: () => 0
	  },
	  {
	    key: 'error',
	    converter: webidl.converters.any
	  }
	]);

	events = {
	  MessageEvent,
	  CloseEvent,
	  ErrorEvent,
	  createFastMessageEvent
	};
	return events;
}

var constants$1;
var hasRequiredConstants$2;

function requireConstants$2 () {
	if (hasRequiredConstants$2) return constants$1;
	hasRequiredConstants$2 = 1;

	// This is a Globally Unique Identifier unique used
	// to validate that the endpoint accepts websocket
	// connections.
	// See https://www.rfc-editor.org/rfc/rfc6455.html#section-1.3
	const uid = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11';

	/** @type {PropertyDescriptor} */
	const staticPropertyDescriptors = {
	  enumerable: true,
	  writable: false,
	  configurable: false
	};

	const states = {
	  CONNECTING: 0,
	  OPEN: 1,
	  CLOSING: 2,
	  CLOSED: 3
	};

	const sentCloseFrameState = {
	  NOT_SENT: 0,
	  PROCESSING: 1,
	  SENT: 2
	};

	const opcodes = {
	  CONTINUATION: 0x0,
	  TEXT: 0x1,
	  BINARY: 0x2,
	  CLOSE: 0x8,
	  PING: 0x9,
	  PONG: 0xA
	};

	const maxUnsigned16Bit = 2 ** 16 - 1; // 65535

	const parserStates = {
	  INFO: 0,
	  PAYLOADLENGTH_16: 2,
	  PAYLOADLENGTH_64: 3,
	  READ_DATA: 4
	};

	const emptyBuffer = Buffer.allocUnsafe(0);

	const sendHints = {
	  string: 1,
	  typedArray: 2,
	  arrayBuffer: 3,
	  blob: 4
	};

	constants$1 = {
	  uid,
	  sentCloseFrameState,
	  staticPropertyDescriptors,
	  states,
	  opcodes,
	  maxUnsigned16Bit,
	  parserStates,
	  emptyBuffer,
	  sendHints
	};
	return constants$1;
}

var symbols;
var hasRequiredSymbols$1;

function requireSymbols$1 () {
	if (hasRequiredSymbols$1) return symbols;
	hasRequiredSymbols$1 = 1;

	symbols = {
	  kWebSocketURL: Symbol('url'),
	  kReadyState: Symbol('ready state'),
	  kController: Symbol('controller'),
	  kResponse: Symbol('response'),
	  kBinaryType: Symbol('binary type'),
	  kSentClose: Symbol('sent close'),
	  kReceivedClose: Symbol('received close'),
	  kByteParser: Symbol('byte parser')
	};
	return symbols;
}

var util$1;
var hasRequiredUtil$2;

function requireUtil$2 () {
	if (hasRequiredUtil$2) return util$1;
	hasRequiredUtil$2 = 1;

	const { kReadyState, kController, kResponse, kBinaryType, kWebSocketURL } = requireSymbols$1();
	const { states, opcodes } = requireConstants$2();
	const { ErrorEvent, createFastMessageEvent } = requireEvents$1();
	const { isUtf8 } = require$$0$9;
	const { collectASequenceOfCodePointsFast, removeHTTPWhitespace } = requireDataUrl();

	/* globals Blob */

	/**
	 * @param {import('./websocket').WebSocket} ws
	 * @returns {boolean}
	 */
	function isConnecting (ws) {
	  // If the WebSocket connection is not yet established, and the connection
	  // is not yet closed, then the WebSocket connection is in the CONNECTING state.
	  return ws[kReadyState] === states.CONNECTING
	}

	/**
	 * @param {import('./websocket').WebSocket} ws
	 * @returns {boolean}
	 */
	function isEstablished (ws) {
	  // If the server's response is validated as provided for above, it is
	  // said that _The WebSocket Connection is Established_ and that the
	  // WebSocket Connection is in the OPEN state.
	  return ws[kReadyState] === states.OPEN
	}

	/**
	 * @param {import('./websocket').WebSocket} ws
	 * @returns {boolean}
	 */
	function isClosing (ws) {
	  // Upon either sending or receiving a Close control frame, it is said
	  // that _The WebSocket Closing Handshake is Started_ and that the
	  // WebSocket connection is in the CLOSING state.
	  return ws[kReadyState] === states.CLOSING
	}

	/**
	 * @param {import('./websocket').WebSocket} ws
	 * @returns {boolean}
	 */
	function isClosed (ws) {
	  return ws[kReadyState] === states.CLOSED
	}

	/**
	 * @see https://dom.spec.whatwg.org/#concept-event-fire
	 * @param {string} e
	 * @param {EventTarget} target
	 * @param {(...args: ConstructorParameters<typeof Event>) => Event} eventFactory
	 * @param {EventInit | undefined} eventInitDict
	 */
	function fireEvent (e, target, eventFactory = (type, init) => new Event(type, init), eventInitDict = {}) {
	  // 1. If eventConstructor is not given, then let eventConstructor be Event.

	  // 2. Let event be the result of creating an event given eventConstructor,
	  //    in the relevant realm of target.
	  // 3. Initialize event’s type attribute to e.
	  const event = eventFactory(e, eventInitDict);

	  // 4. Initialize any other IDL attributes of event as described in the
	  //    invocation of this algorithm.

	  // 5. Return the result of dispatching event at target, with legacy target
	  //    override flag set if set.
	  target.dispatchEvent(event);
	}

	/**
	 * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
	 * @param {import('./websocket').WebSocket} ws
	 * @param {number} type Opcode
	 * @param {Buffer} data application data
	 */
	function websocketMessageReceived (ws, type, data) {
	  // 1. If ready state is not OPEN (1), then return.
	  if (ws[kReadyState] !== states.OPEN) {
	    return
	  }

	  // 2. Let dataForEvent be determined by switching on type and binary type:
	  let dataForEvent;

	  if (type === opcodes.TEXT) {
	    // -> type indicates that the data is Text
	    //      a new DOMString containing data
	    try {
	      dataForEvent = utf8Decode(data);
	    } catch {
	      failWebsocketConnection(ws, 'Received invalid UTF-8 in text frame.');
	      return
	    }
	  } else if (type === opcodes.BINARY) {
	    if (ws[kBinaryType] === 'blob') {
	      // -> type indicates that the data is Binary and binary type is "blob"
	      //      a new Blob object, created in the relevant Realm of the WebSocket
	      //      object, that represents data as its raw data
	      dataForEvent = new Blob([data]);
	    } else {
	      // -> type indicates that the data is Binary and binary type is "arraybuffer"
	      //      a new ArrayBuffer object, created in the relevant Realm of the
	      //      WebSocket object, whose contents are data
	      dataForEvent = toArrayBuffer(data);
	    }
	  }

	  // 3. Fire an event named message at the WebSocket object, using MessageEvent,
	  //    with the origin attribute initialized to the serialization of the WebSocket
	  //    object’s url's origin, and the data attribute initialized to dataForEvent.
	  fireEvent('message', ws, createFastMessageEvent, {
	    origin: ws[kWebSocketURL].origin,
	    data: dataForEvent
	  });
	}

	function toArrayBuffer (buffer) {
	  if (buffer.byteLength === buffer.buffer.byteLength) {
	    return buffer.buffer
	  }
	  return buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength)
	}

	/**
	 * @see https://datatracker.ietf.org/doc/html/rfc6455
	 * @see https://datatracker.ietf.org/doc/html/rfc2616
	 * @see https://bugs.chromium.org/p/chromium/issues/detail?id=398407
	 * @param {string} protocol
	 */
	function isValidSubprotocol (protocol) {
	  // If present, this value indicates one
	  // or more comma-separated subprotocol the client wishes to speak,
	  // ordered by preference.  The elements that comprise this value
	  // MUST be non-empty strings with characters in the range U+0021 to
	  // U+007E not including separator characters as defined in
	  // [RFC2616] and MUST all be unique strings.
	  if (protocol.length === 0) {
	    return false
	  }

	  for (let i = 0; i < protocol.length; ++i) {
	    const code = protocol.charCodeAt(i);

	    if (
	      code < 0x21 || // CTL, contains SP (0x20) and HT (0x09)
	      code > 0x7E ||
	      code === 0x22 || // "
	      code === 0x28 || // (
	      code === 0x29 || // )
	      code === 0x2C || // ,
	      code === 0x2F || // /
	      code === 0x3A || // :
	      code === 0x3B || // ;
	      code === 0x3C || // <
	      code === 0x3D || // =
	      code === 0x3E || // >
	      code === 0x3F || // ?
	      code === 0x40 || // @
	      code === 0x5B || // [
	      code === 0x5C || // \
	      code === 0x5D || // ]
	      code === 0x7B || // {
	      code === 0x7D // }
	    ) {
	      return false
	    }
	  }

	  return true
	}

	/**
	 * @see https://datatracker.ietf.org/doc/html/rfc6455#section-7-4
	 * @param {number} code
	 */
	function isValidStatusCode (code) {
	  if (code >= 1000 && code < 1015) {
	    return (
	      code !== 1004 && // reserved
	      code !== 1005 && // "MUST NOT be set as a status code"
	      code !== 1006 // "MUST NOT be set as a status code"
	    )
	  }

	  return code >= 3000 && code <= 4999
	}

	/**
	 * @param {import('./websocket').WebSocket} ws
	 * @param {string|undefined} reason
	 */
	function failWebsocketConnection (ws, reason) {
	  const { [kController]: controller, [kResponse]: response } = ws;

	  controller.abort();

	  if (response?.socket && !response.socket.destroyed) {
	    response.socket.destroy();
	  }

	  if (reason) {
	    // TODO: process.nextTick
	    fireEvent('error', ws, (type, init) => new ErrorEvent(type, init), {
	      error: new Error(reason),
	      message: reason
	    });
	  }
	}

	/**
	 * @see https://datatracker.ietf.org/doc/html/rfc6455#section-5.5
	 * @param {number} opcode
	 */
	function isControlFrame (opcode) {
	  return (
	    opcode === opcodes.CLOSE ||
	    opcode === opcodes.PING ||
	    opcode === opcodes.PONG
	  )
	}

	function isContinuationFrame (opcode) {
	  return opcode === opcodes.CONTINUATION
	}

	function isTextBinaryFrame (opcode) {
	  return opcode === opcodes.TEXT || opcode === opcodes.BINARY
	}

	function isValidOpcode (opcode) {
	  return isTextBinaryFrame(opcode) || isContinuationFrame(opcode) || isControlFrame(opcode)
	}

	/**
	 * Parses a Sec-WebSocket-Extensions header value.
	 * @param {string} extensions
	 * @returns {Map<string, string>}
	 */
	// TODO(@Uzlopak, @KhafraDev): make compliant https://datatracker.ietf.org/doc/html/rfc6455#section-9.1
	function parseExtensions (extensions) {
	  const position = { position: 0 };
	  const extensionList = new Map();

	  while (position.position < extensions.length) {
	    const pair = collectASequenceOfCodePointsFast(';', extensions, position);
	    const [name, value = ''] = pair.split('=');

	    extensionList.set(
	      removeHTTPWhitespace(name, true, false),
	      removeHTTPWhitespace(value, false, true)
	    );

	    position.position++;
	  }

	  return extensionList
	}

	/**
	 * @see https://www.rfc-editor.org/rfc/rfc7692#section-7.1.2.2
	 * @description "client-max-window-bits = 1*DIGIT"
	 * @param {string} value
	 */
	function isValidClientWindowBits (value) {
	  for (let i = 0; i < value.length; i++) {
	    const byte = value.charCodeAt(i);

	    if (byte < 0x30 || byte > 0x39) {
	      return false
	    }
	  }

	  return true
	}

	// https://nodejs.org/api/intl.html#detecting-internationalization-support
	const hasIntl = typeof process.versions.icu === 'string';
	const fatalDecoder = hasIntl ? new TextDecoder('utf-8', { fatal: true }) : undefined;

	/**
	 * Converts a Buffer to utf-8, even on platforms without icu.
	 * @param {Buffer} buffer
	 */
	const utf8Decode = hasIntl
	  ? fatalDecoder.decode.bind(fatalDecoder)
	  : function (buffer) {
	    if (isUtf8(buffer)) {
	      return buffer.toString('utf-8')
	    }
	    throw new TypeError('Invalid utf-8 received.')
	  };

	util$1 = {
	  isConnecting,
	  isEstablished,
	  isClosing,
	  isClosed,
	  fireEvent,
	  isValidSubprotocol,
	  isValidStatusCode,
	  failWebsocketConnection,
	  websocketMessageReceived,
	  utf8Decode,
	  isControlFrame,
	  isContinuationFrame,
	  isTextBinaryFrame,
	  isValidOpcode,
	  parseExtensions,
	  isValidClientWindowBits
	};
	return util$1;
}

var frame;
var hasRequiredFrame;

function requireFrame () {
	if (hasRequiredFrame) return frame;
	hasRequiredFrame = 1;

	const { maxUnsigned16Bit } = requireConstants$2();

	const BUFFER_SIZE = 16386;

	/** @type {import('crypto')} */
	let crypto;
	let buffer = null;
	let bufIdx = BUFFER_SIZE;

	try {
	  crypto = require('node:crypto');
	/* c8 ignore next 3 */
	} catch {
	  crypto = {
	    // not full compatibility, but minimum.
	    randomFillSync: function randomFillSync (buffer, _offset, _size) {
	      for (let i = 0; i < buffer.length; ++i) {
	        buffer[i] = Math.random() * 255 | 0;
	      }
	      return buffer
	    }
	  };
	}

	function generateMask () {
	  if (bufIdx === BUFFER_SIZE) {
	    bufIdx = 0;
	    crypto.randomFillSync((buffer ??= Buffer.allocUnsafe(BUFFER_SIZE)), 0, BUFFER_SIZE);
	  }
	  return [buffer[bufIdx++], buffer[bufIdx++], buffer[bufIdx++], buffer[bufIdx++]]
	}

	class WebsocketFrameSend {
	  /**
	   * @param {Buffer|undefined} data
	   */
	  constructor (data) {
	    this.frameData = data;
	  }

	  createFrame (opcode) {
	    const frameData = this.frameData;
	    const maskKey = generateMask();
	    const bodyLength = frameData?.byteLength ?? 0;

	    /** @type {number} */
	    let payloadLength = bodyLength; // 0-125
	    let offset = 6;

	    if (bodyLength > maxUnsigned16Bit) {
	      offset += 8; // payload length is next 8 bytes
	      payloadLength = 127;
	    } else if (bodyLength > 125) {
	      offset += 2; // payload length is next 2 bytes
	      payloadLength = 126;
	    }

	    const buffer = Buffer.allocUnsafe(bodyLength + offset);

	    // Clear first 2 bytes, everything else is overwritten
	    buffer[0] = buffer[1] = 0;
	    buffer[0] |= 0x80; // FIN
	    buffer[0] = (buffer[0] & 0xF0) + opcode; // opcode

	    /*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> */
	    buffer[offset - 4] = maskKey[0];
	    buffer[offset - 3] = maskKey[1];
	    buffer[offset - 2] = maskKey[2];
	    buffer[offset - 1] = maskKey[3];

	    buffer[1] = payloadLength;

	    if (payloadLength === 126) {
	      buffer.writeUInt16BE(bodyLength, 2);
	    } else if (payloadLength === 127) {
	      // Clear extended payload length
	      buffer[2] = buffer[3] = 0;
	      buffer.writeUIntBE(bodyLength, 4, 6);
	    }

	    buffer[1] |= 0x80; // MASK

	    // mask body
	    for (let i = 0; i < bodyLength; ++i) {
	      buffer[offset + i] = frameData[i] ^ maskKey[i & 3];
	    }

	    return buffer
	  }
	}

	frame = {
	  WebsocketFrameSend
	};
	return frame;
}

var connection;
var hasRequiredConnection;

function requireConnection () {
	if (hasRequiredConnection) return connection;
	hasRequiredConnection = 1;

	const { uid, states, sentCloseFrameState, emptyBuffer, opcodes } = requireConstants$2();
	const {
	  kReadyState,
	  kSentClose,
	  kByteParser,
	  kReceivedClose,
	  kResponse
	} = requireSymbols$1();
	const { fireEvent, failWebsocketConnection, isClosing, isClosed, isEstablished, parseExtensions } = requireUtil$2();
	const { channels } = requireDiagnostics();
	const { CloseEvent } = requireEvents$1();
	const { makeRequest } = requireRequest();
	const { fetching } = requireFetch();
	const { Headers, getHeadersList } = requireHeaders();
	const { getDecodeSplit } = requireUtil$7();
	const { WebsocketFrameSend } = requireFrame();

	/** @type {import('crypto')} */
	let crypto;
	try {
	  crypto = require('node:crypto');
	/* c8 ignore next 3 */
	} catch {

	}

	/**
	 * @see https://websockets.spec.whatwg.org/#concept-websocket-establish
	 * @param {URL} url
	 * @param {string|string[]} protocols
	 * @param {import('./websocket').WebSocket} ws
	 * @param {(response: any, extensions: string[] | undefined) => void} onEstablish
	 * @param {Partial<import('../../types/websocket').WebSocketInit>} options
	 */
	function establishWebSocketConnection (url, protocols, client, ws, onEstablish, options) {
	  // 1. Let requestURL be a copy of url, with its scheme set to "http", if url’s
	  //    scheme is "ws", and to "https" otherwise.
	  const requestURL = url;

	  requestURL.protocol = url.protocol === 'ws:' ? 'http:' : 'https:';

	  // 2. Let request be a new request, whose URL is requestURL, client is client,
	  //    service-workers mode is "none", referrer is "no-referrer", mode is
	  //    "websocket", credentials mode is "include", cache mode is "no-store" ,
	  //    and redirect mode is "error".
	  const request = makeRequest({
	    urlList: [requestURL],
	    client,
	    serviceWorkers: 'none',
	    referrer: 'no-referrer',
	    mode: 'websocket',
	    credentials: 'include',
	    cache: 'no-store',
	    redirect: 'error'
	  });

	  // Note: undici extension, allow setting custom headers.
	  if (options.headers) {
	    const headersList = getHeadersList(new Headers(options.headers));

	    request.headersList = headersList;
	  }

	  // 3. Append (`Upgrade`, `websocket`) to request’s header list.
	  // 4. Append (`Connection`, `Upgrade`) to request’s header list.
	  // Note: both of these are handled by undici currently.
	  // https://github.com/nodejs/undici/blob/68c269c4144c446f3f1220951338daef4a6b5ec4/lib/client.js#L1397

	  // 5. Let keyValue be a nonce consisting of a randomly selected
	  //    16-byte value that has been forgiving-base64-encoded and
	  //    isomorphic encoded.
	  const keyValue = crypto.randomBytes(16).toString('base64');

	  // 6. Append (`Sec-WebSocket-Key`, keyValue) to request’s
	  //    header list.
	  request.headersList.append('sec-websocket-key', keyValue);

	  // 7. Append (`Sec-WebSocket-Version`, `13`) to request’s
	  //    header list.
	  request.headersList.append('sec-websocket-version', '13');

	  // 8. For each protocol in protocols, combine
	  //    (`Sec-WebSocket-Protocol`, protocol) in request’s header
	  //    list.
	  for (const protocol of protocols) {
	    request.headersList.append('sec-websocket-protocol', protocol);
	  }

	  // 9. Let permessageDeflate be a user-agent defined
	  //    "permessage-deflate" extension header value.
	  // https://github.com/mozilla/gecko-dev/blob/ce78234f5e653a5d3916813ff990f053510227bc/netwerk/protocol/websocket/WebSocketChannel.cpp#L2673
	  const permessageDeflate = 'permessage-deflate; client_max_window_bits';

	  // 10. Append (`Sec-WebSocket-Extensions`, permessageDeflate) to
	  //     request’s header list.
	  request.headersList.append('sec-websocket-extensions', permessageDeflate);

	  // 11. Fetch request with useParallelQueue set to true, and
	  //     processResponse given response being these steps:
	  const controller = fetching({
	    request,
	    useParallelQueue: true,
	    dispatcher: options.dispatcher,
	    processResponse (response) {
	      // 1. If response is a network error or its status is not 101,
	      //    fail the WebSocket connection.
	      if (response.type === 'error' || response.status !== 101) {
	        failWebsocketConnection(ws, 'Received network error or non-101 status code.');
	        return
	      }

	      // 2. If protocols is not the empty list and extracting header
	      //    list values given `Sec-WebSocket-Protocol` and response’s
	      //    header list results in null, failure, or the empty byte
	      //    sequence, then fail the WebSocket connection.
	      if (protocols.length !== 0 && !response.headersList.get('Sec-WebSocket-Protocol')) {
	        failWebsocketConnection(ws, 'Server did not respond with sent protocols.');
	        return
	      }

	      // 3. Follow the requirements stated step 2 to step 6, inclusive,
	      //    of the last set of steps in section 4.1 of The WebSocket
	      //    Protocol to validate response. This either results in fail
	      //    the WebSocket connection or the WebSocket connection is
	      //    established.

	      // 2. If the response lacks an |Upgrade| header field or the |Upgrade|
	      //    header field contains a value that is not an ASCII case-
	      //    insensitive match for the value "websocket", the client MUST
	      //    _Fail the WebSocket Connection_.
	      if (response.headersList.get('Upgrade')?.toLowerCase() !== 'websocket') {
	        failWebsocketConnection(ws, 'Server did not set Upgrade header to "websocket".');
	        return
	      }

	      // 3. If the response lacks a |Connection| header field or the
	      //    |Connection| header field doesn't contain a token that is an
	      //    ASCII case-insensitive match for the value "Upgrade", the client
	      //    MUST _Fail the WebSocket Connection_.
	      if (response.headersList.get('Connection')?.toLowerCase() !== 'upgrade') {
	        failWebsocketConnection(ws, 'Server did not set Connection header to "upgrade".');
	        return
	      }

	      // 4. If the response lacks a |Sec-WebSocket-Accept| header field or
	      //    the |Sec-WebSocket-Accept| contains a value other than the
	      //    base64-encoded SHA-1 of the concatenation of the |Sec-WebSocket-
	      //    Key| (as a string, not base64-decoded) with the string "258EAFA5-
	      //    E914-47DA-95CA-C5AB0DC85B11" but ignoring any leading and
	      //    trailing whitespace, the client MUST _Fail the WebSocket
	      //    Connection_.
	      const secWSAccept = response.headersList.get('Sec-WebSocket-Accept');
	      const digest = crypto.createHash('sha1').update(keyValue + uid).digest('base64');
	      if (secWSAccept !== digest) {
	        failWebsocketConnection(ws, 'Incorrect hash received in Sec-WebSocket-Accept header.');
	        return
	      }

	      // 5. If the response includes a |Sec-WebSocket-Extensions| header
	      //    field and this header field indicates the use of an extension
	      //    that was not present in the client's handshake (the server has
	      //    indicated an extension not requested by the client), the client
	      //    MUST _Fail the WebSocket Connection_.  (The parsing of this
	      //    header field to determine which extensions are requested is
	      //    discussed in Section 9.1.)
	      const secExtension = response.headersList.get('Sec-WebSocket-Extensions');
	      let extensions;

	      if (secExtension !== null) {
	        extensions = parseExtensions(secExtension);

	        if (!extensions.has('permessage-deflate')) {
	          failWebsocketConnection(ws, 'Sec-WebSocket-Extensions header does not match.');
	          return
	        }
	      }

	      // 6. If the response includes a |Sec-WebSocket-Protocol| header field
	      //    and this header field indicates the use of a subprotocol that was
	      //    not present in the client's handshake (the server has indicated a
	      //    subprotocol not requested by the client), the client MUST _Fail
	      //    the WebSocket Connection_.
	      const secProtocol = response.headersList.get('Sec-WebSocket-Protocol');

	      if (secProtocol !== null) {
	        const requestProtocols = getDecodeSplit('sec-websocket-protocol', request.headersList);

	        // The client can request that the server use a specific subprotocol by
	        // including the |Sec-WebSocket-Protocol| field in its handshake.  If it
	        // is specified, the server needs to include the same field and one of
	        // the selected subprotocol values in its response for the connection to
	        // be established.
	        if (!requestProtocols.includes(secProtocol)) {
	          failWebsocketConnection(ws, 'Protocol was not set in the opening handshake.');
	          return
	        }
	      }

	      response.socket.on('data', onSocketData);
	      response.socket.on('close', onSocketClose);
	      response.socket.on('error', onSocketError);

	      if (channels.open.hasSubscribers) {
	        channels.open.publish({
	          address: response.socket.address(),
	          protocol: secProtocol,
	          extensions: secExtension
	        });
	      }

	      onEstablish(response, extensions);
	    }
	  });

	  return controller
	}

	function closeWebSocketConnection (ws, code, reason, reasonByteLength) {
	  if (isClosing(ws) || isClosed(ws)) ; else if (!isEstablished(ws)) {
	    // If the WebSocket connection is not yet established
	    // Fail the WebSocket connection and set this's ready state
	    // to CLOSING (2).
	    failWebsocketConnection(ws, 'Connection was closed before it was established.');
	    ws[kReadyState] = states.CLOSING;
	  } else if (ws[kSentClose] === sentCloseFrameState.NOT_SENT) {
	    // If the WebSocket closing handshake has not yet been started
	    // Start the WebSocket closing handshake and set this's ready
	    // state to CLOSING (2).
	    // - If neither code nor reason is present, the WebSocket Close
	    //   message must not have a body.
	    // - If code is present, then the status code to use in the
	    //   WebSocket Close message must be the integer given by code.
	    // - If reason is also present, then reasonBytes must be
	    //   provided in the Close message after the status code.

	    ws[kSentClose] = sentCloseFrameState.PROCESSING;

	    const frame = new WebsocketFrameSend();

	    // If neither code nor reason is present, the WebSocket Close
	    // message must not have a body.

	    // If code is present, then the status code to use in the
	    // WebSocket Close message must be the integer given by code.
	    if (code !== undefined && reason === undefined) {
	      frame.frameData = Buffer.allocUnsafe(2);
	      frame.frameData.writeUInt16BE(code, 0);
	    } else if (code !== undefined && reason !== undefined) {
	      // If reason is also present, then reasonBytes must be
	      // provided in the Close message after the status code.
	      frame.frameData = Buffer.allocUnsafe(2 + reasonByteLength);
	      frame.frameData.writeUInt16BE(code, 0);
	      // the body MAY contain UTF-8-encoded data with value /reason/
	      frame.frameData.write(reason, 2, 'utf-8');
	    } else {
	      frame.frameData = emptyBuffer;
	    }

	    /** @type {import('stream').Duplex} */
	    const socket = ws[kResponse].socket;

	    socket.write(frame.createFrame(opcodes.CLOSE));

	    ws[kSentClose] = sentCloseFrameState.SENT;

	    // Upon either sending or receiving a Close control frame, it is said
	    // that _The WebSocket Closing Handshake is Started_ and that the
	    // WebSocket connection is in the CLOSING state.
	    ws[kReadyState] = states.CLOSING;
	  } else {
	    // Otherwise
	    // Set this's ready state to CLOSING (2).
	    ws[kReadyState] = states.CLOSING;
	  }
	}

	/**
	 * @param {Buffer} chunk
	 */
	function onSocketData (chunk) {
	  if (!this.ws[kByteParser].write(chunk)) {
	    this.pause();
	  }
	}

	/**
	 * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
	 * @see https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.4
	 */
	function onSocketClose () {
	  const { ws } = this;
	  const { [kResponse]: response } = ws;

	  response.socket.off('data', onSocketData);
	  response.socket.off('close', onSocketClose);
	  response.socket.off('error', onSocketError);

	  // If the TCP connection was closed after the
	  // WebSocket closing handshake was completed, the WebSocket connection
	  // is said to have been closed _cleanly_.
	  const wasClean = ws[kSentClose] === sentCloseFrameState.SENT && ws[kReceivedClose];

	  let code = 1005;
	  let reason = '';

	  const result = ws[kByteParser].closingInfo;

	  if (result && !result.error) {
	    code = result.code ?? 1005;
	    reason = result.reason;
	  } else if (!ws[kReceivedClose]) {
	    // If _The WebSocket
	    // Connection is Closed_ and no Close control frame was received by the
	    // endpoint (such as could occur if the underlying transport connection
	    // is lost), _The WebSocket Connection Close Code_ is considered to be
	    // 1006.
	    code = 1006;
	  }

	  // 1. Change the ready state to CLOSED (3).
	  ws[kReadyState] = states.CLOSED;

	  // 2. If the user agent was required to fail the WebSocket
	  //    connection, or if the WebSocket connection was closed
	  //    after being flagged as full, fire an event named error
	  //    at the WebSocket object.
	  // TODO

	  // 3. Fire an event named close at the WebSocket object,
	  //    using CloseEvent, with the wasClean attribute
	  //    initialized to true if the connection closed cleanly
	  //    and false otherwise, the code attribute initialized to
	  //    the WebSocket connection close code, and the reason
	  //    attribute initialized to the result of applying UTF-8
	  //    decode without BOM to the WebSocket connection close
	  //    reason.
	  // TODO: process.nextTick
	  fireEvent('close', ws, (type, init) => new CloseEvent(type, init), {
	    wasClean, code, reason
	  });

	  if (channels.close.hasSubscribers) {
	    channels.close.publish({
	      websocket: ws,
	      code,
	      reason
	    });
	  }
	}

	function onSocketError (error) {
	  const { ws } = this;

	  ws[kReadyState] = states.CLOSING;

	  if (channels.socketError.hasSubscribers) {
	    channels.socketError.publish(error);
	  }

	  this.destroy();
	}

	connection = {
	  establishWebSocketConnection,
	  closeWebSocketConnection
	};
	return connection;
}

var permessageDeflate$1;
var hasRequiredPermessageDeflate$1;

function requirePermessageDeflate$1 () {
	if (hasRequiredPermessageDeflate$1) return permessageDeflate$1;
	hasRequiredPermessageDeflate$1 = 1;

	const { createInflateRaw, Z_DEFAULT_WINDOWBITS } = require$$1$8;
	const { isValidClientWindowBits } = requireUtil$2();

	const tail = Buffer.from([0x00, 0x00, 0xff, 0xff]);
	const kBuffer = Symbol('kBuffer');
	const kLength = Symbol('kLength');

	class PerMessageDeflate {
	  /** @type {import('node:zlib').InflateRaw} */
	  #inflate

	  #options = {}

	  constructor (extensions) {
	    this.#options.serverNoContextTakeover = extensions.has('server_no_context_takeover');
	    this.#options.serverMaxWindowBits = extensions.get('server_max_window_bits');
	  }

	  decompress (chunk, fin, callback) {
	    // An endpoint uses the following algorithm to decompress a message.
	    // 1.  Append 4 octets of 0x00 0x00 0xff 0xff to the tail end of the
	    //     payload of the message.
	    // 2.  Decompress the resulting data using DEFLATE.

	    if (!this.#inflate) {
	      let windowBits = Z_DEFAULT_WINDOWBITS;

	      if (this.#options.serverMaxWindowBits) { // empty values default to Z_DEFAULT_WINDOWBITS
	        if (!isValidClientWindowBits(this.#options.serverMaxWindowBits)) {
	          callback(new Error('Invalid server_max_window_bits'));
	          return
	        }

	        windowBits = Number.parseInt(this.#options.serverMaxWindowBits);
	      }

	      this.#inflate = createInflateRaw({ windowBits });
	      this.#inflate[kBuffer] = [];
	      this.#inflate[kLength] = 0;

	      this.#inflate.on('data', (data) => {
	        this.#inflate[kBuffer].push(data);
	        this.#inflate[kLength] += data.length;
	      });

	      this.#inflate.on('error', (err) => {
	        this.#inflate = null;
	        callback(err);
	      });
	    }

	    this.#inflate.write(chunk);
	    if (fin) {
	      this.#inflate.write(tail);
	    }

	    this.#inflate.flush(() => {
	      const full = Buffer.concat(this.#inflate[kBuffer], this.#inflate[kLength]);

	      this.#inflate[kBuffer].length = 0;
	      this.#inflate[kLength] = 0;

	      callback(null, full);
	    });
	  }
	}

	permessageDeflate$1 = { PerMessageDeflate };
	return permessageDeflate$1;
}

var receiver$1;
var hasRequiredReceiver$1;

function requireReceiver$1 () {
	if (hasRequiredReceiver$1) return receiver$1;
	hasRequiredReceiver$1 = 1;

	const { Writable } = require$$0$8;
	const assert = require$$0$7;
	const { parserStates, opcodes, states, emptyBuffer, sentCloseFrameState } = requireConstants$2();
	const { kReadyState, kSentClose, kResponse, kReceivedClose } = requireSymbols$1();
	const { channels } = requireDiagnostics();
	const {
	  isValidStatusCode,
	  isValidOpcode,
	  failWebsocketConnection,
	  websocketMessageReceived,
	  utf8Decode,
	  isControlFrame,
	  isTextBinaryFrame,
	  isContinuationFrame
	} = requireUtil$2();
	const { WebsocketFrameSend } = requireFrame();
	const { closeWebSocketConnection } = requireConnection();
	const { PerMessageDeflate } = requirePermessageDeflate$1();

	// This code was influenced by ws released under the MIT license.
	// Copyright (c) 2011 Einar Otto Stangvik <einaros@gmail.com>
	// Copyright (c) 2013 Arnout Kazemier and contributors
	// Copyright (c) 2016 Luigi Pinca and contributors

	class ByteParser extends Writable {
	  #buffers = []
	  #byteOffset = 0
	  #loop = false

	  #state = parserStates.INFO

	  #info = {}
	  #fragments = []

	  /** @type {Map<string, PerMessageDeflate>} */
	  #extensions

	  constructor (ws, extensions) {
	    super();

	    this.ws = ws;
	    this.#extensions = extensions == null ? new Map() : extensions;

	    if (this.#extensions.has('permessage-deflate')) {
	      this.#extensions.set('permessage-deflate', new PerMessageDeflate(extensions));
	    }
	  }

	  /**
	   * @param {Buffer} chunk
	   * @param {() => void} callback
	   */
	  _write (chunk, _, callback) {
	    this.#buffers.push(chunk);
	    this.#byteOffset += chunk.length;
	    this.#loop = true;

	    this.run(callback);
	  }

	  /**
	   * Runs whenever a new chunk is received.
	   * Callback is called whenever there are no more chunks buffering,
	   * or not enough bytes are buffered to parse.
	   */
	  run (callback) {
	    while (this.#loop) {
	      if (this.#state === parserStates.INFO) {
	        // If there aren't enough bytes to parse the payload length, etc.
	        if (this.#byteOffset < 2) {
	          return callback()
	        }

	        const buffer = this.consume(2);
	        const fin = (buffer[0] & 0x80) !== 0;
	        const opcode = buffer[0] & 0x0F;
	        const masked = (buffer[1] & 0x80) === 0x80;

	        const fragmented = !fin && opcode !== opcodes.CONTINUATION;
	        const payloadLength = buffer[1] & 0x7F;

	        const rsv1 = buffer[0] & 0x40;
	        const rsv2 = buffer[0] & 0x20;
	        const rsv3 = buffer[0] & 0x10;

	        if (!isValidOpcode(opcode)) {
	          failWebsocketConnection(this.ws, 'Invalid opcode received');
	          return callback()
	        }

	        if (masked) {
	          failWebsocketConnection(this.ws, 'Frame cannot be masked');
	          return callback()
	        }

	        // MUST be 0 unless an extension is negotiated that defines meanings
	        // for non-zero values.  If a nonzero value is received and none of
	        // the negotiated extensions defines the meaning of such a nonzero
	        // value, the receiving endpoint MUST _Fail the WebSocket
	        // Connection_.
	        // This document allocates the RSV1 bit of the WebSocket header for
	        // PMCEs and calls the bit the "Per-Message Compressed" bit.  On a
	        // WebSocket connection where a PMCE is in use, this bit indicates
	        // whether a message is compressed or not.
	        if (rsv1 !== 0 && !this.#extensions.has('permessage-deflate')) {
	          failWebsocketConnection(this.ws, 'Expected RSV1 to be clear.');
	          return
	        }

	        if (rsv2 !== 0 || rsv3 !== 0) {
	          failWebsocketConnection(this.ws, 'RSV1, RSV2, RSV3 must be clear');
	          return
	        }

	        if (fragmented && !isTextBinaryFrame(opcode)) {
	          // Only text and binary frames can be fragmented
	          failWebsocketConnection(this.ws, 'Invalid frame type was fragmented.');
	          return
	        }

	        // If we are already parsing a text/binary frame and do not receive either
	        // a continuation frame or close frame, fail the connection.
	        if (isTextBinaryFrame(opcode) && this.#fragments.length > 0) {
	          failWebsocketConnection(this.ws, 'Expected continuation frame');
	          return
	        }

	        if (this.#info.fragmented && fragmented) {
	          // A fragmented frame can't be fragmented itself
	          failWebsocketConnection(this.ws, 'Fragmented frame exceeded 125 bytes.');
	          return
	        }

	        // "All control frames MUST have a payload length of 125 bytes or less
	        // and MUST NOT be fragmented."
	        if ((payloadLength > 125 || fragmented) && isControlFrame(opcode)) {
	          failWebsocketConnection(this.ws, 'Control frame either too large or fragmented');
	          return
	        }

	        if (isContinuationFrame(opcode) && this.#fragments.length === 0 && !this.#info.compressed) {
	          failWebsocketConnection(this.ws, 'Unexpected continuation frame');
	          return
	        }

	        if (payloadLength <= 125) {
	          this.#info.payloadLength = payloadLength;
	          this.#state = parserStates.READ_DATA;
	        } else if (payloadLength === 126) {
	          this.#state = parserStates.PAYLOADLENGTH_16;
	        } else if (payloadLength === 127) {
	          this.#state = parserStates.PAYLOADLENGTH_64;
	        }

	        if (isTextBinaryFrame(opcode)) {
	          this.#info.binaryType = opcode;
	          this.#info.compressed = rsv1 !== 0;
	        }

	        this.#info.opcode = opcode;
	        this.#info.masked = masked;
	        this.#info.fin = fin;
	        this.#info.fragmented = fragmented;
	      } else if (this.#state === parserStates.PAYLOADLENGTH_16) {
	        if (this.#byteOffset < 2) {
	          return callback()
	        }

	        const buffer = this.consume(2);

	        this.#info.payloadLength = buffer.readUInt16BE(0);
	        this.#state = parserStates.READ_DATA;
	      } else if (this.#state === parserStates.PAYLOADLENGTH_64) {
	        if (this.#byteOffset < 8) {
	          return callback()
	        }

	        const buffer = this.consume(8);
	        const upper = buffer.readUInt32BE(0);

	        // 2^31 is the maximum bytes an arraybuffer can contain
	        // on 32-bit systems. Although, on 64-bit systems, this is
	        // 2^53-1 bytes.
	        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_array_length
	        // https://source.chromium.org/chromium/chromium/src/+/main:v8/src/common/globals.h;drc=1946212ac0100668f14eb9e2843bdd846e510a1e;bpv=1;bpt=1;l=1275
	        // https://source.chromium.org/chromium/chromium/src/+/main:v8/src/objects/js-array-buffer.h;l=34;drc=1946212ac0100668f14eb9e2843bdd846e510a1e
	        if (upper > 2 ** 31 - 1) {
	          failWebsocketConnection(this.ws, 'Received payload length > 2^31 bytes.');
	          return
	        }

	        const lower = buffer.readUInt32BE(4);

	        this.#info.payloadLength = (upper << 8) + lower;
	        this.#state = parserStates.READ_DATA;
	      } else if (this.#state === parserStates.READ_DATA) {
	        if (this.#byteOffset < this.#info.payloadLength) {
	          return callback()
	        }

	        const body = this.consume(this.#info.payloadLength);

	        if (isControlFrame(this.#info.opcode)) {
	          this.#loop = this.parseControlFrame(body);
	          this.#state = parserStates.INFO;
	        } else {
	          if (!this.#info.compressed) {
	            this.#fragments.push(body);

	            // If the frame is not fragmented, a message has been received.
	            // If the frame is fragmented, it will terminate with a fin bit set
	            // and an opcode of 0 (continuation), therefore we handle that when
	            // parsing continuation frames, not here.
	            if (!this.#info.fragmented && this.#info.fin) {
	              const fullMessage = Buffer.concat(this.#fragments);
	              websocketMessageReceived(this.ws, this.#info.binaryType, fullMessage);
	              this.#fragments.length = 0;
	            }

	            this.#state = parserStates.INFO;
	          } else {
	            this.#extensions.get('permessage-deflate').decompress(body, this.#info.fin, (error, data) => {
	              if (error) {
	                closeWebSocketConnection(this.ws, 1007, error.message, error.message.length);
	                return
	              }

	              this.#fragments.push(data);

	              if (!this.#info.fin) {
	                this.#state = parserStates.INFO;
	                this.#loop = true;
	                this.run(callback);
	                return
	              }

	              websocketMessageReceived(this.ws, this.#info.binaryType, Buffer.concat(this.#fragments));

	              this.#loop = true;
	              this.#state = parserStates.INFO;
	              this.#fragments.length = 0;
	              this.run(callback);
	            });

	            this.#loop = false;
	            break
	          }
	        }
	      }
	    }
	  }

	  /**
	   * Take n bytes from the buffered Buffers
	   * @param {number} n
	   * @returns {Buffer}
	   */
	  consume (n) {
	    if (n > this.#byteOffset) {
	      throw new Error('Called consume() before buffers satiated.')
	    } else if (n === 0) {
	      return emptyBuffer
	    }

	    if (this.#buffers[0].length === n) {
	      this.#byteOffset -= this.#buffers[0].length;
	      return this.#buffers.shift()
	    }

	    const buffer = Buffer.allocUnsafe(n);
	    let offset = 0;

	    while (offset !== n) {
	      const next = this.#buffers[0];
	      const { length } = next;

	      if (length + offset === n) {
	        buffer.set(this.#buffers.shift(), offset);
	        break
	      } else if (length + offset > n) {
	        buffer.set(next.subarray(0, n - offset), offset);
	        this.#buffers[0] = next.subarray(n - offset);
	        break
	      } else {
	        buffer.set(this.#buffers.shift(), offset);
	        offset += next.length;
	      }
	    }

	    this.#byteOffset -= n;

	    return buffer
	  }

	  parseCloseBody (data) {
	    assert(data.length !== 1);

	    // https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.5
	    /** @type {number|undefined} */
	    let code;

	    if (data.length >= 2) {
	      // _The WebSocket Connection Close Code_ is
	      // defined as the status code (Section 7.4) contained in the first Close
	      // control frame received by the application
	      code = data.readUInt16BE(0);
	    }

	    if (code !== undefined && !isValidStatusCode(code)) {
	      return { code: 1002, reason: 'Invalid status code', error: true }
	    }

	    // https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.6
	    /** @type {Buffer} */
	    let reason = data.subarray(2);

	    // Remove BOM
	    if (reason[0] === 0xEF && reason[1] === 0xBB && reason[2] === 0xBF) {
	      reason = reason.subarray(3);
	    }

	    try {
	      reason = utf8Decode(reason);
	    } catch {
	      return { code: 1007, reason: 'Invalid UTF-8', error: true }
	    }

	    return { code, reason, error: false }
	  }

	  /**
	   * Parses control frames.
	   * @param {Buffer} body
	   */
	  parseControlFrame (body) {
	    const { opcode, payloadLength } = this.#info;

	    if (opcode === opcodes.CLOSE) {
	      if (payloadLength === 1) {
	        failWebsocketConnection(this.ws, 'Received close frame with a 1-byte body.');
	        return false
	      }

	      this.#info.closeInfo = this.parseCloseBody(body);

	      if (this.#info.closeInfo.error) {
	        const { code, reason } = this.#info.closeInfo;

	        closeWebSocketConnection(this.ws, code, reason, reason.length);
	        failWebsocketConnection(this.ws, reason);
	        return false
	      }

	      if (this.ws[kSentClose] !== sentCloseFrameState.SENT) {
	        // If an endpoint receives a Close frame and did not previously send a
	        // Close frame, the endpoint MUST send a Close frame in response.  (When
	        // sending a Close frame in response, the endpoint typically echos the
	        // status code it received.)
	        let body = emptyBuffer;
	        if (this.#info.closeInfo.code) {
	          body = Buffer.allocUnsafe(2);
	          body.writeUInt16BE(this.#info.closeInfo.code, 0);
	        }
	        const closeFrame = new WebsocketFrameSend(body);

	        this.ws[kResponse].socket.write(
	          closeFrame.createFrame(opcodes.CLOSE),
	          (err) => {
	            if (!err) {
	              this.ws[kSentClose] = sentCloseFrameState.SENT;
	            }
	          }
	        );
	      }

	      // Upon either sending or receiving a Close control frame, it is said
	      // that _The WebSocket Closing Handshake is Started_ and that the
	      // WebSocket connection is in the CLOSING state.
	      this.ws[kReadyState] = states.CLOSING;
	      this.ws[kReceivedClose] = true;

	      return false
	    } else if (opcode === opcodes.PING) {
	      // Upon receipt of a Ping frame, an endpoint MUST send a Pong frame in
	      // response, unless it already received a Close frame.
	      // A Pong frame sent in response to a Ping frame must have identical
	      // "Application data"

	      if (!this.ws[kReceivedClose]) {
	        const frame = new WebsocketFrameSend(body);

	        this.ws[kResponse].socket.write(frame.createFrame(opcodes.PONG));

	        if (channels.ping.hasSubscribers) {
	          channels.ping.publish({
	            payload: body
	          });
	        }
	      }
	    } else if (opcode === opcodes.PONG) {
	      // A Pong frame MAY be sent unsolicited.  This serves as a
	      // unidirectional heartbeat.  A response to an unsolicited Pong frame is
	      // not expected.

	      if (channels.pong.hasSubscribers) {
	        channels.pong.publish({
	          payload: body
	        });
	      }
	    }

	    return true
	  }

	  get closingInfo () {
	    return this.#info.closeInfo
	  }
	}

	receiver$1 = {
	  ByteParser
	};
	return receiver$1;
}

var sender$1;
var hasRequiredSender$1;

function requireSender$1 () {
	if (hasRequiredSender$1) return sender$1;
	hasRequiredSender$1 = 1;

	const { WebsocketFrameSend } = requireFrame();
	const { opcodes, sendHints } = requireConstants$2();
	const FixedQueue = requireFixedQueue();

	/** @type {typeof Uint8Array} */
	const FastBuffer = Buffer[Symbol.species];

	/**
	 * @typedef {object} SendQueueNode
	 * @property {Promise<void> | null} promise
	 * @property {((...args: any[]) => any)} callback
	 * @property {Buffer | null} frame
	 */

	class SendQueue {
	  /**
	   * @type {FixedQueue}
	   */
	  #queue = new FixedQueue()

	  /**
	   * @type {boolean}
	   */
	  #running = false

	  /** @type {import('node:net').Socket} */
	  #socket

	  constructor (socket) {
	    this.#socket = socket;
	  }

	  add (item, cb, hint) {
	    if (hint !== sendHints.blob) {
	      const frame = createFrame(item, hint);
	      if (!this.#running) {
	        // fast-path
	        this.#socket.write(frame, cb);
	      } else {
	        /** @type {SendQueueNode} */
	        const node = {
	          promise: null,
	          callback: cb,
	          frame
	        };
	        this.#queue.push(node);
	      }
	      return
	    }

	    /** @type {SendQueueNode} */
	    const node = {
	      promise: item.arrayBuffer().then((ab) => {
	        node.promise = null;
	        node.frame = createFrame(ab, hint);
	      }),
	      callback: cb,
	      frame: null
	    };

	    this.#queue.push(node);

	    if (!this.#running) {
	      this.#run();
	    }
	  }

	  async #run () {
	    this.#running = true;
	    const queue = this.#queue;
	    while (!queue.isEmpty()) {
	      const node = queue.shift();
	      // wait pending promise
	      if (node.promise !== null) {
	        await node.promise;
	      }
	      // write
	      this.#socket.write(node.frame, node.callback);
	      // cleanup
	      node.callback = node.frame = null;
	    }
	    this.#running = false;
	  }
	}

	function createFrame (data, hint) {
	  return new WebsocketFrameSend(toBuffer(data, hint)).createFrame(hint === sendHints.string ? opcodes.TEXT : opcodes.BINARY)
	}

	function toBuffer (data, hint) {
	  switch (hint) {
	    case sendHints.string:
	      return Buffer.from(data)
	    case sendHints.arrayBuffer:
	    case sendHints.blob:
	      return new FastBuffer(data)
	    case sendHints.typedArray:
	      return new FastBuffer(data.buffer, data.byteOffset, data.byteLength)
	  }
	}

	sender$1 = { SendQueue };
	return sender$1;
}

var websocket$1;
var hasRequiredWebsocket$1;

function requireWebsocket$1 () {
	if (hasRequiredWebsocket$1) return websocket$1;
	hasRequiredWebsocket$1 = 1;

	const { webidl } = requireWebidl();
	const { URLSerializer } = requireDataUrl();
	const { environmentSettingsObject } = requireUtil$7();
	const { staticPropertyDescriptors, states, sentCloseFrameState, sendHints } = requireConstants$2();
	const {
	  kWebSocketURL,
	  kReadyState,
	  kController,
	  kBinaryType,
	  kResponse,
	  kSentClose,
	  kByteParser
	} = requireSymbols$1();
	const {
	  isConnecting,
	  isEstablished,
	  isClosing,
	  isValidSubprotocol,
	  fireEvent
	} = requireUtil$2();
	const { establishWebSocketConnection, closeWebSocketConnection } = requireConnection();
	const { ByteParser } = requireReceiver$1();
	const { kEnumerableProperty, isBlobLike } = requireUtil$8();
	const { getGlobalDispatcher } = requireGlobal();
	const { types } = require$$0$a;
	const { ErrorEvent, CloseEvent } = requireEvents$1();
	const { SendQueue } = requireSender$1();

	// https://websockets.spec.whatwg.org/#interface-definition
	class WebSocket extends EventTarget {
	  #events = {
	    open: null,
	    error: null,
	    close: null,
	    message: null
	  }

	  #bufferedAmount = 0
	  #protocol = ''
	  #extensions = ''

	  /** @type {SendQueue} */
	  #sendQueue

	  /**
	   * @param {string} url
	   * @param {string|string[]} protocols
	   */
	  constructor (url, protocols = []) {
	    super();

	    const prefix = 'WebSocket constructor';
	    webidl.argumentLengthCheck(arguments, 1, prefix);

	    const options = webidl.converters['DOMString or sequence<DOMString> or WebSocketInit'](protocols, prefix, 'options');

	    url = webidl.converters.USVString(url, prefix, 'url');
	    protocols = options.protocols;

	    // 1. Let baseURL be this's relevant settings object's API base URL.
	    const baseURL = environmentSettingsObject.settingsObject.baseUrl;

	    // 1. Let urlRecord be the result of applying the URL parser to url with baseURL.
	    let urlRecord;

	    try {
	      urlRecord = new URL(url, baseURL);
	    } catch (e) {
	      // 3. If urlRecord is failure, then throw a "SyntaxError" DOMException.
	      throw new DOMException(e, 'SyntaxError')
	    }

	    // 4. If urlRecord’s scheme is "http", then set urlRecord’s scheme to "ws".
	    if (urlRecord.protocol === 'http:') {
	      urlRecord.protocol = 'ws:';
	    } else if (urlRecord.protocol === 'https:') {
	      // 5. Otherwise, if urlRecord’s scheme is "https", set urlRecord’s scheme to "wss".
	      urlRecord.protocol = 'wss:';
	    }

	    // 6. If urlRecord’s scheme is not "ws" or "wss", then throw a "SyntaxError" DOMException.
	    if (urlRecord.protocol !== 'ws:' && urlRecord.protocol !== 'wss:') {
	      throw new DOMException(
	        `Expected a ws: or wss: protocol, got ${urlRecord.protocol}`,
	        'SyntaxError'
	      )
	    }

	    // 7. If urlRecord’s fragment is non-null, then throw a "SyntaxError"
	    //    DOMException.
	    if (urlRecord.hash || urlRecord.href.endsWith('#')) {
	      throw new DOMException('Got fragment', 'SyntaxError')
	    }

	    // 8. If protocols is a string, set protocols to a sequence consisting
	    //    of just that string.
	    if (typeof protocols === 'string') {
	      protocols = [protocols];
	    }

	    // 9. If any of the values in protocols occur more than once or otherwise
	    //    fail to match the requirements for elements that comprise the value
	    //    of `Sec-WebSocket-Protocol` fields as defined by The WebSocket
	    //    protocol, then throw a "SyntaxError" DOMException.
	    if (protocols.length !== new Set(protocols.map(p => p.toLowerCase())).size) {
	      throw new DOMException('Invalid Sec-WebSocket-Protocol value', 'SyntaxError')
	    }

	    if (protocols.length > 0 && !protocols.every(p => isValidSubprotocol(p))) {
	      throw new DOMException('Invalid Sec-WebSocket-Protocol value', 'SyntaxError')
	    }

	    // 10. Set this's url to urlRecord.
	    this[kWebSocketURL] = new URL(urlRecord.href);

	    // 11. Let client be this's relevant settings object.
	    const client = environmentSettingsObject.settingsObject;

	    // 12. Run this step in parallel:

	    //    1. Establish a WebSocket connection given urlRecord, protocols,
	    //       and client.
	    this[kController] = establishWebSocketConnection(
	      urlRecord,
	      protocols,
	      client,
	      this,
	      (response, extensions) => this.#onConnectionEstablished(response, extensions),
	      options
	    );

	    // Each WebSocket object has an associated ready state, which is a
	    // number representing the state of the connection. Initially it must
	    // be CONNECTING (0).
	    this[kReadyState] = WebSocket.CONNECTING;

	    this[kSentClose] = sentCloseFrameState.NOT_SENT;

	    // The extensions attribute must initially return the empty string.

	    // The protocol attribute must initially return the empty string.

	    // Each WebSocket object has an associated binary type, which is a
	    // BinaryType. Initially it must be "blob".
	    this[kBinaryType] = 'blob';
	  }

	  /**
	   * @see https://websockets.spec.whatwg.org/#dom-websocket-close
	   * @param {number|undefined} code
	   * @param {string|undefined} reason
	   */
	  close (code = undefined, reason = undefined) {
	    webidl.brandCheck(this, WebSocket);

	    const prefix = 'WebSocket.close';

	    if (code !== undefined) {
	      code = webidl.converters['unsigned short'](code, prefix, 'code', { clamp: true });
	    }

	    if (reason !== undefined) {
	      reason = webidl.converters.USVString(reason, prefix, 'reason');
	    }

	    // 1. If code is present, but is neither an integer equal to 1000 nor an
	    //    integer in the range 3000 to 4999, inclusive, throw an
	    //    "InvalidAccessError" DOMException.
	    if (code !== undefined) {
	      if (code !== 1000 && (code < 3000 || code > 4999)) {
	        throw new DOMException('invalid code', 'InvalidAccessError')
	      }
	    }

	    let reasonByteLength = 0;

	    // 2. If reason is present, then run these substeps:
	    if (reason !== undefined) {
	      // 1. Let reasonBytes be the result of encoding reason.
	      // 2. If reasonBytes is longer than 123 bytes, then throw a
	      //    "SyntaxError" DOMException.
	      reasonByteLength = Buffer.byteLength(reason);

	      if (reasonByteLength > 123) {
	        throw new DOMException(
	          `Reason must be less than 123 bytes; received ${reasonByteLength}`,
	          'SyntaxError'
	        )
	      }
	    }

	    // 3. Run the first matching steps from the following list:
	    closeWebSocketConnection(this, code, reason, reasonByteLength);
	  }

	  /**
	   * @see https://websockets.spec.whatwg.org/#dom-websocket-send
	   * @param {NodeJS.TypedArray|ArrayBuffer|Blob|string} data
	   */
	  send (data) {
	    webidl.brandCheck(this, WebSocket);

	    const prefix = 'WebSocket.send';
	    webidl.argumentLengthCheck(arguments, 1, prefix);

	    data = webidl.converters.WebSocketSendData(data, prefix, 'data');

	    // 1. If this's ready state is CONNECTING, then throw an
	    //    "InvalidStateError" DOMException.
	    if (isConnecting(this)) {
	      throw new DOMException('Sent before connected.', 'InvalidStateError')
	    }

	    // 2. Run the appropriate set of steps from the following list:
	    // https://datatracker.ietf.org/doc/html/rfc6455#section-6.1
	    // https://datatracker.ietf.org/doc/html/rfc6455#section-5.2

	    if (!isEstablished(this) || isClosing(this)) {
	      return
	    }

	    // If data is a string
	    if (typeof data === 'string') {
	      // If the WebSocket connection is established and the WebSocket
	      // closing handshake has not yet started, then the user agent
	      // must send a WebSocket Message comprised of the data argument
	      // using a text frame opcode; if the data cannot be sent, e.g.
	      // because it would need to be buffered but the buffer is full,
	      // the user agent must flag the WebSocket as full and then close
	      // the WebSocket connection. Any invocation of this method with a
	      // string argument that does not throw an exception must increase
	      // the bufferedAmount attribute by the number of bytes needed to
	      // express the argument as UTF-8.

	      const length = Buffer.byteLength(data);

	      this.#bufferedAmount += length;
	      this.#sendQueue.add(data, () => {
	        this.#bufferedAmount -= length;
	      }, sendHints.string);
	    } else if (types.isArrayBuffer(data)) {
	      // If the WebSocket connection is established, and the WebSocket
	      // closing handshake has not yet started, then the user agent must
	      // send a WebSocket Message comprised of data using a binary frame
	      // opcode; if the data cannot be sent, e.g. because it would need
	      // to be buffered but the buffer is full, the user agent must flag
	      // the WebSocket as full and then close the WebSocket connection.
	      // The data to be sent is the data stored in the buffer described
	      // by the ArrayBuffer object. Any invocation of this method with an
	      // ArrayBuffer argument that does not throw an exception must
	      // increase the bufferedAmount attribute by the length of the
	      // ArrayBuffer in bytes.

	      this.#bufferedAmount += data.byteLength;
	      this.#sendQueue.add(data, () => {
	        this.#bufferedAmount -= data.byteLength;
	      }, sendHints.arrayBuffer);
	    } else if (ArrayBuffer.isView(data)) {
	      // If the WebSocket connection is established, and the WebSocket
	      // closing handshake has not yet started, then the user agent must
	      // send a WebSocket Message comprised of data using a binary frame
	      // opcode; if the data cannot be sent, e.g. because it would need to
	      // be buffered but the buffer is full, the user agent must flag the
	      // WebSocket as full and then close the WebSocket connection. The
	      // data to be sent is the data stored in the section of the buffer
	      // described by the ArrayBuffer object that data references. Any
	      // invocation of this method with this kind of argument that does
	      // not throw an exception must increase the bufferedAmount attribute
	      // by the length of data’s buffer in bytes.

	      this.#bufferedAmount += data.byteLength;
	      this.#sendQueue.add(data, () => {
	        this.#bufferedAmount -= data.byteLength;
	      }, sendHints.typedArray);
	    } else if (isBlobLike(data)) {
	      // If the WebSocket connection is established, and the WebSocket
	      // closing handshake has not yet started, then the user agent must
	      // send a WebSocket Message comprised of data using a binary frame
	      // opcode; if the data cannot be sent, e.g. because it would need to
	      // be buffered but the buffer is full, the user agent must flag the
	      // WebSocket as full and then close the WebSocket connection. The data
	      // to be sent is the raw data represented by the Blob object. Any
	      // invocation of this method with a Blob argument that does not throw
	      // an exception must increase the bufferedAmount attribute by the size
	      // of the Blob object’s raw data, in bytes.

	      this.#bufferedAmount += data.size;
	      this.#sendQueue.add(data, () => {
	        this.#bufferedAmount -= data.size;
	      }, sendHints.blob);
	    }
	  }

	  get readyState () {
	    webidl.brandCheck(this, WebSocket);

	    // The readyState getter steps are to return this's ready state.
	    return this[kReadyState]
	  }

	  get bufferedAmount () {
	    webidl.brandCheck(this, WebSocket);

	    return this.#bufferedAmount
	  }

	  get url () {
	    webidl.brandCheck(this, WebSocket);

	    // The url getter steps are to return this's url, serialized.
	    return URLSerializer(this[kWebSocketURL])
	  }

	  get extensions () {
	    webidl.brandCheck(this, WebSocket);

	    return this.#extensions
	  }

	  get protocol () {
	    webidl.brandCheck(this, WebSocket);

	    return this.#protocol
	  }

	  get onopen () {
	    webidl.brandCheck(this, WebSocket);

	    return this.#events.open
	  }

	  set onopen (fn) {
	    webidl.brandCheck(this, WebSocket);

	    if (this.#events.open) {
	      this.removeEventListener('open', this.#events.open);
	    }

	    if (typeof fn === 'function') {
	      this.#events.open = fn;
	      this.addEventListener('open', fn);
	    } else {
	      this.#events.open = null;
	    }
	  }

	  get onerror () {
	    webidl.brandCheck(this, WebSocket);

	    return this.#events.error
	  }

	  set onerror (fn) {
	    webidl.brandCheck(this, WebSocket);

	    if (this.#events.error) {
	      this.removeEventListener('error', this.#events.error);
	    }

	    if (typeof fn === 'function') {
	      this.#events.error = fn;
	      this.addEventListener('error', fn);
	    } else {
	      this.#events.error = null;
	    }
	  }

	  get onclose () {
	    webidl.brandCheck(this, WebSocket);

	    return this.#events.close
	  }

	  set onclose (fn) {
	    webidl.brandCheck(this, WebSocket);

	    if (this.#events.close) {
	      this.removeEventListener('close', this.#events.close);
	    }

	    if (typeof fn === 'function') {
	      this.#events.close = fn;
	      this.addEventListener('close', fn);
	    } else {
	      this.#events.close = null;
	    }
	  }

	  get onmessage () {
	    webidl.brandCheck(this, WebSocket);

	    return this.#events.message
	  }

	  set onmessage (fn) {
	    webidl.brandCheck(this, WebSocket);

	    if (this.#events.message) {
	      this.removeEventListener('message', this.#events.message);
	    }

	    if (typeof fn === 'function') {
	      this.#events.message = fn;
	      this.addEventListener('message', fn);
	    } else {
	      this.#events.message = null;
	    }
	  }

	  get binaryType () {
	    webidl.brandCheck(this, WebSocket);

	    return this[kBinaryType]
	  }

	  set binaryType (type) {
	    webidl.brandCheck(this, WebSocket);

	    if (type !== 'blob' && type !== 'arraybuffer') {
	      this[kBinaryType] = 'blob';
	    } else {
	      this[kBinaryType] = type;
	    }
	  }

	  /**
	   * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
	   */
	  #onConnectionEstablished (response, parsedExtensions) {
	    // processResponse is called when the "response’s header list has been received and initialized."
	    // once this happens, the connection is open
	    this[kResponse] = response;

	    const parser = new ByteParser(this, parsedExtensions);
	    parser.on('drain', onParserDrain);
	    parser.on('error', onParserError.bind(this));

	    response.socket.ws = this;
	    this[kByteParser] = parser;

	    this.#sendQueue = new SendQueue(response.socket);

	    // 1. Change the ready state to OPEN (1).
	    this[kReadyState] = states.OPEN;

	    // 2. Change the extensions attribute’s value to the extensions in use, if
	    //    it is not the null value.
	    // https://datatracker.ietf.org/doc/html/rfc6455#section-9.1
	    const extensions = response.headersList.get('sec-websocket-extensions');

	    if (extensions !== null) {
	      this.#extensions = extensions;
	    }

	    // 3. Change the protocol attribute’s value to the subprotocol in use, if
	    //    it is not the null value.
	    // https://datatracker.ietf.org/doc/html/rfc6455#section-1.9
	    const protocol = response.headersList.get('sec-websocket-protocol');

	    if (protocol !== null) {
	      this.#protocol = protocol;
	    }

	    // 4. Fire an event named open at the WebSocket object.
	    fireEvent('open', this);
	  }
	}

	// https://websockets.spec.whatwg.org/#dom-websocket-connecting
	WebSocket.CONNECTING = WebSocket.prototype.CONNECTING = states.CONNECTING;
	// https://websockets.spec.whatwg.org/#dom-websocket-open
	WebSocket.OPEN = WebSocket.prototype.OPEN = states.OPEN;
	// https://websockets.spec.whatwg.org/#dom-websocket-closing
	WebSocket.CLOSING = WebSocket.prototype.CLOSING = states.CLOSING;
	// https://websockets.spec.whatwg.org/#dom-websocket-closed
	WebSocket.CLOSED = WebSocket.prototype.CLOSED = states.CLOSED;

	Object.defineProperties(WebSocket.prototype, {
	  CONNECTING: staticPropertyDescriptors,
	  OPEN: staticPropertyDescriptors,
	  CLOSING: staticPropertyDescriptors,
	  CLOSED: staticPropertyDescriptors,
	  url: kEnumerableProperty,
	  readyState: kEnumerableProperty,
	  bufferedAmount: kEnumerableProperty,
	  onopen: kEnumerableProperty,
	  onerror: kEnumerableProperty,
	  onclose: kEnumerableProperty,
	  close: kEnumerableProperty,
	  onmessage: kEnumerableProperty,
	  binaryType: kEnumerableProperty,
	  send: kEnumerableProperty,
	  extensions: kEnumerableProperty,
	  protocol: kEnumerableProperty,
	  [Symbol.toStringTag]: {
	    value: 'WebSocket',
	    writable: false,
	    enumerable: false,
	    configurable: true
	  }
	});

	Object.defineProperties(WebSocket, {
	  CONNECTING: staticPropertyDescriptors,
	  OPEN: staticPropertyDescriptors,
	  CLOSING: staticPropertyDescriptors,
	  CLOSED: staticPropertyDescriptors
	});

	webidl.converters['sequence<DOMString>'] = webidl.sequenceConverter(
	  webidl.converters.DOMString
	);

	webidl.converters['DOMString or sequence<DOMString>'] = function (V, prefix, argument) {
	  if (webidl.util.Type(V) === 'Object' && Symbol.iterator in V) {
	    return webidl.converters['sequence<DOMString>'](V)
	  }

	  return webidl.converters.DOMString(V, prefix, argument)
	};

	// This implements the proposal made in https://github.com/whatwg/websockets/issues/42
	webidl.converters.WebSocketInit = webidl.dictionaryConverter([
	  {
	    key: 'protocols',
	    converter: webidl.converters['DOMString or sequence<DOMString>'],
	    defaultValue: () => new Array(0)
	  },
	  {
	    key: 'dispatcher',
	    converter: webidl.converters.any,
	    defaultValue: () => getGlobalDispatcher()
	  },
	  {
	    key: 'headers',
	    converter: webidl.nullableConverter(webidl.converters.HeadersInit)
	  }
	]);

	webidl.converters['DOMString or sequence<DOMString> or WebSocketInit'] = function (V) {
	  if (webidl.util.Type(V) === 'Object' && !(Symbol.iterator in V)) {
	    return webidl.converters.WebSocketInit(V)
	  }

	  return { protocols: webidl.converters['DOMString or sequence<DOMString>'](V) }
	};

	webidl.converters.WebSocketSendData = function (V) {
	  if (webidl.util.Type(V) === 'Object') {
	    if (isBlobLike(V)) {
	      return webidl.converters.Blob(V, { strict: false })
	    }

	    if (ArrayBuffer.isView(V) || types.isArrayBuffer(V)) {
	      return webidl.converters.BufferSource(V)
	    }
	  }

	  return webidl.converters.USVString(V)
	};

	function onParserDrain () {
	  this.ws[kResponse].socket.resume();
	}

	function onParserError (err) {
	  let message;
	  let code;

	  if (err instanceof CloseEvent) {
	    message = err.reason;
	    code = err.code;
	  } else {
	    message = err.message;
	  }

	  fireEvent('error', this, () => new ErrorEvent('error', { error: err, message }));

	  closeWebSocketConnection(this, code);
	}

	websocket$1 = {
	  WebSocket
	};
	return websocket$1;
}

var util;
var hasRequiredUtil$1;

function requireUtil$1 () {
	if (hasRequiredUtil$1) return util;
	hasRequiredUtil$1 = 1;

	/**
	 * Checks if the given value is a valid LastEventId.
	 * @param {string} value
	 * @returns {boolean}
	 */
	function isValidLastEventId (value) {
	  // LastEventId should not contain U+0000 NULL
	  return value.indexOf('\u0000') === -1
	}

	/**
	 * Checks if the given value is a base 10 digit.
	 * @param {string} value
	 * @returns {boolean}
	 */
	function isASCIINumber (value) {
	  if (value.length === 0) return false
	  for (let i = 0; i < value.length; i++) {
	    if (value.charCodeAt(i) < 0x30 || value.charCodeAt(i) > 0x39) return false
	  }
	  return true
	}

	// https://github.com/nodejs/undici/issues/2664
	function delay (ms) {
	  return new Promise((resolve) => {
	    setTimeout(resolve, ms).unref();
	  })
	}

	util = {
	  isValidLastEventId,
	  isASCIINumber,
	  delay
	};
	return util;
}

var eventsourceStream;
var hasRequiredEventsourceStream;

function requireEventsourceStream () {
	if (hasRequiredEventsourceStream) return eventsourceStream;
	hasRequiredEventsourceStream = 1;
	const { Transform } = require$$0$8;
	const { isASCIINumber, isValidLastEventId } = requireUtil$1();

	/**
	 * @type {number[]} BOM
	 */
	const BOM = [0xEF, 0xBB, 0xBF];
	/**
	 * @type {10} LF
	 */
	const LF = 0x0A;
	/**
	 * @type {13} CR
	 */
	const CR = 0x0D;
	/**
	 * @type {58} COLON
	 */
	const COLON = 0x3A;
	/**
	 * @type {32} SPACE
	 */
	const SPACE = 0x20;

	/**
	 * @typedef {object} EventSourceStreamEvent
	 * @type {object}
	 * @property {string} [event] The event type.
	 * @property {string} [data] The data of the message.
	 * @property {string} [id] A unique ID for the event.
	 * @property {string} [retry] The reconnection time, in milliseconds.
	 */

	/**
	 * @typedef eventSourceSettings
	 * @type {object}
	 * @property {string} lastEventId The last event ID received from the server.
	 * @property {string} origin The origin of the event source.
	 * @property {number} reconnectionTime The reconnection time, in milliseconds.
	 */

	class EventSourceStream extends Transform {
	  /**
	   * @type {eventSourceSettings}
	   */
	  state = null

	  /**
	   * Leading byte-order-mark check.
	   * @type {boolean}
	   */
	  checkBOM = true

	  /**
	   * @type {boolean}
	   */
	  crlfCheck = false

	  /**
	   * @type {boolean}
	   */
	  eventEndCheck = false

	  /**
	   * @type {Buffer}
	   */
	  buffer = null

	  pos = 0

	  event = {
	    data: undefined,
	    event: undefined,
	    id: undefined,
	    retry: undefined
	  }

	  /**
	   * @param {object} options
	   * @param {eventSourceSettings} options.eventSourceSettings
	   * @param {Function} [options.push]
	   */
	  constructor (options = {}) {
	    // Enable object mode as EventSourceStream emits objects of shape
	    // EventSourceStreamEvent
	    options.readableObjectMode = true;

	    super(options);

	    this.state = options.eventSourceSettings || {};
	    if (options.push) {
	      this.push = options.push;
	    }
	  }

	  /**
	   * @param {Buffer} chunk
	   * @param {string} _encoding
	   * @param {Function} callback
	   * @returns {void}
	   */
	  _transform (chunk, _encoding, callback) {
	    if (chunk.length === 0) {
	      callback();
	      return
	    }

	    // Cache the chunk in the buffer, as the data might not be complete while
	    // processing it
	    // TODO: Investigate if there is a more performant way to handle
	    // incoming chunks
	    // see: https://github.com/nodejs/undici/issues/2630
	    if (this.buffer) {
	      this.buffer = Buffer.concat([this.buffer, chunk]);
	    } else {
	      this.buffer = chunk;
	    }

	    // Strip leading byte-order-mark if we opened the stream and started
	    // the processing of the incoming data
	    if (this.checkBOM) {
	      switch (this.buffer.length) {
	        case 1:
	          // Check if the first byte is the same as the first byte of the BOM
	          if (this.buffer[0] === BOM[0]) {
	            // If it is, we need to wait for more data
	            callback();
	            return
	          }
	          // Set the checkBOM flag to false as we don't need to check for the
	          // BOM anymore
	          this.checkBOM = false;

	          // The buffer only contains one byte so we need to wait for more data
	          callback();
	          return
	        case 2:
	          // Check if the first two bytes are the same as the first two bytes
	          // of the BOM
	          if (
	            this.buffer[0] === BOM[0] &&
	            this.buffer[1] === BOM[1]
	          ) {
	            // If it is, we need to wait for more data, because the third byte
	            // is needed to determine if it is the BOM or not
	            callback();
	            return
	          }

	          // Set the checkBOM flag to false as we don't need to check for the
	          // BOM anymore
	          this.checkBOM = false;
	          break
	        case 3:
	          // Check if the first three bytes are the same as the first three
	          // bytes of the BOM
	          if (
	            this.buffer[0] === BOM[0] &&
	            this.buffer[1] === BOM[1] &&
	            this.buffer[2] === BOM[2]
	          ) {
	            // If it is, we can drop the buffered data, as it is only the BOM
	            this.buffer = Buffer.alloc(0);
	            // Set the checkBOM flag to false as we don't need to check for the
	            // BOM anymore
	            this.checkBOM = false;

	            // Await more data
	            callback();
	            return
	          }
	          // If it is not the BOM, we can start processing the data
	          this.checkBOM = false;
	          break
	        default:
	          // The buffer is longer than 3 bytes, so we can drop the BOM if it is
	          // present
	          if (
	            this.buffer[0] === BOM[0] &&
	            this.buffer[1] === BOM[1] &&
	            this.buffer[2] === BOM[2]
	          ) {
	            // Remove the BOM from the buffer
	            this.buffer = this.buffer.subarray(3);
	          }

	          // Set the checkBOM flag to false as we don't need to check for the
	          this.checkBOM = false;
	          break
	      }
	    }

	    while (this.pos < this.buffer.length) {
	      // If the previous line ended with an end-of-line, we need to check
	      // if the next character is also an end-of-line.
	      if (this.eventEndCheck) {
	        // If the the current character is an end-of-line, then the event
	        // is finished and we can process it

	        // If the previous line ended with a carriage return, we need to
	        // check if the current character is a line feed and remove it
	        // from the buffer.
	        if (this.crlfCheck) {
	          // If the current character is a line feed, we can remove it
	          // from the buffer and reset the crlfCheck flag
	          if (this.buffer[this.pos] === LF) {
	            this.buffer = this.buffer.subarray(this.pos + 1);
	            this.pos = 0;
	            this.crlfCheck = false;

	            // It is possible that the line feed is not the end of the
	            // event. We need to check if the next character is an
	            // end-of-line character to determine if the event is
	            // finished. We simply continue the loop to check the next
	            // character.

	            // As we removed the line feed from the buffer and set the
	            // crlfCheck flag to false, we basically don't make any
	            // distinction between a line feed and a carriage return.
	            continue
	          }
	          this.crlfCheck = false;
	        }

	        if (this.buffer[this.pos] === LF || this.buffer[this.pos] === CR) {
	          // If the current character is a carriage return, we need to
	          // set the crlfCheck flag to true, as we need to check if the
	          // next character is a line feed so we can remove it from the
	          // buffer
	          if (this.buffer[this.pos] === CR) {
	            this.crlfCheck = true;
	          }

	          this.buffer = this.buffer.subarray(this.pos + 1);
	          this.pos = 0;
	          if (
	            this.event.data !== undefined || this.event.event || this.event.id || this.event.retry) {
	            this.processEvent(this.event);
	          }
	          this.clearEvent();
	          continue
	        }
	        // If the current character is not an end-of-line, then the event
	        // is not finished and we have to reset the eventEndCheck flag
	        this.eventEndCheck = false;
	        continue
	      }

	      // If the current character is an end-of-line, we can process the
	      // line
	      if (this.buffer[this.pos] === LF || this.buffer[this.pos] === CR) {
	        // If the current character is a carriage return, we need to
	        // set the crlfCheck flag to true, as we need to check if the
	        // next character is a line feed
	        if (this.buffer[this.pos] === CR) {
	          this.crlfCheck = true;
	        }

	        // In any case, we can process the line as we reached an
	        // end-of-line character
	        this.parseLine(this.buffer.subarray(0, this.pos), this.event);

	        // Remove the processed line from the buffer
	        this.buffer = this.buffer.subarray(this.pos + 1);
	        // Reset the position as we removed the processed line from the buffer
	        this.pos = 0;
	        // A line was processed and this could be the end of the event. We need
	        // to check if the next line is empty to determine if the event is
	        // finished.
	        this.eventEndCheck = true;
	        continue
	      }

	      this.pos++;
	    }

	    callback();
	  }

	  /**
	   * @param {Buffer} line
	   * @param {EventStreamEvent} event
	   */
	  parseLine (line, event) {
	    // If the line is empty (a blank line)
	    // Dispatch the event, as defined below.
	    // This will be handled in the _transform method
	    if (line.length === 0) {
	      return
	    }

	    // If the line starts with a U+003A COLON character (:)
	    // Ignore the line.
	    const colonPosition = line.indexOf(COLON);
	    if (colonPosition === 0) {
	      return
	    }

	    let field = '';
	    let value = '';

	    // If the line contains a U+003A COLON character (:)
	    if (colonPosition !== -1) {
	      // Collect the characters on the line before the first U+003A COLON
	      // character (:), and let field be that string.
	      // TODO: Investigate if there is a more performant way to extract the
	      // field
	      // see: https://github.com/nodejs/undici/issues/2630
	      field = line.subarray(0, colonPosition).toString('utf8');

	      // Collect the characters on the line after the first U+003A COLON
	      // character (:), and let value be that string.
	      // If value starts with a U+0020 SPACE character, remove it from value.
	      let valueStart = colonPosition + 1;
	      if (line[valueStart] === SPACE) {
	        ++valueStart;
	      }
	      // TODO: Investigate if there is a more performant way to extract the
	      // value
	      // see: https://github.com/nodejs/undici/issues/2630
	      value = line.subarray(valueStart).toString('utf8');

	      // Otherwise, the string is not empty but does not contain a U+003A COLON
	      // character (:)
	    } else {
	      // Process the field using the steps described below, using the whole
	      // line as the field name, and the empty string as the field value.
	      field = line.toString('utf8');
	      value = '';
	    }

	    // Modify the event with the field name and value. The value is also
	    // decoded as UTF-8
	    switch (field) {
	      case 'data':
	        if (event[field] === undefined) {
	          event[field] = value;
	        } else {
	          event[field] += `\n${value}`;
	        }
	        break
	      case 'retry':
	        if (isASCIINumber(value)) {
	          event[field] = value;
	        }
	        break
	      case 'id':
	        if (isValidLastEventId(value)) {
	          event[field] = value;
	        }
	        break
	      case 'event':
	        if (value.length > 0) {
	          event[field] = value;
	        }
	        break
	    }
	  }

	  /**
	   * @param {EventSourceStreamEvent} event
	   */
	  processEvent (event) {
	    if (event.retry && isASCIINumber(event.retry)) {
	      this.state.reconnectionTime = parseInt(event.retry, 10);
	    }

	    if (event.id && isValidLastEventId(event.id)) {
	      this.state.lastEventId = event.id;
	    }

	    // only dispatch event, when data is provided
	    if (event.data !== undefined) {
	      this.push({
	        type: event.event || 'message',
	        options: {
	          data: event.data,
	          lastEventId: this.state.lastEventId,
	          origin: this.state.origin
	        }
	      });
	    }
	  }

	  clearEvent () {
	    this.event = {
	      data: undefined,
	      event: undefined,
	      id: undefined,
	      retry: undefined
	    };
	  }
	}

	eventsourceStream = {
	  EventSourceStream
	};
	return eventsourceStream;
}

var eventsource;
var hasRequiredEventsource;

function requireEventsource () {
	if (hasRequiredEventsource) return eventsource;
	hasRequiredEventsource = 1;

	const { pipeline } = require$$0$8;
	const { fetching } = requireFetch();
	const { makeRequest } = requireRequest();
	const { webidl } = requireWebidl();
	const { EventSourceStream } = requireEventsourceStream();
	const { parseMIMEType } = requireDataUrl();
	const { createFastMessageEvent } = requireEvents$1();
	const { isNetworkError } = requireResponse();
	const { delay } = requireUtil$1();
	const { kEnumerableProperty } = requireUtil$8();
	const { environmentSettingsObject } = requireUtil$7();

	let experimentalWarned = false;

	/**
	 * A reconnection time, in milliseconds. This must initially be an implementation-defined value,
	 * probably in the region of a few seconds.
	 *
	 * In Comparison:
	 * - Chrome uses 3000ms.
	 * - Deno uses 5000ms.
	 *
	 * @type {3000}
	 */
	const defaultReconnectionTime = 3000;

	/**
	 * The readyState attribute represents the state of the connection.
	 * @enum
	 * @readonly
	 * @see https://html.spec.whatwg.org/multipage/server-sent-events.html#dom-eventsource-readystate-dev
	 */

	/**
	 * The connection has not yet been established, or it was closed and the user
	 * agent is reconnecting.
	 * @type {0}
	 */
	const CONNECTING = 0;

	/**
	 * The user agent has an open connection and is dispatching events as it
	 * receives them.
	 * @type {1}
	 */
	const OPEN = 1;

	/**
	 * The connection is not open, and the user agent is not trying to reconnect.
	 * @type {2}
	 */
	const CLOSED = 2;

	/**
	 * Requests for the element will have their mode set to "cors" and their credentials mode set to "same-origin".
	 * @type {'anonymous'}
	 */
	const ANONYMOUS = 'anonymous';

	/**
	 * Requests for the element will have their mode set to "cors" and their credentials mode set to "include".
	 * @type {'use-credentials'}
	 */
	const USE_CREDENTIALS = 'use-credentials';

	/**
	 * The EventSource interface is used to receive server-sent events. It
	 * connects to a server over HTTP and receives events in text/event-stream
	 * format without closing the connection.
	 * @extends {EventTarget}
	 * @see https://html.spec.whatwg.org/multipage/server-sent-events.html#server-sent-events
	 * @api public
	 */
	class EventSource extends EventTarget {
	  #events = {
	    open: null,
	    error: null,
	    message: null
	  }

	  #url = null
	  #withCredentials = false

	  #readyState = CONNECTING

	  #request = null
	  #controller = null

	  #dispatcher

	  /**
	   * @type {import('./eventsource-stream').eventSourceSettings}
	   */
	  #state

	  /**
	   * Creates a new EventSource object.
	   * @param {string} url
	   * @param {EventSourceInit} [eventSourceInitDict]
	   * @see https://html.spec.whatwg.org/multipage/server-sent-events.html#the-eventsource-interface
	   */
	  constructor (url, eventSourceInitDict = {}) {
	    // 1. Let ev be a new EventSource object.
	    super();

	    const prefix = 'EventSource constructor';
	    webidl.argumentLengthCheck(arguments, 1, prefix);

	    if (!experimentalWarned) {
	      experimentalWarned = true;
	      process.emitWarning('EventSource is experimental, expect them to change at any time.', {
	        code: 'UNDICI-ES'
	      });
	    }

	    url = webidl.converters.USVString(url, prefix, 'url');
	    eventSourceInitDict = webidl.converters.EventSourceInitDict(eventSourceInitDict, prefix, 'eventSourceInitDict');

	    this.#dispatcher = eventSourceInitDict.dispatcher;
	    this.#state = {
	      lastEventId: '',
	      reconnectionTime: defaultReconnectionTime
	    };

	    // 2. Let settings be ev's relevant settings object.
	    // https://html.spec.whatwg.org/multipage/webappapis.html#environment-settings-object
	    const settings = environmentSettingsObject;

	    let urlRecord;

	    try {
	      // 3. Let urlRecord be the result of encoding-parsing a URL given url, relative to settings.
	      urlRecord = new URL(url, settings.settingsObject.baseUrl);
	      this.#state.origin = urlRecord.origin;
	    } catch (e) {
	      // 4. If urlRecord is failure, then throw a "SyntaxError" DOMException.
	      throw new DOMException(e, 'SyntaxError')
	    }

	    // 5. Set ev's url to urlRecord.
	    this.#url = urlRecord.href;

	    // 6. Let corsAttributeState be Anonymous.
	    let corsAttributeState = ANONYMOUS;

	    // 7. If the value of eventSourceInitDict's withCredentials member is true,
	    // then set corsAttributeState to Use Credentials and set ev's
	    // withCredentials attribute to true.
	    if (eventSourceInitDict.withCredentials) {
	      corsAttributeState = USE_CREDENTIALS;
	      this.#withCredentials = true;
	    }

	    // 8. Let request be the result of creating a potential-CORS request given
	    // urlRecord, the empty string, and corsAttributeState.
	    const initRequest = {
	      redirect: 'follow',
	      keepalive: true,
	      // @see https://html.spec.whatwg.org/multipage/urls-and-fetching.html#cors-settings-attributes
	      mode: 'cors',
	      credentials: corsAttributeState === 'anonymous'
	        ? 'same-origin'
	        : 'omit',
	      referrer: 'no-referrer'
	    };

	    // 9. Set request's client to settings.
	    initRequest.client = environmentSettingsObject.settingsObject;

	    // 10. User agents may set (`Accept`, `text/event-stream`) in request's header list.
	    initRequest.headersList = [['accept', { name: 'accept', value: 'text/event-stream' }]];

	    // 11. Set request's cache mode to "no-store".
	    initRequest.cache = 'no-store';

	    // 12. Set request's initiator type to "other".
	    initRequest.initiator = 'other';

	    initRequest.urlList = [new URL(this.#url)];

	    // 13. Set ev's request to request.
	    this.#request = makeRequest(initRequest);

	    this.#connect();
	  }

	  /**
	   * Returns the state of this EventSource object's connection. It can have the
	   * values described below.
	   * @returns {0|1|2}
	   * @readonly
	   */
	  get readyState () {
	    return this.#readyState
	  }

	  /**
	   * Returns the URL providing the event stream.
	   * @readonly
	   * @returns {string}
	   */
	  get url () {
	    return this.#url
	  }

	  /**
	   * Returns a boolean indicating whether the EventSource object was
	   * instantiated with CORS credentials set (true), or not (false, the default).
	   */
	  get withCredentials () {
	    return this.#withCredentials
	  }

	  #connect () {
	    if (this.#readyState === CLOSED) return

	    this.#readyState = CONNECTING;

	    const fetchParams = {
	      request: this.#request,
	      dispatcher: this.#dispatcher
	    };

	    // 14. Let processEventSourceEndOfBody given response res be the following step: if res is not a network error, then reestablish the connection.
	    const processEventSourceEndOfBody = (response) => {
	      if (isNetworkError(response)) {
	        this.dispatchEvent(new Event('error'));
	        this.close();
	      }

	      this.#reconnect();
	    };

	    // 15. Fetch request, with processResponseEndOfBody set to processEventSourceEndOfBody...
	    fetchParams.processResponseEndOfBody = processEventSourceEndOfBody;

	    // and processResponse set to the following steps given response res:
	    fetchParams.processResponse = (response) => {
	      // 1. If res is an aborted network error, then fail the connection.

	      if (isNetworkError(response)) {
	        // 1. When a user agent is to fail the connection, the user agent
	        // must queue a task which, if the readyState attribute is set to a
	        // value other than CLOSED, sets the readyState attribute to CLOSED
	        // and fires an event named error at the EventSource object. Once the
	        // user agent has failed the connection, it does not attempt to
	        // reconnect.
	        if (response.aborted) {
	          this.close();
	          this.dispatchEvent(new Event('error'));
	          return
	          // 2. Otherwise, if res is a network error, then reestablish the
	          // connection, unless the user agent knows that to be futile, in
	          // which case the user agent may fail the connection.
	        } else {
	          this.#reconnect();
	          return
	        }
	      }

	      // 3. Otherwise, if res's status is not 200, or if res's `Content-Type`
	      // is not `text/event-stream`, then fail the connection.
	      const contentType = response.headersList.get('content-type', true);
	      const mimeType = contentType !== null ? parseMIMEType(contentType) : 'failure';
	      const contentTypeValid = mimeType !== 'failure' && mimeType.essence === 'text/event-stream';
	      if (
	        response.status !== 200 ||
	        contentTypeValid === false
	      ) {
	        this.close();
	        this.dispatchEvent(new Event('error'));
	        return
	      }

	      // 4. Otherwise, announce the connection and interpret res's body
	      // line by line.

	      // When a user agent is to announce the connection, the user agent
	      // must queue a task which, if the readyState attribute is set to a
	      // value other than CLOSED, sets the readyState attribute to OPEN
	      // and fires an event named open at the EventSource object.
	      // @see https://html.spec.whatwg.org/multipage/server-sent-events.html#sse-processing-model
	      this.#readyState = OPEN;
	      this.dispatchEvent(new Event('open'));

	      // If redirected to a different origin, set the origin to the new origin.
	      this.#state.origin = response.urlList[response.urlList.length - 1].origin;

	      const eventSourceStream = new EventSourceStream({
	        eventSourceSettings: this.#state,
	        push: (event) => {
	          this.dispatchEvent(createFastMessageEvent(
	            event.type,
	            event.options
	          ));
	        }
	      });

	      pipeline(response.body.stream,
	        eventSourceStream,
	        (error) => {
	          if (
	            error?.aborted === false
	          ) {
	            this.close();
	            this.dispatchEvent(new Event('error'));
	          }
	        });
	    };

	    this.#controller = fetching(fetchParams);
	  }

	  /**
	   * @see https://html.spec.whatwg.org/multipage/server-sent-events.html#sse-processing-model
	   * @returns {Promise<void>}
	   */
	  async #reconnect () {
	    // When a user agent is to reestablish the connection, the user agent must
	    // run the following steps. These steps are run in parallel, not as part of
	    // a task. (The tasks that it queues, of course, are run like normal tasks
	    // and not themselves in parallel.)

	    // 1. Queue a task to run the following steps:

	    //   1. If the readyState attribute is set to CLOSED, abort the task.
	    if (this.#readyState === CLOSED) return

	    //   2. Set the readyState attribute to CONNECTING.
	    this.#readyState = CONNECTING;

	    //   3. Fire an event named error at the EventSource object.
	    this.dispatchEvent(new Event('error'));

	    // 2. Wait a delay equal to the reconnection time of the event source.
	    await delay(this.#state.reconnectionTime);

	    // 5. Queue a task to run the following steps:

	    //   1. If the EventSource object's readyState attribute is not set to
	    //      CONNECTING, then return.
	    if (this.#readyState !== CONNECTING) return

	    //   2. Let request be the EventSource object's request.
	    //   3. If the EventSource object's last event ID string is not the empty
	    //      string, then:
	    //      1. Let lastEventIDValue be the EventSource object's last event ID
	    //         string, encoded as UTF-8.
	    //      2. Set (`Last-Event-ID`, lastEventIDValue) in request's header
	    //         list.
	    if (this.#state.lastEventId.length) {
	      this.#request.headersList.set('last-event-id', this.#state.lastEventId, true);
	    }

	    //   4. Fetch request and process the response obtained in this fashion, if any, as described earlier in this section.
	    this.#connect();
	  }

	  /**
	   * Closes the connection, if any, and sets the readyState attribute to
	   * CLOSED.
	   */
	  close () {
	    webidl.brandCheck(this, EventSource);

	    if (this.#readyState === CLOSED) return
	    this.#readyState = CLOSED;
	    this.#controller.abort();
	    this.#request = null;
	  }

	  get onopen () {
	    return this.#events.open
	  }

	  set onopen (fn) {
	    if (this.#events.open) {
	      this.removeEventListener('open', this.#events.open);
	    }

	    if (typeof fn === 'function') {
	      this.#events.open = fn;
	      this.addEventListener('open', fn);
	    } else {
	      this.#events.open = null;
	    }
	  }

	  get onmessage () {
	    return this.#events.message
	  }

	  set onmessage (fn) {
	    if (this.#events.message) {
	      this.removeEventListener('message', this.#events.message);
	    }

	    if (typeof fn === 'function') {
	      this.#events.message = fn;
	      this.addEventListener('message', fn);
	    } else {
	      this.#events.message = null;
	    }
	  }

	  get onerror () {
	    return this.#events.error
	  }

	  set onerror (fn) {
	    if (this.#events.error) {
	      this.removeEventListener('error', this.#events.error);
	    }

	    if (typeof fn === 'function') {
	      this.#events.error = fn;
	      this.addEventListener('error', fn);
	    } else {
	      this.#events.error = null;
	    }
	  }
	}

	const constantsPropertyDescriptors = {
	  CONNECTING: {
	    __proto__: null,
	    configurable: false,
	    enumerable: true,
	    value: CONNECTING,
	    writable: false
	  },
	  OPEN: {
	    __proto__: null,
	    configurable: false,
	    enumerable: true,
	    value: OPEN,
	    writable: false
	  },
	  CLOSED: {
	    __proto__: null,
	    configurable: false,
	    enumerable: true,
	    value: CLOSED,
	    writable: false
	  }
	};

	Object.defineProperties(EventSource, constantsPropertyDescriptors);
	Object.defineProperties(EventSource.prototype, constantsPropertyDescriptors);

	Object.defineProperties(EventSource.prototype, {
	  close: kEnumerableProperty,
	  onerror: kEnumerableProperty,
	  onmessage: kEnumerableProperty,
	  onopen: kEnumerableProperty,
	  readyState: kEnumerableProperty,
	  url: kEnumerableProperty,
	  withCredentials: kEnumerableProperty
	});

	webidl.converters.EventSourceInitDict = webidl.dictionaryConverter([
	  {
	    key: 'withCredentials',
	    converter: webidl.converters.boolean,
	    defaultValue: () => false
	  },
	  {
	    key: 'dispatcher', // undici only
	    converter: webidl.converters.any
	  }
	]);

	eventsource = {
	  EventSource,
	  defaultReconnectionTime
	};
	return eventsource;
}

var hasRequiredUndici;

function requireUndici () {
	if (hasRequiredUndici) return undici;
	hasRequiredUndici = 1;

	const Client = requireClient$1();
	const Dispatcher = requireDispatcher();
	const Pool = requirePool();
	const BalancedPool = requireBalancedPool();
	const Agent = requireAgent();
	const ProxyAgent = requireProxyAgent();
	const EnvHttpProxyAgent = requireEnvHttpProxyAgent();
	const RetryAgent = requireRetryAgent();
	const errors = requireErrors();
	const util = requireUtil$8();
	const { InvalidArgumentError } = errors;
	const api = requireApi();
	const buildConnector = requireConnect();
	const MockClient = requireMockClient();
	const MockAgent = requireMockAgent();
	const MockPool = requireMockPool();
	const mockErrors = requireMockErrors();
	const RetryHandler = requireRetryHandler();
	const { getGlobalDispatcher, setGlobalDispatcher } = requireGlobal();
	const DecoratorHandler = requireDecoratorHandler();
	const RedirectHandler = requireRedirectHandler();
	const createRedirectInterceptor = requireRedirectInterceptor();

	Object.assign(Dispatcher.prototype, api);

	undici.Dispatcher = Dispatcher;
	undici.Client = Client;
	undici.Pool = Pool;
	undici.BalancedPool = BalancedPool;
	undici.Agent = Agent;
	undici.ProxyAgent = ProxyAgent;
	undici.EnvHttpProxyAgent = EnvHttpProxyAgent;
	undici.RetryAgent = RetryAgent;
	undici.RetryHandler = RetryHandler;

	undici.DecoratorHandler = DecoratorHandler;
	undici.RedirectHandler = RedirectHandler;
	undici.createRedirectInterceptor = createRedirectInterceptor;
	undici.interceptors = {
	  redirect: requireRedirect(),
	  retry: requireRetry(),
	  dump: requireDump()
	};

	undici.buildConnector = buildConnector;
	undici.errors = errors;
	undici.util = {
	  parseHeaders: util.parseHeaders,
	  headerNameToString: util.headerNameToString
	};

	function makeDispatcher (fn) {
	  return (url, opts, handler) => {
	    if (typeof opts === 'function') {
	      handler = opts;
	      opts = null;
	    }

	    if (!url || (typeof url !== 'string' && typeof url !== 'object' && !(url instanceof URL))) {
	      throw new InvalidArgumentError('invalid url')
	    }

	    if (opts != null && typeof opts !== 'object') {
	      throw new InvalidArgumentError('invalid opts')
	    }

	    if (opts && opts.path != null) {
	      if (typeof opts.path !== 'string') {
	        throw new InvalidArgumentError('invalid opts.path')
	      }

	      let path = opts.path;
	      if (!opts.path.startsWith('/')) {
	        path = `/${path}`;
	      }

	      url = new URL(util.parseOrigin(url).origin + path);
	    } else {
	      if (!opts) {
	        opts = typeof url === 'object' ? url : {};
	      }

	      url = util.parseURL(url);
	    }

	    const { agent, dispatcher = getGlobalDispatcher() } = opts;

	    if (agent) {
	      throw new InvalidArgumentError('unsupported opts.agent. Did you mean opts.client?')
	    }

	    return fn.call(dispatcher, {
	      ...opts,
	      origin: url.origin,
	      path: url.search ? `${url.pathname}${url.search}` : url.pathname,
	      method: opts.method || (opts.body ? 'PUT' : 'GET')
	    }, handler)
	  }
	}

	undici.setGlobalDispatcher = setGlobalDispatcher;
	undici.getGlobalDispatcher = getGlobalDispatcher;

	const fetchImpl = requireFetch().fetch;
	undici.fetch = async function fetch (init, options = undefined) {
	  try {
	    return await fetchImpl(init, options)
	  } catch (err) {
	    if (err && typeof err === 'object') {
	      Error.captureStackTrace(err);
	    }

	    throw err
	  }
	};
	undici.Headers = requireHeaders().Headers;
	undici.Response = requireResponse().Response;
	undici.Request = requireRequest().Request;
	undici.FormData = requireFormdata().FormData;
	undici.File = globalThis.File ?? require$$0$9.File;
	undici.FileReader = requireFilereader().FileReader;

	const { setGlobalOrigin, getGlobalOrigin } = requireGlobal$1();

	undici.setGlobalOrigin = setGlobalOrigin;
	undici.getGlobalOrigin = getGlobalOrigin;

	const { CacheStorage } = requireCachestorage();
	const { kConstruct } = requireSymbols$2();

	// Cache & CacheStorage are tightly coupled with fetch. Even if it may run
	// in an older version of Node, it doesn't have any use without fetch.
	undici.caches = new CacheStorage(kConstruct);

	const { deleteCookie, getCookies, getSetCookies, setCookie } = requireCookies();

	undici.deleteCookie = deleteCookie;
	undici.getCookies = getCookies;
	undici.getSetCookies = getSetCookies;
	undici.setCookie = setCookie;

	const { parseMIMEType, serializeAMimeType } = requireDataUrl();

	undici.parseMIMEType = parseMIMEType;
	undici.serializeAMimeType = serializeAMimeType;

	const { CloseEvent, ErrorEvent, MessageEvent } = requireEvents$1();
	undici.WebSocket = requireWebsocket$1().WebSocket;
	undici.CloseEvent = CloseEvent;
	undici.ErrorEvent = ErrorEvent;
	undici.MessageEvent = MessageEvent;

	undici.request = makeDispatcher(api.request);
	undici.stream = makeDispatcher(api.stream);
	undici.pipeline = makeDispatcher(api.pipeline);
	undici.connect = makeDispatcher(api.connect);
	undici.upgrade = makeDispatcher(api.upgrade);

	undici.MockClient = MockClient;
	undici.MockPool = MockPool;
	undici.MockAgent = MockAgent;
	undici.mockErrors = mockErrors;

	const { EventSource } = requireEventsource();

	undici.EventSource = EventSource;
	return undici;
}

var Colors;
var hasRequiredColors;

function requireColors () {
	if (hasRequiredColors) return Colors;
	hasRequiredColors = 1;

	/**
	 * @typedef {Object} Colors
	 * @property {number} Default 0x000000 | rgb(0,0,0)
	 * @property {number} White 0xFFFFFF | rgb(255,255,255)
	 * @property {number} Aqua 0x1ABC9C | rgb(26,188,156)
	 * @property {number} Green 0x57F287 | rgb(87,242,135)
	 * @property {number} Blue 0x3498DB | rgb(52,152,219)
	 * @property {number} Yellow 0xFEE75C | rgb(254,231,92)
	 * @property {number} Purple 0x9B59B6 | rgb(155,89,182)
	 * @property {number} LuminousVividPink 0xE91E63 | rgb(233,30,99)
	 * @property {number} Fuchsia 0xEB459E | rgb(235,69,158)
	 * @property {number} Gold 0xF1C40F | rgb(241,196,15)
	 * @property {number} Orange 0xE67E22 | rgb(230,126,34)
	 * @property {number} Red 0xED4245 | rgb(237,66,69)
	 * @property {number} Grey 0x95A5A6 | rgb(149,165,166)
	 * @property {number} Navy 0x34495E | rgb(52,73,94)
	 * @property {number} DarkAqua 0x11806A | rgb(17,128,106)
	 * @property {number} DarkGreen 0x1F8B4C | rgb(31,139,76)
	 * @property {number} DarkBlue 0x206694 | rgb(32,102,148)
	 * @property {number} DarkPurple 0x71368A | rgb(113,54,138)
	 * @property {number} DarkVividPink 0xAD1457 | rgb(173,20,87)
	 * @property {number} DarkGold 0xC27C0E | rgb(194,124,14)
	 * @property {number} DarkOrange 0xA84300 | rgb(168,67,0)
	 * @property {number} DarkRed 0x992D22 | rgb(153,45,34)
	 * @property {number} DarkGrey 0x979C9F | rgb(151,156,159)
	 * @property {number} DarkerGrey 0x7F8C8D | rgb(127,140,141)
	 * @property {number} LightGrey 0xBCC0C0 | rgb(188,192,192)
	 * @property {number} DarkNavy 0x2C3E50 | rgb(44,62,80)
	 * @property {number} Blurple 0x5865F2 | rgb(88,101,242)
	 * @property {number} Greyple 0x99AAb5 | rgb(153,170,181)
	 * @property {number} DarkButNotBlack 0x2C2F33 | rgb(44,47,51)
	 * @property {number} NotQuiteBlack 0x23272A | rgb(35,39,42)
	 */

	// JSDoc for IntelliSense purposes
	/**
	 * @type {Colors}
	 * @ignore
	 */
	Colors = {
	  Default: 0x000000,
	  White: 0xffffff,
	  Aqua: 0x1abc9c,
	  Green: 0x57f287,
	  Blue: 0x3498db,
	  Yellow: 0xfee75c,
	  Purple: 0x9b59b6,
	  LuminousVividPink: 0xe91e63,
	  Fuchsia: 0xeb459e,
	  Gold: 0xf1c40f,
	  Orange: 0xe67e22,
	  Red: 0xed4245,
	  Grey: 0x95a5a6,
	  Navy: 0x34495e,
	  DarkAqua: 0x11806a,
	  DarkGreen: 0x1f8b4c,
	  DarkBlue: 0x206694,
	  DarkPurple: 0x71368a,
	  DarkVividPink: 0xad1457,
	  DarkGold: 0xc27c0e,
	  DarkOrange: 0xa84300,
	  DarkRed: 0x992d22,
	  DarkGrey: 0x979c9f,
	  DarkerGrey: 0x7f8c8d,
	  LightGrey: 0xbcc0c0,
	  DarkNavy: 0x2c3e50,
	  Blurple: 0x5865f2,
	  Greyple: 0x99aab5,
	  DarkButNotBlack: 0x2c2f33,
	  NotQuiteBlack: 0x23272a,
	};
	return Colors;
}

var BitField_1;
var hasRequiredBitField;

function requireBitField () {
	if (hasRequiredBitField) return BitField_1;
	hasRequiredBitField = 1;

	const { DiscordjsRangeError, ErrorCodes } = requireErrors$1();

	/**
	 * Data structure that makes it easy to interact with a bitfield.
	 */
	class BitField {
	  /**
	   * Numeric bitfield flags.
	   * <info>Defined in extension classes</info>
	   * @type {Object}
	   * @memberof BitField
	   * @abstract
	   */
	  static Flags = {};

	  /**
	   * @type {number|bigint}
	   * @memberof BitField
	   * @private
	   */
	  static DefaultBit = 0;

	  /**
	   * @param {BitFieldResolvable} [bits=this.constructor.DefaultBit] Bit(s) to read from
	   */
	  constructor(bits = this.constructor.DefaultBit) {
	    /**
	     * Bitfield of the packed bits
	     * @type {number|bigint}
	     */
	    this.bitfield = this.constructor.resolve(bits);
	  }

	  /**
	   * Checks whether the bitfield has a bit, or any of multiple bits.
	   * @param {BitFieldResolvable} bit Bit(s) to check for
	   * @returns {boolean}
	   */
	  any(bit) {
	    return (this.bitfield & this.constructor.resolve(bit)) !== this.constructor.DefaultBit;
	  }

	  /**
	   * Checks if this bitfield equals another
	   * @param {BitFieldResolvable} bit Bit(s) to check for
	   * @returns {boolean}
	   */
	  equals(bit) {
	    return this.bitfield === this.constructor.resolve(bit);
	  }

	  /**
	   * Checks whether the bitfield has a bit, or multiple bits.
	   * @param {BitFieldResolvable} bit Bit(s) to check for
	   * @returns {boolean}
	   */
	  has(bit) {
	    bit = this.constructor.resolve(bit);
	    return (this.bitfield & bit) === bit;
	  }

	  /**
	   * Gets all given bits that are missing from the bitfield.
	   * @param {BitFieldResolvable} bits Bit(s) to check for
	   * @param {...*} hasParams Additional parameters for the has method, if any
	   * @returns {string[]}
	   */
	  missing(bits, ...hasParams) {
	    return new this.constructor(bits).remove(this).toArray(...hasParams);
	  }

	  /**
	   * Freezes these bits, making them immutable.
	   * @returns {Readonly<BitField>}
	   */
	  freeze() {
	    return Object.freeze(this);
	  }

	  /**
	   * Adds bits to these ones.
	   * @param {...BitFieldResolvable} [bits] Bits to add
	   * @returns {BitField} These bits or new BitField if the instance is frozen.
	   */
	  add(...bits) {
	    let total = this.constructor.DefaultBit;
	    for (const bit of bits) {
	      total |= this.constructor.resolve(bit);
	    }
	    if (Object.isFrozen(this)) return new this.constructor(this.bitfield | total);
	    this.bitfield |= total;
	    return this;
	  }

	  /**
	   * Removes bits from these.
	   * @param {...BitFieldResolvable} [bits] Bits to remove
	   * @returns {BitField} These bits or new BitField if the instance is frozen.
	   */
	  remove(...bits) {
	    let total = this.constructor.DefaultBit;
	    for (const bit of bits) {
	      total |= this.constructor.resolve(bit);
	    }
	    if (Object.isFrozen(this)) return new this.constructor(this.bitfield & ~total);
	    this.bitfield &= ~total;
	    return this;
	  }

	  /**
	   * Gets an object mapping field names to a {@link boolean} indicating whether the
	   * bit is available.
	   * @param {...*} hasParams Additional parameters for the has method, if any
	   * @returns {Object}
	   */
	  serialize(...hasParams) {
	    const serialized = {};
	    for (const [flag, bit] of Object.entries(this.constructor.Flags)) {
	      if (isNaN(flag)) serialized[flag] = this.has(bit, ...hasParams);
	    }
	    return serialized;
	  }

	  /**
	   * Gets an {@link Array} of bitfield names based on the bits available.
	   * @param {...*} hasParams Additional parameters for the has method, if any
	   * @returns {string[]}
	   */
	  toArray(...hasParams) {
	    return [...this[Symbol.iterator](...hasParams)];
	  }

	  toJSON() {
	    return typeof this.bitfield === 'number' ? this.bitfield : this.bitfield.toString();
	  }

	  valueOf() {
	    return this.bitfield;
	  }

	  *[Symbol.iterator](...hasParams) {
	    for (const bitName of Object.keys(this.constructor.Flags)) {
	      if (isNaN(bitName) && this.has(bitName, ...hasParams)) yield bitName;
	    }
	  }

	  /**
	   * Data that can be resolved to give a bitfield. This can be:
	   * * A bit number (this can be a number literal or a value taken from {@link BitField.Flags})
	   * * A string bit number
	   * * An instance of BitField
	   * * An Array of BitFieldResolvable
	   * @typedef {number|string|bigint|BitField|BitFieldResolvable[]} BitFieldResolvable
	   */

	  /**
	   * Resolves bitfields to their numeric form.
	   * @param {BitFieldResolvable} [bit] bit(s) to resolve
	   * @returns {number|bigint}
	   */
	  static resolve(bit) {
	    const { DefaultBit } = this;
	    if (typeof DefaultBit === typeof bit && bit >= DefaultBit) return bit;
	    if (bit instanceof BitField) return bit.bitfield;
	    if (Array.isArray(bit)) {
	      return bit.map(bit_ => this.resolve(bit_)).reduce((prev, bit_) => prev | bit_, DefaultBit);
	    }
	    if (typeof bit === 'string') {
	      if (!isNaN(bit)) return typeof DefaultBit === 'bigint' ? BigInt(bit) : Number(bit);
	      if (this.Flags[bit] !== undefined) return this.Flags[bit];
	    }
	    throw new DiscordjsRangeError(ErrorCodes.BitFieldInvalid, bit);
	  }
	}

	BitField_1 = BitField;
	return BitField_1;
}

var AttachmentFlagsBitField_1;
var hasRequiredAttachmentFlagsBitField;

function requireAttachmentFlagsBitField () {
	if (hasRequiredAttachmentFlagsBitField) return AttachmentFlagsBitField_1;
	hasRequiredAttachmentFlagsBitField = 1;

	const { AttachmentFlags } = requireV10$6();
	const BitField = requireBitField();

	/**
	 * Data structure that makes it easy to interact with an {@link Attachment#flags} bitfield.
	 * @extends {BitField}
	 */
	class AttachmentFlagsBitField extends BitField {
	  /**
	   * Numeric attachment flags.
	   * @type {AttachmentFlags}
	   * @memberof AttachmentFlagsBitField
	   */
	  static Flags = AttachmentFlags;
	}

	/**
	 * @name AttachmentFlagsBitField
	 * @kind constructor
	 * @memberof AttachmentFlagsBitField
	 * @param {BitFieldResolvable} [bits=0] Bit(s) to read from
	 */

	AttachmentFlagsBitField_1 = AttachmentFlagsBitField;
	return AttachmentFlagsBitField_1;
}

var Attachment_1;
var hasRequiredAttachment$1;

function requireAttachment$1 () {
	if (hasRequiredAttachment$1) return Attachment_1;
	hasRequiredAttachment$1 = 1;

	const AttachmentFlagsBitField = requireAttachmentFlagsBitField();
	const { basename, flatten } = requireUtil();

	/**
	 * @typedef {Object} AttachmentPayload
	 * @property {?string} name The name of the attachment
	 * @property {Stream|BufferResolvable} attachment The attachment in this payload
	 * @property {?string} description The description of the attachment
	 */

	/**
	 * Represents an attachment
	 */
	class Attachment {
	  constructor(data) {
	    this.attachment = data.url;
	    /**
	     * The name of this attachment
	     * @type {string}
	     */
	    this.name = data.filename;
	    this._patch(data);
	  }

	  _patch(data) {
	    /**
	     * The attachment's id
	     * @type {Snowflake}
	     */
	    this.id = data.id;

	    if ('size' in data) {
	      /**
	       * The size of this attachment in bytes
	       * @type {number}
	       */
	      this.size = data.size;
	    }

	    if ('url' in data) {
	      /**
	       * The URL to this attachment
	       * @type {string}
	       */
	      this.url = data.url;
	    }

	    if ('proxy_url' in data) {
	      /**
	       * The Proxy URL to this attachment
	       * @type {string}
	       */
	      this.proxyURL = data.proxy_url;
	    }

	    if ('height' in data) {
	      /**
	       * The height of this attachment (if an image or video)
	       * @type {?number}
	       */
	      this.height = data.height;
	    } else {
	      this.height ??= null;
	    }

	    if ('width' in data) {
	      /**
	       * The width of this attachment (if an image or video)
	       * @type {?number}
	       */
	      this.width = data.width;
	    } else {
	      this.width ??= null;
	    }

	    if ('content_type' in data) {
	      /**
	       * The media (MIME) type of this attachment
	       * @type {?string}
	       * @see {@link https://developer.mozilla.org/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types}
	       */
	      this.contentType = data.content_type;
	    } else {
	      this.contentType ??= null;
	    }

	    if ('description' in data) {
	      /**
	       * The description (alt text) of this attachment
	       * @type {?string}
	       */
	      this.description = data.description;
	    } else {
	      this.description ??= null;
	    }

	    /**
	     * Whether this attachment is ephemeral
	     * @type {boolean}
	     */
	    this.ephemeral = data.ephemeral ?? false;

	    if ('duration_secs' in data) {
	      /**
	       * The duration of this attachment in seconds
	       * <info>This will only be available if the attachment is an audio file.</info>
	       * @type {?number}
	       */
	      this.duration = data.duration_secs;
	    } else {
	      this.duration ??= null;
	    }

	    if ('waveform' in data) {
	      /**
	       * The base64 encoded byte array representing a sampled waveform
	       * <info>This will only be available if the attachment is an audio file.</info>
	       * @type {?string}
	       */
	      this.waveform = data.waveform;
	    } else {
	      this.waveform ??= null;
	    }

	    if ('flags' in data) {
	      /**
	       * The flags of this attachment
	       * @type {Readonly<AttachmentFlagsBitField>}
	       */
	      this.flags = new AttachmentFlagsBitField(data.flags).freeze();
	    } else {
	      this.flags ??= new AttachmentFlagsBitField().freeze();
	    }

	    if ('title' in data) {
	      /**
	       * The title of this attachment
	       * <info>This will only be available if the attachment name contains special characters.</info>
	       * @type {?string}
	       */
	      this.title = data.title;
	    } else {
	      this.title ??= null;
	    }
	  }

	  /**
	   * Whether or not this attachment has been marked as a spoiler
	   * @type {boolean}
	   * @readonly
	   */
	  get spoiler() {
	    return basename(this.url ?? this.name).startsWith('SPOILER_');
	  }

	  toJSON() {
	    return flatten(this);
	  }
	}

	Attachment_1 = Attachment;
	return Attachment_1;
}

var BaseChannel = {};

var dist$2;
var hasRequiredDist$2;

function requireDist$2 () {
	if (hasRequiredDist$2) return dist$2;
	hasRequiredDist$2 = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

	// src/index.ts
	var src_exports = {};
	__export(src_exports, {
	  Faces: () => Faces,
	  GuildNavigationMentions: () => GuildNavigationMentions,
	  HeadingLevel: () => HeadingLevel,
	  TimestampStyles: () => TimestampStyles,
	  applicationDirectory: () => applicationDirectory,
	  blockQuote: () => blockQuote,
	  bold: () => bold,
	  channelLink: () => channelLink,
	  channelMention: () => channelMention,
	  chatInputApplicationCommandMention: () => chatInputApplicationCommandMention,
	  codeBlock: () => codeBlock,
	  escapeBold: () => escapeBold,
	  escapeBulletedList: () => escapeBulletedList,
	  escapeCodeBlock: () => escapeCodeBlock,
	  escapeEscape: () => escapeEscape,
	  escapeHeading: () => escapeHeading,
	  escapeInlineCode: () => escapeInlineCode,
	  escapeItalic: () => escapeItalic,
	  escapeMarkdown: () => escapeMarkdown,
	  escapeMaskedLink: () => escapeMaskedLink,
	  escapeNumberedList: () => escapeNumberedList,
	  escapeSpoiler: () => escapeSpoiler,
	  escapeStrikethrough: () => escapeStrikethrough,
	  escapeUnderline: () => escapeUnderline,
	  formatEmoji: () => formatEmoji,
	  heading: () => heading,
	  hideLinkEmbed: () => hideLinkEmbed,
	  hyperlink: () => hyperlink,
	  inlineCode: () => inlineCode,
	  italic: () => italic,
	  messageLink: () => messageLink,
	  orderedList: () => orderedList,
	  quote: () => quote,
	  roleMention: () => roleMention,
	  spoiler: () => spoiler,
	  strikethrough: () => strikethrough,
	  subtext: () => subtext,
	  time: () => time,
	  underline: () => underline,
	  underscore: () => underscore,
	  unorderedList: () => unorderedList,
	  userMention: () => userMention,
	  version: () => version
	});
	dist$2 = __toCommonJS(src_exports);

	// src/escapers.ts
	function escapeMarkdown(text, options = {}) {
	  const {
	    codeBlock: codeBlock2 = true,
	    inlineCode: inlineCode2 = true,
	    bold: bold2 = true,
	    italic: italic2 = true,
	    underline: underline2 = true,
	    strikethrough: strikethrough2 = true,
	    spoiler: spoiler2 = true,
	    codeBlockContent = true,
	    inlineCodeContent = true,
	    escape = true,
	    heading: heading2 = false,
	    bulletedList = false,
	    numberedList = false,
	    maskedLink = false
	  } = options;
	  if (!codeBlockContent) {
	    return text.split("```").map((subString, index, array) => {
	      if (index % 2 && index !== array.length - 1) return subString;
	      return escapeMarkdown(subString, {
	        inlineCode: inlineCode2,
	        bold: bold2,
	        italic: italic2,
	        underline: underline2,
	        strikethrough: strikethrough2,
	        spoiler: spoiler2,
	        inlineCodeContent,
	        escape,
	        heading: heading2,
	        bulletedList,
	        numberedList,
	        maskedLink
	      });
	    }).join(codeBlock2 ? "\\`\\`\\`" : "```");
	  }
	  if (!inlineCodeContent) {
	    return text.split(/(?<=^|[^`])`(?=[^`]|$)/g).map((subString, index, array) => {
	      if (index % 2 && index !== array.length - 1) return subString;
	      return escapeMarkdown(subString, {
	        codeBlock: codeBlock2,
	        bold: bold2,
	        italic: italic2,
	        underline: underline2,
	        strikethrough: strikethrough2,
	        spoiler: spoiler2,
	        escape,
	        heading: heading2,
	        bulletedList,
	        numberedList,
	        maskedLink
	      });
	    }).join(inlineCode2 ? "\\`" : "`");
	  }
	  let res = text;
	  if (escape) res = escapeEscape(res);
	  if (inlineCode2) res = escapeInlineCode(res);
	  if (codeBlock2) res = escapeCodeBlock(res);
	  if (italic2) res = escapeItalic(res);
	  if (bold2) res = escapeBold(res);
	  if (underline2) res = escapeUnderline(res);
	  if (strikethrough2) res = escapeStrikethrough(res);
	  if (spoiler2) res = escapeSpoiler(res);
	  if (heading2) res = escapeHeading(res);
	  if (bulletedList) res = escapeBulletedList(res);
	  if (numberedList) res = escapeNumberedList(res);
	  if (maskedLink) res = escapeMaskedLink(res);
	  return res;
	}
	__name(escapeMarkdown, "escapeMarkdown");
	function escapeCodeBlock(text) {
	  return text.replaceAll("```", "\\`\\`\\`");
	}
	__name(escapeCodeBlock, "escapeCodeBlock");
	function escapeInlineCode(text) {
	  return text.replaceAll(/(?<=^|[^`])``?(?=[^`]|$)/g, (match) => match.length === 2 ? "\\`\\`" : "\\`");
	}
	__name(escapeInlineCode, "escapeInlineCode");
	function escapeItalic(text) {
	  let idx = 0;
	  const newText = text.replaceAll(/(?<=^|[^*])\*([^*]|\*\*|$)/g, (_, match) => {
	    if (match === "**") return ++idx % 2 ? `\\*${match}` : `${match}\\*`;
	    return `\\*${match}`;
	  });
	  idx = 0;
	  return newText.replaceAll(/(?<=^|[^_])(?<!<a?:.+|https?:\/\/\S+)_(?!:\d+>)([^_]|__|$)/g, (_, match) => {
	    if (match === "__") return ++idx % 2 ? `\\_${match}` : `${match}\\_`;
	    return `\\_${match}`;
	  });
	}
	__name(escapeItalic, "escapeItalic");
	function escapeBold(text) {
	  let idx = 0;
	  return text.replaceAll(/\*\*(\*)?/g, (_, match) => {
	    if (match) return ++idx % 2 ? `${match}\\*\\*` : `\\*\\*${match}`;
	    return "\\*\\*";
	  });
	}
	__name(escapeBold, "escapeBold");
	function escapeUnderline(text) {
	  let idx = 0;
	  return text.replaceAll(/(?<!<a?:.+|https?:\/\/\S+)__(_)?(?!:\d+>)/g, (_, match) => {
	    if (match) return ++idx % 2 ? `${match}\\_\\_` : `\\_\\_${match}`;
	    return "\\_\\_";
	  });
	}
	__name(escapeUnderline, "escapeUnderline");
	function escapeStrikethrough(text) {
	  return text.replaceAll("~~", "\\~\\~");
	}
	__name(escapeStrikethrough, "escapeStrikethrough");
	function escapeSpoiler(text) {
	  return text.replaceAll("||", "\\|\\|");
	}
	__name(escapeSpoiler, "escapeSpoiler");
	function escapeEscape(text) {
	  return text.replaceAll("\\", "\\\\");
	}
	__name(escapeEscape, "escapeEscape");
	function escapeHeading(text) {
	  return text.replaceAll(/^( {0,2})([*-] )?( *)(#{1,3} )/gm, "$1$2$3\\$4");
	}
	__name(escapeHeading, "escapeHeading");
	function escapeBulletedList(text) {
	  return text.replaceAll(/^( *)([*-])( +)/gm, "$1\\$2$3");
	}
	__name(escapeBulletedList, "escapeBulletedList");
	function escapeNumberedList(text) {
	  return text.replaceAll(/^( *\d+)\./gm, "$1\\.");
	}
	__name(escapeNumberedList, "escapeNumberedList");
	function escapeMaskedLink(text) {
	  return text.replaceAll(/\[.+]\(.+\)/gm, "\\$&");
	}
	__name(escapeMaskedLink, "escapeMaskedLink");

	// src/formatters.ts
	function codeBlock(language, content) {
	  return content === void 0 ? `\`\`\`
${language}
\`\`\`` : `\`\`\`${language}
${content}
\`\`\``;
	}
	__name(codeBlock, "codeBlock");
	function inlineCode(content) {
	  return `\`${content}\``;
	}
	__name(inlineCode, "inlineCode");
	function italic(content) {
	  return `_${content}_`;
	}
	__name(italic, "italic");
	function bold(content) {
	  return `**${content}**`;
	}
	__name(bold, "bold");
	function underscore(content) {
	  return underline(content);
	}
	__name(underscore, "underscore");
	function underline(content) {
	  return `__${content}__`;
	}
	__name(underline, "underline");
	function strikethrough(content) {
	  return `~~${content}~~`;
	}
	__name(strikethrough, "strikethrough");
	function quote(content) {
	  return `> ${content}`;
	}
	__name(quote, "quote");
	function blockQuote(content) {
	  return `>>> ${content}`;
	}
	__name(blockQuote, "blockQuote");
	function hideLinkEmbed(url) {
	  return `<${url}>`;
	}
	__name(hideLinkEmbed, "hideLinkEmbed");
	function hyperlink(content, url, title) {
	  return title ? `[${content}](${url} "${title}")` : `[${content}](${url})`;
	}
	__name(hyperlink, "hyperlink");
	function spoiler(content) {
	  return `||${content}||`;
	}
	__name(spoiler, "spoiler");
	function userMention(userId) {
	  return `<@${userId}>`;
	}
	__name(userMention, "userMention");
	function channelMention(channelId) {
	  return `<#${channelId}>`;
	}
	__name(channelMention, "channelMention");
	function roleMention(roleId) {
	  return `<@&${roleId}>`;
	}
	__name(roleMention, "roleMention");
	function chatInputApplicationCommandMention(commandName, subcommandGroupName, subcommandName, commandId) {
	  if (commandId !== void 0) {
	    return `</${commandName} ${subcommandGroupName} ${subcommandName}:${commandId}>`;
	  }
	  if (subcommandName !== void 0) {
	    return `</${commandName} ${subcommandGroupName}:${subcommandName}>`;
	  }
	  return `</${commandName}:${subcommandGroupName}>`;
	}
	__name(chatInputApplicationCommandMention, "chatInputApplicationCommandMention");
	function formatEmoji(emojiIdOrOptions, animated) {
	  const options = typeof emojiIdOrOptions === "string" ? {
	    id: emojiIdOrOptions,
	    animated: animated ?? false
	  } : emojiIdOrOptions;
	  const { id, animated: isAnimated, name: emojiName } = options;
	  return `<${isAnimated ? "a" : ""}:${emojiName ?? "_"}:${id}>`;
	}
	__name(formatEmoji, "formatEmoji");
	function channelLink(channelId, guildId) {
	  return `https://discord.com/channels/${guildId ?? "@me"}/${channelId}`;
	}
	__name(channelLink, "channelLink");
	function messageLink(channelId, messageId, guildId) {
	  return `${guildId === void 0 ? channelLink(channelId) : channelLink(channelId, guildId)}/${messageId}`;
	}
	__name(messageLink, "messageLink");
	var HeadingLevel = /* @__PURE__ */ ((HeadingLevel2) => {
	  HeadingLevel2[HeadingLevel2["One"] = 1] = "One";
	  HeadingLevel2[HeadingLevel2["Two"] = 2] = "Two";
	  HeadingLevel2[HeadingLevel2["Three"] = 3] = "Three";
	  return HeadingLevel2;
	})(HeadingLevel || {});
	function heading(content, level) {
	  switch (level) {
	    case 3 /* Three */:
	      return `### ${content}`;
	    case 2 /* Two */:
	      return `## ${content}`;
	    default:
	      return `# ${content}`;
	  }
	}
	__name(heading, "heading");
	function listCallback(element, startNumber, depth = 0) {
	  if (Array.isArray(element)) {
	    return element.map((element2) => listCallback(element2, startNumber, depth + 1)).join("\n");
	  }
	  return `${"  ".repeat(depth - 1)}${startNumber ? `${startNumber}.` : "-"} ${element}`;
	}
	__name(listCallback, "listCallback");
	function orderedList(list, startNumber = 1) {
	  return listCallback(list, Math.max(startNumber, 1));
	}
	__name(orderedList, "orderedList");
	function unorderedList(list) {
	  return listCallback(list);
	}
	__name(unorderedList, "unorderedList");
	function subtext(content) {
	  return `-# ${content}`;
	}
	__name(subtext, "subtext");
	function time(timeOrSeconds, style) {
	  if (typeof timeOrSeconds !== "number") {
	    timeOrSeconds = Math.floor((timeOrSeconds?.getTime() ?? Date.now()) / 1e3);
	  }
	  return typeof style === "string" ? `<t:${timeOrSeconds}:${style}>` : `<t:${timeOrSeconds}>`;
	}
	__name(time, "time");
	function applicationDirectory(applicationId, skuId) {
	  const url = `https://discord.com/application-directory/${applicationId}/store`;
	  return skuId ? `${url}/${skuId}` : url;
	}
	__name(applicationDirectory, "applicationDirectory");
	var TimestampStyles = {
	  /**
	   * Short time format, consisting of hours and minutes.
	   *
	   * @example `16:20`
	   */
	  ShortTime: "t",
	  /**
	   * Long time format, consisting of hours, minutes, and seconds.
	   *
	   * @example `16:20:30`
	   */
	  LongTime: "T",
	  /**
	   * Short date format, consisting of day, month, and year.
	   *
	   * @example `20/04/2021`
	   */
	  ShortDate: "d",
	  /**
	   * Long date format, consisting of day, month, and year.
	   *
	   * @example `20 April 2021`
	   */
	  LongDate: "D",
	  /**
	   * Short date-time format, consisting of short date and short time formats.
	   *
	   * @example `20 April 2021 16:20`
	   */
	  ShortDateTime: "f",
	  /**
	   * Long date-time format, consisting of long date and short time formats.
	   *
	   * @example `Tuesday, 20 April 2021 16:20`
	   */
	  LongDateTime: "F",
	  /**
	   * Relative time format, consisting of a relative duration format.
	   *
	   * @example `2 months ago`
	   */
	  RelativeTime: "R"
	};
	var Faces = /* @__PURE__ */ ((Faces2) => {
	  Faces2["Shrug"] = "\xAF\\_(\u30C4)_/\xAF";
	  Faces2["Tableflip"] = "(\u256F\xB0\u25A1\xB0)\u256F\uFE35 \u253B\u2501\u253B";
	  Faces2["Unflip"] = "\u252C\u2500\u252C\u30CE( \xBA _ \xBA\u30CE)";
	  return Faces2;
	})(Faces || {});
	var GuildNavigationMentions = /* @__PURE__ */ ((GuildNavigationMentions2) => {
	  GuildNavigationMentions2["Browse"] = "<id:browse>";
	  GuildNavigationMentions2["Customize"] = "<id:customize>";
	  GuildNavigationMentions2["Guide"] = "<id:guide>";
	  return GuildNavigationMentions2;
	})(GuildNavigationMentions || {});

	// src/index.ts
	var version = "0.5.0";
	
	return dist$2;
}

var Base_1;
var hasRequiredBase$2;

function requireBase$2 () {
	if (hasRequiredBase$2) return Base_1;
	hasRequiredBase$2 = 1;

	const { flatten } = requireUtil();

	/**
	 * Represents a data model that is identifiable by a Snowflake (i.e. Discord API data models).
	 * @abstract
	 */
	class Base {
	  constructor(client) {
	    /**
	     * The client that instantiated this
	     * @name Base#client
	     * @type {Client}
	     * @readonly
	     */
	    Object.defineProperty(this, 'client', { value: client });
	  }

	  _clone() {
	    return Object.assign(Object.create(this), this);
	  }

	  _patch(data) {
	    return data;
	  }

	  _update(data) {
	    const clone = this._clone();
	    this._patch(data);
	    return clone;
	  }

	  toJSON(...props) {
	    return flatten(this, ...props);
	  }

	  valueOf() {
	    return this.id;
	  }
	}

	Base_1 = Base;
	return Base_1;
}

var ChannelFlagsBitField_1;
var hasRequiredChannelFlagsBitField;

function requireChannelFlagsBitField () {
	if (hasRequiredChannelFlagsBitField) return ChannelFlagsBitField_1;
	hasRequiredChannelFlagsBitField = 1;

	const { ChannelFlags } = requireV10$6();
	const BitField = requireBitField();

	/**
	 * Data structure that makes it easy to interact with a {@link BaseChannel#flags} bitfield.
	 * @extends {BitField}
	 */
	class ChannelFlagsBitField extends BitField {
	  /**
	   * Numeric guild channel flags.
	   * @type {ChannelFlags}
	   * @memberof ChannelFlagsBitField
	   */
	  static Flags = ChannelFlags;
	}

	/**
	 * @name ChannelFlagsBitField
	 * @kind constructor
	 * @memberof ChannelFlagsBitField
	 * @param {BitFieldResolvable} [bits=0] Bit(s) to read from
	 */

	/**
	 * Bitfield of the packed bits
	 * @type {number}
	 * @name ChannelFlagsBitField#bitfield
	 */

	/**
	 * Data that can be resolved to give a channel flag bitfield. This can be:
	 * * A string (see {@link ChannelFlagsBitField.Flags})
	 * * A channel flag
	 * * An instance of ChannelFlagsBitField
	 * * An Array of ChannelFlagsResolvable
	 * @typedef {string|number|ChannelFlagsBitField|ChannelFlagsResolvable[]} ChannelFlagsResolvable
	 */

	ChannelFlagsBitField_1 = ChannelFlagsBitField;
	return ChannelFlagsBitField_1;
}

var Constants = {};

var hasRequiredConstants$1;

function requireConstants$1 () {
	if (hasRequiredConstants$1) return Constants;
	hasRequiredConstants$1 = 1;
	(function (exports) {

		const { ChannelType, MessageType, ComponentType, ImageFormat, StickerFormatType } = requireV10$6();

		/**
		 * Max bulk deletable message age
		 * @typedef {number} MaxBulkDeletableMessageAge
		 */
		exports.MaxBulkDeletableMessageAge = 1_209_600_000;

		/**
		 * The name of an item to be swept in Sweepers
		 * * `autoModerationRules`
		 * * `applicationCommands` - both global and guild commands
		 * * `bans`
		 * * `emojis`
		 * * `entitlements`
		 * * `invites` - accepts the `lifetime` property, using it will sweep based on expires timestamp
		 * * `guildMembers`
		 * * `messages` - accepts the `lifetime` property, using it will sweep based on edited or created timestamp
		 * * `presences`
		 * * `reactions`
		 * * `stageInstances`
		 * * `stickers`
		 * * `threadMembers`
		 * * `threads` - accepts the `lifetime` property, using it will sweep archived threads based on archived timestamp
		 * * `users`
		 * * `voiceStates`
		 * @typedef {string} SweeperKey
		 */
		exports.SweeperKeys = [
		  'autoModerationRules',
		  'applicationCommands',
		  'bans',
		  'emojis',
		  'entitlements',
		  'invites',
		  'guildMembers',
		  'messages',
		  'presences',
		  'reactions',
		  'stageInstances',
		  'stickers',
		  'threadMembers',
		  'threads',
		  'users',
		  'voiceStates',
		];

		/**
		 * The types of messages that are not `System`. The available types are:
		 * * {@link MessageType.Default}
		 * * {@link MessageType.Reply}
		 * * {@link MessageType.ChatInputCommand}
		 * * {@link MessageType.ContextMenuCommand}
		 * @typedef {MessageType[]} NonSystemMessageTypes
		 */
		exports.NonSystemMessageTypes = [
		  MessageType.Default,
		  MessageType.Reply,
		  MessageType.ChatInputCommand,
		  MessageType.ContextMenuCommand,
		];

		/**
		 * The guild channels that are text-based.
		 * * TextChannel
		 * * NewsChannel
		 * * ThreadChannel
		 * * VoiceChannel
		 * * StageChannel
		 * @typedef {TextChannel|NewsChannel|ThreadChannel|VoiceChannel|StageChannel} GuildTextBasedChannel
		 */

		/**
		 * The types of guild channels that are text-based. The available types are:
		 * * {@link ChannelType.GuildText}
		 * * {@link ChannelType.GuildAnnouncement}
		 * * {@link ChannelType.AnnouncementThread}
		 * * {@link ChannelType.PublicThread}
		 * * {@link ChannelType.PrivateThread}
		 * * {@link ChannelType.GuildVoice}
		 * * {@link ChannelType.GuildStageVoice}
		 * @typedef {ChannelType[]} GuildTextBasedChannelTypes
		 */
		exports.GuildTextBasedChannelTypes = [
		  ChannelType.GuildText,
		  ChannelType.GuildAnnouncement,
		  ChannelType.AnnouncementThread,
		  ChannelType.PublicThread,
		  ChannelType.PrivateThread,
		  ChannelType.GuildVoice,
		  ChannelType.GuildStageVoice,
		];

		/**
		 * The channels that are text-based.
		 * * {@link DMChannel}
		 * * {@link GuildTextBasedChannel}
		 * @typedef {DMChannel|GuildTextBasedChannel} TextBasedChannels
		 */

		/**
		 * Data that resolves to give a text-based channel. This can be:
		 * * A {@link TextBasedChannel}
		 * * A {@link Snowflake}
		 * @typedef {TextBasedChannels|Snowflake} TextBasedChannelsResolvable
		 */

		/**
		 * The types of channels that are text-based. The available types are:
		 * * {@link ChannelType.DM}
		 * * {@link ChannelType.GuildText}
		 * * {@link ChannelType.GuildAnnouncement}
		 * * {@link ChannelType.AnnouncementThread}
		 * * {@link ChannelType.PublicThread}
		 * * {@link ChannelType.PrivateThread}
		 * * {@link ChannelType.GuildVoice}
		 * * {@link ChannelType.GuildStageVoice}
		 * * {@link ChannelType.GroupDM}
		 * @typedef {ChannelType[]} TextBasedChannelTypes
		 */
		exports.TextBasedChannelTypes = [...exports.GuildTextBasedChannelTypes, ChannelType.DM, ChannelType.GroupDM];

		/**
		 * The types of channels that are text-based and can have messages sent into. The available types are:
		 * * {@link ChannelType.DM}
		 * * {@link ChannelType.GuildText}
		 * * {@link ChannelType.GuildAnnouncement}
		 * * {@link ChannelType.AnnouncementThread}
		 * * {@link ChannelType.PublicThread}
		 * * {@link ChannelType.PrivateThread}
		 * * {@link ChannelType.GuildVoice}
		 * * {@link ChannelType.GuildStageVoice}
		 * @typedef {ChannelType[]} SendableChannels
		 */
		exports.SendableChannels = [...exports.GuildTextBasedChannelTypes, ChannelType.DM];

		/**
		 * The types of channels that are threads. The available types are:
		 * * {@link ChannelType.AnnouncementThread}
		 * * {@link ChannelType.PublicThread}
		 * * {@link ChannelType.PrivateThread}
		 * @typedef {ChannelType[]} ThreadChannelTypes
		 */
		exports.ThreadChannelTypes = [ChannelType.AnnouncementThread, ChannelType.PublicThread, ChannelType.PrivateThread];

		/**
		 * The types of channels that are voice-based. The available types are:
		 * * {@link ChannelType.GuildVoice}
		 * * {@link ChannelType.GuildStageVoice}
		 * @typedef {ChannelType[]} VoiceBasedChannelTypes
		 */
		exports.VoiceBasedChannelTypes = [ChannelType.GuildVoice, ChannelType.GuildStageVoice];

		/**
		 * The types of select menus. The available types are:
		 * * {@link ComponentType.StringSelect}
		 * * {@link ComponentType.UserSelect}
		 * * {@link ComponentType.RoleSelect}
		 * * {@link ComponentType.MentionableSelect}
		 * * {@link ComponentType.ChannelSelect}
		 * @typedef {ComponentType[]} SelectMenuTypes
		 */
		exports.SelectMenuTypes = [
		  ComponentType.StringSelect,
		  ComponentType.UserSelect,
		  ComponentType.RoleSelect,
		  ComponentType.MentionableSelect,
		  ComponentType.ChannelSelect,
		];

		/**
		 * The types of messages that cannot be deleted. The available types are:
		 * * {@link MessageType.RecipientAdd}
		 * * {@link MessageType.RecipientRemove}
		 * * {@link MessageType.Call}
		 * * {@link MessageType.ChannelNameChange}
		 * * {@link MessageType.ChannelIconChange}
		 * * {@link MessageType.ThreadStarterMessage}
		 * @typedef {MessageType[]} UndeletableMessageTypes
		 */
		exports.UndeletableMessageTypes = [
		  MessageType.RecipientAdd,
		  MessageType.RecipientRemove,
		  MessageType.Call,
		  MessageType.ChannelNameChange,
		  MessageType.ChannelIconChange,
		  MessageType.ThreadStarterMessage,
		];

		/**
		 * The types of messages that can be deleted. The available types are:
		 * * {@link MessageType.AutoModerationAction}
		 * * {@link MessageType.ChannelFollowAdd}
		 * * {@link MessageType.ChannelPinnedMessage}
		 * * {@link MessageType.ChatInputCommand}
		 * * {@link MessageType.ContextMenuCommand}
		 * * {@link MessageType.Default}
		 * * {@link MessageType.GuildBoost}
		 * * {@link MessageType.GuildBoostTier1}
		 * * {@link MessageType.GuildBoostTier2}
		 * * {@link MessageType.GuildBoostTier3}
		 * * {@link MessageType.GuildInviteReminder}
		 * * {@link MessageType.InteractionPremiumUpsell}
		 * * {@link MessageType.Reply}
		 * * {@link MessageType.RoleSubscriptionPurchase}
		 * * {@link MessageType.StageEnd}
		 * * {@link MessageType.StageRaiseHand}
		 * * {@link MessageType.StageSpeaker}
		 * * {@link MessageType.StageStart}
		 * * {@link MessageType.StageTopic}
		 * * {@link MessageType.ThreadCreated}
		 * * {@link MessageType.UserJoin}
		 * @typedef {MessageType[]} DeletableMessageTypes
		 * @deprecated This list will no longer be updated. Use {@link UndeletableMessageTypes} instead.
		 */
		exports.DeletableMessageTypes = [
		  MessageType.AutoModerationAction,
		  MessageType.ChannelFollowAdd,
		  MessageType.ChannelPinnedMessage,
		  MessageType.ChatInputCommand,
		  MessageType.ContextMenuCommand,
		  MessageType.Default,
		  MessageType.GuildBoost,
		  MessageType.GuildBoostTier1,
		  MessageType.GuildBoostTier2,
		  MessageType.GuildBoostTier3,
		  MessageType.GuildInviteReminder,
		  MessageType.InteractionPremiumUpsell,
		  MessageType.Reply,
		  MessageType.RoleSubscriptionPurchase,
		  MessageType.StageEnd,
		  MessageType.StageRaiseHand,
		  MessageType.StageSpeaker,
		  MessageType.StageStart,
		  MessageType.StageTopic,
		  MessageType.ThreadCreated,
		  MessageType.UserJoin,
		];

		/**
		 * A mapping between sticker formats and their respective image formats.
		 * * {@link StickerFormatType.PNG} -> {@link ImageFormat.PNG}
		 * * {@link StickerFormatType.APNG} -> {@link ImageFormat.PNG}
		 * * {@link StickerFormatType.Lottie} -> {@link ImageFormat.Lottie}
		 * * {@link StickerFormatType.GIF} -> {@link ImageFormat.GIF}
		 * @typedef {Object} StickerFormatExtensionMap
		 */
		exports.StickerFormatExtensionMap = {
		  [StickerFormatType.PNG]: ImageFormat.PNG,
		  [StickerFormatType.APNG]: ImageFormat.PNG,
		  [StickerFormatType.Lottie]: ImageFormat.Lottie,
		  [StickerFormatType.GIF]: ImageFormat.GIF,
		};

		/**
		 * @typedef {Object} Constants Constants that can be used in an enum or object-like way.
		 * @property {number} MaxBulkDeletableMessageAge Max bulk deletable message age
		 * @property {SweeperKey[]} SweeperKeys The possible names of items that can be swept in sweepers
		 * @property {NonSystemMessageTypes} NonSystemMessageTypes The types of messages that are not deemed a system type
		 * @property {TextBasedChannelTypes} TextBasedChannelTypes The types of channels that are text-based
		 * @property {ThreadChannelTypes} ThreadChannelTypes The types of channels that are threads
		 * @property {VoiceBasedChannelTypes} VoiceBasedChannelTypes The types of channels that are voice-based
		 * @property {SelectMenuTypes} SelectMenuTypes The types of components that are select menus.
		 * @property {Object} StickerFormatExtensionMap A mapping between sticker formats and their respective image formats.
		 */ 
	} (Constants));
	return Constants;
}

var hasRequiredBaseChannel;

function requireBaseChannel () {
	if (hasRequiredBaseChannel) return BaseChannel;
	hasRequiredBaseChannel = 1;

	const { channelLink, channelMention } = requireDist$2();
	const { DiscordSnowflake } = /*@__PURE__*/ requireCjs$2();
	const { ChannelType, Routes } = requireV10$6();
	const Base = requireBase$2();
	const ChannelFlagsBitField = requireChannelFlagsBitField();
	const { ThreadChannelTypes } = requireConstants$1();

	/**
	 * Represents any channel on Discord.
	 * @extends {Base}
	 * @abstract
	 */
	let BaseChannel$1 = class BaseChannel extends Base {
	  constructor(client, data, immediatePatch = true) {
	    super(client);

	    /**
	     * The type of the channel
	     * @type {ChannelType}
	     */
	    this.type = data.type;

	    if (data && immediatePatch) this._patch(data);
	  }

	  _patch(data) {
	    if ('flags' in data) {
	      /**
	       * The flags that are applied to the channel.
	       * <info>This is only `null` in a {@link PartialGroupDMChannel}. In all other cases, it is not `null`.</info>
	       * @type {?Readonly<ChannelFlagsBitField>}
	       */
	      this.flags = new ChannelFlagsBitField(data.flags).freeze();
	    } else {
	      this.flags ??= new ChannelFlagsBitField().freeze();
	    }

	    /**
	     * The channel's id
	     * @type {Snowflake}
	     */
	    this.id = data.id;
	  }

	  /**
	   * The timestamp the channel was created at
	   * @type {number}
	   * @readonly
	   */
	  get createdTimestamp() {
	    return DiscordSnowflake.timestampFrom(this.id);
	  }

	  /**
	   * The time the channel was created at
	   * @type {Date}
	   * @readonly
	   */
	  get createdAt() {
	    return new Date(this.createdTimestamp);
	  }

	  /**
	   * The URL to the channel
	   * @type {string}
	   * @readonly
	   */
	  get url() {
	    return this.isDMBased() ? channelLink(this.id) : channelLink(this.id, this.guildId);
	  }

	  /**
	   * Whether this Channel is a partial
	   * <info>This is always false outside of DM channels.</info>
	   * @type {boolean}
	   * @readonly
	   */
	  get partial() {
	    return false;
	  }

	  /**
	   * When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.
	   * @returns {string}
	   * @example
	   * // Logs: Hello from <#123456789012345678>!
	   * console.log(`Hello from ${channel}!`);
	   */
	  toString() {
	    return channelMention(this.id);
	  }

	  /**
	   * Deletes this channel.
	   * @returns {Promise<BaseChannel>}
	   * @example
	   * // Delete the channel
	   * channel.delete()
	   *   .then(console.log)
	   *   .catch(console.error);
	   */
	  async delete() {
	    await this.client.rest.delete(Routes.channel(this.id));
	    return this;
	  }

	  /**
	   * Fetches this channel.
	   * @param {boolean} [force=true] Whether to skip the cache check and request the API
	   * @returns {Promise<BaseChannel>}
	   */
	  fetch(force = true) {
	    return this.client.channels.fetch(this.id, { force });
	  }

	  /**
	   * Indicates whether this channel is a {@link ThreadChannel}.
	   * @returns {boolean}
	   */
	  isThread() {
	    return ThreadChannelTypes.includes(this.type);
	  }

	  /**
	   * Indicates whether this channel is {@link TextBasedChannels text-based}.
	   * @returns {boolean}
	   */
	  isTextBased() {
	    return 'messages' in this;
	  }

	  /**
	   * Indicates whether this channel is DM-based (either a {@link DMChannel} or a {@link PartialGroupDMChannel}).
	   * @returns {boolean}
	   */
	  isDMBased() {
	    return [ChannelType.DM, ChannelType.GroupDM].includes(this.type);
	  }

	  /**
	   * Indicates whether this channel is {@link BaseGuildVoiceChannel voice-based}.
	   * @returns {boolean}
	   */
	  isVoiceBased() {
	    return 'bitrate' in this;
	  }

	  /**
	   * Indicates whether this channel is {@link ThreadOnlyChannel thread-only}.
	   * @returns {boolean}
	   */
	  isThreadOnly() {
	    return 'availableTags' in this;
	  }

	  /**
	   * Indicates whether this channel is sendable.
	   * @returns {boolean}
	   */
	  isSendable() {
	    return 'send' in this;
	  }

	  toJSON(...props) {
	    return super.toJSON({ createdTimestamp: true }, ...props);
	  }
	};

	BaseChannel.BaseChannel = BaseChannel$1;
	return BaseChannel;
}

var BaseManager_1;
var hasRequiredBaseManager;

function requireBaseManager () {
	if (hasRequiredBaseManager) return BaseManager_1;
	hasRequiredBaseManager = 1;

	/**
	 * Manages the API methods of a data model.
	 * @abstract
	 */
	class BaseManager {
	  constructor(client) {
	    /**
	     * The client that instantiated this Manager
	     * @name BaseManager#client
	     * @type {Client}
	     * @readonly
	     */
	    Object.defineProperty(this, 'client', { value: client });
	  }
	}

	BaseManager_1 = BaseManager;
	return BaseManager_1;
}

var DataManager_1;
var hasRequiredDataManager;

function requireDataManager () {
	if (hasRequiredDataManager) return DataManager_1;
	hasRequiredDataManager = 1;

	const BaseManager = requireBaseManager();
	const { DiscordjsError, ErrorCodes } = requireErrors$1();

	/**
	 * Manages the API methods of a data model along with a collection of instances.
	 * @extends {BaseManager}
	 * @abstract
	 */
	class DataManager extends BaseManager {
	  constructor(client, holds) {
	    super(client);

	    /**
	     * The data structure belonging to this manager.
	     * @name DataManager#holds
	     * @type {Function}
	     * @private
	     * @readonly
	     */
	    Object.defineProperty(this, 'holds', { value: holds });
	  }

	  /**
	   * The cache of items for this manager.
	   * @type {Collection}
	   * @abstract
	   */
	  get cache() {
	    throw new DiscordjsError(ErrorCodes.NotImplemented, 'get cache', this.constructor.name);
	  }

	  /**
	   * Resolves a data entry to a data Object.
	   * @param {string|Object} idOrInstance The id or instance of something in this Manager
	   * @returns {?Object} An instance from this Manager
	   */
	  resolve(idOrInstance) {
	    if (idOrInstance instanceof this.holds) return idOrInstance;
	    if (typeof idOrInstance === 'string') return this.cache.get(idOrInstance) ?? null;
	    return null;
	  }

	  /**
	   * Resolves a data entry to an instance id.
	   * @param {string|Object} idOrInstance The id or instance of something in this Manager
	   * @returns {?Snowflake}
	   */
	  resolveId(idOrInstance) {
	    if (idOrInstance instanceof this.holds) return idOrInstance.id;
	    if (typeof idOrInstance === 'string') return idOrInstance;
	    return null;
	  }

	  valueOf() {
	    return this.cache;
	  }
	}

	DataManager_1 = DataManager;
	return DataManager_1;
}

var Symbols = {};

var hasRequiredSymbols;

function requireSymbols () {
	if (hasRequiredSymbols) return Symbols;
	hasRequiredSymbols = 1;

	Symbols.MakeCacheOverrideSymbol = Symbol('djs.managers.makeCacheOverride');
	return Symbols;
}

var CachedManager_1;
var hasRequiredCachedManager;

function requireCachedManager () {
	if (hasRequiredCachedManager) return CachedManager_1;
	hasRequiredCachedManager = 1;

	const DataManager = requireDataManager();
	const { MakeCacheOverrideSymbol } = requireSymbols();

	/**
	 * Manages the API methods of a data model with a mutable cache of instances.
	 * @extends {DataManager}
	 * @abstract
	 */
	class CachedManager extends DataManager {
	  constructor(client, holds, iterable) {
	    super(client, holds);

	    /**
	     * The private cache of items for this manager.
	     * @type {Collection}
	     * @private
	     * @readonly
	     * @name CachedManager#_cache
	     */
	    Object.defineProperty(this, '_cache', {
	      value: this.client.options.makeCache(
	        this.constructor[MakeCacheOverrideSymbol] ?? this.constructor,
	        this.holds,
	        this.constructor,
	      ),
	    });

	    if (iterable) {
	      for (const item of iterable) {
	        this._add(item);
	      }
	    }
	  }

	  /**
	   * The cache of items for this manager.
	   * @type {Collection}
	   * @abstract
	   */
	  get cache() {
	    return this._cache;
	  }

	  _add(data, cache = true, { id, extras = [] } = {}) {
	    const existing = this.cache.get(id ?? data.id);
	    if (existing) {
	      if (cache) {
	        existing._patch(data);
	        return existing;
	      }
	      const clone = existing._clone();
	      clone._patch(data);
	      return clone;
	    }

	    const entry = this.holds ? new this.holds(this.client, data, ...extras) : data;
	    if (cache) this.cache.set(id ?? entry.id, entry);
	    return entry;
	  }
	}

	CachedManager_1 = CachedManager;
	return CachedManager_1;
}

var Role = {};

var PermissionsBitField_1;
var hasRequiredPermissionsBitField;

function requirePermissionsBitField () {
	if (hasRequiredPermissionsBitField) return PermissionsBitField_1;
	hasRequiredPermissionsBitField = 1;

	const { PermissionFlagsBits } = requireV10$6();
	const BitField = requireBitField();

	/**
	 * Data structure that makes it easy to interact with a permission bitfield. All {@link GuildMember}s have a set of
	 * permissions in their guild, and each channel in the guild may also have {@link PermissionOverwrites} for the member
	 * that override their default permissions.
	 * @extends {BitField}
	 */
	class PermissionsBitField extends BitField {
	  /**
	   * Numeric permission flags.
	   * @type {PermissionFlagsBits}
	   * @memberof PermissionsBitField
	   * @see {@link https://discord.com/developers/docs/topics/permissions#permissions-bitwise-permission-flags}
	   */
	  static Flags = PermissionFlagsBits;

	  /**
	   * Bitfield representing every permission combined
	   * @type {bigint}
	   * @memberof PermissionsBitField
	   */
	  static All = Object.values(PermissionFlagsBits).reduce((all, p) => all | p, 0n);

	  /**
	   * Bitfield representing the default permissions for users
	   * @type {bigint}
	   * @memberof PermissionsBitField
	   */
	  static Default = BigInt(104324673);

	  /**
	   * Bitfield representing the permissions required for moderators of stage channels
	   * @type {bigint}
	   * @memberof PermissionsBitField
	   */
	  static StageModerator =
	    PermissionFlagsBits.ManageChannels | PermissionFlagsBits.MuteMembers | PermissionFlagsBits.MoveMembers;

	  /**
	   * @type {bigint}
	   * @memberof PermissionsBitField
	   * @private
	   */
	  static DefaultBit = BigInt(0);

	  /**
	   * Bitfield of the packed bits
	   * @type {bigint}
	   * @name PermissionsBitField#bitfield
	   */

	  /**
	   * Data that can be resolved to give a permission number. This can be:
	   * * A string (see {@link PermissionsBitField.Flags})
	   * * A permission number
	   * * An instance of {@link PermissionsBitField}
	   * * An Array of PermissionResolvable
	   * @typedef {string|bigint|PermissionsBitField|PermissionResolvable[]} PermissionResolvable
	   */

	  /**
	   * Gets all given bits that are missing from the bitfield.
	   * @param {BitFieldResolvable} bits Bit(s) to check for
	   * @param {boolean} [checkAdmin=true] Whether to allow the administrator permission to override
	   * @returns {string[]}
	   */
	  missing(bits, checkAdmin = true) {
	    return checkAdmin && this.has(PermissionFlagsBits.Administrator) ? [] : super.missing(bits);
	  }

	  /**
	   * Checks whether the bitfield has a permission, or any of multiple permissions.
	   * @param {PermissionResolvable} permission Permission(s) to check for
	   * @param {boolean} [checkAdmin=true] Whether to allow the administrator permission to override
	   * @returns {boolean}
	   */
	  any(permission, checkAdmin = true) {
	    return (checkAdmin && super.has(PermissionFlagsBits.Administrator)) || super.any(permission);
	  }

	  /**
	   * Checks whether the bitfield has a permission, or multiple permissions.
	   * @param {PermissionResolvable} permission Permission(s) to check for
	   * @param {boolean} [checkAdmin=true] Whether to allow the administrator permission to override
	   * @returns {boolean}
	   */
	  has(permission, checkAdmin = true) {
	    return (checkAdmin && super.has(PermissionFlagsBits.Administrator)) || super.has(permission);
	  }

	  /**
	   * Gets an {@link Array} of bitfield names based on the permissions available.
	   * @returns {string[]}
	   */
	  toArray() {
	    return super.toArray(false);
	  }
	}

	PermissionsBitField_1 = PermissionsBitField;
	return PermissionsBitField_1;
}

var RoleFlagsBitField_1;
var hasRequiredRoleFlagsBitField;

function requireRoleFlagsBitField () {
	if (hasRequiredRoleFlagsBitField) return RoleFlagsBitField_1;
	hasRequiredRoleFlagsBitField = 1;

	const { RoleFlags } = requireV10$6();
	const BitField = requireBitField();

	/**
	 * Data structure that makes it easy to interact with a {@link Role#flags} bitfield.
	 * @extends {BitField}
	 */
	class RoleFlagsBitField extends BitField {
	  /**
	   * Numeric role flags.
	   * @type {RoleFlags}
	   * @memberof RoleFlagsBitField
	   */
	  static Flags = RoleFlags;
	}

	/**
	 * @name RoleFlagsBitField
	 * @kind constructor
	 * @memberof RoleFlagsBitField
	 * @param {BitFieldResolvable} [bits=0] Bit(s) to read from
	 */

	RoleFlagsBitField_1 = RoleFlagsBitField;
	return RoleFlagsBitField_1;
}

var hasRequiredRole$1;

function requireRole$1 () {
	if (hasRequiredRole$1) return Role;
	hasRequiredRole$1 = 1;

	const { roleMention } = requireDist$2();
	const { DiscordSnowflake } = /*@__PURE__*/ requireCjs$2();
	const { PermissionFlagsBits } = requireV10$6();
	const Base = requireBase$2();
	const { DiscordjsError, ErrorCodes } = requireErrors$1();
	const PermissionsBitField = requirePermissionsBitField();
	const RoleFlagsBitField = requireRoleFlagsBitField();

	/**
	 * Represents a role on Discord.
	 * @extends {Base}
	 */
	let Role$1 = class Role extends Base {
	  constructor(client, data, guild) {
	    super(client);

	    /**
	     * The guild that the role belongs to
	     * @type {Guild}
	     */
	    this.guild = guild;

	    /**
	     * The icon hash of the role
	     * @type {?string}
	     */
	    this.icon = null;

	    /**
	     * The unicode emoji for the role
	     * @type {?string}
	     */
	    this.unicodeEmoji = null;

	    if (data) this._patch(data);
	  }

	  _patch(data) {
	    /**
	     * The role's id (unique to the guild it is part of)
	     * @type {Snowflake}
	     */
	    this.id = data.id;
	    if ('name' in data) {
	      /**
	       * The name of the role
	       * @type {string}
	       */
	      this.name = data.name;
	    }

	    if ('color' in data) {
	      /**
	       * The base 10 color of the role
	       * @type {number}
	       */
	      this.color = data.color;
	    }

	    if ('hoist' in data) {
	      /**
	       * If true, users that are part of this role will appear in a separate category in the users list
	       * @type {boolean}
	       */
	      this.hoist = data.hoist;
	    }

	    if ('position' in data) {
	      /**
	       * The raw position of the role from the API
	       * @type {number}
	       */
	      this.rawPosition = data.position;
	    }

	    if ('permissions' in data) {
	      /**
	       * The permissions of the role
	       * @type {Readonly<PermissionsBitField>}
	       */
	      this.permissions = new PermissionsBitField(BigInt(data.permissions)).freeze();
	    }

	    if ('managed' in data) {
	      /**
	       * Whether or not the role is managed by an external service
	       * @type {boolean}
	       */
	      this.managed = data.managed;
	    }

	    if ('mentionable' in data) {
	      /**
	       * Whether or not the role can be mentioned by anyone
	       * @type {boolean}
	       */
	      this.mentionable = data.mentionable;
	    }

	    if ('icon' in data) this.icon = data.icon;

	    if ('unicode_emoji' in data) this.unicodeEmoji = data.unicode_emoji;

	    if ('flags' in data) {
	      /**
	       * The flags of this role
	       * @type {Readonly<RoleFlagsBitField>}
	       */
	      this.flags = new RoleFlagsBitField(data.flags).freeze();
	    } else {
	      this.flags ??= new RoleFlagsBitField().freeze();
	    }

	    /**
	     * The tags this role has
	     * @type {?Object}
	     * @property {Snowflake} [botId] The id of the bot this role belongs to
	     * @property {Snowflake|string} [integrationId] The id of the integration this role belongs to
	     * @property {true} [premiumSubscriberRole] Whether this is the guild's premium subscription role
	     * @property {Snowflake} [subscriptionListingId] The id of this role's subscription SKU and listing
	     * @property {true} [availableForPurchase] Whether this role is available for purchase
	     * @property {true} [guildConnections] Whether this role is a guild's linked role
	     */
	    this.tags = data.tags ? {} : null;
	    if (data.tags) {
	      if ('bot_id' in data.tags) {
	        this.tags.botId = data.tags.bot_id;
	      }
	      if ('integration_id' in data.tags) {
	        this.tags.integrationId = data.tags.integration_id;
	      }
	      if ('premium_subscriber' in data.tags) {
	        this.tags.premiumSubscriberRole = true;
	      }
	      if ('subscription_listing_id' in data.tags) {
	        this.tags.subscriptionListingId = data.tags.subscription_listing_id;
	      }
	      if ('available_for_purchase' in data.tags) {
	        this.tags.availableForPurchase = true;
	      }
	      if ('guild_connections' in data.tags) {
	        this.tags.guildConnections = true;
	      }
	    }
	  }

	  /**
	   * The timestamp the role was created at
	   * @type {number}
	   * @readonly
	   */
	  get createdTimestamp() {
	    return DiscordSnowflake.timestampFrom(this.id);
	  }

	  /**
	   * The time the role was created at
	   * @type {Date}
	   * @readonly
	   */
	  get createdAt() {
	    return new Date(this.createdTimestamp);
	  }

	  /**
	   * The hexadecimal version of the role color, with a leading hashtag
	   * @type {string}
	   * @readonly
	   */
	  get hexColor() {
	    return `#${this.color.toString(16).padStart(6, '0')}`;
	  }

	  /**
	   * The cached guild members that have this role
	   * @type {Collection<Snowflake, GuildMember>}
	   * @readonly
	   */
	  get members() {
	    return this.id === this.guild.id
	      ? this.guild.members.cache.clone()
	      : this.guild.members.cache.filter(member => member._roles.includes(this.id));
	  }

	  /**
	   * Whether the role is editable by the client user
	   * @type {boolean}
	   * @readonly
	   */
	  get editable() {
	    if (this.managed) return false;
	    const clientMember = this.guild.members.resolve(this.client.user);
	    if (!clientMember.permissions.has(PermissionFlagsBits.ManageRoles)) return false;
	    return clientMember.roles.highest.comparePositionTo(this) > 0;
	  }

	  /**
	   * The position of the role in the role manager
	   * @type {number}
	   * @readonly
	   */
	  get position() {
	    return this.guild.roles.cache.reduce(
	      (acc, role) =>
	        acc +
	        (this.rawPosition === role.rawPosition
	          ? BigInt(this.id) < BigInt(role.id)
	          : this.rawPosition > role.rawPosition),
	      0,
	    );
	  }

	  /**
	   * Compares this role's position to another role's.
	   * @param {RoleResolvable} role Role to compare to this one
	   * @returns {number} Negative number if this role's position is lower (other role's is higher),
	   * positive number if this one is higher (other's is lower), 0 if equal
	   * @example
	   * // Compare the position of a role to another
	   * const roleCompare = role.comparePositionTo(otherRole);
	   * if (roleCompare >= 1) console.log(`${role.name} is higher than ${otherRole.name}`);
	   */
	  comparePositionTo(role) {
	    return this.guild.roles.comparePositions(this, role);
	  }

	  /**
	   * The data for a role.
	   * @typedef {Object} RoleData
	   * @property {string} [name] The name of the role
	   * @property {ColorResolvable} [color] The color of the role, either a hex string or a base 10 number
	   * @property {boolean} [hoist] Whether or not the role should be hoisted
	   * @property {number} [position] The position of the role
	   * @property {PermissionResolvable} [permissions] The permissions of the role
	   * @property {boolean} [mentionable] Whether or not the role should be mentionable
	   * @property {?(BufferResolvable|Base64Resolvable|EmojiResolvable)} [icon] The icon for the role
	   * <warn>The `EmojiResolvable` should belong to the same guild as the role.
	   * If not, pass the emoji's URL directly</warn>
	   * @property {?string} [unicodeEmoji] The unicode emoji for the role
	   */

	  /**
	   * Edits the role.
	   * @param {RoleEditOptions} options The options to provide
	   * @returns {Promise<Role>}
	   * @example
	   * // Edit a role
	   * role.edit({ name: 'new role' })
	   *   .then(updated => console.log(`Edited role name to ${updated.name}`))
	   *   .catch(console.error);
	   */
	  edit(options) {
	    return this.guild.roles.edit(this, options);
	  }

	  /**
	   * Returns `channel.permissionsFor(role)`. Returns permissions for a role in a guild channel,
	   * taking into account permission overwrites.
	   * @param {GuildChannel|Snowflake} channel The guild channel to use as context
	   * @param {boolean} [checkAdmin=true] Whether having the {@link PermissionFlagsBits.Administrator} permission
	   * will return all permissions
	   * @returns {Readonly<PermissionsBitField>}
	   */
	  permissionsIn(channel, checkAdmin = true) {
	    channel = this.guild.channels.resolve(channel);
	    if (!channel) throw new DiscordjsError(ErrorCodes.GuildChannelResolve);
	    return channel.rolePermissions(this, checkAdmin);
	  }

	  /**
	   * Sets a new name for the role.
	   * @param {string} name The new name of the role
	   * @param {string} [reason] Reason for changing the role's name
	   * @returns {Promise<Role>}
	   * @example
	   * // Set the name of the role
	   * role.setName('new role')
	   *   .then(updated => console.log(`Updated role name to ${updated.name}`))
	   *   .catch(console.error);
	   */
	  setName(name, reason) {
	    return this.edit({ name, reason });
	  }

	  /**
	   * Sets a new color for the role.
	   * @param {ColorResolvable} color The color of the role
	   * @param {string} [reason] Reason for changing the role's color
	   * @returns {Promise<Role>}
	   * @example
	   * // Set the color of a role
	   * role.setColor('#FF0000')
	   *   .then(updated => console.log(`Set color of role to ${updated.color}`))
	   *   .catch(console.error);
	   */
	  setColor(color, reason) {
	    return this.edit({ color, reason });
	  }

	  /**
	   * Sets whether or not the role should be hoisted.
	   * @param {boolean} [hoist=true] Whether or not to hoist the role
	   * @param {string} [reason] Reason for setting whether or not the role should be hoisted
	   * @returns {Promise<Role>}
	   * @example
	   * // Set the hoist of the role
	   * role.setHoist(true)
	   *   .then(updated => console.log(`Role hoisted: ${updated.hoist}`))
	   *   .catch(console.error);
	   */
	  setHoist(hoist = true, reason) {
	    return this.edit({ hoist, reason });
	  }

	  /**
	   * Sets the permissions of the role.
	   * @param {PermissionResolvable} permissions The permissions of the role
	   * @param {string} [reason] Reason for changing the role's permissions
	   * @returns {Promise<Role>}
	   * @example
	   * // Set the permissions of the role
	   * role.setPermissions([PermissionFlagsBits.KickMembers, PermissionFlagsBits.BanMembers])
	   *   .then(updated => console.log(`Updated permissions to ${updated.permissions.bitfield}`))
	   *   .catch(console.error);
	   * @example
	   * // Remove all permissions from a role
	   * role.setPermissions(0n)
	   *   .then(updated => console.log(`Updated permissions to ${updated.permissions.bitfield}`))
	   *   .catch(console.error);
	   */
	  setPermissions(permissions, reason) {
	    return this.edit({ permissions, reason });
	  }

	  /**
	   * Sets whether this role is mentionable.
	   * @param {boolean} [mentionable=true] Whether this role should be mentionable
	   * @param {string} [reason] Reason for setting whether or not this role should be mentionable
	   * @returns {Promise<Role>}
	   * @example
	   * // Make the role mentionable
	   * role.setMentionable(true)
	   *   .then(updated => console.log(`Role updated ${updated.name}`))
	   *   .catch(console.error);
	   */
	  setMentionable(mentionable = true, reason) {
	    return this.edit({ mentionable, reason });
	  }

	  /**
	   * Sets a new icon for the role.
	   * @param {?(BufferResolvable|Base64Resolvable|EmojiResolvable)} icon The icon for the role
	   * <warn>The `EmojiResolvable` should belong to the same guild as the role.
	   * If not, pass the emoji's URL directly</warn>
	   * @param {string} [reason] Reason for changing the role's icon
	   * @returns {Promise<Role>}
	   */
	  setIcon(icon, reason) {
	    return this.edit({ icon, reason });
	  }

	  /**
	   * Sets a new unicode emoji for the role.
	   * @param {?string} unicodeEmoji The new unicode emoji for the role
	   * @param {string} [reason] Reason for changing the role's unicode emoji
	   * @returns {Promise<Role>}
	   * @example
	   * // Set a new unicode emoji for the role
	   * role.setUnicodeEmoji('🤖')
	   *   .then(updated => console.log(`Set unicode emoji for the role to ${updated.unicodeEmoji}`))
	   *   .catch(console.error);
	   */
	  setUnicodeEmoji(unicodeEmoji, reason) {
	    return this.edit({ unicodeEmoji, reason });
	  }

	  /**
	   * Options used to set the position of a role.
	   * @typedef {Object} SetRolePositionOptions
	   * @property {boolean} [relative=false] Whether to change the position relative to its current value or not
	   * @property {string} [reason] The reason for changing the position
	   */

	  /**
	   * Sets the new position of the role.
	   * @param {number} position The new position for the role
	   * @param {SetRolePositionOptions} [options] Options for setting the position
	   * @returns {Promise<Role>}
	   * @example
	   * // Set the position of the role
	   * role.setPosition(1)
	   *   .then(updated => console.log(`Role position: ${updated.position}`))
	   *   .catch(console.error);
	   */
	  setPosition(position, options = {}) {
	    return this.guild.roles.setPosition(this, position, options);
	  }

	  /**
	   * Deletes the role.
	   * @param {string} [reason] Reason for deleting this role
	   * @returns {Promise<Role>}
	   * @example
	   * // Delete a role
	   * role.delete('The role needed to go')
	   *   .then(deleted => console.log(`Deleted role ${deleted.name}`))
	   *   .catch(console.error);
	   */
	  async delete(reason) {
	    await this.guild.roles.delete(this.id, reason);
	    return this;
	  }

	  /**
	   * A link to the role's icon
	   * @param {ImageURLOptions} [options={}] Options for the image URL
	   * @returns {?string}
	   */
	  iconURL(options = {}) {
	    return this.icon && this.client.rest.cdn.roleIcon(this.id, this.icon, options);
	  }

	  /**
	   * Whether this role equals another role. It compares all properties, so for most operations
	   * it is advisable to just compare `role.id === role2.id` as it is much faster and is often
	   * what most users need.
	   * @param {Role} role Role to compare with
	   * @returns {boolean}
	   */
	  equals(role) {
	    return (
	      role &&
	      this.id === role.id &&
	      this.name === role.name &&
	      this.color === role.color &&
	      this.hoist === role.hoist &&
	      this.position === role.position &&
	      this.permissions.bitfield === role.permissions.bitfield &&
	      this.managed === role.managed &&
	      this.icon === role.icon &&
	      this.unicodeEmoji === role.unicodeEmoji
	    );
	  }

	  /**
	   * When concatenated with a string, this automatically returns the role's mention instead of the Role object.
	   * @returns {string}
	   * @example
	   * // Logs: Role: <@&123456789012345678>
	   * console.log(`Role: ${role}`);
	   */
	  toString() {
	    if (this.id === this.guild.id) return '@everyone';
	    return roleMention(this.id);
	  }

	  toJSON() {
	    return {
	      ...super.toJSON({ createdTimestamp: true }),
	      permissions: this.permissions.toJSON(),
	    };
	  }
	};

	Role.Role = Role$1;
	return Role;
}

var PermissionOverwrites_1;
var hasRequiredPermissionOverwrites;

function requirePermissionOverwrites () {
	if (hasRequiredPermissionOverwrites) return PermissionOverwrites_1;
	hasRequiredPermissionOverwrites = 1;

	const { OverwriteType } = requireV10$6();
	const Base = requireBase$2();
	const { Role } = requireRole$1();
	const { DiscordjsTypeError, ErrorCodes } = requireErrors$1();
	const PermissionsBitField = requirePermissionsBitField();

	/**
	 * Represents a permission overwrite for a role or member in a guild channel.
	 * @extends {Base}
	 */
	class PermissionOverwrites extends Base {
	  constructor(client, data, channel) {
	    super(client);

	    /**
	     * The GuildChannel this overwrite is for
	     * @name PermissionOverwrites#channel
	     * @type {GuildChannel}
	     * @readonly
	     */
	    Object.defineProperty(this, 'channel', { value: channel });

	    if (data) this._patch(data);
	  }

	  _patch(data) {
	    /**
	     * The overwrite's id, either a {@link User} or a {@link Role} id
	     * @type {Snowflake}
	     */
	    this.id = data.id;

	    if ('type' in data) {
	      /**
	       * The type of this overwrite
	       * @type {OverwriteType}
	       */
	      this.type = data.type;
	    }

	    if ('deny' in data) {
	      /**
	       * The permissions that are denied for the user or role.
	       * @type {Readonly<PermissionsBitField>}
	       */
	      this.deny = new PermissionsBitField(BigInt(data.deny)).freeze();
	    }

	    if ('allow' in data) {
	      /**
	       * The permissions that are allowed for the user or role.
	       * @type {Readonly<PermissionsBitField>}
	       */
	      this.allow = new PermissionsBitField(BigInt(data.allow)).freeze();
	    }
	  }

	  /**
	   * Edits this Permission Overwrite.
	   * @param {PermissionOverwriteOptions} options The options for the update
	   * @param {string} [reason] Reason for creating/editing this overwrite
	   * @returns {Promise<PermissionOverwrites>}
	   * @example
	   * // Update permission overwrites
	   * permissionOverwrites.edit({
	   *   SendMessages: false
	   * })
	   *   .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))
	   *   .catch(console.error);
	   */
	  async edit(options, reason) {
	    await this.channel.permissionOverwrites.upsert(this.id, options, { type: this.type, reason }, this);
	    return this;
	  }

	  /**
	   * Deletes this Permission Overwrite.
	   * @param {string} [reason] Reason for deleting this overwrite
	   * @returns {Promise<PermissionOverwrites>}
	   */
	  async delete(reason) {
	    await this.channel.permissionOverwrites.delete(this.id, reason);
	    return this;
	  }

	  toJSON() {
	    return {
	      id: this.id,
	      type: this.type,
	      allow: this.allow,
	      deny: this.deny,
	    };
	  }

	  /**
	   * An object mapping permission flags to `true` (enabled), `null` (unset) or `false` (disabled).
	   * ```js
	   * {
	   *  'SendMessages': true,
	   *  'EmbedLinks': null,
	   *  'AttachFiles': false,
	   * }
	   * ```
	   * @typedef {Object} PermissionOverwriteOptions
	   */

	  /**
	   * @typedef {Object} ResolvedOverwriteOptions
	   * @property {PermissionsBitField} allow The allowed permissions
	   * @property {PermissionsBitField} deny The denied permissions
	   */

	  /**
	   * Resolves bitfield permissions overwrites from an object.
	   * @param {PermissionOverwriteOptions} options The options for the update
	   * @param {ResolvedOverwriteOptions} initialPermissions The initial permissions
	   * @returns {ResolvedOverwriteOptions}
	   */
	  static resolveOverwriteOptions(options, { allow, deny } = {}) {
	    allow = new PermissionsBitField(allow);
	    deny = new PermissionsBitField(deny);

	    for (const [perm, value] of Object.entries(options)) {
	      if (value === true) {
	        allow.add(perm);
	        deny.remove(perm);
	      } else if (value === false) {
	        allow.remove(perm);
	        deny.add(perm);
	      } else if (value === null) {
	        allow.remove(perm);
	        deny.remove(perm);
	      }
	    }

	    return { allow, deny };
	  }

	  /**
	   * The raw data for a permission overwrite
	   * @typedef {Object} RawOverwriteData
	   * @property {Snowflake} id The id of the {@link Role} or {@link User} this overwrite belongs to
	   * @property {string} allow The permissions to allow
	   * @property {string} deny The permissions to deny
	   * @property {number} type The type of this OverwriteData
	   */

	  /**
	   * Data that can be resolved into {@link APIOverwrite}. This can be:
	   * * PermissionOverwrites
	   * * OverwriteData
	   * @typedef {PermissionOverwrites|OverwriteData} OverwriteResolvable
	   */

	  /**
	   * Data that can be used for a permission overwrite
	   * @typedef {Object} OverwriteData
	   * @property {GuildMemberResolvable|RoleResolvable} id Member or role this overwrite is for
	   * @property {PermissionResolvable} [allow] The permissions to allow
	   * @property {PermissionResolvable} [deny] The permissions to deny
	   * @property {OverwriteType} [type] The type of this OverwriteData
	   */

	  /**
	   * Resolves an overwrite into {@link APIOverwrite}.
	   * @param {OverwriteResolvable} overwrite The overwrite-like data to resolve
	   * @param {Guild} [guild] The guild to resolve from
	   * @returns {RawOverwriteData}
	   */
	  static resolve(overwrite, guild) {
	    if (overwrite instanceof this) return overwrite.toJSON();
	    if (typeof overwrite.id === 'string' && overwrite.type in OverwriteType) {
	      return {
	        id: overwrite.id,
	        type: overwrite.type,
	        allow: PermissionsBitField.resolve(overwrite.allow ?? PermissionsBitField.DefaultBit).toString(),
	        deny: PermissionsBitField.resolve(overwrite.deny ?? PermissionsBitField.DefaultBit).toString(),
	      };
	    }

	    const userOrRole = guild.roles.resolve(overwrite.id) ?? guild.client.users.resolve(overwrite.id);
	    if (!userOrRole) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'parameter', 'User nor a Role');
	    const type = userOrRole instanceof Role ? OverwriteType.Role : OverwriteType.Member;

	    return {
	      id: userOrRole.id,
	      type,
	      allow: PermissionsBitField.resolve(overwrite.allow ?? PermissionsBitField.DefaultBit).toString(),
	      deny: PermissionsBitField.resolve(overwrite.deny ?? PermissionsBitField.DefaultBit).toString(),
	    };
	  }
	}

	PermissionOverwrites_1 = PermissionOverwrites;
	return PermissionOverwrites_1;
}

var PermissionOverwriteManager_1;
var hasRequiredPermissionOverwriteManager;

function requirePermissionOverwriteManager () {
	if (hasRequiredPermissionOverwriteManager) return PermissionOverwriteManager_1;
	hasRequiredPermissionOverwriteManager = 1;

	const process = require$$0$d;
	const { Collection } = requireDist$3();
	const { OverwriteType, Routes } = requireV10$6();
	const CachedManager = requireCachedManager();
	const { DiscordjsTypeError, ErrorCodes } = requireErrors$1();
	const PermissionOverwrites = requirePermissionOverwrites();
	const { Role } = requireRole$1();

	let cacheWarningEmitted = false;

	/**
	 * Manages API methods for guild channel permission overwrites and stores their cache.
	 * @extends {CachedManager}
	 */
	class PermissionOverwriteManager extends CachedManager {
	  constructor(channel, iterable) {
	    super(channel.client, PermissionOverwrites);
	    if (!cacheWarningEmitted && this._cache.constructor.name !== 'Collection') {
	      cacheWarningEmitted = true;
	      process.emitWarning(
	        `Overriding the cache handling for ${this.constructor.name} is unsupported and breaks functionality.`,
	        'UnsupportedCacheOverwriteWarning',
	      );
	    }

	    /**
	     * The channel of the permission overwrite this manager belongs to
	     * @type {GuildChannel}
	     */
	    this.channel = channel;

	    if (iterable) {
	      for (const item of iterable) {
	        this._add(item);
	      }
	    }
	  }

	  /**
	   * The cache of this Manager
	   * @type {Collection<Snowflake, PermissionOverwrites>}
	   * @name PermissionOverwriteManager#cache
	   */

	  _add(data, cache) {
	    return super._add(data, cache, { extras: [this.channel] });
	  }

	  /**
	   * Replaces the permission overwrites in this channel.
	   * @param {OverwriteResolvable[]|Collection<Snowflake, OverwriteResolvable>} overwrites
	   * Permission overwrites the channel gets updated with
	   * @param {string} [reason] Reason for updating the channel overwrites
	   * @returns {Promise<GuildChannel>}
	   * @example
	   * message.channel.permissionOverwrites.set([
	   *   {
	   *      id: message.author.id,
	   *      deny: [PermissionFlagsBits.ViewChannel],
	   *   },
	   * ], 'Needed to change permissions');
	   */
	  set(overwrites, reason) {
	    if (!Array.isArray(overwrites) && !(overwrites instanceof Collection)) {
	      return Promise.reject(
	        new DiscordjsTypeError(
	          ErrorCodes.InvalidType,
	          'overwrites',
	          'Array or Collection of Permission Overwrites',
	          true,
	        ),
	      );
	    }
	    return this.channel.edit({ permissionOverwrites: overwrites, reason });
	  }

	  /**
	   * Extra information about the overwrite.
	   * @typedef {Object} GuildChannelOverwriteOptions
	   * @property {string} [reason] The reason for creating/editing this overwrite
	   * @property {OverwriteType} [type] The type of overwrite. Use this to bypass automatic resolution of `type`
	   * that results in an error for an uncached structure
	   */

	  /**
	   * Creates or edits permission overwrites for a user or role in this channel.
	   * @param {RoleResolvable|UserResolvable} userOrRole The user or role to update
	   * @param {PermissionOverwriteOptions} options The options for the update
	   * @param {GuildChannelOverwriteOptions} [overwriteOptions] The extra information for the update
	   * @param {PermissionOverwrites} [existing] The existing overwrites to merge with this update
	   * @returns {Promise<GuildChannel>}
	   * @private
	   */
	  async upsert(userOrRole, options, overwriteOptions = {}, existing) {
	    let userOrRoleId = this.channel.guild.roles.resolveId(userOrRole) ?? this.client.users.resolveId(userOrRole);
	    let { type, reason } = overwriteOptions;
	    if (typeof type !== 'number') {
	      userOrRole = this.channel.guild.roles.resolve(userOrRole) ?? this.client.users.resolve(userOrRole);
	      if (!userOrRole) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'parameter', 'User nor a Role');
	      type = userOrRole instanceof Role ? OverwriteType.Role : OverwriteType.Member;
	    }

	    const { allow, deny } = PermissionOverwrites.resolveOverwriteOptions(options, existing);

	    await this.client.rest.put(Routes.channelPermission(this.channel.id, userOrRoleId), {
	      body: { id: userOrRoleId, type, allow, deny },
	      reason,
	    });
	    return this.channel;
	  }

	  /**
	   * Creates permission overwrites for a user or role in this channel, or replaces them if already present.
	   * @param {RoleResolvable|UserResolvable} userOrRole The user or role to update
	   * @param {PermissionOverwriteOptions} options The options for the update
	   * @param {GuildChannelOverwriteOptions} [overwriteOptions] The extra information for the update
	   * @returns {Promise<GuildChannel>}
	   * @example
	   * // Create or Replace permission overwrites for a message author
	   * message.channel.permissionOverwrites.create(message.author, {
	   *   SendMessages: false
	   * })
	   *   .then(channel => console.log(channel.permissionOverwrites.cache.get(message.author.id)))
	   *   .catch(console.error);
	   */
	  create(userOrRole, options, overwriteOptions) {
	    return this.upsert(userOrRole, options, overwriteOptions);
	  }

	  /**
	   * Edits permission overwrites for a user or role in this channel, or creates an entry if not already present.
	   * @param {RoleResolvable|UserResolvable} userOrRole The user or role to update
	   * @param {PermissionOverwriteOptions} options The options for the update
	   * @param {GuildChannelOverwriteOptions} [overwriteOptions] The extra information for the update
	   * @returns {Promise<GuildChannel>}
	   * @example
	   * // Edit or Create permission overwrites for a message author
	   * message.channel.permissionOverwrites.edit(message.author, {
	   *   SendMessages: false
	   * })
	   *   .then(channel => console.log(channel.permissionOverwrites.cache.get(message.author.id)))
	   *   .catch(console.error);
	   */
	  edit(userOrRole, options, overwriteOptions) {
	    const existing = this.cache.get(
	      this.channel.guild.roles.resolveId(userOrRole) ?? this.client.users.resolveId(userOrRole),
	    );
	    return this.upsert(userOrRole, options, overwriteOptions, existing);
	  }

	  /**
	   * Deletes permission overwrites for a user or role in this channel.
	   * @param {UserResolvable|RoleResolvable} userOrRole The user or role to delete
	   * @param {string} [reason] The reason for deleting the overwrite
	   * @returns {Promise<GuildChannel>}
	   */
	  async delete(userOrRole, reason) {
	    const userOrRoleId = this.channel.guild.roles.resolveId(userOrRole) ?? this.client.users.resolveId(userOrRole);
	    if (!userOrRoleId) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'parameter', 'User nor a Role');

	    await this.client.rest.delete(Routes.channelPermission(this.channel.id, userOrRoleId), { reason });
	    return this.channel;
	  }
	}

	PermissionOverwriteManager_1 = PermissionOverwriteManager;
	return PermissionOverwriteManager_1;
}

var GuildChannel_1;
var hasRequiredGuildChannel;

function requireGuildChannel () {
	if (hasRequiredGuildChannel) return GuildChannel_1;
	hasRequiredGuildChannel = 1;

	const { Snowflake } = /*@__PURE__*/ requireCjs$2();
	const { PermissionFlagsBits, ChannelType } = requireV10$6();
	const { BaseChannel } = requireBaseChannel();
	const { DiscordjsError, ErrorCodes } = requireErrors$1();
	const PermissionOverwriteManager = requirePermissionOverwriteManager();
	const { VoiceBasedChannelTypes } = requireConstants$1();
	const PermissionsBitField = requirePermissionsBitField();
	const { getSortableGroupTypes } = requireUtil();

	/**
	 * Represents a guild channel from any of the following:
	 * - {@link TextChannel}
	 * - {@link VoiceChannel}
	 * - {@link CategoryChannel}
	 * - {@link NewsChannel}
	 * - {@link StageChannel}
	 * - {@link ForumChannel}
	 * - {@link MediaChannel}
	 * @extends {BaseChannel}
	 * @abstract
	 */
	class GuildChannel extends BaseChannel {
	  constructor(guild, data, client, immediatePatch = true) {
	    super(client, data, false);

	    /**
	     * The guild the channel is in
	     * @type {Guild}
	     */
	    this.guild = guild;

	    /**
	     * The id of the guild the channel is in
	     * @type {Snowflake}
	     */
	    this.guildId = guild?.id ?? data.guild_id;
	    /**
	     * A manager of permission overwrites that belong to this channel
	     * @type {PermissionOverwriteManager}
	     */
	    this.permissionOverwrites = new PermissionOverwriteManager(this);

	    if (data && immediatePatch) this._patch(data);
	  }

	  _patch(data) {
	    super._patch(data);

	    if ('name' in data) {
	      /**
	       * The name of the guild channel
	       * @type {string}
	       */
	      this.name = data.name;
	    }

	    if ('position' in data) {
	      /**
	       * The raw position of the channel from Discord
	       * @type {number}
	       */
	      this.rawPosition = data.position;
	    }

	    if ('guild_id' in data) {
	      this.guildId = data.guild_id;
	    }

	    if ('parent_id' in data) {
	      /**
	       * The id of the category parent of this channel
	       * @type {?Snowflake}
	       */
	      this.parentId = data.parent_id;
	    } else {
	      this.parentId ??= null;
	    }

	    if ('permission_overwrites' in data) {
	      this.permissionOverwrites.cache.clear();
	      for (const overwrite of data.permission_overwrites) {
	        this.permissionOverwrites._add(overwrite);
	      }
	    }
	  }

	  _clone() {
	    const clone = super._clone();
	    clone.permissionOverwrites = new PermissionOverwriteManager(clone, this.permissionOverwrites.cache.values());
	    return clone;
	  }

	  /**
	   * The category parent of this channel
	   * @type {?CategoryChannel}
	   * @readonly
	   */
	  get parent() {
	    return this.guild.channels.resolve(this.parentId);
	  }

	  /**
	   * If the permissionOverwrites match the parent channel, null if no parent
	   * @type {?boolean}
	   * @readonly
	   */
	  get permissionsLocked() {
	    if (!this.parent) return null;

	    // Get all overwrites
	    const overwriteIds = new Set([
	      ...this.permissionOverwrites.cache.keys(),
	      ...this.parent.permissionOverwrites.cache.keys(),
	    ]);

	    // Compare all overwrites
	    return [...overwriteIds].every(key => {
	      const channelVal = this.permissionOverwrites.cache.get(key);
	      const parentVal = this.parent.permissionOverwrites.cache.get(key);

	      // Handle empty overwrite
	      if (
	        (!channelVal &&
	          parentVal.deny.bitfield === PermissionsBitField.DefaultBit &&
	          parentVal.allow.bitfield === PermissionsBitField.DefaultBit) ||
	        (!parentVal &&
	          channelVal.deny.bitfield === PermissionsBitField.DefaultBit &&
	          channelVal.allow.bitfield === PermissionsBitField.DefaultBit)
	      ) {
	        return true;
	      }

	      // Compare overwrites
	      return (
	        channelVal !== undefined &&
	        parentVal !== undefined &&
	        channelVal.deny.bitfield === parentVal.deny.bitfield &&
	        channelVal.allow.bitfield === parentVal.allow.bitfield
	      );
	    });
	  }

	  /**
	   * The position of the channel
	   * @type {number}
	   * @readonly
	   */
	  get position() {
	    const selfIsCategory = this.type === ChannelType.GuildCategory;
	    const types = getSortableGroupTypes(this.type);

	    let count = 0;
	    for (const channel of this.guild.channels.cache.values()) {
	      if (!types.includes(channel.type)) continue;
	      if (!selfIsCategory && channel.parentId !== this.parentId) continue;
	      if (this.rawPosition === channel.rawPosition) {
	        if (Snowflake.compare(channel.id, this.id) === -1) count++;
	      } else if (this.rawPosition > channel.rawPosition) {
	        count++;
	      }
	    }

	    return count;
	  }

	  /**
	   * Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.
	   * @param {GuildMemberResolvable|RoleResolvable} memberOrRole The member or role to obtain the overall permissions for
	   * @param {boolean} [checkAdmin=true] Whether having the {@link PermissionFlagsBits.Administrator} permission
	   * will return all permissions
	   * @returns {?Readonly<PermissionsBitField>}
	   */
	  permissionsFor(memberOrRole, checkAdmin = true) {
	    const member = this.guild.members.resolve(memberOrRole);
	    if (member) return this.memberPermissions(member, checkAdmin);
	    const role = this.guild.roles.resolve(memberOrRole);
	    return role && this.rolePermissions(role, checkAdmin);
	  }

	  overwritesFor(member, verified = false, roles = null) {
	    if (!verified) member = this.guild.members.resolve(member);
	    if (!member) return [];

	    roles ??= member.roles.cache;
	    const roleOverwrites = [];
	    let memberOverwrites;
	    let everyoneOverwrites;

	    for (const overwrite of this.permissionOverwrites.cache.values()) {
	      if (overwrite.id === this.guild.id) {
	        everyoneOverwrites = overwrite;
	      } else if (roles.has(overwrite.id)) {
	        roleOverwrites.push(overwrite);
	      } else if (overwrite.id === member.id) {
	        memberOverwrites = overwrite;
	      }
	    }

	    return {
	      everyone: everyoneOverwrites,
	      roles: roleOverwrites,
	      member: memberOverwrites,
	    };
	  }

	  /**
	   * Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.
	   * @param {GuildMember} member The member to obtain the overall permissions for
	   * @param {boolean} checkAdmin Whether having the {@link PermissionFlagsBits.Administrator} permission
	   * will return all permissions
	   * @returns {Readonly<PermissionsBitField>}
	   * @private
	   */
	  memberPermissions(member, checkAdmin) {
	    if (checkAdmin && member.id === this.guild.ownerId) {
	      return new PermissionsBitField(PermissionsBitField.All).freeze();
	    }

	    const roles = member.roles.cache;
	    const permissions = new PermissionsBitField(roles.map(role => role.permissions));

	    if (checkAdmin && permissions.has(PermissionFlagsBits.Administrator)) {
	      return new PermissionsBitField(PermissionsBitField.All).freeze();
	    }

	    const overwrites = this.overwritesFor(member, true, roles);

	    return permissions
	      .remove(overwrites.everyone?.deny ?? PermissionsBitField.DefaultBit)
	      .add(overwrites.everyone?.allow ?? PermissionsBitField.DefaultBit)
	      .remove(overwrites.roles.length > 0 ? overwrites.roles.map(role => role.deny) : PermissionsBitField.DefaultBit)
	      .add(overwrites.roles.length > 0 ? overwrites.roles.map(role => role.allow) : PermissionsBitField.DefaultBit)
	      .remove(overwrites.member?.deny ?? PermissionsBitField.DefaultBit)
	      .add(overwrites.member?.allow ?? PermissionsBitField.DefaultBit)
	      .freeze();
	  }

	  /**
	   * Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.
	   * @param {Role} role The role to obtain the overall permissions for
	   * @param {boolean} checkAdmin Whether having the {@link PermissionFlagsBits.Administrator} permission
	   * will return all permissions
	   * @returns {Readonly<PermissionsBitField>}
	   * @private
	   */
	  rolePermissions(role, checkAdmin) {
	    if (checkAdmin && role.permissions.has(PermissionFlagsBits.Administrator)) {
	      return new PermissionsBitField(PermissionsBitField.All).freeze();
	    }

	    const everyoneOverwrites = this.permissionOverwrites.cache.get(this.guild.id);
	    const roleOverwrites = this.permissionOverwrites.cache.get(role.id);

	    return role.permissions
	      .remove(everyoneOverwrites?.deny ?? PermissionsBitField.DefaultBit)
	      .add(everyoneOverwrites?.allow ?? PermissionsBitField.DefaultBit)
	      .remove(roleOverwrites?.deny ?? PermissionsBitField.DefaultBit)
	      .add(roleOverwrites?.allow ?? PermissionsBitField.DefaultBit)
	      .freeze();
	  }

	  /**
	   * Locks in the permission overwrites from the parent channel.
	   * @returns {Promise<GuildChannel>}
	   */
	  lockPermissions() {
	    if (!this.parent) return Promise.reject(new DiscordjsError(ErrorCodes.GuildChannelOrphan));
	    const permissionOverwrites = this.parent.permissionOverwrites.cache.map(overwrite => overwrite.toJSON());
	    return this.edit({ permissionOverwrites });
	  }

	  /**
	   * A collection of cached members of this channel, mapped by their ids.
	   * Members that can view this channel, if the channel is text-based.
	   * Members in the channel, if the channel is voice-based.
	   * @type {Collection<Snowflake, GuildMember>}
	   * @readonly
	   */
	  get members() {
	    return this.guild.members.cache.filter(member =>
	      this.permissionsFor(member).has(PermissionFlagsBits.ViewChannel, false),
	    );
	  }

	  /**
	   * Edits the channel.
	   * @param {GuildChannelEditOptions} options The options to provide
	   * @returns {Promise<GuildChannel>}
	   * @example
	   * // Edit a channel
	   * channel.edit({ name: 'new-channel' })
	   *   .then(console.log)
	   *   .catch(console.error);
	   */
	  edit(options) {
	    return this.guild.channels.edit(this, options);
	  }

	  /**
	   * Sets a new name for the guild channel.
	   * @param {string} name The new name for the guild channel
	   * @param {string} [reason] Reason for changing the guild channel's name
	   * @returns {Promise<GuildChannel>}
	   * @example
	   * // Set a new channel name
	   * channel.setName('not_general')
	   *   .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))
	   *   .catch(console.error);
	   */
	  setName(name, reason) {
	    return this.edit({ name, reason });
	  }

	  /**
	   * Options used to set the parent of a channel.
	   * @typedef {Object} SetParentOptions
	   * @property {boolean} [lockPermissions=true] Whether to lock the permissions to what the parent's permissions are
	   * @property {string} [reason] The reason for modifying the parent of the channel
	   */

	  /**
	   * Sets the parent of this channel.
	   * @param {?CategoryChannelResolvable} channel The category channel to set as the parent
	   * @param {SetParentOptions} [options={}] The options for setting the parent
	   * @returns {Promise<GuildChannel>}
	   * @example
	   * // Add a parent to a channel
	   * message.channel.setParent('355908108431917066', { lockPermissions: false })
	   *   .then(channel => console.log(`New parent of ${message.channel.name}: ${channel.name}`))
	   *   .catch(console.error);
	   */
	  setParent(channel, { lockPermissions = true, reason } = {}) {
	    return this.edit({
	      parent: channel ?? null,
	      lockPermissions,
	      reason,
	    });
	  }

	  /**
	   * Options used to set the position of a channel.
	   * @typedef {Object} SetChannelPositionOptions
	   * @property {boolean} [relative=false] Whether or not to change the position relative to its current value
	   * @property {string} [reason] The reason for changing the position
	   */

	  /**
	   * Sets a new position for the guild channel.
	   * @param {number} position The new position for the guild channel
	   * @param {SetChannelPositionOptions} [options] Options for setting position
	   * @returns {Promise<GuildChannel>}
	   * @example
	   * // Set a new channel position
	   * channel.setPosition(2)
	   *   .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))
	   *   .catch(console.error);
	   */
	  setPosition(position, options = {}) {
	    return this.guild.channels.setPosition(this, position, options);
	  }

	  /**
	   * Options used to clone a guild channel.
	   * @typedef {GuildChannelCreateOptions} GuildChannelCloneOptions
	   * @property {string} [name=this.name] Name of the new channel
	   */

	  /**
	   * Clones this channel.
	   * @param {GuildChannelCloneOptions} [options] The options for cloning this channel
	   * @returns {Promise<GuildChannel>}
	   */
	  clone(options = {}) {
	    return this.guild.channels.create({
	      name: options.name ?? this.name,
	      permissionOverwrites: this.permissionOverwrites.cache,
	      topic: this.topic,
	      type: this.type,
	      nsfw: this.nsfw,
	      parent: this.parent,
	      bitrate: this.bitrate,
	      userLimit: this.userLimit,
	      rateLimitPerUser: this.rateLimitPerUser,
	      position: this.rawPosition,
	      reason: null,
	      ...options,
	    });
	  }

	  /**
	   * Checks if this channel has the same type, topic, position, name, overwrites, and id as another channel.
	   * In most cases, a simple `channel.id === channel2.id` will do, and is much faster too.
	   * @param {GuildChannel} channel Channel to compare with
	   * @returns {boolean}
	   */
	  equals(channel) {
	    let equal =
	      channel &&
	      this.id === channel.id &&
	      this.type === channel.type &&
	      this.topic === channel.topic &&
	      this.position === channel.position &&
	      this.name === channel.name;

	    if (equal) {
	      if (this.permissionOverwrites && channel.permissionOverwrites) {
	        equal = this.permissionOverwrites.cache.equals(channel.permissionOverwrites.cache);
	      } else {
	        equal = !this.permissionOverwrites && !channel.permissionOverwrites;
	      }
	    }

	    return equal;
	  }

	  /**
	   * Whether the channel is deletable by the client user
	   * @type {boolean}
	   * @readonly
	   */
	  get deletable() {
	    return this.manageable && this.guild.rulesChannelId !== this.id && this.guild.publicUpdatesChannelId !== this.id;
	  }

	  /**
	   * Whether the channel is manageable by the client user
	   * @type {boolean}
	   * @readonly
	   */
	  get manageable() {
	    if (this.client.user.id === this.guild.ownerId) return true;
	    const permissions = this.permissionsFor(this.client.user);
	    if (!permissions) return false;

	    // This flag allows managing even if timed out
	    if (permissions.has(PermissionFlagsBits.Administrator, false)) return true;
	    if (this.guild.members.me.communicationDisabledUntilTimestamp > Date.now()) return false;

	    const bitfield = VoiceBasedChannelTypes.includes(this.type)
	      ? PermissionFlagsBits.ManageChannels | PermissionFlagsBits.Connect
	      : PermissionFlagsBits.ViewChannel | PermissionFlagsBits.ManageChannels;
	    return permissions.has(bitfield, false);
	  }

	  /**
	   * Whether the channel is viewable by the client user
	   * @type {boolean}
	   * @readonly
	   */
	  get viewable() {
	    if (this.client.user.id === this.guild.ownerId) return true;
	    const permissions = this.permissionsFor(this.client.user);
	    if (!permissions) return false;
	    return permissions.has(PermissionFlagsBits.ViewChannel, false);
	  }

	  /**
	   * Deletes this channel.
	   * @param {string} [reason] Reason for deleting this channel
	   * @returns {Promise<GuildChannel>}
	   * @example
	   * // Delete the channel
	   * channel.delete('making room for new channels')
	   *   .then(console.log)
	   *   .catch(console.error);
	   */
	  async delete(reason) {
	    await this.guild.channels.delete(this.id, reason);
	    return this;
	  }
	}

	GuildChannel_1 = GuildChannel;
	return GuildChannel_1;
}

var SKU = {};

var SKUFlagsBitField = {};

var hasRequiredSKUFlagsBitField;

function requireSKUFlagsBitField () {
	if (hasRequiredSKUFlagsBitField) return SKUFlagsBitField;
	hasRequiredSKUFlagsBitField = 1;

	const { SKUFlags } = requireV10$6();
	const BitField = requireBitField();

	/**
	 * Data structure that makes it easy to interact with an {@link SKU#flags} bitfield.
	 * @extends {BitField}
	 */
	let SKUFlagsBitField$1 = class SKUFlagsBitField extends BitField {
	  /**
	   * Numeric SKU flags.
	   * @type {SKUFlags}
	   * @memberof SKUFlagsBitField
	   */
	  static Flags = SKUFlags;
	};

	/**
	 * @name SKUFlagsBitField
	 * @kind constructor
	 * @memberof SKUFlagsBitField
	 * @param {BitFieldResolvable} [bits=0] Bit(s) to read from
	 */

	SKUFlagsBitField.SKUFlagsBitField = SKUFlagsBitField$1;
	return SKUFlagsBitField;
}

var hasRequiredSKU;

function requireSKU () {
	if (hasRequiredSKU) return SKU;
	hasRequiredSKU = 1;

	const Base = requireBase$2();
	const { SKUFlagsBitField } = requireSKUFlagsBitField();

	/**
	 * Represents a premium application SKU.
	 * @extends {Base}
	 */
	let SKU$1 = class SKU extends Base {
	  constructor(client, data) {
	    super(client);

	    /**
	     * The id of the SKU
	     * @type {Snowflake}
	     */
	    this.id = data.id;

	    /**
	     * The type of the SKU
	     * @type {SKUType}
	     */
	    this.type = data.type;

	    /**
	     * The id of the parent application
	     * @type {Snowflake}
	     */
	    this.applicationId = data.application_id;

	    /**
	     * The customer-facing name of the premium offering
	     * @type {string}
	     */
	    this.name = data.name;

	    /**
	     * The system-generated URL slug based on this SKU's name
	     * @type {string}
	     */
	    this.slug = data.slug;

	    /**
	     * Flags that describe the SKU
	     * @type {Readonly<SKUFlagsBitField>}
	     */
	    this.flags = new SKUFlagsBitField(data.flags).freeze();
	  }
	};

	SKU.SKU = SKU$1;
	return SKU;
}

var Util;
var hasRequiredUtil;

function requireUtil () {
	if (hasRequiredUtil) return Util;
	hasRequiredUtil = 1;

	const { parse } = require$$2$4;
	const { Collection } = requireDist$3();
	const { ChannelType, RouteBases, Routes } = requireV10$6();
	const { fetch } = requireUndici();
	const Colors = requireColors();
	const { DiscordjsError, DiscordjsRangeError, DiscordjsTypeError, ErrorCodes } = requireErrors$1();
	const isObject = d => typeof d === 'object' && d !== null;

	/**
	 * Flatten an object. Any properties that are collections will get converted to an array of keys.
	 * @param {Object} obj The object to flatten.
	 * @param {...Object<string, boolean|string>} [props] Specific properties to include/exclude.
	 * @returns {Object}
	 */
	function flatten(obj, ...props) {
	  if (!isObject(obj)) return obj;

	  const objProps = Object.keys(obj)
	    .filter(key => !key.startsWith('_'))
	    .map(key => ({ [key]: true }));

	  props = objProps.length ? Object.assign(...objProps, ...props) : Object.assign({}, ...props);

	  const out = {};

	  for (let [prop, newProp] of Object.entries(props)) {
	    if (!newProp) continue;
	    newProp = newProp === true ? prop : newProp;

	    const element = obj[prop];
	    const elemIsObj = isObject(element);
	    const valueOf = elemIsObj && typeof element.valueOf === 'function' ? element.valueOf() : null;
	    const hasToJSON = elemIsObj && typeof element.toJSON === 'function';

	    // If it's a Collection, make the array of keys
	    if (element instanceof Collection) out[newProp] = Array.from(element.keys());
	    // If the valueOf is a Collection, use its array of keys
	    else if (valueOf instanceof Collection) out[newProp] = Array.from(valueOf.keys());
	    // If it's an array, call toJSON function on each element if present, otherwise flatten each element
	    else if (Array.isArray(element)) out[newProp] = element.map(elm => elm.toJSON?.() ?? flatten(elm));
	    // If it's an object with a primitive `valueOf`, use that value
	    else if (typeof valueOf !== 'object') out[newProp] = valueOf;
	    // If it's an object with a toJSON function, use the return value of it
	    else if (hasToJSON) out[newProp] = element.toJSON();
	    // If element is an object, use the flattened version of it
	    else if (typeof element === 'object') out[newProp] = flatten(element);
	    // If it's a primitive
	    else if (!elemIsObj) out[newProp] = element;
	  }

	  return out;
	}

	/**
	 * @typedef {Object} FetchRecommendedShardCountOptions
	 * @property {number} [guildsPerShard=1000] Number of guilds assigned per shard
	 * @property {number} [multipleOf=1] The multiple the shard count should round up to. (16 for large bot sharding)
	 */

	/**
	 * Gets the recommended shard count from Discord.
	 * @param {string} token Discord auth token
	 * @param {FetchRecommendedShardCountOptions} [options] Options for fetching the recommended shard count
	 * @returns {Promise<number>} The recommended number of shards
	 */
	async function fetchRecommendedShardCount(token, { guildsPerShard = 1_000, multipleOf = 1 } = {}) {
	  if (!token) throw new DiscordjsError(ErrorCodes.TokenMissing);
	  const response = await fetch(RouteBases.api + Routes.gatewayBot(), {
	    method: 'GET',
	    headers: { Authorization: `Bot ${token.replace(/^Bot\s*/i, '')}` },
	  });
	  if (!response.ok) {
	    if (response.status === 401) throw new DiscordjsError(ErrorCodes.TokenInvalid);
	    throw response;
	  }
	  const { shards } = await response.json();
	  return Math.ceil((shards * (1_000 / guildsPerShard)) / multipleOf) * multipleOf;
	}

	/**
	 * A partial emoji object.
	 * @typedef {Object} PartialEmoji
	 * @property {boolean} animated Whether the emoji is animated
	 * @property {Snowflake|undefined} id The id of the emoji
	 * @property {string} name The name of the emoji
	 */

	/**
	 * Parses emoji info out of a string. The string must be one of:
	 * * A UTF-8 emoji (no id)
	 * * A URL-encoded UTF-8 emoji (no id)
	 * * A Discord custom emoji (`<:name:id>` or `<a:name:id>`)
	 * @param {string} text Emoji string to parse
	 * @returns {?PartialEmoji}
	 */
	function parseEmoji(text) {
	  if (text.includes('%')) text = decodeURIComponent(text);
	  if (!text.includes(':')) return { animated: false, name: text, id: undefined };
	  const match = text.match(/<?(?:(a):)?(\w{2,32}):(\d{17,19})?>?/);
	  return match && { animated: Boolean(match[1]), name: match[2], id: match[3] };
	}

	/**
	 * A partial emoji object with only an id.
	 * @typedef {Object} PartialEmojiOnlyId
	 * @property {Snowflake} id The id of the emoji
	 */

	/**
	 * Resolves a partial emoji object from an {@link EmojiIdentifierResolvable}, without checking a Client.
	 * @param {Emoji|EmojiIdentifierResolvable} emoji Emoji identifier to resolve
	 * @returns {?(PartialEmoji|PartialEmojiOnlyId)} Supplying a snowflake yields `PartialEmojiOnlyId`.
	 * @private
	 */
	function resolvePartialEmoji(emoji) {
	  if (!emoji) return null;
	  if (typeof emoji === 'string') return /^\d{17,19}$/.test(emoji) ? { id: emoji } : parseEmoji(emoji);
	  const { id, name, animated } = emoji;
	  if (!id && !name) return null;
	  return { id, name, animated: Boolean(animated) };
	}

	/**
	 * Options used to make an error object.
	 * @typedef {Object} MakeErrorOptions
	 * @property {string} name Error type
	 * @property {string} message Message for the error
	 * @property {string} stack Stack for the error
	 * @private
	 */

	/**
	 * Makes an Error from a plain info object.
	 * @param {MakeErrorOptions} obj Error info
	 * @returns {Error}
	 * @private
	 */
	function makeError(obj) {
	  const err = new Error(obj.message);
	  err.name = obj.name;
	  err.stack = obj.stack;
	  return err;
	}

	/**
	 * Makes a plain error info object from an Error.
	 * @param {Error} err Error to get info from
	 * @returns {MakeErrorOptions}
	 * @private
	 */
	function makePlainError(err) {
	  return {
	    name: err.name,
	    message: err.message,
	    stack: err.stack,
	  };
	}

	const TextSortableGroupTypes = [
	  ChannelType.GuildText,
	  ChannelType.GuildAnnouncement,
	  ChannelType.GuildForum,
	  ChannelType.GuildMedia,
	];

	const VoiceSortableGroupTypes = [ChannelType.GuildVoice, ChannelType.GuildStageVoice];
	const CategorySortableGroupTypes = [ChannelType.GuildCategory];

	/**
	 * Gets an array of the channel types that can be moved in the channel group. For example, a GuildText channel would
	 * return an array containing the types that can be ordered within the text channels (always at the top), and a voice
	 * channel would return an array containing the types that can be ordered within the voice channels (always at the
	 * bottom).
	 * @param {ChannelType} type The type of the channel
	 * @returns {ChannelType[]}
	 * @private
	 */
	function getSortableGroupTypes(type) {
	  switch (type) {
	    case ChannelType.GuildText:
	    case ChannelType.GuildAnnouncement:
	    case ChannelType.GuildForum:
	    case ChannelType.GuildMedia:
	      return TextSortableGroupTypes;
	    case ChannelType.GuildVoice:
	    case ChannelType.GuildStageVoice:
	      return VoiceSortableGroupTypes;
	    case ChannelType.GuildCategory:
	      return CategorySortableGroupTypes;
	    default:
	      return [type];
	  }
	}

	/**
	 * Moves an element in an array *in place*.
	 * @param {Array<*>} array Array to modify
	 * @param {*} element Element to move
	 * @param {number} newIndex Index or offset to move the element to
	 * @param {boolean} [offset=false] Move the element by an offset amount rather than to a set index
	 * @returns {number}
	 * @private
	 */
	function moveElementInArray(array, element, newIndex, offset = false) {
	  const index = array.indexOf(element);
	  newIndex = (offset ? index : 0) + newIndex;
	  if (newIndex > -1 && newIndex < array.length) {
	    const removedElement = array.splice(index, 1)[0];
	    array.splice(newIndex, 0, removedElement);
	  }
	  return array.indexOf(element);
	}

	/**
	 * Verifies the provided data is a string, otherwise throws provided error.
	 * @param {string} data The string resolvable to resolve
	 * @param {Function} [error] The Error constructor to instantiate. Defaults to Error
	 * @param {string} [errorMessage] The error message to throw with. Defaults to "Expected string, got <data> instead."
	 * @param {boolean} [allowEmpty=true] Whether an empty string should be allowed
	 * @returns {string}
	 */
	function verifyString(
	  data,
	  error = Error,
	  errorMessage = `Expected a string, got ${data} instead.`,
	  allowEmpty = true,
	) {
	  if (typeof data !== 'string') throw new error(errorMessage);
	  if (!allowEmpty && data.length === 0) throw new error(errorMessage);
	  return data;
	}

	/**
	 * Can be a number, hex string, an RGB array like:
	 * ```js
	 * [255, 0, 255] // purple
	 * ```
	 * or one of the following strings:
	 * - `Default`
	 * - `White`
	 * - `Aqua`
	 * - `Green`
	 * - `Blue`
	 * - `Yellow`
	 * - `Purple`
	 * - `LuminousVividPink`
	 * - `Fuchsia`
	 * - `Gold`
	 * - `Orange`
	 * - `Red`
	 * - `Grey`
	 * - `Navy`
	 * - `DarkAqua`
	 * - `DarkGreen`
	 * - `DarkBlue`
	 * - `DarkPurple`
	 * - `DarkVividPink`
	 * - `DarkGold`
	 * - `DarkOrange`
	 * - `DarkRed`
	 * - `DarkGrey`
	 * - `DarkerGrey`
	 * - `LightGrey`
	 * - `DarkNavy`
	 * - `Blurple`
	 * - `Greyple`
	 * - `DarkButNotBlack`
	 * - `NotQuiteBlack`
	 * - `Random`
	 * @typedef {string|number|number[]} ColorResolvable
	 */

	/**
	 * Resolves a ColorResolvable into a color number.
	 * @param {ColorResolvable} color Color to resolve
	 * @returns {number} A color
	 */
	function resolveColor(color) {
	  let resolvedColor;

	  if (typeof color === 'string') {
	    if (color === 'Random') return Math.floor(Math.random() * (0xffffff + 1));
	    if (color === 'Default') return 0;
	    if (/^#?[\da-f]{6}$/i.test(color)) return parseInt(color.replace('#', ''), 16);
	    resolvedColor = Colors[color];
	  } else if (Array.isArray(color)) {
	    resolvedColor = (color[0] << 16) + (color[1] << 8) + color[2];
	  } else {
	    resolvedColor = color;
	  }

	  if (!Number.isInteger(resolvedColor)) {
	    throw new DiscordjsTypeError(ErrorCodes.ColorConvert, color);
	  }

	  if (resolvedColor < 0 || resolvedColor > 0xffffff) {
	    throw new DiscordjsRangeError(ErrorCodes.ColorRange);
	  }

	  return resolvedColor;
	}

	/**
	 * Sorts by Discord's position and id.
	 * @param {Collection} collection Collection of objects to sort
	 * @returns {Collection}
	 */
	function discordSort(collection) {
	  const isGuildChannel = collection.first() instanceof GuildChannel;
	  return collection.sorted(
	    isGuildChannel
	      ? (a, b) => a.rawPosition - b.rawPosition || Number(BigInt(a.id) - BigInt(b.id))
	      : (a, b) => a.rawPosition - b.rawPosition || Number(BigInt(b.id) - BigInt(a.id)),
	  );
	}

	/**
	 * Sets the position of a Channel or Role.
	 * @param {BaseChannel|Role} item Object to set the position of
	 * @param {number} position New position for the object
	 * @param {boolean} relative Whether `position` is relative to its current position
	 * @param {Collection<string, BaseChannel|Role>} sorted A collection of the objects sorted properly
	 * @param {Client} client The client to use to patch the data
	 * @param {string} route Route to call PATCH on
	 * @param {string} [reason] Reason for the change
	 * @returns {Promise<BaseChannel[]|Role[]>} Updated item list, with `id` and `position` properties
	 * @private
	 */
	async function setPosition(item, position, relative, sorted, client, route, reason) {
	  let updatedItems = [...sorted.values()];
	  moveElementInArray(updatedItems, item, position, relative);
	  updatedItems = updatedItems.map((r, i) => ({ id: r.id, position: i }));
	  await client.rest.patch(route, { body: updatedItems, reason });
	  return updatedItems;
	}

	/**
	 * Alternative to Node's `path.basename`, removing query string after the extension if it exists.
	 * @param {string} path Path to get the basename of
	 * @param {string} [ext] File extension to remove
	 * @returns {string} Basename of the path
	 * @private
	 */
	function basename(path, ext) {
	  const res = parse(path);
	  return ext && res.ext.startsWith(ext) ? res.name : res.base.split('?')[0];
	}

	/**
	 * The content to have all mentions replaced by the equivalent text.
	 * @param {string} str The string to be converted
	 * @param {TextBasedChannels} channel The channel the string was sent in
	 * @returns {string}
	 */
	function cleanContent(str, channel) {
	  return str.replaceAll(
	    /* eslint-disable max-len */
	    /<(?:(?<type>@[!&]?|#)|(?:\/(?<commandName>[-_\p{L}\p{N}\p{sc=Deva}\p{sc=Thai} ]+):)|(?:a?:(?<emojiName>[\w]+):))(?<id>\d{17,19})>/gu,
	    (match, type, commandName, emojiName, id) => {
	      if (commandName) return `/${commandName}`;

	      if (emojiName) return `:${emojiName}:`;

	      switch (type) {
	        case '@':
	        case '@!': {
	          const member = channel.guild?.members.cache.get(id);
	          if (member) {
	            return `@${member.displayName}`;
	          }

	          const user = channel.client.users.cache.get(id);
	          return user ? `@${user.displayName}` : match;
	        }
	        case '@&': {
	          if (channel.type === ChannelType.DM) return match;
	          const role = channel.guild.roles.cache.get(id);
	          return role ? `@${role.name}` : match;
	        }
	        case '#': {
	          const mentionedChannel = channel.client.channels.cache.get(id);
	          return mentionedChannel ? `#${mentionedChannel.name}` : match;
	        }
	        default: {
	          return match;
	        }
	      }
	    },
	  );
	}

	/**
	 * The content to put in a code block with all code block fences replaced by the equivalent backticks.
	 * @param {string} text The string to be converted
	 * @returns {string}
	 */
	function cleanCodeBlockContent(text) {
	  return text.replaceAll('```', '`\u200b``');
	}

	/**
	 * Parses a webhook URL for the id and token.
	 * @param {string} url The URL to parse
	 * @returns {?WebhookClientDataIdWithToken} `null` if the URL is invalid, otherwise the id and the token
	 */
	function parseWebhookURL(url) {
	  const matches = url.match(
	    /https?:\/\/(?:ptb\.|canary\.)?discord\.com\/api(?:\/v\d{1,2})?\/webhooks\/(\d{17,19})\/([\w-]{68})/i,
	  );

	  if (!matches || matches.length <= 2) return null;

	  const [, id, token] = matches;
	  return {
	    id,
	    token,
	  };
	}

	/**
	 * Supportive data for interaction resolved data.
	 * @typedef {Object} SupportingInteractionResolvedData
	 * @property {Client} client The client
	 * @property {Guild} [guild] A guild
	 * @property {GuildTextBasedChannel} [channel] A channel
	 * @private
	 */

	/**
	 * Transforms the resolved data received from the API.
	 * @param {SupportingInteractionResolvedData} supportingData Data to support the transformation
	 * @param {APIInteractionDataResolved} [data] The received resolved objects
	 * @returns {CommandInteractionResolvedData}
	 * @private
	 */
	function transformResolved(
	  { client, guild, channel },
	  { members, users, channels, roles, messages, attachments } = {},
	) {
	  const result = {};

	  if (members) {
	    result.members = new Collection();
	    for (const [id, member] of Object.entries(members)) {
	      const user = users[id];
	      result.members.set(id, guild?.members._add({ user, ...member }) ?? member);
	    }
	  }

	  if (users) {
	    result.users = new Collection();
	    for (const user of Object.values(users)) {
	      result.users.set(user.id, client.users._add(user));
	    }
	  }

	  if (roles) {
	    result.roles = new Collection();
	    for (const role of Object.values(roles)) {
	      result.roles.set(role.id, guild?.roles._add(role) ?? role);
	    }
	  }

	  if (channels) {
	    result.channels = new Collection();
	    for (const apiChannel of Object.values(channels)) {
	      result.channels.set(apiChannel.id, client.channels._add(apiChannel, guild) ?? apiChannel);
	    }
	  }

	  if (messages) {
	    result.messages = new Collection();
	    for (const message of Object.values(messages)) {
	      result.messages.set(message.id, channel?.messages?._add(message) ?? message);
	    }
	  }

	  if (attachments) {
	    result.attachments = new Collection();
	    for (const attachment of Object.values(attachments)) {
	      const patched = new Attachment(attachment);
	      result.attachments.set(attachment.id, patched);
	    }
	  }

	  return result;
	}

	/**
	 * Resolves a SKU id from a SKU resolvable.
	 * @param {SKUResolvable} resolvable The SKU resolvable to resolve
	 * @returns {?Snowflake} The resolved SKU id, or `null` if the resolvable was invalid
	 */
	function resolveSKUId(resolvable) {
	  if (typeof resolvable === 'string') return resolvable;
	  if (resolvable instanceof SKU) return resolvable.id;
	  return null;
	}

	Util = {
	  flatten,
	  fetchRecommendedShardCount,
	  parseEmoji,
	  resolvePartialEmoji,
	  makeError,
	  makePlainError,
	  getSortableGroupTypes,
	  moveElementInArray,
	  verifyString,
	  resolveColor,
	  discordSort,
	  setPosition,
	  basename,
	  cleanContent,
	  cleanCodeBlockContent,
	  parseWebhookURL,
	  transformResolved,
	  resolveSKUId,
	};

	// Fixes Circular
	const Attachment = requireAttachment$1();
	const GuildChannel = requireGuildChannel();
	const { SKU } = requireSKU();
	return Util;
}

var BaseClient_1;
var hasRequiredBaseClient;

function requireBaseClient () {
	if (hasRequiredBaseClient) return BaseClient_1;
	hasRequiredBaseClient = 1;

	const EventEmitter = require$$0$b;
	const { REST } = requireWeb();
	const { Routes } = requireV10$6();
	const { DiscordjsTypeError, ErrorCodes } = requireErrors$1();
	const Options = requireOptions();
	const { flatten } = requireUtil();

	/**
	 * The base class for all clients.
	 * @extends {EventEmitter}
	 */
	class BaseClient extends EventEmitter {
	  constructor(options = {}) {
	    super({ captureRejections: true });

	    if (typeof options !== 'object' || options === null) {
	      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'options', 'object', true);
	    }

	    const defaultOptions = Options.createDefault();
	    /**
	     * The options the client was instantiated with
	     * @type {ClientOptions}
	     */
	    this.options = {
	      ...defaultOptions,
	      ...options,
	      presence: {
	        ...defaultOptions.presence,
	        ...options.presence,
	      },
	      sweepers: {
	        ...defaultOptions.sweepers,
	        ...options.sweepers,
	      },
	      ws: {
	        ...defaultOptions.ws,
	        ...options.ws,
	      },
	      rest: {
	        ...defaultOptions.rest,
	        ...options.rest,
	        userAgentAppendix: options.rest?.userAgentAppendix
	          ? `${Options.userAgentAppendix} ${options.rest.userAgentAppendix}`
	          : Options.userAgentAppendix,
	      },
	    };

	    /**
	     * The REST manager of the client
	     * @type {REST}
	     */
	    this.rest = new REST(this.options.rest);
	  }

	  /**
	   * Destroys all assets used by the base client.
	   * @returns {void}
	   */
	  destroy() {
	    this.rest.clearHashSweeper();
	    this.rest.clearHandlerSweeper();
	  }

	  /**
	   * Options used for deleting a webhook.
	   * @typedef {Object} WebhookDeleteOptions
	   * @property {string} [token] Token of the webhook
	   * @property {string} [reason] The reason for deleting the webhook
	   */

	  /**
	   * Deletes a webhook.
	   * @param {Snowflake} id The webhook's id
	   * @param {WebhookDeleteOptions} [options] Options for deleting the webhook
	   * @returns {Promise<void>}
	   */
	  async deleteWebhook(id, { token, reason } = {}) {
	    await this.rest.delete(Routes.webhook(id, token), { auth: !token, reason });
	  }

	  /**
	   * Increments max listeners by one, if they are not zero.
	   * @private
	   */
	  incrementMaxListeners() {
	    const maxListeners = this.getMaxListeners();
	    if (maxListeners !== 0) {
	      this.setMaxListeners(maxListeners + 1);
	    }
	  }

	  /**
	   * Decrements max listeners by one, if they are not zero.
	   * @private
	   */
	  decrementMaxListeners() {
	    const maxListeners = this.getMaxListeners();
	    if (maxListeners !== 0) {
	      this.setMaxListeners(maxListeners - 1);
	    }
	  }

	  toJSON(...props) {
	    return flatten(this, ...props);
	  }

	  async [Symbol.asyncDispose]() {
	    await this.destroy();
	  }
	}

	BaseClient_1 = BaseClient;

	/**
	 * @external REST
	 * @see {@link https://discord.js.org/docs/packages/rest/stable/REST:Class}
	 */
	return BaseClient_1;
}

var Enums;
var hasRequiredEnums;

function requireEnums () {
	if (hasRequiredEnums) return Enums;
	hasRequiredEnums = 1;

	function createEnum(keys) {
	  const obj = {};
	  for (const [index, key] of keys.entries()) {
	    if (key === null) continue;
	    obj[key] = index;
	    obj[index] = key;
	  }
	  return obj;
	}

	Enums = { createEnum };
	return Enums;
}

var Partials;
var hasRequiredPartials;

function requirePartials () {
	if (hasRequiredPartials) return Partials;
	hasRequiredPartials = 1;

	const { createEnum } = requireEnums();

	/**
	 * The enumeration for partials.
	 * ```js
	 * import { Client, Partials } from 'discord.js';
	 *
	 * const client = new Client({
	 *   intents: [
	 *     // Intents...
	 *   ],
	 *   partials: [
	 *     Partials.User, // We want to receive uncached users!
	 *     Partials.Message // We want to receive uncached messages!
	 *   ]
	 * });
	 * ```
	 * @typedef {Object} Partials
	 * @property {number} User The partial to receive uncached users.
	 * @property {number} Channel The partial to receive uncached channels.
	 * <info>This is required to receive direct messages!</info>
	 * @property {number} GuildMember The partial to receive uncached guild members.
	 * @property {number} Message The partial to receive uncached messages.
	 * @property {number} Reaction The partial to receive uncached reactions.
	 * @property {number} GuildScheduledEvent The partial to receive uncached guild scheduled events.
	 * @property {number} ThreadMember The partial to receive uncached thread members.
	 */

	// JSDoc for IntelliSense purposes
	/**
	 * @type {Partials}
	 * @ignore
	 */
	Partials = createEnum([
	  'User',
	  'Channel',
	  'GuildMember',
	  'Message',
	  'Reaction',
	  'GuildScheduledEvent',
	  'ThreadMember',
	]);
	return Partials;
}

var Action;
var hasRequiredAction;

function requireAction () {
	if (hasRequiredAction) return Action;
	hasRequiredAction = 1;

	const Partials = requirePartials();

	/*

	ABOUT ACTIONS

	Actions are similar to WebSocket Packet Handlers, but since introducing
	the REST API methods, in order to prevent rewriting code to handle data,
	"actions" have been introduced. They're basically what Packet Handlers
	used to be but they're strictly for manipulating data and making sure
	that WebSocket events don't clash with REST methods.

	*/

	class GenericAction {
	  constructor(client) {
	    this.client = client;
	  }

	  handle(data) {
	    return data;
	  }

	  getPayload(data, manager, id, partialType, cache) {
	    return this.client.options.partials.includes(partialType) ? manager._add(data, cache) : manager.cache.get(id);
	  }

	  getChannel(data) {
	    const payloadData = {};
	    const id = data.channel_id ?? data.id;

	    if (!('recipients' in data)) {
	      // Try to resolve the recipient, but do not add the client user.
	      const recipient = data.author ?? data.user ?? { id: data.user_id };
	      if (recipient.id !== this.client.user.id) payloadData.recipients = [recipient];
	    }

	    if (id !== undefined) payloadData.id = id;

	    return (
	      data[this.client.actions.injectedChannel] ??
	      this.getPayload({ ...data, ...payloadData }, this.client.channels, id, Partials.Channel)
	    );
	  }

	  getMessage(data, channel, cache) {
	    const id = data.message_id ?? data.id;
	    return (
	      data[this.client.actions.injectedMessage] ??
	      this.getPayload(
	        {
	          id,
	          channel_id: channel.id,
	          guild_id: data.guild_id ?? channel.guild?.id,
	        },
	        channel.messages,
	        id,
	        Partials.Message,
	        cache,
	      )
	    );
	  }

	  getReaction(data, message, user) {
	    const id = data.emoji.id ?? decodeURIComponent(data.emoji.name);
	    return this.getPayload(
	      {
	        emoji: data.emoji,
	        count: message.partial ? null : 0,
	        me: user?.id === this.client.user.id,
	      },
	      message.reactions,
	      id,
	      Partials.Reaction,
	    );
	  }

	  getMember(data, guild) {
	    return this.getPayload(data, guild.members, data.user.id, Partials.GuildMember);
	  }

	  getUser(data) {
	    const id = data.user_id;
	    return data[this.client.actions.injectedUser] ?? this.getPayload({ id }, this.client.users, id, Partials.User);
	  }

	  getUserFromMember(data) {
	    if (data.guild_id && data.member?.user) {
	      const guild = this.client.guilds.cache.get(data.guild_id);
	      if (guild) {
	        return guild.members._add(data.member).user;
	      } else {
	        return this.client.users._add(data.member.user);
	      }
	    }
	    return this.getUser(data);
	  }

	  getScheduledEvent(data, guild) {
	    const id = data.guild_scheduled_event_id ?? data.id;
	    return this.getPayload(
	      { id, guild_id: data.guild_id ?? guild.id },
	      guild.scheduledEvents,
	      id,
	      Partials.GuildScheduledEvent,
	    );
	  }

	  getThreadMember(id, manager) {
	    return this.getPayload({ user_id: id }, manager, id, Partials.ThreadMember, false);
	  }

	  spreadInjectedData(data) {
	    return Object.fromEntries(Object.getOwnPropertySymbols(data).map(symbol => [symbol, data[symbol]]));
	  }
	}

	Action = GenericAction;
	return Action;
}

var Events;
var hasRequiredEvents;

function requireEvents () {
	if (hasRequiredEvents) return Events;
	hasRequiredEvents = 1;

	/**
	 * @typedef {Object} Events
	 * @property {string} ApplicationCommandPermissionsUpdate applicationCommandPermissionsUpdate
	 * @property {string} AutoModerationActionExecution autoModerationActionExecution
	 * @property {string} AutoModerationRuleCreate autoModerationRuleCreate
	 * @property {string} AutoModerationRuleDelete autoModerationRuleDelete
	 * @property {string} AutoModerationRuleUpdate autoModerationRuleUpdate
	 * @property {string} CacheSweep cacheSweep
	 * @property {string} ChannelCreate channelCreate
	 * @property {string} ChannelDelete channelDelete
	 * @property {string} ChannelPinsUpdate channelPinsUpdate
	 * @property {string} ChannelUpdate channelUpdate
	 * @property {string} ClientReady ready
	 * @property {string} Debug debug
	 * @property {string} EntitlementCreate entitlementCreate
	 * @property {string} EntitlementUpdate entitlementUpdate
	 * @property {string} EntitlementDelete entitlementDelete
	 * @property {string} Error error
	 * @property {string} GuildAuditLogEntryCreate guildAuditLogEntryCreate
	 * @property {string} GuildAvailable guildAvailable
	 * @property {string} GuildBanAdd guildBanAdd
	 * @property {string} GuildBanRemove guildBanRemove
	 * @property {string} GuildCreate guildCreate
	 * @property {string} GuildDelete guildDelete
	 * @property {string} GuildEmojiCreate emojiCreate
	 * @property {string} GuildEmojiDelete emojiDelete
	 * @property {string} GuildEmojiUpdate emojiUpdate
	 * @property {string} GuildIntegrationsUpdate guildIntegrationsUpdate
	 * @property {string} GuildMemberAdd guildMemberAdd
	 * @property {string} GuildMemberAvailable guildMemberAvailable
	 * @property {string} GuildMemberRemove guildMemberRemove
	 * @property {string} GuildMembersChunk guildMembersChunk
	 * @property {string} GuildMemberUpdate guildMemberUpdate
	 * @property {string} GuildRoleCreate roleCreate
	 * @property {string} GuildRoleDelete roleDelete
	 * @property {string} GuildRoleUpdate roleUpdate
	 * @property {string} GuildScheduledEventCreate guildScheduledEventCreate
	 * @property {string} GuildScheduledEventDelete guildScheduledEventDelete
	 * @property {string} GuildScheduledEventUpdate guildScheduledEventUpdate
	 * @property {string} GuildScheduledEventUserAdd guildScheduledEventUserAdd
	 * @property {string} GuildScheduledEventUserRemove guildScheduledEventUserRemove
	 * @property {string} GuildStickerCreate stickerCreate
	 * @property {string} GuildStickerDelete stickerDelete
	 * @property {string} GuildStickerUpdate stickerUpdate
	 * @property {string} GuildUnavailable guildUnavailable
	 * @property {string} GuildUpdate guildUpdate
	 * @property {string} InteractionCreate interactionCreate
	 * @property {string} Invalidated invalidated
	 * @property {string} InviteCreate inviteCreate
	 * @property {string} InviteDelete inviteDelete
	 * @property {string} MessageBulkDelete messageDeleteBulk
	 * @property {string} MessageCreate messageCreate
	 * @property {string} MessageDelete messageDelete
	 * @property {string} MessagePollVoteAdd messagePollVoteAdd
	 * @property {string} MessagePollVoteRemove messagePollVoteRemove
	 * @property {string} MessageReactionAdd messageReactionAdd
	 * @property {string} MessageReactionRemove messageReactionRemove
	 * @property {string} MessageReactionRemoveAll messageReactionRemoveAll
	 * @property {string} MessageReactionRemoveEmoji messageReactionRemoveEmoji
	 * @property {string} MessageUpdate messageUpdate
	 * @property {string} PresenceUpdate presenceUpdate
	 * @property {string} ShardDisconnect shardDisconnect
	 * @property {string} ShardError shardError
	 * @property {string} ShardReady shardReady
	 * @property {string} ShardReconnecting shardReconnecting
	 * @property {string} ShardResume shardResume
	 * @property {string} StageInstanceCreate stageInstanceCreate
	 * @property {string} StageInstanceDelete stageInstanceDelete
	 * @property {string} StageInstanceUpdate stageInstanceUpdate
	 * @property {string} ThreadCreate threadCreate
	 * @property {string} ThreadDelete threadDelete
	 * @property {string} ThreadListSync threadListSync
	 * @property {string} ThreadMembersUpdate threadMembersUpdate
	 * @property {string} ThreadMemberUpdate threadMemberUpdate
	 * @property {string} ThreadUpdate threadUpdate
	 * @property {string} TypingStart typingStart
	 * @property {string} UserUpdate userUpdate
	 * @property {string} VoiceServerUpdate voiceServerUpdate
	 * @property {string} VoiceStateUpdate voiceStateUpdate
	 * @property {string} Warn warn
	 * @property {string} WebhooksUpdate webhookUpdate
	 */

	// JSDoc for IntelliSense purposes
	/**
	 * @type {Events}
	 * @ignore
	 */
	Events = {
	  ApplicationCommandPermissionsUpdate: 'applicationCommandPermissionsUpdate',
	  AutoModerationActionExecution: 'autoModerationActionExecution',
	  AutoModerationRuleCreate: 'autoModerationRuleCreate',
	  AutoModerationRuleDelete: 'autoModerationRuleDelete',
	  AutoModerationRuleUpdate: 'autoModerationRuleUpdate',
	  CacheSweep: 'cacheSweep',
	  ChannelCreate: 'channelCreate',
	  ChannelDelete: 'channelDelete',
	  ChannelPinsUpdate: 'channelPinsUpdate',
	  ChannelUpdate: 'channelUpdate',
	  ClientReady: 'ready',
	  Debug: 'debug',
	  EntitlementCreate: 'entitlementCreate',
	  EntitlementUpdate: 'entitlementUpdate',
	  EntitlementDelete: 'entitlementDelete',
	  Error: 'error',
	  GuildAuditLogEntryCreate: 'guildAuditLogEntryCreate',
	  GuildAvailable: 'guildAvailable',
	  GuildBanAdd: 'guildBanAdd',
	  GuildBanRemove: 'guildBanRemove',
	  GuildCreate: 'guildCreate',
	  GuildDelete: 'guildDelete',
	  GuildEmojiCreate: 'emojiCreate',
	  GuildEmojiDelete: 'emojiDelete',
	  GuildEmojiUpdate: 'emojiUpdate',
	  GuildIntegrationsUpdate: 'guildIntegrationsUpdate',
	  GuildMemberAdd: 'guildMemberAdd',
	  GuildMemberAvailable: 'guildMemberAvailable',
	  GuildMemberRemove: 'guildMemberRemove',
	  GuildMembersChunk: 'guildMembersChunk',
	  GuildMemberUpdate: 'guildMemberUpdate',
	  GuildRoleCreate: 'roleCreate',
	  GuildRoleDelete: 'roleDelete',
	  GuildRoleUpdate: 'roleUpdate',
	  GuildScheduledEventCreate: 'guildScheduledEventCreate',
	  GuildScheduledEventDelete: 'guildScheduledEventDelete',
	  GuildScheduledEventUpdate: 'guildScheduledEventUpdate',
	  GuildScheduledEventUserAdd: 'guildScheduledEventUserAdd',
	  GuildScheduledEventUserRemove: 'guildScheduledEventUserRemove',
	  GuildStickerCreate: 'stickerCreate',
	  GuildStickerDelete: 'stickerDelete',
	  GuildStickerUpdate: 'stickerUpdate',
	  GuildUnavailable: 'guildUnavailable',
	  GuildUpdate: 'guildUpdate',
	  InteractionCreate: 'interactionCreate',
	  Invalidated: 'invalidated',
	  InviteCreate: 'inviteCreate',
	  InviteDelete: 'inviteDelete',
	  MessageBulkDelete: 'messageDeleteBulk',
	  MessageCreate: 'messageCreate',
	  MessageDelete: 'messageDelete',
	  MessagePollVoteAdd: 'messagePollVoteAdd',
	  MessagePollVoteRemove: 'messagePollVoteRemove',
	  MessageReactionAdd: 'messageReactionAdd',
	  MessageReactionRemove: 'messageReactionRemove',
	  MessageReactionRemoveAll: 'messageReactionRemoveAll',
	  MessageReactionRemoveEmoji: 'messageReactionRemoveEmoji',
	  MessageUpdate: 'messageUpdate',
	  PresenceUpdate: 'presenceUpdate',
	  Raw: 'raw',
	  ShardDisconnect: 'shardDisconnect',
	  ShardError: 'shardError',
	  ShardReady: 'shardReady',
	  ShardReconnecting: 'shardReconnecting',
	  ShardResume: 'shardResume',
	  StageInstanceCreate: 'stageInstanceCreate',
	  StageInstanceDelete: 'stageInstanceDelete',
	  StageInstanceUpdate: 'stageInstanceUpdate',
	  ThreadCreate: 'threadCreate',
	  ThreadDelete: 'threadDelete',
	  ThreadListSync: 'threadListSync',
	  ThreadMembersUpdate: 'threadMembersUpdate',
	  ThreadMemberUpdate: 'threadMemberUpdate',
	  ThreadUpdate: 'threadUpdate',
	  TypingStart: 'typingStart',
	  UserUpdate: 'userUpdate',
	  VoiceServerUpdate: 'voiceServerUpdate',
	  VoiceStateUpdate: 'voiceStateUpdate',
	  Warn: 'warn',
	  WebhooksUpdate: 'webhookUpdate',
	};
	return Events;
}

var ApplicationCommandPermissionsUpdate;
var hasRequiredApplicationCommandPermissionsUpdate;

function requireApplicationCommandPermissionsUpdate () {
	if (hasRequiredApplicationCommandPermissionsUpdate) return ApplicationCommandPermissionsUpdate;
	hasRequiredApplicationCommandPermissionsUpdate = 1;

	const Action = requireAction();
	const Events = requireEvents();

	/**
	 * The data received in the {@link Client#event:applicationCommandPermissionsUpdate} event
	 * @typedef {Object} ApplicationCommandPermissionsUpdateData
	 * @property {Snowflake} id The id of the command or global entity that was updated
	 * @property {Snowflake} guildId The id of the guild in which permissions were updated
	 * @property {Snowflake} applicationId The id of the application that owns the command or entity being updated
	 * @property {ApplicationCommandPermissions[]} permissions The updated permissions
	 */

	class ApplicationCommandPermissionsUpdateAction extends Action {
	  handle(data) {
	    const client = this.client;
	    /**
	     * Emitted whenever permissions for an application command in a guild were updated.
	     * <warn>This includes permission updates for other applications in addition to the logged in client,
	     * check `data.applicationId` to verify which application the update is for</warn>
	     * @event Client#applicationCommandPermissionsUpdate
	     * @param {ApplicationCommandPermissionsUpdateData} data The updated permissions
	     */
	    client.emit(Events.ApplicationCommandPermissionsUpdate, {
	      permissions: data.permissions,
	      id: data.id,
	      guildId: data.guild_id,
	      applicationId: data.application_id,
	    });
	  }
	}

	ApplicationCommandPermissionsUpdate = ApplicationCommandPermissionsUpdateAction;
	return ApplicationCommandPermissionsUpdate;
}

var AutoModerationActionExecution_1$1;
var hasRequiredAutoModerationActionExecution$1;

function requireAutoModerationActionExecution$1 () {
	if (hasRequiredAutoModerationActionExecution$1) return AutoModerationActionExecution_1$1;
	hasRequiredAutoModerationActionExecution$1 = 1;

	const { _transformAPIAutoModerationAction } = requireTransformers();

	/**
	 * Represents the structure of an executed action when an {@link AutoModerationRule} is triggered.
	 */
	class AutoModerationActionExecution {
	  constructor(data, guild) {
	    /**
	     * The guild where this action was executed from.
	     * @type {Guild}
	     */
	    this.guild = guild;

	    /**
	     * The action that was executed.
	     * @type {AutoModerationAction}
	     */
	    this.action = _transformAPIAutoModerationAction(data.action);

	    /**
	     * The id of the auto moderation rule this action belongs to.
	     * @type {Snowflake}
	     */
	    this.ruleId = data.rule_id;

	    /**
	     * The trigger type of the auto moderation rule which was triggered.
	     * @type {AutoModerationRuleTriggerType}
	     */
	    this.ruleTriggerType = data.rule_trigger_type;

	    /**
	     * The id of the user that triggered this action.
	     * @type {Snowflake}
	     */
	    this.userId = data.user_id;

	    /**
	     * The id of the channel where this action was triggered from.
	     * @type {?Snowflake}
	     */
	    this.channelId = data.channel_id ?? null;

	    /**
	     * The id of the message that triggered this action.
	     * <info>This will not be present if the message was blocked or the content was not part of any message.</info>
	     * @type {?Snowflake}
	     */
	    this.messageId = data.message_id ?? null;

	    /**
	     * The id of any system auto moderation messages posted as a result of this action.
	     * @type {?Snowflake}
	     */
	    this.alertSystemMessageId = data.alert_system_message_id ?? null;

	    /**
	     * The content that triggered this action.
	     * <info>This property requires the {@link GatewayIntentBits.MessageContent} privileged gateway intent.</info>
	     * @type {string}
	     */
	    this.content = data.content;

	    /**
	     * The word or phrase configured in the rule that triggered this action.
	     * @type {?string}
	     */
	    this.matchedKeyword = data.matched_keyword ?? null;

	    /**
	     * The substring in content that triggered this action.
	     * @type {?string}
	     */
	    this.matchedContent = data.matched_content ?? null;
	  }

	  /**
	   * The auto moderation rule this action belongs to.
	   * @type {?AutoModerationRule}
	   * @readonly
	   */
	  get autoModerationRule() {
	    return this.guild.autoModerationRules.cache.get(this.ruleId) ?? null;
	  }

	  /**
	   * The channel where this action was triggered from.
	   * @type {?(GuildTextBasedChannel|ForumChannel|MediaChannel)}
	   * @readonly
	   */
	  get channel() {
	    return this.guild.channels.cache.get(this.channelId) ?? null;
	  }

	  /**
	   * The user that triggered this action.
	   * @type {?User}
	   * @readonly
	   */
	  get user() {
	    return this.guild.client.users.cache.get(this.userId) ?? null;
	  }

	  /**
	   * The guild member that triggered this action.
	   * @type {?GuildMember}
	   * @readonly
	   */
	  get member() {
	    return this.guild.members.cache.get(this.userId) ?? null;
	  }
	}

	AutoModerationActionExecution_1$1 = AutoModerationActionExecution;
	return AutoModerationActionExecution_1$1;
}

var AutoModerationActionExecution_1;
var hasRequiredAutoModerationActionExecution;

function requireAutoModerationActionExecution () {
	if (hasRequiredAutoModerationActionExecution) return AutoModerationActionExecution_1;
	hasRequiredAutoModerationActionExecution = 1;

	const Action = requireAction();
	const AutoModerationActionExecution = requireAutoModerationActionExecution$1();
	const Events = requireEvents();

	class AutoModerationActionExecutionAction extends Action {
	  handle(data) {
	    const { client } = this;
	    const guild = client.guilds.cache.get(data.guild_id);

	    if (guild) {
	      /**
	       * Emitted whenever an auto moderation rule is triggered.
	       * <info>This event requires the {@link PermissionFlagsBits.ManageGuild} permission.</info>
	       * @event Client#autoModerationActionExecution
	       * @param {AutoModerationActionExecution} autoModerationActionExecution The data of the execution
	       */
	      client.emit(Events.AutoModerationActionExecution, new AutoModerationActionExecution(data, guild));
	    }

	    return {};
	  }
	}

	AutoModerationActionExecution_1 = AutoModerationActionExecutionAction;
	return AutoModerationActionExecution_1;
}

var AutoModerationRuleCreate;
var hasRequiredAutoModerationRuleCreate;

function requireAutoModerationRuleCreate () {
	if (hasRequiredAutoModerationRuleCreate) return AutoModerationRuleCreate;
	hasRequiredAutoModerationRuleCreate = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class AutoModerationRuleCreateAction extends Action {
	  handle(data) {
	    const { client } = this;
	    const guild = client.guilds.cache.get(data.guild_id);

	    if (guild) {
	      const autoModerationRule = guild.autoModerationRules._add(data);

	      /**
	       * Emitted whenever an auto moderation rule is created.
	       * <info>This event requires the {@link PermissionFlagsBits.ManageGuild} permission.</info>
	       * @event Client#autoModerationRuleCreate
	       * @param {AutoModerationRule} autoModerationRule The created auto moderation rule
	       */
	      client.emit(Events.AutoModerationRuleCreate, autoModerationRule);
	    }

	    return {};
	  }
	}

	AutoModerationRuleCreate = AutoModerationRuleCreateAction;
	return AutoModerationRuleCreate;
}

var AutoModerationRuleDelete;
var hasRequiredAutoModerationRuleDelete;

function requireAutoModerationRuleDelete () {
	if (hasRequiredAutoModerationRuleDelete) return AutoModerationRuleDelete;
	hasRequiredAutoModerationRuleDelete = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class AutoModerationRuleDeleteAction extends Action {
	  handle(data) {
	    const { client } = this;
	    const guild = client.guilds.cache.get(data.guild_id);

	    if (guild) {
	      const autoModerationRule = guild.autoModerationRules.cache.get(data.id);

	      if (autoModerationRule) {
	        guild.autoModerationRules.cache.delete(autoModerationRule.id);

	        /**
	         * Emitted whenever an auto moderation rule is deleted.
	         * <info>This event requires the {@link PermissionFlagsBits.ManageGuild} permission.</info>
	         * @event Client#autoModerationRuleDelete
	         * @param {AutoModerationRule} autoModerationRule The deleted auto moderation rule
	         */
	        client.emit(Events.AutoModerationRuleDelete, autoModerationRule);
	      }
	    }

	    return {};
	  }
	}

	AutoModerationRuleDelete = AutoModerationRuleDeleteAction;
	return AutoModerationRuleDelete;
}

var AutoModerationRuleUpdate;
var hasRequiredAutoModerationRuleUpdate;

function requireAutoModerationRuleUpdate () {
	if (hasRequiredAutoModerationRuleUpdate) return AutoModerationRuleUpdate;
	hasRequiredAutoModerationRuleUpdate = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class AutoModerationRuleUpdateAction extends Action {
	  handle(data) {
	    const { client } = this;
	    const guild = client.guilds.cache.get(data.guild_id);

	    if (guild) {
	      const oldAutoModerationRule = guild.autoModerationRules.cache.get(data.id)?._clone() ?? null;
	      const newAutoModerationRule = guild.autoModerationRules._add(data);

	      /**
	       * Emitted whenever an auto moderation rule gets updated.
	       * <info>This event requires the {@link PermissionFlagsBits.ManageGuild} permission.</info>
	       * @event Client#autoModerationRuleUpdate
	       * @param {?AutoModerationRule} oldAutoModerationRule The auto moderation rule before the update
	       * @param {AutoModerationRule} newAutoModerationRule The auto moderation rule after the update
	       */
	      client.emit(Events.AutoModerationRuleUpdate, oldAutoModerationRule, newAutoModerationRule);
	    }

	    return {};
	  }
	}

	AutoModerationRuleUpdate = AutoModerationRuleUpdateAction;
	return AutoModerationRuleUpdate;
}

var ChannelCreate;
var hasRequiredChannelCreate;

function requireChannelCreate () {
	if (hasRequiredChannelCreate) return ChannelCreate;
	hasRequiredChannelCreate = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class ChannelCreateAction extends Action {
	  handle(data) {
	    const client = this.client;
	    const existing = client.channels.cache.has(data.id);
	    const channel = client.channels._add(data);
	    if (!existing && channel) {
	      /**
	       * Emitted whenever a guild channel is created.
	       * @event Client#channelCreate
	       * @param {GuildChannel} channel The channel that was created
	       */
	      client.emit(Events.ChannelCreate, channel);
	    }
	    return { channel };
	  }
	}

	ChannelCreate = ChannelCreateAction;
	return ChannelCreate;
}

var ChannelDelete;
var hasRequiredChannelDelete;

function requireChannelDelete () {
	if (hasRequiredChannelDelete) return ChannelDelete;
	hasRequiredChannelDelete = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class ChannelDeleteAction extends Action {
	  handle(data) {
	    const client = this.client;
	    const channel = client.channels.cache.get(data.id);

	    if (channel) {
	      client.channels._remove(channel.id);
	      /**
	       * Emitted whenever a channel is deleted.
	       * @event Client#channelDelete
	       * @param {DMChannel|GuildChannel} channel The channel that was deleted
	       */
	      client.emit(Events.ChannelDelete, channel);
	    }
	  }
	}

	ChannelDelete = ChannelDeleteAction;
	return ChannelDelete;
}

var CategoryChannelChildManager_1;
var hasRequiredCategoryChannelChildManager;

function requireCategoryChannelChildManager () {
	if (hasRequiredCategoryChannelChildManager) return CategoryChannelChildManager_1;
	hasRequiredCategoryChannelChildManager = 1;

	const DataManager = requireDataManager();
	const GuildChannel = requireGuildChannel();

	/**
	 * Manages API methods for CategoryChannels' children.
	 * @extends {DataManager}
	 */
	class CategoryChannelChildManager extends DataManager {
	  constructor(channel) {
	    super(channel.client, GuildChannel);
	    /**
	     * The category channel this manager belongs to
	     * @type {CategoryChannel}
	     */
	    this.channel = channel;
	  }

	  /**
	   * The channels that are a part of this category
	   * @type {Collection<Snowflake, GuildChannel>}
	   * @readonly
	   */
	  get cache() {
	    return this.guild.channels.cache.filter(channel => channel.parentId === this.channel.id);
	  }

	  /**
	   * The guild this manager belongs to
	   * @type {Guild}
	   * @readonly
	   */
	  get guild() {
	    return this.channel.guild;
	  }

	  /**
	   * Options for creating a channel using {@link CategoryChannelChildManager#create}.
	   * @typedef {Object} CategoryCreateChannelOptions
	   * @property {string} name The name for the new channel
	   * @property {ChannelType} [type=ChannelType.GuildText] The type of the new channel.
	   * @property {string} [topic] The topic for the new channel
	   * @property {boolean} [nsfw] Whether the new channel is NSFW
	   * @property {number} [bitrate] Bitrate of the new channel in bits (only voice)
	   * @property {number} [userLimit] Maximum amount of users allowed in the new channel (only voice)
	   * @property {OverwriteResolvable[]|Collection<Snowflake, OverwriteResolvable>} [permissionOverwrites]
	   * Permission overwrites of the new channel
	   * @property {number} [position] Position of the new channel
	   * @property {number} [rateLimitPerUser] The rate limit per user (slowmode) for the new channel in seconds
	   * @property {string} [rtcRegion] The specific region of the new channel.
	   * @property {VideoQualityMode} [videoQualityMode] The camera video quality mode of the voice channel
	   * @property {number} [defaultThreadRateLimitPerUser] The initial rate limit per user (slowmode)
	   * to set on newly created threads in a channel.
	   * @property {GuildForumTagData[]} [availableTags] The tags that can be used in this channel (forum only).
	   * @property {DefaultReactionEmoji} [defaultReactionEmoji]
	   * The emoji to show in the add reaction button on a thread in a guild forum channel.
	   * @property {ThreadAutoArchiveDuration} [defaultAutoArchiveDuration]
	   * The default auto archive duration for all new threads in this channel
	   * @property {SortOrderType} [defaultSortOrder] The default sort order mode used to order posts (forum only).
	   * @property {ForumLayoutType} [defaultForumLayout] The default layout used to display posts (forum only).
	   * @property {string} [reason] Reason for creating the new channel
	   */

	  /**
	   * Creates a new channel within this category.
	   * <info>You cannot create a channel of type {@link ChannelType.GuildCategory} inside a CategoryChannel.</info>
	   * @param {CategoryCreateChannelOptions} options Options for creating the new channel
	   * @returns {Promise<GuildChannel>}
	   */
	  create(options) {
	    return this.guild.channels.create({
	      ...options,
	      parent: this.channel.id,
	    });
	  }
	}

	CategoryChannelChildManager_1 = CategoryChannelChildManager;
	return CategoryChannelChildManager_1;
}

var CategoryChannel_1;
var hasRequiredCategoryChannel;

function requireCategoryChannel () {
	if (hasRequiredCategoryChannel) return CategoryChannel_1;
	hasRequiredCategoryChannel = 1;

	const GuildChannel = requireGuildChannel();
	const CategoryChannelChildManager = requireCategoryChannelChildManager();

	/**
	 * Represents a guild category channel on Discord.
	 * @extends {GuildChannel}
	 */
	class CategoryChannel extends GuildChannel {
	  /**
	   * The id of the parent of this channel.
	   * @name CategoryChannel#parentId
	   * @type {null}
	   */

	  /**
	   * The parent of this channel.
	   * @name CategoryChannel#parent
	   * @type {null}
	   * @readonly
	   */

	  /**
	   * Sets the category parent of this channel.
	   * <warn>It is not possible to set the parent of a CategoryChannel.</warn>
	   * @method setParent
	   * @memberof CategoryChannel
	   * @instance
	   * @param {?CategoryChannelResolvable} channel The channel to set as parent
	   * @param {SetParentOptions} [options={}] The options for setting the parent
	   * @returns {Promise<GuildChannel>}
	   */

	  /**
	   * A manager of the channels belonging to this category
	   * @type {CategoryChannelChildManager}
	   * @readonly
	   */
	  get children() {
	    return new CategoryChannelChildManager(this);
	  }
	}

	CategoryChannel_1 = CategoryChannel;
	return CategoryChannel_1;
}

var Collector_1;
var hasRequiredCollector;

function requireCollector () {
	if (hasRequiredCollector) return Collector_1;
	hasRequiredCollector = 1;

	const EventEmitter = require$$0$b;
	const { setTimeout, clearTimeout } = require$$0$e;
	const { Collection } = requireDist$3();
	const { DiscordjsTypeError, ErrorCodes } = requireErrors$1();
	const { flatten } = requireUtil();

	/**
	 * Filter to be applied to the collector.
	 * @typedef {Function} CollectorFilter
	 * @param {...*} args Any arguments received by the listener
	 * @param {Collection} collection The items collected by this collector
	 * @returns {boolean|Promise<boolean>}
	 */

	/**
	 * Options to be applied to the collector.
	 * @typedef {Object} CollectorOptions
	 * @property {CollectorFilter} [filter] The filter applied to this collector
	 * @property {number} [time] How long to run the collector for in milliseconds
	 * @property {number} [idle] How long to stop the collector after inactivity in milliseconds
	 * @property {boolean} [dispose=false] Whether to dispose data when it's deleted
	 */

	/**
	 * Abstract class for defining a new Collector.
	 * @extends {EventEmitter}
	 * @abstract
	 */
	class Collector extends EventEmitter {
	  constructor(client, options = {}) {
	    super();

	    /**
	     * The client that instantiated this Collector
	     * @name Collector#client
	     * @type {Client}
	     * @readonly
	     */
	    Object.defineProperty(this, 'client', { value: client });

	    /**
	     * The filter applied to this collector
	     * @type {CollectorFilter}
	     * @returns {boolean|Promise<boolean>}
	     */
	    this.filter = options.filter ?? (() => true);

	    /**
	     * The options of this collector
	     * @type {CollectorOptions}
	     */
	    this.options = options;

	    /**
	     * The items collected by this collector
	     * @type {Collection}
	     */
	    this.collected = new Collection();

	    /**
	     * Whether this collector has finished collecting
	     * @type {boolean}
	     */
	    this.ended = false;

	    /**
	     * Timeout for cleanup
	     * @type {?Timeout}
	     * @private
	     */
	    this._timeout = null;

	    /**
	     * Timeout for cleanup due to inactivity
	     * @type {?Timeout}
	     * @private
	     */
	    this._idletimeout = null;

	    /**
	     * The reason the collector ended
	     * @type {?string}
	     * @private
	     */
	    this._endReason = null;

	    if (typeof this.filter !== 'function') {
	      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'options.filter', 'function');
	    }

	    this.handleCollect = this.handleCollect.bind(this);
	    this.handleDispose = this.handleDispose.bind(this);

	    if (options.time) this._timeout = setTimeout(() => this.stop('time'), options.time).unref();
	    if (options.idle) this._idletimeout = setTimeout(() => this.stop('idle'), options.idle).unref();

	    /**
	     * The timestamp at which this collector last collected an item
	     * @type {?number}
	     */
	    this.lastCollectedTimestamp = null;
	  }

	  /**
	   * The Date at which this collector last collected an item
	   * @type {?Date}
	   */
	  get lastCollectedAt() {
	    return this.lastCollectedTimestamp && new Date(this.lastCollectedTimestamp);
	  }

	  /**
	   * Call this to handle an event as a collectable element. Accepts any event data as parameters.
	   * @param {...*} args The arguments emitted by the listener
	   * @returns {Promise<void>}
	   * @emits Collector#collect
	   */
	  async handleCollect(...args) {
	    const collectedId = await this.collect(...args);

	    if (collectedId) {
	      const filterResult = await this.filter(...args, this.collected);
	      if (filterResult) {
	        this.collected.set(collectedId, args[0]);

	        /**
	         * Emitted whenever an element is collected.
	         * @event Collector#collect
	         * @param {...*} args The arguments emitted by the listener
	         */
	        this.emit('collect', ...args);

	        this.lastCollectedTimestamp = Date.now();
	        if (this._idletimeout) {
	          clearTimeout(this._idletimeout);
	          this._idletimeout = setTimeout(() => this.stop('idle'), this.options.idle).unref();
	        }
	      } else {
	        /**
	         * Emitted whenever an element is not collected by the collector.
	         * @event Collector#ignore
	         * @param {...*} args The arguments emitted by the listener
	         */
	        this.emit('ignore', ...args);
	      }
	    }
	    this.checkEnd();
	  }

	  /**
	   * Call this to remove an element from the collection. Accepts any event data as parameters.
	   * @param {...*} args The arguments emitted by the listener
	   * @returns {Promise<void>}
	   * @emits Collector#dispose
	   */
	  async handleDispose(...args) {
	    if (!this.options.dispose) return;

	    const dispose = this.dispose(...args);
	    if (!dispose || !(await this.filter(...args)) || !this.collected.has(dispose)) return;
	    this.collected.delete(dispose);

	    /**
	     * Emitted whenever an element is disposed of.
	     * @event Collector#dispose
	     * @param {...*} args The arguments emitted by the listener
	     */
	    this.emit('dispose', ...args);
	    this.checkEnd();
	  }

	  /**
	   * Returns a promise that resolves with the next collected element;
	   * rejects with collected elements if the collector finishes without receiving a next element
	   * @type {Promise}
	   * @readonly
	   */
	  get next() {
	    return new Promise((resolve, reject) => {
	      if (this.ended) {
	        reject(this.collected);
	        return;
	      }

	      const cleanup = () => {
	        this.removeListener('collect', onCollect);
	        this.removeListener('end', onEnd);
	      };

	      const onCollect = item => {
	        cleanup();
	        resolve(item);
	      };

	      const onEnd = () => {
	        cleanup();
	        reject(this.collected);
	      };

	      this.on('collect', onCollect);
	      this.on('end', onEnd);
	    });
	  }

	  /**
	   * Stops this collector and emits the `end` event.
	   * @param {string} [reason='user'] The reason this collector is ending
	   * @emits Collector#end
	   */
	  stop(reason = 'user') {
	    if (this.ended) return;

	    if (this._timeout) {
	      clearTimeout(this._timeout);
	      this._timeout = null;
	    }
	    if (this._idletimeout) {
	      clearTimeout(this._idletimeout);
	      this._idletimeout = null;
	    }

	    this._endReason = reason;
	    this.ended = true;

	    /**
	     * Emitted when the collector is finished collecting.
	     * @event Collector#end
	     * @param {Collection} collected The elements collected by the collector
	     * @param {string} reason The reason the collector ended
	     */
	    this.emit('end', this.collected, reason);
	  }

	  /**
	   * Options used to reset the timeout and idle timer of a {@link Collector}.
	   * @typedef {Object} CollectorResetTimerOptions
	   * @property {number} [time] How long to run the collector for (in milliseconds)
	   * @property {number} [idle] How long to wait to stop the collector after inactivity (in milliseconds)
	   */

	  /**
	   * Resets the collector's timeout and idle timer.
	   * @param {CollectorResetTimerOptions} [options] Options for resetting
	   */
	  resetTimer({ time, idle } = {}) {
	    if (this._timeout) {
	      clearTimeout(this._timeout);
	      this._timeout = setTimeout(() => this.stop('time'), time ?? this.options.time).unref();
	    }
	    if (this._idletimeout) {
	      clearTimeout(this._idletimeout);
	      this._idletimeout = setTimeout(() => this.stop('idle'), idle ?? this.options.idle).unref();
	    }
	  }

	  /**
	   * Checks whether the collector should end, and if so, ends it.
	   * @returns {boolean} Whether the collector ended or not
	   */
	  checkEnd() {
	    const reason = this.endReason;
	    if (reason) this.stop(reason);
	    return Boolean(reason);
	  }

	  /**
	   * Allows collectors to be consumed with for-await-of loops
	   * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of}
	   */
	  async *[Symbol.asyncIterator]() {
	    const queue = [];
	    const onCollect = (...item) => queue.push(item);
	    this.on('collect', onCollect);

	    try {
	      while (queue.length || !this.ended) {
	        if (queue.length) {
	          yield queue.shift();
	        } else {
	          // eslint-disable-next-line no-await-in-loop
	          await new Promise(resolve => {
	            const tick = () => {
	              this.removeListener('collect', tick);
	              this.removeListener('end', tick);
	              return resolve();
	            };
	            this.on('collect', tick);
	            this.on('end', tick);
	          });
	        }
	      }
	    } finally {
	      this.removeListener('collect', onCollect);
	    }
	  }

	  toJSON() {
	    return flatten(this);
	  }

	  /* eslint-disable no-empty-function */
	  /**
	   * The reason this collector has ended with, or null if it hasn't ended yet
	   * @type {?string}
	   * @readonly
	   */
	  get endReason() {
	    return this._endReason;
	  }

	  /**
	   * Handles incoming events from the `handleCollect` function. Returns null if the event should not
	   * be collected, or returns an object describing the data that should be stored.
	   * @see Collector#handleCollect
	   * @param {...*} args Any args the event listener emits
	   * @returns {?(*|Promise<?*>)} Data to insert into collection, if any
	   * @abstract
	   */
	  collect() {}

	  /**
	   * Handles incoming events from the `handleDispose`. Returns null if the event should not
	   * be disposed, or returns the key that should be removed.
	   * @see Collector#handleDispose
	   * @param {...*} args Any args the event listener emits
	   * @returns {?*} Key to remove from the collection, if any
	   * @abstract
	   */
	  dispose() {}
	  /* eslint-enable no-empty-function */
	}

	Collector_1 = Collector;
	return Collector_1;
}

var InteractionCollector_1;
var hasRequiredInteractionCollector;

function requireInteractionCollector () {
	if (hasRequiredInteractionCollector) return InteractionCollector_1;
	hasRequiredInteractionCollector = 1;

	const { Collection } = requireDist$3();
	const Collector = requireCollector();
	const Events = requireEvents();

	/**
	 * @typedef {CollectorOptions} InteractionCollectorOptions
	 * @property {TextBasedChannelsResolvable} [channel] The channel to listen to interactions from
	 * @property {ComponentType} [componentType] The type of component to listen for
	 * @property {GuildResolvable} [guild] The guild to listen to interactions from
	 * @property {InteractionType} [interactionType] The type of interaction to listen for
	 * @property {number} [max] The maximum total amount of interactions to collect
	 * @property {number} [maxComponents] The maximum number of components to collect
	 * @property {number} [maxUsers] The maximum number of users to interact
	 * @property {Message|APIMessage} [message] The message to listen to interactions from
	 * @property {InteractionResponse} [interactionResponse] The interaction response to listen
	 * to message component interactions from
	 */

	/**
	 * Collects interactions.
	 * Will automatically stop if the message ({@link Client#event:messageDelete messageDelete} or
	 * {@link Client#event:messageDeleteBulk messageDeleteBulk}),
	 * channel ({@link Client#event:channelDelete channelDelete}), or
	 * guild ({@link Client#event:guildDelete guildDelete}) is deleted.
	 * <info>Interaction collectors that do not specify `time` or `idle` may be prone to always running.
	 * Ensure your interaction collectors end via either of these options or manual cancellation.</info>
	 * @extends {Collector}
	 */
	class InteractionCollector extends Collector {
	  /**
	   * @param {Client} client The client on which to collect interactions
	   * @param {InteractionCollectorOptions} [options={}] The options to apply to this collector
	   */
	  constructor(client, options = {}) {
	    super(client, options);

	    /**
	     * The message from which to collect interactions, if provided
	     * @type {?Snowflake}
	     */
	    this.messageId = options.message?.id ?? options.interactionResponse?.interaction.message?.id ?? null;

	    /**
	     * The message interaction id from which to collect interactions, if provided
	     * @type {?Snowflake}
	     */
	    this.messageInteractionId = options.interactionResponse?.id ?? null;

	    /**
	     * The channel from which to collect interactions, if provided
	     * @type {?Snowflake}
	     */
	    this.channelId =
	      options.interactionResponse?.interaction.channelId ??
	      options.message?.channelId ??
	      options.message?.channel_id ??
	      this.client.channels.resolveId(options.channel);

	    /**
	     * The guild from which to collect interactions, if provided
	     * @type {?Snowflake}
	     */
	    this.guildId =
	      options.interactionResponse?.interaction.guildId ??
	      options.message?.guildId ??
	      options.message?.guild_id ??
	      this.client.guilds.resolveId(options.channel?.guild) ??
	      this.client.guilds.resolveId(options.guild);

	    /**
	     * The type of interaction to collect
	     * @type {?InteractionType}
	     */
	    this.interactionType = options.interactionType ?? null;

	    /**
	     * The type of component to collect
	     * @type {?ComponentType}
	     */
	    this.componentType = options.componentType ?? null;

	    /**
	     * The users that have interacted with this collector
	     * @type {Collection<Snowflake, User>}
	     */
	    this.users = new Collection();

	    /**
	     * The total number of interactions collected
	     * @type {number}
	     */
	    this.total = 0;

	    this.client.incrementMaxListeners();

	    const bulkDeleteListener = messages => {
	      if (messages.has(this.messageId)) this.stop('messageDelete');
	    };

	    if (this.messageId || this.messageInteractionId) {
	      this._handleMessageDeletion = this._handleMessageDeletion.bind(this);
	      this.client.on(Events.MessageDelete, this._handleMessageDeletion);
	      this.client.on(Events.MessageBulkDelete, bulkDeleteListener);
	    }

	    if (this.channelId) {
	      this._handleChannelDeletion = this._handleChannelDeletion.bind(this);
	      this._handleThreadDeletion = this._handleThreadDeletion.bind(this);
	      this.client.on(Events.ChannelDelete, this._handleChannelDeletion);
	      this.client.on(Events.ThreadDelete, this._handleThreadDeletion);
	    }

	    if (this.guildId) {
	      this._handleGuildDeletion = this._handleGuildDeletion.bind(this);
	      this.client.on(Events.GuildDelete, this._handleGuildDeletion);
	    }

	    this.client.on(Events.InteractionCreate, this.handleCollect);

	    this.once('end', () => {
	      this.client.removeListener(Events.InteractionCreate, this.handleCollect);
	      this.client.removeListener(Events.MessageDelete, this._handleMessageDeletion);
	      this.client.removeListener(Events.MessageBulkDelete, bulkDeleteListener);
	      this.client.removeListener(Events.ChannelDelete, this._handleChannelDeletion);
	      this.client.removeListener(Events.ThreadDelete, this._handleThreadDeletion);
	      this.client.removeListener(Events.GuildDelete, this._handleGuildDeletion);
	      this.client.decrementMaxListeners();
	    });

	    this.on('collect', interaction => {
	      this.total++;
	      this.users.set(interaction.user.id, interaction.user);
	    });
	  }

	  /**
	   * Handles an incoming interaction for possible collection.
	   * @param {BaseInteraction} interaction The interaction to possibly collect
	   * @returns {?Snowflake}
	   * @private
	   */
	  collect(interaction) {
	    /**
	     * Emitted whenever an interaction is collected.
	     * @event InteractionCollector#collect
	     * @param {BaseInteraction} interaction The interaction that was collected
	     */

	    if (this.interactionType && interaction.type !== this.interactionType) return null;
	    if (this.componentType && interaction.componentType !== this.componentType) return null;
	    if (this.messageId && interaction.message?.id !== this.messageId) return null;
	    if (
	      this.messageInteractionId &&
	      interaction.message?.interaction?.id &&
	      interaction.message.interaction.id !== this.messageInteractionId
	    ) {
	      return null;
	    }
	    if (this.channelId && interaction.channelId !== this.channelId) return null;
	    if (this.guildId && interaction.guildId !== this.guildId) return null;

	    return interaction.id;
	  }

	  /**
	   * Handles an interaction for possible disposal.
	   * @param {BaseInteraction} interaction The interaction that could be disposed of
	   * @returns {?Snowflake}
	   */
	  dispose(interaction) {
	    /**
	     * Emitted whenever an interaction is disposed of.
	     * @event InteractionCollector#dispose
	     * @param {BaseInteraction} interaction The interaction that was disposed of
	     */
	    if (this.type && interaction.type !== this.type) return null;
	    if (this.componentType && interaction.componentType !== this.componentType) return null;
	    if (this.messageId && interaction.message?.id !== this.messageId) return null;
	    if (
	      this.messageInteractionId &&
	      interaction.message?.interaction?.id &&
	      interaction.message.interaction.id !== this.messageInteractionId
	    ) {
	      return null;
	    }
	    if (this.channelId && interaction.channelId !== this.channelId) return null;
	    if (this.guildId && interaction.guildId !== this.guildId) return null;

	    return interaction.id;
	  }

	  /**
	   * Empties this interaction collector.
	   */
	  empty() {
	    this.total = 0;
	    this.collected.clear();
	    this.users.clear();
	    this.checkEnd();
	  }

	  /**
	   * The reason this collector has ended with, or null if it hasn't ended yet
	   * @type {?string}
	   * @readonly
	   */
	  get endReason() {
	    if (this.options.max && this.total >= this.options.max) return 'limit';
	    if (this.options.maxComponents && this.collected.size >= this.options.maxComponents) return 'componentLimit';
	    if (this.options.maxUsers && this.users.size >= this.options.maxUsers) return 'userLimit';
	    return super.endReason;
	  }

	  /**
	   * Handles checking if the message has been deleted, and if so, stops the collector with the reason 'messageDelete'.
	   * @private
	   * @param {Message} message The message that was deleted
	   * @returns {void}
	   */
	  _handleMessageDeletion(message) {
	    if (message.id === this.messageId) {
	      this.stop('messageDelete');
	    }

	    if (message.interaction?.id === this.messageInteractionId) {
	      this.stop('messageDelete');
	    }
	  }

	  /**
	   * Handles checking if the channel has been deleted, and if so, stops the collector with the reason 'channelDelete'.
	   * @private
	   * @param {GuildChannel} channel The channel that was deleted
	   * @returns {void}
	   */
	  _handleChannelDeletion(channel) {
	    if (channel.id === this.channelId || channel.threads?.cache.has(this.channelId)) {
	      this.stop('channelDelete');
	    }
	  }

	  /**
	   * Handles checking if the thread has been deleted, and if so, stops the collector with the reason 'threadDelete'.
	   * @private
	   * @param {ThreadChannel} thread The thread that was deleted
	   * @returns {void}
	   */
	  _handleThreadDeletion(thread) {
	    if (thread.id === this.channelId) {
	      this.stop('threadDelete');
	    }
	  }

	  /**
	   * Handles checking if the guild has been deleted, and if so, stops the collector with the reason 'guildDelete'.
	   * @private
	   * @param {Guild} guild The guild that was deleted
	   * @returns {void}
	   */
	  _handleGuildDeletion(guild) {
	    if (guild.id === this.guildId) {
	      this.stop('guildDelete');
	    }
	  }
	}

	InteractionCollector_1 = InteractionCollector;
	return InteractionCollector_1;
}

var MessageCollector_1;
var hasRequiredMessageCollector;

function requireMessageCollector () {
	if (hasRequiredMessageCollector) return MessageCollector_1;
	hasRequiredMessageCollector = 1;

	const Collector = requireCollector();
	const Events = requireEvents();

	/**
	 * @typedef {CollectorOptions} MessageCollectorOptions
	 * @property {number} max The maximum amount of messages to collect
	 * @property {number} maxProcessed The maximum amount of messages to process
	 */

	/**
	 * Collects messages on a channel.
	 * Will automatically stop if the channel ({@link Client#event:channelDelete channelDelete}),
	 * thread ({@link Client#event:threadDelete threadDelete}), or
	 * guild ({@link Client#event:guildDelete guildDelete}) is deleted.
	 * @extends {Collector}
	 */
	class MessageCollector extends Collector {
	  /**
	   * @param {TextBasedChannels} channel The channel
	   * @param {MessageCollectorOptions} options The options to be applied to this collector
	   * @emits MessageCollector#message
	   */
	  constructor(channel, options = {}) {
	    super(channel.client, options);

	    /**
	     * The channel
	     * @type {TextBasedChannels}
	     */
	    this.channel = channel;

	    /**
	     * Total number of messages that were received in the channel during message collection
	     * @type {number}
	     */
	    this.received = 0;

	    const bulkDeleteListener = messages => {
	      for (const message of messages.values()) this.handleDispose(message);
	    };

	    this._handleChannelDeletion = this._handleChannelDeletion.bind(this);
	    this._handleThreadDeletion = this._handleThreadDeletion.bind(this);
	    this._handleGuildDeletion = this._handleGuildDeletion.bind(this);

	    this.client.incrementMaxListeners();
	    this.client.on(Events.MessageCreate, this.handleCollect);
	    this.client.on(Events.MessageDelete, this.handleDispose);
	    this.client.on(Events.MessageBulkDelete, bulkDeleteListener);
	    this.client.on(Events.ChannelDelete, this._handleChannelDeletion);
	    this.client.on(Events.ThreadDelete, this._handleThreadDeletion);
	    this.client.on(Events.GuildDelete, this._handleGuildDeletion);

	    this.once('end', () => {
	      this.client.removeListener(Events.MessageCreate, this.handleCollect);
	      this.client.removeListener(Events.MessageDelete, this.handleDispose);
	      this.client.removeListener(Events.MessageBulkDelete, bulkDeleteListener);
	      this.client.removeListener(Events.ChannelDelete, this._handleChannelDeletion);
	      this.client.removeListener(Events.ThreadDelete, this._handleThreadDeletion);
	      this.client.removeListener(Events.GuildDelete, this._handleGuildDeletion);
	      this.client.decrementMaxListeners();
	    });
	  }

	  /**
	   * Handles a message for possible collection.
	   * @param {Message} message The message that could be collected
	   * @returns {?Snowflake}
	   * @private
	   */
	  collect(message) {
	    /**
	     * Emitted whenever a message is collected.
	     * @event MessageCollector#collect
	     * @param {Message} message The message that was collected
	     */
	    if (message.channelId !== this.channel.id) return null;
	    this.received++;
	    return message.id;
	  }

	  /**
	   * Handles a message for possible disposal.
	   * @param {Message} message The message that could be disposed of
	   * @returns {?Snowflake}
	   */
	  dispose(message) {
	    /**
	     * Emitted whenever a message is disposed of.
	     * @event MessageCollector#dispose
	     * @param {Message} message The message that was disposed of
	     */
	    return message.channelId === this.channel.id ? message.id : null;
	  }

	  /**
	   * The reason this collector has ended with, or null if it hasn't ended yet
	   * @type {?string}
	   * @readonly
	   */
	  get endReason() {
	    if (this.options.max && this.collected.size >= this.options.max) return 'limit';
	    if (this.options.maxProcessed && this.received === this.options.maxProcessed) return 'processedLimit';
	    return super.endReason;
	  }

	  /**
	   * Handles checking if the channel has been deleted, and if so, stops the collector with the reason 'channelDelete'.
	   * @private
	   * @param {GuildChannel} channel The channel that was deleted
	   * @returns {void}
	   */
	  _handleChannelDeletion(channel) {
	    if (channel.id === this.channel.id || channel.id === this.channel.parentId) {
	      this.stop('channelDelete');
	    }
	  }

	  /**
	   * Handles checking if the thread has been deleted, and if so, stops the collector with the reason 'threadDelete'.
	   * @private
	   * @param {ThreadChannel} thread The thread that was deleted
	   * @returns {void}
	   */
	  _handleThreadDeletion(thread) {
	    if (thread.id === this.channel.id) {
	      this.stop('threadDelete');
	    }
	  }

	  /**
	   * Handles checking if the guild has been deleted, and if so, stops the collector with the reason 'guildDelete'.
	   * @private
	   * @param {Guild} guild The guild that was deleted
	   * @returns {void}
	   */
	  _handleGuildDeletion(guild) {
	    if (guild.id === this.channel.guild?.id) {
	      this.stop('guildDelete');
	    }
	  }
	}

	MessageCollector_1 = MessageCollector;
	return MessageCollector_1;
}

var dist$1 = {exports: {}};

var cjs = {};

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */

var isArray_1;
var hasRequiredIsArray;

function requireIsArray () {
	if (hasRequiredIsArray) return isArray_1;
	hasRequiredIsArray = 1;
	var isArray = Array.isArray;

	isArray_1 = isArray;
	return isArray_1;
}

/** Detect free variable `global` from Node.js. */

var _freeGlobal;
var hasRequired_freeGlobal;

function require_freeGlobal () {
	if (hasRequired_freeGlobal) return _freeGlobal;
	hasRequired_freeGlobal = 1;
	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

	_freeGlobal = freeGlobal;
	return _freeGlobal;
}

var _root;
var hasRequired_root;

function require_root () {
	if (hasRequired_root) return _root;
	hasRequired_root = 1;
	var freeGlobal = require_freeGlobal();

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	_root = root;
	return _root;
}

var _Symbol;
var hasRequired_Symbol;

function require_Symbol () {
	if (hasRequired_Symbol) return _Symbol;
	hasRequired_Symbol = 1;
	var root = require_root();

	/** Built-in value references. */
	var Symbol = root.Symbol;

	_Symbol = Symbol;
	return _Symbol;
}

var _getRawTag;
var hasRequired_getRawTag;

function require_getRawTag () {
	if (hasRequired_getRawTag) return _getRawTag;
	hasRequired_getRawTag = 1;
	var Symbol = require_Symbol();

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty.call(value, symToStringTag),
	      tag = value[symToStringTag];

	  try {
	    value[symToStringTag] = undefined;
	    var unmasked = true;
	  } catch (e) {}

	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }
	  return result;
	}

	_getRawTag = getRawTag;
	return _getRawTag;
}

/** Used for built-in method references. */

var _objectToString;
var hasRequired_objectToString;

function require_objectToString () {
	if (hasRequired_objectToString) return _objectToString;
	hasRequired_objectToString = 1;
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString(value) {
	  return nativeObjectToString.call(value);
	}

	_objectToString = objectToString;
	return _objectToString;
}

var _baseGetTag;
var hasRequired_baseGetTag;

function require_baseGetTag () {
	if (hasRequired_baseGetTag) return _baseGetTag;
	hasRequired_baseGetTag = 1;
	var Symbol = require_Symbol(),
	    getRawTag = require_getRawTag(),
	    objectToString = require_objectToString();

	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';

	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  return (symToStringTag && symToStringTag in Object(value))
	    ? getRawTag(value)
	    : objectToString(value);
	}

	_baseGetTag = baseGetTag;
	return _baseGetTag;
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */

var isObjectLike_1;
var hasRequiredIsObjectLike;

function requireIsObjectLike () {
	if (hasRequiredIsObjectLike) return isObjectLike_1;
	hasRequiredIsObjectLike = 1;
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}

	isObjectLike_1 = isObjectLike;
	return isObjectLike_1;
}

var isSymbol_1;
var hasRequiredIsSymbol;

function requireIsSymbol () {
	if (hasRequiredIsSymbol) return isSymbol_1;
	hasRequiredIsSymbol = 1;
	var baseGetTag = require_baseGetTag(),
	    isObjectLike = requireIsObjectLike();

	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && baseGetTag(value) == symbolTag);
	}

	isSymbol_1 = isSymbol;
	return isSymbol_1;
}

var _isKey;
var hasRequired_isKey;

function require_isKey () {
	if (hasRequired_isKey) return _isKey;
	hasRequired_isKey = 1;
	var isArray = requireIsArray(),
	    isSymbol = requireIsSymbol();

	/** Used to match property names within property paths. */
	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	    reIsPlainProp = /^\w*$/;

	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */
	function isKey(value, object) {
	  if (isArray(value)) {
	    return false;
	  }
	  var type = typeof value;
	  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
	      value == null || isSymbol(value)) {
	    return true;
	  }
	  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	    (object != null && value in Object(object));
	}

	_isKey = isKey;
	return _isKey;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */

var isObject_1;
var hasRequiredIsObject;

function requireIsObject () {
	if (hasRequiredIsObject) return isObject_1;
	hasRequiredIsObject = 1;
	function isObject(value) {
	  var type = typeof value;
	  return value != null && (type == 'object' || type == 'function');
	}

	isObject_1 = isObject;
	return isObject_1;
}

var isFunction_1;
var hasRequiredIsFunction;

function requireIsFunction () {
	if (hasRequiredIsFunction) return isFunction_1;
	hasRequiredIsFunction = 1;
	var baseGetTag = require_baseGetTag(),
	    isObject = requireIsObject();

	/** `Object#toString` result references. */
	var asyncTag = '[object AsyncFunction]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    proxyTag = '[object Proxy]';

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  if (!isObject(value)) {
	    return false;
	  }
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 9 which returns 'object' for typed arrays and other constructors.
	  var tag = baseGetTag(value);
	  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	}

	isFunction_1 = isFunction;
	return isFunction_1;
}

var _coreJsData;
var hasRequired_coreJsData;

function require_coreJsData () {
	if (hasRequired_coreJsData) return _coreJsData;
	hasRequired_coreJsData = 1;
	var root = require_root();

	/** Used to detect overreaching core-js shims. */
	var coreJsData = root['__core-js_shared__'];

	_coreJsData = coreJsData;
	return _coreJsData;
}

var _isMasked;
var hasRequired_isMasked;

function require_isMasked () {
	if (hasRequired_isMasked) return _isMasked;
	hasRequired_isMasked = 1;
	var coreJsData = require_coreJsData();

	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}

	_isMasked = isMasked;
	return _isMasked;
}

/** Used for built-in method references. */

var _toSource;
var hasRequired_toSource;

function require_toSource () {
	if (hasRequired_toSource) return _toSource;
	hasRequired_toSource = 1;
	var funcProto = Function.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to convert.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}

	_toSource = toSource;
	return _toSource;
}

var _baseIsNative;
var hasRequired_baseIsNative;

function require_baseIsNative () {
	if (hasRequired_baseIsNative) return _baseIsNative;
	hasRequired_baseIsNative = 1;
	var isFunction = requireIsFunction(),
	    isMasked = require_isMasked(),
	    isObject = requireIsObject(),
	    toSource = require_toSource();

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}

	_baseIsNative = baseIsNative;
	return _baseIsNative;
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */

var _getValue;
var hasRequired_getValue;

function require_getValue () {
	if (hasRequired_getValue) return _getValue;
	hasRequired_getValue = 1;
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}

	_getValue = getValue;
	return _getValue;
}

var _getNative;
var hasRequired_getNative;

function require_getNative () {
	if (hasRequired_getNative) return _getNative;
	hasRequired_getNative = 1;
	var baseIsNative = require_baseIsNative(),
	    getValue = require_getValue();

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}

	_getNative = getNative;
	return _getNative;
}

var _nativeCreate;
var hasRequired_nativeCreate;

function require_nativeCreate () {
	if (hasRequired_nativeCreate) return _nativeCreate;
	hasRequired_nativeCreate = 1;
	var getNative = require_getNative();

	/* Built-in method references that are verified to be native. */
	var nativeCreate = getNative(Object, 'create');

	_nativeCreate = nativeCreate;
	return _nativeCreate;
}

var _hashClear;
var hasRequired_hashClear;

function require_hashClear () {
	if (hasRequired_hashClear) return _hashClear;
	hasRequired_hashClear = 1;
	var nativeCreate = require_nativeCreate();

	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
	  this.size = 0;
	}

	_hashClear = hashClear;
	return _hashClear;
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

var _hashDelete;
var hasRequired_hashDelete;

function require_hashDelete () {
	if (hasRequired_hashDelete) return _hashDelete;
	hasRequired_hashDelete = 1;
	function hashDelete(key) {
	  var result = this.has(key) && delete this.__data__[key];
	  this.size -= result ? 1 : 0;
	  return result;
	}

	_hashDelete = hashDelete;
	return _hashDelete;
}

var _hashGet;
var hasRequired_hashGet;

function require_hashGet () {
	if (hasRequired_hashGet) return _hashGet;
	hasRequired_hashGet = 1;
	var nativeCreate = require_nativeCreate();

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
	}

	_hashGet = hashGet;
	return _hashGet;
}

var _hashHas;
var hasRequired_hashHas;

function require_hashHas () {
	if (hasRequired_hashHas) return _hashHas;
	hasRequired_hashHas = 1;
	var nativeCreate = require_nativeCreate();

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
	}

	_hashHas = hashHas;
	return _hashHas;
}

var _hashSet;
var hasRequired_hashSet;

function require_hashSet () {
	if (hasRequired_hashSet) return _hashSet;
	hasRequired_hashSet = 1;
	var nativeCreate = require_nativeCreate();

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  this.size += this.has(key) ? 0 : 1;
	  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	  return this;
	}

	_hashSet = hashSet;
	return _hashSet;
}

var _Hash;
var hasRequired_Hash;

function require_Hash () {
	if (hasRequired_Hash) return _Hash;
	hasRequired_Hash = 1;
	var hashClear = require_hashClear(),
	    hashDelete = require_hashDelete(),
	    hashGet = require_hashGet(),
	    hashHas = require_hashHas(),
	    hashSet = require_hashSet();

	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `Hash`.
	Hash.prototype.clear = hashClear;
	Hash.prototype['delete'] = hashDelete;
	Hash.prototype.get = hashGet;
	Hash.prototype.has = hashHas;
	Hash.prototype.set = hashSet;

	_Hash = Hash;
	return _Hash;
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */

var _listCacheClear;
var hasRequired_listCacheClear;

function require_listCacheClear () {
	if (hasRequired_listCacheClear) return _listCacheClear;
	hasRequired_listCacheClear = 1;
	function listCacheClear() {
	  this.__data__ = [];
	  this.size = 0;
	}

	_listCacheClear = listCacheClear;
	return _listCacheClear;
}

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */

var eq_1;
var hasRequiredEq;

function requireEq () {
	if (hasRequiredEq) return eq_1;
	hasRequiredEq = 1;
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}

	eq_1 = eq;
	return eq_1;
}

var _assocIndexOf;
var hasRequired_assocIndexOf;

function require_assocIndexOf () {
	if (hasRequired_assocIndexOf) return _assocIndexOf;
	hasRequired_assocIndexOf = 1;
	var eq = requireEq();

	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}

	_assocIndexOf = assocIndexOf;
	return _assocIndexOf;
}

var _listCacheDelete;
var hasRequired_listCacheDelete;

function require_listCacheDelete () {
	if (hasRequired_listCacheDelete) return _listCacheDelete;
	hasRequired_listCacheDelete = 1;
	var assocIndexOf = require_assocIndexOf();

	/** Used for built-in method references. */
	var arrayProto = Array.prototype;

	/** Built-in value references. */
	var splice = arrayProto.splice;

	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  --this.size;
	  return true;
	}

	_listCacheDelete = listCacheDelete;
	return _listCacheDelete;
}

var _listCacheGet;
var hasRequired_listCacheGet;

function require_listCacheGet () {
	if (hasRequired_listCacheGet) return _listCacheGet;
	hasRequired_listCacheGet = 1;
	var assocIndexOf = require_assocIndexOf();

	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  return index < 0 ? undefined : data[index][1];
	}

	_listCacheGet = listCacheGet;
	return _listCacheGet;
}

var _listCacheHas;
var hasRequired_listCacheHas;

function require_listCacheHas () {
	if (hasRequired_listCacheHas) return _listCacheHas;
	hasRequired_listCacheHas = 1;
	var assocIndexOf = require_assocIndexOf();

	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return assocIndexOf(this.__data__, key) > -1;
	}

	_listCacheHas = listCacheHas;
	return _listCacheHas;
}

var _listCacheSet;
var hasRequired_listCacheSet;

function require_listCacheSet () {
	if (hasRequired_listCacheSet) return _listCacheSet;
	hasRequired_listCacheSet = 1;
	var assocIndexOf = require_assocIndexOf();

	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    ++this.size;
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}

	_listCacheSet = listCacheSet;
	return _listCacheSet;
}

var _ListCache;
var hasRequired_ListCache;

function require_ListCache () {
	if (hasRequired_ListCache) return _ListCache;
	hasRequired_ListCache = 1;
	var listCacheClear = require_listCacheClear(),
	    listCacheDelete = require_listCacheDelete(),
	    listCacheGet = require_listCacheGet(),
	    listCacheHas = require_listCacheHas(),
	    listCacheSet = require_listCacheSet();

	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `ListCache`.
	ListCache.prototype.clear = listCacheClear;
	ListCache.prototype['delete'] = listCacheDelete;
	ListCache.prototype.get = listCacheGet;
	ListCache.prototype.has = listCacheHas;
	ListCache.prototype.set = listCacheSet;

	_ListCache = ListCache;
	return _ListCache;
}

var _Map;
var hasRequired_Map;

function require_Map () {
	if (hasRequired_Map) return _Map;
	hasRequired_Map = 1;
	var getNative = require_getNative(),
	    root = require_root();

	/* Built-in method references that are verified to be native. */
	var Map = getNative(root, 'Map');

	_Map = Map;
	return _Map;
}

var _mapCacheClear;
var hasRequired_mapCacheClear;

function require_mapCacheClear () {
	if (hasRequired_mapCacheClear) return _mapCacheClear;
	hasRequired_mapCacheClear = 1;
	var Hash = require_Hash(),
	    ListCache = require_ListCache(),
	    Map = require_Map();

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.size = 0;
	  this.__data__ = {
	    'hash': new Hash,
	    'map': new (Map || ListCache),
	    'string': new Hash
	  };
	}

	_mapCacheClear = mapCacheClear;
	return _mapCacheClear;
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */

var _isKeyable;
var hasRequired_isKeyable;

function require_isKeyable () {
	if (hasRequired_isKeyable) return _isKeyable;
	hasRequired_isKeyable = 1;
	function isKeyable(value) {
	  var type = typeof value;
	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	    ? (value !== '__proto__')
	    : (value === null);
	}

	_isKeyable = isKeyable;
	return _isKeyable;
}

var _getMapData;
var hasRequired_getMapData;

function require_getMapData () {
	if (hasRequired_getMapData) return _getMapData;
	hasRequired_getMapData = 1;
	var isKeyable = require_isKeyable();

	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return isKeyable(key)
	    ? data[typeof key == 'string' ? 'string' : 'hash']
	    : data.map;
	}

	_getMapData = getMapData;
	return _getMapData;
}

var _mapCacheDelete;
var hasRequired_mapCacheDelete;

function require_mapCacheDelete () {
	if (hasRequired_mapCacheDelete) return _mapCacheDelete;
	hasRequired_mapCacheDelete = 1;
	var getMapData = require_getMapData();

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  var result = getMapData(this, key)['delete'](key);
	  this.size -= result ? 1 : 0;
	  return result;
	}

	_mapCacheDelete = mapCacheDelete;
	return _mapCacheDelete;
}

var _mapCacheGet;
var hasRequired_mapCacheGet;

function require_mapCacheGet () {
	if (hasRequired_mapCacheGet) return _mapCacheGet;
	hasRequired_mapCacheGet = 1;
	var getMapData = require_getMapData();

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return getMapData(this, key).get(key);
	}

	_mapCacheGet = mapCacheGet;
	return _mapCacheGet;
}

var _mapCacheHas;
var hasRequired_mapCacheHas;

function require_mapCacheHas () {
	if (hasRequired_mapCacheHas) return _mapCacheHas;
	hasRequired_mapCacheHas = 1;
	var getMapData = require_getMapData();

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return getMapData(this, key).has(key);
	}

	_mapCacheHas = mapCacheHas;
	return _mapCacheHas;
}

var _mapCacheSet;
var hasRequired_mapCacheSet;

function require_mapCacheSet () {
	if (hasRequired_mapCacheSet) return _mapCacheSet;
	hasRequired_mapCacheSet = 1;
	var getMapData = require_getMapData();

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  var data = getMapData(this, key),
	      size = data.size;

	  data.set(key, value);
	  this.size += data.size == size ? 0 : 1;
	  return this;
	}

	_mapCacheSet = mapCacheSet;
	return _mapCacheSet;
}

var _MapCache;
var hasRequired_MapCache;

function require_MapCache () {
	if (hasRequired_MapCache) return _MapCache;
	hasRequired_MapCache = 1;
	var mapCacheClear = require_mapCacheClear(),
	    mapCacheDelete = require_mapCacheDelete(),
	    mapCacheGet = require_mapCacheGet(),
	    mapCacheHas = require_mapCacheHas(),
	    mapCacheSet = require_mapCacheSet();

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `MapCache`.
	MapCache.prototype.clear = mapCacheClear;
	MapCache.prototype['delete'] = mapCacheDelete;
	MapCache.prototype.get = mapCacheGet;
	MapCache.prototype.has = mapCacheHas;
	MapCache.prototype.set = mapCacheSet;

	_MapCache = MapCache;
	return _MapCache;
}

var memoize_1;
var hasRequiredMemoize;

function requireMemoize () {
	if (hasRequiredMemoize) return memoize_1;
	hasRequiredMemoize = 1;
	var MapCache = require_MapCache();

	/** Error message constants. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/**
	 * Creates a function that memoizes the result of `func`. If `resolver` is
	 * provided, it determines the cache key for storing the result based on the
	 * arguments provided to the memoized function. By default, the first argument
	 * provided to the memoized function is used as the map cache key. The `func`
	 * is invoked with the `this` binding of the memoized function.
	 *
	 * **Note:** The cache is exposed as the `cache` property on the memoized
	 * function. Its creation may be customized by replacing the `_.memoize.Cache`
	 * constructor with one whose instances implement the
	 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to have its output memoized.
	 * @param {Function} [resolver] The function to resolve the cache key.
	 * @returns {Function} Returns the new memoized function.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': 2 };
	 * var other = { 'c': 3, 'd': 4 };
	 *
	 * var values = _.memoize(_.values);
	 * values(object);
	 * // => [1, 2]
	 *
	 * values(other);
	 * // => [3, 4]
	 *
	 * object.a = 2;
	 * values(object);
	 * // => [1, 2]
	 *
	 * // Modify the result cache.
	 * values.cache.set(object, ['a', 'b']);
	 * values(object);
	 * // => ['a', 'b']
	 *
	 * // Replace `_.memoize.Cache`.
	 * _.memoize.Cache = WeakMap;
	 */
	function memoize(func, resolver) {
	  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  var memoized = function() {
	    var args = arguments,
	        key = resolver ? resolver.apply(this, args) : args[0],
	        cache = memoized.cache;

	    if (cache.has(key)) {
	      return cache.get(key);
	    }
	    var result = func.apply(this, args);
	    memoized.cache = cache.set(key, result) || cache;
	    return result;
	  };
	  memoized.cache = new (memoize.Cache || MapCache);
	  return memoized;
	}

	// Expose `MapCache`.
	memoize.Cache = MapCache;

	memoize_1 = memoize;
	return memoize_1;
}

var _memoizeCapped;
var hasRequired_memoizeCapped;

function require_memoizeCapped () {
	if (hasRequired_memoizeCapped) return _memoizeCapped;
	hasRequired_memoizeCapped = 1;
	var memoize = requireMemoize();

	/** Used as the maximum memoize cache size. */
	var MAX_MEMOIZE_SIZE = 500;

	/**
	 * A specialized version of `_.memoize` which clears the memoized function's
	 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
	 *
	 * @private
	 * @param {Function} func The function to have its output memoized.
	 * @returns {Function} Returns the new memoized function.
	 */
	function memoizeCapped(func) {
	  var result = memoize(func, function(key) {
	    if (cache.size === MAX_MEMOIZE_SIZE) {
	      cache.clear();
	    }
	    return key;
	  });

	  var cache = result.cache;
	  return result;
	}

	_memoizeCapped = memoizeCapped;
	return _memoizeCapped;
}

var _stringToPath;
var hasRequired_stringToPath;

function require_stringToPath () {
	if (hasRequired_stringToPath) return _stringToPath;
	hasRequired_stringToPath = 1;
	var memoizeCapped = require_memoizeCapped();

	/** Used to match property names within property paths. */
	var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

	/** Used to match backslashes in property paths. */
	var reEscapeChar = /\\(\\)?/g;

	/**
	 * Converts `string` to a property path array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the property path array.
	 */
	var stringToPath = memoizeCapped(function(string) {
	  var result = [];
	  if (string.charCodeAt(0) === 46 /* . */) {
	    result.push('');
	  }
	  string.replace(rePropName, function(match, number, quote, subString) {
	    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
	  });
	  return result;
	});

	_stringToPath = stringToPath;
	return _stringToPath;
}

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */

var _arrayMap;
var hasRequired_arrayMap;

function require_arrayMap () {
	if (hasRequired_arrayMap) return _arrayMap;
	hasRequired_arrayMap = 1;
	function arrayMap(array, iteratee) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      result = Array(length);

	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }
	  return result;
	}

	_arrayMap = arrayMap;
	return _arrayMap;
}

var _baseToString;
var hasRequired_baseToString;

function require_baseToString () {
	if (hasRequired_baseToString) return _baseToString;
	hasRequired_baseToString = 1;
	var Symbol = require_Symbol(),
	    arrayMap = require_arrayMap(),
	    isArray = requireIsArray(),
	    isSymbol = requireIsSymbol();

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolToString = symbolProto ? symbolProto.toString : undefined;

	/**
	 * The base implementation of `_.toString` which doesn't convert nullish
	 * values to empty strings.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (isArray(value)) {
	    // Recursively convert values (susceptible to call stack limits).
	    return arrayMap(value, baseToString) + '';
	  }
	  if (isSymbol(value)) {
	    return symbolToString ? symbolToString.call(value) : '';
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}

	_baseToString = baseToString;
	return _baseToString;
}

var toString_1;
var hasRequiredToString;

function requireToString () {
	if (hasRequiredToString) return toString_1;
	hasRequiredToString = 1;
	var baseToString = require_baseToString();

	/**
	 * Converts `value` to a string. An empty string is returned for `null`
	 * and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	function toString(value) {
	  return value == null ? '' : baseToString(value);
	}

	toString_1 = toString;
	return toString_1;
}

var _castPath;
var hasRequired_castPath;

function require_castPath () {
	if (hasRequired_castPath) return _castPath;
	hasRequired_castPath = 1;
	var isArray = requireIsArray(),
	    isKey = require_isKey(),
	    stringToPath = require_stringToPath(),
	    toString = requireToString();

	/**
	 * Casts `value` to a path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {Array} Returns the cast property path array.
	 */
	function castPath(value, object) {
	  if (isArray(value)) {
	    return value;
	  }
	  return isKey(value, object) ? [value] : stringToPath(toString(value));
	}

	_castPath = castPath;
	return _castPath;
}

var _toKey;
var hasRequired_toKey;

function require_toKey () {
	if (hasRequired_toKey) return _toKey;
	hasRequired_toKey = 1;
	var isSymbol = requireIsSymbol();

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/**
	 * Converts `value` to a string key if it's not a string or symbol.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {string|symbol} Returns the key.
	 */
	function toKey(value) {
	  if (typeof value == 'string' || isSymbol(value)) {
	    return value;
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}

	_toKey = toKey;
	return _toKey;
}

var _baseGet;
var hasRequired_baseGet;

function require_baseGet () {
	if (hasRequired_baseGet) return _baseGet;
	hasRequired_baseGet = 1;
	var castPath = require_castPath(),
	    toKey = require_toKey();

	/**
	 * The base implementation of `_.get` without support for default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet(object, path) {
	  path = castPath(path, object);

	  var index = 0,
	      length = path.length;

	  while (object != null && index < length) {
	    object = object[toKey(path[index++])];
	  }
	  return (index && index == length) ? object : undefined;
	}

	_baseGet = baseGet;
	return _baseGet;
}

var get_1;
var hasRequiredGet;

function requireGet () {
	if (hasRequiredGet) return get_1;
	hasRequiredGet = 1;
	var baseGet = require_baseGet();

	/**
	 * Gets the value at `path` of `object`. If the resolved value is
	 * `undefined`, the `defaultValue` is returned in its place.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.7.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	 * @returns {*} Returns the resolved value.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.get(object, 'a[0].b.c');
	 * // => 3
	 *
	 * _.get(object, ['a', '0', 'b', 'c']);
	 * // => 3
	 *
	 * _.get(object, 'a.b.c', 'default');
	 * // => 'default'
	 */
	function get(object, path, defaultValue) {
	  var result = object == null ? undefined : baseGet(object, path);
	  return result === undefined ? defaultValue : result;
	}

	get_1 = get;
	return get_1;
}

var es6;
var hasRequiredEs6;

function requireEs6 () {
	if (hasRequiredEs6) return es6;
	hasRequiredEs6 = 1;


	es6 = function equal(a, b) {
	  if (a === b) return true;

	  if (a && b && typeof a == 'object' && typeof b == 'object') {
	    if (a.constructor !== b.constructor) return false;

	    var length, i, keys;
	    if (Array.isArray(a)) {
	      length = a.length;
	      if (length != b.length) return false;
	      for (i = length; i-- !== 0;)
	        if (!equal(a[i], b[i])) return false;
	      return true;
	    }


	    if ((a instanceof Map) && (b instanceof Map)) {
	      if (a.size !== b.size) return false;
	      for (i of a.entries())
	        if (!b.has(i[0])) return false;
	      for (i of a.entries())
	        if (!equal(i[1], b.get(i[0]))) return false;
	      return true;
	    }

	    if ((a instanceof Set) && (b instanceof Set)) {
	      if (a.size !== b.size) return false;
	      for (i of a.entries())
	        if (!b.has(i[0])) return false;
	      return true;
	    }

	    if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
	      length = a.length;
	      if (length != b.length) return false;
	      for (i = length; i-- !== 0;)
	        if (a[i] !== b[i]) return false;
	      return true;
	    }


	    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
	    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
	    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();

	    keys = Object.keys(a);
	    length = keys.length;
	    if (length !== Object.keys(b).length) return false;

	    for (i = length; i-- !== 0;)
	      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;

	    for (i = length; i-- !== 0;) {
	      var key = keys[i];

	      if (!equal(a[key], b[key])) return false;
	    }

	    return true;
	  }

	  // true if both NaN, false otherwise
	  return a!==a && b!==b;
	};
	return es6;
}

/** Used to stand-in for `undefined` hash values. */

var _setCacheAdd;
var hasRequired_setCacheAdd;

function require_setCacheAdd () {
	if (hasRequired_setCacheAdd) return _setCacheAdd;
	hasRequired_setCacheAdd = 1;
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/**
	 * Adds `value` to the array cache.
	 *
	 * @private
	 * @name add
	 * @memberOf SetCache
	 * @alias push
	 * @param {*} value The value to cache.
	 * @returns {Object} Returns the cache instance.
	 */
	function setCacheAdd(value) {
	  this.__data__.set(value, HASH_UNDEFINED);
	  return this;
	}

	_setCacheAdd = setCacheAdd;
	return _setCacheAdd;
}

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */

var _setCacheHas;
var hasRequired_setCacheHas;

function require_setCacheHas () {
	if (hasRequired_setCacheHas) return _setCacheHas;
	hasRequired_setCacheHas = 1;
	function setCacheHas(value) {
	  return this.__data__.has(value);
	}

	_setCacheHas = setCacheHas;
	return _setCacheHas;
}

var _SetCache;
var hasRequired_SetCache;

function require_SetCache () {
	if (hasRequired_SetCache) return _SetCache;
	hasRequired_SetCache = 1;
	var MapCache = require_MapCache(),
	    setCacheAdd = require_setCacheAdd(),
	    setCacheHas = require_setCacheHas();

	/**
	 *
	 * Creates an array cache object to store unique values.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [values] The values to cache.
	 */
	function SetCache(values) {
	  var index = -1,
	      length = values == null ? 0 : values.length;

	  this.__data__ = new MapCache;
	  while (++index < length) {
	    this.add(values[index]);
	  }
	}

	// Add methods to `SetCache`.
	SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
	SetCache.prototype.has = setCacheHas;

	_SetCache = SetCache;
	return _SetCache;
}

/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */

var _baseFindIndex;
var hasRequired_baseFindIndex;

function require_baseFindIndex () {
	if (hasRequired_baseFindIndex) return _baseFindIndex;
	hasRequired_baseFindIndex = 1;
	function baseFindIndex(array, predicate, fromIndex, fromRight) {
	  var length = array.length,
	      index = fromIndex + (fromRight ? 1 : -1);

	  while ((fromRight ? index-- : ++index < length)) {
	    if (predicate(array[index], index, array)) {
	      return index;
	    }
	  }
	  return -1;
	}

	_baseFindIndex = baseFindIndex;
	return _baseFindIndex;
}

/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */

var _baseIsNaN;
var hasRequired_baseIsNaN;

function require_baseIsNaN () {
	if (hasRequired_baseIsNaN) return _baseIsNaN;
	hasRequired_baseIsNaN = 1;
	function baseIsNaN(value) {
	  return value !== value;
	}

	_baseIsNaN = baseIsNaN;
	return _baseIsNaN;
}

/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */

var _strictIndexOf;
var hasRequired_strictIndexOf;

function require_strictIndexOf () {
	if (hasRequired_strictIndexOf) return _strictIndexOf;
	hasRequired_strictIndexOf = 1;
	function strictIndexOf(array, value, fromIndex) {
	  var index = fromIndex - 1,
	      length = array.length;

	  while (++index < length) {
	    if (array[index] === value) {
	      return index;
	    }
	  }
	  return -1;
	}

	_strictIndexOf = strictIndexOf;
	return _strictIndexOf;
}

var _baseIndexOf;
var hasRequired_baseIndexOf;

function require_baseIndexOf () {
	if (hasRequired_baseIndexOf) return _baseIndexOf;
	hasRequired_baseIndexOf = 1;
	var baseFindIndex = require_baseFindIndex(),
	    baseIsNaN = require_baseIsNaN(),
	    strictIndexOf = require_strictIndexOf();

	/**
	 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseIndexOf(array, value, fromIndex) {
	  return value === value
	    ? strictIndexOf(array, value, fromIndex)
	    : baseFindIndex(array, baseIsNaN, fromIndex);
	}

	_baseIndexOf = baseIndexOf;
	return _baseIndexOf;
}

var _arrayIncludes;
var hasRequired_arrayIncludes;

function require_arrayIncludes () {
	if (hasRequired_arrayIncludes) return _arrayIncludes;
	hasRequired_arrayIncludes = 1;
	var baseIndexOf = require_baseIndexOf();

	/**
	 * A specialized version of `_.includes` for arrays without support for
	 * specifying an index to search from.
	 *
	 * @private
	 * @param {Array} [array] The array to inspect.
	 * @param {*} target The value to search for.
	 * @returns {boolean} Returns `true` if `target` is found, else `false`.
	 */
	function arrayIncludes(array, value) {
	  var length = array == null ? 0 : array.length;
	  return !!length && baseIndexOf(array, value, 0) > -1;
	}

	_arrayIncludes = arrayIncludes;
	return _arrayIncludes;
}

/**
 * This function is like `arrayIncludes` except that it accepts a comparator.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */

var _arrayIncludesWith;
var hasRequired_arrayIncludesWith;

function require_arrayIncludesWith () {
	if (hasRequired_arrayIncludesWith) return _arrayIncludesWith;
	hasRequired_arrayIncludesWith = 1;
	function arrayIncludesWith(array, value, comparator) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (comparator(value, array[index])) {
	      return true;
	    }
	  }
	  return false;
	}

	_arrayIncludesWith = arrayIncludesWith;
	return _arrayIncludesWith;
}

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

var _cacheHas;
var hasRequired_cacheHas;

function require_cacheHas () {
	if (hasRequired_cacheHas) return _cacheHas;
	hasRequired_cacheHas = 1;
	function cacheHas(cache, key) {
	  return cache.has(key);
	}

	_cacheHas = cacheHas;
	return _cacheHas;
}

var _Set;
var hasRequired_Set;

function require_Set () {
	if (hasRequired_Set) return _Set;
	hasRequired_Set = 1;
	var getNative = require_getNative(),
	    root = require_root();

	/* Built-in method references that are verified to be native. */
	var Set = getNative(root, 'Set');

	_Set = Set;
	return _Set;
}

/**
 * This method returns `undefined`.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Util
 * @example
 *
 * _.times(2, _.noop);
 * // => [undefined, undefined]
 */

var noop_1;
var hasRequiredNoop;

function requireNoop () {
	if (hasRequiredNoop) return noop_1;
	hasRequiredNoop = 1;
	function noop() {
	  // No operation performed.
	}

	noop_1 = noop;
	return noop_1;
}

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */

var _setToArray;
var hasRequired_setToArray;

function require_setToArray () {
	if (hasRequired_setToArray) return _setToArray;
	hasRequired_setToArray = 1;
	function setToArray(set) {
	  var index = -1,
	      result = Array(set.size);

	  set.forEach(function(value) {
	    result[++index] = value;
	  });
	  return result;
	}

	_setToArray = setToArray;
	return _setToArray;
}

var _createSet;
var hasRequired_createSet;

function require_createSet () {
	if (hasRequired_createSet) return _createSet;
	hasRequired_createSet = 1;
	var Set = require_Set(),
	    noop = requireNoop(),
	    setToArray = require_setToArray();

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/**
	 * Creates a set object of `values`.
	 *
	 * @private
	 * @param {Array} values The values to add to the set.
	 * @returns {Object} Returns the new set.
	 */
	var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
	  return new Set(values);
	};

	_createSet = createSet;
	return _createSet;
}

var _baseUniq;
var hasRequired_baseUniq;

function require_baseUniq () {
	if (hasRequired_baseUniq) return _baseUniq;
	hasRequired_baseUniq = 1;
	var SetCache = require_SetCache(),
	    arrayIncludes = require_arrayIncludes(),
	    arrayIncludesWith = require_arrayIncludesWith(),
	    cacheHas = require_cacheHas(),
	    createSet = require_createSet(),
	    setToArray = require_setToArray();

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/**
	 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} [iteratee] The iteratee invoked per element.
	 * @param {Function} [comparator] The comparator invoked per element.
	 * @returns {Array} Returns the new duplicate free array.
	 */
	function baseUniq(array, iteratee, comparator) {
	  var index = -1,
	      includes = arrayIncludes,
	      length = array.length,
	      isCommon = true,
	      result = [],
	      seen = result;

	  if (comparator) {
	    isCommon = false;
	    includes = arrayIncludesWith;
	  }
	  else if (length >= LARGE_ARRAY_SIZE) {
	    var set = iteratee ? null : createSet(array);
	    if (set) {
	      return setToArray(set);
	    }
	    isCommon = false;
	    includes = cacheHas;
	    seen = new SetCache;
	  }
	  else {
	    seen = iteratee ? [] : result;
	  }
	  outer:
	  while (++index < length) {
	    var value = array[index],
	        computed = iteratee ? iteratee(value) : value;

	    value = (comparator || value !== 0) ? value : 0;
	    if (isCommon && computed === computed) {
	      var seenIndex = seen.length;
	      while (seenIndex--) {
	        if (seen[seenIndex] === computed) {
	          continue outer;
	        }
	      }
	      if (iteratee) {
	        seen.push(computed);
	      }
	      result.push(value);
	    }
	    else if (!includes(seen, computed, comparator)) {
	      if (seen !== result) {
	        seen.push(computed);
	      }
	      result.push(value);
	    }
	  }
	  return result;
	}

	_baseUniq = baseUniq;
	return _baseUniq;
}

var uniqWith_1;
var hasRequiredUniqWith;

function requireUniqWith () {
	if (hasRequiredUniqWith) return uniqWith_1;
	hasRequiredUniqWith = 1;
	var baseUniq = require_baseUniq();

	/**
	 * This method is like `_.uniq` except that it accepts `comparator` which
	 * is invoked to compare elements of `array`. The order of result values is
	 * determined by the order they occur in the array.The comparator is invoked
	 * with two arguments: (arrVal, othVal).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @param {Function} [comparator] The comparator invoked per element.
	 * @returns {Array} Returns the new duplicate free array.
	 * @example
	 *
	 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
	 *
	 * _.uniqWith(objects, _.isEqual);
	 * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
	 */
	function uniqWith(array, comparator) {
	  comparator = typeof comparator == 'function' ? comparator : undefined;
	  return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
	}

	uniqWith_1 = uniqWith;
	return uniqWith_1;
}

var hasRequiredCjs;

function requireCjs () {
	if (hasRequiredCjs) return cjs;
	hasRequiredCjs = 1;

	var get = requireGet();
	var fastDeepEqual = requireEs6();
	var uniqWith = requireUniqWith();

	function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

	var get__default = /*#__PURE__*/_interopDefault(get);
	var fastDeepEqual__default = /*#__PURE__*/_interopDefault(fastDeepEqual);
	var uniqWith__default = /*#__PURE__*/_interopDefault(uniqWith);

	var __defProp = Object.defineProperty;
	var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

	// node_modules/@jspm/core/nodelibs/browser/chunk-5decc758.js
	var e;
	var t;
	var n;
	var r = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : globalThis;
	var o = e = {};
	function i() {
	  throw new Error("setTimeout has not been defined");
	}
	__name(i, "i");
	function u() {
	  throw new Error("clearTimeout has not been defined");
	}
	__name(u, "u");
	function c(e3) {
	  if (t === setTimeout)
	    return setTimeout(e3, 0);
	  if ((t === i || !t) && setTimeout)
	    return t = setTimeout, setTimeout(e3, 0);
	  try {
	    return t(e3, 0);
	  } catch (n3) {
	    try {
	      return t.call(null, e3, 0);
	    } catch (n4) {
	      return t.call(this || r, e3, 0);
	    }
	  }
	}
	__name(c, "c");
	!function() {
	  try {
	    t = "function" == typeof setTimeout ? setTimeout : i;
	  } catch (e3) {
	    t = i;
	  }
	  try {
	    n = "function" == typeof clearTimeout ? clearTimeout : u;
	  } catch (e3) {
	    n = u;
	  }
	}();
	var l;
	var s = [];
	var f = false;
	var a = -1;
	function h() {
	  f && l && (f = false, l.length ? s = l.concat(s) : a = -1, s.length && d());
	}
	__name(h, "h");
	function d() {
	  if (!f) {
	    var e3 = c(h);
	    f = true;
	    for (var t3 = s.length; t3; ) {
	      for (l = s, s = []; ++a < t3; )
	        l && l[a].run();
	      a = -1, t3 = s.length;
	    }
	    l = null, f = false, function(e4) {
	      if (n === clearTimeout)
	        return clearTimeout(e4);
	      if ((n === u || !n) && clearTimeout)
	        return n = clearTimeout, clearTimeout(e4);
	      try {
	        n(e4);
	      } catch (t4) {
	        try {
	          return n.call(null, e4);
	        } catch (t5) {
	          return n.call(this || r, e4);
	        }
	      }
	    }(e3);
	  }
	}
	__name(d, "d");
	function m(e3, t3) {
	  (this || r).fun = e3, (this || r).array = t3;
	}
	__name(m, "m");
	function p() {
	}
	__name(p, "p");
	o.nextTick = function(e3) {
	  var t3 = new Array(arguments.length - 1);
	  if (arguments.length > 1)
	    for (var n3 = 1; n3 < arguments.length; n3++)
	      t3[n3 - 1] = arguments[n3];
	  s.push(new m(e3, t3)), 1 !== s.length || f || c(d);
	}, m.prototype.run = function() {
	  (this || r).fun.apply(null, (this || r).array);
	}, o.title = "browser", o.browser = true, o.env = {}, o.argv = [], o.version = "", o.versions = {}, o.on = p, o.addListener = p, o.once = p, o.off = p, o.removeListener = p, o.removeAllListeners = p, o.emit = p, o.prependListener = p, o.prependOnceListener = p, o.listeners = function(e3) {
	  return [];
	}, o.binding = function(e3) {
	  throw new Error("process.binding is not supported");
	}, o.cwd = function() {
	  return "/";
	}, o.chdir = function(e3) {
	  throw new Error("process.chdir is not supported");
	}, o.umask = function() {
	  return 0;
	};
	var T = e;
	T.addListener;
	T.argv;
	T.binding;
	T.browser;
	T.chdir;
	T.cwd;
	T.emit;
	T.env;
	T.listeners;
	T.nextTick;
	T.off;
	T.on;
	T.once;
	T.prependListener;
	T.prependOnceListener;
	T.removeAllListeners;
	T.removeListener;
	T.title;
	T.umask;
	T.version;
	T.versions;

	// node_modules/@jspm/core/nodelibs/browser/chunk-b4205b57.js
	var t2 = "function" == typeof Symbol && "symbol" == typeof Symbol.toStringTag;
	var e2 = Object.prototype.toString;
	var o2 = /* @__PURE__ */ __name(function(o3) {
	  return !(t2 && o3 && "object" == typeof o3 && Symbol.toStringTag in o3) && "[object Arguments]" === e2.call(o3);
	}, "o");
	var n2 = /* @__PURE__ */ __name(function(t3) {
	  return !!o2(t3) || null !== t3 && "object" == typeof t3 && "number" == typeof t3.length && t3.length >= 0 && "[object Array]" !== e2.call(t3) && "[object Function]" === e2.call(t3.callee);
	}, "n");
	var r2 = function() {
	  return o2(arguments);
	}();
	o2.isLegacyArguments = n2;
	var l2 = r2 ? o2 : n2;
	var t$1 = Object.prototype.toString;
	var o$1 = Function.prototype.toString;
	var n$1 = /^\s*(?:function)?\*/;
	var e$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.toStringTag;
	var r$1 = Object.getPrototypeOf;
	var c2 = function() {
	  if (!e$1)
	    return false;
	  try {
	    return Function("return function*() {}")();
	  } catch (t3) {
	  }
	}();
	var u2 = c2 ? r$1(c2) : {};
	var i2 = /* @__PURE__ */ __name(function(c3) {
	  return "function" == typeof c3 && (!!n$1.test(o$1.call(c3)) || (e$1 ? r$1(c3) === u2 : "[object GeneratorFunction]" === t$1.call(c3)));
	}, "i");
	var t$2 = "function" == typeof Object.create ? function(t3, e3) {
	  e3 && (t3.super_ = e3, t3.prototype = Object.create(e3.prototype, { constructor: { value: t3, enumerable: false, writable: true, configurable: true } }));
	} : function(t3, e3) {
	  if (e3) {
	    t3.super_ = e3;
	    var o3 = /* @__PURE__ */ __name(function() {
	    }, "o");
	    o3.prototype = e3.prototype, t3.prototype = new o3(), t3.prototype.constructor = t3;
	  }
	};
	var i$1 = /* @__PURE__ */ __name(function(e3) {
	  return e3 && "object" == typeof e3 && "function" == typeof e3.copy && "function" == typeof e3.fill && "function" == typeof e3.readUInt8;
	}, "i$1");
	var o$2 = {};
	var u$1 = i$1;
	var f2 = l2;
	var a2 = i2;
	function c$1(e3) {
	  return e3.call.bind(e3);
	}
	__name(c$1, "c$1");
	var s2 = "undefined" != typeof BigInt;
	var p2 = "undefined" != typeof Symbol;
	var y = p2 && void 0 !== Symbol.toStringTag;
	var l$1 = "undefined" != typeof Uint8Array;
	var d2 = "undefined" != typeof ArrayBuffer;
	if (l$1 && y)
	  var g = Object.getPrototypeOf(Uint8Array.prototype), b = c$1(Object.getOwnPropertyDescriptor(g, Symbol.toStringTag).get);
	var m2 = c$1(Object.prototype.toString);
	var h2 = c$1(Number.prototype.valueOf);
	var j = c$1(String.prototype.valueOf);
	var A = c$1(Boolean.prototype.valueOf);
	if (s2)
	  var w = c$1(BigInt.prototype.valueOf);
	if (p2)
	  var v = c$1(Symbol.prototype.valueOf);
	function O(e3, t3) {
	  if ("object" != typeof e3)
	    return false;
	  try {
	    return t3(e3), true;
	  } catch (e4) {
	    return false;
	  }
	}
	__name(O, "O");
	function S(e3) {
	  return l$1 && y ? void 0 !== b(e3) : B(e3) || k(e3) || E(e3) || D(e3) || U(e3) || P(e3) || x(e3) || I(e3) || M(e3) || z(e3) || F(e3);
	}
	__name(S, "S");
	function B(e3) {
	  return l$1 && y ? "Uint8Array" === b(e3) : "[object Uint8Array]" === m2(e3) || u$1(e3) && void 0 !== e3.buffer;
	}
	__name(B, "B");
	function k(e3) {
	  return l$1 && y ? "Uint8ClampedArray" === b(e3) : "[object Uint8ClampedArray]" === m2(e3);
	}
	__name(k, "k");
	function E(e3) {
	  return l$1 && y ? "Uint16Array" === b(e3) : "[object Uint16Array]" === m2(e3);
	}
	__name(E, "E");
	function D(e3) {
	  return l$1 && y ? "Uint32Array" === b(e3) : "[object Uint32Array]" === m2(e3);
	}
	__name(D, "D");
	function U(e3) {
	  return l$1 && y ? "Int8Array" === b(e3) : "[object Int8Array]" === m2(e3);
	}
	__name(U, "U");
	function P(e3) {
	  return l$1 && y ? "Int16Array" === b(e3) : "[object Int16Array]" === m2(e3);
	}
	__name(P, "P");
	function x(e3) {
	  return l$1 && y ? "Int32Array" === b(e3) : "[object Int32Array]" === m2(e3);
	}
	__name(x, "x");
	function I(e3) {
	  return l$1 && y ? "Float32Array" === b(e3) : "[object Float32Array]" === m2(e3);
	}
	__name(I, "I");
	function M(e3) {
	  return l$1 && y ? "Float64Array" === b(e3) : "[object Float64Array]" === m2(e3);
	}
	__name(M, "M");
	function z(e3) {
	  return l$1 && y ? "BigInt64Array" === b(e3) : "[object BigInt64Array]" === m2(e3);
	}
	__name(z, "z");
	function F(e3) {
	  return l$1 && y ? "BigUint64Array" === b(e3) : "[object BigUint64Array]" === m2(e3);
	}
	__name(F, "F");
	function T2(e3) {
	  return "[object Map]" === m2(e3);
	}
	__name(T2, "T");
	function N(e3) {
	  return "[object Set]" === m2(e3);
	}
	__name(N, "N");
	function W(e3) {
	  return "[object WeakMap]" === m2(e3);
	}
	__name(W, "W");
	function $(e3) {
	  return "[object WeakSet]" === m2(e3);
	}
	__name($, "$");
	function C(e3) {
	  return "[object ArrayBuffer]" === m2(e3);
	}
	__name(C, "C");
	function V(e3) {
	  return "undefined" != typeof ArrayBuffer && (C.working ? C(e3) : e3 instanceof ArrayBuffer);
	}
	__name(V, "V");
	function G(e3) {
	  return "[object DataView]" === m2(e3);
	}
	__name(G, "G");
	function R(e3) {
	  return "undefined" != typeof DataView && (G.working ? G(e3) : e3 instanceof DataView);
	}
	__name(R, "R");
	function J(e3) {
	  return "[object SharedArrayBuffer]" === m2(e3);
	}
	__name(J, "J");
	function _(e3) {
	  return "undefined" != typeof SharedArrayBuffer && (J.working ? J(e3) : e3 instanceof SharedArrayBuffer);
	}
	__name(_, "_");
	function H(e3) {
	  return O(e3, h2);
	}
	__name(H, "H");
	function Z(e3) {
	  return O(e3, j);
	}
	__name(Z, "Z");
	function q(e3) {
	  return O(e3, A);
	}
	__name(q, "q");
	function K(e3) {
	  return s2 && O(e3, w);
	}
	__name(K, "K");
	function L(e3) {
	  return p2 && O(e3, v);
	}
	__name(L, "L");
	o$2.isArgumentsObject = f2, o$2.isGeneratorFunction = a2, o$2.isPromise = function(e3) {
	  return "undefined" != typeof Promise && e3 instanceof Promise || null !== e3 && "object" == typeof e3 && "function" == typeof e3.then && "function" == typeof e3.catch;
	}, o$2.isArrayBufferView = function(e3) {
	  return d2 && ArrayBuffer.isView ? ArrayBuffer.isView(e3) : S(e3) || R(e3);
	}, o$2.isTypedArray = S, o$2.isUint8Array = B, o$2.isUint8ClampedArray = k, o$2.isUint16Array = E, o$2.isUint32Array = D, o$2.isInt8Array = U, o$2.isInt16Array = P, o$2.isInt32Array = x, o$2.isFloat32Array = I, o$2.isFloat64Array = M, o$2.isBigInt64Array = z, o$2.isBigUint64Array = F, T2.working = "undefined" != typeof Map && T2(/* @__PURE__ */ new Map()), o$2.isMap = function(e3) {
	  return "undefined" != typeof Map && (T2.working ? T2(e3) : e3 instanceof Map);
	}, N.working = "undefined" != typeof Set && N(/* @__PURE__ */ new Set()), o$2.isSet = function(e3) {
	  return "undefined" != typeof Set && (N.working ? N(e3) : e3 instanceof Set);
	}, W.working = "undefined" != typeof WeakMap && W(/* @__PURE__ */ new WeakMap()), o$2.isWeakMap = function(e3) {
	  return "undefined" != typeof WeakMap && (W.working ? W(e3) : e3 instanceof WeakMap);
	}, $.working = "undefined" != typeof WeakSet && $(/* @__PURE__ */ new WeakSet()), o$2.isWeakSet = function(e3) {
	  return $(e3);
	}, C.working = "undefined" != typeof ArrayBuffer && C(new ArrayBuffer()), o$2.isArrayBuffer = V, G.working = "undefined" != typeof ArrayBuffer && "undefined" != typeof DataView && G(new DataView(new ArrayBuffer(1), 0, 1)), o$2.isDataView = R, J.working = "undefined" != typeof SharedArrayBuffer && J(new SharedArrayBuffer()), o$2.isSharedArrayBuffer = _, o$2.isAsyncFunction = function(e3) {
	  return "[object AsyncFunction]" === m2(e3);
	}, o$2.isMapIterator = function(e3) {
	  return "[object Map Iterator]" === m2(e3);
	}, o$2.isSetIterator = function(e3) {
	  return "[object Set Iterator]" === m2(e3);
	}, o$2.isGeneratorObject = function(e3) {
	  return "[object Generator]" === m2(e3);
	}, o$2.isWebAssemblyCompiledModule = function(e3) {
	  return "[object WebAssembly.Module]" === m2(e3);
	}, o$2.isNumberObject = H, o$2.isStringObject = Z, o$2.isBooleanObject = q, o$2.isBigIntObject = K, o$2.isSymbolObject = L, o$2.isBoxedPrimitive = function(e3) {
	  return H(e3) || Z(e3) || q(e3) || K(e3) || L(e3);
	}, o$2.isAnyArrayBuffer = function(e3) {
	  return l$1 && (V(e3) || _(e3));
	}, ["isProxy", "isExternal", "isModuleNamespaceObject"].forEach(function(e3) {
	  Object.defineProperty(o$2, e3, { enumerable: false, value: function() {
	    throw new Error(e3 + " is not supported in userland");
	  } });
	});
	var Q = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : globalThis;
	var X = {};
	var Y = T;
	var ee = Object.getOwnPropertyDescriptors || function(e3) {
	  for (var t3 = Object.keys(e3), r3 = {}, n3 = 0; n3 < t3.length; n3++)
	    r3[t3[n3]] = Object.getOwnPropertyDescriptor(e3, t3[n3]);
	  return r3;
	};
	var te = /%[sdj%]/g;
	X.format = function(e3) {
	  if (!ge(e3)) {
	    for (var t3 = [], r3 = 0; r3 < arguments.length; r3++)
	      t3.push(oe(arguments[r3]));
	    return t3.join(" ");
	  }
	  r3 = 1;
	  for (var n3 = arguments, i3 = n3.length, o3 = String(e3).replace(te, function(e4) {
	    if ("%%" === e4)
	      return "%";
	    if (r3 >= i3)
	      return e4;
	    switch (e4) {
	      case "%s":
	        return String(n3[r3++]);
	      case "%d":
	        return Number(n3[r3++]);
	      case "%j":
	        try {
	          return JSON.stringify(n3[r3++]);
	        } catch (e5) {
	          return "[Circular]";
	        }
	      default:
	        return e4;
	    }
	  }), u3 = n3[r3]; r3 < i3; u3 = n3[++r3])
	    le(u3) || !he(u3) ? o3 += " " + u3 : o3 += " " + oe(u3);
	  return o3;
	}, X.deprecate = function(e3, t3) {
	  if (void 0 !== Y && true === Y.noDeprecation)
	    return e3;
	  if (void 0 === Y)
	    return function() {
	      return X.deprecate(e3, t3).apply(this || Q, arguments);
	    };
	  var r3 = false;
	  return function() {
	    if (!r3) {
	      if (Y.throwDeprecation)
	        throw new Error(t3);
	      Y.traceDeprecation ? console.trace(t3) : console.error(t3), r3 = true;
	    }
	    return e3.apply(this || Q, arguments);
	  };
	};
	var re = {};
	var ne = /^$/;
	if (Y.env.NODE_DEBUG) {
	  ie = Y.env.NODE_DEBUG;
	  ie = ie.replace(/[|\\{}()[\]^$+?.]/g, "\\$&").replace(/\*/g, ".*").replace(/,/g, "$|^").toUpperCase(), ne = new RegExp("^" + ie + "$", "i");
	}
	var ie;
	function oe(e3, t3) {
	  var r3 = { seen: [], stylize: fe };
	  return arguments.length >= 3 && (r3.depth = arguments[2]), arguments.length >= 4 && (r3.colors = arguments[3]), ye(t3) ? r3.showHidden = t3 : t3 && X._extend(r3, t3), be(r3.showHidden) && (r3.showHidden = false), be(r3.depth) && (r3.depth = 2), be(r3.colors) && (r3.colors = false), be(r3.customInspect) && (r3.customInspect = true), r3.colors && (r3.stylize = ue), ae(r3, e3, r3.depth);
	}
	__name(oe, "oe");
	function ue(e3, t3) {
	  var r3 = oe.styles[t3];
	  return r3 ? "\x1B[" + oe.colors[r3][0] + "m" + e3 + "\x1B[" + oe.colors[r3][1] + "m" : e3;
	}
	__name(ue, "ue");
	function fe(e3, t3) {
	  return e3;
	}
	__name(fe, "fe");
	function ae(e3, t3, r3) {
	  if (e3.customInspect && t3 && we(t3.inspect) && t3.inspect !== X.inspect && (!t3.constructor || t3.constructor.prototype !== t3)) {
	    var n3 = t3.inspect(r3, e3);
	    return ge(n3) || (n3 = ae(e3, n3, r3)), n3;
	  }
	  var i3 = function(e4, t4) {
	    if (be(t4))
	      return e4.stylize("undefined", "undefined");
	    if (ge(t4)) {
	      var r4 = "'" + JSON.stringify(t4).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
	      return e4.stylize(r4, "string");
	    }
	    if (de(t4))
	      return e4.stylize("" + t4, "number");
	    if (ye(t4))
	      return e4.stylize("" + t4, "boolean");
	    if (le(t4))
	      return e4.stylize("null", "null");
	  }(e3, t3);
	  if (i3)
	    return i3;
	  var o3 = Object.keys(t3), u3 = function(e4) {
	    var t4 = {};
	    return e4.forEach(function(e5, r4) {
	      t4[e5] = true;
	    }), t4;
	  }(o3);
	  if (e3.showHidden && (o3 = Object.getOwnPropertyNames(t3)), Ae(t3) && (o3.indexOf("message") >= 0 || o3.indexOf("description") >= 0))
	    return ce(t3);
	  if (0 === o3.length) {
	    if (we(t3)) {
	      var f3 = t3.name ? ": " + t3.name : "";
	      return e3.stylize("[Function" + f3 + "]", "special");
	    }
	    if (me(t3))
	      return e3.stylize(RegExp.prototype.toString.call(t3), "regexp");
	    if (je(t3))
	      return e3.stylize(Date.prototype.toString.call(t3), "date");
	    if (Ae(t3))
	      return ce(t3);
	  }
	  var a3, c3 = "", s4 = false, p3 = ["{", "}"];
	  (pe(t3) && (s4 = true, p3 = ["[", "]"]), we(t3)) && (c3 = " [Function" + (t3.name ? ": " + t3.name : "") + "]");
	  return me(t3) && (c3 = " " + RegExp.prototype.toString.call(t3)), je(t3) && (c3 = " " + Date.prototype.toUTCString.call(t3)), Ae(t3) && (c3 = " " + ce(t3)), 0 !== o3.length || s4 && 0 != t3.length ? r3 < 0 ? me(t3) ? e3.stylize(RegExp.prototype.toString.call(t3), "regexp") : e3.stylize("[Object]", "special") : (e3.seen.push(t3), a3 = s4 ? function(e4, t4, r4, n4, i4) {
	    for (var o4 = [], u4 = 0, f4 = t4.length; u4 < f4; ++u4)
	      ke(t4, String(u4)) ? o4.push(se(e4, t4, r4, n4, String(u4), true)) : o4.push("");
	    return i4.forEach(function(i5) {
	      i5.match(/^\d+$/) || o4.push(se(e4, t4, r4, n4, i5, true));
	    }), o4;
	  }(e3, t3, r3, u3, o3) : o3.map(function(n4) {
	    return se(e3, t3, r3, u3, n4, s4);
	  }), e3.seen.pop(), function(e4, t4, r4) {
	    var n4 = 0;
	    if (e4.reduce(function(e5, t5) {
	      return n4++, t5.indexOf("\n") >= 0 && n4++, e5 + t5.replace(/\u001b\[\d\d?m/g, "").length + 1;
	    }, 0) > 60)
	      return r4[0] + ("" === t4 ? "" : t4 + "\n ") + " " + e4.join(",\n  ") + " " + r4[1];
	    return r4[0] + t4 + " " + e4.join(", ") + " " + r4[1];
	  }(a3, c3, p3)) : p3[0] + c3 + p3[1];
	}
	__name(ae, "ae");
	function ce(e3) {
	  return "[" + Error.prototype.toString.call(e3) + "]";
	}
	__name(ce, "ce");
	function se(e3, t3, r3, n3, i3, o3) {
	  var u3, f3, a3;
	  if ((a3 = Object.getOwnPropertyDescriptor(t3, i3) || { value: t3[i3] }).get ? f3 = a3.set ? e3.stylize("[Getter/Setter]", "special") : e3.stylize("[Getter]", "special") : a3.set && (f3 = e3.stylize("[Setter]", "special")), ke(n3, i3) || (u3 = "[" + i3 + "]"), f3 || (e3.seen.indexOf(a3.value) < 0 ? (f3 = le(r3) ? ae(e3, a3.value, null) : ae(e3, a3.value, r3 - 1)).indexOf("\n") > -1 && (f3 = o3 ? f3.split("\n").map(function(e4) {
	    return "  " + e4;
	  }).join("\n").substr(2) : "\n" + f3.split("\n").map(function(e4) {
	    return "   " + e4;
	  }).join("\n")) : f3 = e3.stylize("[Circular]", "special")), be(u3)) {
	    if (o3 && i3.match(/^\d+$/))
	      return f3;
	    (u3 = JSON.stringify("" + i3)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/) ? (u3 = u3.substr(1, u3.length - 2), u3 = e3.stylize(u3, "name")) : (u3 = u3.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'"), u3 = e3.stylize(u3, "string"));
	  }
	  return u3 + ": " + f3;
	}
	__name(se, "se");
	function pe(e3) {
	  return Array.isArray(e3);
	}
	__name(pe, "pe");
	function ye(e3) {
	  return "boolean" == typeof e3;
	}
	__name(ye, "ye");
	function le(e3) {
	  return null === e3;
	}
	__name(le, "le");
	function de(e3) {
	  return "number" == typeof e3;
	}
	__name(de, "de");
	function ge(e3) {
	  return "string" == typeof e3;
	}
	__name(ge, "ge");
	function be(e3) {
	  return void 0 === e3;
	}
	__name(be, "be");
	function me(e3) {
	  return he(e3) && "[object RegExp]" === ve(e3);
	}
	__name(me, "me");
	function he(e3) {
	  return "object" == typeof e3 && null !== e3;
	}
	__name(he, "he");
	function je(e3) {
	  return he(e3) && "[object Date]" === ve(e3);
	}
	__name(je, "je");
	function Ae(e3) {
	  return he(e3) && ("[object Error]" === ve(e3) || e3 instanceof Error);
	}
	__name(Ae, "Ae");
	function we(e3) {
	  return "function" == typeof e3;
	}
	__name(we, "we");
	function ve(e3) {
	  return Object.prototype.toString.call(e3);
	}
	__name(ve, "ve");
	function Oe(e3) {
	  return e3 < 10 ? "0" + e3.toString(10) : e3.toString(10);
	}
	__name(Oe, "Oe");
	X.debuglog = function(e3) {
	  if (e3 = e3.toUpperCase(), !re[e3])
	    if (ne.test(e3)) {
	      var t3 = Y.pid;
	      re[e3] = function() {
	        var r3 = X.format.apply(X, arguments);
	        console.error("%s %d: %s", e3, t3, r3);
	      };
	    } else
	      re[e3] = function() {
	      };
	  return re[e3];
	}, X.inspect = oe, oe.colors = { bold: [1, 22], italic: [3, 23], underline: [4, 24], inverse: [7, 27], white: [37, 39], grey: [90, 39], black: [30, 39], blue: [34, 39], cyan: [36, 39], green: [32, 39], magenta: [35, 39], red: [31, 39], yellow: [33, 39] }, oe.styles = { special: "cyan", number: "yellow", boolean: "yellow", undefined: "grey", null: "bold", string: "green", date: "magenta", regexp: "red" }, X.types = o$2, X.isArray = pe, X.isBoolean = ye, X.isNull = le, X.isNullOrUndefined = function(e3) {
	  return null == e3;
	}, X.isNumber = de, X.isString = ge, X.isSymbol = function(e3) {
	  return "symbol" == typeof e3;
	}, X.isUndefined = be, X.isRegExp = me, X.types.isRegExp = me, X.isObject = he, X.isDate = je, X.types.isDate = je, X.isError = Ae, X.types.isNativeError = Ae, X.isFunction = we, X.isPrimitive = function(e3) {
	  return null === e3 || "boolean" == typeof e3 || "number" == typeof e3 || "string" == typeof e3 || "symbol" == typeof e3 || void 0 === e3;
	}, X.isBuffer = i$1;
	var Se = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
	function Be() {
	  var e3 = /* @__PURE__ */ new Date(), t3 = [Oe(e3.getHours()), Oe(e3.getMinutes()), Oe(e3.getSeconds())].join(":");
	  return [e3.getDate(), Se[e3.getMonth()], t3].join(" ");
	}
	__name(Be, "Be");
	function ke(e3, t3) {
	  return Object.prototype.hasOwnProperty.call(e3, t3);
	}
	__name(ke, "ke");
	X.log = function() {
	  console.log("%s - %s", Be(), X.format.apply(X, arguments));
	}, X.inherits = t$2, X._extend = function(e3, t3) {
	  if (!t3 || !he(t3))
	    return e3;
	  for (var r3 = Object.keys(t3), n3 = r3.length; n3--; )
	    e3[r3[n3]] = t3[r3[n3]];
	  return e3;
	};
	var Ee = "undefined" != typeof Symbol ? Symbol("util.promisify.custom") : void 0;
	function De(e3, t3) {
	  if (!e3) {
	    var r3 = new Error("Promise was rejected with a falsy value");
	    r3.reason = e3, e3 = r3;
	  }
	  return t3(e3);
	}
	__name(De, "De");
	X.promisify = function(e3) {
	  if ("function" != typeof e3)
	    throw new TypeError('The "original" argument must be of type Function');
	  if (Ee && e3[Ee]) {
	    var t3;
	    if ("function" != typeof (t3 = e3[Ee]))
	      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
	    return Object.defineProperty(t3, Ee, { value: t3, enumerable: false, writable: false, configurable: true }), t3;
	  }
	  function t3() {
	    for (var t4, r3, n3 = new Promise(function(e4, n4) {
	      t4 = e4, r3 = n4;
	    }), i3 = [], o3 = 0; o3 < arguments.length; o3++)
	      i3.push(arguments[o3]);
	    i3.push(function(e4, n4) {
	      e4 ? r3(e4) : t4(n4);
	    });
	    try {
	      e3.apply(this || Q, i3);
	    } catch (e4) {
	      r3(e4);
	    }
	    return n3;
	  }
	  __name(t3, "t");
	  return Object.setPrototypeOf(t3, Object.getPrototypeOf(e3)), Ee && Object.defineProperty(t3, Ee, { value: t3, enumerable: false, writable: false, configurable: true }), Object.defineProperties(t3, ee(e3));
	}, X.promisify.custom = Ee, X.callbackify = function(e3) {
	  if ("function" != typeof e3)
	    throw new TypeError('The "original" argument must be of type Function');
	  function t3() {
	    for (var t4 = [], r3 = 0; r3 < arguments.length; r3++)
	      t4.push(arguments[r3]);
	    var n3 = t4.pop();
	    if ("function" != typeof n3)
	      throw new TypeError("The last argument must be of type Function");
	    var i3 = this || Q, o3 = /* @__PURE__ */ __name(function() {
	      return n3.apply(i3, arguments);
	    }, "o");
	    e3.apply(this || Q, t4).then(function(e4) {
	      Y.nextTick(o3.bind(null, null, e4));
	    }, function(e4) {
	      Y.nextTick(De.bind(null, e4, o3));
	    });
	  }
	  __name(t3, "t");
	  return Object.setPrototypeOf(t3, Object.getPrototypeOf(e3)), Object.defineProperties(t3, ee(e3)), t3;
	};

	// node_modules/@jspm/core/nodelibs/browser/chunk-ce0fbc82.js
	X._extend;
	X.callbackify;
	X.debuglog;
	X.deprecate;
	X.format;
	X.inherits;
	X.inspect;
	X.isArray;
	X.isBoolean;
	X.isBuffer;
	X.isDate;
	X.isError;
	X.isFunction;
	X.isNull;
	X.isNullOrUndefined;
	X.isNumber;
	X.isObject;
	X.isPrimitive;
	X.isRegExp;
	X.isString;
	X.isSymbol;
	X.isUndefined;
	X.log;
	X.promisify;
	X._extend;
	X.callbackify;
	X.debuglog;
	X.deprecate;
	X.format;
	X.inherits;
	X.inspect;
	X.isArray;
	X.isBoolean;
	X.isBuffer;
	X.isDate;
	X.isError;
	X.isFunction;
	X.isNull;
	X.isNullOrUndefined;
	X.isNumber;
	X.isObject;
	X.isPrimitive;
	X.isRegExp;
	X.isString;
	X.isSymbol;
	X.isUndefined;
	X.log;
	X.promisify;
	X.types;

	// node-modules-polyfills:util
	X._extend;
	X.callbackify;
	X.debuglog;
	X.deprecate;
	X.format;
	X.inherits;
	var inspect2 = X.inspect;
	X.isArray;
	X.isBoolean;
	X.isBuffer;
	X.isDate;
	X.isError;
	X.isFunction;
	X.isNull;
	X.isNullOrUndefined;
	X.isNumber;
	X.isObject;
	X.isPrimitive;
	X.isRegExp;
	X.isString;
	X.isSymbol;
	X.isUndefined;
	X.log;
	X.promisify;
	X.types;
	X.TextEncoder = globalThis.TextEncoder;
	X.TextDecoder = globalThis.TextDecoder;

	// src/lib/errors/BaseError.ts
	var customInspectSymbol = Symbol.for("nodejs.util.inspect.custom");
	var customInspectSymbolStackLess = Symbol.for("nodejs.util.inspect.custom.stack-less");
	var _BaseError = class _BaseError extends Error {
	  toJSON() {
	    return {
	      name: this.name,
	      message: this.message
	    };
	  }
	  [customInspectSymbol](depth, options) {
	    return `${this[customInspectSymbolStackLess](depth, options)}
${this.stack.slice(this.stack.indexOf("\n"))}`;
	  }
	};
	__name(_BaseError, "BaseError");
	var BaseError = _BaseError;

	// src/lib/errors/BaseConstraintError.ts
	var _BaseConstraintError = class _BaseConstraintError extends BaseError {
	  constructor(constraint, message, given) {
	    super(message);
	    this.constraint = constraint;
	    this.given = given;
	  }
	  toJSON() {
	    return {
	      name: this.name,
	      constraint: this.constraint,
	      given: this.given,
	      message: this.message
	    };
	  }
	};
	__name(_BaseConstraintError, "BaseConstraintError");
	var BaseConstraintError = _BaseConstraintError;

	// src/lib/errors/ExpectedConstraintError.ts
	var _ExpectedConstraintError = class _ExpectedConstraintError extends BaseConstraintError {
	  constructor(constraint, message, given, expected) {
	    super(constraint, message, given);
	    this.expected = expected;
	  }
	  toJSON() {
	    return {
	      name: this.name,
	      constraint: this.constraint,
	      given: this.given,
	      expected: this.expected,
	      message: this.message
	    };
	  }
	  [customInspectSymbolStackLess](depth, options) {
	    const constraint = options.stylize(this.constraint, "string");
	    if (depth < 0) {
	      return options.stylize(`[ExpectedConstraintError: ${constraint}]`, "special");
	    }
	    const newOptions = { ...options, depth: options.depth === null ? null : options.depth - 1 };
	    const padding = `
  ${options.stylize("|", "undefined")} `;
	    const given = inspect2(this.given, newOptions).replace(/\n/g, padding);
	    const header = `${options.stylize("ExpectedConstraintError", "special")} > ${constraint}`;
	    const message = options.stylize(this.message, "regexp");
	    const expectedBlock = `
  ${options.stylize("Expected: ", "string")}${options.stylize(this.expected, "boolean")}`;
	    const givenBlock = `
  ${options.stylize("Received:", "regexp")}${padding}${given}`;
	    return `${header}
  ${message}
${expectedBlock}
${givenBlock}`;
	  }
	};
	__name(_ExpectedConstraintError, "ExpectedConstraintError");
	var ExpectedConstraintError = _ExpectedConstraintError;

	// src/lib/Result.ts
	var _Result = class _Result {
	  constructor(success, value, error) {
	    this.success = success;
	    if (success) {
	      this.value = value;
	    } else {
	      this.error = error;
	    }
	  }
	  isOk() {
	    return this.success;
	  }
	  isErr() {
	    return !this.success;
	  }
	  unwrap() {
	    if (this.isOk())
	      return this.value;
	    throw this.error;
	  }
	  static ok(value) {
	    return new _Result(true, value);
	  }
	  static err(error) {
	    return new _Result(false, void 0, error);
	  }
	};
	__name(_Result, "Result");
	var Result = _Result;

	// src/constraints/ObjectConstrains.ts
	function whenConstraint(key, options, validator, validatorOptions) {
	  return {
	    run(input, parent) {
	      if (!parent) {
	        return Result.err(
	          new ExpectedConstraintError(
	            "s.object(T.when)",
	            validatorOptions?.message ?? "Validator has no parent",
	            parent,
	            "Validator to have a parent"
	          )
	        );
	      }
	      const isKeyArray = Array.isArray(key);
	      const value = isKeyArray ? key.map((k2) => get__default.default(parent, k2)) : get__default.default(parent, key);
	      const predicate = resolveBooleanIs(options, value, isKeyArray) ? options.then : options.otherwise;
	      if (predicate) {
	        return predicate(validator).run(input);
	      }
	      return Result.ok(input);
	    }
	  };
	}
	__name(whenConstraint, "whenConstraint");
	function resolveBooleanIs(options, value, isKeyArray) {
	  if (options.is === void 0) {
	    return isKeyArray ? !value.some((val) => !val) : Boolean(value);
	  }
	  if (typeof options.is === "function") {
	    return options.is(value);
	  }
	  return value === options.is;
	}
	__name(resolveBooleanIs, "resolveBooleanIs");

	// src/lib/configs.ts
	var validationEnabled = true;
	function setGlobalValidationEnabled(enabled) {
	  validationEnabled = enabled;
	}
	__name(setGlobalValidationEnabled, "setGlobalValidationEnabled");
	function getGlobalValidationEnabled() {
	  return validationEnabled;
	}
	__name(getGlobalValidationEnabled, "getGlobalValidationEnabled");

	// src/validators/util/getValue.ts
	function getValue(valueOrFn) {
	  return typeof valueOrFn === "function" ? valueOrFn() : valueOrFn;
	}
	__name(getValue, "getValue");

	// src/validators/BaseValidator.ts
	var _BaseValidator = class _BaseValidator {
	  constructor(validatorOptions = {}, constraints = []) {
	    this.constraints = [];
	    this.isValidationEnabled = null;
	    this.constraints = constraints;
	    this.validatorOptions = validatorOptions;
	  }
	  setParent(parent) {
	    this.parent = parent;
	    return this;
	  }
	  optional(options = this.validatorOptions) {
	    return new UnionValidator([new LiteralValidator(void 0, options), this.clone()], options);
	  }
	  nullable(options = this.validatorOptions) {
	    return new UnionValidator([new LiteralValidator(null, options), this.clone()], options);
	  }
	  nullish(options = this.validatorOptions) {
	    return new UnionValidator([new NullishValidator(options), this.clone()], options);
	  }
	  array(options = this.validatorOptions) {
	    return new ArrayValidator(this.clone(), options);
	  }
	  set(options = this.validatorOptions) {
	    return new SetValidator(this.clone(), options);
	  }
	  or(...predicates) {
	    return new UnionValidator([this.clone(), ...predicates], this.validatorOptions);
	  }
	  transform(cb, options = this.validatorOptions) {
	    return this.addConstraint(
	      {
	        run: (input) => Result.ok(cb(input))
	      },
	      options
	    );
	  }
	  reshape(cb, options = this.validatorOptions) {
	    return this.addConstraint(
	      {
	        run: cb
	      },
	      options
	    );
	  }
	  default(value, options = this.validatorOptions) {
	    return new DefaultValidator(this.clone(), value, options);
	  }
	  when(key, options, validatorOptions) {
	    return this.addConstraint(whenConstraint(key, options, this, validatorOptions));
	  }
	  describe(description) {
	    const clone = this.clone();
	    clone.description = description;
	    return clone;
	  }
	  run(value) {
	    let result = this.handle(value);
	    if (result.isErr())
	      return result;
	    for (const constraint of this.constraints) {
	      result = constraint.run(result.value, this.parent);
	      if (result.isErr())
	        break;
	    }
	    return result;
	  }
	  parse(value) {
	    if (!this.shouldRunConstraints) {
	      return this.handle(value).unwrap();
	    }
	    return this.constraints.reduce((v2, constraint) => constraint.run(v2).unwrap(), this.handle(value).unwrap());
	  }
	  is(value) {
	    return this.run(value).isOk();
	  }
	  /**
	   * Sets if the validator should also run constraints or just do basic checks.
	   * @param isValidationEnabled Whether this validator should be enabled or disabled. You can pass boolean or a function returning boolean which will be called just before parsing.
	   * Set to `null` to go off of the global configuration.
	   */
	  setValidationEnabled(isValidationEnabled) {
	    const clone = this.clone();
	    clone.isValidationEnabled = isValidationEnabled;
	    return clone;
	  }
	  getValidationEnabled() {
	    return getValue(this.isValidationEnabled);
	  }
	  get shouldRunConstraints() {
	    return getValue(this.isValidationEnabled) ?? getGlobalValidationEnabled();
	  }
	  clone() {
	    const clone = Reflect.construct(this.constructor, [this.validatorOptions, this.constraints]);
	    clone.isValidationEnabled = this.isValidationEnabled;
	    return clone;
	  }
	  addConstraint(constraint, validatorOptions = this.validatorOptions) {
	    const clone = this.clone();
	    clone.validatorOptions = validatorOptions;
	    clone.constraints = clone.constraints.concat(constraint);
	    return clone;
	  }
	};
	__name(_BaseValidator, "BaseValidator");
	var BaseValidator = _BaseValidator;
	function isUnique(input) {
	  if (input.length < 2)
	    return true;
	  const uniqueArray2 = uniqWith__default.default(input, fastDeepEqual__default.default);
	  return uniqueArray2.length === input.length;
	}
	__name(isUnique, "isUnique");

	// src/constraints/util/operators.ts
	function lessThan(a3, b2) {
	  return a3 < b2;
	}
	__name(lessThan, "lessThan");
	function lessThanOrEqual(a3, b2) {
	  return a3 <= b2;
	}
	__name(lessThanOrEqual, "lessThanOrEqual");
	function greaterThan(a3, b2) {
	  return a3 > b2;
	}
	__name(greaterThan, "greaterThan");
	function greaterThanOrEqual(a3, b2) {
	  return a3 >= b2;
	}
	__name(greaterThanOrEqual, "greaterThanOrEqual");
	function equal(a3, b2) {
	  return a3 === b2;
	}
	__name(equal, "equal");
	function notEqual(a3, b2) {
	  return a3 !== b2;
	}
	__name(notEqual, "notEqual");

	// src/constraints/ArrayConstraints.ts
	function arrayLengthComparator(comparator, name, expected, length, options) {
	  return {
	    run(input) {
	      return comparator(input.length, length) ? Result.ok(input) : Result.err(new ExpectedConstraintError(name, options?.message ?? "Invalid Array length", input, expected));
	    }
	  };
	}
	__name(arrayLengthComparator, "arrayLengthComparator");
	function arrayLengthLessThan(value, options) {
	  const expected = `expected.length < ${value}`;
	  return arrayLengthComparator(lessThan, "s.array(T).lengthLessThan()", expected, value, options);
	}
	__name(arrayLengthLessThan, "arrayLengthLessThan");
	function arrayLengthLessThanOrEqual(value, options) {
	  const expected = `expected.length <= ${value}`;
	  return arrayLengthComparator(lessThanOrEqual, "s.array(T).lengthLessThanOrEqual()", expected, value, options);
	}
	__name(arrayLengthLessThanOrEqual, "arrayLengthLessThanOrEqual");
	function arrayLengthGreaterThan(value, options) {
	  const expected = `expected.length > ${value}`;
	  return arrayLengthComparator(greaterThan, "s.array(T).lengthGreaterThan()", expected, value, options);
	}
	__name(arrayLengthGreaterThan, "arrayLengthGreaterThan");
	function arrayLengthGreaterThanOrEqual(value, options) {
	  const expected = `expected.length >= ${value}`;
	  return arrayLengthComparator(greaterThanOrEqual, "s.array(T).lengthGreaterThanOrEqual()", expected, value, options);
	}
	__name(arrayLengthGreaterThanOrEqual, "arrayLengthGreaterThanOrEqual");
	function arrayLengthEqual(value, options) {
	  const expected = `expected.length === ${value}`;
	  return arrayLengthComparator(equal, "s.array(T).lengthEqual()", expected, value, options);
	}
	__name(arrayLengthEqual, "arrayLengthEqual");
	function arrayLengthNotEqual(value, options) {
	  const expected = `expected.length !== ${value}`;
	  return arrayLengthComparator(notEqual, "s.array(T).lengthNotEqual()", expected, value, options);
	}
	__name(arrayLengthNotEqual, "arrayLengthNotEqual");
	function arrayLengthRange(start, endBefore, options) {
	  const expected = `expected.length >= ${start} && expected.length < ${endBefore}`;
	  return {
	    run(input) {
	      return input.length >= start && input.length < endBefore ? Result.ok(input) : Result.err(new ExpectedConstraintError("s.array(T).lengthRange()", options?.message ?? "Invalid Array length", input, expected));
	    }
	  };
	}
	__name(arrayLengthRange, "arrayLengthRange");
	function arrayLengthRangeInclusive(start, end, options) {
	  const expected = `expected.length >= ${start} && expected.length <= ${end}`;
	  return {
	    run(input) {
	      return input.length >= start && input.length <= end ? Result.ok(input) : Result.err(
	        new ExpectedConstraintError("s.array(T).lengthRangeInclusive()", options?.message ?? "Invalid Array length", input, expected)
	      );
	    }
	  };
	}
	__name(arrayLengthRangeInclusive, "arrayLengthRangeInclusive");
	function arrayLengthRangeExclusive(startAfter, endBefore, options) {
	  const expected = `expected.length > ${startAfter} && expected.length < ${endBefore}`;
	  return {
	    run(input) {
	      return input.length > startAfter && input.length < endBefore ? Result.ok(input) : Result.err(
	        new ExpectedConstraintError("s.array(T).lengthRangeExclusive()", options?.message ?? "Invalid Array length", input, expected)
	      );
	    }
	  };
	}
	__name(arrayLengthRangeExclusive, "arrayLengthRangeExclusive");
	function uniqueArray(options) {
	  return {
	    run(input) {
	      return isUnique(input) ? Result.ok(input) : Result.err(
	        new ExpectedConstraintError(
	          "s.array(T).unique()",
	          options?.message ?? "Array values are not unique",
	          input,
	          "Expected all values to be unique"
	        )
	      );
	    }
	  };
	}
	__name(uniqueArray, "uniqueArray");

	// src/lib/errors/CombinedPropertyError.ts
	var _CombinedPropertyError = class _CombinedPropertyError extends BaseError {
	  constructor(errors, validatorOptions) {
	    super(validatorOptions?.message ?? "Received one or more errors");
	    this.errors = errors;
	  }
	  [customInspectSymbolStackLess](depth, options) {
	    if (depth < 0) {
	      return options.stylize("[CombinedPropertyError]", "special");
	    }
	    const newOptions = { ...options, depth: options.depth === null ? null : options.depth - 1, compact: true };
	    const padding = `
  ${options.stylize("|", "undefined")} `;
	    const header = `${options.stylize("CombinedPropertyError", "special")} (${options.stylize(this.errors.length.toString(), "number")})`;
	    const message = options.stylize(this.message, "regexp");
	    const errors = this.errors.map(([key, error]) => {
	      const property = _CombinedPropertyError.formatProperty(key, options);
	      const body = error[customInspectSymbolStackLess](depth - 1, newOptions).replace(/\n/g, padding);
	      return `  input${property}${padding}${body}`;
	    }).join("\n\n");
	    return `${header}
  ${message}

${errors}`;
	  }
	  static formatProperty(key, options) {
	    if (typeof key === "string")
	      return options.stylize(`.${key}`, "symbol");
	    if (typeof key === "number")
	      return `[${options.stylize(key.toString(), "number")}]`;
	    return `[${options.stylize("Symbol", "symbol")}(${key.description})]`;
	  }
	};
	__name(_CombinedPropertyError, "CombinedPropertyError");
	var CombinedPropertyError = _CombinedPropertyError;

	// src/lib/errors/ValidationError.ts
	var _ValidationError = class _ValidationError extends BaseError {
	  constructor(validator, message, given) {
	    super(message);
	    this.validator = validator;
	    this.given = given;
	  }
	  toJSON() {
	    return {
	      name: this.name,
	      message: "Unknown validation error occurred.",
	      validator: this.validator,
	      given: this.given
	    };
	  }
	  [customInspectSymbolStackLess](depth, options) {
	    const validator = options.stylize(this.validator, "string");
	    if (depth < 0) {
	      return options.stylize(`[ValidationError: ${validator}]`, "special");
	    }
	    const newOptions = { ...options, depth: options.depth === null ? null : options.depth - 1, compact: true };
	    const padding = `
  ${options.stylize("|", "undefined")} `;
	    const given = inspect2(this.given, newOptions).replace(/\n/g, padding);
	    const header = `${options.stylize("ValidationError", "special")} > ${validator}`;
	    const message = options.stylize(this.message, "regexp");
	    const givenBlock = `
  ${options.stylize("Received:", "regexp")}${padding}${given}`;
	    return `${header}
  ${message}
${givenBlock}`;
	  }
	};
	__name(_ValidationError, "ValidationError");
	var ValidationError = _ValidationError;

	// src/validators/ArrayValidator.ts
	var _ArrayValidator = class _ArrayValidator extends BaseValidator {
	  constructor(validator, validatorOptions = {}, constraints = []) {
	    super(validatorOptions, constraints);
	    this.validator = validator;
	  }
	  lengthLessThan(length, options = this.validatorOptions) {
	    return this.addConstraint(arrayLengthLessThan(length, options));
	  }
	  lengthLessThanOrEqual(length, options = this.validatorOptions) {
	    return this.addConstraint(arrayLengthLessThanOrEqual(length, options));
	  }
	  lengthGreaterThan(length, options = this.validatorOptions) {
	    return this.addConstraint(arrayLengthGreaterThan(length, options));
	  }
	  lengthGreaterThanOrEqual(length, options = this.validatorOptions) {
	    return this.addConstraint(arrayLengthGreaterThanOrEqual(length, options));
	  }
	  lengthEqual(length, options = this.validatorOptions) {
	    return this.addConstraint(arrayLengthEqual(length, options));
	  }
	  lengthNotEqual(length, options = this.validatorOptions) {
	    return this.addConstraint(arrayLengthNotEqual(length, options));
	  }
	  lengthRange(start, endBefore, options = this.validatorOptions) {
	    return this.addConstraint(arrayLengthRange(start, endBefore, options));
	  }
	  lengthRangeInclusive(startAt, endAt, options = this.validatorOptions) {
	    return this.addConstraint(arrayLengthRangeInclusive(startAt, endAt, options));
	  }
	  lengthRangeExclusive(startAfter, endBefore, options = this.validatorOptions) {
	    return this.addConstraint(arrayLengthRangeExclusive(startAfter, endBefore, options));
	  }
	  unique(options = this.validatorOptions) {
	    return this.addConstraint(uniqueArray(options));
	  }
	  clone() {
	    return Reflect.construct(this.constructor, [this.validator, this.validatorOptions, this.constraints]);
	  }
	  handle(values) {
	    if (!Array.isArray(values)) {
	      return Result.err(new ValidationError("s.array(T)", this.validatorOptions.message ?? "Expected an array", values));
	    }
	    if (!this.shouldRunConstraints) {
	      return Result.ok(values);
	    }
	    const errors = [];
	    const transformed = [];
	    for (let i3 = 0; i3 < values.length; i3++) {
	      const result = this.validator.run(values[i3]);
	      if (result.isOk())
	        transformed.push(result.value);
	      else
	        errors.push([i3, result.error]);
	    }
	    return errors.length === 0 ? Result.ok(transformed) : Result.err(new CombinedPropertyError(errors, this.validatorOptions));
	  }
	};
	__name(_ArrayValidator, "ArrayValidator");
	var ArrayValidator = _ArrayValidator;

	// src/constraints/BigIntConstraints.ts
	function bigintComparator(comparator, name, expected, number, options) {
	  return {
	    run(input) {
	      return comparator(input, number) ? Result.ok(input) : Result.err(new ExpectedConstraintError(name, options?.message ?? "Invalid bigint value", input, expected));
	    }
	  };
	}
	__name(bigintComparator, "bigintComparator");
	function bigintLessThan(value, options) {
	  const expected = `expected < ${value}n`;
	  return bigintComparator(lessThan, "s.bigint().lessThan()", expected, value, options);
	}
	__name(bigintLessThan, "bigintLessThan");
	function bigintLessThanOrEqual(value, options) {
	  const expected = `expected <= ${value}n`;
	  return bigintComparator(lessThanOrEqual, "s.bigint().lessThanOrEqual()", expected, value, options);
	}
	__name(bigintLessThanOrEqual, "bigintLessThanOrEqual");
	function bigintGreaterThan(value, options) {
	  const expected = `expected > ${value}n`;
	  return bigintComparator(greaterThan, "s.bigint().greaterThan()", expected, value, options);
	}
	__name(bigintGreaterThan, "bigintGreaterThan");
	function bigintGreaterThanOrEqual(value, options) {
	  const expected = `expected >= ${value}n`;
	  return bigintComparator(greaterThanOrEqual, "s.bigint().greaterThanOrEqual()", expected, value, options);
	}
	__name(bigintGreaterThanOrEqual, "bigintGreaterThanOrEqual");
	function bigintEqual(value, options) {
	  const expected = `expected === ${value}n`;
	  return bigintComparator(equal, "s.bigint().equal()", expected, value, options);
	}
	__name(bigintEqual, "bigintEqual");
	function bigintNotEqual(value, options) {
	  const expected = `expected !== ${value}n`;
	  return bigintComparator(notEqual, "s.bigint().notEqual()", expected, value, options);
	}
	__name(bigintNotEqual, "bigintNotEqual");
	function bigintDivisibleBy(divider, options) {
	  const expected = `expected % ${divider}n === 0n`;
	  return {
	    run(input) {
	      return input % divider === 0n ? Result.ok(input) : Result.err(new ExpectedConstraintError("s.bigint().divisibleBy()", options?.message ?? "BigInt is not divisible", input, expected));
	    }
	  };
	}
	__name(bigintDivisibleBy, "bigintDivisibleBy");

	// src/validators/BigIntValidator.ts
	var _BigIntValidator = class _BigIntValidator extends BaseValidator {
	  lessThan(number, options = this.validatorOptions) {
	    return this.addConstraint(bigintLessThan(number, options));
	  }
	  lessThanOrEqual(number, options = this.validatorOptions) {
	    return this.addConstraint(bigintLessThanOrEqual(number, options));
	  }
	  greaterThan(number, options = this.validatorOptions) {
	    return this.addConstraint(bigintGreaterThan(number, options));
	  }
	  greaterThanOrEqual(number, options = this.validatorOptions) {
	    return this.addConstraint(bigintGreaterThanOrEqual(number, options));
	  }
	  equal(number, options = this.validatorOptions) {
	    return this.addConstraint(bigintEqual(number, options));
	  }
	  notEqual(number, options = this.validatorOptions) {
	    return this.addConstraint(bigintNotEqual(number, options));
	  }
	  positive(options = this.validatorOptions) {
	    return this.greaterThanOrEqual(0n, options);
	  }
	  negative(options = this.validatorOptions) {
	    return this.lessThan(0n, options);
	  }
	  divisibleBy(number, options = this.validatorOptions) {
	    return this.addConstraint(bigintDivisibleBy(number, options));
	  }
	  abs(options = this.validatorOptions) {
	    return this.transform((value) => value < 0 ? -value : value, options);
	  }
	  intN(bits, options = this.validatorOptions) {
	    return this.transform((value) => BigInt.asIntN(bits, value), options);
	  }
	  uintN(bits, options = this.validatorOptions) {
	    return this.transform((value) => BigInt.asUintN(bits, value), options);
	  }
	  handle(value) {
	    return typeof value === "bigint" ? Result.ok(value) : Result.err(new ValidationError("s.bigint()", this.validatorOptions.message ?? "Expected a bigint primitive", value));
	  }
	};
	__name(_BigIntValidator, "BigIntValidator");
	var BigIntValidator = _BigIntValidator;

	// src/constraints/BooleanConstraints.ts
	function booleanTrue(options) {
	  return {
	    run(input) {
	      return input ? Result.ok(input) : Result.err(new ExpectedConstraintError("s.boolean().true()", options?.message ?? "Invalid boolean value", input, "true"));
	    }
	  };
	}
	__name(booleanTrue, "booleanTrue");
	function booleanFalse(options) {
	  return {
	    run(input) {
	      return input ? Result.err(new ExpectedConstraintError("s.boolean().false()", options?.message ?? "Invalid boolean value", input, "false")) : Result.ok(input);
	    }
	  };
	}
	__name(booleanFalse, "booleanFalse");

	// src/validators/BooleanValidator.ts
	var _BooleanValidator = class _BooleanValidator extends BaseValidator {
	  true(options = this.validatorOptions) {
	    return this.addConstraint(booleanTrue(options));
	  }
	  false(options = this.validatorOptions) {
	    return this.addConstraint(booleanFalse(options));
	  }
	  equal(value, options = this.validatorOptions) {
	    return value ? this.true(options) : this.false(options);
	  }
	  notEqual(value, options = this.validatorOptions) {
	    return value ? this.false(options) : this.true(options);
	  }
	  handle(value) {
	    return typeof value === "boolean" ? Result.ok(value) : Result.err(new ValidationError("s.boolean()", this.validatorOptions.message ?? "Expected a boolean primitive", value));
	  }
	};
	__name(_BooleanValidator, "BooleanValidator");
	var BooleanValidator = _BooleanValidator;

	// src/constraints/DateConstraints.ts
	function dateComparator(comparator, name, expected, number, options) {
	  return {
	    run(input) {
	      return comparator(input.getTime(), number) ? Result.ok(input) : Result.err(new ExpectedConstraintError(name, options?.message ?? "Invalid Date value", input, expected));
	    }
	  };
	}
	__name(dateComparator, "dateComparator");
	function dateLessThan(value, options) {
	  const expected = `expected < ${value.toISOString()}`;
	  return dateComparator(lessThan, "s.date().lessThan()", expected, value.getTime(), options);
	}
	__name(dateLessThan, "dateLessThan");
	function dateLessThanOrEqual(value, options) {
	  const expected = `expected <= ${value.toISOString()}`;
	  return dateComparator(lessThanOrEqual, "s.date().lessThanOrEqual()", expected, value.getTime(), options);
	}
	__name(dateLessThanOrEqual, "dateLessThanOrEqual");
	function dateGreaterThan(value, options) {
	  const expected = `expected > ${value.toISOString()}`;
	  return dateComparator(greaterThan, "s.date().greaterThan()", expected, value.getTime(), options);
	}
	__name(dateGreaterThan, "dateGreaterThan");
	function dateGreaterThanOrEqual(value, options) {
	  const expected = `expected >= ${value.toISOString()}`;
	  return dateComparator(greaterThanOrEqual, "s.date().greaterThanOrEqual()", expected, value.getTime(), options);
	}
	__name(dateGreaterThanOrEqual, "dateGreaterThanOrEqual");
	function dateEqual(value, options) {
	  const expected = `expected === ${value.toISOString()}`;
	  return dateComparator(equal, "s.date().equal()", expected, value.getTime(), options);
	}
	__name(dateEqual, "dateEqual");
	function dateNotEqual(value, options) {
	  const expected = `expected !== ${value.toISOString()}`;
	  return dateComparator(notEqual, "s.date().notEqual()", expected, value.getTime(), options);
	}
	__name(dateNotEqual, "dateNotEqual");
	function dateInvalid(options) {
	  return {
	    run(input) {
	      return Number.isNaN(input.getTime()) ? Result.ok(input) : Result.err(new ExpectedConstraintError("s.date().invalid()", options?.message ?? "Invalid Date value", input, "expected === NaN"));
	    }
	  };
	}
	__name(dateInvalid, "dateInvalid");
	function dateValid(options) {
	  return {
	    run(input) {
	      return Number.isNaN(input.getTime()) ? Result.err(new ExpectedConstraintError("s.date().valid()", options?.message ?? "Invalid Date value", input, "expected !== NaN")) : Result.ok(input);
	    }
	  };
	}
	__name(dateValid, "dateValid");

	// src/validators/DateValidator.ts
	var _DateValidator = class _DateValidator extends BaseValidator {
	  lessThan(date, options = this.validatorOptions) {
	    return this.addConstraint(dateLessThan(new Date(date), options));
	  }
	  lessThanOrEqual(date, options = this.validatorOptions) {
	    return this.addConstraint(dateLessThanOrEqual(new Date(date), options));
	  }
	  greaterThan(date, options = this.validatorOptions) {
	    return this.addConstraint(dateGreaterThan(new Date(date), options));
	  }
	  greaterThanOrEqual(date, options = this.validatorOptions) {
	    return this.addConstraint(dateGreaterThanOrEqual(new Date(date), options));
	  }
	  equal(date, options = this.validatorOptions) {
	    const resolved = new Date(date);
	    return Number.isNaN(resolved.getTime()) ? this.invalid(options) : this.addConstraint(dateEqual(resolved, options));
	  }
	  notEqual(date, options = this.validatorOptions) {
	    const resolved = new Date(date);
	    return Number.isNaN(resolved.getTime()) ? this.valid(options) : this.addConstraint(dateNotEqual(resolved, options));
	  }
	  valid(options = this.validatorOptions) {
	    return this.addConstraint(dateValid(options));
	  }
	  invalid(options = this.validatorOptions) {
	    return this.addConstraint(dateInvalid(options));
	  }
	  handle(value) {
	    return value instanceof Date ? Result.ok(value) : Result.err(new ValidationError("s.date()", this.validatorOptions.message ?? "Expected a Date", value));
	  }
	};
	__name(_DateValidator, "DateValidator");
	var DateValidator = _DateValidator;

	// src/lib/errors/ExpectedValidationError.ts
	var _ExpectedValidationError = class _ExpectedValidationError extends ValidationError {
	  constructor(validator, message, given, expected) {
	    super(validator, message, given);
	    this.expected = expected;
	  }
	  toJSON() {
	    return {
	      name: this.name,
	      validator: this.validator,
	      given: this.given,
	      expected: this.expected,
	      message: this.message
	    };
	  }
	  [customInspectSymbolStackLess](depth, options) {
	    const validator = options.stylize(this.validator, "string");
	    if (depth < 0) {
	      return options.stylize(`[ExpectedValidationError: ${validator}]`, "special");
	    }
	    const newOptions = { ...options, depth: options.depth === null ? null : options.depth - 1 };
	    const padding = `
  ${options.stylize("|", "undefined")} `;
	    const expected = inspect2(this.expected, newOptions).replace(/\n/g, padding);
	    const given = inspect2(this.given, newOptions).replace(/\n/g, padding);
	    const header = `${options.stylize("ExpectedValidationError", "special")} > ${validator}`;
	    const message = options.stylize(this.message, "regexp");
	    const expectedBlock = `
  ${options.stylize("Expected:", "string")}${padding}${expected}`;
	    const givenBlock = `
  ${options.stylize("Received:", "regexp")}${padding}${given}`;
	    return `${header}
  ${message}
${expectedBlock}
${givenBlock}`;
	  }
	};
	__name(_ExpectedValidationError, "ExpectedValidationError");
	var ExpectedValidationError = _ExpectedValidationError;

	// src/validators/InstanceValidator.ts
	var _InstanceValidator = class _InstanceValidator extends BaseValidator {
	  constructor(expected, validatorOptions = {}, constraints = []) {
	    super(validatorOptions, constraints);
	    this.expected = expected;
	  }
	  handle(value) {
	    return value instanceof this.expected ? Result.ok(value) : Result.err(new ExpectedValidationError("s.instance(V)", this.validatorOptions.message ?? "Expected", value, this.expected));
	  }
	  clone() {
	    return Reflect.construct(this.constructor, [this.expected, this.validatorOptions, this.constraints]);
	  }
	};
	__name(_InstanceValidator, "InstanceValidator");
	var InstanceValidator = _InstanceValidator;

	// src/validators/LiteralValidator.ts
	var _LiteralValidator = class _LiteralValidator extends BaseValidator {
	  constructor(literal, validatorOptions = {}, constraints = []) {
	    super(validatorOptions, constraints);
	    this.expected = literal;
	  }
	  handle(value) {
	    return Object.is(value, this.expected) ? Result.ok(value) : Result.err(
	      new ExpectedValidationError("s.literal(V)", this.validatorOptions.message ?? "Expected values to be equals", value, this.expected)
	    );
	  }
	  clone() {
	    return Reflect.construct(this.constructor, [this.expected, this.validatorOptions, this.constraints]);
	  }
	};
	__name(_LiteralValidator, "LiteralValidator");
	var LiteralValidator = _LiteralValidator;

	// src/validators/NeverValidator.ts
	var _NeverValidator = class _NeverValidator extends BaseValidator {
	  handle(value) {
	    return Result.err(new ValidationError("s.never()", this.validatorOptions.message ?? "Expected a value to not be passed", value));
	  }
	};
	__name(_NeverValidator, "NeverValidator");
	var NeverValidator = _NeverValidator;

	// src/validators/NullishValidator.ts
	var _NullishValidator = class _NullishValidator extends BaseValidator {
	  handle(value) {
	    return value === void 0 || value === null ? Result.ok(value) : Result.err(new ValidationError("s.nullish()", this.validatorOptions.message ?? "Expected undefined or null", value));
	  }
	};
	__name(_NullishValidator, "NullishValidator");
	var NullishValidator = _NullishValidator;

	// src/constraints/NumberConstraints.ts
	function numberComparator(comparator, name, expected, number, options) {
	  return {
	    run(input) {
	      return comparator(input, number) ? Result.ok(input) : Result.err(new ExpectedConstraintError(name, options?.message ?? "Invalid number value", input, expected));
	    }
	  };
	}
	__name(numberComparator, "numberComparator");
	function numberLessThan(value, options) {
	  const expected = `expected < ${value}`;
	  return numberComparator(lessThan, "s.number().lessThan()", expected, value, options);
	}
	__name(numberLessThan, "numberLessThan");
	function numberLessThanOrEqual(value, options) {
	  const expected = `expected <= ${value}`;
	  return numberComparator(lessThanOrEqual, "s.number().lessThanOrEqual()", expected, value, options);
	}
	__name(numberLessThanOrEqual, "numberLessThanOrEqual");
	function numberGreaterThan(value, options) {
	  const expected = `expected > ${value}`;
	  return numberComparator(greaterThan, "s.number().greaterThan()", expected, value, options);
	}
	__name(numberGreaterThan, "numberGreaterThan");
	function numberGreaterThanOrEqual(value, options) {
	  const expected = `expected >= ${value}`;
	  return numberComparator(greaterThanOrEqual, "s.number().greaterThanOrEqual()", expected, value, options);
	}
	__name(numberGreaterThanOrEqual, "numberGreaterThanOrEqual");
	function numberEqual(value, options) {
	  const expected = `expected === ${value}`;
	  return numberComparator(equal, "s.number().equal()", expected, value, options);
	}
	__name(numberEqual, "numberEqual");
	function numberNotEqual(value, options) {
	  const expected = `expected !== ${value}`;
	  return numberComparator(notEqual, "s.number().notEqual()", expected, value, options);
	}
	__name(numberNotEqual, "numberNotEqual");
	function numberInt(options) {
	  return {
	    run(input) {
	      return Number.isInteger(input) ? Result.ok(input) : Result.err(
	        new ExpectedConstraintError(
	          "s.number().int()",
	          options?.message ?? "Given value is not an integer",
	          input,
	          "Number.isInteger(expected) to be true"
	        )
	      );
	    }
	  };
	}
	__name(numberInt, "numberInt");
	function numberSafeInt(options) {
	  return {
	    run(input) {
	      return Number.isSafeInteger(input) ? Result.ok(input) : Result.err(
	        new ExpectedConstraintError(
	          "s.number().safeInt()",
	          options?.message ?? "Given value is not a safe integer",
	          input,
	          "Number.isSafeInteger(expected) to be true"
	        )
	      );
	    }
	  };
	}
	__name(numberSafeInt, "numberSafeInt");
	function numberFinite(options) {
	  return {
	    run(input) {
	      return Number.isFinite(input) ? Result.ok(input) : Result.err(
	        new ExpectedConstraintError(
	          "s.number().finite()",
	          options?.message ?? "Given value is not finite",
	          input,
	          "Number.isFinite(expected) to be true"
	        )
	      );
	    }
	  };
	}
	__name(numberFinite, "numberFinite");
	function numberNaN(options) {
	  return {
	    run(input) {
	      return Number.isNaN(input) ? Result.ok(input) : Result.err(
	        new ExpectedConstraintError("s.number().equal(NaN)", options?.message ?? "Invalid number value", input, "expected === NaN")
	      );
	    }
	  };
	}
	__name(numberNaN, "numberNaN");
	function numberNotNaN(options) {
	  return {
	    run(input) {
	      return Number.isNaN(input) ? Result.err(
	        new ExpectedConstraintError("s.number().notEqual(NaN)", options?.message ?? "Invalid number value", input, "expected !== NaN")
	      ) : Result.ok(input);
	    }
	  };
	}
	__name(numberNotNaN, "numberNotNaN");
	function numberDivisibleBy(divider, options) {
	  const expected = `expected % ${divider} === 0`;
	  return {
	    run(input) {
	      return input % divider === 0 ? Result.ok(input) : Result.err(new ExpectedConstraintError("s.number().divisibleBy()", options?.message ?? "Number is not divisible", input, expected));
	    }
	  };
	}
	__name(numberDivisibleBy, "numberDivisibleBy");

	// src/validators/NumberValidator.ts
	var _NumberValidator = class _NumberValidator extends BaseValidator {
	  lessThan(number, options = this.validatorOptions) {
	    return this.addConstraint(numberLessThan(number, options));
	  }
	  lessThanOrEqual(number, options = this.validatorOptions) {
	    return this.addConstraint(numberLessThanOrEqual(number, options));
	  }
	  greaterThan(number, options = this.validatorOptions) {
	    return this.addConstraint(numberGreaterThan(number, options));
	  }
	  greaterThanOrEqual(number, options = this.validatorOptions) {
	    return this.addConstraint(numberGreaterThanOrEqual(number, options));
	  }
	  equal(number, options = this.validatorOptions) {
	    return Number.isNaN(number) ? this.addConstraint(numberNaN(options)) : this.addConstraint(numberEqual(number, options));
	  }
	  notEqual(number, options = this.validatorOptions) {
	    return Number.isNaN(number) ? this.addConstraint(numberNotNaN(options)) : this.addConstraint(numberNotEqual(number, options));
	  }
	  int(options = this.validatorOptions) {
	    return this.addConstraint(numberInt(options));
	  }
	  safeInt(options = this.validatorOptions) {
	    return this.addConstraint(numberSafeInt(options));
	  }
	  finite(options = this.validatorOptions) {
	    return this.addConstraint(numberFinite(options));
	  }
	  positive(options = this.validatorOptions) {
	    return this.greaterThanOrEqual(0, options);
	  }
	  negative(options = this.validatorOptions) {
	    return this.lessThan(0, options);
	  }
	  divisibleBy(divider, options = this.validatorOptions) {
	    return this.addConstraint(numberDivisibleBy(divider, options));
	  }
	  abs(options = this.validatorOptions) {
	    return this.transform(Math.abs, options);
	  }
	  sign(options = this.validatorOptions) {
	    return this.transform(Math.sign, options);
	  }
	  trunc(options = this.validatorOptions) {
	    return this.transform(Math.trunc, options);
	  }
	  floor(options = this.validatorOptions) {
	    return this.transform(Math.floor, options);
	  }
	  fround(options = this.validatorOptions) {
	    return this.transform(Math.fround, options);
	  }
	  round(options = this.validatorOptions) {
	    return this.transform(Math.round, options);
	  }
	  ceil(options = this.validatorOptions) {
	    return this.transform(Math.ceil, options);
	  }
	  handle(value) {
	    return typeof value === "number" ? Result.ok(value) : Result.err(new ValidationError("s.number()", this.validatorOptions.message ?? "Expected a number primitive", value));
	  }
	};
	__name(_NumberValidator, "NumberValidator");
	var NumberValidator = _NumberValidator;

	// src/lib/errors/MissingPropertyError.ts
	var _MissingPropertyError = class _MissingPropertyError extends BaseError {
	  constructor(property, validatorOptions) {
	    super(validatorOptions?.message ?? "A required property is missing");
	    this.property = property;
	  }
	  toJSON() {
	    return {
	      name: this.name,
	      message: this.message,
	      property: this.property
	    };
	  }
	  [customInspectSymbolStackLess](depth, options) {
	    const property = options.stylize(this.property.toString(), "string");
	    if (depth < 0) {
	      return options.stylize(`[MissingPropertyError: ${property}]`, "special");
	    }
	    const header = `${options.stylize("MissingPropertyError", "special")} > ${property}`;
	    const message = options.stylize(this.message, "regexp");
	    return `${header}
  ${message}`;
	  }
	};
	__name(_MissingPropertyError, "MissingPropertyError");
	var MissingPropertyError = _MissingPropertyError;

	// src/lib/errors/UnknownPropertyError.ts
	var _UnknownPropertyError = class _UnknownPropertyError extends BaseError {
	  constructor(property, value, options) {
	    super(options?.message ?? "Received unexpected property");
	    this.property = property;
	    this.value = value;
	  }
	  toJSON() {
	    return {
	      name: this.name,
	      message: this.message,
	      property: this.property,
	      value: this.value
	    };
	  }
	  [customInspectSymbolStackLess](depth, options) {
	    const property = options.stylize(this.property.toString(), "string");
	    if (depth < 0) {
	      return options.stylize(`[UnknownPropertyError: ${property}]`, "special");
	    }
	    const newOptions = { ...options, depth: options.depth === null ? null : options.depth - 1, compact: true };
	    const padding = `
  ${options.stylize("|", "undefined")} `;
	    const given = inspect2(this.value, newOptions).replace(/\n/g, padding);
	    const header = `${options.stylize("UnknownPropertyError", "special")} > ${property}`;
	    const message = options.stylize(this.message, "regexp");
	    const givenBlock = `
  ${options.stylize("Received:", "regexp")}${padding}${given}`;
	    return `${header}
  ${message}
${givenBlock}`;
	  }
	};
	__name(_UnknownPropertyError, "UnknownPropertyError");
	var UnknownPropertyError = _UnknownPropertyError;

	// src/validators/DefaultValidator.ts
	var _DefaultValidator = class _DefaultValidator extends BaseValidator {
	  constructor(validator, value, validatorOptions = {}, constraints = []) {
	    super(validatorOptions, constraints);
	    this.validator = validator;
	    this.defaultValue = value;
	  }
	  default(value, options = this.validatorOptions) {
	    const clone = this.clone();
	    clone.validatorOptions = options;
	    clone.defaultValue = value;
	    return clone;
	  }
	  handle(value) {
	    return typeof value === "undefined" ? Result.ok(getValue(this.defaultValue)) : this.validator["handle"](value);
	  }
	  clone() {
	    return Reflect.construct(this.constructor, [this.validator, this.defaultValue, this.validatorOptions, this.constraints]);
	  }
	};
	__name(_DefaultValidator, "DefaultValidator");
	var DefaultValidator = _DefaultValidator;

	// src/lib/errors/CombinedError.ts
	var _CombinedError = class _CombinedError extends BaseError {
	  constructor(errors, validatorOptions) {
	    super(validatorOptions?.message ?? "Received one or more errors");
	    this.errors = errors;
	  }
	  [customInspectSymbolStackLess](depth, options) {
	    if (depth < 0) {
	      return options.stylize("[CombinedError]", "special");
	    }
	    const newOptions = { ...options, depth: options.depth === null ? null : options.depth - 1, compact: true };
	    const padding = `
  ${options.stylize("|", "undefined")} `;
	    const header = `${options.stylize("CombinedError", "special")} (${options.stylize(this.errors.length.toString(), "number")})`;
	    const message = options.stylize(this.message, "regexp");
	    const errors = this.errors.map((error, i3) => {
	      const index = options.stylize((i3 + 1).toString(), "number");
	      const body = error[customInspectSymbolStackLess](depth - 1, newOptions).replace(/\n/g, padding);
	      return `  ${index} ${body}`;
	    }).join("\n\n");
	    return `${header}
  ${message}

${errors}`;
	  }
	};
	__name(_CombinedError, "CombinedError");
	var CombinedError = _CombinedError;

	// src/validators/UnionValidator.ts
	var _UnionValidator = class _UnionValidator extends BaseValidator {
	  constructor(validators, validatorOptions, constraints = []) {
	    super(validatorOptions, constraints);
	    this.validators = validators;
	  }
	  optional(options = this.validatorOptions) {
	    if (this.validators.length === 0)
	      return new _UnionValidator([new LiteralValidator(void 0, options)], this.validatorOptions, this.constraints);
	    const [validator] = this.validators;
	    if (validator instanceof LiteralValidator) {
	      if (validator.expected === void 0)
	        return this.clone();
	      if (validator.expected === null) {
	        return new _UnionValidator(
	          [new NullishValidator(options), ...this.validators.slice(1)],
	          this.validatorOptions,
	          this.constraints
	        );
	      }
	    } else if (validator instanceof NullishValidator) {
	      return this.clone();
	    }
	    return new _UnionValidator([new LiteralValidator(void 0, options), ...this.validators], this.validatorOptions);
	  }
	  required(options = this.validatorOptions) {
	    if (this.validators.length === 0)
	      return this.clone();
	    const [validator] = this.validators;
	    if (validator instanceof LiteralValidator) {
	      if (validator.expected === void 0) {
	        return new _UnionValidator(this.validators.slice(1), this.validatorOptions, this.constraints);
	      }
	    } else if (validator instanceof NullishValidator) {
	      return new _UnionValidator(
	        [new LiteralValidator(null, options), ...this.validators.slice(1)],
	        this.validatorOptions,
	        this.constraints
	      );
	    }
	    return this.clone();
	  }
	  nullable(options = this.validatorOptions) {
	    if (this.validators.length === 0) {
	      return new _UnionValidator([new LiteralValidator(null, options)], this.validatorOptions, this.constraints);
	    }
	    const [validator] = this.validators;
	    if (validator instanceof LiteralValidator) {
	      if (validator.expected === null)
	        return this.clone();
	      if (validator.expected === void 0) {
	        return new _UnionValidator(
	          [new NullishValidator(options), ...this.validators.slice(1)],
	          this.validatorOptions,
	          this.constraints
	        );
	      }
	    } else if (validator instanceof NullishValidator) {
	      return this.clone();
	    }
	    return new _UnionValidator([new LiteralValidator(null, options), ...this.validators], this.validatorOptions);
	  }
	  nullish(options = this.validatorOptions) {
	    if (this.validators.length === 0) {
	      return new _UnionValidator([new NullishValidator(options)], options, this.constraints);
	    }
	    const [validator] = this.validators;
	    if (validator instanceof LiteralValidator) {
	      if (validator.expected === null || validator.expected === void 0) {
	        return new _UnionValidator(
	          [new NullishValidator(options), ...this.validators.slice(1)],
	          options,
	          this.constraints
	        );
	      }
	    } else if (validator instanceof NullishValidator) {
	      return this.clone();
	    }
	    return new _UnionValidator([new NullishValidator(options), ...this.validators], options);
	  }
	  or(...predicates) {
	    return new _UnionValidator([...this.validators, ...predicates], this.validatorOptions);
	  }
	  clone() {
	    return Reflect.construct(this.constructor, [this.validators, this.validatorOptions, this.constraints]);
	  }
	  handle(value) {
	    const errors = [];
	    for (const validator of this.validators) {
	      const result = validator.run(value);
	      if (result.isOk())
	        return result;
	      errors.push(result.error);
	    }
	    return Result.err(new CombinedError(errors, this.validatorOptions));
	  }
	};
	__name(_UnionValidator, "UnionValidator");
	var UnionValidator = _UnionValidator;

	// src/validators/ObjectValidator.ts
	var _ObjectValidator = class _ObjectValidator extends BaseValidator {
	  constructor(shape, strategy = 0 /* Ignore */, validatorOptions = {}, constraints = []) {
	    super(validatorOptions, constraints);
	    this.keys = [];
	    this.requiredKeys = /* @__PURE__ */ new Map();
	    this.possiblyUndefinedKeys = /* @__PURE__ */ new Map();
	    this.possiblyUndefinedKeysWithDefaults = /* @__PURE__ */ new Map();
	    this.shape = shape;
	    this.strategy = strategy;
	    switch (this.strategy) {
	      case 0 /* Ignore */:
	        this.handleStrategy = (value) => this.handleIgnoreStrategy(value);
	        break;
	      case 1 /* Strict */: {
	        this.handleStrategy = (value) => this.handleStrictStrategy(value);
	        break;
	      }
	      case 2 /* Passthrough */:
	        this.handleStrategy = (value) => this.handlePassthroughStrategy(value);
	        break;
	    }
	    const shapeEntries = Object.entries(shape);
	    this.keys = shapeEntries.map(([key]) => key);
	    for (const [key, validator] of shapeEntries) {
	      if (validator instanceof UnionValidator) {
	        const [possiblyLiteralOrNullishPredicate] = validator["validators"];
	        if (possiblyLiteralOrNullishPredicate instanceof NullishValidator) {
	          this.possiblyUndefinedKeys.set(key, validator);
	        } else if (possiblyLiteralOrNullishPredicate instanceof LiteralValidator) {
	          if (possiblyLiteralOrNullishPredicate.expected === void 0) {
	            this.possiblyUndefinedKeys.set(key, validator);
	          } else {
	            this.requiredKeys.set(key, validator);
	          }
	        } else if (validator instanceof DefaultValidator) {
	          this.possiblyUndefinedKeysWithDefaults.set(key, validator);
	        } else {
	          this.requiredKeys.set(key, validator);
	        }
	      } else if (validator instanceof NullishValidator) {
	        this.possiblyUndefinedKeys.set(key, validator);
	      } else if (validator instanceof LiteralValidator) {
	        if (validator.expected === void 0) {
	          this.possiblyUndefinedKeys.set(key, validator);
	        } else {
	          this.requiredKeys.set(key, validator);
	        }
	      } else if (validator instanceof DefaultValidator) {
	        this.possiblyUndefinedKeysWithDefaults.set(key, validator);
	      } else {
	        this.requiredKeys.set(key, validator);
	      }
	    }
	  }
	  strict(options = this.validatorOptions) {
	    return Reflect.construct(this.constructor, [this.shape, 1 /* Strict */, options, this.constraints]);
	  }
	  ignore(options = this.validatorOptions) {
	    return Reflect.construct(this.constructor, [this.shape, 0 /* Ignore */, options, this.constraints]);
	  }
	  passthrough(options = this.validatorOptions) {
	    return Reflect.construct(this.constructor, [this.shape, 2 /* Passthrough */, options, this.constraints]);
	  }
	  partial(options = this.validatorOptions) {
	    const shape = Object.fromEntries(this.keys.map((key) => [key, this.shape[key].optional(options)]));
	    return Reflect.construct(this.constructor, [shape, this.strategy, options, this.constraints]);
	  }
	  required(options = this.validatorOptions) {
	    const shape = Object.fromEntries(
	      this.keys.map((key) => {
	        let validator = this.shape[key];
	        if (validator instanceof UnionValidator)
	          validator = validator.required(options);
	        return [key, validator];
	      })
	    );
	    return Reflect.construct(this.constructor, [shape, this.strategy, options, this.constraints]);
	  }
	  extend(schema, options = this.validatorOptions) {
	    const shape = { ...this.shape, ...schema instanceof _ObjectValidator ? schema.shape : schema };
	    return Reflect.construct(this.constructor, [shape, this.strategy, options, this.constraints]);
	  }
	  pick(keys, options = this.validatorOptions) {
	    const shape = Object.fromEntries(
	      keys.filter((key) => this.keys.includes(key)).map((key) => [key, this.shape[key]])
	    );
	    return Reflect.construct(this.constructor, [shape, this.strategy, options, this.constraints]);
	  }
	  omit(keys, options = this.validatorOptions) {
	    const shape = Object.fromEntries(
	      this.keys.filter((key) => !keys.includes(key)).map((key) => [key, this.shape[key]])
	    );
	    return Reflect.construct(this.constructor, [shape, this.strategy, options, this.constraints]);
	  }
	  handle(value) {
	    const typeOfValue = typeof value;
	    if (typeOfValue !== "object") {
	      return Result.err(
	        new ValidationError(
	          "s.object(T)",
	          this.validatorOptions.message ?? `Expected the value to be an object, but received ${typeOfValue} instead`,
	          value
	        )
	      );
	    }
	    if (value === null) {
	      return Result.err(new ValidationError("s.object(T)", this.validatorOptions.message ?? "Expected the value to not be null", value));
	    }
	    if (Array.isArray(value)) {
	      return Result.err(new ValidationError("s.object(T)", this.validatorOptions.message ?? "Expected the value to not be an array", value));
	    }
	    if (!this.shouldRunConstraints) {
	      return Result.ok(value);
	    }
	    for (const predicate of Object.values(this.shape)) {
	      predicate.setParent(this.parent ?? value);
	    }
	    return this.handleStrategy(value);
	  }
	  clone() {
	    return Reflect.construct(this.constructor, [this.shape, this.strategy, this.validatorOptions, this.constraints]);
	  }
	  handleIgnoreStrategy(value) {
	    const errors = [];
	    const finalObject = {};
	    const inputEntries = new Map(Object.entries(value));
	    const runPredicate = /* @__PURE__ */ __name((key, predicate) => {
	      const result = predicate.run(value[key]);
	      if (result.isOk()) {
	        finalObject[key] = result.value;
	      } else {
	        const error = result.error;
	        errors.push([key, error]);
	      }
	    }, "runPredicate");
	    for (const [key, predicate] of this.requiredKeys) {
	      if (inputEntries.delete(key)) {
	        runPredicate(key, predicate);
	      } else {
	        errors.push([key, new MissingPropertyError(key, this.validatorOptions)]);
	      }
	    }
	    for (const [key, validator] of this.possiblyUndefinedKeysWithDefaults) {
	      inputEntries.delete(key);
	      runPredicate(key, validator);
	    }
	    if (inputEntries.size === 0) {
	      return errors.length === 0 ? Result.ok(finalObject) : Result.err(new CombinedPropertyError(errors, this.validatorOptions));
	    }
	    const checkInputEntriesInsteadOfSchemaKeys = this.possiblyUndefinedKeys.size > inputEntries.size;
	    if (checkInputEntriesInsteadOfSchemaKeys) {
	      for (const [key] of inputEntries) {
	        const predicate = this.possiblyUndefinedKeys.get(key);
	        if (predicate) {
	          runPredicate(key, predicate);
	        }
	      }
	    } else {
	      for (const [key, predicate] of this.possiblyUndefinedKeys) {
	        if (inputEntries.delete(key)) {
	          runPredicate(key, predicate);
	        }
	      }
	    }
	    return errors.length === 0 ? Result.ok(finalObject) : Result.err(new CombinedPropertyError(errors, this.validatorOptions));
	  }
	  handleStrictStrategy(value) {
	    const errors = [];
	    const finalResult = {};
	    const inputEntries = new Map(Object.entries(value));
	    const runPredicate = /* @__PURE__ */ __name((key, predicate) => {
	      const result = predicate.run(value[key]);
	      if (result.isOk()) {
	        finalResult[key] = result.value;
	      } else {
	        const error = result.error;
	        errors.push([key, error]);
	      }
	    }, "runPredicate");
	    for (const [key, predicate] of this.requiredKeys) {
	      if (inputEntries.delete(key)) {
	        runPredicate(key, predicate);
	      } else {
	        errors.push([key, new MissingPropertyError(key, this.validatorOptions)]);
	      }
	    }
	    for (const [key, validator] of this.possiblyUndefinedKeysWithDefaults) {
	      inputEntries.delete(key);
	      runPredicate(key, validator);
	    }
	    for (const [key, predicate] of this.possiblyUndefinedKeys) {
	      if (inputEntries.size === 0) {
	        break;
	      }
	      if (inputEntries.delete(key)) {
	        runPredicate(key, predicate);
	      }
	    }
	    if (inputEntries.size !== 0) {
	      for (const [key, value2] of inputEntries.entries()) {
	        errors.push([key, new UnknownPropertyError(key, value2, this.validatorOptions)]);
	      }
	    }
	    return errors.length === 0 ? Result.ok(finalResult) : Result.err(new CombinedPropertyError(errors, this.validatorOptions));
	  }
	  handlePassthroughStrategy(value) {
	    const result = this.handleIgnoreStrategy(value);
	    return result.isErr() ? result : Result.ok({ ...value, ...result.value });
	  }
	};
	__name(_ObjectValidator, "ObjectValidator");
	var ObjectValidator = _ObjectValidator;

	// src/validators/PassthroughValidator.ts
	var _PassthroughValidator = class _PassthroughValidator extends BaseValidator {
	  handle(value) {
	    return Result.ok(value);
	  }
	};
	__name(_PassthroughValidator, "PassthroughValidator");
	var PassthroughValidator = _PassthroughValidator;

	// src/validators/RecordValidator.ts
	var _RecordValidator = class _RecordValidator extends BaseValidator {
	  constructor(validator, validatorOptions = {}, constraints = []) {
	    super(validatorOptions, constraints);
	    this.validator = validator;
	  }
	  clone() {
	    return Reflect.construct(this.constructor, [this.validator, this.validatorOptions, this.constraints]);
	  }
	  handle(value) {
	    if (typeof value !== "object") {
	      return Result.err(new ValidationError("s.record(T)", this.validatorOptions.message ?? "Expected an object", value));
	    }
	    if (value === null) {
	      return Result.err(new ValidationError("s.record(T)", this.validatorOptions.message ?? "Expected the value to not be null", value));
	    }
	    if (Array.isArray(value)) {
	      return Result.err(new ValidationError("s.record(T)", this.validatorOptions.message ?? "Expected the value to not be an array", value));
	    }
	    if (!this.shouldRunConstraints) {
	      return Result.ok(value);
	    }
	    const errors = [];
	    const transformed = {};
	    for (const [key, val] of Object.entries(value)) {
	      const result = this.validator.run(val);
	      if (result.isOk())
	        transformed[key] = result.value;
	      else
	        errors.push([key, result.error]);
	    }
	    return errors.length === 0 ? Result.ok(transformed) : Result.err(new CombinedPropertyError(errors, this.validatorOptions));
	  }
	};
	__name(_RecordValidator, "RecordValidator");
	var RecordValidator = _RecordValidator;

	// src/validators/SetValidator.ts
	var _SetValidator = class _SetValidator extends BaseValidator {
	  constructor(validator, validatorOptions, constraints = []) {
	    super(validatorOptions, constraints);
	    this.validator = validator;
	  }
	  clone() {
	    return Reflect.construct(this.constructor, [this.validator, this.validatorOptions, this.constraints]);
	  }
	  handle(values) {
	    if (!(values instanceof Set)) {
	      return Result.err(new ValidationError("s.set(T)", this.validatorOptions.message ?? "Expected a set", values));
	    }
	    if (!this.shouldRunConstraints) {
	      return Result.ok(values);
	    }
	    const errors = [];
	    const transformed = /* @__PURE__ */ new Set();
	    for (const value of values) {
	      const result = this.validator.run(value);
	      if (result.isOk())
	        transformed.add(result.value);
	      else
	        errors.push(result.error);
	    }
	    return errors.length === 0 ? Result.ok(transformed) : Result.err(new CombinedError(errors, this.validatorOptions));
	  }
	};
	__name(_SetValidator, "SetValidator");
	var SetValidator = _SetValidator;

	// src/constraints/util/emailValidator.ts
	var accountRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_+-\.]*)[A-Z0-9_+-]$/i;
	function validateEmail(email) {
	  if (!email)
	    return false;
	  const atIndex = email.indexOf("@");
	  if (atIndex === -1)
	    return false;
	  if (atIndex > 64)
	    return false;
	  const domainIndex = atIndex + 1;
	  if (email.includes("@", domainIndex))
	    return false;
	  if (email.length - domainIndex > 255)
	    return false;
	  let dotIndex = email.indexOf(".", domainIndex);
	  if (dotIndex === -1)
	    return false;
	  let lastDotIndex = domainIndex;
	  do {
	    if (dotIndex - lastDotIndex > 63)
	      return false;
	    lastDotIndex = dotIndex + 1;
	  } while ((dotIndex = email.indexOf(".", lastDotIndex)) !== -1);
	  if (email.length - lastDotIndex > 63)
	    return false;
	  return accountRegex.test(email.slice(0, atIndex)) && validateEmailDomain(email.slice(domainIndex));
	}
	__name(validateEmail, "validateEmail");
	function validateEmailDomain(domain) {
	  try {
	    return new URL(`http://${domain}`).hostname === domain;
	  } catch {
	    return false;
	  }
	}
	__name(validateEmailDomain, "validateEmailDomain");

	// src/constraints/util/net.ts
	var v4Seg = "(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])";
	var v4Str = `(${v4Seg}[.]){3}${v4Seg}`;
	var IPv4Reg = new RegExp(`^${v4Str}$`);
	var v6Seg = "(?:[0-9a-fA-F]{1,4})";
	var IPv6Reg = new RegExp(
	  `^((?:${v6Seg}:){7}(?:${v6Seg}|:)|(?:${v6Seg}:){6}(?:${v4Str}|:${v6Seg}|:)|(?:${v6Seg}:){5}(?::${v4Str}|(:${v6Seg}){1,2}|:)|(?:${v6Seg}:){4}(?:(:${v6Seg}){0,1}:${v4Str}|(:${v6Seg}){1,3}|:)|(?:${v6Seg}:){3}(?:(:${v6Seg}){0,2}:${v4Str}|(:${v6Seg}){1,4}|:)|(?:${v6Seg}:){2}(?:(:${v6Seg}){0,3}:${v4Str}|(:${v6Seg}){1,5}|:)|(?:${v6Seg}:){1}(?:(:${v6Seg}){0,4}:${v4Str}|(:${v6Seg}){1,6}|:)|(?::((?::${v6Seg}){0,5}:${v4Str}|(?::${v6Seg}){1,7}|:)))(%[0-9a-zA-Z-.:]{1,})?$`
	);
	function isIPv4(s4) {
	  return IPv4Reg.test(s4);
	}
	__name(isIPv4, "isIPv4");
	function isIPv6(s4) {
	  return IPv6Reg.test(s4);
	}
	__name(isIPv6, "isIPv6");
	function isIP(s4) {
	  if (isIPv4(s4))
	    return 4;
	  if (isIPv6(s4))
	    return 6;
	  return 0;
	}
	__name(isIP, "isIP");

	// src/constraints/util/phoneValidator.ts
	var phoneNumberRegex = /^((?:\+|0{0,2})\d{1,2}\s?)?\(?\d{3}\)?[\s.-]?\d{3}[\s.-]?\d{4}$/;
	function validatePhoneNumber(input) {
	  return phoneNumberRegex.test(input);
	}
	__name(validatePhoneNumber, "validatePhoneNumber");

	// src/lib/errors/MultiplePossibilitiesConstraintError.ts
	var _MultiplePossibilitiesConstraintError = class _MultiplePossibilitiesConstraintError extends BaseConstraintError {
	  constructor(constraint, message, given, expected) {
	    super(constraint, message, given);
	    this.expected = expected;
	  }
	  toJSON() {
	    return {
	      name: this.name,
	      message: this.message,
	      constraint: this.constraint,
	      given: this.given,
	      expected: this.expected
	    };
	  }
	  [customInspectSymbolStackLess](depth, options) {
	    const constraint = options.stylize(this.constraint, "string");
	    if (depth < 0) {
	      return options.stylize(`[MultiplePossibilitiesConstraintError: ${constraint}]`, "special");
	    }
	    const newOptions = { ...options, depth: options.depth === null ? null : options.depth - 1 };
	    const verticalLine = options.stylize("|", "undefined");
	    const padding = `
  ${verticalLine} `;
	    const given = inspect2(this.given, newOptions).replace(/\n/g, padding);
	    const header = `${options.stylize("MultiplePossibilitiesConstraintError", "special")} > ${constraint}`;
	    const message = options.stylize(this.message, "regexp");
	    const expectedPadding = `
  ${verticalLine} - `;
	    const expectedBlock = `
  ${options.stylize("Expected any of the following:", "string")}${expectedPadding}${this.expected.map((possible) => options.stylize(possible, "boolean")).join(expectedPadding)}`;
	    const givenBlock = `
  ${options.stylize("Received:", "regexp")}${padding}${given}`;
	    return `${header}
  ${message}
${expectedBlock}
${givenBlock}`;
	  }
	};
	__name(_MultiplePossibilitiesConstraintError, "MultiplePossibilitiesConstraintError");
	var MultiplePossibilitiesConstraintError = _MultiplePossibilitiesConstraintError;

	// src/constraints/util/common/combinedResultFn.ts
	function combinedErrorFn(...fns) {
	  switch (fns.length) {
	    case 0:
	      return () => null;
	    case 1:
	      return fns[0];
	    case 2: {
	      const [fn0, fn1] = fns;
	      return (...params) => fn0(...params) || fn1(...params);
	    }
	    default: {
	      return (...params) => {
	        for (const fn of fns) {
	          const result = fn(...params);
	          if (result)
	            return result;
	        }
	        return null;
	      };
	    }
	  }
	}
	__name(combinedErrorFn, "combinedErrorFn");

	// src/constraints/util/urlValidators.ts
	function createUrlValidators(options, validatorOptions) {
	  const fns = [];
	  if (options?.allowedProtocols?.length)
	    fns.push(allowedProtocolsFn(options.allowedProtocols, validatorOptions));
	  if (options?.allowedDomains?.length)
	    fns.push(allowedDomainsFn(options.allowedDomains, validatorOptions));
	  return combinedErrorFn(...fns);
	}
	__name(createUrlValidators, "createUrlValidators");
	function allowedProtocolsFn(allowedProtocols, options) {
	  return (input, url) => allowedProtocols.includes(url.protocol) ? null : new MultiplePossibilitiesConstraintError("s.string().url()", options?.message ?? "Invalid URL protocol", input, allowedProtocols);
	}
	__name(allowedProtocolsFn, "allowedProtocolsFn");
	function allowedDomainsFn(allowedDomains, options) {
	  return (input, url) => allowedDomains.includes(url.hostname) ? null : new MultiplePossibilitiesConstraintError("s.string().url()", options?.message ?? "Invalid URL domain", input, allowedDomains);
	}
	__name(allowedDomainsFn, "allowedDomainsFn");

	// src/constraints/StringConstraints.ts
	function stringLengthComparator(comparator, name, expected, length, options) {
	  return {
	    run(input) {
	      return comparator(input.length, length) ? Result.ok(input) : Result.err(new ExpectedConstraintError(name, options?.message ?? "Invalid string length", input, expected));
	    }
	  };
	}
	__name(stringLengthComparator, "stringLengthComparator");
	function stringLengthLessThan(length, options) {
	  const expected = `expected.length < ${length}`;
	  return stringLengthComparator(lessThan, "s.string().lengthLessThan()", expected, length, options);
	}
	__name(stringLengthLessThan, "stringLengthLessThan");
	function stringLengthLessThanOrEqual(length, options) {
	  const expected = `expected.length <= ${length}`;
	  return stringLengthComparator(lessThanOrEqual, "s.string().lengthLessThanOrEqual()", expected, length, options);
	}
	__name(stringLengthLessThanOrEqual, "stringLengthLessThanOrEqual");
	function stringLengthGreaterThan(length, options) {
	  const expected = `expected.length > ${length}`;
	  return stringLengthComparator(greaterThan, "s.string().lengthGreaterThan()", expected, length, options);
	}
	__name(stringLengthGreaterThan, "stringLengthGreaterThan");
	function stringLengthGreaterThanOrEqual(length, options) {
	  const expected = `expected.length >= ${length}`;
	  return stringLengthComparator(greaterThanOrEqual, "s.string().lengthGreaterThanOrEqual()", expected, length, options);
	}
	__name(stringLengthGreaterThanOrEqual, "stringLengthGreaterThanOrEqual");
	function stringLengthEqual(length, options) {
	  const expected = `expected.length === ${length}`;
	  return stringLengthComparator(equal, "s.string().lengthEqual()", expected, length, options);
	}
	__name(stringLengthEqual, "stringLengthEqual");
	function stringLengthNotEqual(length, options) {
	  const expected = `expected.length !== ${length}`;
	  return stringLengthComparator(notEqual, "s.string().lengthNotEqual()", expected, length, options);
	}
	__name(stringLengthNotEqual, "stringLengthNotEqual");
	function stringEmail(options) {
	  return {
	    run(input) {
	      return validateEmail(input) ? Result.ok(input) : Result.err(
	        new ExpectedConstraintError(
	          "s.string().email()",
	          options?.message ?? "Invalid email address",
	          input,
	          "expected to be an email address"
	        )
	      );
	    }
	  };
	}
	__name(stringEmail, "stringEmail");
	function stringRegexValidator(type, expected, regex, options) {
	  return {
	    run(input) {
	      return regex.test(input) ? Result.ok(input) : Result.err(new ExpectedConstraintError(type, options?.message ?? "Invalid string format", input, expected));
	    }
	  };
	}
	__name(stringRegexValidator, "stringRegexValidator");
	function stringUrl(options, validatorOptions) {
	  const validatorFn = createUrlValidators(options, validatorOptions);
	  return {
	    run(input) {
	      let url;
	      try {
	        url = new URL(input);
	      } catch {
	        return Result.err(
	          new ExpectedConstraintError("s.string().url()", validatorOptions?.message ?? "Invalid URL", input, "expected to match a URL")
	        );
	      }
	      const validatorFnResult = validatorFn(input, url);
	      if (validatorFnResult === null)
	        return Result.ok(input);
	      return Result.err(validatorFnResult);
	    }
	  };
	}
	__name(stringUrl, "stringUrl");
	function stringIp(version, options) {
	  const ipVersion = version ? `v${version}` : "";
	  const validatorFn = version === 4 ? isIPv4 : version === 6 ? isIPv6 : isIP;
	  const name = `s.string().ip${ipVersion}()`;
	  const message = `Invalid IP${ipVersion} address`;
	  const expected = `expected to be an IP${ipVersion} address`;
	  return {
	    run(input) {
	      return validatorFn(input) ? Result.ok(input) : Result.err(new ExpectedConstraintError(name, options?.message ?? message, input, expected));
	    }
	  };
	}
	__name(stringIp, "stringIp");
	function stringRegex(regex, options) {
	  return stringRegexValidator("s.string().regex()", `expected ${regex}.test(expected) to be true`, regex, options);
	}
	__name(stringRegex, "stringRegex");
	function stringUuid({ version = 4, nullable = false } = {}, options) {
	  version ?? (version = "1-5");
	  const regex = new RegExp(
	    `^(?:[0-9A-F]{8}-[0-9A-F]{4}-[${version}][0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}${nullable ? "|00000000-0000-0000-0000-000000000000" : ""})$`,
	    "i"
	  );
	  const expected = `expected to match UUID${typeof version === "number" ? `v${version}` : ` in range of ${version}`}`;
	  return stringRegexValidator("s.string().uuid()", expected, regex, options);
	}
	__name(stringUuid, "stringUuid");
	function stringDate(options) {
	  return {
	    run(input) {
	      const time = Date.parse(input);
	      return Number.isNaN(time) ? Result.err(
	        new ExpectedConstraintError(
	          "s.string().date()",
	          options?.message ?? "Invalid date string",
	          input,
	          "expected to be a valid date string (in the ISO 8601 or ECMA-262 format)"
	        )
	      ) : Result.ok(input);
	    }
	  };
	}
	__name(stringDate, "stringDate");
	function stringPhone(options) {
	  return {
	    run(input) {
	      return validatePhoneNumber(input) ? Result.ok(input) : Result.err(
	        new ExpectedConstraintError(
	          "s.string().phone()",
	          options?.message ?? "Invalid phone number",
	          input,
	          "expected to be a phone number"
	        )
	      );
	    }
	  };
	}
	__name(stringPhone, "stringPhone");

	// src/validators/StringValidator.ts
	var _StringValidator = class _StringValidator extends BaseValidator {
	  lengthLessThan(length, options = this.validatorOptions) {
	    return this.addConstraint(stringLengthLessThan(length, options));
	  }
	  lengthLessThanOrEqual(length, options = this.validatorOptions) {
	    return this.addConstraint(stringLengthLessThanOrEqual(length, options));
	  }
	  lengthGreaterThan(length, options = this.validatorOptions) {
	    return this.addConstraint(stringLengthGreaterThan(length, options));
	  }
	  lengthGreaterThanOrEqual(length, options = this.validatorOptions) {
	    return this.addConstraint(stringLengthGreaterThanOrEqual(length, options));
	  }
	  lengthEqual(length, options = this.validatorOptions) {
	    return this.addConstraint(stringLengthEqual(length, options));
	  }
	  lengthNotEqual(length, options = this.validatorOptions) {
	    return this.addConstraint(stringLengthNotEqual(length, options));
	  }
	  email(options = this.validatorOptions) {
	    return this.addConstraint(stringEmail(options));
	  }
	  url(options, validatorOptions = this.validatorOptions) {
	    const urlOptions = this.isUrlOptions(options);
	    if (urlOptions) {
	      return this.addConstraint(stringUrl(options, validatorOptions));
	    }
	    return this.addConstraint(stringUrl(void 0, validatorOptions));
	  }
	  uuid(options, validatorOptions = this.validatorOptions) {
	    const stringUuidOptions = this.isStringUuidOptions(options);
	    if (stringUuidOptions) {
	      return this.addConstraint(stringUuid(options, validatorOptions));
	    }
	    return this.addConstraint(stringUuid(void 0, validatorOptions));
	  }
	  regex(regex, options = this.validatorOptions) {
	    return this.addConstraint(stringRegex(regex, options));
	  }
	  date(options = this.validatorOptions) {
	    return this.addConstraint(stringDate(options));
	  }
	  ipv4(options = this.validatorOptions) {
	    return this.ip(4, options);
	  }
	  ipv6(options = this.validatorOptions) {
	    return this.ip(6, options);
	  }
	  ip(version, options = this.validatorOptions) {
	    return this.addConstraint(stringIp(version, options));
	  }
	  phone(options = this.validatorOptions) {
	    return this.addConstraint(stringPhone(options));
	  }
	  handle(value) {
	    return typeof value === "string" ? Result.ok(value) : Result.err(new ValidationError("s.string()", this.validatorOptions.message ?? "Expected a string primitive", value));
	  }
	  isUrlOptions(options) {
	    return options?.message === void 0;
	  }
	  isStringUuidOptions(options) {
	    return options?.message === void 0;
	  }
	};
	__name(_StringValidator, "StringValidator");
	var StringValidator = _StringValidator;

	// src/validators/TupleValidator.ts
	var _TupleValidator = class _TupleValidator extends BaseValidator {
	  constructor(validators, validatorOptions = {}, constraints = []) {
	    super(validatorOptions, constraints);
	    this.validators = [];
	    this.validators = validators;
	  }
	  clone() {
	    return Reflect.construct(this.constructor, [this.validators, this.validatorOptions, this.constraints]);
	  }
	  handle(values) {
	    if (!Array.isArray(values)) {
	      return Result.err(new ValidationError("s.tuple(T)", this.validatorOptions.message ?? "Expected an array", values));
	    }
	    if (values.length !== this.validators.length) {
	      return Result.err(
	        new ValidationError("s.tuple(T)", this.validatorOptions.message ?? `Expected an array of length ${this.validators.length}`, values)
	      );
	    }
	    if (!this.shouldRunConstraints) {
	      return Result.ok(values);
	    }
	    const errors = [];
	    const transformed = [];
	    for (let i3 = 0; i3 < values.length; i3++) {
	      const result = this.validators[i3].run(values[i3]);
	      if (result.isOk())
	        transformed.push(result.value);
	      else
	        errors.push([i3, result.error]);
	    }
	    return errors.length === 0 ? Result.ok(transformed) : Result.err(new CombinedPropertyError(errors, this.validatorOptions));
	  }
	};
	__name(_TupleValidator, "TupleValidator");
	var TupleValidator = _TupleValidator;

	// src/validators/MapValidator.ts
	var _MapValidator = class _MapValidator extends BaseValidator {
	  constructor(keyValidator, valueValidator, validatorOptions = {}, constraints = []) {
	    super(validatorOptions, constraints);
	    this.keyValidator = keyValidator;
	    this.valueValidator = valueValidator;
	  }
	  clone() {
	    return Reflect.construct(this.constructor, [this.keyValidator, this.valueValidator, this.validatorOptions, this.constraints]);
	  }
	  handle(value) {
	    if (!(value instanceof Map)) {
	      return Result.err(new ValidationError("s.map(K, V)", this.validatorOptions.message ?? "Expected a map", value));
	    }
	    if (!this.shouldRunConstraints) {
	      return Result.ok(value);
	    }
	    const errors = [];
	    const transformed = /* @__PURE__ */ new Map();
	    for (const [key, val] of value.entries()) {
	      const keyResult = this.keyValidator.run(key);
	      const valueResult = this.valueValidator.run(val);
	      const { length } = errors;
	      if (keyResult.isErr())
	        errors.push([key, keyResult.error]);
	      if (valueResult.isErr())
	        errors.push([key, valueResult.error]);
	      if (errors.length === length)
	        transformed.set(keyResult.value, valueResult.value);
	    }
	    return errors.length === 0 ? Result.ok(transformed) : Result.err(new CombinedPropertyError(errors, this.validatorOptions));
	  }
	};
	__name(_MapValidator, "MapValidator");
	var MapValidator = _MapValidator;

	// src/validators/LazyValidator.ts
	var _LazyValidator = class _LazyValidator extends BaseValidator {
	  constructor(validator, validatorOptions = {}, constraints = []) {
	    super(validatorOptions, constraints);
	    this.validator = validator;
	  }
	  clone() {
	    return Reflect.construct(this.constructor, [this.validator, this.validatorOptions, this.constraints]);
	  }
	  handle(values) {
	    return this.validator(values).run(values);
	  }
	};
	__name(_LazyValidator, "LazyValidator");
	var LazyValidator = _LazyValidator;

	// src/lib/errors/UnknownEnumValueError.ts
	var _UnknownEnumValueError = class _UnknownEnumValueError extends BaseError {
	  constructor(value, keys, enumMappings, validatorOptions) {
	    super(validatorOptions?.message ?? "Expected the value to be one of the following enum values:");
	    this.value = value;
	    this.enumKeys = keys;
	    this.enumMappings = enumMappings;
	  }
	  toJSON() {
	    return {
	      name: this.name,
	      message: this.message,
	      value: this.value,
	      enumKeys: this.enumKeys,
	      enumMappings: [...this.enumMappings.entries()]
	    };
	  }
	  [customInspectSymbolStackLess](depth, options) {
	    const value = options.stylize(this.value.toString(), "string");
	    if (depth < 0) {
	      return options.stylize(`[UnknownEnumValueError: ${value}]`, "special");
	    }
	    const padding = `
  ${options.stylize("|", "undefined")} `;
	    const pairs = this.enumKeys.map((key) => {
	      const enumValue = this.enumMappings.get(key);
	      return `${options.stylize(key, "string")} or ${options.stylize(
	        enumValue.toString(),
	        typeof enumValue === "number" ? "number" : "string"
	      )}`;
	    }).join(padding);
	    const header = `${options.stylize("UnknownEnumValueError", "special")} > ${value}`;
	    const message = options.stylize(this.message, "regexp");
	    const pairsBlock = `${padding}${pairs}`;
	    return `${header}
  ${message}
${pairsBlock}`;
	  }
	};
	__name(_UnknownEnumValueError, "UnknownEnumValueError");
	var UnknownEnumValueError = _UnknownEnumValueError;

	// src/validators/NativeEnumValidator.ts
	var _NativeEnumValidator = class _NativeEnumValidator extends BaseValidator {
	  constructor(enumShape, validatorOptions = {}) {
	    super(validatorOptions);
	    this.hasNumericElements = false;
	    this.enumMapping = /* @__PURE__ */ new Map();
	    this.enumShape = enumShape;
	    this.enumKeys = Object.keys(enumShape).filter((key) => {
	      return typeof enumShape[enumShape[key]] !== "number";
	    });
	    for (const key of this.enumKeys) {
	      const enumValue = enumShape[key];
	      this.enumMapping.set(key, enumValue);
	      this.enumMapping.set(enumValue, enumValue);
	      if (typeof enumValue === "number") {
	        this.hasNumericElements = true;
	        this.enumMapping.set(`${enumValue}`, enumValue);
	      }
	    }
	  }
	  handle(value) {
	    const typeOfValue = typeof value;
	    if (typeOfValue === "number") {
	      if (!this.hasNumericElements) {
	        return Result.err(
	          new ValidationError("s.nativeEnum(T)", this.validatorOptions.message ?? "Expected the value to be a string", value)
	        );
	      }
	    } else if (typeOfValue !== "string") {
	      return Result.err(
	        new ValidationError("s.nativeEnum(T)", this.validatorOptions.message ?? "Expected the value to be a string or number", value)
	      );
	    }
	    const casted = value;
	    const possibleEnumValue = this.enumMapping.get(casted);
	    return typeof possibleEnumValue === "undefined" ? Result.err(new UnknownEnumValueError(casted, this.enumKeys, this.enumMapping, this.validatorOptions)) : Result.ok(possibleEnumValue);
	  }
	  clone() {
	    return Reflect.construct(this.constructor, [this.enumShape, this.validatorOptions]);
	  }
	};
	__name(_NativeEnumValidator, "NativeEnumValidator");
	var NativeEnumValidator = _NativeEnumValidator;

	// src/constraints/TypedArrayLengthConstraints.ts
	function typedArrayByteLengthComparator(comparator, name, expected, length, options) {
	  return {
	    run(input) {
	      return comparator(input.byteLength, length) ? Result.ok(input) : Result.err(new ExpectedConstraintError(name, options?.message ?? "Invalid Typed Array byte length", input, expected));
	    }
	  };
	}
	__name(typedArrayByteLengthComparator, "typedArrayByteLengthComparator");
	function typedArrayByteLengthLessThan(value, options) {
	  const expected = `expected.byteLength < ${value}`;
	  return typedArrayByteLengthComparator(lessThan, "s.typedArray(T).byteLengthLessThan()", expected, value, options);
	}
	__name(typedArrayByteLengthLessThan, "typedArrayByteLengthLessThan");
	function typedArrayByteLengthLessThanOrEqual(value, options) {
	  const expected = `expected.byteLength <= ${value}`;
	  return typedArrayByteLengthComparator(lessThanOrEqual, "s.typedArray(T).byteLengthLessThanOrEqual()", expected, value, options);
	}
	__name(typedArrayByteLengthLessThanOrEqual, "typedArrayByteLengthLessThanOrEqual");
	function typedArrayByteLengthGreaterThan(value, options) {
	  const expected = `expected.byteLength > ${value}`;
	  return typedArrayByteLengthComparator(greaterThan, "s.typedArray(T).byteLengthGreaterThan()", expected, value, options);
	}
	__name(typedArrayByteLengthGreaterThan, "typedArrayByteLengthGreaterThan");
	function typedArrayByteLengthGreaterThanOrEqual(value, options) {
	  const expected = `expected.byteLength >= ${value}`;
	  return typedArrayByteLengthComparator(greaterThanOrEqual, "s.typedArray(T).byteLengthGreaterThanOrEqual()", expected, value, options);
	}
	__name(typedArrayByteLengthGreaterThanOrEqual, "typedArrayByteLengthGreaterThanOrEqual");
	function typedArrayByteLengthEqual(value, options) {
	  const expected = `expected.byteLength === ${value}`;
	  return typedArrayByteLengthComparator(equal, "s.typedArray(T).byteLengthEqual()", expected, value, options);
	}
	__name(typedArrayByteLengthEqual, "typedArrayByteLengthEqual");
	function typedArrayByteLengthNotEqual(value, options) {
	  const expected = `expected.byteLength !== ${value}`;
	  return typedArrayByteLengthComparator(notEqual, "s.typedArray(T).byteLengthNotEqual()", expected, value, options);
	}
	__name(typedArrayByteLengthNotEqual, "typedArrayByteLengthNotEqual");
	function typedArrayByteLengthRange(start, endBefore, options) {
	  const expected = `expected.byteLength >= ${start} && expected.byteLength < ${endBefore}`;
	  return {
	    run(input) {
	      return input.byteLength >= start && input.byteLength < endBefore ? Result.ok(input) : Result.err(
	        new ExpectedConstraintError(
	          "s.typedArray(T).byteLengthRange()",
	          options?.message ?? "Invalid Typed Array byte length",
	          input,
	          expected
	        )
	      );
	    }
	  };
	}
	__name(typedArrayByteLengthRange, "typedArrayByteLengthRange");
	function typedArrayByteLengthRangeInclusive(start, end, options) {
	  const expected = `expected.byteLength >= ${start} && expected.byteLength <= ${end}`;
	  return {
	    run(input) {
	      return input.byteLength >= start && input.byteLength <= end ? Result.ok(input) : Result.err(
	        new ExpectedConstraintError(
	          "s.typedArray(T).byteLengthRangeInclusive()",
	          options?.message ?? "Invalid Typed Array byte length",
	          input,
	          expected
	        )
	      );
	    }
	  };
	}
	__name(typedArrayByteLengthRangeInclusive, "typedArrayByteLengthRangeInclusive");
	function typedArrayByteLengthRangeExclusive(startAfter, endBefore, options) {
	  const expected = `expected.byteLength > ${startAfter} && expected.byteLength < ${endBefore}`;
	  return {
	    run(input) {
	      return input.byteLength > startAfter && input.byteLength < endBefore ? Result.ok(input) : Result.err(
	        new ExpectedConstraintError(
	          "s.typedArray(T).byteLengthRangeExclusive()",
	          options?.message ?? "Invalid Typed Array byte length",
	          input,
	          expected
	        )
	      );
	    }
	  };
	}
	__name(typedArrayByteLengthRangeExclusive, "typedArrayByteLengthRangeExclusive");
	function typedArrayLengthComparator(comparator, name, expected, length, options) {
	  return {
	    run(input) {
	      return comparator(input.length, length) ? Result.ok(input) : Result.err(new ExpectedConstraintError(name, options?.message ?? "Invalid Typed Array length", input, expected));
	    }
	  };
	}
	__name(typedArrayLengthComparator, "typedArrayLengthComparator");
	function typedArrayLengthLessThan(value, options) {
	  const expected = `expected.length < ${value}`;
	  return typedArrayLengthComparator(lessThan, "s.typedArray(T).lengthLessThan()", expected, value, options);
	}
	__name(typedArrayLengthLessThan, "typedArrayLengthLessThan");
	function typedArrayLengthLessThanOrEqual(value, options) {
	  const expected = `expected.length <= ${value}`;
	  return typedArrayLengthComparator(lessThanOrEqual, "s.typedArray(T).lengthLessThanOrEqual()", expected, value, options);
	}
	__name(typedArrayLengthLessThanOrEqual, "typedArrayLengthLessThanOrEqual");
	function typedArrayLengthGreaterThan(value, options) {
	  const expected = `expected.length > ${value}`;
	  return typedArrayLengthComparator(greaterThan, "s.typedArray(T).lengthGreaterThan()", expected, value, options);
	}
	__name(typedArrayLengthGreaterThan, "typedArrayLengthGreaterThan");
	function typedArrayLengthGreaterThanOrEqual(value, options) {
	  const expected = `expected.length >= ${value}`;
	  return typedArrayLengthComparator(greaterThanOrEqual, "s.typedArray(T).lengthGreaterThanOrEqual()", expected, value, options);
	}
	__name(typedArrayLengthGreaterThanOrEqual, "typedArrayLengthGreaterThanOrEqual");
	function typedArrayLengthEqual(value, options) {
	  const expected = `expected.length === ${value}`;
	  return typedArrayLengthComparator(equal, "s.typedArray(T).lengthEqual()", expected, value, options);
	}
	__name(typedArrayLengthEqual, "typedArrayLengthEqual");
	function typedArrayLengthNotEqual(value, options) {
	  const expected = `expected.length !== ${value}`;
	  return typedArrayLengthComparator(notEqual, "s.typedArray(T).lengthNotEqual()", expected, value, options);
	}
	__name(typedArrayLengthNotEqual, "typedArrayLengthNotEqual");
	function typedArrayLengthRange(start, endBefore, options) {
	  const expected = `expected.length >= ${start} && expected.length < ${endBefore}`;
	  return {
	    run(input) {
	      return input.length >= start && input.length < endBefore ? Result.ok(input) : Result.err(
	        new ExpectedConstraintError(
	          "s.typedArray(T).lengthRange()",
	          options?.message ?? "Invalid Typed Array length",
	          input,
	          expected
	        )
	      );
	    }
	  };
	}
	__name(typedArrayLengthRange, "typedArrayLengthRange");
	function typedArrayLengthRangeInclusive(start, end, options) {
	  const expected = `expected.length >= ${start} && expected.length <= ${end}`;
	  return {
	    run(input) {
	      return input.length >= start && input.length <= end ? Result.ok(input) : Result.err(
	        new ExpectedConstraintError(
	          "s.typedArray(T).lengthRangeInclusive()",
	          options?.message ?? "Invalid Typed Array length",
	          input,
	          expected
	        )
	      );
	    }
	  };
	}
	__name(typedArrayLengthRangeInclusive, "typedArrayLengthRangeInclusive");
	function typedArrayLengthRangeExclusive(startAfter, endBefore, options) {
	  const expected = `expected.length > ${startAfter} && expected.length < ${endBefore}`;
	  return {
	    run(input) {
	      return input.length > startAfter && input.length < endBefore ? Result.ok(input) : Result.err(
	        new ExpectedConstraintError(
	          "s.typedArray(T).lengthRangeExclusive()",
	          options?.message ?? "Invalid Typed Array length",
	          input,
	          expected
	        )
	      );
	    }
	  };
	}
	__name(typedArrayLengthRangeExclusive, "typedArrayLengthRangeExclusive");

	// src/constraints/util/common/vowels.ts
	var vowels = ["a", "e", "i", "o", "u"];
	var aOrAn = /* @__PURE__ */ __name((word) => {
	  return `${vowels.includes(word[0].toLowerCase()) ? "an" : "a"} ${word}`;
	}, "aOrAn");

	// src/constraints/util/typedArray.ts
	var TypedArrays = {
	  Int8Array: (x2) => x2 instanceof Int8Array,
	  Uint8Array: (x2) => x2 instanceof Uint8Array,
	  Uint8ClampedArray: (x2) => x2 instanceof Uint8ClampedArray,
	  Int16Array: (x2) => x2 instanceof Int16Array,
	  Uint16Array: (x2) => x2 instanceof Uint16Array,
	  Int32Array: (x2) => x2 instanceof Int32Array,
	  Uint32Array: (x2) => x2 instanceof Uint32Array,
	  Float32Array: (x2) => x2 instanceof Float32Array,
	  Float64Array: (x2) => x2 instanceof Float64Array,
	  BigInt64Array: (x2) => x2 instanceof BigInt64Array,
	  BigUint64Array: (x2) => x2 instanceof BigUint64Array,
	  TypedArray: (x2) => ArrayBuffer.isView(x2) && !(x2 instanceof DataView)
	};

	// src/validators/TypedArrayValidator.ts
	var _TypedArrayValidator = class _TypedArrayValidator extends BaseValidator {
	  constructor(type, validatorOptions = {}, constraints = []) {
	    super(validatorOptions, constraints);
	    this.type = type;
	  }
	  byteLengthLessThan(length, options = this.validatorOptions) {
	    return this.addConstraint(typedArrayByteLengthLessThan(length, options));
	  }
	  byteLengthLessThanOrEqual(length, options = this.validatorOptions) {
	    return this.addConstraint(typedArrayByteLengthLessThanOrEqual(length, options));
	  }
	  byteLengthGreaterThan(length, options = this.validatorOptions) {
	    return this.addConstraint(typedArrayByteLengthGreaterThan(length, options));
	  }
	  byteLengthGreaterThanOrEqual(length, options = this.validatorOptions) {
	    return this.addConstraint(typedArrayByteLengthGreaterThanOrEqual(length, options));
	  }
	  byteLengthEqual(length, options = this.validatorOptions) {
	    return this.addConstraint(typedArrayByteLengthEqual(length, options));
	  }
	  byteLengthNotEqual(length, options = this.validatorOptions) {
	    return this.addConstraint(typedArrayByteLengthNotEqual(length, options));
	  }
	  byteLengthRange(start, endBefore, options = this.validatorOptions) {
	    return this.addConstraint(typedArrayByteLengthRange(start, endBefore, options));
	  }
	  byteLengthRangeInclusive(startAt, endAt, options = this.validatorOptions) {
	    return this.addConstraint(typedArrayByteLengthRangeInclusive(startAt, endAt, options));
	  }
	  byteLengthRangeExclusive(startAfter, endBefore, options = this.validatorOptions) {
	    return this.addConstraint(typedArrayByteLengthRangeExclusive(startAfter, endBefore, options));
	  }
	  lengthLessThan(length, options = this.validatorOptions) {
	    return this.addConstraint(typedArrayLengthLessThan(length, options));
	  }
	  lengthLessThanOrEqual(length, options = this.validatorOptions) {
	    return this.addConstraint(typedArrayLengthLessThanOrEqual(length, options));
	  }
	  lengthGreaterThan(length, options = this.validatorOptions) {
	    return this.addConstraint(typedArrayLengthGreaterThan(length, options));
	  }
	  lengthGreaterThanOrEqual(length, options = this.validatorOptions) {
	    return this.addConstraint(typedArrayLengthGreaterThanOrEqual(length, options));
	  }
	  lengthEqual(length, options = this.validatorOptions) {
	    return this.addConstraint(typedArrayLengthEqual(length, options));
	  }
	  lengthNotEqual(length, options = this.validatorOptions) {
	    return this.addConstraint(typedArrayLengthNotEqual(length, options));
	  }
	  lengthRange(start, endBefore, options = this.validatorOptions) {
	    return this.addConstraint(typedArrayLengthRange(start, endBefore, options));
	  }
	  lengthRangeInclusive(startAt, endAt, options = this.validatorOptions) {
	    return this.addConstraint(typedArrayLengthRangeInclusive(startAt, endAt, options));
	  }
	  lengthRangeExclusive(startAfter, endBefore, options = this.validatorOptions) {
	    return this.addConstraint(typedArrayLengthRangeExclusive(startAfter, endBefore, options));
	  }
	  clone() {
	    return Reflect.construct(this.constructor, [this.type, this.validatorOptions, this.constraints]);
	  }
	  handle(value) {
	    return TypedArrays[this.type](value) ? Result.ok(value) : Result.err(new ValidationError("s.typedArray()", this.validatorOptions.message ?? `Expected ${aOrAn(this.type)}`, value));
	  }
	};
	__name(_TypedArrayValidator, "TypedArrayValidator");
	var TypedArrayValidator = _TypedArrayValidator;

	// src/lib/Shapes.ts
	var _Shapes = class _Shapes {
	  string(options) {
	    return new StringValidator(options);
	  }
	  number(options) {
	    return new NumberValidator(options);
	  }
	  bigint(options) {
	    return new BigIntValidator(options);
	  }
	  boolean(options) {
	    return new BooleanValidator(options);
	  }
	  date(options) {
	    return new DateValidator(options);
	  }
	  object(shape, options) {
	    return new ObjectValidator(shape, 0 /* Ignore */, options);
	  }
	  undefined(options) {
	    return this.literal(void 0, { equalsOptions: options });
	  }
	  null(options) {
	    return this.literal(null, { equalsOptions: options });
	  }
	  nullish(options) {
	    return new NullishValidator(options);
	  }
	  any(options) {
	    return new PassthroughValidator(options);
	  }
	  unknown(options) {
	    return new PassthroughValidator(options);
	  }
	  never(options) {
	    return new NeverValidator(options);
	  }
	  enum(values, options) {
	    return this.union(
	      values.map((value) => this.literal(value, { equalsOptions: options })),
	      options
	    );
	  }
	  nativeEnum(enumShape, options) {
	    return new NativeEnumValidator(enumShape, options);
	  }
	  literal(value, options) {
	    if (value instanceof Date) {
	      return this.date(options?.dateOptions).equal(value, options?.equalsOptions);
	    }
	    return new LiteralValidator(value, options?.equalsOptions);
	  }
	  instance(expected, options) {
	    return new InstanceValidator(expected, options);
	  }
	  union(validators, options) {
	    return new UnionValidator(validators, options);
	  }
	  array(validator, options) {
	    return new ArrayValidator(validator, options);
	  }
	  typedArray(type = "TypedArray", options) {
	    return new TypedArrayValidator(type, options);
	  }
	  int8Array(options) {
	    return this.typedArray("Int8Array", options);
	  }
	  uint8Array(options) {
	    return this.typedArray("Uint8Array", options);
	  }
	  uint8ClampedArray(options) {
	    return this.typedArray("Uint8ClampedArray", options);
	  }
	  int16Array(options) {
	    return this.typedArray("Int16Array", options);
	  }
	  uint16Array(options) {
	    return this.typedArray("Uint16Array", options);
	  }
	  int32Array(options) {
	    return this.typedArray("Int32Array", options);
	  }
	  uint32Array(options) {
	    return this.typedArray("Uint32Array", options);
	  }
	  float32Array(options) {
	    return this.typedArray("Float32Array", options);
	  }
	  float64Array(options) {
	    return this.typedArray("Float64Array", options);
	  }
	  bigInt64Array(options) {
	    return this.typedArray("BigInt64Array", options);
	  }
	  bigUint64Array(options) {
	    return this.typedArray("BigUint64Array", options);
	  }
	  tuple(validators, options) {
	    return new TupleValidator(validators, options);
	  }
	  set(validator, options) {
	    return new SetValidator(validator, options);
	  }
	  record(validator, options) {
	    return new RecordValidator(validator, options);
	  }
	  map(keyValidator, valueValidator, options) {
	    return new MapValidator(keyValidator, valueValidator, options);
	  }
	  lazy(validator, options) {
	    return new LazyValidator(validator, options);
	  }
	};
	__name(_Shapes, "Shapes");
	var Shapes = _Shapes;

	// src/index.ts
	var s3 = new Shapes();
	/**
	 * @license MIT
	 * @copyright 2020 Colin McDonnell
	 * @see https://github.com/colinhacks/zod/blob/master/LICENSE
	 */

	cjs.BaseError = BaseError;
	cjs.CombinedError = CombinedError;
	cjs.CombinedPropertyError = CombinedPropertyError;
	cjs.ExpectedConstraintError = ExpectedConstraintError;
	cjs.ExpectedValidationError = ExpectedValidationError;
	cjs.MissingPropertyError = MissingPropertyError;
	cjs.MultiplePossibilitiesConstraintError = MultiplePossibilitiesConstraintError;
	cjs.Result = Result;
	cjs.UnknownEnumValueError = UnknownEnumValueError;
	cjs.UnknownPropertyError = UnknownPropertyError;
	cjs.ValidationError = ValidationError;
	cjs.customInspectSymbol = customInspectSymbol;
	cjs.customInspectSymbolStackLess = customInspectSymbolStackLess;
	cjs.getGlobalValidationEnabled = getGlobalValidationEnabled;
	cjs.s = s3;
	cjs.setGlobalValidationEnabled = setGlobalValidationEnabled;
	
	
	return cjs;
}

var fastDeepEqual;
var hasRequiredFastDeepEqual;

function requireFastDeepEqual () {
	if (hasRequiredFastDeepEqual) return fastDeepEqual;
	hasRequiredFastDeepEqual = 1;

	// do not edit .js files directly - edit src/index.jst



	fastDeepEqual = function equal(a, b) {
	  if (a === b) return true;

	  if (a && b && typeof a == 'object' && typeof b == 'object') {
	    if (a.constructor !== b.constructor) return false;

	    var length, i, keys;
	    if (Array.isArray(a)) {
	      length = a.length;
	      if (length != b.length) return false;
	      for (i = length; i-- !== 0;)
	        if (!equal(a[i], b[i])) return false;
	      return true;
	    }



	    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
	    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
	    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();

	    keys = Object.keys(a);
	    length = keys.length;
	    if (length !== Object.keys(b).length) return false;

	    for (i = length; i-- !== 0;)
	      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;

	    for (i = length; i-- !== 0;) {
	      var key = keys[i];

	      if (!equal(a[key], b[key])) return false;
	    }

	    return true;
	  }

	  // true if both NaN, false otherwise
	  return a!==a && b!==b;
	};
	return fastDeepEqual;
}

/**
 * Utility function that works like `Object.apply`, but copies getters and setters properly as well.  Additionally gives
 * the option to exclude properties by name.
 */
const copyProps = (dest, src, exclude = []) => {
    const props = Object.getOwnPropertyDescriptors(src);
    for (let prop of exclude)
        delete props[prop];
    Object.defineProperties(dest, props);
};
/**
 * Returns the full chain of prototypes up until Object.prototype given a starting object.  The order of prototypes will
 * be closest to farthest in the chain.
 */
const protoChain = (obj, currentChain = [obj]) => {
    const proto = Object.getPrototypeOf(obj);
    if (proto === null)
        return currentChain;
    return protoChain(proto, [...currentChain, proto]);
};
/**
 * Identifies the nearest ancestor common to all the given objects in their prototype chains.  For most unrelated
 * objects, this function should return Object.prototype.
 */
const nearestCommonProto = (...objs) => {
    if (objs.length === 0)
        return undefined;
    let commonProto = undefined;
    const protoChains = objs.map(obj => protoChain(obj));
    while (protoChains.every(protoChain => protoChain.length > 0)) {
        const protos = protoChains.map(protoChain => protoChain.pop());
        const potentialCommonProto = protos[0];
        if (protos.every(proto => proto === potentialCommonProto))
            commonProto = potentialCommonProto;
        else
            break;
    }
    return commonProto;
};
/**
 * Creates a new prototype object that is a mixture of the given prototypes.  The mixing is achieved by first
 * identifying the nearest common ancestor and using it as the prototype for a new object.  Then all properties/methods
 * downstream of this prototype (ONLY downstream) are copied into the new object.
 *
 * The resulting prototype is more performant than softMixProtos(...), as well as ES5 compatible.  However, it's not as
 * flexible as updates to the source prototypes aren't captured by the mixed result.  See softMixProtos for why you may
 * want to use that instead.
 */
const hardMixProtos = (ingredients, constructor, exclude = []) => {
    var _a;
    const base = (_a = nearestCommonProto(...ingredients)) !== null && _a !== void 0 ? _a : Object.prototype;
    const mixedProto = Object.create(base);
    // Keeps track of prototypes we've already visited to avoid copying the same properties multiple times.  We init the
    // list with the proto chain below the nearest common ancestor because we don't want any of those methods mixed in
    // when they will already be accessible via prototype access.
    const visitedProtos = protoChain(base);
    for (let prototype of ingredients) {
        let protos = protoChain(prototype);
        // Apply the prototype chain in reverse order so that old methods don't override newer ones.
        for (let i = protos.length - 1; i >= 0; i--) {
            let newProto = protos[i];
            if (visitedProtos.indexOf(newProto) === -1) {
                copyProps(mixedProto, newProto, ['constructor', ...exclude]);
                visitedProtos.push(newProto);
            }
        }
    }
    mixedProto.constructor = constructor;
    return mixedProto;
};
const unique = (arr) => arr.filter((e, i) => arr.indexOf(e) == i);

/**
 * Finds the ingredient with the given prop, searching in reverse order and breadth-first if searching ingredient
 * prototypes is required.
 */
const getIngredientWithProp = (prop, ingredients) => {
    const protoChains = ingredients.map(ingredient => protoChain(ingredient));
    // since we search breadth-first, we need to keep track of our depth in the prototype chains
    let protoDepth = 0;
    // not all prototype chains are the same depth, so this remains true as long as at least one of the ingredients'
    // prototype chains has an object at this depth
    let protosAreLeftToSearch = true;
    while (protosAreLeftToSearch) {
        // with the start of each horizontal slice, we assume this is the one that's deeper than any of the proto chains
        protosAreLeftToSearch = false;
        // scan through the ingredients right to left
        for (let i = ingredients.length - 1; i >= 0; i--) {
            const searchTarget = protoChains[i][protoDepth];
            if (searchTarget !== undefined && searchTarget !== null) {
                // if we find something, this is proof that this horizontal slice potentially more objects to search
                protosAreLeftToSearch = true;
                // eureka, we found it
                if (Object.getOwnPropertyDescriptor(searchTarget, prop) != undefined) {
                    return protoChains[i][0];
                }
            }
        }
        protoDepth++;
    }
    return undefined;
};
/**
 * "Mixes" ingredients by wrapping them in a Proxy.  The optional prototype argument allows the mixed object to sit
 * downstream of an existing prototype chain.  Note that "properties" cannot be added, deleted, or modified.
 */
const proxyMix = (ingredients, prototype = Object.prototype) => new Proxy({}, {
    getPrototypeOf() {
        return prototype;
    },
    setPrototypeOf() {
        throw Error('Cannot set prototype of Proxies created by ts-mixer');
    },
    getOwnPropertyDescriptor(_, prop) {
        return Object.getOwnPropertyDescriptor(getIngredientWithProp(prop, ingredients) || {}, prop);
    },
    defineProperty() {
        throw new Error('Cannot define new properties on Proxies created by ts-mixer');
    },
    has(_, prop) {
        return getIngredientWithProp(prop, ingredients) !== undefined || prototype[prop] !== undefined;
    },
    get(_, prop) {
        return (getIngredientWithProp(prop, ingredients) || prototype)[prop];
    },
    set(_, prop, val) {
        const ingredientWithProp = getIngredientWithProp(prop, ingredients);
        if (ingredientWithProp === undefined)
            throw new Error('Cannot set new properties on Proxies created by ts-mixer');
        ingredientWithProp[prop] = val;
        return true;
    },
    deleteProperty() {
        throw new Error('Cannot delete properties on Proxies created by ts-mixer');
    },
    ownKeys() {
        return ingredients
            .map(Object.getOwnPropertyNames)
            .reduce((prev, curr) => curr.concat(prev.filter(key => curr.indexOf(key) < 0)));
    },
});
/**
 * Creates a new proxy-prototype object that is a "soft" mixture of the given prototypes.  The mixing is achieved by
 * proxying all property access to the ingredients.  This is not ES5 compatible and less performant.  However, any
 * changes made to the source prototypes will be reflected in the proxy-prototype, which may be desirable.
 */
const softMixProtos = (ingredients, constructor) => proxyMix([...ingredients, { constructor }]);

const settings = {
    initFunction: null,
    staticsStrategy: 'copy',
    prototypeStrategy: 'copy',
    decoratorInheritance: 'deep',
};

// Keeps track of constituent classes for every mixin class created by ts-mixer.
const mixins = new WeakMap();
const getMixinsForClass = (clazz) => mixins.get(clazz);
const registerMixins = (mixedClass, constituents) => mixins.set(mixedClass, constituents);
const hasMixin = (instance, mixin) => {
    if (instance instanceof mixin)
        return true;
    const constructor = instance.constructor;
    const visited = new Set();
    let frontier = new Set();
    frontier.add(constructor);
    while (frontier.size > 0) {
        // check if the frontier has the mixin we're looking for.  if not, we can say we visited every item in the frontier
        if (frontier.has(mixin))
            return true;
        frontier.forEach((item) => visited.add(item));
        // build a new frontier based on the associated mixin classes and prototype chains of each frontier item
        const newFrontier = new Set();
        frontier.forEach((item) => {
            var _a;
            const itemConstituents = (_a = mixins.get(item)) !== null && _a !== void 0 ? _a : protoChain(item.prototype)
                .map((proto) => proto.constructor)
                .filter((item) => item !== null);
            if (itemConstituents)
                itemConstituents.forEach((constituent) => {
                    if (!visited.has(constituent) && !frontier.has(constituent))
                        newFrontier.add(constituent);
                });
        });
        // we have a new frontier, now search again
        frontier = newFrontier;
    }
    // if we get here, we couldn't find the mixin anywhere in the prototype chain or associated mixin classes
    return false;
};

const mergeObjectsOfDecorators = (o1, o2) => {
    var _a, _b;
    const allKeys = unique([...Object.getOwnPropertyNames(o1), ...Object.getOwnPropertyNames(o2)]);
    const mergedObject = {};
    for (let key of allKeys)
        mergedObject[key] = unique([...((_a = o1 === null || o1 === void 0 ? void 0 : o1[key]) !== null && _a !== void 0 ? _a : []), ...((_b = o2 === null || o2 === void 0 ? void 0 : o2[key]) !== null && _b !== void 0 ? _b : [])]);
    return mergedObject;
};
const mergePropertyAndMethodDecorators = (d1, d2) => {
    var _a, _b, _c, _d;
    return ({
        property: mergeObjectsOfDecorators((_a = d1 === null || d1 === void 0 ? void 0 : d1.property) !== null && _a !== void 0 ? _a : {}, (_b = d2 === null || d2 === void 0 ? void 0 : d2.property) !== null && _b !== void 0 ? _b : {}),
        method: mergeObjectsOfDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.method) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.method) !== null && _d !== void 0 ? _d : {}),
    });
};
const mergeDecorators = (d1, d2) => {
    var _a, _b, _c, _d, _e, _f;
    return ({
        class: unique([...(_a = d1 === null || d1 === void 0 ? void 0 : d1.class) !== null && _a !== void 0 ? _a : [], ...(_b = d2 === null || d2 === void 0 ? void 0 : d2.class) !== null && _b !== void 0 ? _b : []]),
        static: mergePropertyAndMethodDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.static) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.static) !== null && _d !== void 0 ? _d : {}),
        instance: mergePropertyAndMethodDecorators((_e = d1 === null || d1 === void 0 ? void 0 : d1.instance) !== null && _e !== void 0 ? _e : {}, (_f = d2 === null || d2 === void 0 ? void 0 : d2.instance) !== null && _f !== void 0 ? _f : {}),
    });
};
const decorators = new Map();
const findAllConstituentClasses = (...classes) => {
    var _a;
    const allClasses = new Set();
    const frontier = new Set([...classes]);
    while (frontier.size > 0) {
        for (let clazz of frontier) {
            const protoChainClasses = protoChain(clazz.prototype).map(proto => proto.constructor);
            const mixinClasses = (_a = getMixinsForClass(clazz)) !== null && _a !== void 0 ? _a : [];
            const potentiallyNewClasses = [...protoChainClasses, ...mixinClasses];
            const newClasses = potentiallyNewClasses.filter(c => !allClasses.has(c));
            for (let newClass of newClasses)
                frontier.add(newClass);
            allClasses.add(clazz);
            frontier.delete(clazz);
        }
    }
    return [...allClasses];
};
const deepDecoratorSearch = (...classes) => {
    const decoratorsForClassChain = findAllConstituentClasses(...classes)
        .map(clazz => decorators.get(clazz))
        .filter(decorators => !!decorators);
    if (decoratorsForClassChain.length == 0)
        return {};
    if (decoratorsForClassChain.length == 1)
        return decoratorsForClassChain[0];
    return decoratorsForClassChain.reduce((d1, d2) => mergeDecorators(d1, d2));
};
const directDecoratorSearch = (...classes) => {
    const classDecorators = classes.map(clazz => getDecoratorsForClass(clazz));
    if (classDecorators.length === 0)
        return {};
    if (classDecorators.length === 1)
        return classDecorators[0];
    return classDecorators.reduce((d1, d2) => mergeDecorators(d1, d2));
};
const getDecoratorsForClass = (clazz) => {
    let decoratorsForClass = decorators.get(clazz);
    if (!decoratorsForClass) {
        decoratorsForClass = {};
        decorators.set(clazz, decoratorsForClass);
    }
    return decoratorsForClass;
};
const decorateClass = (decorator) => ((clazz) => {
    const decoratorsForClass = getDecoratorsForClass(clazz);
    let classDecorators = decoratorsForClass.class;
    if (!classDecorators) {
        classDecorators = [];
        decoratorsForClass.class = classDecorators;
    }
    classDecorators.push(decorator);
    return decorator(clazz);
});
const decorateMember = (decorator) => ((object, key, ...otherArgs) => {
    var _a, _b, _c;
    const decoratorTargetType = typeof object === 'function' ? 'static' : 'instance';
    const decoratorType = typeof object[key] === 'function' ? 'method' : 'property';
    const clazz = decoratorTargetType === 'static' ? object : object.constructor;
    const decoratorsForClass = getDecoratorsForClass(clazz);
    const decoratorsForTargetType = (_a = decoratorsForClass === null || decoratorsForClass === void 0 ? void 0 : decoratorsForClass[decoratorTargetType]) !== null && _a !== void 0 ? _a : {};
    decoratorsForClass[decoratorTargetType] = decoratorsForTargetType;
    let decoratorsForType = (_b = decoratorsForTargetType === null || decoratorsForTargetType === void 0 ? void 0 : decoratorsForTargetType[decoratorType]) !== null && _b !== void 0 ? _b : {};
    decoratorsForTargetType[decoratorType] = decoratorsForType;
    let decoratorsForKey = (_c = decoratorsForType === null || decoratorsForType === void 0 ? void 0 : decoratorsForType[key]) !== null && _c !== void 0 ? _c : [];
    decoratorsForType[key] = decoratorsForKey;
    // @ts-ignore: array is type `A[] | B[]` and item is type `A | B`, so technically a type error, but it's fine
    decoratorsForKey.push(decorator);
    // @ts-ignore
    return decorator(object, key, ...otherArgs);
});
const decorate = (decorator) => ((...args) => {
    if (args.length === 1)
        return decorateClass(decorator)(args[0]);
    return decorateMember(decorator)(...args);
});

function Mixin(...constructors) {
    var _a, _b, _c;
    const prototypes = constructors.map(constructor => constructor.prototype);
    // Here we gather up the init functions of the ingredient prototypes, combine them into one init function, and
    // attach it to the mixed class prototype.  The reason we do this is because we want the init functions to mix
    // similarly to constructors -- not methods, which simply override each other.
    const initFunctionName = settings.initFunction;
    if (initFunctionName !== null) {
        const initFunctions = prototypes
            .map(proto => proto[initFunctionName])
            .filter(func => typeof func === 'function');
        const combinedInitFunction = function (...args) {
            for (let initFunction of initFunctions)
                initFunction.apply(this, args);
        };
        const extraProto = { [initFunctionName]: combinedInitFunction };
        prototypes.push(extraProto);
    }
    function MixedClass(...args) {
        for (const constructor of constructors)
            // @ts-ignore: potentially abstract class
            copyProps(this, new constructor(...args));
        if (initFunctionName !== null && typeof this[initFunctionName] === 'function')
            this[initFunctionName].apply(this, args);
    }
    MixedClass.prototype = settings.prototypeStrategy === 'copy'
        ? hardMixProtos(prototypes, MixedClass)
        : softMixProtos(prototypes, MixedClass);
    Object.setPrototypeOf(MixedClass, settings.staticsStrategy === 'copy'
        ? hardMixProtos(constructors, null, ['prototype'])
        : proxyMix(constructors, Function.prototype));
    let DecoratedMixedClass = MixedClass;
    if (settings.decoratorInheritance !== 'none') {
        const classDecorators = settings.decoratorInheritance === 'deep'
            ? deepDecoratorSearch(...constructors)
            : directDecoratorSearch(...constructors);
        for (let decorator of (_a = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.class) !== null && _a !== void 0 ? _a : []) {
            const result = decorator(DecoratedMixedClass);
            if (result) {
                DecoratedMixedClass = result;
            }
        }
        applyPropAndMethodDecorators((_b = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.static) !== null && _b !== void 0 ? _b : {}, DecoratedMixedClass);
        applyPropAndMethodDecorators((_c = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.instance) !== null && _c !== void 0 ? _c : {}, DecoratedMixedClass.prototype);
    }
    registerMixins(DecoratedMixedClass, constructors);
    return DecoratedMixedClass;
}
const applyPropAndMethodDecorators = (propAndMethodDecorators, target) => {
    const propDecorators = propAndMethodDecorators.property;
    const methodDecorators = propAndMethodDecorators.method;
    if (propDecorators)
        for (let key in propDecorators)
            for (let decorator of propDecorators[key])
                decorator(target, key);
    if (methodDecorators)
        for (let key in methodDecorators)
            for (let decorator of methodDecorators[key])
                decorator(target, key, Object.getOwnPropertyDescriptor(target, key));
};
/**
 * A decorator version of the `Mixin` function.  You'll want to use this instead of `Mixin` for mixing generic classes.
 */
const mix = (...ingredients) => decoratedClass => {
    // @ts-ignore
    const mixedClass = Mixin(...ingredients.concat([decoratedClass]));
    Object.defineProperty(mixedClass, 'name', {
        value: decoratedClass.name,
        writable: false,
    });
    return mixedClass;
};

var esm = /*#__PURE__*/Object.freeze({
	__proto__: null,
	Mixin: Mixin,
	decorate: decorate,
	hasMixin: hasMixin,
	mix: mix,
	settings: settings
});

var require$$5$1 = /*@__PURE__*/getAugmentedNamespace(esm);

var hasRequiredDist$1;

function requireDist$1 () {
	if (hasRequiredDist$1) return dist$1.exports;
	hasRequiredDist$1 = 1;
	(function (module) {
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var __decorateClass = (decorators, target, key, kind) => {
		  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
		  for (var i = decorators.length - 1, decorator; i >= 0; i--)
		    if (decorator = decorators[i])
		      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
		  if (kind && result) __defProp(target, key, result);
		  return result;
		};

		// src/index.ts
		var src_exports = {};
		__export(src_exports, {
		  ActionRowBuilder: () => ActionRowBuilder,
		  ApplicationCommandNumericOptionMinMaxValueMixin: () => ApplicationCommandNumericOptionMinMaxValueMixin,
		  ApplicationCommandOptionBase: () => ApplicationCommandOptionBase,
		  ApplicationCommandOptionChannelTypesMixin: () => ApplicationCommandOptionChannelTypesMixin,
		  ApplicationCommandOptionWithAutocompleteMixin: () => ApplicationCommandOptionWithAutocompleteMixin,
		  ApplicationCommandOptionWithChoicesMixin: () => ApplicationCommandOptionWithChoicesMixin,
		  BaseSelectMenuBuilder: () => BaseSelectMenuBuilder,
		  ButtonBuilder: () => ButtonBuilder,
		  ChannelSelectMenuBuilder: () => ChannelSelectMenuBuilder,
		  ComponentAssertions: () => Assertions_exports2,
		  ComponentBuilder: () => ComponentBuilder,
		  ContextMenuCommandAssertions: () => Assertions_exports6,
		  ContextMenuCommandBuilder: () => ContextMenuCommandBuilder,
		  EmbedAssertions: () => Assertions_exports,
		  EmbedBuilder: () => EmbedBuilder,
		  MentionableSelectMenuBuilder: () => MentionableSelectMenuBuilder,
		  ModalAssertions: () => Assertions_exports4,
		  ModalBuilder: () => ModalBuilder,
		  RoleSelectMenuBuilder: () => RoleSelectMenuBuilder,
		  SelectMenuBuilder: () => StringSelectMenuBuilder,
		  SelectMenuOptionBuilder: () => StringSelectMenuOptionBuilder,
		  SharedNameAndDescription: () => SharedNameAndDescription,
		  SharedSlashCommand: () => SharedSlashCommand,
		  SharedSlashCommandOptions: () => SharedSlashCommandOptions,
		  SharedSlashCommandSubcommands: () => SharedSlashCommandSubcommands,
		  SlashCommandAssertions: () => Assertions_exports5,
		  SlashCommandAttachmentOption: () => SlashCommandAttachmentOption,
		  SlashCommandBooleanOption: () => SlashCommandBooleanOption,
		  SlashCommandBuilder: () => SlashCommandBuilder,
		  SlashCommandChannelOption: () => SlashCommandChannelOption,
		  SlashCommandIntegerOption: () => SlashCommandIntegerOption,
		  SlashCommandMentionableOption: () => SlashCommandMentionableOption,
		  SlashCommandNumberOption: () => SlashCommandNumberOption,
		  SlashCommandRoleOption: () => SlashCommandRoleOption,
		  SlashCommandStringOption: () => SlashCommandStringOption,
		  SlashCommandSubcommandBuilder: () => SlashCommandSubcommandBuilder,
		  SlashCommandSubcommandGroupBuilder: () => SlashCommandSubcommandGroupBuilder,
		  SlashCommandUserOption: () => SlashCommandUserOption,
		  StringSelectMenuBuilder: () => StringSelectMenuBuilder,
		  StringSelectMenuOptionBuilder: () => StringSelectMenuOptionBuilder,
		  TextInputAssertions: () => Assertions_exports3,
		  TextInputBuilder: () => TextInputBuilder,
		  UserSelectMenuBuilder: () => UserSelectMenuBuilder,
		  createComponentBuilder: () => createComponentBuilder,
		  disableValidators: () => disableValidators,
		  embedLength: () => embedLength,
		  enableValidators: () => enableValidators,
		  isValidationEnabled: () => isValidationEnabled,
		  normalizeArray: () => normalizeArray,
		  version: () => version
		});
		module.exports = __toCommonJS(src_exports);

		// src/messages/embed/Assertions.ts
		var Assertions_exports = {};
		__export(Assertions_exports, {
		  RGBPredicate: () => RGBPredicate,
		  authorNamePredicate: () => authorNamePredicate,
		  colorPredicate: () => colorPredicate,
		  descriptionPredicate: () => descriptionPredicate,
		  embedAuthorPredicate: () => embedAuthorPredicate,
		  embedFieldPredicate: () => embedFieldPredicate,
		  embedFieldsArrayPredicate: () => embedFieldsArrayPredicate,
		  embedFooterPredicate: () => embedFooterPredicate,
		  fieldInlinePredicate: () => fieldInlinePredicate,
		  fieldLengthPredicate: () => fieldLengthPredicate,
		  fieldNamePredicate: () => fieldNamePredicate,
		  fieldValuePredicate: () => fieldValuePredicate,
		  footerTextPredicate: () => footerTextPredicate,
		  imageURLPredicate: () => imageURLPredicate,
		  timestampPredicate: () => timestampPredicate,
		  titlePredicate: () => titlePredicate,
		  urlPredicate: () => urlPredicate,
		  validateFieldLength: () => validateFieldLength
		});
		var import_shapeshift = /*@__PURE__*/ requireCjs();

		// src/util/validation.ts
		var validate = true;
		function enableValidators() {
		  return validate = true;
		}
		__name(enableValidators, "enableValidators");
		function disableValidators() {
		  return validate = false;
		}
		__name(disableValidators, "disableValidators");
		function isValidationEnabled() {
		  return validate;
		}
		__name(isValidationEnabled, "isValidationEnabled");

		// src/messages/embed/Assertions.ts
		var fieldNamePredicate = import_shapeshift.s.string().lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(256).setValidationEnabled(isValidationEnabled);
		var fieldValuePredicate = import_shapeshift.s.string().lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(1024).setValidationEnabled(isValidationEnabled);
		var fieldInlinePredicate = import_shapeshift.s.boolean().optional();
		var embedFieldPredicate = import_shapeshift.s.object({
		  name: fieldNamePredicate,
		  value: fieldValuePredicate,
		  inline: fieldInlinePredicate
		}).setValidationEnabled(isValidationEnabled);
		var embedFieldsArrayPredicate = embedFieldPredicate.array().setValidationEnabled(isValidationEnabled);
		var fieldLengthPredicate = import_shapeshift.s.number().lessThanOrEqual(25).setValidationEnabled(isValidationEnabled);
		function validateFieldLength(amountAdding, fields) {
		  fieldLengthPredicate.parse((fields?.length ?? 0) + amountAdding);
		}
		__name(validateFieldLength, "validateFieldLength");
		var authorNamePredicate = fieldNamePredicate.nullable().setValidationEnabled(isValidationEnabled);
		var imageURLPredicate = import_shapeshift.s.string().url({
		  allowedProtocols: ["http:", "https:", "attachment:"]
		}).nullish().setValidationEnabled(isValidationEnabled);
		var urlPredicate = import_shapeshift.s.string().url({
		  allowedProtocols: ["http:", "https:"]
		}).nullish().setValidationEnabled(isValidationEnabled);
		var embedAuthorPredicate = import_shapeshift.s.object({
		  name: authorNamePredicate,
		  iconURL: imageURLPredicate,
		  url: urlPredicate
		}).setValidationEnabled(isValidationEnabled);
		var RGBPredicate = import_shapeshift.s.number().int().greaterThanOrEqual(0).lessThanOrEqual(255).setValidationEnabled(isValidationEnabled);
		var colorPredicate = import_shapeshift.s.number().int().greaterThanOrEqual(0).lessThanOrEqual(16777215).or(import_shapeshift.s.tuple([RGBPredicate, RGBPredicate, RGBPredicate])).nullable().setValidationEnabled(isValidationEnabled);
		var descriptionPredicate = import_shapeshift.s.string().lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(4096).nullable().setValidationEnabled(isValidationEnabled);
		var footerTextPredicate = import_shapeshift.s.string().lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(2048).nullable().setValidationEnabled(isValidationEnabled);
		var embedFooterPredicate = import_shapeshift.s.object({
		  text: footerTextPredicate,
		  iconURL: imageURLPredicate
		}).setValidationEnabled(isValidationEnabled);
		var timestampPredicate = import_shapeshift.s.union([import_shapeshift.s.number(), import_shapeshift.s.date()]).nullable().setValidationEnabled(isValidationEnabled);
		var titlePredicate = fieldNamePredicate.nullable().setValidationEnabled(isValidationEnabled);

		// src/util/normalizeArray.ts
		function normalizeArray(arr) {
		  if (Array.isArray(arr[0])) return [...arr[0]];
		  return arr;
		}
		__name(normalizeArray, "normalizeArray");

		// src/messages/embed/Embed.ts
		var EmbedBuilder = class {
		  static {
		    __name(this, "EmbedBuilder");
		  }
		  /**
		   * The API data associated with this embed.
		   */
		  data;
		  /**
		   * Creates a new embed from API data.
		   *
		   * @param data - The API data to create this embed with
		   */
		  constructor(data = {}) {
		    this.data = { ...data };
		    if (data.timestamp) this.data.timestamp = new Date(data.timestamp).toISOString();
		  }
		  /**
		   * Appends fields to the embed.
		   *
		   * @remarks
		   * This method accepts either an array of fields or a variable number of field parameters.
		   * The maximum amount of fields that can be added is 25.
		   * @example
		   * Using an array:
		   * ```ts
		   * const fields: APIEmbedField[] = ...;
		   * const embed = new EmbedBuilder()
		   * 	.addFields(fields);
		   * ```
		   * @example
		   * Using rest parameters (variadic):
		   * ```ts
		   * const embed = new EmbedBuilder()
		   * 	.addFields(
		   * 		{ name: 'Field 1', value: 'Value 1' },
		   * 		{ name: 'Field 2', value: 'Value 2' },
		   * 	);
		   * ```
		   * @param fields - The fields to add
		   */
		  addFields(...fields) {
		    const normalizedFields = normalizeArray(fields);
		    validateFieldLength(normalizedFields.length, this.data.fields);
		    embedFieldsArrayPredicate.parse(normalizedFields);
		    if (this.data.fields) this.data.fields.push(...normalizedFields);
		    else this.data.fields = normalizedFields;
		    return this;
		  }
		  /**
		   * Removes, replaces, or inserts fields for this embed.
		   *
		   * @remarks
		   * This method behaves similarly
		   * to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice | Array.prototype.splice()}.
		   * The maximum amount of fields that can be added is 25.
		   *
		   * It's useful for modifying and adjusting order of the already-existing fields of an embed.
		   * @example
		   * Remove the first field:
		   * ```ts
		   * embed.spliceFields(0, 1);
		   * ```
		   * @example
		   * Remove the first n fields:
		   * ```ts
		   * const n = 4;
		   * embed.spliceFields(0, n);
		   * ```
		   * @example
		   * Remove the last field:
		   * ```ts
		   * embed.spliceFields(-1, 1);
		   * ```
		   * @param index - The index to start at
		   * @param deleteCount - The number of fields to remove
		   * @param fields - The replacing field objects
		   */
		  spliceFields(index, deleteCount, ...fields) {
		    validateFieldLength(fields.length - deleteCount, this.data.fields);
		    embedFieldsArrayPredicate.parse(fields);
		    if (this.data.fields) this.data.fields.splice(index, deleteCount, ...fields);
		    else this.data.fields = fields;
		    return this;
		  }
		  /**
		   * Sets the fields for this embed.
		   *
		   * @remarks
		   * This method is an alias for {@link EmbedBuilder.spliceFields}. More specifically,
		   * it splices the entire array of fields, replacing them with the provided fields.
		   *
		   * You can set a maximum of 25 fields.
		   * @param fields - The fields to set
		   */
		  setFields(...fields) {
		    this.spliceFields(0, this.data.fields?.length ?? 0, ...normalizeArray(fields));
		    return this;
		  }
		  /**
		   * Sets the author of this embed.
		   *
		   * @param options - The options to use
		   */
		  setAuthor(options) {
		    if (options === null) {
		      this.data.author = void 0;
		      return this;
		    }
		    embedAuthorPredicate.parse(options);
		    this.data.author = { name: options.name, url: options.url, icon_url: options.iconURL };
		    return this;
		  }
		  /**
		   * Sets the color of this embed.
		   *
		   * @param color - The color to use
		   */
		  setColor(color) {
		    colorPredicate.parse(color);
		    if (Array.isArray(color)) {
		      const [red, green, blue] = color;
		      this.data.color = (red << 16) + (green << 8) + blue;
		      return this;
		    }
		    this.data.color = color ?? void 0;
		    return this;
		  }
		  /**
		   * Sets the description of this embed.
		   *
		   * @param description - The description to use
		   */
		  setDescription(description) {
		    descriptionPredicate.parse(description);
		    this.data.description = description ?? void 0;
		    return this;
		  }
		  /**
		   * Sets the footer of this embed.
		   *
		   * @param options - The footer to use
		   */
		  setFooter(options) {
		    if (options === null) {
		      this.data.footer = void 0;
		      return this;
		    }
		    embedFooterPredicate.parse(options);
		    this.data.footer = { text: options.text, icon_url: options.iconURL };
		    return this;
		  }
		  /**
		   * Sets the image of this embed.
		   *
		   * @param url - The image URL to use
		   */
		  setImage(url) {
		    imageURLPredicate.parse(url);
		    this.data.image = url ? { url } : void 0;
		    return this;
		  }
		  /**
		   * Sets the thumbnail of this embed.
		   *
		   * @param url - The thumbnail URL to use
		   */
		  setThumbnail(url) {
		    imageURLPredicate.parse(url);
		    this.data.thumbnail = url ? { url } : void 0;
		    return this;
		  }
		  /**
		   * Sets the timestamp of this embed.
		   *
		   * @param timestamp - The timestamp or date to use
		   */
		  setTimestamp(timestamp = Date.now()) {
		    timestampPredicate.parse(timestamp);
		    this.data.timestamp = timestamp ? new Date(timestamp).toISOString() : void 0;
		    return this;
		  }
		  /**
		   * Sets the title for this embed.
		   *
		   * @param title - The title to use
		   */
		  setTitle(title) {
		    titlePredicate.parse(title);
		    this.data.title = title ?? void 0;
		    return this;
		  }
		  /**
		   * Sets the URL of this embed.
		   *
		   * @param url - The URL to use
		   */
		  setURL(url) {
		    urlPredicate.parse(url);
		    this.data.url = url ?? void 0;
		    return this;
		  }
		  /**
		   * Serializes this builder to API-compatible JSON data.
		   *
		   * @remarks
		   * This method runs validations on the data before serializing it.
		   * As such, it may throw an error if the data is invalid.
		   */
		  toJSON() {
		    return { ...this.data };
		  }
		};

		// src/index.ts
		__reExport(src_exports, requireDist$2(), module.exports);

		// src/components/Assertions.ts
		var Assertions_exports2 = {};
		__export(Assertions_exports2, {
		  buttonLabelValidator: () => buttonLabelValidator,
		  buttonStyleValidator: () => buttonStyleValidator,
		  channelTypesValidator: () => channelTypesValidator,
		  customIdValidator: () => customIdValidator,
		  defaultValidator: () => defaultValidator,
		  disabledValidator: () => disabledValidator,
		  emojiValidator: () => emojiValidator,
		  jsonOptionValidator: () => jsonOptionValidator,
		  labelValueDescriptionValidator: () => labelValueDescriptionValidator,
		  minMaxValidator: () => minMaxValidator,
		  optionValidator: () => optionValidator,
		  optionsLengthValidator: () => optionsLengthValidator,
		  optionsValidator: () => optionsValidator,
		  placeholderValidator: () => placeholderValidator,
		  urlValidator: () => urlValidator,
		  validateRequiredButtonParameters: () => validateRequiredButtonParameters,
		  validateRequiredSelectMenuOptionParameters: () => validateRequiredSelectMenuOptionParameters,
		  validateRequiredSelectMenuParameters: () => validateRequiredSelectMenuParameters
		});
		var import_shapeshift2 = /*@__PURE__*/ requireCjs();
		var import_v10 = requireV10$c();

		// src/components/selectMenu/StringSelectMenuOption.ts
		var StringSelectMenuOptionBuilder = class {
		  /**
		   * Creates a new string select menu option from API data.
		   *
		   * @param data - The API data to create this string select menu option with
		   * @example
		   * Creating a string select menu option from an API data object:
		   * ```ts
		   * const selectMenuOption = new SelectMenuOptionBuilder({
		   * 	label: 'catchy label',
		   * 	value: '1',
		   * });
		   * ```
		   * @example
		   * Creating a string select menu option using setters and API data:
		   * ```ts
		   * const selectMenuOption = new SelectMenuOptionBuilder({
		   * 	default: true,
		   * 	value: '1',
		   * })
		   * 	.setLabel('woah');
		   * ```
		   */
		  constructor(data = {}) {
		    this.data = data;
		  }
		  static {
		    __name(this, "StringSelectMenuOptionBuilder");
		  }
		  /**
		   * Sets the label for this option.
		   *
		   * @param label - The label to use
		   */
		  setLabel(label) {
		    this.data.label = labelValueDescriptionValidator.parse(label);
		    return this;
		  }
		  /**
		   * Sets the value for this option.
		   *
		   * @param value - The value to use
		   */
		  setValue(value) {
		    this.data.value = labelValueDescriptionValidator.parse(value);
		    return this;
		  }
		  /**
		   * Sets the description for this option.
		   *
		   * @param description - The description to use
		   */
		  setDescription(description) {
		    this.data.description = labelValueDescriptionValidator.parse(description);
		    return this;
		  }
		  /**
		   * Sets whether this option is selected by default.
		   *
		   * @param isDefault - Whether this option is selected by default
		   */
		  setDefault(isDefault = true) {
		    this.data.default = defaultValidator.parse(isDefault);
		    return this;
		  }
		  /**
		   * Sets the emoji to display for this option.
		   *
		   * @param emoji - The emoji to use
		   */
		  setEmoji(emoji) {
		    this.data.emoji = emojiValidator.parse(emoji);
		    return this;
		  }
		  /**
		   * {@inheritDoc BaseSelectMenuBuilder.toJSON}
		   */
		  toJSON() {
		    validateRequiredSelectMenuOptionParameters(this.data.label, this.data.value);
		    return {
		      ...this.data
		    };
		  }
		};

		// src/components/Assertions.ts
		var customIdValidator = import_shapeshift2.s.string().lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(100).setValidationEnabled(isValidationEnabled);
		var emojiValidator = import_shapeshift2.s.object({
		  id: import_shapeshift2.s.string(),
		  name: import_shapeshift2.s.string(),
		  animated: import_shapeshift2.s.boolean()
		}).partial().strict().setValidationEnabled(isValidationEnabled);
		var disabledValidator = import_shapeshift2.s.boolean();
		var buttonLabelValidator = import_shapeshift2.s.string().lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(80).setValidationEnabled(isValidationEnabled);
		var buttonStyleValidator = import_shapeshift2.s.nativeEnum(import_v10.ButtonStyle);
		var placeholderValidator = import_shapeshift2.s.string().lengthLessThanOrEqual(150).setValidationEnabled(isValidationEnabled);
		var minMaxValidator = import_shapeshift2.s.number().int().greaterThanOrEqual(0).lessThanOrEqual(25).setValidationEnabled(isValidationEnabled);
		var labelValueDescriptionValidator = import_shapeshift2.s.string().lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(100).setValidationEnabled(isValidationEnabled);
		var jsonOptionValidator = import_shapeshift2.s.object({
		  label: labelValueDescriptionValidator,
		  value: labelValueDescriptionValidator,
		  description: labelValueDescriptionValidator.optional(),
		  emoji: emojiValidator.optional(),
		  default: import_shapeshift2.s.boolean().optional()
		}).setValidationEnabled(isValidationEnabled);
		var optionValidator = import_shapeshift2.s.instance(StringSelectMenuOptionBuilder).setValidationEnabled(isValidationEnabled);
		var optionsValidator = optionValidator.array().lengthGreaterThanOrEqual(0).setValidationEnabled(isValidationEnabled);
		var optionsLengthValidator = import_shapeshift2.s.number().int().greaterThanOrEqual(0).lessThanOrEqual(25).setValidationEnabled(isValidationEnabled);
		function validateRequiredSelectMenuParameters(options, customId) {
		  customIdValidator.parse(customId);
		  optionsValidator.parse(options);
		}
		__name(validateRequiredSelectMenuParameters, "validateRequiredSelectMenuParameters");
		var defaultValidator = import_shapeshift2.s.boolean();
		function validateRequiredSelectMenuOptionParameters(label, value) {
		  labelValueDescriptionValidator.parse(label);
		  labelValueDescriptionValidator.parse(value);
		}
		__name(validateRequiredSelectMenuOptionParameters, "validateRequiredSelectMenuOptionParameters");
		var channelTypesValidator = import_shapeshift2.s.nativeEnum(import_v10.ChannelType).array().setValidationEnabled(isValidationEnabled);
		var urlValidator = import_shapeshift2.s.string().url({
		  allowedProtocols: ["http:", "https:", "discord:"]
		}).setValidationEnabled(isValidationEnabled);
		function validateRequiredButtonParameters(style, label, emoji, customId, skuId, url) {
		  if (style === import_v10.ButtonStyle.Premium) {
		    if (!skuId) {
		      throw new RangeError("Premium buttons must have an SKU id.");
		    }
		    if (customId || label || url || emoji) {
		      throw new RangeError("Premium buttons cannot have a custom id, label, URL, or emoji.");
		    }
		  } else {
		    if (skuId) {
		      throw new RangeError("Non-premium buttons must not have an SKU id.");
		    }
		    if (url && customId) {
		      throw new RangeError("URL and custom id are mutually exclusive.");
		    }
		    if (!label && !emoji) {
		      throw new RangeError("Non-premium buttons must have a label and/or an emoji.");
		    }
		    if (style === import_v10.ButtonStyle.Link) {
		      if (!url) {
		        throw new RangeError("Link buttons must have a URL.");
		      }
		    } else if (url) {
		      throw new RangeError("Non-premium and non-link buttons cannot have a URL.");
		    }
		  }
		}
		__name(validateRequiredButtonParameters, "validateRequiredButtonParameters");

		// src/components/ActionRow.ts
		var import_v1011 = requireV10$c();

		// src/components/Component.ts
		var ComponentBuilder = class {
		  static {
		    __name(this, "ComponentBuilder");
		  }
		  /**
		   * The API data associated with this component.
		   */
		  data;
		  /**
		   * Constructs a new kind of component.
		   *
		   * @param data - The data to construct a component out of
		   */
		  constructor(data) {
		    this.data = data;
		  }
		};

		// src/components/Components.ts
		var import_v1010 = requireV10$c();

		// src/components/button/Button.ts
		var import_v102 = requireV10$c();
		var ButtonBuilder = class extends ComponentBuilder {
		  static {
		    __name(this, "ButtonBuilder");
		  }
		  /**
		   * Creates a new button from API data.
		   *
		   * @param data - The API data to create this button with
		   * @example
		   * Creating a button from an API data object:
		   * ```ts
		   * const button = new ButtonBuilder({
		   * 	custom_id: 'a cool button',
		   * 	style: ButtonStyle.Primary,
		   * 	label: 'Click Me',
		   * 	emoji: {
		   * 		name: 'smile',
		   * 		id: '123456789012345678',
		   * 	},
		   * });
		   * ```
		   * @example
		   * Creating a button using setters and API data:
		   * ```ts
		   * const button = new ButtonBuilder({
		   * 	style: ButtonStyle.Secondary,
		   * 	label: 'Click Me',
		   * })
		   * 	.setEmoji({ name: '🙂' })
		   * 	.setCustomId('another cool button');
		   * ```
		   */
		  constructor(data) {
		    super({ type: import_v102.ComponentType.Button, ...data });
		  }
		  /**
		   * Sets the style of this button.
		   *
		   * @param style - The style to use
		   */
		  setStyle(style) {
		    this.data.style = buttonStyleValidator.parse(style);
		    return this;
		  }
		  /**
		   * Sets the URL for this button.
		   *
		   * @remarks
		   * This method is only available to buttons using the `Link` button style.
		   * Only three types of URL schemes are currently supported: `https://`, `http://`, and `discord://`.
		   * @param url - The URL to use
		   */
		  setURL(url) {
		    this.data.url = urlValidator.parse(url);
		    return this;
		  }
		  /**
		   * Sets the custom id for this button.
		   *
		   * @remarks
		   * This method is only applicable to buttons that are not using the `Link` button style.
		   * @param customId - The custom id to use
		   */
		  setCustomId(customId) {
		    this.data.custom_id = customIdValidator.parse(customId);
		    return this;
		  }
		  /**
		   * Sets the SKU id that represents a purchasable SKU for this button.
		   *
		   * @remarks Only available when using premium-style buttons.
		   * @param skuId - The SKU id to use
		   */
		  setSKUId(skuId) {
		    this.data.sku_id = skuId;
		    return this;
		  }
		  /**
		   * Sets the emoji to display on this button.
		   *
		   * @param emoji - The emoji to use
		   */
		  setEmoji(emoji) {
		    this.data.emoji = emojiValidator.parse(emoji);
		    return this;
		  }
		  /**
		   * Sets whether this button is disabled.
		   *
		   * @param disabled - Whether to disable this button
		   */
		  setDisabled(disabled = true) {
		    this.data.disabled = disabledValidator.parse(disabled);
		    return this;
		  }
		  /**
		   * Sets the label for this button.
		   *
		   * @param label - The label to use
		   */
		  setLabel(label) {
		    this.data.label = buttonLabelValidator.parse(label);
		    return this;
		  }
		  /**
		   * {@inheritDoc ComponentBuilder.toJSON}
		   */
		  toJSON() {
		    validateRequiredButtonParameters(
		      this.data.style,
		      this.data.label,
		      this.data.emoji,
		      this.data.custom_id,
		      this.data.sku_id,
		      this.data.url
		    );
		    return {
		      ...this.data
		    };
		  }
		};

		// src/components/selectMenu/ChannelSelectMenu.ts
		var import_v103 = requireV10$c();

		// src/components/selectMenu/BaseSelectMenu.ts
		var BaseSelectMenuBuilder = class extends ComponentBuilder {
		  static {
		    __name(this, "BaseSelectMenuBuilder");
		  }
		  /**
		   * Sets the placeholder for this select menu.
		   *
		   * @param placeholder - The placeholder to use
		   */
		  setPlaceholder(placeholder) {
		    this.data.placeholder = placeholderValidator.parse(placeholder);
		    return this;
		  }
		  /**
		   * Sets the minimum values that must be selected in the select menu.
		   *
		   * @param minValues - The minimum values that must be selected
		   */
		  setMinValues(minValues) {
		    this.data.min_values = minMaxValidator.parse(minValues);
		    return this;
		  }
		  /**
		   * Sets the maximum values that must be selected in the select menu.
		   *
		   * @param maxValues - The maximum values that must be selected
		   */
		  setMaxValues(maxValues) {
		    this.data.max_values = minMaxValidator.parse(maxValues);
		    return this;
		  }
		  /**
		   * Sets the custom id for this select menu.
		   *
		   * @param customId - The custom id to use
		   */
		  setCustomId(customId) {
		    this.data.custom_id = customIdValidator.parse(customId);
		    return this;
		  }
		  /**
		   * Sets whether this select menu is disabled.
		   *
		   * @param disabled - Whether this select menu is disabled
		   */
		  setDisabled(disabled = true) {
		    this.data.disabled = disabledValidator.parse(disabled);
		    return this;
		  }
		  /**
		   * {@inheritDoc ComponentBuilder.toJSON}
		   */
		  toJSON() {
		    customIdValidator.parse(this.data.custom_id);
		    return {
		      ...this.data
		    };
		  }
		};

		// src/components/selectMenu/ChannelSelectMenu.ts
		var ChannelSelectMenuBuilder = class extends BaseSelectMenuBuilder {
		  static {
		    __name(this, "ChannelSelectMenuBuilder");
		  }
		  /**
		   * Creates a new select menu from API data.
		   *
		   * @param data - The API data to create this select menu with
		   * @example
		   * Creating a select menu from an API data object:
		   * ```ts
		   * const selectMenu = new ChannelSelectMenuBuilder({
		   * 	custom_id: 'a cool select menu',
		   * 	placeholder: 'select an option',
		   * 	max_values: 2,
		   * });
		   * ```
		   * @example
		   * Creating a select menu using setters and API data:
		   * ```ts
		   * const selectMenu = new ChannelSelectMenuBuilder({
		   * 	custom_id: 'a cool select menu',
		   * })
		   * 	.addChannelTypes(ChannelType.GuildText, ChannelType.GuildAnnouncement)
		   * 	.setMinValues(2);
		   * ```
		   */
		  constructor(data) {
		    super({ ...data, type: import_v103.ComponentType.ChannelSelect });
		  }
		  /**
		   * Adds channel types to this select menu.
		   *
		   * @param types - The channel types to use
		   */
		  addChannelTypes(...types) {
		    const normalizedTypes = normalizeArray(types);
		    this.data.channel_types ??= [];
		    this.data.channel_types.push(...channelTypesValidator.parse(normalizedTypes));
		    return this;
		  }
		  /**
		   * Sets channel types for this select menu.
		   *
		   * @param types - The channel types to use
		   */
		  setChannelTypes(...types) {
		    const normalizedTypes = normalizeArray(types);
		    this.data.channel_types ??= [];
		    this.data.channel_types.splice(0, this.data.channel_types.length, ...channelTypesValidator.parse(normalizedTypes));
		    return this;
		  }
		  /**
		   * Adds default channels to this auto populated select menu.
		   *
		   * @param channels - The channels to add
		   */
		  addDefaultChannels(...channels) {
		    const normalizedValues = normalizeArray(channels);
		    optionsLengthValidator.parse((this.data.default_values?.length ?? 0) + normalizedValues.length);
		    this.data.default_values ??= [];
		    this.data.default_values.push(
		      ...normalizedValues.map((id) => ({
		        id,
		        type: import_v103.SelectMenuDefaultValueType.Channel
		      }))
		    );
		    return this;
		  }
		  /**
		   * Sets default channels for this auto populated select menu.
		   *
		   * @param channels - The channels to set
		   */
		  setDefaultChannels(...channels) {
		    const normalizedValues = normalizeArray(channels);
		    optionsLengthValidator.parse(normalizedValues.length);
		    this.data.default_values = normalizedValues.map((id) => ({
		      id,
		      type: import_v103.SelectMenuDefaultValueType.Channel
		    }));
		    return this;
		  }
		  /**
		   * {@inheritDoc BaseSelectMenuBuilder.toJSON}
		   */
		  toJSON() {
		    customIdValidator.parse(this.data.custom_id);
		    return {
		      ...this.data
		    };
		  }
		};

		// src/components/selectMenu/MentionableSelectMenu.ts
		var import_v104 = requireV10$c();
		var MentionableSelectMenuBuilder = class extends BaseSelectMenuBuilder {
		  static {
		    __name(this, "MentionableSelectMenuBuilder");
		  }
		  /**
		   * Creates a new select menu from API data.
		   *
		   * @param data - The API data to create this select menu with
		   * @example
		   * Creating a select menu from an API data object:
		   * ```ts
		   * const selectMenu = new MentionableSelectMenuBuilder({
		   * 	custom_id: 'a cool select menu',
		   * 	placeholder: 'select an option',
		   * 	max_values: 2,
		   * });
		   * ```
		   * @example
		   * Creating a select menu using setters and API data:
		   * ```ts
		   * const selectMenu = new MentionableSelectMenuBuilder({
		   * 	custom_id: 'a cool select menu',
		   * })
		   * 	.setMinValues(1);
		   * ```
		   */
		  constructor(data) {
		    super({ ...data, type: import_v104.ComponentType.MentionableSelect });
		  }
		  /**
		   * Adds default roles to this auto populated select menu.
		   *
		   * @param roles - The roles to add
		   */
		  addDefaultRoles(...roles) {
		    const normalizedValues = normalizeArray(roles);
		    optionsLengthValidator.parse((this.data.default_values?.length ?? 0) + normalizedValues.length);
		    this.data.default_values ??= [];
		    this.data.default_values.push(
		      ...normalizedValues.map((id) => ({
		        id,
		        type: import_v104.SelectMenuDefaultValueType.Role
		      }))
		    );
		    return this;
		  }
		  /**
		   * Adds default users to this auto populated select menu.
		   *
		   * @param users - The users to add
		   */
		  addDefaultUsers(...users) {
		    const normalizedValues = normalizeArray(users);
		    optionsLengthValidator.parse((this.data.default_values?.length ?? 0) + normalizedValues.length);
		    this.data.default_values ??= [];
		    this.data.default_values.push(
		      ...normalizedValues.map((id) => ({
		        id,
		        type: import_v104.SelectMenuDefaultValueType.User
		      }))
		    );
		    return this;
		  }
		  /**
		   * Adds default values to this auto populated select menu.
		   *
		   * @param values - The values to add
		   */
		  addDefaultValues(...values) {
		    const normalizedValues = normalizeArray(values);
		    optionsLengthValidator.parse((this.data.default_values?.length ?? 0) + normalizedValues.length);
		    this.data.default_values ??= [];
		    this.data.default_values.push(...normalizedValues);
		    return this;
		  }
		  /**
		   * Sets default values for this auto populated select menu.
		   *
		   * @param values - The values to set
		   */
		  setDefaultValues(...values) {
		    const normalizedValues = normalizeArray(values);
		    optionsLengthValidator.parse(normalizedValues.length);
		    this.data.default_values = normalizedValues;
		    return this;
		  }
		};

		// src/components/selectMenu/RoleSelectMenu.ts
		var import_v105 = requireV10$c();
		var RoleSelectMenuBuilder = class extends BaseSelectMenuBuilder {
		  static {
		    __name(this, "RoleSelectMenuBuilder");
		  }
		  /**
		   * Creates a new select menu from API data.
		   *
		   * @param data - The API data to create this select menu with
		   * @example
		   * Creating a select menu from an API data object:
		   * ```ts
		   * const selectMenu = new RoleSelectMenuBuilder({
		   * 	custom_id: 'a cool select menu',
		   * 	placeholder: 'select an option',
		   * 	max_values: 2,
		   * });
		   * ```
		   * @example
		   * Creating a select menu using setters and API data:
		   * ```ts
		   * const selectMenu = new RoleSelectMenuBuilder({
		   * 	custom_id: 'a cool select menu',
		   * })
		   * 	.setMinValues(1);
		   * ```
		   */
		  constructor(data) {
		    super({ ...data, type: import_v105.ComponentType.RoleSelect });
		  }
		  /**
		   * Adds default roles to this auto populated select menu.
		   *
		   * @param roles - The roles to add
		   */
		  addDefaultRoles(...roles) {
		    const normalizedValues = normalizeArray(roles);
		    optionsLengthValidator.parse((this.data.default_values?.length ?? 0) + normalizedValues.length);
		    this.data.default_values ??= [];
		    this.data.default_values.push(
		      ...normalizedValues.map((id) => ({
		        id,
		        type: import_v105.SelectMenuDefaultValueType.Role
		      }))
		    );
		    return this;
		  }
		  /**
		   * Sets default roles for this auto populated select menu.
		   *
		   * @param roles - The roles to set
		   */
		  setDefaultRoles(...roles) {
		    const normalizedValues = normalizeArray(roles);
		    optionsLengthValidator.parse(normalizedValues.length);
		    this.data.default_values = normalizedValues.map((id) => ({
		      id,
		      type: import_v105.SelectMenuDefaultValueType.Role
		    }));
		    return this;
		  }
		};

		// src/components/selectMenu/StringSelectMenu.ts
		var import_v106 = requireV10$c();
		var StringSelectMenuBuilder = class extends BaseSelectMenuBuilder {
		  static {
		    __name(this, "StringSelectMenuBuilder");
		  }
		  /**
		   * The options within this select menu.
		   */
		  options;
		  /**
		   * Creates a new select menu from API data.
		   *
		   * @param data - The API data to create this select menu with
		   * @example
		   * Creating a select menu from an API data object:
		   * ```ts
		   * const selectMenu = new StringSelectMenuBuilder({
		   * 	custom_id: 'a cool select menu',
		   * 	placeholder: 'select an option',
		   * 	max_values: 2,
		   * 	options: [
		   * 		{ label: 'option 1', value: '1' },
		   * 		{ label: 'option 2', value: '2' },
		   * 		{ label: 'option 3', value: '3' },
		   * 	],
		   * });
		   * ```
		   * @example
		   * Creating a select menu using setters and API data:
		   * ```ts
		   * const selectMenu = new StringSelectMenuBuilder({
		   * 	custom_id: 'a cool select menu',
		   * })
		   * 	.setMinValues(1)
		   * 	.addOptions({
		   * 		label: 'Catchy',
		   * 		value: 'catch',
		   * 	});
		   * ```
		   */
		  constructor(data) {
		    const { options, ...initData } = data ?? {};
		    super({ ...initData, type: import_v106.ComponentType.StringSelect });
		    this.options = options?.map((option) => new StringSelectMenuOptionBuilder(option)) ?? [];
		  }
		  /**
		   * Adds options to this select menu.
		   *
		   * @param options - The options to add
		   */
		  addOptions(...options) {
		    const normalizedOptions = normalizeArray(options);
		    optionsLengthValidator.parse(this.options.length + normalizedOptions.length);
		    this.options.push(
		      ...normalizedOptions.map(
		        (normalizedOption) => normalizedOption instanceof StringSelectMenuOptionBuilder ? normalizedOption : new StringSelectMenuOptionBuilder(jsonOptionValidator.parse(normalizedOption))
		      )
		    );
		    return this;
		  }
		  /**
		   * Sets the options for this select menu.
		   *
		   * @param options - The options to set
		   */
		  setOptions(...options) {
		    return this.spliceOptions(0, this.options.length, ...options);
		  }
		  /**
		   * Removes, replaces, or inserts options for this select menu.
		   *
		   * @remarks
		   * This method behaves similarly
		   * to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice | Array.prototype.splice()}.
		   * It's useful for modifying and adjusting the order of existing options.
		   * @example
		   * Remove the first option:
		   * ```ts
		   * selectMenu.spliceOptions(0, 1);
		   * ```
		   * @example
		   * Remove the first n option:
		   * ```ts
		   * const n = 4;
		   * selectMenu.spliceOptions(0, n);
		   * ```
		   * @example
		   * Remove the last option:
		   * ```ts
		   * selectMenu.spliceOptions(-1, 1);
		   * ```
		   * @param index - The index to start at
		   * @param deleteCount - The number of options to remove
		   * @param options - The replacing option objects or builders
		   */
		  spliceOptions(index, deleteCount, ...options) {
		    const normalizedOptions = normalizeArray(options);
		    const clone = [...this.options];
		    clone.splice(
		      index,
		      deleteCount,
		      ...normalizedOptions.map(
		        (normalizedOption) => normalizedOption instanceof StringSelectMenuOptionBuilder ? normalizedOption : new StringSelectMenuOptionBuilder(jsonOptionValidator.parse(normalizedOption))
		      )
		    );
		    optionsLengthValidator.parse(clone.length);
		    this.options.splice(0, this.options.length, ...clone);
		    return this;
		  }
		  /**
		   * {@inheritDoc BaseSelectMenuBuilder.toJSON}
		   */
		  toJSON() {
		    validateRequiredSelectMenuParameters(this.options, this.data.custom_id);
		    return {
		      ...this.data,
		      options: this.options.map((option) => option.toJSON())
		    };
		  }
		};

		// src/components/selectMenu/UserSelectMenu.ts
		var import_v107 = requireV10$c();
		var UserSelectMenuBuilder = class extends BaseSelectMenuBuilder {
		  static {
		    __name(this, "UserSelectMenuBuilder");
		  }
		  /**
		   * Creates a new select menu from API data.
		   *
		   * @param data - The API data to create this select menu with
		   * @example
		   * Creating a select menu from an API data object:
		   * ```ts
		   * const selectMenu = new UserSelectMenuBuilder({
		   * 	custom_id: 'a cool select menu',
		   * 	placeholder: 'select an option',
		   * 	max_values: 2,
		   * });
		   * ```
		   * @example
		   * Creating a select menu using setters and API data:
		   * ```ts
		   * const selectMenu = new UserSelectMenuBuilder({
		   * 	custom_id: 'a cool select menu',
		   * })
		   * 	.setMinValues(1);
		   * ```
		   */
		  constructor(data) {
		    super({ ...data, type: import_v107.ComponentType.UserSelect });
		  }
		  /**
		   * Adds default users to this auto populated select menu.
		   *
		   * @param users - The users to add
		   */
		  addDefaultUsers(...users) {
		    const normalizedValues = normalizeArray(users);
		    optionsLengthValidator.parse((this.data.default_values?.length ?? 0) + normalizedValues.length);
		    this.data.default_values ??= [];
		    this.data.default_values.push(
		      ...normalizedValues.map((id) => ({
		        id,
		        type: import_v107.SelectMenuDefaultValueType.User
		      }))
		    );
		    return this;
		  }
		  /**
		   * Sets default users for this auto populated select menu.
		   *
		   * @param users - The users to set
		   */
		  setDefaultUsers(...users) {
		    const normalizedValues = normalizeArray(users);
		    optionsLengthValidator.parse(normalizedValues.length);
		    this.data.default_values = normalizedValues.map((id) => ({
		      id,
		      type: import_v107.SelectMenuDefaultValueType.User
		    }));
		    return this;
		  }
		};

		// src/components/textInput/TextInput.ts
		var import_util = requireDist$7();
		var import_v109 = requireV10$c();
		var import_fast_deep_equal = __toESM(requireFastDeepEqual());

		// src/components/textInput/Assertions.ts
		var Assertions_exports3 = {};
		__export(Assertions_exports3, {
		  labelValidator: () => labelValidator,
		  maxLengthValidator: () => maxLengthValidator,
		  minLengthValidator: () => minLengthValidator,
		  placeholderValidator: () => placeholderValidator2,
		  requiredValidator: () => requiredValidator,
		  textInputStyleValidator: () => textInputStyleValidator,
		  validateRequiredParameters: () => validateRequiredParameters,
		  valueValidator: () => valueValidator
		});
		var import_shapeshift3 = /*@__PURE__*/ requireCjs();
		var import_v108 = requireV10$c();
		var textInputStyleValidator = import_shapeshift3.s.nativeEnum(import_v108.TextInputStyle);
		var minLengthValidator = import_shapeshift3.s.number().int().greaterThanOrEqual(0).lessThanOrEqual(4e3).setValidationEnabled(isValidationEnabled);
		var maxLengthValidator = import_shapeshift3.s.number().int().greaterThanOrEqual(1).lessThanOrEqual(4e3).setValidationEnabled(isValidationEnabled);
		var requiredValidator = import_shapeshift3.s.boolean();
		var valueValidator = import_shapeshift3.s.string().lengthLessThanOrEqual(4e3).setValidationEnabled(isValidationEnabled);
		var placeholderValidator2 = import_shapeshift3.s.string().lengthLessThanOrEqual(100).setValidationEnabled(isValidationEnabled);
		var labelValidator = import_shapeshift3.s.string().lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(45).setValidationEnabled(isValidationEnabled);
		function validateRequiredParameters(customId, style, label) {
		  customIdValidator.parse(customId);
		  textInputStyleValidator.parse(style);
		  labelValidator.parse(label);
		}
		__name(validateRequiredParameters, "validateRequiredParameters");

		// src/components/textInput/TextInput.ts
		var TextInputBuilder = class extends ComponentBuilder {
		  static {
		    __name(this, "TextInputBuilder");
		  }
		  /**
		   * Creates a new text input from API data.
		   *
		   * @param data - The API data to create this text input with
		   * @example
		   * Creating a text input from an API data object:
		   * ```ts
		   * const textInput = new TextInputBuilder({
		   * 	custom_id: 'a cool text input',
		   * 	label: 'Type something',
		   * 	style: TextInputStyle.Short,
		   * });
		   * ```
		   * @example
		   * Creating a text input using setters and API data:
		   * ```ts
		   * const textInput = new TextInputBuilder({
		   * 	label: 'Type something else',
		   * })
		   * 	.setCustomId('woah')
		   * 	.setStyle(TextInputStyle.Paragraph);
		   * ```
		   */
		  constructor(data) {
		    super({ type: import_v109.ComponentType.TextInput, ...data });
		  }
		  /**
		   * Sets the custom id for this text input.
		   *
		   * @param customId - The custom id to use
		   */
		  setCustomId(customId) {
		    this.data.custom_id = customIdValidator.parse(customId);
		    return this;
		  }
		  /**
		   * Sets the label for this text input.
		   *
		   * @param label - The label to use
		   */
		  setLabel(label) {
		    this.data.label = labelValidator.parse(label);
		    return this;
		  }
		  /**
		   * Sets the style for this text input.
		   *
		   * @param style - The style to use
		   */
		  setStyle(style) {
		    this.data.style = textInputStyleValidator.parse(style);
		    return this;
		  }
		  /**
		   * Sets the minimum length of text for this text input.
		   *
		   * @param minLength - The minimum length of text for this text input
		   */
		  setMinLength(minLength) {
		    this.data.min_length = minLengthValidator.parse(minLength);
		    return this;
		  }
		  /**
		   * Sets the maximum length of text for this text input.
		   *
		   * @param maxLength - The maximum length of text for this text input
		   */
		  setMaxLength(maxLength) {
		    this.data.max_length = maxLengthValidator.parse(maxLength);
		    return this;
		  }
		  /**
		   * Sets the placeholder for this text input.
		   *
		   * @param placeholder - The placeholder to use
		   */
		  setPlaceholder(placeholder) {
		    this.data.placeholder = placeholderValidator2.parse(placeholder);
		    return this;
		  }
		  /**
		   * Sets the value for this text input.
		   *
		   * @param value - The value to use
		   */
		  setValue(value) {
		    this.data.value = valueValidator.parse(value);
		    return this;
		  }
		  /**
		   * Sets whether this text input is required.
		   *
		   * @param required - Whether this text input is required
		   */
		  setRequired(required = true) {
		    this.data.required = requiredValidator.parse(required);
		    return this;
		  }
		  /**
		   * {@inheritDoc ComponentBuilder.toJSON}
		   */
		  toJSON() {
		    validateRequiredParameters(this.data.custom_id, this.data.style, this.data.label);
		    return {
		      ...this.data
		    };
		  }
		  /**
		   * Whether this is equal to another structure.
		   */
		  equals(other) {
		    if ((0, import_util.isJSONEncodable)(other)) {
		      return (0, import_fast_deep_equal.default)(other.toJSON(), this.data);
		    }
		    return (0, import_fast_deep_equal.default)(other, this.data);
		  }
		};

		// src/components/Components.ts
		function createComponentBuilder(data) {
		  if (data instanceof ComponentBuilder) {
		    return data;
		  }
		  switch (data.type) {
		    case import_v1010.ComponentType.ActionRow:
		      return new ActionRowBuilder(data);
		    case import_v1010.ComponentType.Button:
		      return new ButtonBuilder(data);
		    case import_v1010.ComponentType.StringSelect:
		      return new StringSelectMenuBuilder(data);
		    case import_v1010.ComponentType.TextInput:
		      return new TextInputBuilder(data);
		    case import_v1010.ComponentType.UserSelect:
		      return new UserSelectMenuBuilder(data);
		    case import_v1010.ComponentType.RoleSelect:
		      return new RoleSelectMenuBuilder(data);
		    case import_v1010.ComponentType.MentionableSelect:
		      return new MentionableSelectMenuBuilder(data);
		    case import_v1010.ComponentType.ChannelSelect:
		      return new ChannelSelectMenuBuilder(data);
		    default:
		      throw new Error(`Cannot properly serialize component type: ${data.type}`);
		  }
		}
		__name(createComponentBuilder, "createComponentBuilder");

		// src/components/ActionRow.ts
		var ActionRowBuilder = class extends ComponentBuilder {
		  static {
		    __name(this, "ActionRowBuilder");
		  }
		  /**
		   * The components within this action row.
		   */
		  components;
		  /**
		   * Creates a new action row from API data.
		   *
		   * @param data - The API data to create this action row with
		   * @example
		   * Creating an action row from an API data object:
		   * ```ts
		   * const actionRow = new ActionRowBuilder({
		   * 	components: [
		   * 		{
		   * 			custom_id: "custom id",
		   * 			label: "Type something",
		   * 			style: TextInputStyle.Short,
		   * 			type: ComponentType.TextInput,
		   * 		},
		   * 	],
		   * });
		   * ```
		   * @example
		   * Creating an action row using setters and API data:
		   * ```ts
		   * const actionRow = new ActionRowBuilder({
		   * 	components: [
		   * 		{
		   * 			custom_id: "custom id",
		   * 			label: "Click me",
		   * 			style: ButtonStyle.Primary,
		   * 			type: ComponentType.Button,
		   * 		},
		   * 	],
		   * })
		   * 	.addComponents(button2, button3);
		   * ```
		   */
		  constructor({ components, ...data } = {}) {
		    super({ type: import_v1011.ComponentType.ActionRow, ...data });
		    this.components = components?.map((component) => createComponentBuilder(component)) ?? [];
		  }
		  /**
		   * Adds components to this action row.
		   *
		   * @param components - The components to add
		   */
		  addComponents(...components) {
		    this.components.push(...normalizeArray(components));
		    return this;
		  }
		  /**
		   * Sets components for this action row.
		   *
		   * @param components - The components to set
		   */
		  setComponents(...components) {
		    this.components.splice(0, this.components.length, ...normalizeArray(components));
		    return this;
		  }
		  /**
		   * {@inheritDoc ComponentBuilder.toJSON}
		   */
		  toJSON() {
		    return {
		      ...this.data,
		      components: this.components.map((component) => component.toJSON())
		    };
		  }
		};

		// src/interactions/modals/Assertions.ts
		var Assertions_exports4 = {};
		__export(Assertions_exports4, {
		  componentsValidator: () => componentsValidator,
		  titleValidator: () => titleValidator,
		  validateRequiredParameters: () => validateRequiredParameters2
		});
		var import_shapeshift4 = /*@__PURE__*/ requireCjs();
		var titleValidator = import_shapeshift4.s.string().lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(45).setValidationEnabled(isValidationEnabled);
		var componentsValidator = import_shapeshift4.s.instance(ActionRowBuilder).array().lengthGreaterThanOrEqual(1).setValidationEnabled(isValidationEnabled);
		function validateRequiredParameters2(customId, title, components) {
		  customIdValidator.parse(customId);
		  titleValidator.parse(title);
		  componentsValidator.parse(components);
		}
		__name(validateRequiredParameters2, "validateRequiredParameters");

		// src/interactions/modals/Modal.ts
		var ModalBuilder = class {
		  static {
		    __name(this, "ModalBuilder");
		  }
		  /**
		   * The API data associated with this modal.
		   */
		  data;
		  /**
		   * The components within this modal.
		   */
		  components = [];
		  /**
		   * Creates a new modal from API data.
		   *
		   * @param data - The API data to create this modal with
		   */
		  constructor({ components, ...data } = {}) {
		    this.data = { ...data };
		    this.components = components?.map((component) => createComponentBuilder(component)) ?? [];
		  }
		  /**
		   * Sets the title of this modal.
		   *
		   * @param title - The title to use
		   */
		  setTitle(title) {
		    this.data.title = titleValidator.parse(title);
		    return this;
		  }
		  /**
		   * Sets the custom id of this modal.
		   *
		   * @param customId - The custom id to use
		   */
		  setCustomId(customId) {
		    this.data.custom_id = customIdValidator.parse(customId);
		    return this;
		  }
		  /**
		   * Adds components to this modal.
		   *
		   * @param components - The components to add
		   */
		  addComponents(...components) {
		    this.components.push(
		      ...normalizeArray(components).map(
		        (component) => component instanceof ActionRowBuilder ? component : new ActionRowBuilder(component)
		      )
		    );
		    return this;
		  }
		  /**
		   * Sets components for this modal.
		   *
		   * @param components - The components to set
		   */
		  setComponents(...components) {
		    this.components.splice(0, this.components.length, ...normalizeArray(components));
		    return this;
		  }
		  /**
		   * {@inheritDoc ComponentBuilder.toJSON}
		   */
		  toJSON() {
		    validateRequiredParameters2(this.data.custom_id, this.data.title, this.components);
		    return {
		      ...this.data,
		      components: this.components.map((component) => component.toJSON())
		    };
		  }
		};

		// src/interactions/slashCommands/Assertions.ts
		var Assertions_exports5 = {};
		__export(Assertions_exports5, {
		  assertReturnOfBuilder: () => assertReturnOfBuilder,
		  contextsPredicate: () => contextsPredicate,
		  integrationTypesPredicate: () => integrationTypesPredicate,
		  localizationMapPredicate: () => localizationMapPredicate,
		  validateChoicesLength: () => validateChoicesLength,
		  validateDMPermission: () => validateDMPermission,
		  validateDefaultMemberPermissions: () => validateDefaultMemberPermissions,
		  validateDefaultPermission: () => validateDefaultPermission,
		  validateDescription: () => validateDescription,
		  validateLocale: () => validateLocale,
		  validateLocalizationMap: () => validateLocalizationMap,
		  validateMaxOptionsLength: () => validateMaxOptionsLength,
		  validateNSFW: () => validateNSFW,
		  validateName: () => validateName,
		  validateRequired: () => validateRequired,
		  validateRequiredParameters: () => validateRequiredParameters3
		});
		var import_shapeshift5 = /*@__PURE__*/ requireCjs();
		var import_v1012 = requireV10$c();
		var namePredicate = import_shapeshift5.s.string().lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(32).regex(/^[\p{Ll}\p{Lm}\p{Lo}\p{N}\p{sc=Devanagari}\p{sc=Thai}_-]+$/u).setValidationEnabled(isValidationEnabled);
		function validateName(name) {
		  namePredicate.parse(name);
		}
		__name(validateName, "validateName");
		var descriptionPredicate2 = import_shapeshift5.s.string().lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(100).setValidationEnabled(isValidationEnabled);
		var localePredicate = import_shapeshift5.s.nativeEnum(import_v1012.Locale);
		function validateDescription(description) {
		  descriptionPredicate2.parse(description);
		}
		__name(validateDescription, "validateDescription");
		var maxArrayLengthPredicate = import_shapeshift5.s.unknown().array().lengthLessThanOrEqual(25).setValidationEnabled(isValidationEnabled);
		function validateLocale(locale) {
		  return localePredicate.parse(locale);
		}
		__name(validateLocale, "validateLocale");
		function validateMaxOptionsLength(options) {
		  maxArrayLengthPredicate.parse(options);
		}
		__name(validateMaxOptionsLength, "validateMaxOptionsLength");
		function validateRequiredParameters3(name, description, options) {
		  validateName(name);
		  validateDescription(description);
		  validateMaxOptionsLength(options);
		}
		__name(validateRequiredParameters3, "validateRequiredParameters");
		var booleanPredicate = import_shapeshift5.s.boolean();
		function validateDefaultPermission(value) {
		  booleanPredicate.parse(value);
		}
		__name(validateDefaultPermission, "validateDefaultPermission");
		function validateRequired(required) {
		  booleanPredicate.parse(required);
		}
		__name(validateRequired, "validateRequired");
		var choicesLengthPredicate = import_shapeshift5.s.number().lessThanOrEqual(25).setValidationEnabled(isValidationEnabled);
		function validateChoicesLength(amountAdding, choices) {
		  choicesLengthPredicate.parse((choices?.length ?? 0) + amountAdding);
		}
		__name(validateChoicesLength, "validateChoicesLength");
		function assertReturnOfBuilder(input, ExpectedInstanceOf) {
		  import_shapeshift5.s.instance(ExpectedInstanceOf).parse(input);
		}
		__name(assertReturnOfBuilder, "assertReturnOfBuilder");
		var localizationMapPredicate = import_shapeshift5.s.object(Object.fromEntries(Object.values(import_v1012.Locale).map((locale) => [locale, import_shapeshift5.s.string().nullish()]))).strict().nullish().setValidationEnabled(isValidationEnabled);
		function validateLocalizationMap(value) {
		  localizationMapPredicate.parse(value);
		}
		__name(validateLocalizationMap, "validateLocalizationMap");
		var dmPermissionPredicate = import_shapeshift5.s.boolean().nullish();
		function validateDMPermission(value) {
		  dmPermissionPredicate.parse(value);
		}
		__name(validateDMPermission, "validateDMPermission");
		var memberPermissionPredicate = import_shapeshift5.s.union([
		  import_shapeshift5.s.bigint().transform((value) => value.toString()),
		  import_shapeshift5.s.number().safeInt().transform((value) => value.toString()),
		  import_shapeshift5.s.string().regex(/^\d+$/)
		]).nullish();
		function validateDefaultMemberPermissions(permissions) {
		  return memberPermissionPredicate.parse(permissions);
		}
		__name(validateDefaultMemberPermissions, "validateDefaultMemberPermissions");
		function validateNSFW(value) {
		  booleanPredicate.parse(value);
		}
		__name(validateNSFW, "validateNSFW");
		var contextsPredicate = import_shapeshift5.s.array(
		  import_shapeshift5.s.nativeEnum(import_v1012.InteractionContextType).setValidationEnabled(isValidationEnabled)
		);
		var integrationTypesPredicate = import_shapeshift5.s.array(
		  import_shapeshift5.s.nativeEnum(import_v1012.ApplicationIntegrationType).setValidationEnabled(isValidationEnabled)
		);

		// src/interactions/slashCommands/SlashCommandBuilder.ts
		var import_ts_mixer6 = require$$5$1;

		// src/interactions/slashCommands/mixins/NameAndDescription.ts
		var SharedNameAndDescription = class {
		  static {
		    __name(this, "SharedNameAndDescription");
		  }
		  /**
		   * The name of this command.
		   */
		  name;
		  /**
		   * The name localizations of this command.
		   */
		  name_localizations;
		  /**
		   * The description of this command.
		   */
		  description;
		  /**
		   * The description localizations of this command.
		   */
		  description_localizations;
		  /**
		   * Sets the name of this command.
		   *
		   * @param name - The name to use
		   */
		  setName(name) {
		    validateName(name);
		    Reflect.set(this, "name", name);
		    return this;
		  }
		  /**
		   * Sets the description of this command.
		   *
		   * @param description - The description to use
		   */
		  setDescription(description) {
		    validateDescription(description);
		    Reflect.set(this, "description", description);
		    return this;
		  }
		  /**
		   * Sets a name localization for this command.
		   *
		   * @param locale - The locale to set
		   * @param localizedName - The localized name for the given `locale`
		   */
		  setNameLocalization(locale, localizedName) {
		    if (!this.name_localizations) {
		      Reflect.set(this, "name_localizations", {});
		    }
		    const parsedLocale = validateLocale(locale);
		    if (localizedName === null) {
		      this.name_localizations[parsedLocale] = null;
		      return this;
		    }
		    validateName(localizedName);
		    this.name_localizations[parsedLocale] = localizedName;
		    return this;
		  }
		  /**
		   * Sets the name localizations for this command.
		   *
		   * @param localizedNames - The object of localized names to set
		   */
		  setNameLocalizations(localizedNames) {
		    if (localizedNames === null) {
		      Reflect.set(this, "name_localizations", null);
		      return this;
		    }
		    Reflect.set(this, "name_localizations", {});
		    for (const args of Object.entries(localizedNames)) {
		      this.setNameLocalization(...args);
		    }
		    return this;
		  }
		  /**
		   * Sets a description localization for this command.
		   *
		   * @param locale - The locale to set
		   * @param localizedDescription - The localized description for the given locale
		   */
		  setDescriptionLocalization(locale, localizedDescription) {
		    if (!this.description_localizations) {
		      Reflect.set(this, "description_localizations", {});
		    }
		    const parsedLocale = validateLocale(locale);
		    if (localizedDescription === null) {
		      this.description_localizations[parsedLocale] = null;
		      return this;
		    }
		    validateDescription(localizedDescription);
		    this.description_localizations[parsedLocale] = localizedDescription;
		    return this;
		  }
		  /**
		   * Sets the description localizations for this command.
		   *
		   * @param localizedDescriptions - The object of localized descriptions to set
		   */
		  setDescriptionLocalizations(localizedDescriptions) {
		    if (localizedDescriptions === null) {
		      Reflect.set(this, "description_localizations", null);
		      return this;
		    }
		    Reflect.set(this, "description_localizations", {});
		    for (const args of Object.entries(localizedDescriptions)) {
		      this.setDescriptionLocalization(...args);
		    }
		    return this;
		  }
		};

		// src/interactions/slashCommands/mixins/SharedSlashCommand.ts
		var import_v1013 = requireV10$c();
		var SharedSlashCommand = class {
		  static {
		    __name(this, "SharedSlashCommand");
		  }
		  name = void 0;
		  name_localizations;
		  description = void 0;
		  description_localizations;
		  options = [];
		  contexts;
		  /**
		   * @deprecated Use {@link SharedSlashCommand.setDefaultMemberPermissions} or {@link SharedSlashCommand.setDMPermission} instead.
		   */
		  default_permission = void 0;
		  default_member_permissions = void 0;
		  /**
		   * @deprecated Use {@link SharedSlashCommand.contexts} instead.
		   */
		  dm_permission = void 0;
		  integration_types;
		  nsfw = void 0;
		  /**
		   * Sets the contexts of this command.
		   *
		   * @param contexts - The contexts
		   */
		  setContexts(...contexts) {
		    Reflect.set(this, "contexts", contextsPredicate.parse(normalizeArray(contexts)));
		    return this;
		  }
		  /**
		   * Sets the integration types of this command.
		   *
		   * @param integrationTypes - The integration types
		   */
		  setIntegrationTypes(...integrationTypes) {
		    Reflect.set(this, "integration_types", integrationTypesPredicate.parse(normalizeArray(integrationTypes)));
		    return this;
		  }
		  /**
		   * Sets whether the command is enabled by default when the application is added to a guild.
		   *
		   * @remarks
		   * If set to `false`, you will have to later `PUT` the permissions for this command.
		   * @param value - Whether or not to enable this command by default
		   * @see {@link https://discord.com/developers/docs/interactions/application-commands#permissions}
		   * @deprecated Use {@link SharedSlashCommand.setDefaultMemberPermissions} or {@link SharedSlashCommand.setDMPermission} instead.
		   */
		  setDefaultPermission(value) {
		    validateDefaultPermission(value);
		    Reflect.set(this, "default_permission", value);
		    return this;
		  }
		  /**
		   * Sets the default permissions a member should have in order to run the command.
		   *
		   * @remarks
		   * You can set this to `'0'` to disable the command by default.
		   * @param permissions - The permissions bit field to set
		   * @see {@link https://discord.com/developers/docs/interactions/application-commands#permissions}
		   */
		  setDefaultMemberPermissions(permissions) {
		    const permissionValue = validateDefaultMemberPermissions(permissions);
		    Reflect.set(this, "default_member_permissions", permissionValue);
		    return this;
		  }
		  /**
		   * Sets if the command is available in direct messages with the application.
		   *
		   * @remarks
		   * By default, commands are visible. This method is only for global commands.
		   * @param enabled - Whether the command should be enabled in direct messages
		   * @see {@link https://discord.com/developers/docs/interactions/application-commands#permissions}
		   * @deprecated
		   * Use {@link SharedSlashCommand.setContexts} instead.
		   */
		  setDMPermission(enabled) {
		    validateDMPermission(enabled);
		    Reflect.set(this, "dm_permission", enabled);
		    return this;
		  }
		  /**
		   * Sets whether this command is NSFW.
		   *
		   * @param nsfw - Whether this command is NSFW
		   */
		  setNSFW(nsfw = true) {
		    validateNSFW(nsfw);
		    Reflect.set(this, "nsfw", nsfw);
		    return this;
		  }
		  /**
		   * Serializes this builder to API-compatible JSON data.
		   *
		   * @remarks
		   * This method runs validations on the data before serializing it.
		   * As such, it may throw an error if the data is invalid.
		   */
		  toJSON() {
		    validateRequiredParameters3(this.name, this.description, this.options);
		    validateLocalizationMap(this.name_localizations);
		    validateLocalizationMap(this.description_localizations);
		    return {
		      ...this,
		      type: import_v1013.ApplicationCommandType.ChatInput,
		      options: this.options.map((option) => option.toJSON())
		    };
		  }
		};

		// src/interactions/slashCommands/options/attachment.ts
		var import_v1014 = requireV10$c();

		// src/interactions/slashCommands/mixins/ApplicationCommandOptionBase.ts
		var ApplicationCommandOptionBase = class extends SharedNameAndDescription {
		  static {
		    __name(this, "ApplicationCommandOptionBase");
		  }
		  /**
		   * Whether this option is required.
		   *
		   * @defaultValue `false`
		   */
		  required = false;
		  /**
		   * Sets whether this option is required.
		   *
		   * @param required - Whether this option should be required
		   */
		  setRequired(required) {
		    validateRequired(required);
		    Reflect.set(this, "required", required);
		    return this;
		  }
		  /**
		   * This method runs required validators on this builder.
		   */
		  runRequiredValidations() {
		    validateRequiredParameters3(this.name, this.description, []);
		    validateLocalizationMap(this.name_localizations);
		    validateLocalizationMap(this.description_localizations);
		    validateRequired(this.required);
		  }
		};

		// src/interactions/slashCommands/options/attachment.ts
		var SlashCommandAttachmentOption = class extends ApplicationCommandOptionBase {
		  static {
		    __name(this, "SlashCommandAttachmentOption");
		  }
		  /**
		   * The type of this option.
		   */
		  type = import_v1014.ApplicationCommandOptionType.Attachment;
		  /**
		   * {@inheritDoc ApplicationCommandOptionBase.toJSON}
		   */
		  toJSON() {
		    this.runRequiredValidations();
		    return { ...this };
		  }
		};

		// src/interactions/slashCommands/options/boolean.ts
		var import_v1015 = requireV10$c();
		var SlashCommandBooleanOption = class extends ApplicationCommandOptionBase {
		  static {
		    __name(this, "SlashCommandBooleanOption");
		  }
		  /**
		   * The type of this option.
		   */
		  type = import_v1015.ApplicationCommandOptionType.Boolean;
		  /**
		   * {@inheritDoc ApplicationCommandOptionBase.toJSON}
		   */
		  toJSON() {
		    this.runRequiredValidations();
		    return { ...this };
		  }
		};

		// src/interactions/slashCommands/options/channel.ts
		var import_v1017 = requireV10$c();
		var import_ts_mixer = require$$5$1;

		// src/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.ts
		var import_shapeshift6 = /*@__PURE__*/ requireCjs();
		var import_v1016 = requireV10$c();
		var allowedChannelTypes = [
		  import_v1016.ChannelType.GuildText,
		  import_v1016.ChannelType.GuildVoice,
		  import_v1016.ChannelType.GuildCategory,
		  import_v1016.ChannelType.GuildAnnouncement,
		  import_v1016.ChannelType.AnnouncementThread,
		  import_v1016.ChannelType.PublicThread,
		  import_v1016.ChannelType.PrivateThread,
		  import_v1016.ChannelType.GuildStageVoice,
		  import_v1016.ChannelType.GuildForum,
		  import_v1016.ChannelType.GuildMedia
		];
		var channelTypesPredicate = import_shapeshift6.s.array(import_shapeshift6.s.union(allowedChannelTypes.map((type) => import_shapeshift6.s.literal(type))));
		var ApplicationCommandOptionChannelTypesMixin = class {
		  static {
		    __name(this, "ApplicationCommandOptionChannelTypesMixin");
		  }
		  /**
		   * The channel types of this option.
		   */
		  channel_types;
		  /**
		   * Adds channel types to this option.
		   *
		   * @param channelTypes - The channel types
		   */
		  addChannelTypes(...channelTypes) {
		    if (this.channel_types === void 0) {
		      Reflect.set(this, "channel_types", []);
		    }
		    this.channel_types.push(...channelTypesPredicate.parse(normalizeArray(channelTypes)));
		    return this;
		  }
		};

		// src/interactions/slashCommands/options/channel.ts
		var SlashCommandChannelOption = class extends ApplicationCommandOptionBase {
		  /**
		   * The type of this option.
		   */
		  type = import_v1017.ApplicationCommandOptionType.Channel;
		  /**
		   * {@inheritDoc ApplicationCommandOptionBase.toJSON}
		   */
		  toJSON() {
		    this.runRequiredValidations();
		    return { ...this };
		  }
		};
		__name(SlashCommandChannelOption, "SlashCommandChannelOption");
		SlashCommandChannelOption = __decorateClass([
		  (0, import_ts_mixer.mix)(ApplicationCommandOptionChannelTypesMixin)
		], SlashCommandChannelOption);

		// src/interactions/slashCommands/options/integer.ts
		var import_shapeshift9 = /*@__PURE__*/ requireCjs();
		var import_v1019 = requireV10$c();
		var import_ts_mixer2 = require$$5$1;

		// src/interactions/slashCommands/mixins/ApplicationCommandNumericOptionMinMaxValueMixin.ts
		var ApplicationCommandNumericOptionMinMaxValueMixin = class {
		  static {
		    __name(this, "ApplicationCommandNumericOptionMinMaxValueMixin");
		  }
		  /**
		   * The maximum value of this option.
		   */
		  max_value;
		  /**
		   * The minimum value of this option.
		   */
		  min_value;
		};

		// src/interactions/slashCommands/mixins/ApplicationCommandOptionWithAutocompleteMixin.ts
		var import_shapeshift7 = /*@__PURE__*/ requireCjs();
		var booleanPredicate2 = import_shapeshift7.s.boolean();
		var ApplicationCommandOptionWithAutocompleteMixin = class {
		  static {
		    __name(this, "ApplicationCommandOptionWithAutocompleteMixin");
		  }
		  /**
		   * Whether this option utilizes autocomplete.
		   */
		  autocomplete;
		  /**
		   * The type of this option.
		   *
		   * @privateRemarks Since this is present and this is a mixin, this is needed.
		   */
		  type;
		  /**
		   * Whether this option uses autocomplete.
		   *
		   * @param autocomplete - Whether this option should use autocomplete
		   */
		  setAutocomplete(autocomplete) {
		    booleanPredicate2.parse(autocomplete);
		    if (autocomplete && "choices" in this && Array.isArray(this.choices) && this.choices.length > 0) {
		      throw new RangeError("Autocomplete and choices are mutually exclusive to each other.");
		    }
		    Reflect.set(this, "autocomplete", autocomplete);
		    return this;
		  }
		};

		// src/interactions/slashCommands/mixins/ApplicationCommandOptionWithChoicesMixin.ts
		var import_shapeshift8 = /*@__PURE__*/ requireCjs();
		var import_v1018 = requireV10$c();
		var stringPredicate = import_shapeshift8.s.string().lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(100);
		var numberPredicate = import_shapeshift8.s.number().greaterThan(Number.NEGATIVE_INFINITY).lessThan(Number.POSITIVE_INFINITY);
		var choicesPredicate = import_shapeshift8.s.object({
		  name: stringPredicate,
		  name_localizations: localizationMapPredicate,
		  value: import_shapeshift8.s.union([stringPredicate, numberPredicate])
		}).array();
		var ApplicationCommandOptionWithChoicesMixin = class {
		  static {
		    __name(this, "ApplicationCommandOptionWithChoicesMixin");
		  }
		  /**
		   * The choices of this option.
		   */
		  choices;
		  /**
		   * The type of this option.
		   *
		   * @privateRemarks Since this is present and this is a mixin, this is needed.
		   */
		  type;
		  /**
		   * Adds multiple choices to this option.
		   *
		   * @param choices - The choices to add
		   */
		  addChoices(...choices) {
		    const normalizedChoices = normalizeArray(choices);
		    if (normalizedChoices.length > 0 && "autocomplete" in this && this.autocomplete) {
		      throw new RangeError("Autocomplete and choices are mutually exclusive to each other.");
		    }
		    choicesPredicate.parse(normalizedChoices);
		    if (this.choices === void 0) {
		      Reflect.set(this, "choices", []);
		    }
		    validateChoicesLength(normalizedChoices.length, this.choices);
		    for (const { name, name_localizations, value } of normalizedChoices) {
		      if (this.type === import_v1018.ApplicationCommandOptionType.String) {
		        stringPredicate.parse(value);
		      } else {
		        numberPredicate.parse(value);
		      }
		      this.choices.push({ name, name_localizations, value });
		    }
		    return this;
		  }
		  /**
		   * Sets multiple choices for this option.
		   *
		   * @param choices - The choices to set
		   */
		  setChoices(...choices) {
		    const normalizedChoices = normalizeArray(choices);
		    if (normalizedChoices.length > 0 && "autocomplete" in this && this.autocomplete) {
		      throw new RangeError("Autocomplete and choices are mutually exclusive to each other.");
		    }
		    choicesPredicate.parse(normalizedChoices);
		    Reflect.set(this, "choices", []);
		    this.addChoices(normalizedChoices);
		    return this;
		  }
		};

		// src/interactions/slashCommands/options/integer.ts
		var numberValidator = import_shapeshift9.s.number().int();
		var SlashCommandIntegerOption = class extends ApplicationCommandOptionBase {
		  /**
		   * The type of this option.
		   */
		  type = import_v1019.ApplicationCommandOptionType.Integer;
		  /**
		   * {@inheritDoc ApplicationCommandNumericOptionMinMaxValueMixin.setMaxValue}
		   */
		  setMaxValue(max) {
		    numberValidator.parse(max);
		    Reflect.set(this, "max_value", max);
		    return this;
		  }
		  /**
		   * {@inheritDoc ApplicationCommandNumericOptionMinMaxValueMixin.setMinValue}
		   */
		  setMinValue(min) {
		    numberValidator.parse(min);
		    Reflect.set(this, "min_value", min);
		    return this;
		  }
		  /**
		   * {@inheritDoc ApplicationCommandOptionBase.toJSON}
		   */
		  toJSON() {
		    this.runRequiredValidations();
		    if (this.autocomplete && Array.isArray(this.choices) && this.choices.length > 0) {
		      throw new RangeError("Autocomplete and choices are mutually exclusive to each other.");
		    }
		    return { ...this };
		  }
		};
		__name(SlashCommandIntegerOption, "SlashCommandIntegerOption");
		SlashCommandIntegerOption = __decorateClass([
		  (0, import_ts_mixer2.mix)(
		    ApplicationCommandNumericOptionMinMaxValueMixin,
		    ApplicationCommandOptionWithAutocompleteMixin,
		    ApplicationCommandOptionWithChoicesMixin
		  )
		], SlashCommandIntegerOption);

		// src/interactions/slashCommands/options/mentionable.ts
		var import_v1020 = requireV10$c();
		var SlashCommandMentionableOption = class extends ApplicationCommandOptionBase {
		  static {
		    __name(this, "SlashCommandMentionableOption");
		  }
		  /**
		   * The type of this option.
		   */
		  type = import_v1020.ApplicationCommandOptionType.Mentionable;
		  /**
		   * {@inheritDoc ApplicationCommandOptionBase.toJSON}
		   */
		  toJSON() {
		    this.runRequiredValidations();
		    return { ...this };
		  }
		};

		// src/interactions/slashCommands/options/number.ts
		var import_shapeshift10 = /*@__PURE__*/ requireCjs();
		var import_v1021 = requireV10$c();
		var import_ts_mixer3 = require$$5$1;
		var numberValidator2 = import_shapeshift10.s.number();
		var SlashCommandNumberOption = class extends ApplicationCommandOptionBase {
		  /**
		   * The type of this option.
		   */
		  type = import_v1021.ApplicationCommandOptionType.Number;
		  /**
		   * {@inheritDoc ApplicationCommandNumericOptionMinMaxValueMixin.setMaxValue}
		   */
		  setMaxValue(max) {
		    numberValidator2.parse(max);
		    Reflect.set(this, "max_value", max);
		    return this;
		  }
		  /**
		   * {@inheritDoc ApplicationCommandNumericOptionMinMaxValueMixin.setMinValue}
		   */
		  setMinValue(min) {
		    numberValidator2.parse(min);
		    Reflect.set(this, "min_value", min);
		    return this;
		  }
		  /**
		   * {@inheritDoc ApplicationCommandOptionBase.toJSON}
		   */
		  toJSON() {
		    this.runRequiredValidations();
		    if (this.autocomplete && Array.isArray(this.choices) && this.choices.length > 0) {
		      throw new RangeError("Autocomplete and choices are mutually exclusive to each other.");
		    }
		    return { ...this };
		  }
		};
		__name(SlashCommandNumberOption, "SlashCommandNumberOption");
		SlashCommandNumberOption = __decorateClass([
		  (0, import_ts_mixer3.mix)(
		    ApplicationCommandNumericOptionMinMaxValueMixin,
		    ApplicationCommandOptionWithAutocompleteMixin,
		    ApplicationCommandOptionWithChoicesMixin
		  )
		], SlashCommandNumberOption);

		// src/interactions/slashCommands/options/role.ts
		var import_v1022 = requireV10$c();
		var SlashCommandRoleOption = class extends ApplicationCommandOptionBase {
		  static {
		    __name(this, "SlashCommandRoleOption");
		  }
		  /**
		   * The type of this option.
		   */
		  type = import_v1022.ApplicationCommandOptionType.Role;
		  /**
		   * {@inheritDoc ApplicationCommandOptionBase.toJSON}
		   */
		  toJSON() {
		    this.runRequiredValidations();
		    return { ...this };
		  }
		};

		// src/interactions/slashCommands/options/string.ts
		var import_shapeshift11 = /*@__PURE__*/ requireCjs();
		var import_v1023 = requireV10$c();
		var import_ts_mixer4 = require$$5$1;
		var minLengthValidator2 = import_shapeshift11.s.number().greaterThanOrEqual(0).lessThanOrEqual(6e3);
		var maxLengthValidator2 = import_shapeshift11.s.number().greaterThanOrEqual(1).lessThanOrEqual(6e3);
		var SlashCommandStringOption = class extends ApplicationCommandOptionBase {
		  /**
		   * The type of this option.
		   */
		  type = import_v1023.ApplicationCommandOptionType.String;
		  /**
		   * The maximum length of this option.
		   */
		  max_length;
		  /**
		   * The minimum length of this option.
		   */
		  min_length;
		  /**
		   * Sets the maximum length of this string option.
		   *
		   * @param max - The maximum length this option can be
		   */
		  setMaxLength(max) {
		    maxLengthValidator2.parse(max);
		    Reflect.set(this, "max_length", max);
		    return this;
		  }
		  /**
		   * Sets the minimum length of this string option.
		   *
		   * @param min - The minimum length this option can be
		   */
		  setMinLength(min) {
		    minLengthValidator2.parse(min);
		    Reflect.set(this, "min_length", min);
		    return this;
		  }
		  /**
		   * {@inheritDoc ApplicationCommandOptionBase.toJSON}
		   */
		  toJSON() {
		    this.runRequiredValidations();
		    if (this.autocomplete && Array.isArray(this.choices) && this.choices.length > 0) {
		      throw new RangeError("Autocomplete and choices are mutually exclusive to each other.");
		    }
		    return { ...this };
		  }
		};
		__name(SlashCommandStringOption, "SlashCommandStringOption");
		SlashCommandStringOption = __decorateClass([
		  (0, import_ts_mixer4.mix)(ApplicationCommandOptionWithAutocompleteMixin, ApplicationCommandOptionWithChoicesMixin)
		], SlashCommandStringOption);

		// src/interactions/slashCommands/options/user.ts
		var import_v1024 = requireV10$c();
		var SlashCommandUserOption = class extends ApplicationCommandOptionBase {
		  static {
		    __name(this, "SlashCommandUserOption");
		  }
		  /**
		   * The type of this option.
		   */
		  type = import_v1024.ApplicationCommandOptionType.User;
		  /**
		   * {@inheritDoc ApplicationCommandOptionBase.toJSON}
		   */
		  toJSON() {
		    this.runRequiredValidations();
		    return { ...this };
		  }
		};

		// src/interactions/slashCommands/mixins/SharedSlashCommandOptions.ts
		var SharedSlashCommandOptions = class {
		  static {
		    __name(this, "SharedSlashCommandOptions");
		  }
		  options;
		  /**
		   * Adds a boolean option.
		   *
		   * @param input - A function that returns an option builder or an already built builder
		   */
		  addBooleanOption(input) {
		    return this._sharedAddOptionMethod(input, SlashCommandBooleanOption);
		  }
		  /**
		   * Adds a user option.
		   *
		   * @param input - A function that returns an option builder or an already built builder
		   */
		  addUserOption(input) {
		    return this._sharedAddOptionMethod(input, SlashCommandUserOption);
		  }
		  /**
		   * Adds a channel option.
		   *
		   * @param input - A function that returns an option builder or an already built builder
		   */
		  addChannelOption(input) {
		    return this._sharedAddOptionMethod(input, SlashCommandChannelOption);
		  }
		  /**
		   * Adds a role option.
		   *
		   * @param input - A function that returns an option builder or an already built builder
		   */
		  addRoleOption(input) {
		    return this._sharedAddOptionMethod(input, SlashCommandRoleOption);
		  }
		  /**
		   * Adds an attachment option.
		   *
		   * @param input - A function that returns an option builder or an already built builder
		   */
		  addAttachmentOption(input) {
		    return this._sharedAddOptionMethod(input, SlashCommandAttachmentOption);
		  }
		  /**
		   * Adds a mentionable option.
		   *
		   * @param input - A function that returns an option builder or an already built builder
		   */
		  addMentionableOption(input) {
		    return this._sharedAddOptionMethod(input, SlashCommandMentionableOption);
		  }
		  /**
		   * Adds a string option.
		   *
		   * @param input - A function that returns an option builder or an already built builder
		   */
		  addStringOption(input) {
		    return this._sharedAddOptionMethod(input, SlashCommandStringOption);
		  }
		  /**
		   * Adds an integer option.
		   *
		   * @param input - A function that returns an option builder or an already built builder
		   */
		  addIntegerOption(input) {
		    return this._sharedAddOptionMethod(input, SlashCommandIntegerOption);
		  }
		  /**
		   * Adds a number option.
		   *
		   * @param input - A function that returns an option builder or an already built builder
		   */
		  addNumberOption(input) {
		    return this._sharedAddOptionMethod(input, SlashCommandNumberOption);
		  }
		  /**
		   * Where the actual adding magic happens. ✨
		   *
		   * @param input - The input. What else?
		   * @param Instance - The instance of whatever is being added
		   * @internal
		   */
		  _sharedAddOptionMethod(input, Instance) {
		    const { options } = this;
		    validateMaxOptionsLength(options);
		    const result = typeof input === "function" ? input(new Instance()) : input;
		    assertReturnOfBuilder(result, Instance);
		    options.push(result);
		    return this;
		  }
		};

		// src/interactions/slashCommands/SlashCommandSubcommands.ts
		var import_v1025 = requireV10$c();
		var import_ts_mixer5 = require$$5$1;
		var SlashCommandSubcommandGroupBuilder = class {
		  /**
		   * The name of this subcommand group.
		   */
		  name = void 0;
		  /**
		   * The description of this subcommand group.
		   */
		  description = void 0;
		  /**
		   * The subcommands within this subcommand group.
		   */
		  options = [];
		  /**
		   * Adds a new subcommand to this group.
		   *
		   * @param input - A function that returns a subcommand builder or an already built builder
		   */
		  addSubcommand(input) {
		    const { options } = this;
		    validateMaxOptionsLength(options);
		    const result = typeof input === "function" ? input(new SlashCommandSubcommandBuilder()) : input;
		    assertReturnOfBuilder(result, SlashCommandSubcommandBuilder);
		    options.push(result);
		    return this;
		  }
		  /**
		   * Serializes this builder to API-compatible JSON data.
		   *
		   * @remarks
		   * This method runs validations on the data before serializing it.
		   * As such, it may throw an error if the data is invalid.
		   */
		  toJSON() {
		    validateRequiredParameters3(this.name, this.description, this.options);
		    return {
		      type: import_v1025.ApplicationCommandOptionType.SubcommandGroup,
		      name: this.name,
		      name_localizations: this.name_localizations,
		      description: this.description,
		      description_localizations: this.description_localizations,
		      options: this.options.map((option) => option.toJSON())
		    };
		  }
		};
		__name(SlashCommandSubcommandGroupBuilder, "SlashCommandSubcommandGroupBuilder");
		SlashCommandSubcommandGroupBuilder = __decorateClass([
		  (0, import_ts_mixer5.mix)(SharedNameAndDescription)
		], SlashCommandSubcommandGroupBuilder);
		var SlashCommandSubcommandBuilder = class {
		  /**
		   * The name of this subcommand.
		   */
		  name = void 0;
		  /**
		   * The description of this subcommand.
		   */
		  description = void 0;
		  /**
		   * The options within this subcommand.
		   */
		  options = [];
		  /**
		   * Serializes this builder to API-compatible JSON data.
		   *
		   * @remarks
		   * This method runs validations on the data before serializing it.
		   * As such, it may throw an error if the data is invalid.
		   */
		  toJSON() {
		    validateRequiredParameters3(this.name, this.description, this.options);
		    return {
		      type: import_v1025.ApplicationCommandOptionType.Subcommand,
		      name: this.name,
		      name_localizations: this.name_localizations,
		      description: this.description,
		      description_localizations: this.description_localizations,
		      options: this.options.map((option) => option.toJSON())
		    };
		  }
		};
		__name(SlashCommandSubcommandBuilder, "SlashCommandSubcommandBuilder");
		SlashCommandSubcommandBuilder = __decorateClass([
		  (0, import_ts_mixer5.mix)(SharedNameAndDescription, SharedSlashCommandOptions)
		], SlashCommandSubcommandBuilder);

		// src/interactions/slashCommands/mixins/SharedSubcommands.ts
		var SharedSlashCommandSubcommands = class {
		  static {
		    __name(this, "SharedSlashCommandSubcommands");
		  }
		  options = [];
		  /**
		   * Adds a new subcommand group to this command.
		   *
		   * @param input - A function that returns a subcommand group builder or an already built builder
		   */
		  addSubcommandGroup(input) {
		    const { options } = this;
		    validateMaxOptionsLength(options);
		    const result = typeof input === "function" ? input(new SlashCommandSubcommandGroupBuilder()) : input;
		    assertReturnOfBuilder(result, SlashCommandSubcommandGroupBuilder);
		    options.push(result);
		    return this;
		  }
		  /**
		   * Adds a new subcommand to this command.
		   *
		   * @param input - A function that returns a subcommand builder or an already built builder
		   */
		  addSubcommand(input) {
		    const { options } = this;
		    validateMaxOptionsLength(options);
		    const result = typeof input === "function" ? input(new SlashCommandSubcommandBuilder()) : input;
		    assertReturnOfBuilder(result, SlashCommandSubcommandBuilder);
		    options.push(result);
		    return this;
		  }
		};

		// src/interactions/slashCommands/SlashCommandBuilder.ts
		var SlashCommandBuilder = class {
		  /**
		   * The name of this command.
		   */
		  name = void 0;
		  /**
		   * The name localizations of this command.
		   */
		  name_localizations;
		  /**
		   * The description of this command.
		   */
		  description = void 0;
		  /**
		   * The description localizations of this command.
		   */
		  description_localizations;
		  /**
		   * The options of this command.
		   */
		  options = [];
		  /**
		   * The contexts for this command.
		   */
		  contexts;
		  /**
		   * Whether this command is enabled by default when the application is added to a guild.
		   *
		   * @deprecated Use {@link SharedSlashCommand.setDefaultMemberPermissions} or {@link SharedSlashCommand.setDMPermission} instead.
		   */
		  default_permission = void 0;
		  /**
		   * The set of permissions represented as a bit set for the command.
		   */
		  default_member_permissions = void 0;
		  /**
		   * Indicates whether the command is available in direct messages with the application.
		   *
		   * @remarks
		   * By default, commands are visible. This property is only for global commands.
		   * @deprecated
		   * Use {@link SlashCommandBuilder.contexts} instead.
		   */
		  dm_permission = void 0;
		  /**
		   * The integration types for this command.
		   */
		  integration_types;
		  /**
		   * Whether this command is NSFW.
		   */
		  nsfw = void 0;
		};
		__name(SlashCommandBuilder, "SlashCommandBuilder");
		SlashCommandBuilder = __decorateClass([
		  (0, import_ts_mixer6.mix)(SharedSlashCommandOptions, SharedNameAndDescription, SharedSlashCommandSubcommands, SharedSlashCommand)
		], SlashCommandBuilder);

		// src/interactions/contextMenuCommands/Assertions.ts
		var Assertions_exports6 = {};
		__export(Assertions_exports6, {
		  contextsPredicate: () => contextsPredicate2,
		  integrationTypesPredicate: () => integrationTypesPredicate2,
		  validateDMPermission: () => validateDMPermission2,
		  validateDefaultMemberPermissions: () => validateDefaultMemberPermissions2,
		  validateDefaultPermission: () => validateDefaultPermission2,
		  validateName: () => validateName2,
		  validateRequiredParameters: () => validateRequiredParameters4,
		  validateType: () => validateType
		});
		var import_shapeshift12 = /*@__PURE__*/ requireCjs();
		var import_v1026 = requireV10$c();
		var namePredicate2 = import_shapeshift12.s.string().lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(32).regex(/^( *[\p{P}\p{L}\p{N}\p{sc=Devanagari}\p{sc=Thai}]+ *)+$/u).setValidationEnabled(isValidationEnabled);
		var typePredicate = import_shapeshift12.s.union([import_shapeshift12.s.literal(import_v1026.ApplicationCommandType.User), import_shapeshift12.s.literal(import_v1026.ApplicationCommandType.Message)]).setValidationEnabled(isValidationEnabled);
		var booleanPredicate3 = import_shapeshift12.s.boolean();
		function validateDefaultPermission2(value) {
		  booleanPredicate3.parse(value);
		}
		__name(validateDefaultPermission2, "validateDefaultPermission");
		function validateName2(name) {
		  namePredicate2.parse(name);
		}
		__name(validateName2, "validateName");
		function validateType(type) {
		  typePredicate.parse(type);
		}
		__name(validateType, "validateType");
		function validateRequiredParameters4(name, type) {
		  validateName2(name);
		  validateType(type);
		}
		__name(validateRequiredParameters4, "validateRequiredParameters");
		var dmPermissionPredicate2 = import_shapeshift12.s.boolean().nullish();
		function validateDMPermission2(value) {
		  dmPermissionPredicate2.parse(value);
		}
		__name(validateDMPermission2, "validateDMPermission");
		var memberPermissionPredicate2 = import_shapeshift12.s.union([
		  import_shapeshift12.s.bigint().transform((value) => value.toString()),
		  import_shapeshift12.s.number().safeInt().transform((value) => value.toString()),
		  import_shapeshift12.s.string().regex(/^\d+$/)
		]).nullish();
		function validateDefaultMemberPermissions2(permissions) {
		  return memberPermissionPredicate2.parse(permissions);
		}
		__name(validateDefaultMemberPermissions2, "validateDefaultMemberPermissions");
		var contextsPredicate2 = import_shapeshift12.s.array(
		  import_shapeshift12.s.nativeEnum(import_v1026.InteractionContextType).setValidationEnabled(isValidationEnabled)
		);
		var integrationTypesPredicate2 = import_shapeshift12.s.array(
		  import_shapeshift12.s.nativeEnum(import_v1026.ApplicationIntegrationType).setValidationEnabled(isValidationEnabled)
		);

		// src/interactions/contextMenuCommands/ContextMenuCommandBuilder.ts
		var ContextMenuCommandBuilder = class {
		  static {
		    __name(this, "ContextMenuCommandBuilder");
		  }
		  /**
		   * The name of this command.
		   */
		  name = void 0;
		  /**
		   * The name localizations of this command.
		   */
		  name_localizations;
		  /**
		   * The type of this command.
		   */
		  type = void 0;
		  /**
		   * The contexts for this command.
		   */
		  contexts;
		  /**
		   * Whether this command is enabled by default when the application is added to a guild.
		   *
		   * @deprecated Use {@link ContextMenuCommandBuilder.setDefaultMemberPermissions} or {@link ContextMenuCommandBuilder.setDMPermission} instead.
		   */
		  default_permission = void 0;
		  /**
		   * The set of permissions represented as a bit set for the command.
		   */
		  default_member_permissions = void 0;
		  /**
		   * Indicates whether the command is available in direct messages with the application.
		   *
		   * @remarks
		   * By default, commands are visible. This property is only for global commands.
		   * @deprecated
		   * Use {@link ContextMenuCommandBuilder.contexts} instead.
		   */
		  dm_permission = void 0;
		  /**
		   * The integration types for this command.
		   */
		  integration_types;
		  /**
		   * Sets the contexts of this command.
		   *
		   * @param contexts - The contexts
		   */
		  setContexts(...contexts) {
		    Reflect.set(this, "contexts", contextsPredicate2.parse(normalizeArray(contexts)));
		    return this;
		  }
		  /**
		   * Sets integration types of this command.
		   *
		   * @param integrationTypes - The integration types
		   */
		  setIntegrationTypes(...integrationTypes) {
		    Reflect.set(this, "integration_types", integrationTypesPredicate2.parse(normalizeArray(integrationTypes)));
		    return this;
		  }
		  /**
		   * Sets the name of this command.
		   *
		   * @param name - The name to use
		   */
		  setName(name) {
		    validateName2(name);
		    Reflect.set(this, "name", name);
		    return this;
		  }
		  /**
		   * Sets the type of this command.
		   *
		   * @param type - The type to use
		   */
		  setType(type) {
		    validateType(type);
		    Reflect.set(this, "type", type);
		    return this;
		  }
		  /**
		   * Sets whether the command is enabled by default when the application is added to a guild.
		   *
		   * @remarks
		   * If set to `false`, you will have to later `PUT` the permissions for this command.
		   * @param value - Whether to enable this command by default
		   * @see {@link https://discord.com/developers/docs/interactions/application-commands#permissions}
		   * @deprecated Use {@link ContextMenuCommandBuilder.setDefaultMemberPermissions} or {@link ContextMenuCommandBuilder.setDMPermission} instead.
		   */
		  setDefaultPermission(value) {
		    validateDefaultPermission2(value);
		    Reflect.set(this, "default_permission", value);
		    return this;
		  }
		  /**
		   * Sets the default permissions a member should have in order to run this command.
		   *
		   * @remarks
		   * You can set this to `'0'` to disable the command by default.
		   * @param permissions - The permissions bit field to set
		   * @see {@link https://discord.com/developers/docs/interactions/application-commands#permissions}
		   */
		  setDefaultMemberPermissions(permissions) {
		    const permissionValue = validateDefaultMemberPermissions2(permissions);
		    Reflect.set(this, "default_member_permissions", permissionValue);
		    return this;
		  }
		  /**
		   * Sets if the command is available in direct messages with the application.
		   *
		   * @remarks
		   * By default, commands are visible. This method is only for global commands.
		   * @param enabled - Whether the command should be enabled in direct messages
		   * @see {@link https://discord.com/developers/docs/interactions/application-commands#permissions}
		   * @deprecated Use {@link ContextMenuCommandBuilder.setContexts} instead.
		   */
		  setDMPermission(enabled) {
		    validateDMPermission2(enabled);
		    Reflect.set(this, "dm_permission", enabled);
		    return this;
		  }
		  /**
		   * Sets a name localization for this command.
		   *
		   * @param locale - The locale to set
		   * @param localizedName - The localized name for the given `locale`
		   */
		  setNameLocalization(locale, localizedName) {
		    if (!this.name_localizations) {
		      Reflect.set(this, "name_localizations", {});
		    }
		    const parsedLocale = validateLocale(locale);
		    if (localizedName === null) {
		      this.name_localizations[parsedLocale] = null;
		      return this;
		    }
		    validateName2(localizedName);
		    this.name_localizations[parsedLocale] = localizedName;
		    return this;
		  }
		  /**
		   * Sets the name localizations for this command.
		   *
		   * @param localizedNames - The object of localized names to set
		   */
		  setNameLocalizations(localizedNames) {
		    if (localizedNames === null) {
		      Reflect.set(this, "name_localizations", null);
		      return this;
		    }
		    Reflect.set(this, "name_localizations", {});
		    for (const args of Object.entries(localizedNames))
		      this.setNameLocalization(...args);
		    return this;
		  }
		  /**
		   * Serializes this builder to API-compatible JSON data.
		   *
		   * @remarks
		   * This method runs validations on the data before serializing it.
		   * As such, it may throw an error if the data is invalid.
		   */
		  toJSON() {
		    validateRequiredParameters4(this.name, this.type);
		    validateLocalizationMap(this.name_localizations);
		    return { ...this };
		  }
		};

		// src/util/componentUtil.ts
		function embedLength(data) {
		  return (data.title?.length ?? 0) + (data.description?.length ?? 0) + (data.fields?.reduce((prev, curr) => prev + curr.name.length + curr.value.length, 0) ?? 0) + (data.footer?.text.length ?? 0) + (data.author?.name.length ?? 0);
		}
		__name(embedLength, "embedLength");

		// src/index.ts
		var version = "1.9.0";
		
	} (dist$1));
	return dist$1.exports;
}

var Component_1;
var hasRequiredComponent;

function requireComponent () {
	if (hasRequiredComponent) return Component_1;
	hasRequiredComponent = 1;

	const isEqual = requireFastDeepEqual();

	/**
	 * Represents a component
	 */
	class Component {
	  constructor(data) {
	    /**
	     * The API data associated with this component
	     * @type {APIMessageComponent}
	     */
	    this.data = data;
	  }

	  /**
	   * The type of the component
	   * @type {ComponentType}
	   * @readonly
	   */
	  get type() {
	    return this.data.type;
	  }

	  /**
	   * Whether or not the given components are equal
	   * @param {Component|APIMessageComponent} other The component to compare against
	   * @returns {boolean}
	   */
	  equals(other) {
	    if (other instanceof Component) {
	      return isEqual(other.data, this.data);
	    }
	    return isEqual(other, this.data);
	  }

	  /**
	   * Returns the API-compatible JSON for this component
	   * @returns {APIMessageComponent}
	   */
	  toJSON() {
	    return { ...this.data };
	  }
	}

	Component_1 = Component;
	return Component_1;
}

var ActionRow_1;
var hasRequiredActionRow;

function requireActionRow () {
	if (hasRequiredActionRow) return ActionRow_1;
	hasRequiredActionRow = 1;

	const { deprecate } = require$$0$a;
	const { isJSONEncodable } = requireDist$7();
	const Component = requireComponent();
	const { createComponent } = requireComponents();

	/**
	 * Represents an action row
	 * @extends {Component}
	 */
	class ActionRow extends Component {
	  constructor({ components, ...data }) {
	    super(data);

	    /**
	     * The components in this action row
	     * @type {Component[]}
	     * @readonly
	     */
	    this.components = components.map(component => createComponent(component));
	  }

	  /**
	   * Creates a new action row builder from JSON data
	   * @method from
	   * @memberof ActionRow
	   * @param {ActionRowBuilder|ActionRow|APIActionRowComponent} other The other data
	   * @returns {ActionRowBuilder}
	   * @deprecated Use {@link ActionRowBuilder.from | ActionRowBuilder#from} instead.
	   */
	  static from = deprecate(
	    other => new this(isJSONEncodable(other) ? other.toJSON() : other),
	    'ActionRow.from() is deprecated. Use ActionRowBuilder.from() instead.',
	  );

	  /**
	   * Returns the API-compatible JSON for this component
	   * @returns {APIActionRowComponent}
	   */
	  toJSON() {
	    return { ...this.data, components: this.components.map(component => component.toJSON()) };
	  }
	}

	ActionRow_1 = ActionRow;
	return ActionRow_1;
}

var ButtonBuilder_1;
var hasRequiredButtonBuilder;

function requireButtonBuilder () {
	if (hasRequiredButtonBuilder) return ButtonBuilder_1;
	hasRequiredButtonBuilder = 1;

	const { ButtonBuilder: BuildersButton } = requireDist$1();
	const { isJSONEncodable } = requireDist$7();
	const { toSnakeCase } = requireTransformers();
	const { resolvePartialEmoji } = requireUtil();

	/**
	 * Represents a button builder.
	 * @extends {BuildersButton}
	 */
	class ButtonBuilder extends BuildersButton {
	  constructor({ emoji, ...data } = {}) {
	    super(toSnakeCase({ ...data, emoji: emoji && typeof emoji === 'string' ? resolvePartialEmoji(emoji) : emoji }));
	  }

	  /**
	   * Sets the emoji to display on this button
	   * @param {string|APIMessageComponentEmoji} emoji The emoji to display on this button
	   * @returns {ButtonBuilder}
	   */
	  setEmoji(emoji) {
	    if (typeof emoji === 'string') {
	      return super.setEmoji(resolvePartialEmoji(emoji));
	    }
	    return super.setEmoji(emoji);
	  }

	  /**
	   * Creates a new button builder from JSON data
	   * @param {ButtonBuilder|ButtonComponent|APIButtonComponent} other The other data
	   * @returns {ButtonBuilder}
	   */
	  static from(other) {
	    return new this(isJSONEncodable(other) ? other.toJSON() : other);
	  }
	}

	ButtonBuilder_1 = ButtonBuilder;

	/**
	 * @external BuildersButton
	 * @see {@link https://discord.js.org/docs/packages/builders/stable/ButtonBuilder:Class}
	 */
	return ButtonBuilder_1;
}

var ButtonComponent_1;
var hasRequiredButtonComponent;

function requireButtonComponent () {
	if (hasRequiredButtonComponent) return ButtonComponent_1;
	hasRequiredButtonComponent = 1;

	const Component = requireComponent();

	/**
	 * Represents a button component
	 * @extends {Component}
	 */
	class ButtonComponent extends Component {
	  /**
	   * The style of this button
	   * @type {ButtonStyle}
	   * @readonly
	   */
	  get style() {
	    return this.data.style;
	  }

	  /**
	   * The label of this button
	   * @type {?string}
	   * @readonly
	   */
	  get label() {
	    return this.data.label ?? null;
	  }

	  /**
	   * The emoji used in this button
	   * @type {?APIMessageComponentEmoji}
	   * @readonly
	   */
	  get emoji() {
	    return this.data.emoji ?? null;
	  }

	  /**
	   * Whether this button is disabled
	   * @type {boolean}
	   * @readonly
	   */
	  get disabled() {
	    return this.data.disabled ?? false;
	  }

	  /**
	   * The custom id of this button (only defined on non-link buttons)
	   * @type {?string}
	   * @readonly
	   */
	  get customId() {
	    return this.data.custom_id ?? null;
	  }

	  /**
	   * The URL of this button (only defined on link buttons)
	   * @type {?string}
	   * @readonly
	   */
	  get url() {
	    return this.data.url ?? null;
	  }
	}

	ButtonComponent_1 = ButtonComponent;
	return ButtonComponent_1;
}

var ChannelSelectMenuBuilder_1;
var hasRequiredChannelSelectMenuBuilder;

function requireChannelSelectMenuBuilder () {
	if (hasRequiredChannelSelectMenuBuilder) return ChannelSelectMenuBuilder_1;
	hasRequiredChannelSelectMenuBuilder = 1;

	const { ChannelSelectMenuBuilder: BuildersChannelSelectMenu } = requireDist$1();
	const { isJSONEncodable } = requireDist$7();
	const { toSnakeCase } = requireTransformers();

	/**
	 * Class used to build select menu components to be sent through the API
	 * @extends {BuildersChannelSelectMenu}
	 */
	class ChannelSelectMenuBuilder extends BuildersChannelSelectMenu {
	  constructor(data = {}) {
	    super(toSnakeCase(data));
	  }

	  /**
	   * Creates a new select menu builder from JSON data
	   * @param {ChannelSelectMenuBuilder|ChannelSelectMenuComponent|APIChannelSelectComponent} other The other data
	   * @returns {ChannelSelectMenuBuilder}
	   */
	  static from(other) {
	    return new this(isJSONEncodable(other) ? other.toJSON() : other);
	  }
	}

	ChannelSelectMenuBuilder_1 = ChannelSelectMenuBuilder;

	/**
	 * @external BuildersChannelSelectMenu
	 * @see {@link https://discord.js.org/docs/packages/builders/stable/ChannelSelectMenuBuilder:Class}
	 */
	return ChannelSelectMenuBuilder_1;
}

var BaseSelectMenuComponent_1;
var hasRequiredBaseSelectMenuComponent;

function requireBaseSelectMenuComponent () {
	if (hasRequiredBaseSelectMenuComponent) return BaseSelectMenuComponent_1;
	hasRequiredBaseSelectMenuComponent = 1;

	const Component = requireComponent();

	/**
	 * Represents a select menu component
	 * @extends {Component}
	 */
	class BaseSelectMenuComponent extends Component {
	  /**
	   * The placeholder for this select menu
	   * @type {?string}
	   * @readonly
	   */
	  get placeholder() {
	    return this.data.placeholder ?? null;
	  }

	  /**
	   * The maximum amount of options that can be selected
	   * @type {?number}
	   * @readonly
	   */
	  get maxValues() {
	    return this.data.max_values ?? null;
	  }

	  /**
	   * The minimum amount of options that must be selected
	   * @type {?number}
	   * @readonly
	   */
	  get minValues() {
	    return this.data.min_values ?? null;
	  }

	  /**
	   * The custom id of this select menu
	   * @type {string}
	   * @readonly
	   */
	  get customId() {
	    return this.data.custom_id;
	  }

	  /**
	   * Whether this select menu is disabled
	   * @type {boolean}
	   * @readonly
	   */
	  get disabled() {
	    return this.data.disabled ?? false;
	  }
	}

	BaseSelectMenuComponent_1 = BaseSelectMenuComponent;
	return BaseSelectMenuComponent_1;
}

var ChannelSelectMenuComponent_1;
var hasRequiredChannelSelectMenuComponent;

function requireChannelSelectMenuComponent () {
	if (hasRequiredChannelSelectMenuComponent) return ChannelSelectMenuComponent_1;
	hasRequiredChannelSelectMenuComponent = 1;

	const BaseSelectMenuComponent = requireBaseSelectMenuComponent();

	/**
	 * Represents a channel select menu component
	 * @extends {BaseSelectMenuComponent}
	 */
	class ChannelSelectMenuComponent extends BaseSelectMenuComponent {
	  /**
	   * The options in this select menu
	   * @type {?(ChannelType[])}
	   * @readonly
	   */
	  get channelTypes() {
	    return this.data.channel_types ?? null;
	  }
	}

	ChannelSelectMenuComponent_1 = ChannelSelectMenuComponent;
	return ChannelSelectMenuComponent_1;
}

var MentionableSelectMenuBuilder_1;
var hasRequiredMentionableSelectMenuBuilder;

function requireMentionableSelectMenuBuilder () {
	if (hasRequiredMentionableSelectMenuBuilder) return MentionableSelectMenuBuilder_1;
	hasRequiredMentionableSelectMenuBuilder = 1;

	const { MentionableSelectMenuBuilder: BuildersMentionableSelectMenu } = requireDist$1();
	const { isJSONEncodable } = requireDist$7();
	const { toSnakeCase } = requireTransformers();

	/**
	 * Class used to build select menu components to be sent through the API
	 * @extends {BuildersMentionableSelectMenu}
	 */
	class MentionableSelectMenuBuilder extends BuildersMentionableSelectMenu {
	  constructor(data = {}) {
	    super(toSnakeCase(data));
	  }

	  /**
	   * Creates a new select menu builder from JSON data
	   * @param {MentionableSelectMenuBuilder|MentionableSelectMenuComponent|APIMentionableSelectComponent} other
	   * The other data
	   * @returns {MentionableSelectMenuBuilder}
	   */
	  static from(other) {
	    return new this(isJSONEncodable(other) ? other.toJSON() : other);
	  }
	}

	MentionableSelectMenuBuilder_1 = MentionableSelectMenuBuilder;

	/**
	 * @external BuildersMentionableSelectMenu
	 * @see {@link https://discord.js.org/docs/packages/builders/stable/MentionableSelectMenuBuilder:Class}
	 */
	return MentionableSelectMenuBuilder_1;
}

var MentionableSelectMenuComponent_1;
var hasRequiredMentionableSelectMenuComponent;

function requireMentionableSelectMenuComponent () {
	if (hasRequiredMentionableSelectMenuComponent) return MentionableSelectMenuComponent_1;
	hasRequiredMentionableSelectMenuComponent = 1;

	const BaseSelectMenuComponent = requireBaseSelectMenuComponent();

	/**
	 * Represents a mentionable select menu component
	 * @extends {BaseSelectMenuComponent}
	 */
	class MentionableSelectMenuComponent extends BaseSelectMenuComponent {}

	MentionableSelectMenuComponent_1 = MentionableSelectMenuComponent;
	return MentionableSelectMenuComponent_1;
}

var RoleSelectMenuBuilder_1;
var hasRequiredRoleSelectMenuBuilder;

function requireRoleSelectMenuBuilder () {
	if (hasRequiredRoleSelectMenuBuilder) return RoleSelectMenuBuilder_1;
	hasRequiredRoleSelectMenuBuilder = 1;

	const { RoleSelectMenuBuilder: BuildersRoleSelectMenu } = requireDist$1();
	const { isJSONEncodable } = requireDist$7();
	const { toSnakeCase } = requireTransformers();

	/**
	 * Class used to build select menu components to be sent through the API
	 * @extends {BuildersRoleSelectMenu}
	 */
	class RoleSelectMenuBuilder extends BuildersRoleSelectMenu {
	  constructor(data = {}) {
	    super(toSnakeCase(data));
	  }

	  /**
	   * Creates a new select menu builder from JSON data
	   * @param {RoleSelectMenuBuilder|RoleSelectMenuComponent|APIRoleSelectComponent} other The other data
	   * @returns {RoleSelectMenuBuilder}
	   */
	  static from(other) {
	    return new this(isJSONEncodable(other) ? other.toJSON() : other);
	  }
	}

	RoleSelectMenuBuilder_1 = RoleSelectMenuBuilder;

	/**
	 * @external BuildersRoleSelectMenu
	 * @see {@link https://discord.js.org/docs/packages/builders/stable/RoleSelectMenuBuilder:Class}
	 */
	return RoleSelectMenuBuilder_1;
}

var RoleSelectMenuComponent_1;
var hasRequiredRoleSelectMenuComponent;

function requireRoleSelectMenuComponent () {
	if (hasRequiredRoleSelectMenuComponent) return RoleSelectMenuComponent_1;
	hasRequiredRoleSelectMenuComponent = 1;

	const BaseSelectMenuComponent = requireBaseSelectMenuComponent();

	/**
	 * Represents a role select menu component
	 * @extends {BaseSelectMenuComponent}
	 */
	class RoleSelectMenuComponent extends BaseSelectMenuComponent {}

	RoleSelectMenuComponent_1 = RoleSelectMenuComponent;
	return RoleSelectMenuComponent_1;
}

var StringSelectMenuBuilder_1;
var hasRequiredStringSelectMenuBuilder;

function requireStringSelectMenuBuilder () {
	if (hasRequiredStringSelectMenuBuilder) return StringSelectMenuBuilder_1;
	hasRequiredStringSelectMenuBuilder = 1;

	const { SelectMenuBuilder: BuildersSelectMenu, normalizeArray } = requireDist$1();
	const { isJSONEncodable } = requireDist$7();
	const { toSnakeCase } = requireTransformers();
	const { resolvePartialEmoji } = requireUtil();

	/**
	 * Class used to build select menu components to be sent through the API
	 * @extends {BuildersSelectMenu}
	 */
	class StringSelectMenuBuilder extends BuildersSelectMenu {
	  constructor({ options, ...data } = {}) {
	    super(
	      toSnakeCase({
	        ...data,
	        options: options?.map(({ emoji, ...option }) => ({
	          ...option,
	          emoji: emoji && typeof emoji === 'string' ? resolvePartialEmoji(emoji) : emoji,
	        })),
	      }),
	    );
	  }

	  /**
	   * Normalizes a select menu option emoji
	   * @param {SelectMenuOptionData|APISelectMenuOption} selectMenuOption The option to normalize
	   * @returns {SelectMenuOptionBuilder|APISelectMenuOption}
	   * @private
	   */
	  static normalizeEmoji(selectMenuOption) {
	    if (isJSONEncodable(selectMenuOption)) {
	      return selectMenuOption;
	    }

	    const { emoji, ...option } = selectMenuOption;
	    return {
	      ...option,
	      emoji: typeof emoji === 'string' ? resolvePartialEmoji(emoji) : emoji,
	    };
	  }

	  /**
	   * Adds options to this select menu
	   * @param {RestOrArray<APISelectMenuOption>} options The options to add to this select menu
	   * @returns {StringSelectMenuBuilder}
	   */
	  addOptions(...options) {
	    return super.addOptions(normalizeArray(options).map(option => StringSelectMenuBuilder.normalizeEmoji(option)));
	  }

	  /**
	   * Sets the options on this select menu
	   * @param {RestOrArray<APISelectMenuOption>} options The options to set on this select menu
	   * @returns {StringSelectMenuBuilder}
	   */
	  setOptions(...options) {
	    return super.setOptions(normalizeArray(options).map(option => StringSelectMenuBuilder.normalizeEmoji(option)));
	  }

	  /**
	   * Creates a new select menu builder from json data
	   * @param {StringSelectMenuBuilder|StringSelectMenuComponent|APIStringSelectComponent} other The other data
	   * @returns {StringSelectMenuBuilder}
	   */
	  static from(other) {
	    if (isJSONEncodable(other)) {
	      return new this(other.toJSON());
	    }
	    return new this(other);
	  }
	}

	StringSelectMenuBuilder_1 = StringSelectMenuBuilder;

	/**
	 * @external BuildersSelectMenu
	 * @see {@link https://discord.js.org/docs/packages/builders/stable/StringSelectMenuBuilder:Class}
	 */
	return StringSelectMenuBuilder_1;
}

var StringSelectMenuComponent_1;
var hasRequiredStringSelectMenuComponent;

function requireStringSelectMenuComponent () {
	if (hasRequiredStringSelectMenuComponent) return StringSelectMenuComponent_1;
	hasRequiredStringSelectMenuComponent = 1;

	const BaseSelectMenuComponent = requireBaseSelectMenuComponent();

	/**
	 * Represents a string select menu component
	 * @extends {BaseSelectMenuComponent}
	 */
	class StringSelectMenuComponent extends BaseSelectMenuComponent {
	  /**
	   * The options in this select menu
	   * @type {APISelectMenuOption[]}
	   * @readonly
	   */
	  get options() {
	    return this.data.options;
	  }
	}

	StringSelectMenuComponent_1 = StringSelectMenuComponent;
	return StringSelectMenuComponent_1;
}

var TextInputBuilder_1;
var hasRequiredTextInputBuilder;

function requireTextInputBuilder () {
	if (hasRequiredTextInputBuilder) return TextInputBuilder_1;
	hasRequiredTextInputBuilder = 1;

	const { TextInputBuilder: BuildersTextInput } = requireDist$1();
	const { isJSONEncodable } = requireDist$7();
	const { toSnakeCase } = requireTransformers();

	/**
	 * Represents a text input builder.
	 * @extends {BuildersTextInput}
	 */
	class TextInputBuilder extends BuildersTextInput {
	  constructor(data) {
	    super(toSnakeCase(data));
	  }

	  /**
	   * Creates a new text input builder from JSON data
	   * @param {TextInputBuilder|TextInputComponent|APITextInputComponent} other The other data
	   * @returns {TextInputBuilder}
	   */
	  static from(other) {
	    return new this(isJSONEncodable(other) ? other.toJSON() : other);
	  }
	}

	TextInputBuilder_1 = TextInputBuilder;

	/**
	 * @external BuildersTextInput
	 * @see {@link https://discord.js.org/docs/packages/builders/stable/TextInputBuilder:Class}
	 */
	return TextInputBuilder_1;
}

var TextInputComponent_1;
var hasRequiredTextInputComponent;

function requireTextInputComponent () {
	if (hasRequiredTextInputComponent) return TextInputComponent_1;
	hasRequiredTextInputComponent = 1;

	const Component = requireComponent();

	/**
	 * Represents a text input component.
	 * @extends {Component}
	 */
	class TextInputComponent extends Component {
	  /**
	   * The custom id of this text input
	   * @type {string}
	   * @readonly
	   */
	  get customId() {
	    return this.data.custom_id;
	  }

	  /**
	   * The value for this text input
	   * @type {string}
	   * @readonly
	   */
	  get value() {
	    return this.data.value;
	  }
	}

	TextInputComponent_1 = TextInputComponent;
	return TextInputComponent_1;
}

var UserSelectMenuBuilder_1;
var hasRequiredUserSelectMenuBuilder;

function requireUserSelectMenuBuilder () {
	if (hasRequiredUserSelectMenuBuilder) return UserSelectMenuBuilder_1;
	hasRequiredUserSelectMenuBuilder = 1;

	const { UserSelectMenuBuilder: BuildersUserSelectMenu } = requireDist$1();
	const { isJSONEncodable } = requireDist$7();
	const { toSnakeCase } = requireTransformers();

	/**
	 * Class used to build select menu components to be sent through the API
	 * @extends {BuildersUserSelectMenu}
	 */
	class UserSelectMenuBuilder extends BuildersUserSelectMenu {
	  constructor(data = {}) {
	    super(toSnakeCase(data));
	  }

	  /**
	   * Creates a new select menu builder from JSON data
	   * @param {UserSelectMenuBuilder|UserSelectMenuComponent|APIUserSelectComponent} other The other data
	   * @returns {UserSelectMenuBuilder}
	   */
	  static from(other) {
	    return new this(isJSONEncodable(other) ? other.toJSON() : other);
	  }
	}

	UserSelectMenuBuilder_1 = UserSelectMenuBuilder;

	/**
	 * @external BuildersUserSelectMenu
	 * @see {@link https://discord.js.org/docs/packages/builders/stable/UserSelectMenuBuilder:Class}
	 */
	return UserSelectMenuBuilder_1;
}

var UserSelectMenuComponent_1;
var hasRequiredUserSelectMenuComponent;

function requireUserSelectMenuComponent () {
	if (hasRequiredUserSelectMenuComponent) return UserSelectMenuComponent_1;
	hasRequiredUserSelectMenuComponent = 1;

	const BaseSelectMenuComponent = requireBaseSelectMenuComponent();

	/**
	 * Represents a user select menu component
	 * @extends {BaseSelectMenuComponent}
	 */
	class UserSelectMenuComponent extends BaseSelectMenuComponent {}

	UserSelectMenuComponent_1 = UserSelectMenuComponent;
	return UserSelectMenuComponent_1;
}

var Components;
var hasRequiredComponents;

function requireComponents () {
	if (hasRequiredComponents) return Components;
	hasRequiredComponents = 1;

	// This file contains the typedefs for camel-cased JSON data
	const { ComponentBuilder } = requireDist$1();
	const { ComponentType } = requireV10$6();
	/**
	 * @typedef {Object} BaseComponentData
	 * @property {ComponentType} type The type of component
	 */

	/**
	 * @typedef {BaseComponentData} ActionRowData
	 * @property {ComponentData[]} components The components in this action row
	 */

	/**
	 * @typedef {BaseComponentData} ButtonComponentData
	 * @property {ButtonStyle} style The style of the button
	 * @property {?boolean} disabled Whether this button is disabled
	 * @property {string} label The label of this button
	 * @property {?APIMessageComponentEmoji} emoji The emoji on this button
	 * @property {?string} customId The custom id of the button
	 * @property {?string} url The URL of the button
	 */

	/**
	 * @typedef {object} SelectMenuComponentOptionData
	 * @property {string} label The label of the option
	 * @property {string} value The value of the option
	 * @property {?string} description The description of the option
	 * @property {?APIMessageComponentEmoji} emoji The emoji on the option
	 * @property {?boolean} default Whether this option is selected by default
	 */

	/**
	 * @typedef {BaseComponentData} SelectMenuComponentData
	 * @property {string} customId The custom id of the select menu
	 * @property {?boolean} disabled Whether the select menu is disabled or not
	 * @property {?number} maxValues The maximum amount of options that can be selected
	 * @property {?number} minValues The minimum amount of options that can be selected
	 * @property {?SelectMenuComponentOptionData[]} options The options in this select menu
	 * @property {?string} placeholder The placeholder of the select menu
	 */

	/**
	 * @typedef {ActionRowData|ButtonComponentData|SelectMenuComponentData} MessageComponentData
	 */

	/**
	 * @typedef {BaseComponentData} TextInputComponentData
	 * @property {string} customId The custom id of the text input
	 * @property {TextInputStyle} style The style of the text input
	 * @property {string} label The text that appears on top of the text input field
	 * @property {?number} minLength The minimum number of characters that can be entered in the text input
	 * @property {?number} maxLength The maximum number of characters that can be entered in the text input
	 * @property {?boolean} required Whether or not the text input is required or not
	 * @property {?string} value The pre-filled text in the text input
	 * @property {?string} placeholder Placeholder for the text input
	 */

	/**
	 * @typedef {ActionRowData|ButtonComponentData|SelectMenuComponentData|TextInputComponentData} ComponentData
	 */

	/**
	 * Any emoji data that can be used within a button
	 * @typedef {APIMessageComponentEmoji|string} ComponentEmojiResolvable
	 */

	/**
	 * Transforms API data into a component
	 * @param {APIMessageComponent|Component} data The data to create the component from
	 * @returns {Component}
	 */
	function createComponent(data) {
	  if (data instanceof Component) {
	    return data;
	  }

	  switch (data.type) {
	    case ComponentType.ActionRow:
	      return new ActionRow(data);
	    case ComponentType.Button:
	      return new ButtonComponent(data);
	    case ComponentType.StringSelect:
	      return new StringSelectMenuComponent(data);
	    case ComponentType.TextInput:
	      return new TextInputComponent(data);
	    case ComponentType.UserSelect:
	      return new UserSelectMenuComponent(data);
	    case ComponentType.RoleSelect:
	      return new RoleSelectMenuComponent(data);
	    case ComponentType.MentionableSelect:
	      return new MentionableSelectMenuComponent(data);
	    case ComponentType.ChannelSelect:
	      return new ChannelSelectMenuComponent(data);
	    default:
	      return new Component(data);
	  }
	}

	/**
	 * Transforms API data into a component builder
	 * @param {APIMessageComponent|ComponentBuilder} data The data to create the component from
	 * @returns {ComponentBuilder}
	 */
	function createComponentBuilder(data) {
	  if (data instanceof ComponentBuilder) {
	    return data;
	  }

	  switch (data.type) {
	    case ComponentType.ActionRow:
	      return new ActionRowBuilder(data);
	    case ComponentType.Button:
	      return new ButtonBuilder(data);
	    case ComponentType.StringSelect:
	      return new StringSelectMenuBuilder(data);
	    case ComponentType.TextInput:
	      return new TextInputBuilder(data);
	    case ComponentType.UserSelect:
	      return new UserSelectMenuBuilder(data);
	    case ComponentType.RoleSelect:
	      return new RoleSelectMenuBuilder(data);
	    case ComponentType.MentionableSelect:
	      return new MentionableSelectMenuBuilder(data);
	    case ComponentType.ChannelSelect:
	      return new ChannelSelectMenuBuilder(data);
	    default:
	      return new ComponentBuilder(data);
	  }
	}

	Components = { createComponent, createComponentBuilder };

	const ActionRow = requireActionRow();
	const ActionRowBuilder = requireActionRowBuilder();
	const ButtonBuilder = requireButtonBuilder();
	const ButtonComponent = requireButtonComponent();
	const ChannelSelectMenuBuilder = requireChannelSelectMenuBuilder();
	const ChannelSelectMenuComponent = requireChannelSelectMenuComponent();
	const Component = requireComponent();
	const MentionableSelectMenuBuilder = requireMentionableSelectMenuBuilder();
	const MentionableSelectMenuComponent = requireMentionableSelectMenuComponent();
	const RoleSelectMenuBuilder = requireRoleSelectMenuBuilder();
	const RoleSelectMenuComponent = requireRoleSelectMenuComponent();
	const StringSelectMenuBuilder = requireStringSelectMenuBuilder();
	const StringSelectMenuComponent = requireStringSelectMenuComponent();
	const TextInputBuilder = requireTextInputBuilder();
	const TextInputComponent = requireTextInputComponent();
	const UserSelectMenuBuilder = requireUserSelectMenuBuilder();
	const UserSelectMenuComponent = requireUserSelectMenuComponent();
	return Components;
}

var ActionRowBuilder_1;
var hasRequiredActionRowBuilder;

function requireActionRowBuilder () {
	if (hasRequiredActionRowBuilder) return ActionRowBuilder_1;
	hasRequiredActionRowBuilder = 1;

	const { ActionRowBuilder: BuildersActionRow } = requireDist$1();
	const { isJSONEncodable } = requireDist$7();
	const { createComponentBuilder } = requireComponents();
	const { toSnakeCase } = requireTransformers();

	/**
	 * Represents an action row builder.
	 * @extends {BuildersActionRow}
	 */
	class ActionRowBuilder extends BuildersActionRow {
	  constructor({ components, ...data } = {}) {
	    super({
	      ...toSnakeCase(data),
	      components: components?.map(component => createComponentBuilder(component)),
	    });
	  }

	  /**
	   * Creates a new action row builder from JSON data
	   * @param {ActionRow|ActionRowBuilder|APIActionRowComponent} other The other data
	   * @returns {ActionRowBuilder}
	   */
	  static from(other) {
	    return new this(isJSONEncodable(other) ? other.toJSON() : other);
	  }
	}

	ActionRowBuilder_1 = ActionRowBuilder;

	/**
	 * @external BuildersActionRow
	 * @see {@link https://discord.js.org/docs/packages/builders/stable/ActionRowBuilder:Class}
	 */
	return ActionRowBuilder_1;
}

var GuildScheduledEvent = {};

var hasRequiredGuildScheduledEvent$2;

function requireGuildScheduledEvent$2 () {
	if (hasRequiredGuildScheduledEvent$2) return GuildScheduledEvent;
	hasRequiredGuildScheduledEvent$2 = 1;

	const { DiscordSnowflake } = /*@__PURE__*/ requireCjs$2();
	const { GuildScheduledEventStatus, GuildScheduledEventEntityType, RouteBases } = requireV10$6();
	const Base = requireBase$2();
	const { DiscordjsError, ErrorCodes } = requireErrors$1();

	/**
	 * Represents a scheduled event in a {@link Guild}.
	 * @extends {Base}
	 */
	let GuildScheduledEvent$1 = class GuildScheduledEvent extends Base {
	  constructor(client, data) {
	    super(client);

	    /**
	     * The id of the guild scheduled event
	     * @type {Snowflake}
	     */
	    this.id = data.id;

	    /**
	     * The id of the guild this guild scheduled event belongs to
	     * @type {Snowflake}
	     */
	    this.guildId = data.guild_id;

	    this._patch(data);
	  }

	  _patch(data) {
	    if ('channel_id' in data) {
	      /**
	       * The channel id in which the scheduled event will be hosted,
	       * or `null` if entity type is {@link GuildScheduledEventEntityType.External}
	       * @type {?Snowflake}
	       */
	      this.channelId = data.channel_id;
	    } else {
	      this.channelId ??= null;
	    }

	    if ('creator_id' in data) {
	      /**
	       * The id of the user that created this guild scheduled event
	       * @type {?Snowflake}
	       */
	      this.creatorId = data.creator_id;
	    } else {
	      this.creatorId ??= null;
	    }

	    if ('name' in data) {
	      /**
	       * The name of the guild scheduled event
	       * @type {?string}
	       */
	      this.name = data.name;
	    } else {
	      // Only if partial.
	      this.name ??= null;
	    }

	    if ('description' in data) {
	      /**
	       * The description of the guild scheduled event
	       * @type {?string}
	       */
	      this.description = data.description;
	    } else {
	      this.description ??= null;
	    }

	    if ('scheduled_start_time' in data) {
	      /**
	       * The timestamp the guild scheduled event will start at
	       * @type {?number}
	       */
	      this.scheduledStartTimestamp = Date.parse(data.scheduled_start_time);
	    } else {
	      this.scheduledStartTimestamp ??= null;
	    }

	    if ('scheduled_end_time' in data) {
	      /**
	       * The timestamp the guild scheduled event will end at
	       * or `null` if the event does not have a scheduled time to end
	       * @type {?number}
	       */
	      this.scheduledEndTimestamp = data.scheduled_end_time ? Date.parse(data.scheduled_end_time) : null;
	    } else {
	      this.scheduledEndTimestamp ??= null;
	    }

	    if ('privacy_level' in data) {
	      /**
	       * The privacy level of the guild scheduled event
	       * @type {?GuildScheduledEventPrivacyLevel}
	       */
	      this.privacyLevel = data.privacy_level;
	    } else {
	      // Only if partial.
	      this.privacyLevel ??= null;
	    }

	    if ('status' in data) {
	      /**
	       * The status of the guild scheduled event
	       * @type {?GuildScheduledEventStatus}
	       */
	      this.status = data.status;
	    } else {
	      // Only if partial.
	      this.status ??= null;
	    }

	    if ('entity_type' in data) {
	      /**
	       * The type of hosting entity associated with the scheduled event
	       * @type {?GuildScheduledEventEntityType}
	       */
	      this.entityType = data.entity_type;
	    } else {
	      // Only if partial.
	      this.entityType ??= null;
	    }

	    if ('entity_id' in data) {
	      /**
	       * The id of the hosting entity associated with the scheduled event
	       * @type {?Snowflake}
	       */
	      this.entityId = data.entity_id;
	    } else {
	      this.entityId ??= null;
	    }

	    if ('user_count' in data) {
	      /**
	       * The number of users who are subscribed to this guild scheduled event
	       * @type {?number}
	       */
	      this.userCount = data.user_count;
	    } else {
	      this.userCount ??= null;
	    }

	    if ('creator' in data) {
	      /**
	       * The user that created this guild scheduled event
	       * @type {?User}
	       */
	      this.creator = this.client.users._add(data.creator);
	    } else {
	      this.creator ??= this.client.users.resolve(this.creatorId);
	    }

	    /* eslint-disable max-len */
	    /**
	     * Represents the additional metadata for a {@link GuildScheduledEvent}
	     * @see {@link https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-object-guild-scheduled-event-entity-metadata}
	     * @typedef {Object} GuildScheduledEventEntityMetadata
	     * @property {?string} location The location of the guild scheduled event
	     */
	    /* eslint-enable max-len */

	    if ('entity_metadata' in data) {
	      if (data.entity_metadata) {
	        /**
	         * Additional metadata
	         * @type {?GuildScheduledEventEntityMetadata}
	         */
	        this.entityMetadata = {
	          location: data.entity_metadata.location ?? this.entityMetadata?.location ?? null,
	        };
	      } else {
	        this.entityMetadata = null;
	      }
	    } else {
	      this.entityMetadata ??= null;
	    }

	    if ('image' in data) {
	      /**
	       * The cover image hash for this scheduled event
	       * @type {?string}
	       */
	      this.image = data.image;
	    } else {
	      this.image ??= null;
	    }
	  }

	  /**
	   * Whether this guild scheduled event is partial.
	   * @type {boolean}
	   * @readonly
	   */
	  get partial() {
	    return this.name === null;
	  }

	  /**
	   * The URL of this scheduled event's cover image
	   * @param {BaseImageURLOptions} [options={}] Options for image URL
	   * @returns {?string}
	   */
	  coverImageURL(options = {}) {
	    return this.image && this.client.rest.cdn.guildScheduledEventCover(this.id, this.image, options);
	  }

	  /**
	   * The timestamp the guild scheduled event was created at
	   * @type {number}
	   * @readonly
	   */
	  get createdTimestamp() {
	    return DiscordSnowflake.timestampFrom(this.id);
	  }

	  /**
	   * The time the guild scheduled event was created at
	   * @type {Date}
	   * @readonly
	   */
	  get createdAt() {
	    return new Date(this.createdTimestamp);
	  }

	  /**
	   * The time the guild scheduled event will start at
	   * <info>This can be potentially `null` only when it's an {@link GuildAuditLogsEntry#target}</info>
	   * @type {?Date}
	   * @readonly
	   */
	  get scheduledStartAt() {
	    return this.scheduledStartTimestamp && new Date(this.scheduledStartTimestamp);
	  }

	  /**
	   * The time the guild scheduled event will end at,
	   * or `null` if the event does not have a scheduled time to end
	   * @type {?Date}
	   * @readonly
	   */
	  get scheduledEndAt() {
	    return this.scheduledEndTimestamp && new Date(this.scheduledEndTimestamp);
	  }

	  /**
	   * The channel associated with this scheduled event
	   * @type {?(VoiceChannel|StageChannel)}
	   * @readonly
	   */
	  get channel() {
	    return this.client.channels.resolve(this.channelId);
	  }

	  /**
	   * The guild this scheduled event belongs to
	   * @type {?Guild}
	   * @readonly
	   */
	  get guild() {
	    return this.client.guilds.resolve(this.guildId);
	  }

	  /**
	   * The URL to the guild scheduled event
	   * @type {string}
	   * @readonly
	   */
	  get url() {
	    return `${RouteBases.scheduledEvent}/${this.guildId}/${this.id}`;
	  }

	  /**
	   * Options used to create an invite URL to a {@link GuildScheduledEvent}
	   * @typedef {InviteCreateOptions} GuildScheduledEventInviteURLCreateOptions
	   * @property {GuildInvitableChannelResolvable} [channel] The channel to create the invite in.
	   * <warn>This is required when the `entityType` of `GuildScheduledEvent` is
	   * {@link GuildScheduledEventEntityType.External}, gets ignored otherwise</warn>
	   */

	  /**
	   * Creates an invite URL to this guild scheduled event.
	   * @param {GuildScheduledEventInviteURLCreateOptions} [options] The options to create the invite
	   * @returns {Promise<string>}
	   */
	  async createInviteURL(options) {
	    let channelId = this.channelId;
	    if (this.entityType === GuildScheduledEventEntityType.External) {
	      if (!options?.channel) throw new DiscordjsError(ErrorCodes.InviteOptionsMissingChannel);
	      channelId = this.guild.channels.resolveId(options.channel);
	      if (!channelId) throw new DiscordjsError(ErrorCodes.GuildChannelResolve);
	    }
	    const invite = await this.guild.invites.create(channelId, options);
	    return `${RouteBases.invite}/${invite.code}?event=${this.id}`;
	  }

	  /**
	   * Edits this guild scheduled event.
	   * @param {GuildScheduledEventEditOptions} options The options to edit the guild scheduled event
	   * @returns {Promise<GuildScheduledEvent>}
	   * @example
	   * // Edit a guild scheduled event
	   * guildScheduledEvent.edit({ name: 'Party' })
	   *  .then(guildScheduledEvent => console.log(guildScheduledEvent))
	   *  .catch(console.error);
	   */
	  edit(options) {
	    return this.guild.scheduledEvents.edit(this.id, options);
	  }

	  /**
	   * Fetches this guild scheduled event.
	   * @param {boolean} [force=true] Whether to skip the cache check and request the API
	   * @returns {Promise<GuildScheduledEvent>}
	   */
	  fetch(force = true) {
	    return this.guild.scheduledEvents.fetch({ guildScheduledEvent: this.id, force });
	  }

	  /**
	   * Deletes this guild scheduled event.
	   * @returns {Promise<GuildScheduledEvent>}
	   * @example
	   * // Delete a guild scheduled event
	   * guildScheduledEvent.delete()
	   *  .then(guildScheduledEvent => console.log(guildScheduledEvent))
	   *  .catch(console.error);
	   */
	  async delete() {
	    await this.guild.scheduledEvents.delete(this.id);
	    return this;
	  }

	  /**
	   * Sets a new name for the guild scheduled event.
	   * @param {string} name The new name of the guild scheduled event
	   * @param {string} [reason] The reason for changing the name
	   * @returns {Promise<GuildScheduledEvent>}
	   * @example
	   * // Set name of a guild scheduled event
	   * guildScheduledEvent.setName('Birthday Party')
	   *  .then(guildScheduledEvent => console.log(`Set the name to: ${guildScheduledEvent.name}`))
	   *  .catch(console.error);
	   */
	  setName(name, reason) {
	    return this.edit({ name, reason });
	  }

	  /**
	   * Sets a new time to schedule the event at.
	   * @param {DateResolvable} scheduledStartTime The time to schedule the event at
	   * @param {string} [reason] The reason for changing the scheduled start time
	   * @returns {Promise<GuildScheduledEvent>}
	   * @example
	   * // Set start time of a guild scheduled event
	   * guildScheduledEvent.setScheduledStartTime('2022-09-24T00:00:00+05:30')
	   *  .then(guildScheduledEvent => console.log(`Set the start time to: ${guildScheduledEvent.scheduledStartTime}`))
	   *  .catch(console.error);
	   */
	  setScheduledStartTime(scheduledStartTime, reason) {
	    return this.edit({ scheduledStartTime, reason });
	  }

	  // TODO: scheduledEndTime gets reset on passing null but it hasn't been documented
	  /**
	   * Sets a new time to end the event at.
	   * @param {DateResolvable} scheduledEndTime The time to end the event at
	   * @param {string} [reason] The reason for changing the scheduled end time
	   * @returns {Promise<GuildScheduledEvent>}
	   * @example
	   * // Set end time of a guild scheduled event
	   * guildScheduledEvent.setScheduledEndTime('2022-09-25T00:00:00+05:30')
	   *  .then(guildScheduledEvent => console.log(`Set the end time to: ${guildScheduledEvent.scheduledEndTime}`))
	   *  .catch(console.error);
	   */
	  setScheduledEndTime(scheduledEndTime, reason) {
	    return this.edit({ scheduledEndTime, reason });
	  }

	  /**
	   * Sets the new description of the guild scheduled event.
	   * @param {string} description The description of the guild scheduled event
	   * @param {string} [reason] The reason for changing the description
	   * @returns {Promise<GuildScheduledEvent>}
	   * @example
	   * // Set description of a guild scheduled event
	   * guildScheduledEvent.setDescription('A virtual birthday party')
	   *  .then(guildScheduledEvent => console.log(`Set the description to: ${guildScheduledEvent.description}`))
	   *  .catch(console.error);
	   */
	  setDescription(description, reason) {
	    return this.edit({ description, reason });
	  }

	  /**
	   * Sets the new status of the guild scheduled event.
	   * <info>If you're working with TypeScript, use this method in conjunction with status type-guards
	   * like {@link GuildScheduledEvent#isScheduled} to get only valid status as suggestion</info>
	   * @param {GuildScheduledEventStatus} status The status of the guild scheduled event
	   * @param {string} [reason] The reason for changing the status
	   * @returns {Promise<GuildScheduledEvent>}
	   * @example
	   * // Set status of a guild scheduled event
	   * guildScheduledEvent.setStatus(GuildScheduledEventStatus.Active)
	   *  .then(guildScheduledEvent => console.log(`Set the status to: ${guildScheduledEvent.status}`))
	   *  .catch(console.error);
	   */
	  setStatus(status, reason) {
	    return this.edit({ status, reason });
	  }

	  /**
	   * Sets the new location of the guild scheduled event.
	   * @param {string} location The location of the guild scheduled event
	   * @param {string} [reason] The reason for changing the location
	   * @returns {Promise<GuildScheduledEvent>}
	   * @example
	   * // Set location of a guild scheduled event
	   * guildScheduledEvent.setLocation('Earth')
	   *  .then(guildScheduledEvent => console.log(`Set the location to: ${guildScheduledEvent.entityMetadata.location}`))
	   *  .catch(console.error);
	   */
	  setLocation(location, reason) {
	    return this.edit({ entityMetadata: { location }, reason });
	  }

	  /**
	   * Fetches subscribers of this guild scheduled event.
	   * @param {FetchGuildScheduledEventSubscribersOptions} [options] Options for fetching the subscribers
	   * @returns {Promise<Collection<Snowflake, GuildScheduledEventUser>>}
	   */
	  fetchSubscribers(options) {
	    return this.guild.scheduledEvents.fetchSubscribers(this.id, options);
	  }

	  /**
	   * When concatenated with a string, this automatically concatenates the event's URL instead of the object.
	   * @returns {string}
	   * @example
	   * // Logs: Event: https://discord.com/events/412345678901234567/499876543211234567
	   * console.log(`Event: ${guildScheduledEvent}`);
	   */
	  toString() {
	    return this.url;
	  }

	  /**
	   * Indicates whether this guild scheduled event has an {@link GuildScheduledEventStatus.Active} status.
	   * @returns {boolean}
	   */
	  isActive() {
	    return this.status === GuildScheduledEventStatus.Active;
	  }

	  /**
	   * Indicates whether this guild scheduled event has a {@link GuildScheduledEventStatus.Canceled} status.
	   * @returns {boolean}
	   */
	  isCanceled() {
	    return this.status === GuildScheduledEventStatus.Canceled;
	  }

	  /**
	   * Indicates whether this guild scheduled event has a {@link GuildScheduledEventStatus.Completed} status.
	   * @returns {boolean}
	   */
	  isCompleted() {
	    return this.status === GuildScheduledEventStatus.Completed;
	  }

	  /**
	   * Indicates whether this guild scheduled event has a {@link GuildScheduledEventStatus.Scheduled} status.
	   * @returns {boolean}
	   */
	  isScheduled() {
	    return this.status === GuildScheduledEventStatus.Scheduled;
	  }
	};

	GuildScheduledEvent.GuildScheduledEvent = GuildScheduledEvent$1;
	return GuildScheduledEvent;
}

var Application_1;
var hasRequiredApplication$2;

function requireApplication$2 () {
	if (hasRequiredApplication$2) return Application_1;
	hasRequiredApplication$2 = 1;

	const { DiscordSnowflake } = /*@__PURE__*/ requireCjs$2();
	const Base = requireBase$2();

	/**
	 * Represents an OAuth2 Application.
	 * @extends {Base}
	 * @abstract
	 */
	class Application extends Base {
	  constructor(client, data) {
	    super(client);
	    this._patch(data);
	  }

	  _patch(data) {
	    /**
	     * The application's id
	     * @type {Snowflake}
	     */
	    this.id = data.id;

	    if ('name' in data) {
	      /**
	       * The name of the application
	       * @type {?string}
	       */
	      this.name = data.name;
	    } else {
	      this.name ??= null;
	    }

	    if ('description' in data) {
	      /**
	       * The application's description
	       * @type {?string}
	       */
	      this.description = data.description;
	    } else {
	      this.description ??= null;
	    }

	    if ('icon' in data) {
	      /**
	       * The application's icon hash
	       * @type {?string}
	       */
	      this.icon = data.icon;
	    } else {
	      this.icon ??= null;
	    }
	  }

	  /**
	   * The timestamp the application was created at
	   * @type {number}
	   * @readonly
	   */
	  get createdTimestamp() {
	    return DiscordSnowflake.timestampFrom(this.id);
	  }

	  /**
	   * The time the application was created at
	   * @type {Date}
	   * @readonly
	   */
	  get createdAt() {
	    return new Date(this.createdTimestamp);
	  }

	  /**
	   * A link to the application's icon.
	   * @param {ImageURLOptions} [options={}] Options for the image URL
	   * @returns {?string}
	   */
	  iconURL(options = {}) {
	    return this.icon && this.client.rest.cdn.appIcon(this.id, this.icon, options);
	  }

	  /**
	   * A link to this application's cover image.
	   * @param {ImageURLOptions} [options={}] Options for the image URL
	   * @returns {?string}
	   */
	  coverURL(options = {}) {
	    return this.cover && this.client.rest.cdn.appIcon(this.id, this.cover, options);
	  }

	  /**
	   * When concatenated with a string, this automatically returns the application's name instead of the
	   * Application object.
	   * @returns {?string}
	   * @example
	   * // Logs: Application name: My App
	   * console.log(`Application name: ${application}`);
	   */
	  toString() {
	    return this.name;
	  }

	  toJSON() {
	    return super.toJSON({ createdTimestamp: true });
	  }
	}

	Application_1 = Application;
	return Application_1;
}

var IntegrationApplication_1;
var hasRequiredIntegrationApplication;

function requireIntegrationApplication () {
	if (hasRequiredIntegrationApplication) return IntegrationApplication_1;
	hasRequiredIntegrationApplication = 1;

	const Application = requireApplication$2();

	/**
	 * Represents an Integration's OAuth2 Application.
	 * @extends {Application}
	 */
	class IntegrationApplication extends Application {
	  _patch(data) {
	    super._patch(data);

	    if ('bot' in data) {
	      /**
	       * The bot user for this application
	       * @type {?User}
	       */
	      this.bot = this.client.users._add(data.bot);
	    } else {
	      this.bot ??= null;
	    }

	    if ('terms_of_service_url' in data) {
	      /**
	       * The URL of the application's terms of service
	       * @type {?string}
	       */
	      this.termsOfServiceURL = data.terms_of_service_url;
	    } else {
	      this.termsOfServiceURL ??= null;
	    }

	    if ('privacy_policy_url' in data) {
	      /**
	       * The URL of the application's privacy policy
	       * @type {?string}
	       */
	      this.privacyPolicyURL = data.privacy_policy_url;
	    } else {
	      this.privacyPolicyURL ??= null;
	    }

	    if ('rpc_origins' in data) {
	      /**
	       * The Array of RPC origin URLs
	       * @type {string[]}
	       */
	      this.rpcOrigins = data.rpc_origins;
	    } else {
	      this.rpcOrigins ??= [];
	    }

	    if ('hook' in data) {
	      /**
	       * Whether the application can be default hooked by the client
	       * @type {?boolean}
	       */
	      this.hook = data.hook;
	    } else {
	      this.hook ??= null;
	    }

	    if ('cover_image' in data) {
	      /**
	       * The hash of the application's cover image
	       * @type {?string}
	       */
	      this.cover = data.cover_image;
	    } else {
	      this.cover ??= null;
	    }

	    if ('verify_key' in data) {
	      /**
	       * The hex-encoded key for verification in interactions and the GameSDK's GetTicket
	       * @type {?string}
	       */
	      this.verifyKey = data.verify_key;
	    } else {
	      this.verifyKey ??= null;
	    }
	  }
	}

	IntegrationApplication_1 = IntegrationApplication;
	return IntegrationApplication_1;
}

var InviteStageInstance_1;
var hasRequiredInviteStageInstance;

function requireInviteStageInstance () {
	if (hasRequiredInviteStageInstance) return InviteStageInstance_1;
	hasRequiredInviteStageInstance = 1;

	const { Collection } = requireDist$3();
	const Base = requireBase$2();

	/**
	 * Represents the data about a public {@link StageInstance} in an {@link Invite}.
	 * @extends {Base}
	 * @deprecated
	 */
	class InviteStageInstance extends Base {
	  constructor(client, data, channelId, guildId) {
	    super(client);

	    /**
	     * The id of the stage channel this invite is for
	     * @type {Snowflake}
	     */
	    this.channelId = channelId;

	    /**
	     * The stage channel's guild id
	     * @type {Snowflake}
	     */
	    this.guildId = guildId;

	    /**
	     * The members speaking in the stage channel
	     * @type {Collection<Snowflake, GuildMember>}
	     */
	    this.members = new Collection();

	    this._patch(data);
	  }

	  _patch(data) {
	    if ('topic' in data) {
	      /**
	       * The topic of the stage instance
	       * @type {string}
	       */
	      this.topic = data.topic;
	    }

	    if ('participant_count' in data) {
	      /**
	       * The number of users in the stage channel
	       * @type {number}
	       */
	      this.participantCount = data.participant_count;
	    }

	    if ('speaker_count' in data) {
	      /**
	       * The number of users speaking in the stage channel
	       * @type {number}
	       */
	      this.speakerCount = data.speaker_count;
	    }

	    this.members.clear();
	    for (const rawMember of data.members) {
	      const member = this.guild.members._add(rawMember);
	      this.members.set(member.id, member);
	    }
	  }

	  /**
	   * The stage channel this invite is for
	   * @type {?StageChannel}
	   * @readonly
	   */
	  get channel() {
	    return this.client.channels.resolve(this.channelId);
	  }

	  /**
	   * The guild of the stage channel this invite is for
	   * @type {?Guild}
	   * @readonly
	   */
	  get guild() {
	    return this.client.guilds.resolve(this.guildId);
	  }
	}

	InviteStageInstance_1 = InviteStageInstance;
	return InviteStageInstance_1;
}

var BaseGuild_1;
var hasRequiredBaseGuild;

function requireBaseGuild () {
	if (hasRequiredBaseGuild) return BaseGuild_1;
	hasRequiredBaseGuild = 1;

	const { makeURLSearchParams } = requireWeb();
	const { DiscordSnowflake } = /*@__PURE__*/ requireCjs$2();
	const { Routes, GuildFeature } = requireV10$6();
	const Base = requireBase$2();

	/**
	 * The base class for {@link Guild}, {@link OAuth2Guild} and {@link InviteGuild}.
	 * @extends {Base}
	 * @abstract
	 */
	class BaseGuild extends Base {
	  constructor(client, data) {
	    super(client);

	    /**
	     * The guild's id
	     * @type {Snowflake}
	     */
	    this.id = data.id;

	    /**
	     * The name of this guild
	     * @type {string}
	     */
	    this.name = data.name;

	    /**
	     * The icon hash of this guild
	     * @type {?string}
	     */
	    this.icon = data.icon;

	    /**
	     * An array of features available to this guild
	     * @type {GuildFeature[]}
	     */
	    this.features = data.features;
	  }

	  /**
	   * The timestamp this guild was created at
	   * @type {number}
	   * @readonly
	   */
	  get createdTimestamp() {
	    return DiscordSnowflake.timestampFrom(this.id);
	  }

	  /**
	   * The time this guild was created at
	   * @type {Date}
	   * @readonly
	   */
	  get createdAt() {
	    return new Date(this.createdTimestamp);
	  }

	  /**
	   * The acronym that shows up in place of a guild icon
	   * @type {string}
	   * @readonly
	   */
	  get nameAcronym() {
	    return this.name
	      .replace(/'s /g, ' ')
	      .replace(/\w+/g, e => e[0])
	      .replace(/\s/g, '');
	  }

	  /**
	   * Whether this guild is partnered
	   * @type {boolean}
	   * @readonly
	   */
	  get partnered() {
	    return this.features.includes(GuildFeature.Partnered);
	  }

	  /**
	   * Whether this guild is verified
	   * @type {boolean}
	   * @readonly
	   */
	  get verified() {
	    return this.features.includes(GuildFeature.Verified);
	  }

	  /**
	   * The URL to this guild's icon.
	   * @param {ImageURLOptions} [options={}] Options for the image URL
	   * @returns {?string}
	   */
	  iconURL(options = {}) {
	    return this.icon && this.client.rest.cdn.icon(this.id, this.icon, options);
	  }

	  /**
	   * Fetches this guild.
	   * @returns {Promise<Guild>}
	   */
	  async fetch() {
	    const data = await this.client.rest.get(Routes.guild(this.id), {
	      query: makeURLSearchParams({ with_counts: true }),
	    });
	    return this.client.guilds._add(data);
	  }

	  /**
	   * When concatenated with a string, this automatically returns the guild's name instead of the Guild object.
	   * @returns {string}
	   */
	  toString() {
	    return this.name;
	  }
	}

	BaseGuild_1 = BaseGuild;
	return BaseGuild_1;
}

var AnonymousGuild_1;
var hasRequiredAnonymousGuild;

function requireAnonymousGuild () {
	if (hasRequiredAnonymousGuild) return AnonymousGuild_1;
	hasRequiredAnonymousGuild = 1;

	const BaseGuild = requireBaseGuild();

	/**
	 * Bundles common attributes and methods between {@link Guild} and {@link InviteGuild}
	 * @extends {BaseGuild}
	 * @abstract
	 */
	class AnonymousGuild extends BaseGuild {
	  constructor(client, data, immediatePatch = true) {
	    super(client, data);
	    if (immediatePatch) this._patch(data);
	  }

	  _patch(data) {
	    if ('features' in data) this.features = data.features;

	    if ('splash' in data) {
	      /**
	       * The hash of the guild invite splash image
	       * @type {?string}
	       */
	      this.splash = data.splash;
	    }

	    if ('banner' in data) {
	      /**
	       * The hash of the guild banner
	       * @type {?string}
	       */
	      this.banner = data.banner;
	    }

	    if ('description' in data) {
	      /**
	       * The description of the guild, if any
	       * @type {?string}
	       */
	      this.description = data.description;
	    }

	    if ('verification_level' in data) {
	      /**
	       * The verification level of the guild
	       * @type {GuildVerificationLevel}
	       */
	      this.verificationLevel = data.verification_level;
	    }

	    if ('vanity_url_code' in data) {
	      /**
	       * The vanity invite code of the guild, if any
	       * @type {?string}
	       */
	      this.vanityURLCode = data.vanity_url_code;
	    }

	    if ('nsfw_level' in data) {
	      /**
	       * The NSFW level of this guild
	       * @type {GuildNSFWLevel}
	       */
	      this.nsfwLevel = data.nsfw_level;
	    }

	    if ('premium_subscription_count' in data) {
	      /**
	       * The total number of boosts for this server
	       * @type {?number}
	       */
	      this.premiumSubscriptionCount = data.premium_subscription_count;
	    } else {
	      this.premiumSubscriptionCount ??= null;
	    }
	  }

	  /**
	   * The URL to this guild's banner.
	   * @param {ImageURLOptions} [options={}] Options for the image URL
	   * @returns {?string}
	   */
	  bannerURL(options = {}) {
	    return this.banner && this.client.rest.cdn.banner(this.id, this.banner, options);
	  }

	  /**
	   * The URL to this guild's invite splash image.
	   * @param {ImageURLOptions} [options={}] Options for the image URL
	   * @returns {?string}
	   */
	  splashURL(options = {}) {
	    return this.splash && this.client.rest.cdn.splash(this.id, this.splash, options);
	  }
	}

	AnonymousGuild_1 = AnonymousGuild;
	return AnonymousGuild_1;
}

var Emoji = {};

var hasRequiredEmoji$2;

function requireEmoji$2 () {
	if (hasRequiredEmoji$2) return Emoji;
	hasRequiredEmoji$2 = 1;

	const process = require$$0$d;
	const { formatEmoji } = requireDist$2();
	const { DiscordSnowflake } = /*@__PURE__*/ requireCjs$2();
	const Base = requireBase$2();

	let deprecationEmittedForURL = false;

	/**
	 * Represents an emoji, see {@link ApplicationEmoji}, {@link GuildEmoji} and {@link ReactionEmoji}.
	 * @extends {Base}
	 */
	let Emoji$1 = class Emoji extends Base {
	  constructor(client, emoji) {
	    super(client);
	    /**
	     * Whether or not the emoji is animated
	     * @type {?boolean}
	     */
	    this.animated = emoji.animated ?? null;

	    /**
	     * The emoji's name
	     * @type {?string}
	     */
	    this.name = emoji.name ?? null;

	    /**
	     * The emoji's id
	     * @type {?Snowflake}
	     */
	    this.id = emoji.id ?? null;
	  }

	  /**
	   * The identifier of this emoji, used for message reactions
	   * @type {string}
	   * @readonly
	   */
	  get identifier() {
	    if (this.id) return `${this.animated ? 'a:' : ''}${this.name}:${this.id}`;
	    return encodeURIComponent(this.name);
	  }

	  /**
	   * Returns a URL for the emoji or `null` if this is not a custom emoji.
	   * @param {BaseImageURLOptions} [options] Options for the image URL
	   * @returns {?string}
	   */
	  imageURL(options) {
	    return this.id && this.client.rest.cdn.emoji(this.id, options);
	  }

	  /**
	   * Returns a URL for the emoji or `null` if this is not a custom emoji.
	   * @type {?string}
	   * @readonly
	   * @deprecated Use {@link Emoji#imageURL} instead.
	   */
	  get url() {
	    if (!deprecationEmittedForURL) {
	      process.emitWarning('The Emoji#url getter is deprecated. Use Emoji#imageURL() instead.', 'DeprecationWarning');
	      deprecationEmittedForURL = true;
	    }

	    return this.imageURL({ extension: this.animated ? 'gif' : 'png' });
	  }

	  /**
	   * The timestamp the emoji was created at, or null if unicode
	   * @type {?number}
	   * @readonly
	   */
	  get createdTimestamp() {
	    return this.id && DiscordSnowflake.timestampFrom(this.id);
	  }

	  /**
	   * The time the emoji was created at, or null if unicode
	   * @type {?Date}
	   * @readonly
	   */
	  get createdAt() {
	    return this.id && new Date(this.createdTimestamp);
	  }

	  /**
	   * When concatenated with a string, this automatically returns the text required to form a graphical emoji on Discord
	   * instead of the Emoji object.
	   * @returns {string}
	   * @example
	   * // Send a custom emoji from a guild:
	   * const emoji = guild.emojis.cache.first();
	   * msg.channel.send(`Hello! ${emoji}`);
	   * @example
	   * // Send the emoji used in a reaction to the channel the reaction is part of
	   * reaction.message.channel.send(`The emoji used was: ${reaction.emoji}`);
	   */
	  toString() {
	    return this.id ? formatEmoji({ animated: this.animated, id: this.id, name: this.name }) : this.name;
	  }

	  toJSON() {
	    const json = super.toJSON({
	      guild: 'guildId',
	      createdTimestamp: true,
	      identifier: true,
	    });
	    json.imageURL = this.imageURL();
	    return json;
	  }
	};

	Emoji.Emoji = Emoji$1;
	return Emoji;
}

var WelcomeChannel_1;
var hasRequiredWelcomeChannel;

function requireWelcomeChannel () {
	if (hasRequiredWelcomeChannel) return WelcomeChannel_1;
	hasRequiredWelcomeChannel = 1;

	const Base = requireBase$2();
	const { Emoji } = requireEmoji$2();

	/**
	 * Represents a channel link in a guild's welcome screen.
	 * @extends {Base}
	 */
	class WelcomeChannel extends Base {
	  constructor(guild, data) {
	    super(guild.client);

	    /**
	     * The guild for this welcome channel
	     * @type {Guild|InviteGuild}
	     */
	    this.guild = guild;

	    /**
	     * The description of this welcome channel
	     * @type {string}
	     */
	    this.description = data.description;

	    /**
	     * The raw emoji data
	     * @type {Object}
	     * @private
	     */
	    this._emoji = {
	      name: data.emoji_name,
	      id: data.emoji_id,
	    };

	    /**
	     * The id of this welcome channel
	     * @type {Snowflake}
	     */
	    this.channelId = data.channel_id;
	  }

	  /**
	   * The channel of this welcome channel
	   * @type {?(TextChannel|NewsChannel|ForumChannel|MediaChannel)}
	   */
	  get channel() {
	    return this.client.channels.resolve(this.channelId);
	  }

	  /**
	   * The emoji of this welcome channel
	   * @type {GuildEmoji|Emoji}
	   */
	  get emoji() {
	    return this.client.emojis.resolve(this._emoji.id) ?? new Emoji(this.client, this._emoji);
	  }
	}

	WelcomeChannel_1 = WelcomeChannel;
	return WelcomeChannel_1;
}

var WelcomeScreen_1;
var hasRequiredWelcomeScreen;

function requireWelcomeScreen () {
	if (hasRequiredWelcomeScreen) return WelcomeScreen_1;
	hasRequiredWelcomeScreen = 1;

	const { Collection } = requireDist$3();
	const { GuildFeature } = requireV10$6();
	const Base = requireBase$2();
	const WelcomeChannel = requireWelcomeChannel();

	/**
	 * Represents a welcome screen.
	 * @extends {Base}
	 */
	class WelcomeScreen extends Base {
	  constructor(guild, data) {
	    super(guild.client);

	    /**
	     * The guild for this welcome screen
	     * @type {Guild}
	     */
	    this.guild = guild;

	    /**
	     * The description of this welcome screen
	     * @type {?string}
	     */
	    this.description = data.description ?? null;

	    /**
	     * Collection of welcome channels belonging to this welcome screen
	     * @type {Collection<Snowflake, WelcomeChannel>}
	     */
	    this.welcomeChannels = new Collection();

	    for (const channel of data.welcome_channels) {
	      const welcomeChannel = new WelcomeChannel(this.guild, channel);
	      this.welcomeChannels.set(welcomeChannel.channelId, welcomeChannel);
	    }
	  }

	  /**
	   * Whether the welcome screen is enabled on the guild
	   * @type {boolean}
	   */
	  get enabled() {
	    return this.guild.features.includes(GuildFeature.WelcomeScreenEnabled);
	  }
	}

	WelcomeScreen_1 = WelcomeScreen;
	return WelcomeScreen_1;
}

var InviteGuild_1;
var hasRequiredInviteGuild;

function requireInviteGuild () {
	if (hasRequiredInviteGuild) return InviteGuild_1;
	hasRequiredInviteGuild = 1;

	const AnonymousGuild = requireAnonymousGuild();
	const WelcomeScreen = requireWelcomeScreen();

	/**
	 * Represents a guild received from an invite, includes welcome screen data if available.
	 * @extends {AnonymousGuild}
	 */
	class InviteGuild extends AnonymousGuild {
	  constructor(client, data) {
	    super(client, data);

	    /**
	     * The welcome screen for this invite guild
	     * @type {?WelcomeScreen}
	     */
	    this.welcomeScreen = data.welcome_screen !== undefined ? new WelcomeScreen(this, data.welcome_screen) : null;
	  }
	}

	InviteGuild_1 = InviteGuild;
	return InviteGuild_1;
}

var Invite_1;
var hasRequiredInvite$2;

function requireInvite$2 () {
	if (hasRequiredInvite$2) return Invite_1;
	hasRequiredInvite$2 = 1;

	const { RouteBases, Routes, PermissionFlagsBits } = requireV10$6();
	const Base = requireBase$2();
	const { GuildScheduledEvent } = requireGuildScheduledEvent$2();
	const IntegrationApplication = requireIntegrationApplication();
	const InviteStageInstance = requireInviteStageInstance();
	const { DiscordjsError, ErrorCodes } = requireErrors$1();

	/**
	 * Represents an invitation to a guild channel.
	 * @extends {Base}
	 */
	class Invite extends Base {
	  /**
	   * A regular expression that matches Discord invite links.
	   * The `code` group property is present on the `exec()` result of this expression.
	   * @type {RegExp}
	   * @memberof Invite
	   */
	  static InvitesPattern = /discord(?:(?:app)?\.com\/invite|\.gg(?:\/invite)?)\/(?<code>[\w-]{2,255})/i;

	  constructor(client, data) {
	    super(client);

	    /**
	     * The type of this invite
	     * @type {InviteType}
	     */
	    this.type = data.type;

	    this._patch(data);
	  }

	  _patch(data) {
	    const InviteGuild = requireInviteGuild();
	    /**
	     * The guild the invite is for including welcome screen data if present
	     * @type {?(Guild|InviteGuild)}
	     */
	    this.guild ??= null;
	    if (data.guild) {
	      this.guild = this.client.guilds.resolve(data.guild.id) ?? new InviteGuild(this.client, data.guild);
	    }

	    if ('code' in data) {
	      /**
	       * The code for this invite
	       * @type {string}
	       */
	      this.code = data.code;
	    }

	    if ('approximate_presence_count' in data) {
	      /**
	       * The approximate number of online members of the guild this invite is for
	       * <info>This is only available when the invite was fetched through {@link Client#fetchInvite}.</info>
	       * @type {?number}
	       */
	      this.presenceCount = data.approximate_presence_count;
	    } else {
	      this.presenceCount ??= null;
	    }

	    if ('approximate_member_count' in data) {
	      /**
	       * The approximate total number of members of the guild this invite is for
	       * <info>This is only available when the invite was fetched through {@link Client#fetchInvite}.</info>
	       * @type {?number}
	       */
	      this.memberCount = data.approximate_member_count;
	    } else {
	      this.memberCount ??= null;
	    }

	    if ('temporary' in data) {
	      /**
	       * Whether or not this invite only grants temporary membership
	       * <info>This is only available when the invite was fetched through {@link GuildInviteManager#fetch}
	       * or created through {@link GuildInviteManager#create}.</info>
	       * @type {?boolean}
	       */
	      this.temporary = data.temporary ?? null;
	    } else {
	      this.temporary ??= null;
	    }

	    if ('max_age' in data) {
	      /**
	       * The maximum age of the invite, in seconds, 0 if never expires
	       * <info>This is only available when the invite was fetched through {@link GuildInviteManager#fetch}
	       * or created through {@link GuildInviteManager#create}.</info>
	       * @type {?number}
	       */
	      this.maxAge = data.max_age;
	    } else {
	      this.maxAge ??= null;
	    }

	    if ('uses' in data) {
	      /**
	       * How many times this invite has been used
	       * <info>This is only available when the invite was fetched through {@link GuildInviteManager#fetch}
	       * or created through {@link GuildInviteManager#create}.</info>
	       * @type {?number}
	       */
	      this.uses = data.uses;
	    } else {
	      this.uses ??= null;
	    }

	    if ('max_uses' in data) {
	      /**
	       * The maximum uses of this invite
	       * <info>This is only available when the invite was fetched through {@link GuildInviteManager#fetch}
	       * or created through {@link GuildInviteManager#create}.</info>
	       * @type {?number}
	       */
	      this.maxUses = data.max_uses;
	    } else {
	      this.maxUses ??= null;
	    }

	    if ('inviter_id' in data) {
	      /**
	       * The user's id who created this invite
	       * @type {?Snowflake}
	       */
	      this.inviterId = data.inviter_id;
	    } else {
	      this.inviterId ??= null;
	    }

	    if ('inviter' in data) {
	      this.client.users._add(data.inviter);
	      this.inviterId = data.inviter.id;
	    }

	    if ('target_user' in data) {
	      /**
	       * The user whose stream to display for this voice channel stream invite
	       * @type {?User}
	       */
	      this.targetUser = this.client.users._add(data.target_user);
	    } else {
	      this.targetUser ??= null;
	    }

	    if ('target_application' in data) {
	      /**
	       * The embedded application to open for this voice channel embedded application invite
	       * @type {?IntegrationApplication}
	       */
	      this.targetApplication = new IntegrationApplication(this.client, data.target_application);
	    } else {
	      this.targetApplication ??= null;
	    }

	    if ('target_type' in data) {
	      /**
	       * The target type
	       * @type {?InviteTargetType}
	       */
	      this.targetType = data.target_type;
	    } else {
	      this.targetType ??= null;
	    }

	    if ('channel_id' in data) {
	      /**
	       * The id of the channel this invite is for
	       * @type {?Snowflake}
	       */
	      this.channelId = data.channel_id;
	    }

	    if ('channel' in data) {
	      /**
	       * The channel this invite is for
	       * @type {?BaseChannel}
	       */
	      this.channel =
	        this.client.channels._add(data.channel, this.guild, { cache: false }) ??
	        this.client.channels.resolve(this.channelId);

	      this.channelId ??= data.channel.id;
	    }

	    if ('created_at' in data) {
	      /**
	       * The timestamp this invite was created at
	       * @type {?number}
	       */
	      this.createdTimestamp = Date.parse(data.created_at);
	    } else {
	      this.createdTimestamp ??= null;
	    }

	    if ('expires_at' in data) {
	      this._expiresTimestamp = data.expires_at && Date.parse(data.expires_at);
	    } else {
	      this._expiresTimestamp ??= null;
	    }

	    if ('stage_instance' in data) {
	      /**
	       * The stage instance data if there is a public {@link StageInstance} in the stage channel this invite is for
	       * @type {?InviteStageInstance}
	       * @deprecated
	       */
	      this.stageInstance = new InviteStageInstance(this.client, data.stage_instance, this.channel.id, this.guild.id);
	    } else {
	      this.stageInstance ??= null;
	    }

	    if ('guild_scheduled_event' in data) {
	      /**
	       * The guild scheduled event data if there is a {@link GuildScheduledEvent} in the channel this invite is for
	       * @type {?GuildScheduledEvent}
	       */
	      this.guildScheduledEvent = new GuildScheduledEvent(this.client, data.guild_scheduled_event);
	    } else {
	      this.guildScheduledEvent ??= null;
	    }
	  }

	  /**
	   * The time the invite was created at
	   * @type {?Date}
	   * @readonly
	   */
	  get createdAt() {
	    return this.createdTimestamp && new Date(this.createdTimestamp);
	  }

	  /**
	   * Whether the invite is deletable by the client user
	   * @type {boolean}
	   * @readonly
	   */
	  get deletable() {
	    const guild = this.guild;
	    if (!guild || !this.client.guilds.cache.has(guild.id)) return false;
	    if (!guild.members.me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);
	    return Boolean(
	      this.channel?.permissionsFor(this.client.user).has(PermissionFlagsBits.ManageChannels, false) ||
	        guild.members.me.permissions.has(PermissionFlagsBits.ManageGuild),
	    );
	  }

	  /**
	   * The timestamp the invite will expire at
	   * @type {?number}
	   * @readonly
	   */
	  get expiresTimestamp() {
	    return (
	      this._expiresTimestamp ??
	      (this.createdTimestamp && this.maxAge ? this.createdTimestamp + this.maxAge * 1_000 : null)
	    );
	  }

	  /**
	   * The time the invite will expire at
	   * @type {?Date}
	   * @readonly
	   */
	  get expiresAt() {
	    return this.expiresTimestamp && new Date(this.expiresTimestamp);
	  }

	  /**
	   * The user who created this invite
	   * @type {?User}
	   * @readonly
	   */
	  get inviter() {
	    return this.inviterId && this.client.users.resolve(this.inviterId);
	  }

	  /**
	   * The URL to the invite
	   * @type {string}
	   * @readonly
	   */
	  get url() {
	    return `${RouteBases.invite}/${this.code}`;
	  }

	  /**
	   * Deletes this invite.
	   * @param {string} [reason] Reason for deleting this invite
	   * @returns {Promise<Invite>}
	   */
	  async delete(reason) {
	    await this.client.rest.delete(Routes.invite(this.code), { reason });
	    return this;
	  }

	  /**
	   * When concatenated with a string, this automatically concatenates the invite's URL instead of the object.
	   * @returns {string}
	   * @example
	   * // Logs: Invite: https://discord.gg/A1b2C3
	   * console.log(`Invite: ${invite}`);
	   */
	  toString() {
	    return this.url;
	  }

	  toJSON() {
	    return super.toJSON({
	      url: true,
	      expiresTimestamp: true,
	      presenceCount: false,
	      memberCount: false,
	      uses: false,
	      channel: 'channelId',
	      inviter: 'inviterId',
	      guild: 'guildId',
	    });
	  }

	  valueOf() {
	    return this.code;
	  }
	}

	Invite_1 = Invite;
	return Invite_1;
}

var GuildTemplate_1;
var hasRequiredGuildTemplate;

function requireGuildTemplate () {
	if (hasRequiredGuildTemplate) return GuildTemplate_1;
	hasRequiredGuildTemplate = 1;

	const { setTimeout, clearTimeout } = require$$0$e;
	const { RouteBases, Routes } = requireV10$6();
	const Base = requireBase$2();
	const { resolveImage } = requireDataResolver();
	const Events = requireEvents();

	/**
	 * Represents the template for a guild.
	 * @extends {Base}
	 */
	class GuildTemplate extends Base {
	  /**
	   * A regular expression that matches guild template links.
	   * The `code` group property is present on the `exec()` result of this expression.
	   * @type {RegExp}
	   * @memberof GuildTemplate
	   */
	  static GuildTemplatesPattern = /discord(?:app)?\.(?:com\/template|new)\/(?<code>[\w-]{2,255})/i;

	  constructor(client, data) {
	    super(client);
	    this._patch(data);
	  }

	  _patch(data) {
	    if ('code' in data) {
	      /**
	       * The unique code of this template
	       * @type {string}
	       */
	      this.code = data.code;
	    }

	    if ('name' in data) {
	      /**
	       * The name of this template
	       * @type {string}
	       */
	      this.name = data.name;
	    }

	    if ('description' in data) {
	      /**
	       * The description of this template
	       * @type {?string}
	       */
	      this.description = data.description;
	    }

	    if ('usage_count' in data) {
	      /**
	       * The amount of times this template has been used
	       * @type {number}
	       */
	      this.usageCount = data.usage_count;
	    }

	    if ('creator_id' in data) {
	      /**
	       * The id of the user that created this template
	       * @type {Snowflake}
	       */
	      this.creatorId = data.creator_id;
	    }

	    if ('creator' in data) {
	      /**
	       * The user that created this template
	       * @type {User}
	       */
	      this.creator = this.client.users._add(data.creator);
	    }

	    if ('created_at' in data) {
	      /**
	       * The timestamp of when this template was created at
	       * @type {number}
	       */
	      this.createdTimestamp = Date.parse(data.created_at);
	    }

	    if ('updated_at' in data) {
	      /**
	       * The timestamp of when this template was last synced to the guild
	       * @type {number}
	       */
	      this.updatedTimestamp = Date.parse(data.updated_at);
	    }

	    if ('source_guild_id' in data) {
	      /**
	       * The id of the guild that this template belongs to
	       * @type {Snowflake}
	       */
	      this.guildId = data.source_guild_id;
	    }

	    if ('serialized_source_guild' in data) {
	      /**
	       * The data of the guild that this template would create
	       * @type {APIGuild}
	       */
	      this.serializedGuild = data.serialized_source_guild;
	    }

	    /**
	     * Whether this template has unsynced changes
	     * @type {?boolean}
	     */
	    this.unSynced = 'is_dirty' in data ? Boolean(data.is_dirty) : null;

	    return this;
	  }

	  /**
	   * Creates a guild based on this template.
	   * <warn>This is only available to bots in fewer than 10 guilds.</warn>
	   * @param {string} name The name of the guild
	   * @param {BufferResolvable|Base64Resolvable} [icon] The icon for the guild
	   * @returns {Promise<Guild>}
	   */
	  async createGuild(name, icon) {
	    const { client } = this;
	    const data = await client.rest.post(Routes.template(this.code), {
	      body: {
	        name,
	        icon: await resolveImage(icon),
	      },
	    });

	    if (client.guilds.cache.has(data.id)) return client.guilds.cache.get(data.id);

	    return new Promise(resolve => {
	      const resolveGuild = guild => {
	        client.off(Events.GuildCreate, handleGuild);
	        client.decrementMaxListeners();
	        resolve(guild);
	      };

	      const handleGuild = guild => {
	        if (guild.id === data.id) {
	          clearTimeout(timeout);
	          resolveGuild(guild);
	        }
	      };

	      client.incrementMaxListeners();
	      client.on(Events.GuildCreate, handleGuild);

	      const timeout = setTimeout(() => resolveGuild(client.guilds._add(data)), 10_000).unref();
	    });
	  }

	  /**
	   * Options used to edit a guild template.
	   * @typedef {Object} GuildTemplateEditOptions
	   * @property {string} [name] The name of this template
	   * @property {string} [description] The description of this template
	   */

	  /**
	   * Updates the metadata of this template.
	   * @param {GuildTemplateEditOptions} [options] Options for editing the template
	   * @returns {Promise<GuildTemplate>}
	   */
	  async edit({ name, description } = {}) {
	    const data = await this.client.rest.patch(Routes.guildTemplate(this.guildId, this.code), {
	      body: { name, description },
	    });
	    return this._patch(data);
	  }

	  /**
	   * Deletes this template.
	   * @returns {Promise<GuildTemplate>}
	   */
	  async delete() {
	    await this.client.rest.delete(Routes.guildTemplate(this.guildId, this.code));
	    return this;
	  }

	  /**
	   * Syncs this template to the current state of the guild.
	   * @returns {Promise<GuildTemplate>}
	   */
	  async sync() {
	    const data = await this.client.rest.put(Routes.guildTemplate(this.guildId, this.code));
	    return this._patch(data);
	  }

	  /**
	   * The time when this template was created at
	   * @type {Date}
	   * @readonly
	   */
	  get createdAt() {
	    return new Date(this.createdTimestamp);
	  }

	  /**
	   * The time when this template was last synced to the guild
	   * @type {Date}
	   * @readonly
	   */
	  get updatedAt() {
	    return new Date(this.updatedTimestamp);
	  }

	  /**
	   * The guild that this template belongs to
	   * @type {?Guild}
	   * @readonly
	   */
	  get guild() {
	    return this.client.guilds.resolve(this.guildId);
	  }

	  /**
	   * The URL of this template
	   * @type {string}
	   * @readonly
	   */
	  get url() {
	    return `${RouteBases.template}/${this.code}`;
	  }

	  /**
	   * When concatenated with a string, this automatically returns the template's code instead of the template object.
	   * @returns {string}
	   * @example
	   * // Logs: Template: FKvmczH2HyUf
	   * console.log(`Template: ${guildTemplate}!`);
	   */
	  toString() {
	    return this.code;
	  }
	}

	GuildTemplate_1 = GuildTemplate;
	return GuildTemplate_1;
}

var DataResolver;
var hasRequiredDataResolver;

function requireDataResolver () {
	if (hasRequiredDataResolver) return DataResolver;
	hasRequiredDataResolver = 1;

	const { Buffer } = require$$0$9;
	const fs = require$$1$b;
	const path = require$$2$4;
	const { fetch } = requireUndici();
	const { DiscordjsError, DiscordjsTypeError, ErrorCodes } = requireErrors$1();
	const Invite = requireInvite$2();

	/**
	 * Data that can be resolved to give an invite code. This can be:
	 * * An invite code
	 * * An invite URL
	 * @typedef {string} InviteResolvable
	 */

	/**
	 * Data that can be resolved to give a template code. This can be:
	 * * A template code
	 * * A template URL
	 * @typedef {string} GuildTemplateResolvable
	 */

	/**
	 * Resolves the string to a code based on the passed regex.
	 * @param {string} data The string to resolve
	 * @param {RegExp} regex The RegExp used to extract the code
	 * @returns {string}
	 * @private
	 */
	function resolveCode(data, regex) {
	  return regex.exec(data)?.[1] ?? data;
	}

	/**
	 * Resolves InviteResolvable to an invite code.
	 * @param {InviteResolvable} data The invite resolvable to resolve
	 * @returns {string}
	 * @private
	 */
	function resolveInviteCode(data) {
	  return resolveCode(data, Invite.InvitesPattern);
	}

	/**
	 * Resolves GuildTemplateResolvable to a template code.
	 * @param {GuildTemplateResolvable} data The template resolvable to resolve
	 * @returns {string}
	 * @private
	 */
	function resolveGuildTemplateCode(data) {
	  const GuildTemplate = requireGuildTemplate();
	  return resolveCode(data, GuildTemplate.GuildTemplatesPattern);
	}

	/**
	 * Data that can be resolved to give a Buffer. This can be:
	 * * A Buffer
	 * * The path to a local file
	 * * A URL <warn>When provided a URL, discord.js will fetch the URL internally in order to create a Buffer.
	 * This can pose a security risk when the URL has not been sanitized</warn>
	 * @typedef {string|Buffer} BufferResolvable
	 */

	/**
	 * @external Stream
	 * @see {@link https://nodejs.org/api/stream.html}
	 */

	/**
	 * @typedef {Object} ResolvedFile
	 * @property {Buffer} data Buffer containing the file data
	 * @property {string} [contentType] Content-Type of the file
	 * @private
	 */

	/**
	 * Resolves a BufferResolvable to a Buffer.
	 * @param {BufferResolvable|Stream} resource The buffer or stream resolvable to resolve
	 * @returns {Promise<ResolvedFile>}
	 * @private
	 */
	async function resolveFile(resource) {
	  if (Buffer.isBuffer(resource)) return { data: resource };

	  if (typeof resource[Symbol.asyncIterator] === 'function') {
	    const buffers = [];
	    for await (const data of resource) buffers.push(Buffer.from(data));
	    return { data: Buffer.concat(buffers) };
	  }

	  if (typeof resource === 'string') {
	    if (/^https?:\/\//.test(resource)) {
	      const res = await fetch(resource);
	      return { data: Buffer.from(await res.arrayBuffer()), contentType: res.headers.get('content-type') };
	    }

	    const file = path.resolve(resource);

	    const stats = await fs.stat(file);
	    if (!stats.isFile()) throw new DiscordjsError(ErrorCodes.FileNotFound, file);
	    return { data: await fs.readFile(file) };
	  }

	  throw new DiscordjsTypeError(ErrorCodes.ReqResourceType);
	}

	/**
	 * Data that resolves to give a Base64 string, typically for image uploading. This can be:
	 * * A Buffer
	 * * A base64 string
	 * @typedef {Buffer|string} Base64Resolvable
	 */

	/**
	 * Resolves a Base64Resolvable to a Base 64 image.
	 * @param {Base64Resolvable} data The base 64 resolvable you want to resolve
	 * @returns {?string}
	 * @private
	 */
	function resolveBase64(data) {
	  if (Buffer.isBuffer(data)) return `data:image/jpg;base64,${data.toString('base64')}`;
	  return data;
	}

	/**
	 * Resolves a Base64Resolvable, a string, or a BufferResolvable to a Base 64 image.
	 * @param {BufferResolvable|Base64Resolvable} image The image to be resolved
	 * @returns {Promise<?string>}
	 * @private
	 */
	async function resolveImage(image) {
	  if (!image) return null;
	  if (typeof image === 'string' && image.startsWith('data:')) {
	    return image;
	  }
	  const file = await resolveFile(image);
	  return resolveBase64(file.data);
	}

	DataResolver = { resolveCode, resolveInviteCode, resolveGuildTemplateCode, resolveImage, resolveBase64, resolveFile };
	return DataResolver;
}

var MessageFlagsBitField_1;
var hasRequiredMessageFlagsBitField;

function requireMessageFlagsBitField () {
	if (hasRequiredMessageFlagsBitField) return MessageFlagsBitField_1;
	hasRequiredMessageFlagsBitField = 1;

	const { MessageFlags } = requireV10$6();
	const BitField = requireBitField();

	/**
	 * Data structure that makes it easy to interact with a {@link Message#flags} bitfield.
	 * @extends {BitField}
	 */
	class MessageFlagsBitField extends BitField {
	  /**
	   * Numeric message flags.
	   * @type {MessageFlags}
	   * @memberof MessageFlagsBitField
	   */
	  static Flags = MessageFlags;
	}

	/**
	 * @name MessageFlagsBitField
	 * @kind constructor
	 * @memberof MessageFlagsBitField
	 * @param {BitFieldResolvable} [bits=0] Bit(s) to read from
	 */

	/**
	 * Bitfield of the packed bits
	 * @type {number}
	 * @name MessageFlagsBitField#bitfield
	 */

	MessageFlagsBitField_1 = MessageFlagsBitField;
	return MessageFlagsBitField_1;
}

var BaseInteraction_1;
var hasRequiredBaseInteraction;

function requireBaseInteraction () {
	if (hasRequiredBaseInteraction) return BaseInteraction_1;
	hasRequiredBaseInteraction = 1;

	const { deprecate } = require$$0$a;
	const { Collection } = requireDist$3();
	const { DiscordSnowflake } = /*@__PURE__*/ requireCjs$2();
	const { InteractionType, ApplicationCommandType, ComponentType } = requireV10$6();
	const Base = requireBase$2();
	const { SelectMenuTypes } = requireConstants$1();
	const PermissionsBitField = requirePermissionsBitField();

	/**
	 * Represents an interaction.
	 * @extends {Base}
	 * @abstract
	 */
	class BaseInteraction extends Base {
	  constructor(client, data) {
	    super(client);

	    /**
	     * The interaction's type
	     * @type {InteractionType}
	     */
	    this.type = data.type;

	    /**
	     * The interaction's id
	     * @type {Snowflake}
	     */
	    this.id = data.id;

	    /**
	     * The interaction's token
	     * @type {string}
	     * @name BaseInteraction#token
	     * @readonly
	     */
	    Object.defineProperty(this, 'token', { value: data.token });

	    /**
	     * The application's id
	     * @type {Snowflake}
	     */
	    this.applicationId = data.application_id;

	    /**
	     * The id of the channel this interaction was sent in
	     * @type {?Snowflake}
	     */
	    this.channelId = data.channel?.id ?? null;

	    /**
	     * The id of the guild this interaction was sent in
	     * @type {?Snowflake}
	     */
	    this.guildId = data.guild_id ?? null;

	    /**
	     * The user who created this interaction
	     * @type {User}
	     */
	    this.user = this.client.users._add(data.user ?? data.member.user);

	    /**
	     * If this interaction was sent in a guild, the member which sent it
	     * @type {?(GuildMember|APIInteractionGuildMember)}
	     */
	    this.member = data.member ? (this.guild?.members._add(data.member) ?? data.member) : null;

	    /**
	     * The version
	     * @type {number}
	     */
	    this.version = data.version;

	    /**
	     * Set of permissions the application or bot has within the channel the interaction was sent from
	     * @type {Readonly<PermissionsBitField>}
	     */
	    this.appPermissions = new PermissionsBitField(data.app_permissions).freeze();

	    /**
	     * The permissions of the member, if one exists, in the channel this interaction was executed in
	     * @type {?Readonly<PermissionsBitField>}
	     */
	    this.memberPermissions = data.member?.permissions
	      ? new PermissionsBitField(data.member.permissions).freeze()
	      : null;

	    /**
	     * The locale of the user who invoked this interaction
	     * @type {Locale}
	     */
	    this.locale = data.locale;

	    /**
	     * The preferred locale from the guild this interaction was sent in
	     * @type {?Locale}
	     */
	    this.guildLocale = data.guild_locale ?? null;

	    /**
	     * The entitlements for the invoking user, representing access to premium SKUs
	     * @type {Collection<Snowflake, Entitlement>}
	     */
	    this.entitlements = data.entitlements.reduce(
	      (coll, entitlement) => coll.set(entitlement.id, this.client.application.entitlements._add(entitlement)),
	      new Collection(),
	    );

	    /* eslint-disable max-len */
	    /**
	     * Mapping of installation contexts that the interaction was authorized for the related user or guild ids
	     * @type {APIAuthorizingIntegrationOwnersMap}
	     * @see {@link https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object-authorizing-integration-owners-object}
	     */
	    this.authorizingIntegrationOwners = data.authorizing_integration_owners;
	    /* eslint-enable max-len */

	    /**
	     * Context where the interaction was triggered from
	     * @type {?InteractionContextType}
	     */
	    this.context = data.context ?? null;
	  }

	  /**
	   * The timestamp the interaction was created at
	   * @type {number}
	   * @readonly
	   */
	  get createdTimestamp() {
	    return DiscordSnowflake.timestampFrom(this.id);
	  }

	  /**
	   * The time the interaction was created at
	   * @type {Date}
	   * @readonly
	   */
	  get createdAt() {
	    return new Date(this.createdTimestamp);
	  }

	  /**
	   * The channel this interaction was sent in
	   * @type {?TextBasedChannels}
	   * @readonly
	   */
	  get channel() {
	    return this.client.channels.cache.get(this.channelId) ?? null;
	  }

	  /**
	   * The guild this interaction was sent in
	   * @type {?Guild}
	   * @readonly
	   */
	  get guild() {
	    return this.client.guilds.cache.get(this.guildId) ?? null;
	  }

	  /**
	   * Indicates whether this interaction is received from a guild.
	   * @returns {boolean}
	   */
	  inGuild() {
	    return Boolean(this.guildId && this.member);
	  }

	  /**
	   * Indicates whether this interaction is received from a cached guild.
	   * @returns {boolean}
	   */
	  inCachedGuild() {
	    return Boolean(this.guild && this.member);
	  }

	  /**
	   * Indicates whether or not this interaction is received from an uncached guild.
	   * @returns {boolean}
	   */
	  inRawGuild() {
	    return Boolean(this.guildId && !this.guild && this.member);
	  }

	  /**
	   * Indicates whether this interaction is an {@link AutocompleteInteraction}
	   * @returns {boolean}
	   */
	  isAutocomplete() {
	    return this.type === InteractionType.ApplicationCommandAutocomplete;
	  }

	  /**
	   * Indicates whether this interaction is a {@link CommandInteraction}
	   * @returns {boolean}
	   */
	  isCommand() {
	    return this.type === InteractionType.ApplicationCommand;
	  }

	  /**
	   * Indicates whether this interaction is a {@link ChatInputCommandInteraction}.
	   * @returns {boolean}
	   */
	  isChatInputCommand() {
	    return this.type === InteractionType.ApplicationCommand && this.commandType === ApplicationCommandType.ChatInput;
	  }

	  /**
	   * Indicates whether this interaction is a {@link ContextMenuCommandInteraction}
	   * @returns {boolean}
	   */
	  isContextMenuCommand() {
	    return (
	      this.type === InteractionType.ApplicationCommand &&
	      [ApplicationCommandType.User, ApplicationCommandType.Message].includes(this.commandType)
	    );
	  }

	  /**
	   * Indicates whether this interaction is a {@link MessageComponentInteraction}
	   * @returns {boolean}
	   */
	  isMessageComponent() {
	    return this.type === InteractionType.MessageComponent;
	  }

	  /**
	   * Indicates whether this interaction is a {@link ModalSubmitInteraction}
	   * @returns {boolean}
	   */
	  isModalSubmit() {
	    return this.type === InteractionType.ModalSubmit;
	  }

	  /**
	   * Indicates whether this interaction is a {@link UserContextMenuCommandInteraction}
	   * @returns {boolean}
	   */
	  isUserContextMenuCommand() {
	    return this.isContextMenuCommand() && this.commandType === ApplicationCommandType.User;
	  }

	  /**
	   * Indicates whether this interaction is a {@link MessageContextMenuCommandInteraction}
	   * @returns {boolean}
	   */
	  isMessageContextMenuCommand() {
	    return this.isContextMenuCommand() && this.commandType === ApplicationCommandType.Message;
	  }

	  /**
	   * Indicates whether this interaction is a {@link ButtonInteraction}.
	   * @returns {boolean}
	   */
	  isButton() {
	    return this.type === InteractionType.MessageComponent && this.componentType === ComponentType.Button;
	  }

	  /**
	   * Indicates whether this interaction is a {@link StringSelectMenuInteraction}.
	   * @returns {boolean}
	   * @deprecated Use {@link BaseInteraction#isStringSelectMenu} instead.
	   */
	  isSelectMenu() {
	    return this.isStringSelectMenu();
	  }

	  /**
	   * Indicates whether this interaction is a select menu of any known type.
	   * @returns {boolean}
	   */
	  isAnySelectMenu() {
	    return this.type === InteractionType.MessageComponent && SelectMenuTypes.includes(this.componentType);
	  }

	  /**
	   * Indicates whether this interaction is a {@link StringSelectMenuInteraction}.
	   * @returns {boolean}
	   */
	  isStringSelectMenu() {
	    return this.type === InteractionType.MessageComponent && this.componentType === ComponentType.StringSelect;
	  }

	  /**
	   * Indicates whether this interaction is a {@link UserSelectMenuInteraction}
	   * @returns {boolean}
	   */
	  isUserSelectMenu() {
	    return this.type === InteractionType.MessageComponent && this.componentType === ComponentType.UserSelect;
	  }

	  /**
	   * Indicates whether this interaction is a {@link RoleSelectMenuInteraction}
	   * @returns {boolean}
	   */
	  isRoleSelectMenu() {
	    return this.type === InteractionType.MessageComponent && this.componentType === ComponentType.RoleSelect;
	  }

	  /**
	   * Indicates whether this interaction is a {@link ChannelSelectMenuInteraction}
	   * @returns {boolean}
	   */
	  isChannelSelectMenu() {
	    return this.type === InteractionType.MessageComponent && this.componentType === ComponentType.ChannelSelect;
	  }

	  /**
	   * Indicates whether this interaction is a {@link MentionableSelectMenuInteraction}
	   * @returns {boolean}
	   */
	  isMentionableSelectMenu() {
	    return this.type === InteractionType.MessageComponent && this.componentType === ComponentType.MentionableSelect;
	  }

	  /**
	   * Indicates whether this interaction can be replied to.
	   * @returns {boolean}
	   */
	  isRepliable() {
	    return ![InteractionType.Ping, InteractionType.ApplicationCommandAutocomplete].includes(this.type);
	  }
	}

	BaseInteraction.prototype.isSelectMenu = deprecate(
	  BaseInteraction.prototype.isSelectMenu,
	  'BaseInteraction#isSelectMenu() is deprecated. Use BaseInteraction#isStringSelectMenu() instead.',
	);

	BaseInteraction_1 = BaseInteraction;
	return BaseInteraction_1;
}

var Message = {};

var ApplicationRoleConnectionMetadata = {};

var hasRequiredApplicationRoleConnectionMetadata;

function requireApplicationRoleConnectionMetadata () {
	if (hasRequiredApplicationRoleConnectionMetadata) return ApplicationRoleConnectionMetadata;
	hasRequiredApplicationRoleConnectionMetadata = 1;

	/**
	 * Role connection metadata object for an application.
	 */
	let ApplicationRoleConnectionMetadata$1 = class ApplicationRoleConnectionMetadata {
	  constructor(data) {
	    /**
	     * The name of this metadata field
	     * @type {string}
	     */
	    this.name = data.name;

	    /**
	     * The name localizations for this metadata field
	     * @type {?Object<Locale, string>}
	     */
	    this.nameLocalizations = data.name_localizations ?? null;

	    /**
	     * The description of this metadata field
	     * @type {string}
	     */
	    this.description = data.description;

	    /**
	     * The description localizations for this metadata field
	     * @type {?Object<Locale, string>}
	     */
	    this.descriptionLocalizations = data.description_localizations ?? null;

	    /**
	     * The dictionary key for this metadata field
	     * @type {string}
	     */
	    this.key = data.key;

	    /**
	     * The type of this metadata field
	     * @type {ApplicationRoleConnectionMetadataType}
	     */
	    this.type = data.type;
	  }
	};

	ApplicationRoleConnectionMetadata.ApplicationRoleConnectionMetadata = ApplicationRoleConnectionMetadata$1;
	return ApplicationRoleConnectionMetadata;
}

var TeamMember_1;
var hasRequiredTeamMember;

function requireTeamMember () {
	if (hasRequiredTeamMember) return TeamMember_1;
	hasRequiredTeamMember = 1;

	const Base = requireBase$2();

	/**
	 * Represents a Client OAuth2 Application Team Member.
	 * @extends {Base}
	 */
	class TeamMember extends Base {
	  constructor(team, data) {
	    super(team.client);

	    /**
	     * The Team this member is part of
	     * @type {Team}
	     */
	    this.team = team;

	    this._patch(data);
	  }

	  _patch(data) {
	    if ('permissions' in data) {
	      /**
	       * The permissions this Team Member has with regard to the team
	       * @type {string[]}
	       * @deprecated Use {@link TeamMember#role} instead.
	       */
	      this.permissions = data.permissions;
	    }

	    if ('membership_state' in data) {
	      /**
	       * The permissions this Team Member has with regard to the team
	       * @type {TeamMemberMembershipState}
	       */
	      this.membershipState = data.membership_state;
	    }

	    if ('user' in data) {
	      /**
	       * The user for this Team Member
	       * @type {User}
	       */
	      this.user = this.client.users._add(data.user);
	    }

	    if ('role' in data) {
	      /**
	       * The role of this Team Member
	       * @type {TeamMemberRole}
	       */
	      this.role = data.role;
	    }
	  }

	  /**
	   * The Team Member's id
	   * @type {Snowflake}
	   * @readonly
	   */
	  get id() {
	    return this.user.id;
	  }

	  /**
	   * When concatenated with a string, this automatically returns the team member's mention instead of the
	   * TeamMember object.
	   * @returns {string}
	   * @example
	   * // Logs: Team Member's mention: <@123456789012345678>
	   * console.log(`Team Member's mention: ${teamMember}`);
	   */
	  toString() {
	    return this.user.toString();
	  }
	}

	TeamMember_1 = TeamMember;
	return TeamMember_1;
}

var Team_1;
var hasRequiredTeam;

function requireTeam () {
	if (hasRequiredTeam) return Team_1;
	hasRequiredTeam = 1;

	const { Collection } = requireDist$3();
	const { DiscordSnowflake } = /*@__PURE__*/ requireCjs$2();
	const Base = requireBase$2();
	const TeamMember = requireTeamMember();

	/**
	 * Represents a Client OAuth2 Application Team.
	 * @extends {Base}
	 */
	class Team extends Base {
	  constructor(client, data) {
	    super(client);
	    this._patch(data);
	  }

	  _patch(data) {
	    /**
	     * The Team's id
	     * @type {Snowflake}
	     */
	    this.id = data.id;

	    if ('name' in data) {
	      /**
	       * The name of the Team
	       * @type {string}
	       */
	      this.name = data.name;
	    }

	    if ('icon' in data) {
	      /**
	       * The Team's icon hash
	       * @type {?string}
	       */
	      this.icon = data.icon;
	    } else {
	      this.icon ??= null;
	    }

	    if ('owner_user_id' in data) {
	      /**
	       * The Team's owner id
	       * @type {?Snowflake}
	       */
	      this.ownerId = data.owner_user_id;
	    } else {
	      this.ownerId ??= null;
	    }
	    /**
	     * The Team's members
	     * @type {Collection<Snowflake, TeamMember>}
	     */
	    this.members = new Collection();

	    for (const memberData of data.members) {
	      const member = new TeamMember(this, memberData);
	      this.members.set(member.id, member);
	    }
	  }

	  /**
	   * The owner of this team
	   * @type {?TeamMember}
	   * @readonly
	   */
	  get owner() {
	    return this.members.get(this.ownerId) ?? null;
	  }

	  /**
	   * The timestamp the team was created at
	   * @type {number}
	   * @readonly
	   */
	  get createdTimestamp() {
	    return DiscordSnowflake.timestampFrom(this.id);
	  }

	  /**
	   * The time the team was created at
	   * @type {Date}
	   * @readonly
	   */
	  get createdAt() {
	    return new Date(this.createdTimestamp);
	  }

	  /**
	   * A link to the team's icon.
	   * @param {ImageURLOptions} [options={}] Options for the image URL
	   * @returns {?string}
	   */
	  iconURL(options = {}) {
	    return this.icon && this.client.rest.cdn.teamIcon(this.id, this.icon, options);
	  }

	  /**
	   * When concatenated with a string, this automatically returns the Team's name instead of the
	   * Team object.
	   * @returns {string}
	   * @example
	   * // Logs: Team name: My Team
	   * console.log(`Team name: ${team}`);
	   */
	  toString() {
	    return this.name;
	  }

	  toJSON() {
	    return super.toJSON({ createdTimestamp: true });
	  }
	}

	Team_1 = Team;
	return Team_1;
}

var ApplicationCommandPermissionsManager_1;
var hasRequiredApplicationCommandPermissionsManager;

function requireApplicationCommandPermissionsManager () {
	if (hasRequiredApplicationCommandPermissionsManager) return ApplicationCommandPermissionsManager_1;
	hasRequiredApplicationCommandPermissionsManager = 1;

	const { Collection } = requireDist$3();
	const { ApplicationCommandPermissionType, RESTJSONErrorCodes, Routes } = requireV10$6();
	const BaseManager = requireBaseManager();
	const { DiscordjsError, DiscordjsTypeError, ErrorCodes } = requireErrors$1();

	/**
	 * Manages API methods for permissions of Application Commands.
	 * @extends {BaseManager}
	 */
	class ApplicationCommandPermissionsManager extends BaseManager {
	  constructor(manager) {
	    super(manager.client);

	    /**
	     * The manager or command that this manager belongs to
	     * @type {ApplicationCommandManager|ApplicationCommand}
	     * @private
	     */
	    this.manager = manager;

	    /**
	     * The guild that this manager acts on
	     * @type {?Guild}
	     */
	    this.guild = manager.guild ?? null;

	    /**
	     * The id of the guild that this manager acts on
	     * @type {?Snowflake}
	     */
	    this.guildId = manager.guildId ?? manager.guild?.id ?? null;

	    /**
	     * The id of the command this manager acts on
	     * @type {?Snowflake}
	     */
	    this.commandId = manager.id ?? null;
	  }

	  /**
	   * The APIRouter path to the commands
	   * @param {Snowflake} guildId The guild's id to use in the path,
	   * @param {Snowflake} [commandId] The application command's id
	   * @returns {string}
	   * @private
	   */
	  permissionsPath(guildId, commandId) {
	    if (commandId) {
	      return Routes.applicationCommandPermissions(this.client.application.id, guildId, commandId);
	    }

	    return Routes.guildApplicationCommandsPermissions(this.client.application.id, guildId);
	  }

	  /* eslint-disable max-len */
	  /**
	   * The object returned when fetching permissions for an application command.
	   * @typedef {Object} ApplicationCommandPermissions
	   * @property {Snowflake} id The role, user, or channel's id. Can also be a
	   * {@link https://discord.com/developers/docs/interactions/application-commands#application-command-permissions-object-application-command-permissions-constants permission constant}.
	   * @property {ApplicationCommandPermissionType} type Whether this permission is for a role or a user
	   * @property {boolean} permission Whether the role or user has the permission to use this command
	   */
	  /* eslint-enable max-len */

	  /**
	   * Options for managing permissions for one or more Application Commands
	   * <warn>When passing these options to a manager where `guildId` is `null`,
	   * `guild` is a required parameter</warn>
	   * @typedef {Object} BaseApplicationCommandPermissionsOptions
	   * @property {GuildResolvable} [guild] The guild to modify / check permissions for
	   * <warn>Ignored when the manager has a non-null `guildId` property</warn>
	   * @property {ApplicationCommandResolvable} [command] The command to modify / check permissions for
	   * <warn>Ignored when the manager has a non-null `commandId` property</warn>
	   */

	  /**
	   * Fetches the permissions for one or multiple commands. Providing the client's id as the "command id" will fetch
	   * *only* the guild level permissions
	   * @param {BaseApplicationCommandPermissionsOptions} [options] Options used to fetch permissions
	   * @returns {Promise<ApplicationCommandPermissions[]|Collection<Snowflake, ApplicationCommandPermissions[]>>}
	   * @example
	   * // Fetch permissions for one command
	   * guild.commands.permissions.fetch({ command: '123456789012345678' })
	   *   .then(perms => console.log(`Fetched ${perms.length} overwrites`))
	   *   .catch(console.error);
	   * @example
	   * // Fetch permissions for all commands in a guild
	   * client.application.commands.permissions.fetch({ guild: '123456789012345678' })
	   *   .then(perms => console.log(`Fetched permissions for ${perms.size} commands`))
	   *   .catch(console.error);
	   * @example
	   * // Fetch guild level permissions
	   * guild.commands.permissions.fetch({ command: client.user.id })
	   *   .then(perms => console.log(`Fetched ${perms.length} guild level permissions`))
	   *   .catch(console.error);
	   */
	  async fetch({ guild, command } = {}) {
	    const { guildId, commandId } = this._validateOptions(guild, command);
	    if (commandId) {
	      const data = await this.client.rest.get(this.permissionsPath(guildId, commandId));
	      return data.permissions;
	    }

	    const data = await this.client.rest.get(this.permissionsPath(guildId));
	    return data.reduce((coll, perm) => coll.set(perm.id, perm.permissions), new Collection());
	  }

	  /**
	   * Options used to set permissions for one or more Application Commands in a guild
	   * <warn>Omitting the `command` parameter edits the guild wide permissions
	   * when the manager's `commandId` is `null`</warn>
	   * @typedef {BaseApplicationCommandPermissionsOptions} ApplicationCommandPermissionsEditOptions
	   * @property {ApplicationCommandPermissions[]} permissions The new permissions for the guild or overwrite
	   * @property {string} token The bearer token to use that authorizes the permission edit
	   */

	  /**
	   * Sets the permissions for the guild or a command overwrite.
	   * @param {ApplicationCommandPermissionsEditOptions} options Options used to set permissions
	   * @returns {Promise<ApplicationCommandPermissions[]|Collection<Snowflake, ApplicationCommandPermissions[]>>}
	   * @example
	   * // Set a permission overwrite for a command
	   * client.application.commands.permissions.set({
	   *  guild: '892455839386304532',
	   *  command: '123456789012345678',
	   *  token: 'TotallyRealToken',
	   *  permissions: [
	   *    {
	   *      id: '876543210987654321',
	   *      type: ApplicationCommandPermissionType.User,
	   *      permission: false,
	   *    },
	   * ]})
	   *   .then(console.log)
	   *   .catch(console.error);
	   * @example
	   * // Set the permissions used for the guild (commands without overwrites)
	   * guild.commands.permissions.set({ token: 'TotallyRealToken', permissions: [
	   *   {
	   *     id: '123456789012345678',
	   *     permissions: [{
	   *       id: '876543210987654321',
	   *       type: ApplicationCommandPermissionType.User,
	   *       permission: false,
	   *     }],
	   *   },
	   * ]})
	   *   .then(console.log)
	   *   .catch(console.error);
	   */
	  async set({ guild, command, permissions, token } = {}) {
	    if (!token) {
	      throw new DiscordjsError(ErrorCodes.ApplicationCommandPermissionsTokenMissing);
	    }
	    let { guildId, commandId } = this._validateOptions(guild, command);

	    if (!Array.isArray(permissions)) {
	      throw new DiscordjsTypeError(
	        ErrorCodes.InvalidType,
	        'permissions',
	        'Array of ApplicationCommandPermissions',
	        true,
	      );
	    }

	    if (!commandId) {
	      commandId = this.client.user.id;
	    }
	    const data = await this.client.rest.put(this.permissionsPath(guildId, commandId), {
	      body: { permissions },
	      auth: false,
	      headers: { Authorization: `Bearer ${token}` },
	    });
	    return data.permissions;
	  }

	  /**
	   * Add permissions to a command.
	   * @param {ApplicationCommandPermissionsEditOptions} options Options used to add permissions
	   * @returns {Promise<ApplicationCommandPermissions[]>}
	   * @example
	   * // Add a rule to block a role from using a command
	   * guild.commands.permissions.add({ command: '123456789012345678', token: 'TotallyRealToken', permissions: [
	   *   {
	   *     id: '876543211234567890',
	   *     type: ApplicationCommandPermissionType.Role,
	   *     permission: false
	   *   },
	   * ]})
	   *   .then(console.log)
	   *   .catch(console.error);
	   */
	  async add({ guild, command, permissions, token } = {}) {
	    if (!token) {
	      throw new DiscordjsError(ErrorCodes.ApplicationCommandPermissionsTokenMissing);
	    }
	    let { guildId, commandId } = this._validateOptions(guild, command);
	    if (!commandId) {
	      commandId = this.client.user.id;
	    }
	    if (!Array.isArray(permissions)) {
	      throw new DiscordjsTypeError(
	        ErrorCodes.InvalidType,
	        'permissions',
	        'Array of ApplicationCommandPermissions',
	        true,
	      );
	    }

	    let existingPermissions = [];
	    try {
	      existingPermissions = await this.fetch({ guild: guildId, command: commandId });
	    } catch (error) {
	      if (error.code !== RESTJSONErrorCodes.UnknownApplicationCommandPermissions) throw error;
	    }

	    const newPermissions = permissions.slice();
	    for (const existingPermission of existingPermissions) {
	      if (!newPermissions.some(newPermission => newPermission.id === existingPermission.id)) {
	        newPermissions.push(existingPermission);
	      }
	    }

	    return this.set({ guild: guildId, command: commandId, permissions: newPermissions, token });
	  }

	  /**
	   * A static snowflake that identifies the everyone role for application command permissions.
	   * It is the same as the guild id
	   * @typedef {Snowflake} RolePermissionConstant
	   */

	  /**
	   * A static snowflake that identifies the "all channels" entity for application command permissions.
	   * It will be the result of the calculation `guildId - 1`
	   * @typedef {Snowflake} ChannelPermissionConstant
	   */

	  /**
	   * Options used to remove permissions from a command
	   * <warn>Omitting the `command` parameter removes from the guild wide permissions
	   * when the managers `commandId` is `null`</warn>
	   * <warn>At least one of `users`, `roles`, and `channels` is required</warn>
	   * @typedef {BaseApplicationCommandPermissionsOptions} RemoveApplicationCommandPermissionsOptions
	   * @property {string} token The bearer token to use that authorizes the permission removal
	   * @property {UserResolvable[]} [users] The user(s) to remove
	   * @property {Array<RoleResolvable|RolePermissionConstant>} [roles] The role(s) to remove
	   * @property {Array<GuildChannelResolvable|ChannelPermissionConstant>} [channels] The channel(s) to remove
	   */

	  /**
	   * Remove permissions from a command.
	   * @param {RemoveApplicationCommandPermissionsOptions} options Options used to remove permissions
	   * @returns {Promise<ApplicationCommandPermissions[]>}
	   * @example
	   * // Remove a user permission from this command
	   * guild.commands.permissions.remove({
	   *  command: '123456789012345678', users: '876543210123456789', token: 'TotallyRealToken',
	   * })
	   *   .then(console.log)
	   *   .catch(console.error);
	   * @example
	   * // Remove multiple roles from this command
	   * guild.commands.permissions.remove({
	   *   command: '123456789012345678', roles: ['876543210123456789', '765432101234567890'], token: 'TotallyRealToken',
	   * })
	   *    .then(console.log)
	   *    .catch(console.error);
	   */
	  async remove({ guild, command, users, roles, channels, token } = {}) {
	    if (!token) {
	      throw new DiscordjsError(ErrorCodes.ApplicationCommandPermissionsTokenMissing);
	    }
	    let { guildId, commandId } = this._validateOptions(guild, command);
	    if (!commandId) {
	      commandId = this.client.user.id;
	    }

	    if (!users && !roles && !channels) {
	      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'users OR roles OR channels', 'Array or Resolvable', true);
	    }

	    let resolvedUserIds = [];
	    if (Array.isArray(users)) {
	      for (const user of users) {
	        const userId = this.client.users.resolveId(user);
	        if (!userId) throw new DiscordjsTypeError(ErrorCodes.InvalidElement, 'Array', 'users', user);
	        resolvedUserIds.push(userId);
	      }
	    }

	    let resolvedRoleIds = [];
	    if (Array.isArray(roles)) {
	      for (const role of roles) {
	        if (typeof role === 'string') {
	          resolvedRoleIds.push(role);
	          continue;
	        }
	        if (!this.guild) throw new DiscordjsError(ErrorCodes.GuildUncachedEntityResolve, 'roles');
	        const roleId = this.guild.roles.resolveId(role);
	        if (!roleId) throw new DiscordjsTypeError(ErrorCodes.InvalidElement, 'Array', 'users', role);
	        resolvedRoleIds.push(roleId);
	      }
	    }

	    let resolvedChannelIds = [];
	    if (Array.isArray(channels)) {
	      for (const channel of channels) {
	        if (typeof channel === 'string') {
	          resolvedChannelIds.push(channel);
	          continue;
	        }
	        if (!this.guild) throw new DiscordjsError(ErrorCodes.GuildUncachedEntityResolve, 'channels');
	        const channelId = this.guild.channels.resolveId(channel);
	        if (!channelId) throw new DiscordjsTypeError(ErrorCodes.InvalidElement, 'Array', 'channels', channel);
	        resolvedChannelIds.push(channelId);
	      }
	    }

	    let existing = [];
	    try {
	      existing = await this.fetch({ guild: guildId, command: commandId });
	    } catch (error) {
	      if (error.code !== RESTJSONErrorCodes.UnknownApplicationCommandPermissions) throw error;
	    }

	    const permissions = existing.filter(perm => {
	      switch (perm.type) {
	        case ApplicationCommandPermissionType.Role:
	          return !resolvedRoleIds.includes(perm.id);
	        case ApplicationCommandPermissionType.User:
	          return !resolvedUserIds.includes(perm.id);
	        case ApplicationCommandPermissionType.Channel:
	          return !resolvedChannelIds.includes(perm.id);
	      }
	      return true;
	    });

	    return this.set({ guild: guildId, command: commandId, permissions, token });
	  }

	  /**
	   * Options used to check the existence of permissions on a command
	   * <warn>The `command` parameter is not optional when the managers `commandId` is `null`</warn>
	   * @typedef {BaseApplicationCommandPermissionsOptions} HasApplicationCommandPermissionsOptions
	   * @property {ApplicationCommandPermissionIdResolvable} permissionId The entity to check if a permission exists for
	   * on this command.
	   * @property {ApplicationCommandPermissionType} [permissionType] Check for a specific type of permission
	   */

	  /**
	   * Check whether a permission exists for a user, role, or channel
	   * @param {HasApplicationCommandPermissionsOptions} options Options used to check permissions
	   * @returns {Promise<boolean>}
	   * @example
	   * guild.commands.permissions.has({ command: '123456789012345678', permissionId: '876543210123456789' })
	   *  .then(console.log)
	   *  .catch(console.error);
	   */
	  async has({ guild, command, permissionId, permissionType }) {
	    const { guildId, commandId } = this._validateOptions(guild, command);
	    if (!commandId) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'command', 'ApplicationCommandResolvable');

	    if (!permissionId) {
	      throw new DiscordjsTypeError(
	        ErrorCodes.InvalidType,
	        'permissionId',
	        'UserResolvable, RoleResolvable, ChannelResolvable, or Permission Constant',
	      );
	    }
	    let resolvedId = permissionId;
	    if (typeof permissionId !== 'string') {
	      resolvedId = this.client.users.resolveId(permissionId);
	      if (!resolvedId) {
	        if (!this.guild) throw new DiscordjsError(ErrorCodes.GuildUncachedEntityResolve, 'roles');
	        resolvedId = this.guild.roles.resolveId(permissionId);
	      }
	      if (!resolvedId) {
	        resolvedId = this.guild.channels.resolveId(permissionId);
	      }
	      if (!resolvedId) {
	        throw new DiscordjsTypeError(
	          ErrorCodes.InvalidType,
	          'permissionId',
	          'UserResolvable, RoleResolvable, ChannelResolvable, or Permission Constant',
	        );
	      }
	    }

	    let existing = [];
	    try {
	      existing = await this.fetch({ guild: guildId, command: commandId });
	    } catch (error) {
	      if (error.code !== RESTJSONErrorCodes.UnknownApplicationCommandPermissions) throw error;
	    }

	    // Check permission type if provided for the single edge case where a channel id is the same as the everyone role id
	    return existing.some(perm => perm.id === resolvedId && (permissionType ?? perm.type) === perm.type);
	  }

	  _validateOptions(guild, command) {
	    const guildId = this.guildId ?? this.client.guilds.resolveId(guild);
	    if (!guildId) throw new DiscordjsError(ErrorCodes.GlobalCommandPermissions);
	    let commandId = this.commandId;
	    if (command && !commandId) {
	      commandId = this.manager.resolveId?.(command);
	      if (!commandId && this.guild) {
	        commandId = this.guild.commands.resolveId(command);
	      }
	      commandId ??= this.client.application?.commands.resolveId(command);
	      if (!commandId) {
	        throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'command', 'ApplicationCommandResolvable', true);
	      }
	    }
	    return { guildId, commandId };
	  }
	}

	ApplicationCommandPermissionsManager_1 = ApplicationCommandPermissionsManager;

	/* eslint-disable max-len */
	/**
	 * Data that resolves to an id used for an application command permission
	 * @typedef {UserResolvable|RoleResolvable|GuildChannelResolvable|RolePermissionConstant|ChannelPermissionConstant} ApplicationCommandPermissionIdResolvable
	 */
	return ApplicationCommandPermissionsManager_1;
}

var ApplicationCommand_1;
var hasRequiredApplicationCommand;

function requireApplicationCommand () {
	if (hasRequiredApplicationCommand) return ApplicationCommand_1;
	hasRequiredApplicationCommand = 1;

	const { DiscordSnowflake } = /*@__PURE__*/ requireCjs$2();
	const { ApplicationCommandOptionType } = requireV10$6();
	const isEqual = requireFastDeepEqual();
	const Base = requireBase$2();
	const ApplicationCommandPermissionsManager = requireApplicationCommandPermissionsManager();
	const PermissionsBitField = requirePermissionsBitField();

	/**
	 * Represents an application command.
	 * @extends {Base}
	 */
	class ApplicationCommand extends Base {
	  constructor(client, data, guild, guildId) {
	    super(client);

	    /**
	     * The command's id
	     * @type {Snowflake}
	     */
	    this.id = data.id;

	    /**
	     * The parent application's id
	     * @type {Snowflake}
	     */
	    this.applicationId = data.application_id;

	    /**
	     * The guild this command is part of
	     * @type {?Guild}
	     */
	    this.guild = guild ?? null;

	    /**
	     * The guild's id this command is part of, this may be non-null when `guild` is `null` if the command
	     * was fetched from the `ApplicationCommandManager`
	     * @type {?Snowflake}
	     */
	    this.guildId = guild?.id ?? guildId ?? null;

	    /**
	     * The manager for permissions of this command on its guild or arbitrary guilds when the command is global
	     * @type {ApplicationCommandPermissionsManager}
	     */
	    this.permissions = new ApplicationCommandPermissionsManager(this);

	    /**
	     * The type of this application command
	     * @type {ApplicationCommandType}
	     */
	    this.type = data.type;

	    /**
	     * Whether this command is age-restricted (18+)
	     * @type {boolean}
	     */
	    this.nsfw = data.nsfw ?? false;

	    this._patch(data);
	  }

	  _patch(data) {
	    if ('name' in data) {
	      /**
	       * The name of this command
	       * @type {string}
	       */
	      this.name = data.name;
	    }

	    if ('name_localizations' in data) {
	      /**
	       * The name localizations for this command
	       * @type {?Object<Locale, string>}
	       */
	      this.nameLocalizations = data.name_localizations;
	    } else {
	      this.nameLocalizations ??= null;
	    }

	    if ('name_localized' in data) {
	      /**
	       * The localized name for this command
	       * @type {?string}
	       */
	      this.nameLocalized = data.name_localized;
	    } else {
	      this.nameLocalized ??= null;
	    }

	    if ('description' in data) {
	      /**
	       * The description of this command
	       * @type {string}
	       */
	      this.description = data.description;
	    }

	    if ('description_localizations' in data) {
	      /**
	       * The description localizations for this command
	       * @type {?Object<Locale, string>}
	       */
	      this.descriptionLocalizations = data.description_localizations;
	    } else {
	      this.descriptionLocalizations ??= null;
	    }

	    if ('description_localized' in data) {
	      /**
	       * The localized description for this command
	       * @type {?string}
	       */
	      this.descriptionLocalized = data.description_localized;
	    } else {
	      this.descriptionLocalized ??= null;
	    }

	    if ('options' in data) {
	      /**
	       * The options of this command
	       * @type {ApplicationCommandOption[]}
	       */
	      this.options = data.options.map(option => this.constructor.transformOption(option, true));
	    } else {
	      this.options ??= [];
	    }

	    if ('default_member_permissions' in data) {
	      /**
	       * The default bitfield used to determine whether this command be used in a guild
	       * @type {?Readonly<PermissionsBitField>}
	       */
	      this.defaultMemberPermissions = data.default_member_permissions
	        ? new PermissionsBitField(BigInt(data.default_member_permissions)).freeze()
	        : null;
	    } else {
	      this.defaultMemberPermissions ??= null;
	    }

	    if ('dm_permission' in data) {
	      /**
	       * Whether the command can be used in DMs
	       * <info>This property is always `null` on guild commands</info>
	       * @type {?boolean}
	       * @deprecated Use {@link ApplicationCommand#contexts} instead.
	       */
	      this.dmPermission = data.dm_permission;
	    } else {
	      this.dmPermission ??= null;
	    }

	    if ('integration_types' in data) {
	      /**
	       * Installation context(s) where the command is available
	       * <info>Only for globally-scoped commands</info>
	       * @type {?ApplicationIntegrationType[]}
	       */
	      this.integrationTypes = data.integration_types;
	    } else {
	      this.integrationTypes ??= null;
	    }

	    if ('contexts' in data) {
	      /**
	       * Interaction context(s) where the command can be used
	       * <info>Only for globally-scoped commands</info>
	       * @type {?InteractionContextType[]}
	       */
	      this.contexts = data.contexts;
	    } else {
	      this.contexts ??= null;
	    }

	    if ('version' in data) {
	      /**
	       * Autoincrementing version identifier updated during substantial record changes
	       * @type {Snowflake}
	       */
	      this.version = data.version;
	    }
	  }

	  /**
	   * The timestamp the command was created at
	   * @type {number}
	   * @readonly
	   */
	  get createdTimestamp() {
	    return DiscordSnowflake.timestampFrom(this.id);
	  }

	  /**
	   * The time the command was created at
	   * @type {Date}
	   * @readonly
	   */
	  get createdAt() {
	    return new Date(this.createdTimestamp);
	  }

	  /**
	   * The manager that this command belongs to
	   * @type {ApplicationCommandManager}
	   * @readonly
	   */
	  get manager() {
	    return (this.guild ?? this.client.application).commands;
	  }

	  /**
	   * Data for creating or editing an application command.
	   * @typedef {Object} ApplicationCommandData
	   * @property {string} name The name of the command, must be in all lowercase if type is
	   * {@link ApplicationCommandType.ChatInput}
	   * @property {Object<Locale, string>} [nameLocalizations] The localizations for the command name
	   * @property {string} description The description of the command, if type is {@link ApplicationCommandType.ChatInput}
	   * @property {boolean} [nsfw] Whether the command is age-restricted
	   * @property {Object<Locale, string>} [descriptionLocalizations] The localizations for the command description,
	   * if type is {@link ApplicationCommandType.ChatInput}
	   * @property {ApplicationCommandType} [type=ApplicationCommandType.ChatInput] The type of the command
	   * @property {ApplicationCommandOptionData[]} [options] Options for the command
	   * @property {?PermissionResolvable} [defaultMemberPermissions] The bitfield used to determine the default permissions
	   * a member needs in order to run the command
	   * @property {boolean} [dmPermission] Whether the command is enabled in DMs
	   */

	  /**
	   * An option for an application command or subcommand.
	   * <info>In addition to the listed properties, when used as a parameter,
	   * API style `snake_case` properties can be used for compatibility with generators like `@discordjs/builders`.</info>
	   * <warn>Note that providing a value for the `camelCase` counterpart for any `snake_case` property
	   * will discard the provided `snake_case` property.</warn>
	   * @typedef {Object} ApplicationCommandOptionData
	   * @property {ApplicationCommandOptionType} type The type of the option
	   * @property {string} name The name of the option
	   * @property {Object<Locale, string>} [nameLocalizations] The name localizations for the option
	   * @property {string} description The description of the option
	   * @property {Object<Locale, string>} [descriptionLocalizations] The description localizations for the option
	   * @property {boolean} [autocomplete] Whether the autocomplete interaction is enabled for a
	   * {@link ApplicationCommandOptionType.String}, {@link ApplicationCommandOptionType.Integer} or
	   * {@link ApplicationCommandOptionType.Number} option
	   * @property {boolean} [required] Whether the option is required
	   * @property {ApplicationCommandOptionChoiceData[]} [choices] The choices of the option for the user to pick from
	   * @property {ApplicationCommandOptionData[]} [options] Additional options if this option is a subcommand (group)
	   * @property {ChannelType[]} [channelTypes] When the option type is channel,
	   * the allowed types of channels that can be selected
	   * @property {number} [minValue] The minimum value for an {@link ApplicationCommandOptionType.Integer} or
	   * {@link ApplicationCommandOptionType.Number} option
	   * @property {number} [maxValue] The maximum value for an {@link ApplicationCommandOptionType.Integer} or
	   * {@link ApplicationCommandOptionType.Number} option
	   * @property {number} [minLength] The minimum length for an {@link ApplicationCommandOptionType.String} option
	   * (maximum of `6000`)
	   * @property {number} [maxLength] The maximum length for an {@link ApplicationCommandOptionType.String} option
	   * (maximum of `6000`)
	   */

	  /**
	   * @typedef {Object} ApplicationCommandOptionChoiceData
	   * @property {string} name The name of the choice
	   * @property {Object<Locale, string>} [nameLocalizations] The localized names for this choice
	   * @property {string|number} value The value of the choice
	   */

	  /**
	   * Edits this application command.
	   * @param {Partial<ApplicationCommandData>} data The data to update the command with
	   * @returns {Promise<ApplicationCommand>}
	   * @example
	   * // Edit the description of this command
	   * command.edit({
	   *   description: 'New description',
	   * })
	   *   .then(console.log)
	   *   .catch(console.error);
	   */
	  edit(data) {
	    return this.manager.edit(this, data, this.guildId);
	  }

	  /**
	   * Edits the name of this ApplicationCommand
	   * @param {string} name The new name of the command
	   * @returns {Promise<ApplicationCommand>}
	   */
	  setName(name) {
	    return this.edit({ name });
	  }

	  /**
	   * Edits the localized names of this ApplicationCommand
	   * @param {Object<Locale, string>} nameLocalizations The new localized names for the command
	   * @returns {Promise<ApplicationCommand>}
	   * @example
	   * // Edit the name localizations of this command
	   * command.setLocalizedNames({
	   *   'en-GB': 'test',
	   *   'pt-BR': 'teste',
	   * })
	   *   .then(console.log)
	   *   .catch(console.error)
	   */
	  setNameLocalizations(nameLocalizations) {
	    return this.edit({ nameLocalizations });
	  }

	  /**
	   * Edits the description of this ApplicationCommand
	   * @param {string} description The new description of the command
	   * @returns {Promise<ApplicationCommand>}
	   */
	  setDescription(description) {
	    return this.edit({ description });
	  }

	  /**
	   * Edits the localized descriptions of this ApplicationCommand
	   * @param {Object<Locale, string>} descriptionLocalizations The new localized descriptions for the command
	   * @returns {Promise<ApplicationCommand>}
	   * @example
	   * // Edit the description localizations of this command
	   * command.setDescriptionLocalizations({
	   *   'en-GB': 'A test command',
	   *   'pt-BR': 'Um comando de teste',
	   * })
	   *   .then(console.log)
	   *   .catch(console.error)
	   */
	  setDescriptionLocalizations(descriptionLocalizations) {
	    return this.edit({ descriptionLocalizations });
	  }

	  /**
	   * Edits the default member permissions of this ApplicationCommand
	   * @param {?PermissionResolvable} defaultMemberPermissions The default member permissions required to run this command
	   * @returns {Promise<ApplicationCommand>}
	   */
	  setDefaultMemberPermissions(defaultMemberPermissions) {
	    return this.edit({ defaultMemberPermissions });
	  }

	  /**
	   * Edits the DM permission of this ApplicationCommand
	   * @param {boolean} [dmPermission=true] Whether the command can be used in DMs
	   * @returns {Promise<ApplicationCommand>}
	   */
	  setDMPermission(dmPermission = true) {
	    return this.edit({ dmPermission });
	  }

	  /**
	   * Edits the options of this ApplicationCommand
	   * @param {ApplicationCommandOptionData[]} options The options to set for this command
	   * @returns {Promise<ApplicationCommand>}
	   */
	  setOptions(options) {
	    return this.edit({ options });
	  }

	  /**
	   * Deletes this command.
	   * @returns {Promise<ApplicationCommand>}
	   * @example
	   * // Delete this command
	   * command.delete()
	   *   .then(console.log)
	   *   .catch(console.error);
	   */
	  delete() {
	    return this.manager.delete(this, this.guildId);
	  }

	  /**
	   * Whether this command equals another command. It compares all properties, so for most operations
	   * it is advisable to just compare `command.id === command2.id` as it is much faster and is often
	   * what most users need.
	   * @param {ApplicationCommand|ApplicationCommandData|APIApplicationCommand} command The command to compare with
	   * @param {boolean} [enforceOptionOrder=false] Whether to strictly check that options and choices are in the same
	   * order in the array <info>The client may not always respect this ordering!</info>
	   * @returns {boolean}
	   */
	  equals(command, enforceOptionOrder = false) {
	    // If given an id, check if the id matches
	    if (command.id && this.id !== command.id) return false;

	    let defaultMemberPermissions = null;
	    let dmPermission = command.dmPermission ?? command.dm_permission;

	    if ('default_member_permissions' in command) {
	      defaultMemberPermissions = command.default_member_permissions
	        ? new PermissionsBitField(BigInt(command.default_member_permissions)).bitfield
	        : null;
	    }

	    if ('defaultMemberPermissions' in command) {
	      defaultMemberPermissions =
	        command.defaultMemberPermissions !== null
	          ? new PermissionsBitField(command.defaultMemberPermissions).bitfield
	          : null;
	    }

	    // Check top level parameters
	    if (
	      command.name !== this.name ||
	      ('description' in command && command.description !== this.description) ||
	      ('version' in command && command.version !== this.version) ||
	      (command.type && command.type !== this.type) ||
	      ('nsfw' in command && command.nsfw !== this.nsfw) ||
	      // Future proof for options being nullable
	      // TODO: remove ?? 0 on each when nullable
	      (command.options?.length ?? 0) !== (this.options?.length ?? 0) ||
	      defaultMemberPermissions !== (this.defaultMemberPermissions?.bitfield ?? null) ||
	      (dmPermission !== undefined && dmPermission !== this.dmPermission) ||
	      !isEqual(command.nameLocalizations ?? command.name_localizations ?? {}, this.nameLocalizations ?? {}) ||
	      !isEqual(
	        command.descriptionLocalizations ?? command.description_localizations ?? {},
	        this.descriptionLocalizations ?? {},
	      ) ||
	      !isEqual(command.integrationTypes ?? command.integration_types ?? [], this.integrationTypes ?? []) ||
	      !isEqual(command.contexts ?? [], this.contexts ?? [])
	    ) {
	      return false;
	    }

	    if (command.options) {
	      return this.constructor.optionsEqual(this.options, command.options, enforceOptionOrder);
	    }
	    return true;
	  }

	  /**
	   * Recursively checks that all options for an {@link ApplicationCommand} are equal to the provided options.
	   * In most cases it is better to compare using {@link ApplicationCommand#equals}
	   * @param {ApplicationCommandOptionData[]} existing The options on the existing command,
	   * should be {@link ApplicationCommand#options}
	   * @param {ApplicationCommandOptionData[]|APIApplicationCommandOption[]} options The options to compare against
	   * @param {boolean} [enforceOptionOrder=false] Whether to strictly check that options and choices are in the same
	   * order in the array <info>The client may not always respect this ordering!</info>
	   * @returns {boolean}
	   */
	  static optionsEqual(existing, options, enforceOptionOrder = false) {
	    if (existing.length !== options.length) return false;
	    if (enforceOptionOrder) {
	      return existing.every((option, index) => this._optionEquals(option, options[index], enforceOptionOrder));
	    }
	    const newOptions = new Map(options.map(option => [option.name, option]));
	    for (const option of existing) {
	      const foundOption = newOptions.get(option.name);
	      if (!foundOption || !this._optionEquals(option, foundOption)) return false;
	    }
	    return true;
	  }

	  /**
	   * Checks that an option for an {@link ApplicationCommand} is equal to the provided option
	   * In most cases it is better to compare using {@link ApplicationCommand#equals}
	   * @param {ApplicationCommandOptionData} existing The option on the existing command,
	   * should be from {@link ApplicationCommand#options}
	   * @param {ApplicationCommandOptionData|APIApplicationCommandOption} option The option to compare against
	   * @param {boolean} [enforceOptionOrder=false] Whether to strictly check that options or choices are in the same
	   * order in their array <info>The client may not always respect this ordering!</info>
	   * @returns {boolean}
	   * @private
	   */
	  static _optionEquals(existing, option, enforceOptionOrder = false) {
	    if (
	      option.name !== existing.name ||
	      option.type !== existing.type ||
	      option.description !== existing.description ||
	      option.autocomplete !== existing.autocomplete ||
	      (option.required ??
	        ([ApplicationCommandOptionType.Subcommand, ApplicationCommandOptionType.SubcommandGroup].includes(option.type)
	          ? undefined
	          : false)) !== existing.required ||
	      option.choices?.length !== existing.choices?.length ||
	      option.options?.length !== existing.options?.length ||
	      (option.channelTypes ?? option.channel_types)?.length !== existing.channelTypes?.length ||
	      (option.minValue ?? option.min_value) !== existing.minValue ||
	      (option.maxValue ?? option.max_value) !== existing.maxValue ||
	      (option.minLength ?? option.min_length) !== existing.minLength ||
	      (option.maxLength ?? option.max_length) !== existing.maxLength ||
	      !isEqual(option.nameLocalizations ?? option.name_localizations ?? {}, existing.nameLocalizations ?? {}) ||
	      !isEqual(
	        option.descriptionLocalizations ?? option.description_localizations ?? {},
	        existing.descriptionLocalizations ?? {},
	      )
	    ) {
	      return false;
	    }

	    if (existing.choices) {
	      if (
	        enforceOptionOrder &&
	        !existing.choices.every(
	          (choice, index) =>
	            choice.name === option.choices[index].name &&
	            choice.value === option.choices[index].value &&
	            isEqual(
	              choice.nameLocalizations ?? {},
	              option.choices[index].nameLocalizations ?? option.choices[index].name_localizations ?? {},
	            ),
	        )
	      ) {
	        return false;
	      }
	      if (!enforceOptionOrder) {
	        const newChoices = new Map(option.choices.map(choice => [choice.name, choice]));
	        for (const choice of existing.choices) {
	          const foundChoice = newChoices.get(choice.name);
	          if (!foundChoice || foundChoice.value !== choice.value) return false;
	        }
	      }
	    }

	    if (existing.channelTypes) {
	      const newTypes = option.channelTypes ?? option.channel_types;
	      for (const type of existing.channelTypes) {
	        if (!newTypes.includes(type)) return false;
	      }
	    }

	    if (existing.options) {
	      return this.optionsEqual(existing.options, option.options, enforceOptionOrder);
	    }
	    return true;
	  }

	  /**
	   * An option for an application command or subcommand.
	   * @typedef {Object} ApplicationCommandOption
	   * @property {ApplicationCommandOptionType} type The type of the option
	   * @property {string} name The name of the option
	   * @property {Object<Locale, string>} [nameLocalizations] The localizations for the option name
	   * @property {string} [nameLocalized] The localized name for this option
	   * @property {string} description The description of the option
	   * @property {Object<Locale, string>} [descriptionLocalizations] The localizations for the option description
	   * @property {string} [descriptionLocalized] The localized description for this option
	   * @property {boolean} [required] Whether the option is required
	   * @property {boolean} [autocomplete] Whether the autocomplete interaction is enabled for a
	   * {@link ApplicationCommandOptionType.String}, {@link ApplicationCommandOptionType.Integer} or
	   * {@link ApplicationCommandOptionType.Number} option
	   * @property {ApplicationCommandOptionChoice[]} [choices] The choices of the option for the user to pick from
	   * @property {ApplicationCommandOption[]} [options] Additional options if this option is a subcommand (group)
	   * @property {ApplicationCommandOptionAllowedChannelTypes[]} [channelTypes] When the option type is channel,
	   * the allowed types of channels that can be selected
	   * @property {number} [minValue] The minimum value for an {@link ApplicationCommandOptionType.Integer} or
	   * {@link ApplicationCommandOptionType.Number} option
	   * @property {number} [maxValue] The maximum value for an {@link ApplicationCommandOptionType.Integer} or
	   * {@link ApplicationCommandOptionType.Number} option
	   * @property {number} [minLength] The minimum length for an {@link ApplicationCommandOptionType.String} option
	   * (maximum of `6000`)
	   * @property {number} [maxLength] The maximum length for an {@link ApplicationCommandOptionType.String} option
	   * (maximum of `6000`)
	   */

	  /**
	   * A choice for an application command option.
	   * @typedef {Object} ApplicationCommandOptionChoice
	   * @property {string} name The name of the choice
	   * @property {?string} nameLocalized The localized name of the choice in the provided locale, if any
	   * @property {?Object<string, string>} [nameLocalizations] The localized names for this choice
	   * @property {string|number} value The value of the choice
	   */

	  /**
	   * Transforms an {@link ApplicationCommandOptionData} object into something that can be used with the API.
	   * @param {ApplicationCommandOptionData|ApplicationCommandOption} option The option to transform
	   * @param {boolean} [received] Whether this option has been received from Discord
	   * @returns {APIApplicationCommandOption}
	   * @private
	   */
	  static transformOption(option, received) {
	    const channelTypesKey = received ? 'channelTypes' : 'channel_types';
	    const minValueKey = received ? 'minValue' : 'min_value';
	    const maxValueKey = received ? 'maxValue' : 'max_value';
	    const minLengthKey = received ? 'minLength' : 'min_length';
	    const maxLengthKey = received ? 'maxLength' : 'max_length';
	    const nameLocalizationsKey = received ? 'nameLocalizations' : 'name_localizations';
	    const nameLocalizedKey = received ? 'nameLocalized' : 'name_localized';
	    const descriptionLocalizationsKey = received ? 'descriptionLocalizations' : 'description_localizations';
	    const descriptionLocalizedKey = received ? 'descriptionLocalized' : 'description_localized';
	    return {
	      type: option.type,
	      name: option.name,
	      [nameLocalizationsKey]: option.nameLocalizations ?? option.name_localizations,
	      [nameLocalizedKey]: option.nameLocalized ?? option.name_localized,
	      description: option.description,
	      [descriptionLocalizationsKey]: option.descriptionLocalizations ?? option.description_localizations,
	      [descriptionLocalizedKey]: option.descriptionLocalized ?? option.description_localized,
	      required:
	        option.required ??
	        (option.type === ApplicationCommandOptionType.Subcommand ||
	        option.type === ApplicationCommandOptionType.SubcommandGroup
	          ? undefined
	          : false),
	      autocomplete: option.autocomplete,
	      choices: option.choices?.map(choice => ({
	        name: choice.name,
	        [nameLocalizedKey]: choice.nameLocalized ?? choice.name_localized,
	        [nameLocalizationsKey]: choice.nameLocalizations ?? choice.name_localizations,
	        value: choice.value,
	      })),
	      options: option.options?.map(opt => this.transformOption(opt, received)),
	      [channelTypesKey]: option.channelTypes ?? option.channel_types,
	      [minValueKey]: option.minValue ?? option.min_value,
	      [maxValueKey]: option.maxValue ?? option.max_value,
	      [minLengthKey]: option.minLength ?? option.min_length,
	      [maxLengthKey]: option.maxLength ?? option.max_length,
	    };
	  }
	}

	ApplicationCommand_1 = ApplicationCommand;

	/* eslint-disable max-len */
	/**
	 * @external ApplicationCommandOptionAllowedChannelTypes
	 * @see {@link https://discord.js.org/docs/packages/builders/stable/ApplicationCommandOptionAllowedChannelTypes:TypeAlias}
	 */
	return ApplicationCommand_1;
}

var ApplicationCommandManager_1;
var hasRequiredApplicationCommandManager;

function requireApplicationCommandManager () {
	if (hasRequiredApplicationCommandManager) return ApplicationCommandManager_1;
	hasRequiredApplicationCommandManager = 1;

	const { Collection } = requireDist$3();
	const { makeURLSearchParams } = requireWeb();
	const { isJSONEncodable } = requireDist$7();
	const { Routes } = requireV10$6();
	const ApplicationCommandPermissionsManager = requireApplicationCommandPermissionsManager();
	const CachedManager = requireCachedManager();
	const { DiscordjsTypeError, ErrorCodes } = requireErrors$1();
	const ApplicationCommand = requireApplicationCommand();
	const PermissionsBitField = requirePermissionsBitField();

	/**
	 * Manages API methods for application commands and stores their cache.
	 * @extends {CachedManager}
	 */
	class ApplicationCommandManager extends CachedManager {
	  constructor(client, iterable) {
	    super(client, ApplicationCommand, iterable);

	    /**
	     * The manager for permissions of arbitrary commands on arbitrary guilds
	     * @type {ApplicationCommandPermissionsManager}
	     */
	    this.permissions = new ApplicationCommandPermissionsManager(this);
	  }

	  /**
	   * The cache of this manager
	   * @type {Collection<Snowflake, ApplicationCommand>}
	   * @name ApplicationCommandManager#cache
	   */

	  _add(data, cache, guildId) {
	    return super._add(data, cache, { extras: [this.guild, guildId] });
	  }

	  /**
	   * The APIRouter path to the commands
	   * @param {Snowflake} [options.id] The application command's id
	   * @param {Snowflake} [options.guildId] The guild's id to use in the path,
	   * ignored when using a {@link GuildApplicationCommandManager}
	   * @returns {string}
	   * @private
	   */
	  commandPath({ id, guildId } = {}) {
	    if (this.guild ?? guildId) {
	      if (id) {
	        return Routes.applicationGuildCommand(this.client.application.id, this.guild?.id ?? guildId, id);
	      }

	      return Routes.applicationGuildCommands(this.client.application.id, this.guild?.id ?? guildId);
	    }

	    if (id) {
	      return Routes.applicationCommand(this.client.application.id, id);
	    }

	    return Routes.applicationCommands(this.client.application.id);
	  }

	  /**
	   * Data that resolves to give an ApplicationCommand object. This can be:
	   * * An ApplicationCommand object
	   * * A Snowflake
	   * @typedef {ApplicationCommand|Snowflake} ApplicationCommandResolvable
	   */

	  /**
	   * Data that resolves to the data of an ApplicationCommand
	   * @typedef {ApplicationCommandData|APIApplicationCommand} ApplicationCommandDataResolvable
	   */

	  /**
	   * Options used to fetch data from Discord
	   * @typedef {Object} BaseFetchOptions
	   * @property {boolean} [cache=true] Whether to cache the fetched data if it wasn't already
	   * @property {boolean} [force=false] Whether to skip the cache check and request the API
	   */

	  /**
	   * Options used to fetch Application Commands from Discord
	   * @typedef {BaseFetchOptions} FetchApplicationCommandOptions
	   * @property {Snowflake} [guildId] The guild's id to fetch commands for, for when the guild is not cached
	   * @property {LocaleString} [locale] The locale to use when fetching this command
	   * @property {boolean} [withLocalizations] Whether to fetch all localization data
	   */

	  /**
	   * Obtains one or multiple application commands from Discord, or the cache if it's already available.
	   * @param {Snowflake|FetchApplicationCommandOptions} [id] Options for fetching application command(s)
	   * @param {FetchApplicationCommandOptions} [options] Additional options for this fetch
	   * @returns {Promise<ApplicationCommand|Collection<Snowflake, ApplicationCommand>>}
	   * @example
	   * // Fetch a single command
	   * client.application.commands.fetch('123456789012345678')
	   *   .then(command => console.log(`Fetched command ${command.name}`))
	   *   .catch(console.error);
	   * @example
	   * // Fetch all commands
	   * guild.commands.fetch()
	   *   .then(commands => console.log(`Fetched ${commands.size} commands`))
	   *   .catch(console.error);
	   */
	  async fetch(id, { guildId, cache = true, force = false, locale, withLocalizations } = {}) {
	    if (typeof id === 'object') {
	      ({ guildId, cache = true, locale, withLocalizations } = id);
	    } else if (id) {
	      if (!force) {
	        const existing = this.cache.get(id);
	        if (existing) return existing;
	      }
	      const command = await this.client.rest.get(this.commandPath({ id, guildId }));
	      return this._add(command, cache);
	    }

	    const data = await this.client.rest.get(this.commandPath({ guildId }), {
	      headers: {
	        'X-Discord-Locale': locale,
	      },
	      query: makeURLSearchParams({ with_localizations: withLocalizations }),
	    });
	    return data.reduce((coll, command) => coll.set(command.id, this._add(command, cache, guildId)), new Collection());
	  }

	  /**
	   * Creates an application command.
	   * @param {ApplicationCommandDataResolvable} command The command
	   * @param {Snowflake} [guildId] The guild's id to create this command in,
	   * ignored when using a {@link GuildApplicationCommandManager}
	   * @returns {Promise<ApplicationCommand>}
	   * @example
	   * // Create a new command
	   * client.application.commands.create({
	   *   name: 'test',
	   *   description: 'A test command',
	   * })
	   *   .then(console.log)
	   *   .catch(console.error);
	   */
	  async create(command, guildId) {
	    const data = await this.client.rest.post(this.commandPath({ guildId }), {
	      body: this.constructor.transformCommand(command),
	    });
	    return this._add(data, true, guildId);
	  }

	  /**
	   * Sets all the commands for this application or guild.
	   * @param {ApplicationCommandDataResolvable[]} commands The commands
	   * @param {Snowflake} [guildId] The guild's id to create the commands in,
	   * ignored when using a {@link GuildApplicationCommandManager}
	   * @returns {Promise<Collection<Snowflake, ApplicationCommand>>}
	   * @example
	   * // Set all commands to just this one
	   * client.application.commands.set([
	   *   {
	   *     name: 'test',
	   *     description: 'A test command',
	   *   },
	   * ])
	   *   .then(console.log)
	   *   .catch(console.error);
	   * @example
	   * // Remove all commands
	   * guild.commands.set([])
	   *   .then(console.log)
	   *   .catch(console.error);
	   */
	  async set(commands, guildId) {
	    const data = await this.client.rest.put(this.commandPath({ guildId }), {
	      body: commands.map(command => this.constructor.transformCommand(command)),
	    });
	    return data.reduce(
	      (collection, command) => collection.set(command.id, this._add(command, true, guildId)),
	      new Collection(),
	    );
	  }

	  /**
	   * Edits an application command.
	   * @param {ApplicationCommandResolvable} command The command to edit
	   * @param {Partial<ApplicationCommandDataResolvable>} data The data to update the command with
	   * @param {Snowflake} [guildId] The guild's id where the command registered,
	   * ignored when using a {@link GuildApplicationCommandManager}
	   * @returns {Promise<ApplicationCommand>}
	   * @example
	   * // Edit an existing command
	   * client.application.commands.edit('123456789012345678', {
	   *   description: 'New description',
	   * })
	   *   .then(console.log)
	   *   .catch(console.error);
	   */
	  async edit(command, data, guildId) {
	    const id = this.resolveId(command);
	    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'command', 'ApplicationCommandResolvable');

	    const patched = await this.client.rest.patch(this.commandPath({ id, guildId }), {
	      body: this.constructor.transformCommand(data),
	    });
	    return this._add(patched, true, guildId);
	  }

	  /**
	   * Deletes an application command.
	   * @param {ApplicationCommandResolvable} command The command to delete
	   * @param {Snowflake} [guildId] The guild's id where the command is registered,
	   * ignored when using a {@link GuildApplicationCommandManager}
	   * @returns {Promise<?ApplicationCommand>}
	   * @example
	   * // Delete a command
	   * guild.commands.delete('123456789012345678')
	   *   .then(console.log)
	   *   .catch(console.error);
	   */
	  async delete(command, guildId) {
	    const id = this.resolveId(command);
	    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'command', 'ApplicationCommandResolvable');

	    await this.client.rest.delete(this.commandPath({ id, guildId }));

	    const cached = this.cache.get(id);
	    this.cache.delete(id);
	    return cached ?? null;
	  }

	  /**
	   * Transforms an {@link ApplicationCommandData} object into something that can be used with the API.
	   * @param {ApplicationCommandDataResolvable} command The command to transform
	   * @returns {APIApplicationCommand}
	   * @private
	   */
	  static transformCommand(command) {
	    if (isJSONEncodable(command)) return command.toJSON();

	    let default_member_permissions;

	    if ('default_member_permissions' in command) {
	      default_member_permissions = command.default_member_permissions
	        ? new PermissionsBitField(BigInt(command.default_member_permissions)).bitfield.toString()
	        : command.default_member_permissions;
	    }

	    if ('defaultMemberPermissions' in command) {
	      default_member_permissions =
	        command.defaultMemberPermissions !== null
	          ? new PermissionsBitField(command.defaultMemberPermissions).bitfield.toString()
	          : command.defaultMemberPermissions;
	    }

	    return {
	      name: command.name,
	      name_localizations: command.nameLocalizations ?? command.name_localizations,
	      description: command.description,
	      nsfw: command.nsfw,
	      description_localizations: command.descriptionLocalizations ?? command.description_localizations,
	      type: command.type,
	      options: command.options?.map(option => ApplicationCommand.transformOption(option)),
	      default_member_permissions,
	      dm_permission: command.dmPermission ?? command.dm_permission,
	      integration_types: command.integrationTypes ?? command.integration_types,
	      contexts: command.contexts,
	    };
	  }
	}

	ApplicationCommandManager_1 = ApplicationCommandManager;
	return ApplicationCommandManager_1;
}

var ApplicationEmoji_1;
var hasRequiredApplicationEmoji;

function requireApplicationEmoji () {
	if (hasRequiredApplicationEmoji) return ApplicationEmoji_1;
	hasRequiredApplicationEmoji = 1;

	const { Emoji } = requireEmoji$2();

	/**
	 * Represents a custom emoji.
	 * @extends {Emoji}
	 */
	class ApplicationEmoji extends Emoji {
	  constructor(client, data, application) {
	    super(client, data);

	    /**
	     * The application this emoji originates from
	     * @type {ClientApplication}
	     */
	    this.application = application;

	    /**
	     * The user who created this emoji
	     * @type {?User}
	     */
	    this.author = null;

	    this.managed = null;
	    this.requiresColons = null;

	    this._patch(data);
	  }

	  _patch(data) {
	    if ('name' in data) this.name = data.name;
	    if (data.user) this.author = this.client.users._add(data.user);

	    if ('managed' in data) {
	      /**
	       * Whether this emoji is managed by an external service
	       * @type {?boolean}
	       */
	      this.managed = data.managed;
	    }

	    if ('require_colons' in data) {
	      /**
	       * Whether or not this emoji requires colons surrounding it
	       * @type {?boolean}
	       */
	      this.requiresColons = data.require_colons;
	    }
	  }

	  /**
	   * Fetches the author for this emoji
	   * @returns {Promise<User>}
	   */
	  fetchAuthor() {
	    return this.application.emojis.fetchAuthor(this);
	  }

	  /**
	   * Data for editing an emoji.
	   * @typedef {Object} ApplicationEmojiEditOptions
	   * @property {string} [name] The name of the emoji
	   */

	  /**
	   * Edits the emoji.
	   * @param {ApplicationEmojiEditOptions} options The options to provide
	   * @returns {Promise<ApplicationEmoji>}
	   * @example
	   * // Edit an emoji
	   * emoji.edit({ name: 'newemoji' })
	   *   .then(emoji => console.log(`Edited emoji ${emoji}`))
	   *   .catch(console.error);
	   */
	  edit(options) {
	    return this.application.emojis.edit(this.id, options);
	  }

	  /**
	   * Sets the name of the emoji.
	   * @param {string} name The new name for the emoji
	   * @returns {Promise<ApplicationEmoji>}
	   */
	  setName(name) {
	    return this.edit({ name });
	  }

	  /**
	   * Deletes the emoji.
	   * @returns {Promise<ApplicationEmoji>}
	   */
	  async delete() {
	    await this.application.emojis.delete(this.id);
	    return this;
	  }

	  /**
	   * Whether this emoji is the same as another one.
	   * @param {ApplicationEmoji|APIEmoji} other The emoji to compare it to
	   * @returns {boolean}
	   */
	  equals(other) {
	    if (other instanceof ApplicationEmoji) {
	      return (
	        other.animated === this.animated &&
	        other.id === this.id &&
	        other.name === this.name &&
	        other.managed === this.managed &&
	        other.requiresColons === this.requiresColons
	      );
	    }

	    return other.id === this.id && other.name === this.name;
	  }
	}

	ApplicationEmoji_1 = ApplicationEmoji;
	return ApplicationEmoji_1;
}

var ApplicationEmojiManager_1;
var hasRequiredApplicationEmojiManager;

function requireApplicationEmojiManager () {
	if (hasRequiredApplicationEmojiManager) return ApplicationEmojiManager_1;
	hasRequiredApplicationEmojiManager = 1;

	const { Collection } = requireDist$3();
	const { Routes } = requireV10$6();
	const CachedManager = requireCachedManager();
	const { DiscordjsTypeError, ErrorCodes } = requireErrors$1();
	const ApplicationEmoji = requireApplicationEmoji();
	const { resolveImage } = requireDataResolver();

	/**
	 * Manages API methods for ApplicationEmojis and stores their cache.
	 * @extends {CachedManager}
	 */
	class ApplicationEmojiManager extends CachedManager {
	  constructor(application, iterable) {
	    super(application.client, ApplicationEmoji, iterable);

	    /**
	     * The application this manager belongs to
	     * @type {ClientApplication}
	     */
	    this.application = application;
	  }

	  _add(data, cache) {
	    return super._add(data, cache, { extras: [this.application] });
	  }

	  /**
	   * Options used for creating an emoji of the application
	   * @typedef {Object} ApplicationEmojiCreateOptions
	   * @property {BufferResolvable|Base64Resolvable} attachment The image for the emoji
	   * @property {string} name The name for the emoji
	   */

	  /**
	   * Creates a new custom emoji of the application.
	   * @param {ApplicationEmojiCreateOptions} options Options for creating the emoji
	   * @returns {Promise<Emoji>} The created emoji
	   * @example
	   * // Create a new emoji from a URL
	   * application.emojis.create({ attachment: 'https://i.imgur.com/w3duR07.png', name: 'rip' })
	   *   .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))
	   *   .catch(console.error);
	   * @example
	   * // Create a new emoji from a file on your computer
	   * application.emojis.create({ attachment: './memes/banana.png', name: 'banana' })
	   *   .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))
	   *   .catch(console.error);
	   */
	  async create({ attachment, name }) {
	    attachment = await resolveImage(attachment);
	    if (!attachment) throw new DiscordjsTypeError(ErrorCodes.ReqResourceType);

	    const body = { image: attachment, name };

	    const emoji = await this.client.rest.post(Routes.applicationEmojis(this.application.id), { body });
	    return this._add(emoji);
	  }

	  /**
	   * Obtains one or more emojis from Discord, or the emoji cache if they're already available.
	   * @param {Snowflake} [id] The emoji's id
	   * @param {BaseFetchOptions} [options] Additional options for this fetch
	   * @returns {Promise<ApplicationEmoji|Collection<Snowflake, ApplicationEmoji>>}
	   * @example
	   * // Fetch all emojis from the application
	   * application.emojis.fetch()
	   *   .then(emojis => console.log(`There are ${emojis.size} emojis.`))
	   *   .catch(console.error);
	   * @example
	   * // Fetch a single emoji
	   * application.emojis.fetch('222078108977594368')
	   *   .then(emoji => console.log(`The emoji name is: ${emoji.name}`))
	   *   .catch(console.error);
	   */
	  async fetch(id, { cache = true, force = false } = {}) {
	    if (id) {
	      if (!force) {
	        const existing = this.cache.get(id);
	        if (existing) return existing;
	      }
	      const emoji = await this.client.rest.get(Routes.applicationEmoji(this.application.id, id));
	      return this._add(emoji, cache);
	    }

	    const { items: data } = await this.client.rest.get(Routes.applicationEmojis(this.application.id));
	    const emojis = new Collection();
	    for (const emoji of data) emojis.set(emoji.id, this._add(emoji, cache));
	    return emojis;
	  }

	  /**
	   * Deletes an emoji.
	   * @param {EmojiResolvable} emoji The Emoji resolvable to delete
	   * @returns {Promise<void>}
	   */
	  async delete(emoji) {
	    const id = this.resolveId(emoji);
	    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'emoji', 'EmojiResolvable', true);
	    await this.client.rest.delete(Routes.applicationEmoji(this.application.id, id));
	  }

	  /**
	   * Edits an emoji.
	   * @param {EmojiResolvable} emoji The Emoji resolvable to edit
	   * @param {ApplicationEmojiEditOptions} options The options to provide
	   * @returns {Promise<ApplicationEmoji>}
	   */
	  async edit(emoji, options) {
	    const id = this.resolveId(emoji);
	    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'emoji', 'EmojiResolvable', true);

	    const newData = await this.client.rest.patch(Routes.applicationEmoji(this.application.id, id), {
	      body: {
	        name: options.name,
	      },
	    });
	    const existing = this.cache.get(id);
	    if (existing) {
	      existing._patch(newData);
	      return existing;
	    }
	    return this._add(newData);
	  }

	  /**
	   * Fetches the author for this emoji
	   * @param {EmojiResolvable} emoji The emoji to fetch the author of
	   * @returns {Promise<User>}
	   */
	  async fetchAuthor(emoji) {
	    const id = this.resolveId(emoji);
	    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'emoji', 'EmojiResolvable', true);

	    const data = await this.client.rest.get(Routes.applicationEmoji(this.application.id, id));

	    return this._add(data).author;
	  }
	}

	ApplicationEmojiManager_1 = ApplicationEmojiManager;
	return ApplicationEmojiManager_1;
}

var EntitlementManager = {};

var Entitlement = {};

var hasRequiredEntitlement;

function requireEntitlement () {
	if (hasRequiredEntitlement) return Entitlement;
	hasRequiredEntitlement = 1;

	const Base = requireBase$2();

	/**
	 * Represents an Entitlement
	 * @extends {Base}
	 */
	let Entitlement$1 = class Entitlement extends Base {
	  constructor(client, data) {
	    super(client);

	    /**
	     * The id of the entitlement
	     * @type {Snowflake}
	     */
	    this.id = data.id;

	    this._patch(data);
	  }

	  _patch(data) {
	    if ('sku_id' in data) {
	      /**
	       * The id of the associated SKU
	       * @type {Snowflake}
	       */
	      this.skuId = data.sku_id;
	    }

	    if ('user_id' in data) {
	      /**
	       * The id of the user that is granted access to this entitlement's SKU
	       * @type {Snowflake}
	       */
	      this.userId = data.user_id;
	    }

	    if ('guild_id' in data) {
	      /**
	       * The id of the guild that is granted access to this entitlement's SKU
	       * @type {?Snowflake}
	       */
	      this.guildId = data.guild_id;
	    } else {
	      this.guildId ??= null;
	    }

	    if ('application_id' in data) {
	      /**
	       * The id of the parent application
	       * @type {Snowflake}
	       */
	      this.applicationId = data.application_id;
	    }

	    if ('type' in data) {
	      /**
	       * The type of this entitlement
	       * @type {EntitlementType}
	       */
	      this.type = data.type;
	    }

	    if ('deleted' in data) {
	      /**
	       * Whether this entitlement was deleted
	       * @type {boolean}
	       */
	      this.deleted = data.deleted;
	    }

	    if ('starts_at' in data) {
	      /**
	       * The timestamp at which this entitlement is valid
	       * <info>This is only `null` for test entitlements</info>
	       * @type {?number}
	       */
	      this.startsTimestamp = Date.parse(data.starts_at);
	    } else {
	      this.startsTimestamp ??= null;
	    }

	    if ('ends_at' in data) {
	      /**
	       * The timestamp at which this entitlement is no longer valid
	       * <info>This is only `null` for test entitlements</info>
	       * @type {?number}
	       */
	      this.endsTimestamp = Date.parse(data.ends_at);
	    } else {
	      this.endsTimestamp ??= null;
	    }

	    if ('consumed' in data) {
	      /**
	       * Whether this entitlement has been consumed
	       * @type {boolean}
	       */
	      this.consumed = data.consumed;
	    } else {
	      this.consumed ??= false;
	    }
	  }

	  /**
	   * The guild that is granted access to this entitlement's SKU
	   * @type {?Guild}
	   */
	  get guild() {
	    if (!this.guildId) return null;
	    return this.client.guilds.cache.get(this.guildId) ?? null;
	  }

	  /**
	   * The start date at which this entitlement is valid
	   * <info>This is only `null` for test entitlements</info>
	   * @type {?Date}
	   */
	  get startsAt() {
	    return this.startsTimestamp && new Date(this.startsTimestamp);
	  }

	  /**
	   * The end date at which this entitlement is no longer valid
	   * <info>This is only `null` for test entitlements</info>
	   * @type {?Date}
	   */
	  get endsAt() {
	    return this.endsTimestamp && new Date(this.endsTimestamp);
	  }

	  /**
	   * Indicates whether this entitlement is active
	   * @returns {boolean}
	   */
	  isActive() {
	    return !this.deleted && (!this.endsTimestamp || this.endsTimestamp > Date.now());
	  }

	  /**
	   * Indicates whether this entitlement is a test entitlement
	   * @returns {boolean}
	   */
	  isTest() {
	    return this.startsTimestamp === null;
	  }

	  /**
	   * Indicates whether this entitlement is a user subscription
	   * @returns {boolean}
	   */
	  isUserSubscription() {
	    return this.guildId === null;
	  }

	  /**
	   * Indicates whether this entitlement is a guild subscription
	   * @returns {boolean}
	   */
	  isGuildSubscription() {
	    return this.guildId !== null;
	  }

	  /**
	   * Fetches the user that is granted access to this entitlement's SKU
	   * @returns {Promise<User>}
	   */
	  fetchUser() {
	    return this.client.users.fetch(this.userId);
	  }

	  /**
	   * Marks this entitlement as consumed
	   * <info>Only available for One-Time Purchase consumable SKUs.</info>
	   * @returns {Promise<void>}
	   */
	  async consume() {
	    await this.client.application.entitlements.consume(this.id);
	  }
	};

	Entitlement.Entitlement = Entitlement$1;
	return Entitlement;
}

var hasRequiredEntitlementManager;

function requireEntitlementManager () {
	if (hasRequiredEntitlementManager) return EntitlementManager;
	hasRequiredEntitlementManager = 1;

	const { Collection } = requireDist$3();
	const { makeURLSearchParams } = requireWeb();
	const { Routes, EntitlementOwnerType } = requireV10$6();
	const CachedManager = requireCachedManager();
	const { ErrorCodes, DiscordjsTypeError } = requireErrors$1();
	const { Entitlement } = requireEntitlement();
	const { resolveSKUId } = requireUtil();

	/**
	 * Manages API methods for entitlements and stores their cache.
	 * @extends {CachedManager}
	 */
	let EntitlementManager$1 = class EntitlementManager extends CachedManager {
	  constructor(client, iterable) {
	    super(client, Entitlement, iterable);
	  }

	  /**
	   * The cache of this manager
	   * @type {Collection<Snowflake, Entitlement>}
	   * @name EntitlementManager#cache
	   */

	  /**
	   * Data that resolves to give an Entitlement object. This can be:
	   * * An Entitlement object
	   * * A Snowflake
	   * @typedef {Entitlement|Snowflake} EntitlementResolvable
	   */

	  /**
	   * Data that resolves to give a SKU object. This can be:
	   * * A SKU object
	   * * A Snowflake
	   * @typedef {SKU|Snowflake} SKUResolvable
	   */

	  /**
	   * Options used to fetch entitlements
	   * @typedef {Object} FetchEntitlementsOptions
	   * @property {number} [limit] The maximum number of entitlements to fetch
	   * @property {GuildResolvable} [guild] The guild to fetch entitlements for
	   * @property {UserResolvable} [user] The user to fetch entitlements for
	   * @property {SKUResolvable[]} [skus] The SKUs to fetch entitlements for
	   * @property {boolean} [excludeEnded] Whether to exclude ended entitlements
	   * @property {boolean} [cache=true] Whether to cache the fetched entitlements
	   * @property {Snowflake} [before] Consider only entitlements before this entitlement id
	   * @property {Snowflake} [after] Consider only entitlements after this entitlement id
	   * <warn>If both `before` and `after` are provided, only `before` is respected</warn>
	   */

	  /**
	   * Fetches entitlements for this application
	   * @param {FetchEntitlementsOptions} [options={}] Options for fetching the entitlements
	   * @returns {Promise<Collection<Snowflake, Entitlement>>}
	   */
	  async fetch({ limit, guild, user, skus, excludeEnded, cache = true, before, after } = {}) {
	    const query = makeURLSearchParams({
	      limit,
	      guild_id: guild && this.client.guilds.resolveId(guild),
	      user_id: user && this.client.users.resolveId(user),
	      sku_ids: skus?.map(sku => resolveSKUId(sku)).join(','),
	      exclude_ended: excludeEnded,
	      before,
	      after,
	    });

	    const entitlements = await this.client.rest.get(Routes.entitlements(this.client.application.id), { query });
	    return entitlements.reduce(
	      (coll, entitlement) => coll.set(entitlement.id, this._add(entitlement, cache)),
	      new Collection(),
	    );
	  }

	  /**
	   * Options used to create a test entitlement
	   * <info>Either `guild` or `user` must be provided, but not both</info>
	   * @typedef {Object} EntitlementCreateOptions
	   * @property {SKUResolvable} sku The id of the SKU to create the entitlement for
	   * @property {GuildResolvable} [guild] The guild to create the entitlement for
	   * @property {UserResolvable} [user] The user to create the entitlement for
	   */

	  /**
	   * Creates a test entitlement
	   * @param {EntitlementCreateOptions} options Options for creating the test entitlement
	   * @returns {Promise<Entitlement>}
	   */
	  async createTest({ sku, guild, user }) {
	    const skuId = resolveSKUId(sku);
	    if (!skuId) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'sku', 'SKUResolvable');

	    if ((guild && user) || (!guild && !user)) {
	      throw new DiscordjsTypeError(ErrorCodes.EntitlementCreateInvalidOwner);
	    }

	    const resolved = guild ? this.client.guilds.resolveId(guild) : this.client.users.resolveId(user);
	    if (!resolved) {
	      const name = guild ? 'guild' : 'user';
	      const type = guild ? 'GuildResolvable' : 'UserResolvable';
	      throw new DiscordjsTypeError(ErrorCodes.InvalidType, name, type);
	    }

	    const entitlement = await this.client.rest.post(Routes.entitlements(this.client.application.id), {
	      body: {
	        sku_id: skuId,
	        owner_id: resolved,
	        owner_type: guild ? EntitlementOwnerType.Guild : EntitlementOwnerType.User,
	      },
	    });
	    return new Entitlement(this.client, entitlement);
	  }

	  /**
	   * Deletes a test entitlement
	   * @param {EntitlementResolvable} entitlement The entitlement to delete
	   * @returns {Promise<void>}
	   */
	  async deleteTest(entitlement) {
	    const resolved = this.resolveId(entitlement);
	    if (!resolved) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'entitlement', 'EntitlementResolvable');

	    await this.client.rest.delete(Routes.entitlement(this.client.application.id, resolved));
	  }

	  /**
	   * Marks an entitlement as consumed
	   * <info>Only available for One-Time Purchase consumable SKUs.</info>
	   * @param {Snowflake} entitlementId The id of the entitlement to consume
	   * @returns {Promise<void>}
	   */
	  async consume(entitlementId) {
	    await this.client.rest.post(Routes.consumeEntitlement(this.client.application.id, entitlementId));
	  }
	};

	EntitlementManager.EntitlementManager = EntitlementManager$1;
	return EntitlementManager;
}

var ApplicationFlagsBitField_1;
var hasRequiredApplicationFlagsBitField;

function requireApplicationFlagsBitField () {
	if (hasRequiredApplicationFlagsBitField) return ApplicationFlagsBitField_1;
	hasRequiredApplicationFlagsBitField = 1;

	const { ApplicationFlags } = requireV10$6();
	const BitField = requireBitField();

	/**
	 * Data structure that makes it easy to interact with a {@link ClientApplication#flags} bitfield.
	 * @extends {BitField}
	 */
	class ApplicationFlagsBitField extends BitField {
	  /**
	   * Numeric application flags. All available properties:
	   * @type {ApplicationFlags}
	   * @memberof ApplicationFlagsBitField
	   */
	  static Flags = ApplicationFlags;
	}

	/**
	 * @name ApplicationFlagsBitField
	 * @kind constructor
	 * @memberof ApplicationFlagsBitField
	 * @param {BitFieldResolvable} [bits=0] Bit(s) to read from
	 */

	/**
	 * Bitfield of the packed bits
	 * @type {number}
	 * @name ApplicationFlagsBitField#bitfield
	 */

	/**
	 * Data that can be resolved to give an application flag bit field. This can be:
	 * * A string (see {@link ApplicationFlagsBitField.Flags})
	 * * An application flag
	 * * An instance of ApplicationFlagsBitField
	 * * An Array of ApplicationFlagsResolvable
	 * @typedef {string|number|ApplicationFlagsBitField|ApplicationFlagsResolvable[]} ApplicationFlagsResolvable
	 */

	ApplicationFlagsBitField_1 = ApplicationFlagsBitField;
	return ApplicationFlagsBitField_1;
}

var ClientApplication_1;
var hasRequiredClientApplication;

function requireClientApplication () {
	if (hasRequiredClientApplication) return ClientApplication_1;
	hasRequiredClientApplication = 1;

	const { Collection } = requireDist$3();
	const { Routes } = requireV10$6();
	const { ApplicationRoleConnectionMetadata } = requireApplicationRoleConnectionMetadata();
	const { SKU } = requireSKU();
	const Team = requireTeam();
	const Application = requireApplication$2();
	const ApplicationCommandManager = requireApplicationCommandManager();
	const ApplicationEmojiManager = requireApplicationEmojiManager();
	const { EntitlementManager } = requireEntitlementManager();
	const ApplicationFlagsBitField = requireApplicationFlagsBitField();
	const { resolveImage } = requireDataResolver();
	const PermissionsBitField = requirePermissionsBitField();

	/**
	 * @typedef {Object} ClientApplicationInstallParams
	 * @property {OAuth2Scopes[]} scopes Scopes that will be set upon adding this application
	 * @property {Readonly<PermissionsBitField>} permissions Permissions that will be requested for the integrated role
	 */

	/**
	 * Represents a client application.
	 * @extends {Application}
	 */
	class ClientApplication extends Application {
	  constructor(client, data) {
	    super(client, data);

	    /**
	     * The application command manager for this application
	     * @type {ApplicationCommandManager}
	     */
	    this.commands = new ApplicationCommandManager(this.client);

	    /**
	     * The application emoji manager for this application
	     * @type {ApplicationEmojiManager}
	     */
	    this.emojis = new ApplicationEmojiManager(this);

	    /**
	     * The entitlement manager for this application
	     * @type {EntitlementManager}
	     */
	    this.entitlements = new EntitlementManager(this.client);
	  }

	  _patch(data) {
	    super._patch(data);

	    /**
	     * The tags this application has (max of 5)
	     * @type {string[]}
	     */
	    this.tags = data.tags ?? [];

	    if ('install_params' in data) {
	      /**
	       * Settings for this application's default in-app authorization
	       * @type {?ClientApplicationInstallParams}
	       */
	      this.installParams = {
	        scopes: data.install_params.scopes,
	        permissions: new PermissionsBitField(data.install_params.permissions).freeze(),
	      };
	    } else {
	      this.installParams ??= null;
	    }

	    /**
	     * OAuth2 installation parameters.
	     * @typedef {Object} IntegrationTypesConfigurationParameters
	     * @property {OAuth2Scopes[]} scopes Scopes that will be set upon adding this application
	     * @property {Readonly<PermissionsBitField>} permissions Permissions that will be requested for the integrated role
	     */

	    /**
	     * The application's supported installation context data.
	     * @typedef {Object} IntegrationTypesConfigurationContext
	     * @property {?IntegrationTypesConfigurationParameters} oauth2InstallParams
	     * Scopes and permissions regarding the installation context
	     */

	    /**
	     * The application's supported installation context data.
	     * @typedef {Object} IntegrationTypesConfiguration
	     * @property {IntegrationTypesConfigurationContext} [0] Scopes and permissions
	     * regarding the guild-installation context
	     * @property {IntegrationTypesConfigurationContext} [1] Scopes and permissions
	     * regarding the user-installation context
	     */

	    if ('integration_types_config' in data) {
	      /**
	       * Default scopes and permissions for each supported installation context.
	       * The keys are stringified variants of {@link ApplicationIntegrationType}.
	       * @type {?IntegrationTypesConfiguration}
	       */
	      this.integrationTypesConfig = Object.fromEntries(
	        Object.entries(data.integration_types_config).map(([key, config]) => {
	          let oauth2InstallParams = null;
	          if (config.oauth2_install_params) {
	            oauth2InstallParams = {
	              scopes: config.oauth2_install_params.scopes,
	              permissions: new PermissionsBitField(config.oauth2_install_params.permissions).freeze(),
	            };
	          }

	          const context = {
	            oauth2InstallParams,
	          };

	          return [key, context];
	        }),
	      );
	    } else {
	      this.integrationTypesConfig ??= null;
	    }

	    if ('custom_install_url' in data) {
	      /**
	       * This application's custom installation URL
	       * @type {?string}
	       */
	      this.customInstallURL = data.custom_install_url;
	    } else {
	      this.customInstallURL = null;
	    }

	    if ('flags' in data) {
	      /**
	       * The flags this application has
	       * @type {ApplicationFlagsBitField}
	       */
	      this.flags = new ApplicationFlagsBitField(data.flags).freeze();
	    }

	    if ('approximate_guild_count' in data) {
	      /**
	       * An approximate amount of guilds this application is in.
	       * @type {?number}
	       */
	      this.approximateGuildCount = data.approximate_guild_count;
	    } else {
	      this.approximateGuildCount ??= null;
	    }

	    if ('approximate_user_install_count' in data) {
	      /**
	       * An approximate amount of users that have installed this application.
	       * @type {?number}
	       */
	      this.approximateUserInstallCount = data.approximate_user_install_count;
	    } else {
	      this.approximateUserInstallCount ??= null;
	    }

	    if ('guild_id' in data) {
	      /**
	       * The id of the guild associated with this application.
	       * @type {?Snowflake}
	       */
	      this.guildId = data.guild_id;
	    } else {
	      this.guildId ??= null;
	    }

	    if ('cover_image' in data) {
	      /**
	       * The hash of the application's cover image
	       * @type {?string}
	       */
	      this.cover = data.cover_image;
	    } else {
	      this.cover ??= null;
	    }

	    if ('rpc_origins' in data) {
	      /**
	       * The application's RPC origins, if enabled
	       * @type {string[]}
	       */
	      this.rpcOrigins = data.rpc_origins;
	    } else {
	      this.rpcOrigins ??= [];
	    }

	    if ('bot_require_code_grant' in data) {
	      /**
	       * If this application's bot requires a code grant when using the OAuth2 flow
	       * @type {?boolean}
	       */
	      this.botRequireCodeGrant = data.bot_require_code_grant;
	    } else {
	      this.botRequireCodeGrant ??= null;
	    }

	    if ('bot' in data) {
	      /**
	       * The bot associated with this application.
	       * @type {?User}
	       */
	      this.bot = this.client.users._add(data.bot);
	    } else {
	      this.bot ??= null;
	    }

	    if ('bot_public' in data) {
	      /**
	       * If this application's bot is public
	       * @type {?boolean}
	       */
	      this.botPublic = data.bot_public;
	    } else {
	      this.botPublic ??= null;
	    }

	    if ('interactions_endpoint_url' in data) {
	      /**
	       * This application's interaction endpoint URL.
	       * @type {?string}
	       */
	      this.interactionsEndpointURL = data.interactions_endpoint_url;
	    } else {
	      this.interactionsEndpointURL ??= null;
	    }

	    if ('role_connections_verification_url' in data) {
	      /**
	       * This application's role connection verification entry point URL
	       * @type {?string}
	       */
	      this.roleConnectionsVerificationURL = data.role_connections_verification_url;
	    } else {
	      this.roleConnectionsVerificationURL ??= null;
	    }

	    /**
	     * The owner of this OAuth application
	     * @type {?(User|Team)}
	     */
	    this.owner = data.team
	      ? new Team(this.client, data.team)
	      : data.owner
	        ? this.client.users._add(data.owner)
	        : (this.owner ?? null);
	  }

	  /**
	   * The guild associated with this application.
	   * @type {?Guild}
	   * @readonly
	   */
	  get guild() {
	    return this.client.guilds.cache.get(this.guildId) ?? null;
	  }

	  /**
	   * Whether this application is partial
	   * @type {boolean}
	   * @readonly
	   */
	  get partial() {
	    return !this.name;
	  }

	  /**
	   * Options used for editing an application.
	   * @typedef {Object} ClientApplicationEditOptions
	   * @property {string} [customInstallURL] The application's custom installation URL
	   * @property {string} [description] The application's description
	   * @property {string} [roleConnectionsVerificationURL] The application's role connection verification URL
	   * @property {ClientApplicationInstallParams} [installParams]
	   * Settings for the application's default in-app authorization
	   * @property {ApplicationFlagsResolvable} [flags] The flags for the application
	   * @property {?(BufferResolvable|Base64Resolvable)} [icon] The application's icon
	   * @property {?(BufferResolvable|Base64Resolvable)} [coverImage] The application's cover image
	   * @property {string} [interactionsEndpointURL] The application's interaction endpoint URL
	   * @property {string[]} [tags] The application's tags
	   */

	  /**
	   * Edits this application.
	   * @param {ClientApplicationEditOptions} [options] The options for editing this application
	   * @returns {Promise<ClientApplication>}
	   */
	  async edit({
	    customInstallURL,
	    description,
	    roleConnectionsVerificationURL,
	    installParams,
	    flags,
	    icon,
	    coverImage,
	    interactionsEndpointURL,
	    tags,
	  } = {}) {
	    const data = await this.client.rest.patch(Routes.currentApplication(), {
	      body: {
	        custom_install_url: customInstallURL,
	        description,
	        role_connections_verification_url: roleConnectionsVerificationURL,
	        install_params: installParams,
	        flags: flags === undefined ? undefined : ApplicationFlagsBitField.resolve(flags),
	        icon: icon && (await resolveImage(icon)),
	        cover_image: coverImage && (await resolveImage(coverImage)),
	        interactions_endpoint_url: interactionsEndpointURL,
	        tags,
	      },
	    });

	    this._patch(data);
	    return this;
	  }

	  /**
	   * Obtains this application from Discord.
	   * @returns {Promise<ClientApplication>}
	   */
	  async fetch() {
	    const data = await this.client.rest.get(Routes.currentApplication());
	    this._patch(data);
	    return this;
	  }

	  /**
	   * Gets this application's role connection metadata records
	   * @returns {Promise<ApplicationRoleConnectionMetadata[]>}
	   */
	  async fetchRoleConnectionMetadataRecords() {
	    const metadata = await this.client.rest.get(Routes.applicationRoleConnectionMetadata(this.client.user.id));
	    return metadata.map(data => new ApplicationRoleConnectionMetadata(data));
	  }

	  /**
	   * Data for creating or editing an application role connection metadata.
	   * @typedef {Object} ApplicationRoleConnectionMetadataEditOptions
	   * @property {string} name The name of the metadata field
	   * @property {?Object<Locale, string>} [nameLocalizations] The name localizations for the metadata field
	   * @property {string} description The description of the metadata field
	   * @property {?Object<Locale, string>} [descriptionLocalizations] The description localizations for the metadata field
	   * @property {string} key The dictionary key of the metadata field
	   * @property {ApplicationRoleConnectionMetadataType} type The type of the metadata field
	   */

	  /**
	   * Updates this application's role connection metadata records
	   * @param {ApplicationRoleConnectionMetadataEditOptions[]} records The new role connection metadata records
	   * @returns {Promise<ApplicationRoleConnectionMetadata[]>}
	   */
	  async editRoleConnectionMetadataRecords(records) {
	    const newRecords = await this.client.rest.put(Routes.applicationRoleConnectionMetadata(this.client.user.id), {
	      body: records.map(record => ({
	        type: record.type,
	        key: record.key,
	        name: record.name,
	        name_localizations: record.nameLocalizations,
	        description: record.description,
	        description_localizations: record.descriptionLocalizations,
	      })),
	    });

	    return newRecords.map(data => new ApplicationRoleConnectionMetadata(data));
	  }

	  /**
	   * Gets this application's SKUs
	   * @returns {Promise<Collection<Snowflake, SKU>>}
	   */
	  async fetchSKUs() {
	    const skus = await this.client.rest.get(Routes.skus(this.id));
	    return skus.reduce((coll, sku) => coll.set(sku.id, new SKU(this.client, sku)), new Collection());
	  }
	}

	ClientApplication_1 = ClientApplication;
	return ClientApplication_1;
}

var Embed_1;
var hasRequiredEmbed;

function requireEmbed () {
	if (hasRequiredEmbed) return Embed_1;
	hasRequiredEmbed = 1;

	const { embedLength } = requireDist$1();
	const isEqual = requireFastDeepEqual();

	/**
	 * Represents an embed.
	 */
	class Embed {
	  constructor(data) {
	    /**
	     * The API embed data.
	     * @type {APIEmbed}
	     * @readonly
	     */
	    this.data = { ...data };
	  }

	  /**
	   * An array of fields of this embed.
	   * @type {Array<APIEmbedField>}
	   * @readonly
	   */
	  get fields() {
	    return this.data.fields ?? [];
	  }

	  /**
	   * The title of this embed.
	   * @type {?string}
	   * @readonly
	   */
	  get title() {
	    return this.data.title ?? null;
	  }

	  /**
	   * The description of this embed.
	   * @type {?string}
	   * @readonly
	   */
	  get description() {
	    return this.data.description ?? null;
	  }

	  /**
	   * The URL of this embed.
	   * @type {?string}
	   * @readonly
	   */
	  get url() {
	    return this.data.url ?? null;
	  }

	  /**
	   * The color of this embed.
	   * @type {?number}
	   * @readonly
	   */
	  get color() {
	    return this.data.color ?? null;
	  }

	  /**
	   * The timestamp of this embed. This is in an ISO 8601 format.
	   * @type {?string}
	   * @readonly
	   */
	  get timestamp() {
	    return this.data.timestamp ?? null;
	  }

	  /**
	   * @typedef {Object} EmbedAssetData
	   * @property {?string} url The URL of the image
	   * @property {?string} proxyURL The proxy URL of the image
	   * @property {?number} height The height of the image
	   * @property {?number} width The width of the image
	   */

	  /**
	   * The thumbnail of this embed.
	   * @type {?EmbedAssetData}
	   * @readonly
	   */
	  get thumbnail() {
	    if (!this.data.thumbnail) return null;
	    return {
	      url: this.data.thumbnail.url,
	      proxyURL: this.data.thumbnail.proxy_url,
	      height: this.data.thumbnail.height,
	      width: this.data.thumbnail.width,
	    };
	  }

	  /**
	   * The image of this embed.
	   * @type {?EmbedAssetData}
	   * @readonly
	   */
	  get image() {
	    if (!this.data.image) return null;
	    return {
	      url: this.data.image.url,
	      proxyURL: this.data.image.proxy_url,
	      height: this.data.image.height,
	      width: this.data.image.width,
	    };
	  }

	  /**
	   * The video of this embed.
	   * @type {?EmbedAssetData}
	   * @readonly
	   */
	  get video() {
	    if (!this.data.video) return null;
	    return {
	      url: this.data.video.url,
	      proxyURL: this.data.video.proxy_url,
	      height: this.data.video.height,
	      width: this.data.video.width,
	    };
	  }

	  /**
	   * @typedef {Object} EmbedAuthorData
	   * @property {string} name The name of the author
	   * @property {?string} url The URL of the author
	   * @property {?string} iconURL The icon URL of the author
	   * @property {?string} proxyIconURL The proxy icon URL of the author
	   */

	  /**
	   * The author of this embed.
	   * @type {?EmbedAuthorData}
	   * @readonly
	   */
	  get author() {
	    if (!this.data.author) return null;
	    return {
	      name: this.data.author.name,
	      url: this.data.author.url,
	      iconURL: this.data.author.icon_url,
	      proxyIconURL: this.data.author.proxy_icon_url,
	    };
	  }

	  /**
	   * The provider of this embed.
	   * @type {?APIEmbedProvider}
	   * @readonly
	   */
	  get provider() {
	    return this.data.provider ?? null;
	  }

	  /**
	   * @typedef {Object} EmbedFooterData
	   * @property {string} text The text of the footer
	   * @property {?string} iconURL The URL of the icon
	   * @property {?string} proxyIconURL The proxy URL of the icon
	   */

	  /**
	   * The footer of this embed.
	   * @type {?EmbedFooterData}
	   * @readonly
	   */
	  get footer() {
	    if (!this.data.footer) return null;
	    return {
	      text: this.data.footer.text,
	      iconURL: this.data.footer.icon_url,
	      proxyIconURL: this.data.footer.proxy_icon_url,
	    };
	  }

	  /**
	   * The accumulated length for the embed title, description, fields, footer text, and author name.
	   * @type {number}
	   * @readonly
	   */
	  get length() {
	    return embedLength(this.data);
	  }

	  /**
	   * The hex color of this embed.
	   * @type {?string}
	   * @readonly
	   */
	  get hexColor() {
	    return typeof this.data.color === 'number'
	      ? `#${this.data.color.toString(16).padStart(6, '0')}`
	      : (this.data.color ?? null);
	  }

	  /**
	   * Returns the API-compatible JSON for this embed.
	   * @returns {APIEmbed}
	   */
	  toJSON() {
	    return { ...this.data };
	  }

	  /**
	   * Whether the given embeds are equal.
	   * @param {Embed|APIEmbed} other The embed to compare against
	   * @returns {boolean}
	   */
	  equals(other) {
	    if (other instanceof Embed) {
	      return isEqual(this.data, other.data);
	    }

	    return (
	      this.author?.iconURL === other.author?.icon_url &&
	      this.author?.name === other.author?.name &&
	      this.author?.url === other.author?.url &&
	      this.color === (other.color ?? null) &&
	      this.description === (other.description ?? null) &&
	      this.footer?.iconURL === other.footer?.icon_url &&
	      this.footer?.text === other.footer?.text &&
	      this.image?.url === other.image?.url &&
	      this.thumbnail?.url === other.thumbnail?.url &&
	      (this.timestamp && Date.parse(this.timestamp)) === (other.timestamp ? Date.parse(other.timestamp) : null) &&
	      this.title === (other.title ?? null) &&
	      this.url === (other.url ?? null) &&
	      this.video?.url === other.video?.url &&
	      isEqual(this.fields, other.fields?.map(field => ({ ...field, inline: field.inline ?? false })) ?? []) &&
	      isEqual(this.provider, other.provider ?? null)
	    );
	  }
	}

	Embed_1 = Embed;
	return Embed_1;
}

var MessageMentions_1;
var hasRequiredMessageMentions;

function requireMessageMentions () {
	if (hasRequiredMessageMentions) return MessageMentions_1;
	hasRequiredMessageMentions = 1;

	const { Collection } = requireDist$3();
	const { FormattingPatterns } = requireV10$6();
	const { flatten } = requireUtil();

	/**
	 * Keeps track of mentions in a {@link Message}.
	 */
	class MessageMentions {
	  /**
	   * A regular expression that matches `@everyone` and `@here`.
	   * The `mention` group property is present on the `exec` result of this expression.
	   * @type {RegExp}
	   * @memberof MessageMentions
	   */
	  static EveryonePattern = /@(?<mention>everyone|here)/;

	  /**
	   * A regular expression that matches user mentions like `<@81440962496172032>`.
	   * The `id` group property is present on the `exec` result of this expression.
	   * @type {RegExp}
	   * @memberof MessageMentions
	   */
	  static UsersPattern = FormattingPatterns.UserWithOptionalNickname;

	  /**
	   * A regular expression that matches role mentions like `<@&297577916114403338>`.
	   * The `id` group property is present on the `exec` result of this expression.
	   * @type {RegExp}
	   * @memberof MessageMentions
	   */
	  static RolesPattern = FormattingPatterns.Role;

	  /**
	   * A regular expression that matches channel mentions like `<#222079895583457280>`.
	   * The `id` group property is present on the `exec` result of this expression.
	   * @type {RegExp}
	   * @memberof MessageMentions
	   */
	  static ChannelsPattern = FormattingPatterns.Channel;

	  /**
	   * A global regular expression variant of {@link MessageMentions.ChannelsPattern}.
	   * @type {RegExp}
	   * @memberof MessageMentions
	   * @private
	   */
	  static GlobalChannelsPattern = new RegExp(this.ChannelsPattern.source, 'g');

	  /**
	   * A global regular expression variant of {@link MessageMentions.UsersPattern}.
	   * @type {RegExp}
	   * @memberof MessageMentions
	   * @private
	   */
	  static GlobalUsersPattern = new RegExp(this.UsersPattern.source, 'g');

	  constructor(message, users, roles, everyone, crosspostedChannels, repliedUser) {
	    /**
	     * The client the message is from
	     * @type {Client}
	     * @readonly
	     */
	    Object.defineProperty(this, 'client', { value: message.client });

	    /**
	     * The guild the message is in
	     * @type {?Guild}
	     * @readonly
	     */
	    Object.defineProperty(this, 'guild', { value: message.guild });

	    /**
	     * The initial message content
	     * @type {string}
	     * @readonly
	     * @private
	     */
	    Object.defineProperty(this, '_content', { value: message.content });

	    /**
	     * Whether `@everyone` or `@here` were mentioned
	     * @type {boolean}
	     */
	    this.everyone = Boolean(everyone);

	    if (users) {
	      if (users instanceof Collection) {
	        /**
	         * Any users that were mentioned
	         * <info>Order as received from the API, not as they appear in the message content</info>
	         * @type {Collection<Snowflake, User>}
	         */
	        this.users = new Collection(users);
	      } else {
	        this.users = new Collection();
	        for (const mention of users) {
	          if (mention.member && message.guild) {
	            message.guild.members._add(Object.assign(mention.member, { user: mention }));
	          }
	          const user = message.client.users._add(mention);
	          this.users.set(user.id, user);
	        }
	      }
	    } else {
	      this.users = new Collection();
	    }

	    if (roles instanceof Collection) {
	      /**
	       * Any roles that were mentioned
	       * <info>Order as received from the API, not as they appear in the message content</info>
	       * @type {Collection<Snowflake, Role>}
	       */
	      this.roles = new Collection(roles);
	    } else if (roles) {
	      this.roles = new Collection();
	      const guild = message.guild;
	      if (guild) {
	        for (const mention of roles) {
	          const role = guild.roles.cache.get(mention);
	          if (role) this.roles.set(role.id, role);
	        }
	      }
	    } else {
	      this.roles = new Collection();
	    }

	    /**
	     * Cached members for {@link MessageMentions#members}
	     * @type {?Collection<Snowflake, GuildMember>}
	     * @private
	     */
	    this._members = null;

	    /**
	     * Cached channels for {@link MessageMentions#channels}
	     * @type {?Collection<Snowflake, BaseChannel>}
	     * @private
	     */
	    this._channels = null;

	    /**
	     * Cached users for {@link MessageMentions#parsedUsers}
	     * @type {?Collection<Snowflake, User>}
	     * @private
	     */
	    this._parsedUsers = null;

	    /**
	     * Crossposted channel data.
	     * @typedef {Object} CrosspostedChannel
	     * @property {Snowflake} channelId The mentioned channel's id
	     * @property {Snowflake} guildId The id of the guild that has the channel
	     * @property {ChannelType} type The channel's type
	     * @property {string} name The channel's name
	     */

	    if (crosspostedChannels) {
	      if (crosspostedChannels instanceof Collection) {
	        /**
	         * A collection of crossposted channels
	         * <info>Order as received from the API, not as they appear in the message content</info>
	         * @type {Collection<Snowflake, CrosspostedChannel>}
	         */
	        this.crosspostedChannels = new Collection(crosspostedChannels);
	      } else {
	        this.crosspostedChannels = new Collection();
	        for (const crosspostedChannel of crosspostedChannels) {
	          this.crosspostedChannels.set(crosspostedChannel.id, {
	            channelId: crosspostedChannel.id,
	            guildId: crosspostedChannel.guild_id,
	            type: crosspostedChannel.type,
	            name: crosspostedChannel.name,
	          });
	        }
	      }
	    } else {
	      this.crosspostedChannels = new Collection();
	    }

	    /**
	     * The author of the message that this message is a reply to
	     * @type {?User}
	     */
	    this.repliedUser = repliedUser ? this.client.users._add(repliedUser) : null;
	  }

	  /**
	   * Any members that were mentioned (only in {@link Guild}s)
	   * <info>Order as received from the API, not as they appear in the message content</info>
	   * @type {?Collection<Snowflake, GuildMember>}
	   * @readonly
	   */
	  get members() {
	    if (this._members) return this._members;
	    if (!this.guild) return null;
	    this._members = new Collection();
	    this.users.forEach(user => {
	      const member = this.guild.members.resolve(user);
	      if (member) this._members.set(member.user.id, member);
	    });
	    return this._members;
	  }

	  /**
	   * Any channels that were mentioned
	   * <info>Order as they appear first in the message content</info>
	   * @type {Collection<Snowflake, BaseChannel>}
	   * @readonly
	   */
	  get channels() {
	    if (this._channels) return this._channels;
	    this._channels = new Collection();
	    let matches;

	    while ((matches = this.constructor.GlobalChannelsPattern.exec(this._content)) !== null) {
	      const channel = this.client.channels.cache.get(matches.groups.id);
	      if (channel) this._channels.set(channel.id, channel);
	    }

	    return this._channels;
	  }

	  /**
	   * Any user mentions that were included in the message content
	   * <info>Order as they appear first in the message content</info>
	   * @type {Collection<Snowflake, User>}
	   * @readonly
	   */
	  get parsedUsers() {
	    if (this._parsedUsers) return this._parsedUsers;
	    this._parsedUsers = new Collection();
	    let matches;
	    while ((matches = this.constructor.GlobalUsersPattern.exec(this._content)) !== null) {
	      const user = this.client.users.cache.get(matches[1]);
	      if (user) this._parsedUsers.set(user.id, user);
	    }
	    return this._parsedUsers;
	  }

	  /**
	   * Options used to check for a mention.
	   * @typedef {Object} MessageMentionsHasOptions
	   * @property {boolean} [ignoreDirect=false] Whether to ignore direct mentions to the item
	   * @property {boolean} [ignoreRoles=false] Whether to ignore role mentions to a guild member
	   * @property {boolean} [ignoreRepliedUser=false] Whether to ignore replied user mention to an user
	   * @property {boolean} [ignoreEveryone=false] Whether to ignore `@everyone`/`@here` mentions
	   */

	  /**
	   * Checks if a user, guild member, thread member, role, or channel is mentioned.
	   * Takes into account user mentions, role mentions, channel mentions,
	   * replied user mention, and `@everyone`/`@here` mentions.
	   * @param {UserResolvable|RoleResolvable|ChannelResolvable} data The User/Role/Channel to check for
	   * @param {MessageMentionsHasOptions} [options] The options for the check
	   * @returns {boolean}
	   */
	  has(data, { ignoreDirect = false, ignoreRoles = false, ignoreRepliedUser = false, ignoreEveryone = false } = {}) {
	    const user = this.client.users.resolve(data);

	    if (!ignoreEveryone && user && this.everyone) return true;

	    const userWasRepliedTo = user && this.repliedUser?.id === user.id;

	    if (!ignoreRepliedUser && userWasRepliedTo && this.users.has(user.id)) return true;

	    if (!ignoreDirect) {
	      if (user && (!ignoreRepliedUser || this.parsedUsers.has(user.id)) && this.users.has(user.id)) return true;

	      const role = this.guild?.roles.resolve(data);
	      if (role && this.roles.has(role.id)) return true;

	      const channel = this.client.channels.resolve(data);
	      if (channel && this.channels.has(channel.id)) return true;
	    }

	    if (!ignoreRoles) {
	      const member = this.guild?.members.resolve(data);
	      if (member) {
	        for (const mentionedRole of this.roles.values()) if (member.roles.cache.has(mentionedRole.id)) return true;
	      }
	    }

	    return false;
	  }

	  toJSON() {
	    return flatten(this, {
	      members: true,
	      channels: true,
	    });
	  }
	}

	MessageMentions_1 = MessageMentions;
	return MessageMentions_1;
}

var Poll = {};

var PollAnswer = {};

var hasRequiredPollAnswer;

function requirePollAnswer () {
	if (hasRequiredPollAnswer) return PollAnswer;
	hasRequiredPollAnswer = 1;

	const Base = requireBase$2();
	const { Emoji } = requireEmoji$2();

	/**
	 * Represents an answer to a {@link Poll}
	 * @extends {Base}
	 */
	let PollAnswer$1 = class PollAnswer extends Base {
	  constructor(client, data, poll) {
	    super(client);

	    /**
	     * The {@link Poll} this answer is part of
	     * @name PollAnswer#poll
	     * @type {Poll}
	     * @readonly
	     */
	    Object.defineProperty(this, 'poll', { value: poll });

	    /**
	     * The id of this answer
	     * @type {number}
	     */
	    this.id = data.answer_id;

	    /**
	     * The text of this answer
	     * @type {?string}
	     */
	    this.text = data.poll_media.text ?? null;

	    /**
	     * The raw emoji of this answer
	     * @name PollAnswer#_emoji
	     * @type {?APIPartialEmoji}
	     * @private
	     */
	    Object.defineProperty(this, '_emoji', { value: data.poll_media.emoji ?? null });

	    this._patch(data);
	  }

	  _patch(data) {
	    // This `count` field comes from `poll.results.answer_counts`
	    if ('count' in data) {
	      /**
	       * The amount of votes this answer has
	       * @type {number}
	       */
	      this.voteCount = data.count;
	    } else {
	      this.voteCount ??= 0;
	    }
	  }

	  /**
	   * The emoji of this answer
	   * @type {?(GuildEmoji|Emoji)}
	   */
	  get emoji() {
	    if (!this._emoji || (!this._emoji.id && !this._emoji.name)) return null;
	    return this.client.emojis.resolve(this._emoji.id) ?? new Emoji(this.client, this._emoji);
	  }

	  /**
	   * Options used for fetching voters of a poll answer.
	   * @typedef {Object} BaseFetchPollAnswerVotersOptions
	   * @property {number} [limit] The maximum number of voters to fetch
	   * @property {Snowflake} [after] The user id to fetch voters after
	   */

	  /**
	   * Fetches the users that voted for this answer.
	   * @param {BaseFetchPollAnswerVotersOptions} [options={}] The options for fetching voters
	   * @returns {Promise<Collection<Snowflake, User>>}
	   */
	  fetchVoters({ after, limit } = {}) {
	    return this.poll.message.channel.messages.fetchPollAnswerVoters({
	      messageId: this.poll.message.id,
	      answerId: this.id,
	      after,
	      limit,
	    });
	  }
	};

	PollAnswer.PollAnswer = PollAnswer$1;
	return PollAnswer;
}

var hasRequiredPoll$2;

function requirePoll$2 () {
	if (hasRequiredPoll$2) return Poll;
	hasRequiredPoll$2 = 1;

	const { Collection } = requireDist$3();
	const Base = requireBase$2();
	const { PollAnswer } = requirePollAnswer();
	const { DiscordjsError } = requireDJSError();
	const { ErrorCodes } = requireErrors$1();

	/**
	 * Represents a Poll
	 * @extends {Base}
	 */
	let Poll$1 = class Poll extends Base {
	  constructor(client, data, message) {
	    super(client);

	    /**
	     * The message that started this poll
	     * @name Poll#message
	     * @type {Message}
	     * @readonly
	     */

	    Object.defineProperty(this, 'message', { value: message });

	    /**
	     * The media for a poll's question
	     * @typedef {Object} PollQuestionMedia
	     * @property {string} text The text of this question
	     */

	    /**
	     * The media for this poll's question
	     * @type {PollQuestionMedia}
	     */
	    this.question = {
	      text: data.question.text,
	    };

	    /**
	     * The answers of this poll
	     * @type {Collection<number, PollAnswer>}
	     */
	    this.answers = data.answers.reduce(
	      (acc, answer) => acc.set(answer.answer_id, new PollAnswer(this.client, answer, this)),
	      new Collection(),
	    );

	    /**
	     * The timestamp when this poll expires
	     * @type {number}
	     */
	    this.expiresTimestamp = Date.parse(data.expiry);

	    /**
	     * Whether this poll allows multiple answers
	     * @type {boolean}
	     */
	    this.allowMultiselect = data.allow_multiselect;

	    /**
	     * The layout type of this poll
	     * @type {PollLayoutType}
	     */
	    this.layoutType = data.layout_type;

	    this._patch(data);
	  }

	  _patch(data) {
	    if (data.results) {
	      /**
	       * Whether this poll's results have been precisely counted
	       * @type {boolean}
	       */
	      this.resultsFinalized = data.results.is_finalized;

	      for (const answerResult of data.results.answer_counts) {
	        const answer = this.answers.get(answerResult.id);
	        answer?._patch(answerResult);
	      }
	    } else {
	      this.resultsFinalized ??= false;
	    }
	  }

	  /**
	   * The date when this poll expires
	   * @type {Date}
	   * @readonly
	   */
	  get expiresAt() {
	    return new Date(this.expiresTimestamp);
	  }

	  /**
	   * Ends this poll.
	   * @returns {Promise<Message>}
	   */
	  end() {
	    if (Date.now() > this.expiresTimestamp) {
	      return Promise.reject(new DiscordjsError(ErrorCodes.PollAlreadyExpired));
	    }

	    return this.message.channel.messages.endPoll(this.message.id);
	  }
	};

	Poll.Poll = Poll$1;
	return Poll;
}

var ReactionCollector_1;
var hasRequiredReactionCollector;

function requireReactionCollector () {
	if (hasRequiredReactionCollector) return ReactionCollector_1;
	hasRequiredReactionCollector = 1;

	const { Collection } = requireDist$3();
	const Collector = requireCollector();
	const Events = requireEvents();

	/**
	 * @typedef {CollectorOptions} ReactionCollectorOptions
	 * @property {number} max The maximum total amount of reactions to collect
	 * @property {number} maxEmojis The maximum number of emojis to collect
	 * @property {number} maxUsers The maximum number of users to react
	 */

	/**
	 * Collects reactions on messages.
	 * Will automatically stop if the message ({@link Client#event:messageDelete messageDelete} or
	 * {@link Client#event:messageDeleteBulk messageDeleteBulk}),
	 * channel ({@link Client#event:channelDelete channelDelete}),
	 * thread ({@link Client#event:threadDelete threadDelete}), or
	 * guild ({@link Client#event:guildDelete guildDelete}) is deleted.
	 * @extends {Collector}
	 */
	class ReactionCollector extends Collector {
	  /**
	   * @param {Message} message The message upon which to collect reactions
	   * @param {ReactionCollectorOptions} [options={}] The options to apply to this collector
	   */
	  constructor(message, options = {}) {
	    super(message.client, options);

	    /**
	     * The message upon which to collect reactions
	     * @type {Message}
	     */
	    this.message = message;

	    /**
	     * The users that have reacted to this message
	     * @type {Collection}
	     */
	    this.users = new Collection();

	    /**
	     * The total number of reactions collected
	     * @type {number}
	     */
	    this.total = 0;

	    this.empty = this.empty.bind(this);
	    this._handleChannelDeletion = this._handleChannelDeletion.bind(this);
	    this._handleThreadDeletion = this._handleThreadDeletion.bind(this);
	    this._handleGuildDeletion = this._handleGuildDeletion.bind(this);
	    this._handleMessageDeletion = this._handleMessageDeletion.bind(this);

	    const bulkDeleteListener = messages => {
	      if (messages.has(this.message.id)) this.stop('messageDelete');
	    };

	    this.client.incrementMaxListeners();
	    this.client.on(Events.MessageReactionAdd, this.handleCollect);
	    this.client.on(Events.MessageReactionRemove, this.handleDispose);
	    this.client.on(Events.MessageReactionRemoveAll, this.empty);
	    this.client.on(Events.MessageDelete, this._handleMessageDeletion);
	    this.client.on(Events.MessageBulkDelete, bulkDeleteListener);
	    this.client.on(Events.ChannelDelete, this._handleChannelDeletion);
	    this.client.on(Events.ThreadDelete, this._handleThreadDeletion);
	    this.client.on(Events.GuildDelete, this._handleGuildDeletion);

	    this.once('end', () => {
	      this.client.removeListener(Events.MessageReactionAdd, this.handleCollect);
	      this.client.removeListener(Events.MessageReactionRemove, this.handleDispose);
	      this.client.removeListener(Events.MessageReactionRemoveAll, this.empty);
	      this.client.removeListener(Events.MessageDelete, this._handleMessageDeletion);
	      this.client.removeListener(Events.MessageBulkDelete, bulkDeleteListener);
	      this.client.removeListener(Events.ChannelDelete, this._handleChannelDeletion);
	      this.client.removeListener(Events.ThreadDelete, this._handleThreadDeletion);
	      this.client.removeListener(Events.GuildDelete, this._handleGuildDeletion);
	      this.client.decrementMaxListeners();
	    });

	    this.on('collect', (reaction, user) => {
	      /**
	       * Emitted whenever a reaction is newly created on a message. Will emit only when a new reaction is
	       * added to the message, as opposed to {@link Collector#event:collect} which will
	       * be emitted even when a reaction has already been added to the message.
	       * @event ReactionCollector#create
	       * @param {MessageReaction} reaction The reaction that was added
	       * @param {User} user The user that added the reaction
	       */
	      if (reaction.count === 1) {
	        this.emit('create', reaction, user);
	      }
	      this.total++;
	      this.users.set(user.id, user);
	    });

	    this.on('remove', (_reaction, user) => {
	      this.total--;
	      if (!this.collected.some(reaction => reaction.users.cache.has(user.id))) this.users.delete(user.id);
	    });
	  }

	  /**
	   * Handles an incoming reaction for possible collection.
	   * @param {MessageReaction} reaction The reaction to possibly collect
	   * @param {User} user The user that added the reaction
	   * @returns {?(Snowflake|string)}
	   * @private
	   */
	  collect(reaction) {
	    /**
	     * Emitted whenever a reaction is collected.
	     * @event ReactionCollector#collect
	     * @param {MessageReaction} reaction The reaction that was collected
	     * @param {User} user The user that added the reaction
	     */
	    if (reaction.message.id !== this.message.id) return null;

	    return ReactionCollector.key(reaction);
	  }

	  /**
	   * Handles a reaction deletion for possible disposal.
	   * @param {MessageReaction} reaction The reaction to possibly dispose of
	   * @param {User} user The user that removed the reaction
	   * @returns {?(Snowflake|string)}
	   */
	  dispose(reaction, user) {
	    /**
	     * Emitted when the reaction had all the users removed and the `dispose` option is set to true.
	     * @event ReactionCollector#dispose
	     * @param {MessageReaction} reaction The reaction that was disposed of
	     * @param {User} user The user that removed the reaction
	     */
	    if (reaction.message.id !== this.message.id) return null;

	    /**
	     * Emitted when the reaction had one user removed and the `dispose` option is set to true.
	     * @event ReactionCollector#remove
	     * @param {MessageReaction} reaction The reaction that was removed
	     * @param {User} user The user that removed the reaction
	     */
	    if (this.collected.has(ReactionCollector.key(reaction)) && this.users.has(user.id)) {
	      this.emit('remove', reaction, user);
	    }
	    return reaction.count ? null : ReactionCollector.key(reaction);
	  }

	  /**
	   * Empties this reaction collector.
	   */
	  empty() {
	    this.total = 0;
	    this.collected.clear();
	    this.users.clear();
	    this.checkEnd();
	  }

	  /**
	   * The reason this collector has ended with, or null if it hasn't ended yet
	   * @type {?string}
	   * @readonly
	   */
	  get endReason() {
	    if (this.options.max && this.total >= this.options.max) return 'limit';
	    if (this.options.maxEmojis && this.collected.size >= this.options.maxEmojis) return 'emojiLimit';
	    if (this.options.maxUsers && this.users.size >= this.options.maxUsers) return 'userLimit';
	    return super.endReason;
	  }

	  /**
	   * Handles checking if the message has been deleted, and if so, stops the collector with the reason 'messageDelete'.
	   * @private
	   * @param {Message} message The message that was deleted
	   * @returns {void}
	   */
	  _handleMessageDeletion(message) {
	    if (message.id === this.message.id) {
	      this.stop('messageDelete');
	    }
	  }

	  /**
	   * Handles checking if the channel has been deleted, and if so, stops the collector with the reason 'channelDelete'.
	   * @private
	   * @param {GuildChannel} channel The channel that was deleted
	   * @returns {void}
	   */
	  _handleChannelDeletion(channel) {
	    if (channel.id === this.message.channelId || channel.threads?.cache.has(this.message.channelId)) {
	      this.stop('channelDelete');
	    }
	  }

	  /**
	   * Handles checking if the thread has been deleted, and if so, stops the collector with the reason 'threadDelete'.
	   * @private
	   * @param {ThreadChannel} thread The thread that was deleted
	   * @returns {void}
	   */
	  _handleThreadDeletion(thread) {
	    if (thread.id === this.message.channelId) {
	      this.stop('threadDelete');
	    }
	  }

	  /**
	   * Handles checking if the guild has been deleted, and if so, stops the collector with the reason 'guildDelete'.
	   * @private
	   * @param {Guild} guild The guild that was deleted
	   * @returns {void}
	   */
	  _handleGuildDeletion(guild) {
	    if (guild.id === this.message.guild?.id) {
	      this.stop('guildDelete');
	    }
	  }

	  /**
	   * Gets the collector key for a reaction.
	   * @param {MessageReaction} reaction The message reaction to get the key for
	   * @returns {Snowflake|string}
	   */
	  static key(reaction) {
	    return reaction.emoji.id ?? reaction.emoji.name;
	  }
	}

	ReactionCollector_1 = ReactionCollector;
	return ReactionCollector_1;
}

var Sticker = {};

var hasRequiredSticker$2;

function requireSticker$2 () {
	if (hasRequiredSticker$2) return Sticker;
	hasRequiredSticker$2 = 1;

	const { DiscordSnowflake } = /*@__PURE__*/ requireCjs$2();
	const { Routes } = requireV10$6();
	const Base = requireBase$2();
	const { DiscordjsError, ErrorCodes } = requireErrors$1();
	const { StickerFormatExtensionMap } = requireConstants$1();

	/**
	 * Represents a Sticker.
	 * @extends {Base}
	 */
	let Sticker$1 = class Sticker extends Base {
	  constructor(client, sticker) {
	    super(client);

	    this._patch(sticker);
	  }

	  _patch(sticker) {
	    /**
	     * The sticker's id
	     * @type {Snowflake}
	     */
	    this.id = sticker.id;

	    if ('description' in sticker) {
	      /**
	       * The description of the sticker
	       * @type {?string}
	       */
	      this.description = sticker.description;
	    } else {
	      this.description ??= null;
	    }

	    if ('type' in sticker) {
	      /**
	       * The type of the sticker
	       * @type {?StickerType}
	       */
	      this.type = sticker.type;
	    } else {
	      this.type ??= null;
	    }

	    if ('format_type' in sticker) {
	      /**
	       * The format of the sticker
	       * @type {StickerFormatType}
	       */
	      this.format = sticker.format_type;
	    }

	    if ('name' in sticker) {
	      /**
	       * The name of the sticker
	       * @type {string}
	       */
	      this.name = sticker.name;
	    }

	    if ('pack_id' in sticker) {
	      /**
	       * The id of the pack the sticker is from, for standard stickers
	       * @type {?Snowflake}
	       */
	      this.packId = sticker.pack_id;
	    } else {
	      this.packId ??= null;
	    }

	    if ('tags' in sticker) {
	      /**
	       * Autocomplete/suggestions for the sticker
	       * @type {?string}
	       */
	      this.tags = sticker.tags;
	    } else {
	      this.tags ??= null;
	    }

	    if ('available' in sticker) {
	      /**
	       * Whether or not the guild sticker is available
	       * @type {?boolean}
	       */
	      this.available = sticker.available;
	    } else {
	      this.available ??= null;
	    }

	    if ('guild_id' in sticker) {
	      /**
	       * The id of the guild that owns this sticker
	       * @type {?Snowflake}
	       */
	      this.guildId = sticker.guild_id;
	    } else {
	      this.guildId ??= null;
	    }

	    if ('user' in sticker) {
	      /**
	       * The user that uploaded the guild sticker
	       * @type {?User}
	       */
	      this.user = this.client.users._add(sticker.user);
	    } else {
	      this.user ??= null;
	    }

	    if ('sort_value' in sticker) {
	      /**
	       * The standard sticker's sort order within its pack
	       * @type {?number}
	       */
	      this.sortValue = sticker.sort_value;
	    } else {
	      this.sortValue ??= null;
	    }
	  }

	  /**
	   * The timestamp the sticker was created at
	   * @type {number}
	   * @readonly
	   */
	  get createdTimestamp() {
	    return DiscordSnowflake.timestampFrom(this.id);
	  }

	  /**
	   * The time the sticker was created at
	   * @type {Date}
	   * @readonly
	   */
	  get createdAt() {
	    return new Date(this.createdTimestamp);
	  }

	  /**
	   * Whether this sticker is partial
	   * @type {boolean}
	   * @readonly
	   */
	  get partial() {
	    return !this.type;
	  }

	  /**
	   * The guild that owns this sticker
	   * @type {?Guild}
	   * @readonly
	   */
	  get guild() {
	    return this.client.guilds.resolve(this.guildId);
	  }

	  /**
	   * A link to the sticker
	   * <info>If the sticker's format is {@link StickerFormatType.Lottie}, it returns
	   * the URL of the Lottie JSON file.</info>
	   * @type {string}
	   * @readonly
	   */
	  get url() {
	    return this.client.rest.cdn.sticker(this.id, StickerFormatExtensionMap[this.format]);
	  }

	  /**
	   * Fetches this sticker.
	   * @returns {Promise<Sticker>}
	   */
	  async fetch() {
	    const data = await this.client.rest.get(Routes.sticker(this.id));
	    this._patch(data);
	    return this;
	  }

	  /**
	   * Fetches the pack that contains this sticker.
	   * @returns {Promise<?StickerPack>} The sticker pack or `null` if this sticker does not belong to one.
	   */
	  fetchPack() {
	    if (!this.packId) return Promise.resolve(null);
	    return this.client.fetchStickerPacks({ packId: this.packId });
	  }

	  /**
	   * Fetches the user who uploaded this sticker, if this is a guild sticker.
	   * @returns {Promise<?User>}
	   */
	  async fetchUser() {
	    if (this.partial) await this.fetch();
	    if (!this.guildId) throw new DiscordjsError(ErrorCodes.NotGuildSticker);
	    return this.guild.stickers.fetchUser(this);
	  }

	  /**
	   * Data for editing a sticker.
	   * @typedef {Object} GuildStickerEditOptions
	   * @property {string} [name] The name of the sticker
	   * @property {?string} [description] The description of the sticker
	   * @property {string} [tags] The Discord name of a unicode emoji representing the sticker's expression
	   * @property {string} [reason] Reason for editing this sticker
	   */

	  /**
	   * Edits the sticker.
	   * @param {GuildStickerEditOptions} options The options to provide
	   * @returns {Promise<Sticker>}
	   * @example
	   * // Update the name of a sticker
	   * sticker.edit({ name: 'new name' })
	   *   .then(sticker => console.log(`Updated the name of the sticker to ${sticker.name}`))
	   *   .catch(console.error);
	   */
	  edit(options) {
	    return this.guild.stickers.edit(this, options);
	  }

	  /**
	   * Deletes the sticker.
	   * @returns {Promise<Sticker>}
	   * @param {string} [reason] Reason for deleting this sticker
	   * @example
	   * // Delete a message
	   * sticker.delete()
	   *   .then(sticker => console.log(`Deleted sticker ${sticker.name}`))
	   *   .catch(console.error);
	   */
	  async delete(reason) {
	    await this.guild.stickers.delete(this, reason);
	    return this;
	  }

	  /**
	   * Whether this sticker is the same as another one.
	   * @param {Sticker|APISticker} other The sticker to compare it to
	   * @returns {boolean}
	   */
	  equals(other) {
	    if (other instanceof Sticker) {
	      return (
	        other.id === this.id &&
	        other.description === this.description &&
	        other.type === this.type &&
	        other.format === this.format &&
	        other.name === this.name &&
	        other.packId === this.packId &&
	        other.tags === this.tags &&
	        other.available === this.available &&
	        other.guildId === this.guildId &&
	        other.sortValue === this.sortValue
	      );
	    } else {
	      return (
	        other.id === this.id &&
	        other.description === this.description &&
	        other.name === this.name &&
	        other.tags === this.tags
	      );
	    }
	  }
	};

	Sticker.Sticker = Sticker$1;
	return Sticker;
}

var BaseGuildEmoji_1;
var hasRequiredBaseGuildEmoji;

function requireBaseGuildEmoji () {
	if (hasRequiredBaseGuildEmoji) return BaseGuildEmoji_1;
	hasRequiredBaseGuildEmoji = 1;

	const { Emoji } = requireEmoji$2();

	/**
	 * Parent class for {@link GuildEmoji} and {@link GuildPreviewEmoji}.
	 * @extends {Emoji}
	 * @abstract
	 */
	class BaseGuildEmoji extends Emoji {
	  constructor(client, data, guild) {
	    super(client, data);

	    /**
	     * The guild this emoji is a part of
	     * @type {Guild|GuildPreview}
	     */
	    this.guild = guild;

	    this.requiresColons = null;
	    this.managed = null;
	    this.available = null;

	    this._patch(data);
	  }

	  _patch(data) {
	    if ('name' in data) this.name = data.name;

	    if ('require_colons' in data) {
	      /**
	       * Whether or not this emoji requires colons surrounding it
	       * @type {?boolean}
	       */
	      this.requiresColons = data.require_colons;
	    }

	    if ('managed' in data) {
	      /**
	       * Whether this emoji is managed by an external service
	       * @type {?boolean}
	       */
	      this.managed = data.managed;
	    }

	    if ('available' in data) {
	      /**
	       * Whether this emoji is available
	       * @type {?boolean}
	       */
	      this.available = data.available;
	    }
	  }
	}

	/**
	 * Returns a URL for the emoji.
	 * @method imageURL
	 * @memberof BaseGuildEmoji
	 * @instance
	 * @param {BaseImageURLOptions} [options] Options for the image URL
	 * @returns {string}
	 */

	/**
	 * Returns a URL for the emoji.
	 * @name url
	 * @memberof BaseGuildEmoji
	 * @instance
	 * @type {string}
	 * @readonly
	 * @deprecated Use {@link BaseGuildEmoji#imageURL} instead.
	 */

	BaseGuildEmoji_1 = BaseGuildEmoji;
	return BaseGuildEmoji_1;
}

var GuildEmojiRoleManager_1;
var hasRequiredGuildEmojiRoleManager;

function requireGuildEmojiRoleManager () {
	if (hasRequiredGuildEmojiRoleManager) return GuildEmojiRoleManager_1;
	hasRequiredGuildEmojiRoleManager = 1;

	const { Collection } = requireDist$3();
	const DataManager = requireDataManager();
	const { DiscordjsTypeError, ErrorCodes } = requireErrors$1();
	const { Role } = requireRole$1();

	/**
	 * Manages API methods for roles belonging to emojis and stores their cache.
	 * @extends {DataManager}
	 */
	class GuildEmojiRoleManager extends DataManager {
	  constructor(emoji) {
	    super(emoji.client, Role);

	    /**
	     * The emoji belonging to this manager
	     * @type {GuildEmoji}
	     */
	    this.emoji = emoji;
	    /**
	     * The guild belonging to this manager
	     * @type {Guild}
	     */
	    this.guild = emoji.guild;
	  }

	  /**
	   * The cache of roles belonging to this emoji
	   * @type {Collection<Snowflake, Role>}
	   * @readonly
	   */
	  get cache() {
	    return this.guild.roles.cache.filter(role => this.emoji._roles.includes(role.id));
	  }

	  /**
	   * Adds a role (or multiple roles) to the list of roles that can use this emoji.
	   * @param {RoleResolvable|RoleResolvable[]|Collection<Snowflake, Role>} roleOrRoles The role or roles to add
	   * @returns {Promise<GuildEmoji>}
	   */
	  add(roleOrRoles) {
	    if (!Array.isArray(roleOrRoles) && !(roleOrRoles instanceof Collection)) roleOrRoles = [roleOrRoles];

	    const resolvedRoles = [];
	    for (const role of roleOrRoles.values()) {
	      const resolvedRole = this.guild.roles.resolveId(role);
	      if (!resolvedRole) {
	        return Promise.reject(new DiscordjsTypeError(ErrorCodes.InvalidElement, 'Array or Collection', 'roles', role));
	      }
	      resolvedRoles.push(resolvedRole);
	    }

	    const newRoles = [...new Set(resolvedRoles.concat(...this.cache.keys()))];
	    return this.set(newRoles);
	  }

	  /**
	   * Removes a role (or multiple roles) from the list of roles that can use this emoji.
	   * @param {RoleResolvable|RoleResolvable[]|Collection<Snowflake, Role>} roleOrRoles The role or roles to remove
	   * @returns {Promise<GuildEmoji>}
	   */
	  remove(roleOrRoles) {
	    if (!Array.isArray(roleOrRoles) && !(roleOrRoles instanceof Collection)) roleOrRoles = [roleOrRoles];

	    const resolvedRoleIds = [];
	    for (const role of roleOrRoles.values()) {
	      const roleId = this.guild.roles.resolveId(role);
	      if (!roleId) {
	        return Promise.reject(new DiscordjsTypeError(ErrorCodes.InvalidElement, 'Array or Collection', 'roles', role));
	      }
	      resolvedRoleIds.push(roleId);
	    }

	    const newRoles = [...this.cache.keys()].filter(id => !resolvedRoleIds.includes(id));
	    return this.set(newRoles);
	  }

	  /**
	   * Sets the role(s) that can use this emoji.
	   * @param {Collection<Snowflake, Role>|RoleResolvable[]} roles The roles or role ids to apply
	   * @returns {Promise<GuildEmoji>}
	   * @example
	   * // Set the emoji's roles to a single role
	   * guildEmoji.roles.set(['391156570408615936'])
	   *   .then(console.log)
	   *   .catch(console.error);
	   * @example
	   * // Remove all roles from an emoji
	   * guildEmoji.roles.set([])
	   *    .then(console.log)
	   *    .catch(console.error);
	   */
	  set(roles) {
	    return this.emoji.edit({ roles });
	  }

	  clone() {
	    const clone = new this.constructor(this.emoji);
	    clone._patch([...this.cache.keys()]);
	    return clone;
	  }

	  /**
	   * Patches the roles for this manager's cache
	   * @param {Snowflake[]} roles The new roles
	   * @private
	   */
	  _patch(roles) {
	    this.emoji._roles = roles;
	  }

	  valueOf() {
	    return this.cache;
	  }
	}

	GuildEmojiRoleManager_1 = GuildEmojiRoleManager;
	return GuildEmojiRoleManager_1;
}

var GuildEmoji_1;
var hasRequiredGuildEmoji;

function requireGuildEmoji () {
	if (hasRequiredGuildEmoji) return GuildEmoji_1;
	hasRequiredGuildEmoji = 1;

	const { PermissionFlagsBits } = requireV10$6();
	const BaseGuildEmoji = requireBaseGuildEmoji();
	const { DiscordjsError, ErrorCodes } = requireErrors$1();
	const GuildEmojiRoleManager = requireGuildEmojiRoleManager();

	/**
	 * Represents a custom emoji.
	 * @extends {BaseGuildEmoji}
	 */
	class GuildEmoji extends BaseGuildEmoji {
	  constructor(client, data, guild) {
	    super(client, data, guild);

	    /**
	     * The user who created this emoji
	     * @type {?User}
	     */
	    this.author = null;

	    /**
	     * Array of role ids this emoji is active for
	     * @name GuildEmoji#_roles
	     * @type {Snowflake[]}
	     * @private
	     */
	    Object.defineProperty(this, '_roles', { value: [], writable: true });

	    this._patch(data);
	  }

	  /**
	   * The guild this emoji is part of
	   * @type {Guild}
	   * @name GuildEmoji#guild
	   */

	  _clone() {
	    const clone = super._clone();
	    clone._roles = this._roles.slice();
	    return clone;
	  }

	  _patch(data) {
	    super._patch(data);

	    if (data.user) this.author = this.client.users._add(data.user);
	    if (data.roles) this._roles = data.roles;
	  }

	  /**
	   * Whether the emoji is deletable by the client user
	   * @type {boolean}
	   * @readonly
	   */
	  get deletable() {
	    if (!this.guild.members.me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);
	    return !this.managed && this.guild.members.me.permissions.has(PermissionFlagsBits.ManageGuildExpressions);
	  }

	  /**
	   * A manager for roles this emoji is active for.
	   * @type {GuildEmojiRoleManager}
	   * @readonly
	   */
	  get roles() {
	    return new GuildEmojiRoleManager(this);
	  }

	  /**
	   * Fetches the author for this emoji
	   * @returns {Promise<User>}
	   */
	  fetchAuthor() {
	    return this.guild.emojis.fetchAuthor(this);
	  }

	  /**
	   * Data for editing an emoji.
	   * @typedef {Object} GuildEmojiEditOptions
	   * @property {string} [name] The name of the emoji
	   * @property {Collection<Snowflake, Role>|RoleResolvable[]} [roles] Roles to restrict emoji to
	   * @property {string} [reason] Reason for editing this emoji
	   */

	  /**
	   * Edits the emoji.
	   * @param {GuildEmojiEditOptions} options The options to provide
	   * @returns {Promise<GuildEmoji>}
	   * @example
	   * // Edit an emoji
	   * emoji.edit({ name: 'newemoji' })
	   *   .then(emoji => console.log(`Edited emoji ${emoji}`))
	   *   .catch(console.error);
	   */
	  edit(options) {
	    return this.guild.emojis.edit(this.id, options);
	  }

	  /**
	   * Sets the name of the emoji.
	   * @param {string} name The new name for the emoji
	   * @param {string} [reason] Reason for changing the emoji's name
	   * @returns {Promise<GuildEmoji>}
	   */
	  setName(name, reason) {
	    return this.edit({ name, reason });
	  }

	  /**
	   * Deletes the emoji.
	   * @param {string} [reason] Reason for deleting the emoji
	   * @returns {Promise<GuildEmoji>}
	   */
	  async delete(reason) {
	    await this.guild.emojis.delete(this.id, reason);
	    return this;
	  }

	  /**
	   * Whether this emoji is the same as another one.
	   * @param {GuildEmoji|APIEmoji} other The emoji to compare it to
	   * @returns {boolean}
	   */
	  equals(other) {
	    if (other instanceof GuildEmoji) {
	      return (
	        other.id === this.id &&
	        other.name === this.name &&
	        other.managed === this.managed &&
	        other.available === this.available &&
	        other.requiresColons === this.requiresColons &&
	        other.roles.cache.size === this.roles.cache.size &&
	        other.roles.cache.every(role => this.roles.cache.has(role.id))
	      );
	    } else {
	      return (
	        other.id === this.id &&
	        other.name === this.name &&
	        other.roles.length === this.roles.cache.size &&
	        other.roles.every(role => this.roles.cache.has(role))
	      );
	    }
	  }
	}

	GuildEmoji_1 = GuildEmoji;
	return GuildEmoji_1;
}

var ReactionEmoji_1;
var hasRequiredReactionEmoji;

function requireReactionEmoji () {
	if (hasRequiredReactionEmoji) return ReactionEmoji_1;
	hasRequiredReactionEmoji = 1;

	const { Emoji } = requireEmoji$2();
	const { flatten } = requireUtil();

	/**
	 * Represents a limited emoji set used for both custom and unicode emojis. Custom emojis
	 * will use this class opposed to the Emoji class when the client doesn't know enough
	 * information about them.
	 * @extends {Emoji}
	 */
	class ReactionEmoji extends Emoji {
	  constructor(reaction, emoji) {
	    super(reaction.message.client, emoji);
	    /**
	     * The message reaction this emoji refers to
	     * @type {MessageReaction}
	     */
	    this.reaction = reaction;
	  }

	  toJSON() {
	    return flatten(this, { identifier: true });
	  }

	  valueOf() {
	    return this.id;
	  }
	}

	ReactionEmoji_1 = ReactionEmoji;
	return ReactionEmoji_1;
}

var UserFlagsBitField_1;
var hasRequiredUserFlagsBitField;

function requireUserFlagsBitField () {
	if (hasRequiredUserFlagsBitField) return UserFlagsBitField_1;
	hasRequiredUserFlagsBitField = 1;

	const { UserFlags } = requireV10$6();
	const BitField = requireBitField();

	/**
	 * Data structure that makes it easy to interact with a {@link User#flags} bitfield.
	 * @extends {BitField}
	 */
	class UserFlagsBitField extends BitField {
	  /**
	   * Numeric user flags.
	   * @type {UserFlags}
	   * @memberof UserFlagsBitField
	   */
	  static Flags = UserFlags;
	}

	/**
	 * @name UserFlagsBitField
	 * @kind constructor
	 * @memberof UserFlagsBitField
	 * @param {BitFieldResolvable} [bits=0] Bit(s) to read from
	 */

	/**
	 * Bitfield of the packed bits
	 * @type {number}
	 * @name UserFlagsBitField#bitfield
	 */

	UserFlagsBitField_1 = UserFlagsBitField;
	return UserFlagsBitField_1;
}

var User_1;
var hasRequiredUser$3;

function requireUser$3 () {
	if (hasRequiredUser$3) return User_1;
	hasRequiredUser$3 = 1;

	const { userMention } = requireDist$2();
	const { calculateUserDefaultAvatarIndex } = requireWeb();
	const { DiscordSnowflake } = /*@__PURE__*/ requireCjs$2();
	const Base = requireBase$2();
	const TextBasedChannel = requireTextBasedChannel();
	const UserFlagsBitField = requireUserFlagsBitField();

	/**
	 * Represents a user on Discord.
	 * @implements {TextBasedChannel}
	 * @extends {Base}
	 */
	class User extends Base {
	  constructor(client, data) {
	    super(client);

	    /**
	     * The user's id
	     * @type {Snowflake}
	     */
	    this.id = data.id;

	    this.bot = null;

	    this.system = null;

	    this.flags = null;

	    this._patch(data);
	  }

	  _patch(data) {
	    if ('username' in data) {
	      /**
	       * The username of the user
	       * @type {?string}
	       */
	      this.username = data.username;
	    } else {
	      this.username ??= null;
	    }

	    if ('global_name' in data) {
	      /**
	       * The global name of this user
	       * @type {?string}
	       */
	      this.globalName = data.global_name;
	    } else {
	      this.globalName ??= null;
	    }

	    if ('bot' in data) {
	      /**
	       * Whether or not the user is a bot
	       * @type {?boolean}
	       */
	      this.bot = Boolean(data.bot);
	    } else if (!this.partial && typeof this.bot !== 'boolean') {
	      this.bot = false;
	    }

	    if ('discriminator' in data) {
	      /**
	       * The discriminator of this user
	       * <info>`'0'`, or a 4-digit stringified number if they're using the legacy username system</info>
	       * @type {?string}
	       */
	      this.discriminator = data.discriminator;
	    } else {
	      this.discriminator ??= null;
	    }

	    if ('avatar' in data) {
	      /**
	       * The user avatar's hash
	       * @type {?string}
	       */
	      this.avatar = data.avatar;
	    } else {
	      this.avatar ??= null;
	    }

	    if ('banner' in data) {
	      /**
	       * The user banner's hash
	       * <info>The user must be force fetched for this property to be present or be updated</info>
	       * @type {?string}
	       */
	      this.banner = data.banner;
	    } else if (this.banner !== null) {
	      this.banner ??= undefined;
	    }

	    if ('accent_color' in data) {
	      /**
	       * The base 10 accent color of the user's banner
	       * <info>The user must be force fetched for this property to be present or be updated</info>
	       * @type {?number}
	       */
	      this.accentColor = data.accent_color;
	    } else if (this.accentColor !== null) {
	      this.accentColor ??= undefined;
	    }

	    if ('system' in data) {
	      /**
	       * Whether the user is an Official Discord System user (part of the urgent message system)
	       * @type {?boolean}
	       */
	      this.system = Boolean(data.system);
	    } else if (!this.partial && typeof this.system !== 'boolean') {
	      this.system = false;
	    }

	    if ('public_flags' in data) {
	      /**
	       * The flags for this user
	       * @type {?UserFlagsBitField}
	       */
	      this.flags = new UserFlagsBitField(data.public_flags);
	    }

	    if ('avatar_decoration' in data) {
	      /**
	       * The user avatar decoration's hash
	       * @type {?string}
	       * @deprecated Use `avatarDecorationData` instead
	       */
	      this.avatarDecoration = data.avatar_decoration;
	    } else {
	      this.avatarDecoration ??= null;
	    }

	    /**
	     * @typedef {Object} AvatarDecorationData
	     * @property {string} asset The avatar decoration hash
	     * @property {Snowflake} skuId The id of the avatar decoration's SKU
	     */

	    if (data.avatar_decoration_data) {
	      /**
	       * The user avatar decoration's data
	       * @type {?AvatarDecorationData}
	       */
	      this.avatarDecorationData = {
	        asset: data.avatar_decoration_data.asset,
	        skuId: data.avatar_decoration_data.sku_id,
	      };
	    } else {
	      this.avatarDecorationData = null;
	    }
	  }

	  /**
	   * Whether this User is a partial
	   * @type {boolean}
	   * @readonly
	   */
	  get partial() {
	    return typeof this.username !== 'string';
	  }

	  /**
	   * The timestamp the user was created at
	   * @type {number}
	   * @readonly
	   */
	  get createdTimestamp() {
	    return DiscordSnowflake.timestampFrom(this.id);
	  }

	  /**
	   * The time the user was created at
	   * @type {Date}
	   * @readonly
	   */
	  get createdAt() {
	    return new Date(this.createdTimestamp);
	  }

	  /**
	   * A link to the user's avatar.
	   * @param {ImageURLOptions} [options={}] Options for the image URL
	   * @returns {?string}
	   */
	  avatarURL(options = {}) {
	    return this.avatar && this.client.rest.cdn.avatar(this.id, this.avatar, options);
	  }

	  /**
	   * A link to the user's avatar decoration.
	   * @param {BaseImageURLOptions} [options={}] Options for the image URL
	   * @returns {?string}
	   */
	  avatarDecorationURL(options = {}) {
	    if (this.avatarDecorationData) {
	      return this.client.rest.cdn.avatarDecoration(this.avatarDecorationData.asset);
	    }

	    return this.avatarDecoration && this.client.rest.cdn.avatarDecoration(this.id, this.avatarDecoration, options);
	  }

	  /**
	   * A link to the user's default avatar
	   * @type {string}
	   * @readonly
	   */
	  get defaultAvatarURL() {
	    const index = this.discriminator === '0' ? calculateUserDefaultAvatarIndex(this.id) : this.discriminator % 5;
	    return this.client.rest.cdn.defaultAvatar(index);
	  }

	  /**
	   * A link to the user's avatar if they have one.
	   * Otherwise a link to their default avatar will be returned.
	   * @param {ImageURLOptions} [options={}] Options for the image URL
	   * @returns {string}
	   */
	  displayAvatarURL(options) {
	    return this.avatarURL(options) ?? this.defaultAvatarURL;
	  }

	  /**
	   * The hexadecimal version of the user accent color, with a leading hash
	   * <info>The user must be force fetched for this property to be present</info>
	   * @type {?string}
	   * @readonly
	   */
	  get hexAccentColor() {
	    if (typeof this.accentColor !== 'number') return this.accentColor;
	    return `#${this.accentColor.toString(16).padStart(6, '0')}`;
	  }

	  /**
	   * A link to the user's banner. See {@link User#banner} for more info
	   * @param {ImageURLOptions} [options={}] Options for the image URL
	   * @returns {?string}
	   */
	  bannerURL(options = {}) {
	    return this.banner && this.client.rest.cdn.banner(this.id, this.banner, options);
	  }

	  /**
	   * The tag of this user
	   * <info>This user's username, or their legacy tag (e.g. `hydrabolt#0001`)
	   * if they're using the legacy username system</info>
	   * @type {?string}
	   * @readonly
	   */
	  get tag() {
	    return typeof this.username === 'string'
	      ? this.discriminator === '0'
	        ? this.username
	        : `${this.username}#${this.discriminator}`
	      : null;
	  }

	  /**
	   * The global name of this user, or their username if they don't have one
	   * @type {?string}
	   * @readonly
	   */
	  get displayName() {
	    return this.globalName ?? this.username;
	  }

	  /**
	   * The DM between the client's user and this user
	   * @type {?DMChannel}
	   * @readonly
	   */
	  get dmChannel() {
	    return this.client.users.dmChannel(this.id);
	  }

	  /**
	   * Creates a DM channel between the client and the user.
	   * @param {boolean} [force=false] Whether to skip the cache check and request the API
	   * @returns {Promise<DMChannel>}
	   */
	  createDM(force = false) {
	    return this.client.users.createDM(this.id, { force });
	  }

	  /**
	   * Deletes a DM channel (if one exists) between the client and the user. Resolves with the channel if successful.
	   * @returns {Promise<DMChannel>}
	   */
	  deleteDM() {
	    return this.client.users.deleteDM(this.id);
	  }

	  /**
	   * Checks if the user is equal to another.
	   * It compares id, username, discriminator, avatar, banner, accent color, and bot flags.
	   * It is recommended to compare equality by using `user.id === user2.id` unless you want to compare all properties.
	   * @param {User} user User to compare with
	   * @returns {boolean}
	   */
	  equals(user) {
	    return (
	      user &&
	      this.id === user.id &&
	      this.username === user.username &&
	      this.discriminator === user.discriminator &&
	      this.globalName === user.globalName &&
	      this.avatar === user.avatar &&
	      this.flags?.bitfield === user.flags?.bitfield &&
	      this.banner === user.banner &&
	      this.accentColor === user.accentColor &&
	      this.avatarDecoration === user.avatarDecoration &&
	      this.avatarDecorationData?.asset === user.avatarDecorationData?.asset &&
	      this.avatarDecorationData?.skuId === user.avatarDecorationData?.skuId
	    );
	  }

	  /**
	   * Compares the user with an API user object
	   * @param {APIUser} user The API user object to compare
	   * @returns {boolean}
	   * @private
	   */
	  _equals(user) {
	    return (
	      user &&
	      this.id === user.id &&
	      this.username === user.username &&
	      this.discriminator === user.discriminator &&
	      this.globalName === user.global_name &&
	      this.avatar === user.avatar &&
	      this.flags?.bitfield === user.public_flags &&
	      ('banner' in user ? this.banner === user.banner : true) &&
	      ('accent_color' in user ? this.accentColor === user.accent_color : true) &&
	      ('avatar_decoration' in user ? this.avatarDecoration === user.avatar_decoration : true) &&
	      ('avatar_decoration_data' in user
	        ? this.avatarDecorationData?.asset === user.avatar_decoration_data?.asset &&
	          this.avatarDecorationData?.skuId === user.avatar_decoration_data?.sku_id
	        : true)
	    );
	  }

	  /**
	   * Fetches this user's flags.
	   * @param {boolean} [force=false] Whether to skip the cache check and request the API
	   * @returns {Promise<UserFlagsBitField>}
	   */
	  fetchFlags(force = false) {
	    return this.client.users.fetchFlags(this.id, { force });
	  }

	  /**
	   * Fetches this user.
	   * @param {boolean} [force=true] Whether to skip the cache check and request the API
	   * @returns {Promise<User>}
	   */
	  fetch(force = true) {
	    return this.client.users.fetch(this.id, { force });
	  }

	  /**
	   * When concatenated with a string, this automatically returns the user's mention instead of the User object.
	   * @returns {string}
	   * @example
	   * // Logs: Hello from <@123456789012345678>!
	   * console.log(`Hello from ${user}!`);
	   */
	  toString() {
	    return userMention(this.id);
	  }

	  toJSON(...props) {
	    const json = super.toJSON(
	      {
	        createdTimestamp: true,
	        defaultAvatarURL: true,
	        hexAccentColor: true,
	        tag: true,
	      },
	      ...props,
	    );
	    json.avatarURL = this.avatarURL();
	    json.displayAvatarURL = this.displayAvatarURL();
	    json.bannerURL = this.banner ? this.bannerURL() : this.banner;
	    return json;
	  }
	}

	/**
	 * Sends a message to this user.
	 * @method send
	 * @memberof User
	 * @instance
	 * @param {string|MessagePayload|MessageCreateOptions} options The options to provide
	 * @returns {Promise<Message>}
	 * @example
	 * // Send a direct message
	 * user.send('Hello!')
	 *   .then(message => console.log(`Sent message: ${message.content} to ${user.tag}`))
	 *   .catch(console.error);
	 */

	TextBasedChannel.applyToClass(User);

	User_1 = User;
	return User_1;
}

var ReactionUserManager_1;
var hasRequiredReactionUserManager;

function requireReactionUserManager () {
	if (hasRequiredReactionUserManager) return ReactionUserManager_1;
	hasRequiredReactionUserManager = 1;

	const { Collection } = requireDist$3();
	const { makeURLSearchParams } = requireWeb();
	const { ReactionType, Routes } = requireV10$6();
	const CachedManager = requireCachedManager();
	const { DiscordjsError, ErrorCodes } = requireErrors$1();
	const User = requireUser$3();

	/**
	 * Manages API methods for users who reacted to a reaction and stores their cache.
	 * @extends {CachedManager}
	 */
	class ReactionUserManager extends CachedManager {
	  constructor(reaction, iterable) {
	    super(reaction.client, User, iterable);

	    /**
	     * The reaction that this manager belongs to
	     * @type {MessageReaction}
	     */
	    this.reaction = reaction;
	  }

	  /**
	   * The cache of this manager
	   * @type {Collection<Snowflake, User>}
	   * @name ReactionUserManager#cache
	   */

	  /**
	   * Options used to fetch users who gave a reaction.
	   * @typedef {Object} FetchReactionUsersOptions
	   * @property {ReactionType} [type=ReactionType.Normal] The reaction type to fetch
	   * @property {number} [limit=100] The maximum amount of users to fetch, defaults to `100`
	   * @property {Snowflake} [after] Limit fetching users to those with an id greater than the supplied id
	   */

	  /**
	   * Fetches all the users that gave this reaction. Resolves with a collection of users, mapped by their ids.
	   * @param {FetchReactionUsersOptions} [options] Options for fetching the users
	   * @returns {Promise<Collection<Snowflake, User>>}
	   */
	  async fetch({ type = ReactionType.Normal, limit = 100, after } = {}) {
	    const message = this.reaction.message;
	    const query = makeURLSearchParams({ limit, after, type });
	    const data = await this.client.rest.get(
	      Routes.channelMessageReaction(message.channelId, message.id, this.reaction.emoji.identifier),
	      { query },
	    );
	    const users = new Collection();
	    for (const rawUser of data) {
	      const user = this.client.users._add(rawUser);
	      this.cache.set(user.id, user);
	      users.set(user.id, user);
	    }
	    return users;
	  }

	  /**
	   * Removes a user from this reaction.
	   * @param {UserResolvable} [user=this.client.user] The user to remove the reaction of
	   * @returns {Promise<MessageReaction>}
	   */
	  async remove(user = this.client.user) {
	    const userId = this.client.users.resolveId(user);
	    if (!userId) throw new DiscordjsError(ErrorCodes.ReactionResolveUser);
	    const message = this.reaction.message;
	    const route =
	      userId === this.client.user.id
	        ? Routes.channelMessageOwnReaction(message.channelId, message.id, this.reaction.emoji.identifier)
	        : Routes.channelMessageUserReaction(message.channelId, message.id, this.reaction.emoji.identifier, userId);
	    await this.client.rest.delete(route);
	    return this.reaction;
	  }
	}

	ReactionUserManager_1 = ReactionUserManager;
	return ReactionUserManager_1;
}

var MessageReaction_1;
var hasRequiredMessageReaction;

function requireMessageReaction () {
	if (hasRequiredMessageReaction) return MessageReaction_1;
	hasRequiredMessageReaction = 1;

	const { Routes } = requireV10$6();
	const GuildEmoji = requireGuildEmoji();
	const ReactionEmoji = requireReactionEmoji();
	const ReactionUserManager = requireReactionUserManager();
	const { flatten } = requireUtil();

	/**
	 * Represents a reaction to a message.
	 */
	class MessageReaction {
	  constructor(client, data, message) {
	    /**
	     * The client that instantiated this message reaction
	     * @name MessageReaction#client
	     * @type {Client}
	     * @readonly
	     */
	    Object.defineProperty(this, 'client', { value: client });

	    /**
	     * The message that this reaction refers to
	     * @type {Message}
	     */
	    this.message = message;

	    /**
	     * Whether the client has given this reaction
	     * @type {boolean}
	     */
	    this.me = data.me;

	    /**
	     * Whether the client has super-reacted using this emoji
	     * @type {boolean}
	     */
	    this.meBurst = data.me_burst;

	    /**
	     * A manager of the users that have given this reaction
	     * @type {ReactionUserManager}
	     */
	    this.users = new ReactionUserManager(this, this.me ? [client.user] : []);

	    this._emoji = new ReactionEmoji(this, data.emoji);

	    this.burstColors = null;

	    this._patch(data);
	  }

	  _patch(data) {
	    if ('burst_colors' in data) {
	      /**
	       * Hexadecimal colors used for this super reaction
	       * @type {?string[]}
	       */
	      this.burstColors = data.burst_colors;
	    }

	    if ('count' in data) {
	      /**
	       * The number of people that have given the same reaction
	       * @type {?number}
	       */
	      this.count ??= data.count;
	    }

	    if ('count_details' in data) {
	      /**
	       * The reaction count details object contains information about super and normal reaction counts.
	       * @typedef {Object} ReactionCountDetailsData
	       * @property {number} burst Count of super reactions
	       * @property {number} normal Count of normal reactions
	       */

	      /**
	       * The reaction count details object contains information about super and normal reaction counts.
	       * @type {ReactionCountDetailsData}
	       */
	      this.countDetails = {
	        burst: data.count_details.burst,
	        normal: data.count_details.normal,
	      };
	    } else {
	      this.countDetails ??= { burst: 0, normal: 0 };
	    }
	  }

	  /**
	   * Makes the client user react with this reaction
	   * @returns {Promise<MessageReaction>}
	   */
	  react() {
	    return this.message.react(this.emoji);
	  }

	  /**
	   * Removes all users from this reaction.
	   * @returns {Promise<MessageReaction>}
	   */
	  async remove() {
	    await this.client.rest.delete(
	      Routes.channelMessageReaction(this.message.channelId, this.message.id, this._emoji.identifier),
	    );
	    return this;
	  }

	  /**
	   * The emoji of this reaction. Either a {@link GuildEmoji} object for known custom emojis, or a {@link ReactionEmoji}
	   * object which has fewer properties. Whatever the prototype of the emoji, it will still have
	   * `name`, `id`, `identifier` and `toString()`
	   * @type {GuildEmoji|ReactionEmoji}
	   * @readonly
	   */
	  get emoji() {
	    if (this._emoji instanceof GuildEmoji) return this._emoji;
	    // Check to see if the emoji has become known to the client
	    if (this._emoji.id) {
	      const emojis = this.message.client.emojis.cache;
	      if (emojis.has(this._emoji.id)) {
	        const emoji = emojis.get(this._emoji.id);
	        this._emoji = emoji;
	        return emoji;
	      }
	    }
	    return this._emoji;
	  }

	  /**
	   * Whether or not this reaction is a partial
	   * @type {boolean}
	   * @readonly
	   */
	  get partial() {
	    return this.count === null;
	  }

	  /**
	   * Fetch this reaction.
	   * @returns {Promise<MessageReaction>}
	   */
	  async fetch() {
	    const message = await this.message.fetch();
	    const existing = message.reactions.cache.get(this.emoji.id ?? this.emoji.name);
	    // The reaction won't get set when it has been completely removed
	    this._patch(existing ?? { count: 0 });
	    return this;
	  }

	  toJSON() {
	    return flatten(this, { emoji: 'emojiId', message: 'messageId' });
	  }

	  valueOf() {
	    return this._emoji.id ?? this._emoji.name;
	  }

	  _add(user, burst) {
	    if (this.partial) return;
	    this.users.cache.set(user.id, user);
	    if (!this.me || user.id !== this.message.client.user.id || this.count === 0) {
	      this.count++;
	      if (burst) this.countDetails.burst++;
	      else this.countDetails.normal++;
	    }
	    if (user.id === this.message.client.user.id) {
	      if (burst) this.meBurst = true;
	      else this.me = true;
	    }
	  }
	  _remove(user, burst) {
	    if (this.partial) return;
	    this.users.cache.delete(user.id);
	    if (!this.me || user.id !== this.message.client.user.id) {
	      this.count--;
	      if (burst) this.countDetails.burst--;
	      else this.countDetails.normal--;
	    }
	    if (user.id === this.message.client.user.id) {
	      if (burst) this.meBurst = false;
	      else this.me = false;
	    }
	    if (this.count <= 0 && this.users.cache.size === 0) {
	      this.message.reactions.cache.delete(this.emoji.id ?? this.emoji.name);
	    }
	  }
	}

	MessageReaction_1 = MessageReaction;
	return MessageReaction_1;
}

var ReactionManager_1;
var hasRequiredReactionManager;

function requireReactionManager () {
	if (hasRequiredReactionManager) return ReactionManager_1;
	hasRequiredReactionManager = 1;

	const { Routes } = requireV10$6();
	const CachedManager = requireCachedManager();
	const MessageReaction = requireMessageReaction();

	/**
	 * Manages API methods for reactions and holds their cache.
	 * @extends {CachedManager}
	 */
	class ReactionManager extends CachedManager {
	  constructor(message, iterable) {
	    super(message.client, MessageReaction, iterable);

	    /**
	     * The message that this manager belongs to
	     * @type {Message}
	     */
	    this.message = message;
	  }

	  _add(data, cache) {
	    return super._add(data, cache, { id: data.emoji.id ?? data.emoji.name, extras: [this.message] });
	  }

	  /**
	   * The reaction cache of this manager
	   * @type {Collection<string|Snowflake, MessageReaction>}
	   * @name ReactionManager#cache
	   */

	  /**
	   * Data that can be resolved to a MessageReaction object. This can be:
	   * * A MessageReaction
	   * * A Snowflake
	   * * The Unicode representation of an emoji
	   * @typedef {MessageReaction|Snowflake} MessageReactionResolvable
	   */

	  /**
	   * Resolves a {@link MessageReactionResolvable} to a {@link MessageReaction} object.
	   * @method resolve
	   * @memberof ReactionManager
	   * @instance
	   * @param {MessageReactionResolvable} reaction The MessageReaction to resolve
	   * @returns {?MessageReaction}
	   */

	  /**
	   * Resolves a {@link MessageReactionResolvable} to a {@link MessageReaction} id.
	   * @method resolveId
	   * @memberof ReactionManager
	   * @instance
	   * @param {MessageReactionResolvable} reaction The MessageReaction to resolve
	   * @returns {?Snowflake}
	   */

	  /**
	   * Removes all reactions from a message.
	   * @returns {Promise<Message>}
	   */
	  async removeAll() {
	    await this.client.rest.delete(Routes.channelMessageAllReactions(this.message.channelId, this.message.id));
	    return this.message;
	  }
	}

	ReactionManager_1 = ReactionManager;
	return ReactionManager_1;
}

var hasRequiredMessage;

function requireMessage () {
	if (hasRequiredMessage) return Message;
	hasRequiredMessage = 1;

	const { Collection } = requireDist$3();
	const { messageLink } = requireDist$2();
	const { DiscordSnowflake } = /*@__PURE__*/ requireCjs$2();
	const {
	  InteractionType,
	  ChannelType,
	  MessageType,
	  MessageFlags,
	  PermissionFlagsBits,
	} = requireV10$6();
	const Attachment = requireAttachment$1();
	const Base = requireBase$2();
	const ClientApplication = requireClientApplication();
	const Embed = requireEmbed();
	const InteractionCollector = requireInteractionCollector();
	const Mentions = requireMessageMentions();
	const MessagePayload = requireMessagePayload();
	const { Poll } = requirePoll$2();
	const ReactionCollector = requireReactionCollector();
	const { Sticker } = requireSticker$2();
	const { DiscordjsError, ErrorCodes } = requireErrors$1();
	const ReactionManager = requireReactionManager();
	const { createComponent } = requireComponents();
	const { NonSystemMessageTypes, MaxBulkDeletableMessageAge, UndeletableMessageTypes } = requireConstants$1();
	const MessageFlagsBitField = requireMessageFlagsBitField();
	const PermissionsBitField = requirePermissionsBitField();
	const { _transformAPIMessageInteractionMetadata } = requireTransformers();
	const { cleanContent, resolvePartialEmoji, transformResolved } = requireUtil();

	/**
	 * Represents a message on Discord.
	 * @extends {Base}
	 */
	let Message$1 = class Message extends Base {
	  constructor(client, data) {
	    super(client);

	    /**
	     * The id of the channel the message was sent in
	     * @type {Snowflake}
	     */
	    this.channelId = data.channel_id;

	    /**
	     * The id of the guild the message was sent in, if any
	     * @type {?Snowflake}
	     */
	    this.guildId = data.guild_id ?? this.channel?.guild?.id ?? null;

	    this._patch(data);
	  }

	  _patch(data) {
	    /**
	     * The message's id
	     * @type {Snowflake}
	     */
	    this.id = data.id;

	    /**
	     * The timestamp the message was sent at
	     * @type {number}
	     */
	    this.createdTimestamp = DiscordSnowflake.timestampFrom(this.id);

	    if ('type' in data) {
	      /**
	       * The type of the message
	       * @type {?MessageType}
	       */
	      this.type = data.type;

	      /**
	       * Whether or not this message was sent by Discord, not actually a user (e.g. pin notifications)
	       * @type {?boolean}
	       */
	      this.system = !NonSystemMessageTypes.includes(this.type);
	    } else {
	      this.system ??= null;
	      this.type ??= null;
	    }

	    if ('content' in data) {
	      /**
	       * The content of the message.
	       * <info>This property requires the {@link GatewayIntentBits.MessageContent} privileged intent
	       * in a guild for messages that do not mention the client.</info>
	       * @type {?string}
	       */
	      this.content = data.content;
	    } else {
	      this.content ??= null;
	    }

	    if ('author' in data) {
	      /**
	       * The author of the message
	       * @type {?User}
	       */
	      this.author = this.client.users._add(data.author, !data.webhook_id);
	    } else {
	      this.author ??= null;
	    }

	    if ('pinned' in data) {
	      /**
	       * Whether or not this message is pinned
	       * @type {?boolean}
	       */
	      this.pinned = Boolean(data.pinned);
	    } else {
	      this.pinned ??= null;
	    }

	    if ('tts' in data) {
	      /**
	       * Whether or not the message was Text-To-Speech
	       * @type {?boolean}
	       */
	      this.tts = data.tts;
	    } else {
	      this.tts ??= null;
	    }

	    if ('nonce' in data) {
	      /**
	       * A random number or string used for checking message delivery
	       * <warn>This is only received after the message was sent successfully, and
	       * lost if re-fetched</warn>
	       * @type {?string}
	       */
	      this.nonce = data.nonce;
	    } else {
	      this.nonce ??= null;
	    }

	    if ('embeds' in data) {
	      /**
	       * An array of embeds in the message - e.g. YouTube Player.
	       * <info>This property requires the {@link GatewayIntentBits.MessageContent} privileged intent
	       * in a guild for messages that do not mention the client.</info>
	       * @type {Embed[]}
	       */
	      this.embeds = data.embeds.map(embed => new Embed(embed));
	    } else {
	      this.embeds = this.embeds?.slice() ?? [];
	    }

	    if ('components' in data) {
	      /**
	       * An array of action rows in the message.
	       * <info>This property requires the {@link GatewayIntentBits.MessageContent} privileged intent
	       * in a guild for messages that do not mention the client.</info>
	       * @type {ActionRow[]}
	       */
	      this.components = data.components.map(component => createComponent(component));
	    } else {
	      this.components = this.components?.slice() ?? [];
	    }

	    if ('attachments' in data) {
	      /**
	       * A collection of attachments in the message - e.g. Pictures - mapped by their ids.
	       * <info>This property requires the {@link GatewayIntentBits.MessageContent} privileged intent
	       * in a guild for messages that do not mention the client.</info>
	       * @type {Collection<Snowflake, Attachment>}
	       */
	      this.attachments = new Collection();
	      if (data.attachments) {
	        for (const attachment of data.attachments) {
	          this.attachments.set(attachment.id, new Attachment(attachment));
	        }
	      }
	    } else {
	      this.attachments = new Collection(this.attachments);
	    }

	    if ('sticker_items' in data || 'stickers' in data) {
	      /**
	       * A collection of stickers in the message
	       * @type {Collection<Snowflake, Sticker>}
	       */
	      this.stickers = new Collection(
	        (data.sticker_items ?? data.stickers)?.map(sticker => [sticker.id, new Sticker(this.client, sticker)]),
	      );
	    } else {
	      this.stickers = new Collection(this.stickers);
	    }

	    if ('position' in data) {
	      /**
	       * A generally increasing integer (there may be gaps or duplicates) that represents
	       * the approximate position of the message in a thread.
	       * @type {?number}
	       */
	      this.position = data.position;
	    } else {
	      this.position ??= null;
	    }

	    if ('role_subscription_data' in data) {
	      /**
	       * Role subscription data found on {@link MessageType.RoleSubscriptionPurchase} messages.
	       * @typedef {Object} RoleSubscriptionData
	       * @property {Snowflake} roleSubscriptionListingId The id of the SKU and listing the user is subscribed to
	       * @property {string} tierName The name of the tier the user is subscribed to
	       * @property {number} totalMonthsSubscribed The total number of months the user has been subscribed for
	       * @property {boolean} isRenewal Whether this notification is a renewal
	       */

	      /**
	       * The data of the role subscription purchase or renewal.
	       * <info>This is present on {@link MessageType.RoleSubscriptionPurchase} messages.</info>
	       * @type {?RoleSubscriptionData}
	       */
	      this.roleSubscriptionData = {
	        roleSubscriptionListingId: data.role_subscription_data.role_subscription_listing_id,
	        tierName: data.role_subscription_data.tier_name,
	        totalMonthsSubscribed: data.role_subscription_data.total_months_subscribed,
	        isRenewal: data.role_subscription_data.is_renewal,
	      };
	    } else {
	      this.roleSubscriptionData ??= null;
	    }

	    if ('resolved' in data) {
	      /**
	       * Resolved data from auto-populated select menus.
	       * @typedef {Object} CommandInteractionResolvedData
	       */
	      this.resolved = transformResolved(
	        { client: this.client, guild: this.guild, channel: this.channel },
	        data.resolved,
	      );
	    } else {
	      this.resolved ??= null;
	    }

	    // Discord sends null if the message has not been edited
	    if (data.edited_timestamp) {
	      /**
	       * The timestamp the message was last edited at (if applicable)
	       * @type {?number}
	       */
	      this.editedTimestamp = Date.parse(data.edited_timestamp);
	    } else {
	      this.editedTimestamp ??= null;
	    }

	    if ('reactions' in data) {
	      /**
	       * A manager of the reactions belonging to this message
	       * @type {ReactionManager}
	       */
	      this.reactions = new ReactionManager(this);
	      if (data.reactions?.length > 0) {
	        for (const reaction of data.reactions) {
	          this.reactions._add(reaction);
	        }
	      }
	    } else {
	      this.reactions ??= new ReactionManager(this);
	    }

	    if (!this.mentions) {
	      /**
	       * All valid mentions that the message contains
	       * @type {MessageMentions}
	       */
	      this.mentions = new Mentions(
	        this,
	        data.mentions,
	        data.mention_roles,
	        data.mention_everyone,
	        data.mention_channels,
	        data.referenced_message?.author,
	      );
	    } else {
	      this.mentions = new Mentions(
	        this,
	        data.mentions ?? this.mentions.users,
	        data.mention_roles ?? this.mentions.roles,
	        data.mention_everyone ?? this.mentions.everyone,
	        data.mention_channels ?? this.mentions.crosspostedChannels,
	        data.referenced_message?.author ?? this.mentions.repliedUser,
	      );
	    }

	    if ('webhook_id' in data) {
	      /**
	       * The id of the webhook that sent the message, if applicable
	       * @type {?Snowflake}
	       */
	      this.webhookId = data.webhook_id;
	    } else {
	      this.webhookId ??= null;
	    }

	    if ('application' in data) {
	      /**
	       * Supplemental application information for group activities
	       * @type {?ClientApplication}
	       */
	      this.groupActivityApplication = new ClientApplication(this.client, data.application);
	    } else {
	      this.groupActivityApplication ??= null;
	    }

	    if ('application_id' in data) {
	      /**
	       * The id of the application of the interaction that sent this message, if any
	       * @type {?Snowflake}
	       */
	      this.applicationId = data.application_id;
	    } else {
	      this.applicationId ??= null;
	    }

	    if ('activity' in data) {
	      /**
	       * Group activity
	       * @type {?MessageActivity}
	       */
	      this.activity = {
	        partyId: data.activity.party_id,
	        type: data.activity.type,
	      };
	    } else {
	      this.activity ??= null;
	    }

	    if ('thread' in data) {
	      this.client.channels._add(data.thread, this.guild);
	    }

	    if (this.member && data.member) {
	      this.member._patch(data.member);
	    } else if (data.member && this.guild && this.author) {
	      this.guild.members._add(Object.assign(data.member, { user: this.author }));
	    }

	    if ('flags' in data) {
	      /**
	       * Flags that are applied to the message
	       * @type {Readonly<MessageFlagsBitField>}
	       */
	      this.flags = new MessageFlagsBitField(data.flags).freeze();
	    } else {
	      this.flags = new MessageFlagsBitField(this.flags).freeze();
	    }

	    /**
	     * Reference data sent in a message that contains ids identifying the referenced message.
	     * This can be present in the following types of message:
	     * * Crossposted messages (`MessageFlags.Crossposted`)
	     * * {@link MessageType.ChannelPinnedMessage}
	     * * {@link MessageType.ChannelFollowAdd}
	     * * {@link MessageType.Reply}
	     * * {@link MessageType.ThreadStarterMessage}
	     * @see {@link https://discord.com/developers/docs/resources/message#message-object-message-types}
	     * @typedef {Object} MessageReference
	     * @property {Snowflake} channelId The channel id that was referenced
	     * @property {Snowflake|undefined} guildId The guild id that was referenced
	     * @property {Snowflake|undefined} messageId The message id that was referenced
	     */

	    if ('message_reference' in data) {
	      /**
	       * Message reference data
	       * @type {?MessageReference}
	       */
	      this.reference = {
	        channelId: data.message_reference.channel_id,
	        guildId: data.message_reference.guild_id,
	        messageId: data.message_reference.message_id,
	      };
	    } else {
	      this.reference ??= null;
	    }

	    if (data.referenced_message) {
	      this.channel?.messages._add({ guild_id: data.message_reference?.guild_id, ...data.referenced_message });
	    }

	    if (data.interaction_metadata) {
	      /**
	       * Partial data of the interaction that a message is a result of
	       * @typedef {Object} MessageInteractionMetadata
	       * @property {Snowflake} id The interaction's id
	       * @property {InteractionType} type The type of the interaction
	       * @property {User} user The user that invoked the interaction
	       * @property {APIAuthorizingIntegrationOwnersMap} authorizingIntegrationOwners
	       * Ids for installation context(s) related to an interaction
	       * @property {?Snowflake} originalResponseMessageId
	       * Id of the original response message. Present only on follow-up messages
	       * @property {?Snowflake} interactedMessageId
	       * Id of the message that contained interactive component.
	       * Present only on messages created from component interactions
	       * @property {?MessageInteractionMetadata} triggeringInteractionMetadata
	       * Metadata for the interaction that was used to open the modal. Present only on modal submit interactions
	       */

	      /**
	       * Partial data of the interaction that this message is a result of
	       * @type {?MessageInteractionMetadata}
	       */
	      this.interactionMetadata = _transformAPIMessageInteractionMetadata(this.client, data.interaction_metadata);
	    } else {
	      this.interactionMetadata ??= null;
	    }

	    /**
	     * Partial data of the interaction that a message is a reply to
	     * @typedef {Object} MessageInteraction
	     * @property {Snowflake} id The interaction's id
	     * @property {InteractionType} type The type of the interaction
	     * @property {string} commandName The name of the interaction's application command,
	     * as well as the subcommand and subcommand group, where applicable
	     * @property {User} user The user that invoked the interaction
	     * @deprecated Use {@link Message#interactionMetadata} instead.
	     */

	    if (data.interaction) {
	      /**
	       * Partial data of the interaction that this message is a reply to
	       * @type {?MessageInteraction}
	       * @deprecated Use {@link Message#interactionMetadata} instead.
	       */
	      this.interaction = {
	        id: data.interaction.id,
	        type: data.interaction.type,
	        commandName: data.interaction.name,
	        user: this.client.users._add(data.interaction.user),
	      };
	    } else {
	      this.interaction ??= null;
	    }

	    if (data.poll) {
	      /**
	       * The poll that was sent with the message
	       * @type {?Poll}
	       */
	      this.poll = new Poll(this.client, data.poll, this);
	    } else {
	      this.poll ??= null;
	    }

	    /**
	     * A call associated with a message
	     * @typedef {Object} MessageCall
	     * @property {Readonly<?Date>} endedAt The time the call ended
	     * @property {?number} endedTimestamp The timestamp the call ended
	     * @property {Snowflake[]} participants The ids of the users that participated in the call
	     */

	    if (data.call) {
	      /**
	       * The call associated with the message
	       * @type {?MessageCall}
	       */
	      this.call = {
	        endedTimestamp: data.call.ended_timestamp ? Date.parse(data.call.ended_timestamp) : null,
	        participants: data.call.participants,
	        get endedAt() {
	          return this.endedTimestamp && new Date(this.endedTimestamp);
	        },
	      };
	    } else {
	      this.call ??= null;
	    }
	  }

	  /**
	   * The channel that the message was sent in
	   * @type {TextBasedChannels}
	   * @readonly
	   */
	  get channel() {
	    return this.client.channels.resolve(this.channelId);
	  }

	  /**
	   * Whether or not this message is a partial
	   * @type {boolean}
	   * @readonly
	   */
	  get partial() {
	    return typeof this.content !== 'string' || !this.author;
	  }

	  /**
	   * Represents the author of the message as a guild member.
	   * Only available if the message comes from a guild where the author is still a member
	   * @type {?GuildMember}
	   * @readonly
	   */
	  get member() {
	    return this.guild?.members.resolve(this.author) ?? null;
	  }

	  /**
	   * The time the message was sent at
	   * @type {Date}
	   * @readonly
	   */
	  get createdAt() {
	    return new Date(this.createdTimestamp);
	  }

	  /**
	   * The time the message was last edited at (if applicable)
	   * @type {?Date}
	   * @readonly
	   */
	  get editedAt() {
	    return this.editedTimestamp && new Date(this.editedTimestamp);
	  }

	  /**
	   * The guild the message was sent in (if in a guild channel)
	   * @type {?Guild}
	   * @readonly
	   */
	  get guild() {
	    return this.client.guilds.resolve(this.guildId) ?? this.channel?.guild ?? null;
	  }

	  /**
	   * Whether this message has a thread associated with it
	   * @type {boolean}
	   * @readonly
	   */
	  get hasThread() {
	    return this.flags.has(MessageFlags.HasThread);
	  }

	  /**
	   * The thread started by this message
	   * <info>This property is not suitable for checking whether a message has a thread,
	   * use {@link Message#hasThread} instead.</info>
	   * @type {?ThreadChannel}
	   * @readonly
	   */
	  get thread() {
	    return this.channel?.threads?.resolve(this.id) ?? null;
	  }

	  /**
	   * The URL to jump to this message
	   * @type {string}
	   * @readonly
	   */
	  get url() {
	    return this.inGuild() ? messageLink(this.channelId, this.id, this.guildId) : messageLink(this.channelId, this.id);
	  }

	  /**
	   * The message contents with all mentions replaced by the equivalent text.
	   * If mentions cannot be resolved to a name, the relevant mention in the message content will not be converted.
	   * @type {?string}
	   * @readonly
	   */
	  get cleanContent() {
	    // eslint-disable-next-line eqeqeq
	    return this.content != null ? cleanContent(this.content, this.channel) : null;
	  }

	  /**
	   * Creates a reaction collector.
	   * @param {ReactionCollectorOptions} [options={}] Options to send to the collector
	   * @returns {ReactionCollector}
	   * @example
	   * // Create a reaction collector
	   * const filter = (reaction, user) => reaction.emoji.name === '👌' && user.id === 'someId';
	   * const collector = message.createReactionCollector({ filter, time: 15_000 });
	   * collector.on('collect', r => console.log(`Collected ${r.emoji.name}`));
	   * collector.on('end', collected => console.log(`Collected ${collected.size} items`));
	   */
	  createReactionCollector(options = {}) {
	    return new ReactionCollector(this, options);
	  }

	  /**
	   * An object containing the same properties as CollectorOptions, but a few more:
	   * @typedef {ReactionCollectorOptions} AwaitReactionsOptions
	   * @property {string[]} [errors] Stop/end reasons that cause the promise to reject
	   */

	  /**
	   * Similar to createReactionCollector but in promise form.
	   * Resolves with a collection of reactions that pass the specified filter.
	   * @param {AwaitReactionsOptions} [options={}] Optional options to pass to the internal collector
	   * @returns {Promise<Collection<string | Snowflake, MessageReaction>>}
	   * @example
	   * // Create a reaction collector
	   * const filter = (reaction, user) => reaction.emoji.name === '👌' && user.id === 'someId'
	   * message.awaitReactions({ filter, time: 15_000 })
	   *   .then(collected => console.log(`Collected ${collected.size} reactions`))
	   *   .catch(console.error);
	   */
	  awaitReactions(options = {}) {
	    return new Promise((resolve, reject) => {
	      const collector = this.createReactionCollector(options);
	      collector.once('end', (reactions, reason) => {
	        if (options.errors?.includes(reason)) reject(reactions);
	        else resolve(reactions);
	      });
	    });
	  }

	  /**
	   * @typedef {CollectorOptions} MessageComponentCollectorOptions
	   * @property {ComponentType} [componentType] The type of component to listen for
	   * @property {number} [max] The maximum total amount of interactions to collect
	   * @property {number} [maxComponents] The maximum number of components to collect
	   * @property {number} [maxUsers] The maximum number of users to interact
	   */

	  /**
	   * Creates a message component interaction collector.
	   * @param {MessageComponentCollectorOptions} [options={}] Options to send to the collector
	   * @returns {InteractionCollector}
	   * @example
	   * // Create a message component interaction collector
	   * const filter = (interaction) => interaction.customId === 'button' && interaction.user.id === 'someId';
	   * const collector = message.createMessageComponentCollector({ filter, time: 15_000 });
	   * collector.on('collect', i => console.log(`Collected ${i.customId}`));
	   * collector.on('end', collected => console.log(`Collected ${collected.size} items`));
	   */
	  createMessageComponentCollector(options = {}) {
	    return new InteractionCollector(this.client, {
	      ...options,
	      interactionType: InteractionType.MessageComponent,
	      message: this,
	    });
	  }

	  /**
	   * An object containing the same properties as CollectorOptions, but a few more:
	   * @typedef {Object} AwaitMessageComponentOptions
	   * @property {CollectorFilter} [filter] The filter applied to this collector
	   * @property {number} [time] Time to wait for an interaction before rejecting
	   * @property {ComponentType} [componentType] The type of component interaction to collect
	   * @property {number} [idle] Time to wait without another message component interaction before ending the collector
	   * @property {boolean} [dispose] Whether to remove the message component interaction after collecting
	   * @property {InteractionResponse} [interactionResponse] The interaction response to collect interactions from
	   */

	  /**
	   * Collects a single component interaction that passes the filter.
	   * The Promise will reject if the time expires.
	   * @param {AwaitMessageComponentOptions} [options={}] Options to pass to the internal collector
	   * @returns {Promise<MessageComponentInteraction>}
	   * @example
	   * // Collect a message component interaction
	   * const filter = (interaction) => interaction.customId === 'button' && interaction.user.id === 'someId';
	   * message.awaitMessageComponent({ filter, time: 15_000 })
	   *   .then(interaction => console.log(`${interaction.customId} was clicked!`))
	   *   .catch(console.error);
	   */
	  awaitMessageComponent(options = {}) {
	    const _options = { ...options, max: 1 };
	    return new Promise((resolve, reject) => {
	      const collector = this.createMessageComponentCollector(_options);
	      collector.once('end', (interactions, reason) => {
	        const interaction = interactions.first();
	        if (interaction) resolve(interaction);
	        else reject(new DiscordjsError(ErrorCodes.InteractionCollectorError, reason));
	      });
	    });
	  }

	  /**
	   * Whether the message is editable by the client user
	   * @type {boolean}
	   * @readonly
	   */
	  get editable() {
	    const precheck = Boolean(this.author.id === this.client.user.id && (!this.guild || this.channel?.viewable));

	    // Regardless of permissions thread messages cannot be edited if
	    // the thread is archived or the thread is locked and the bot does not have permission to manage threads.
	    if (this.channel?.isThread()) {
	      if (this.channel.archived) return false;
	      if (this.channel.locked) {
	        const permissions = this.channel.permissionsFor(this.client.user);
	        if (!permissions?.has(PermissionFlagsBits.ManageThreads, true)) return false;
	      }
	    }

	    return precheck;
	  }

	  /**
	   * Whether the message is deletable by the client user
	   * @type {boolean}
	   * @readonly
	   */
	  get deletable() {
	    if (UndeletableMessageTypes.includes(this.type)) return false;

	    if (!this.guild) {
	      return this.author.id === this.client.user.id;
	    }
	    // DMChannel does not have viewable property, so check viewable after proved that message is on a guild.
	    if (!this.channel?.viewable) {
	      return false;
	    }

	    const permissions = this.channel?.permissionsFor(this.client.user);
	    if (!permissions) return false;
	    // This flag allows deleting even if timed out
	    if (permissions.has(PermissionFlagsBits.Administrator, false)) return true;

	    // The auto moderation action message author is the reference message author
	    return (
	      (this.type !== MessageType.AutoModerationAction && this.author.id === this.client.user.id) ||
	      (permissions.has(PermissionFlagsBits.ManageMessages, false) && !this.guild.members.me.isCommunicationDisabled())
	    );
	  }

	  /**
	   * Whether the message is bulk deletable by the client user
	   * @type {boolean}
	   * @readonly
	   * @example
	   * // Filter for bulk deletable messages
	   * channel.bulkDelete(messages.filter(message => message.bulkDeletable));
	   */
	  get bulkDeletable() {
	    return (
	      (this.inGuild() &&
	        Date.now() - this.createdTimestamp < MaxBulkDeletableMessageAge &&
	        this.deletable &&
	        this.channel?.permissionsFor(this.client.user).has(PermissionFlagsBits.ManageMessages, false)) ??
	      false
	    );
	  }

	  /**
	   * Whether the message is pinnable by the client user
	   * @type {boolean}
	   * @readonly
	   */
	  get pinnable() {
	    const { channel } = this;
	    return Boolean(
	      !this.system &&
	        (!this.guild ||
	          (channel?.viewable &&
	            channel?.permissionsFor(this.client.user)?.has(PermissionFlagsBits.ManageMessages, false))),
	    );
	  }

	  /**
	   * Fetches the Message this crosspost/reply/pin-add references, if available to the client
	   * @returns {Promise<Message>}
	   */
	  async fetchReference() {
	    if (!this.reference) throw new DiscordjsError(ErrorCodes.MessageReferenceMissing);
	    const { channelId, messageId } = this.reference;
	    if (!messageId) throw new DiscordjsError(ErrorCodes.MessageReferenceMissing);
	    const channel = this.client.channels.resolve(channelId);
	    if (!channel) throw new DiscordjsError(ErrorCodes.GuildChannelResolve);
	    const message = await channel.messages.fetch(messageId);
	    return message;
	  }

	  /**
	   * Whether the message is crosspostable by the client user
	   * @type {boolean}
	   * @readonly
	   */
	  get crosspostable() {
	    const bitfield =
	      PermissionFlagsBits.SendMessages |
	      (this.author.id === this.client.user.id ? PermissionsBitField.DefaultBit : PermissionFlagsBits.ManageMessages);
	    const { channel } = this;
	    return Boolean(
	      channel?.type === ChannelType.GuildAnnouncement &&
	        !this.flags.has(MessageFlags.Crossposted) &&
	        this.type === MessageType.Default &&
	        !this.poll &&
	        channel.viewable &&
	        channel.permissionsFor(this.client.user)?.has(bitfield, false),
	    );
	  }

	  /**
	   * Edits the content of the message.
	   * @param {string|MessagePayload|MessageEditOptions} options The options to provide
	   * @returns {Promise<Message>}
	   * @example
	   * // Update the content of a message
	   * message.edit('This is my new content!')
	   *   .then(msg => console.log(`Updated the content of a message to ${msg.content}`))
	   *   .catch(console.error);
	   */
	  edit(options) {
	    if (!this.channel) return Promise.reject(new DiscordjsError(ErrorCodes.ChannelNotCached));
	    return this.channel.messages.edit(this, options);
	  }

	  /**
	   * Publishes a message in an announcement channel to all channels following it.
	   * @returns {Promise<Message>}
	   * @example
	   * // Crosspost a message
	   * if (message.channel.type === ChannelType.GuildAnnouncement) {
	   *   message.crosspost()
	   *     .then(() => console.log('Crossposted message'))
	   *     .catch(console.error);
	   * }
	   */
	  crosspost() {
	    if (!this.channel) return Promise.reject(new DiscordjsError(ErrorCodes.ChannelNotCached));
	    return this.channel.messages.crosspost(this.id);
	  }

	  /**
	   * Pins this message to the channel's pinned messages.
	   * @param {string} [reason] Reason for pinning
	   * @returns {Promise<Message>}
	   * @example
	   * // Pin a message
	   * message.pin()
	   *   .then(console.log)
	   *   .catch(console.error)
	   */
	  async pin(reason) {
	    if (!this.channel) throw new DiscordjsError(ErrorCodes.ChannelNotCached);
	    await this.channel.messages.pin(this.id, reason);
	    return this;
	  }

	  /**
	   * Unpins this message from the channel's pinned messages.
	   * @param {string} [reason] Reason for unpinning
	   * @returns {Promise<Message>}
	   * @example
	   * // Unpin a message
	   * message.unpin()
	   *   .then(console.log)
	   *   .catch(console.error)
	   */
	  async unpin(reason) {
	    if (!this.channel) throw new DiscordjsError(ErrorCodes.ChannelNotCached);
	    await this.channel.messages.unpin(this.id, reason);
	    return this;
	  }

	  /**
	   * Adds a reaction to the message.
	   * @param {EmojiIdentifierResolvable} emoji The emoji to react with
	   * @returns {Promise<MessageReaction>}
	   * @example
	   * // React to a message with a unicode emoji
	   * message.react('🤔')
	   *   .then(console.log)
	   *   .catch(console.error);
	   * @example
	   * // React to a message with a custom emoji
	   * message.react(message.guild.emojis.cache.get('123456789012345678'))
	   *   .then(console.log)
	   *   .catch(console.error);
	   */
	  async react(emoji) {
	    if (!this.channel) throw new DiscordjsError(ErrorCodes.ChannelNotCached);
	    await this.channel.messages.react(this.id, emoji);

	    return this.client.actions.MessageReactionAdd.handle(
	      {
	        [this.client.actions.injectedUser]: this.client.user,
	        [this.client.actions.injectedChannel]: this.channel,
	        [this.client.actions.injectedMessage]: this,
	        emoji: resolvePartialEmoji(emoji),
	      },
	      true,
	    ).reaction;
	  }

	  /**
	   * Deletes the message.
	   * @returns {Promise<Message>}
	   * @example
	   * // Delete a message
	   * message.delete()
	   *   .then(msg => console.log(`Deleted message from ${msg.author.username}`))
	   *   .catch(console.error);
	   */
	  async delete() {
	    if (!this.channel) throw new DiscordjsError(ErrorCodes.ChannelNotCached);
	    await this.channel.messages.delete(this.id);
	    return this;
	  }

	  /**
	   * Options provided when sending a message as an inline reply.
	   * @typedef {BaseMessageCreateOptions} MessageReplyOptions
	   * @property {boolean} [failIfNotExists=this.client.options.failIfNotExists] Whether to error if the referenced
	   * message does not exist (creates a standard message in this case when false)
	   */

	  /**
	   * Send an inline reply to this message.
	   * @param {string|MessagePayload|MessageReplyOptions} options The options to provide
	   * @returns {Promise<Message>}
	   * @example
	   * // Reply to a message
	   * message.reply('This is a reply!')
	   *   .then(() => console.log(`Replied to message "${message.content}"`))
	   *   .catch(console.error);
	   */
	  reply(options) {
	    if (!this.channel) return Promise.reject(new DiscordjsError(ErrorCodes.ChannelNotCached));
	    let data;

	    if (options instanceof MessagePayload) {
	      data = options;
	    } else {
	      data = MessagePayload.create(this, options, {
	        reply: {
	          messageReference: this,
	          failIfNotExists: options?.failIfNotExists ?? this.client.options.failIfNotExists,
	        },
	      });
	    }
	    return this.channel.send(data);
	  }

	  /**
	   * Options for starting a thread on a message.
	   * @typedef {Object} StartThreadOptions
	   * @property {string} name The name of the new thread
	   * @property {ThreadAutoArchiveDuration} [autoArchiveDuration=this.channel.defaultAutoArchiveDuration] The amount of
	   * time after which the thread should automatically archive in case of no recent activity
	   * @property {string} [reason] Reason for creating the thread
	   * @property {number} [rateLimitPerUser] The rate limit per user (slowmode) for the thread in seconds
	   */

	  /**
	   * Create a new public thread from this message
	   * @see GuildTextThreadManager#create
	   * @param {StartThreadOptions} [options] Options for starting a thread on this message
	   * @returns {Promise<ThreadChannel>}
	   */
	  startThread(options = {}) {
	    if (!this.channel) return Promise.reject(new DiscordjsError(ErrorCodes.ChannelNotCached));
	    if (![ChannelType.GuildText, ChannelType.GuildAnnouncement].includes(this.channel.type)) {
	      return Promise.reject(new DiscordjsError(ErrorCodes.MessageThreadParent));
	    }
	    if (this.hasThread) return Promise.reject(new DiscordjsError(ErrorCodes.MessageExistingThread));
	    return this.channel.threads.create({ ...options, startMessage: this });
	  }

	  /**
	   * Fetch this message.
	   * @param {boolean} [force=true] Whether to skip the cache check and request the API
	   * @returns {Promise<Message>}
	   */
	  fetch(force = true) {
	    if (!this.channel) return Promise.reject(new DiscordjsError(ErrorCodes.ChannelNotCached));
	    return this.channel.messages.fetch({ message: this.id, force });
	  }

	  /**
	   * Fetches the webhook used to create this message.
	   * @returns {Promise<?Webhook>}
	   */
	  fetchWebhook() {
	    if (!this.webhookId) return Promise.reject(new DiscordjsError(ErrorCodes.WebhookMessage));
	    if (this.webhookId === this.applicationId) return Promise.reject(new DiscordjsError(ErrorCodes.WebhookApplication));
	    return this.client.fetchWebhook(this.webhookId);
	  }

	  /**
	   * Suppresses or unsuppresses embeds on a message.
	   * @param {boolean} [suppress=true] If the embeds should be suppressed or not
	   * @returns {Promise<Message>}
	   */
	  suppressEmbeds(suppress = true) {
	    const flags = new MessageFlagsBitField(this.flags.bitfield);

	    if (suppress) {
	      flags.add(MessageFlags.SuppressEmbeds);
	    } else {
	      flags.remove(MessageFlags.SuppressEmbeds);
	    }

	    return this.edit({ flags });
	  }

	  /**
	   * Removes the attachments from this message.
	   * @returns {Promise<Message>}
	   */
	  removeAttachments() {
	    return this.edit({ attachments: [] });
	  }

	  /**
	   * Resolves a component by a custom id.
	   * @param {string} customId The custom id to resolve against
	   * @returns {?MessageActionRowComponent}
	   */
	  resolveComponent(customId) {
	    return this.components.flatMap(row => row.components).find(component => component.customId === customId) ?? null;
	  }

	  /**
	   * Used mainly internally. Whether two messages are identical in properties. If you want to compare messages
	   * without checking all the properties, use `message.id === message2.id`, which is much more efficient. This
	   * method allows you to see if there are differences in content, embeds, attachments, nonce and tts properties.
	   * @param {Message} message The message to compare it to
	   * @param {APIMessage} rawData Raw data passed through the WebSocket about this message
	   * @returns {boolean}
	   */
	  equals(message, rawData) {
	    if (!message) return false;
	    const embedUpdate = !message.author && !message.attachments;
	    if (embedUpdate) return this.id === message.id && this.embeds.length === message.embeds.length;

	    let equal =
	      this.id === message.id &&
	      this.author.id === message.author.id &&
	      this.content === message.content &&
	      this.nonce === message.nonce &&
	      this.tts === message.tts &&
	      this.attachments.size === message.attachments.size &&
	      this.embeds.length === message.embeds.length &&
	      this.attachments.every(attachment => message.attachments.has(attachment.id)) &&
	      this.embeds.every((embed, index) => embed.equals(message.embeds[index]));

	    if (equal && rawData) {
	      equal =
	        this.mentions.everyone === message.mentions.everyone &&
	        this.createdTimestamp === Date.parse(rawData.timestamp) &&
	        this.editedTimestamp === Date.parse(rawData.edited_timestamp);
	    }

	    return equal;
	  }

	  /**
	   * Whether this message is from a guild.
	   * @returns {boolean}
	   */
	  inGuild() {
	    return Boolean(this.guildId);
	  }

	  /**
	   * When concatenated with a string, this automatically concatenates the message's content instead of the object.
	   * @returns {string}
	   * @example
	   * // Logs: Message: This is a message!
	   * console.log(`Message: ${message}`);
	   */
	  toString() {
	    return this.content;
	  }

	  toJSON() {
	    return super.toJSON({
	      channel: 'channelId',
	      author: 'authorId',
	      groupActivityApplication: 'groupActivityApplicationId',
	      guild: 'guildId',
	      cleanContent: true,
	      member: false,
	      reactions: false,
	    });
	  }
	};

	Message.Message = Message$1;
	return Message;
}

var Webhook_1;
var hasRequiredWebhook$2;

function requireWebhook$2 () {
	if (hasRequiredWebhook$2) return Webhook_1;
	hasRequiredWebhook$2 = 1;

	const { makeURLSearchParams } = requireWeb();
	const { lazy } = requireDist$7();
	const { DiscordSnowflake } = /*@__PURE__*/ requireCjs$2();
	const { Routes, WebhookType } = requireV10$6();
	const MessagePayload = requireMessagePayload();
	const { DiscordjsError, ErrorCodes } = requireErrors$1();
	const { resolveImage } = requireDataResolver();

	const getMessage = lazy(() => requireMessage().Message);

	/**
	 * Represents a webhook.
	 */
	class Webhook {
	  constructor(client, data) {
	    /**
	     * The client that instantiated the webhook
	     * @name Webhook#client
	     * @type {Client}
	     * @readonly
	     */
	    Object.defineProperty(this, 'client', { value: client });
	    if (data) this._patch(data);
	  }

	  _patch(data) {
	    if ('name' in data) {
	      /**
	       * The name of the webhook
	       * @type {string}
	       */
	      this.name = data.name;
	    }

	    /**
	     * The token for the webhook, unavailable for follower webhooks and webhooks owned by another application.
	     * @name Webhook#token
	     * @type {?string}
	     */
	    Object.defineProperty(this, 'token', {
	      value: data.token ?? null,
	      writable: true,
	      configurable: true,
	    });

	    if ('avatar' in data) {
	      /**
	       * The avatar for the webhook
	       * @type {?string}
	       */
	      this.avatar = data.avatar;
	    }

	    /**
	     * The webhook's id
	     * @type {Snowflake}
	     */
	    this.id = data.id;

	    if ('type' in data) {
	      /**
	       * The type of the webhook
	       * @type {WebhookType}
	       */
	      this.type = data.type;
	    }

	    if ('guild_id' in data) {
	      /**
	       * The guild the webhook belongs to
	       * @type {Snowflake}
	       */
	      this.guildId = data.guild_id;
	    }

	    if ('channel_id' in data) {
	      /**
	       * The id of the channel the webhook belongs to
	       * @type {Snowflake}
	       */
	      this.channelId = data.channel_id;
	    }

	    if ('user' in data) {
	      /**
	       * The owner of the webhook
	       * @type {?(User|APIUser)}
	       */
	      this.owner = this.client.users?._add(data.user) ?? data.user;
	    } else {
	      this.owner ??= null;
	    }

	    if ('application_id' in data) {
	      /**
	       * The application that created this webhook
	       * @type {?Snowflake}
	       */
	      this.applicationId = data.application_id;
	    } else {
	      this.applicationId ??= null;
	    }

	    if ('source_guild' in data) {
	      /**
	       * The source guild of the webhook
	       * @type {?(Guild|APIGuild)}
	       */
	      this.sourceGuild = this.client.guilds?.resolve(data.source_guild.id) ?? data.source_guild;
	    } else {
	      this.sourceGuild ??= null;
	    }

	    if ('source_channel' in data) {
	      /**
	       * The source channel of the webhook
	       * @type {?(NewsChannel|APIChannel)}
	       */
	      this.sourceChannel = this.client.channels?.resolve(data.source_channel?.id) ?? data.source_channel;
	    } else {
	      this.sourceChannel ??= null;
	    }
	  }

	  /**
	   * Options that can be passed into send.
	   * @typedef {BaseMessageOptionsWithPoll} WebhookMessageCreateOptions
	   * @property {boolean} [tts=false] Whether the message should be spoken aloud
	   * @property {MessageFlags} [flags] Which flags to set for the message.
	   * <info>Only the {@link MessageFlags.SuppressEmbeds} flag can be set.</info>
	   * @property {string} [username=this.name] Username override for the message
	   * @property {string} [avatarURL] Avatar URL override for the message
	   * @property {Snowflake} [threadId] The id of the thread in the channel to send to.
	   * <info>For interaction webhooks, this property is ignored</info>
	   * @property {string} [threadName] Name of the thread to create (only available if the webhook is in a forum channel)
	   * @property {Snowflake[]} [appliedTags]
	   * The tags to apply to the created thread (only available if the webhook is in a forum channel)
	   */

	  /**
	   * Options that can be passed into editMessage.
	   * @typedef {BaseMessageOptions} WebhookMessageEditOptions
	   * @property {Attachment[]} [attachments] Attachments to send with the message
	   * @property {Snowflake} [threadId] The id of the thread this message belongs to
	   * <info>For interaction webhooks, this property is ignored</info>
	   */

	  /**
	   * The channel the webhook belongs to
	   * @type {?(TextChannel|VoiceChannel|StageChannel|NewsChannel|ForumChannel|MediaChannel)}
	   * @readonly
	   */
	  get channel() {
	    return this.client.channels.resolve(this.channelId);
	  }

	  /**
	   * Sends a message with this webhook.
	   * @param {string|MessagePayload|WebhookMessageCreateOptions} options The options to provide
	   * @returns {Promise<Message>}
	   * @example
	   * // Send a basic message
	   * webhook.send('hello!')
	   *   .then(message => console.log(`Sent message: ${message.content}`))
	   *   .catch(console.error);
	   * @example
	   * // Send a basic message in a thread
	   * webhook.send({ content: 'hello!', threadId: '836856309672348295' })
	   *   .then(message => console.log(`Sent message: ${message.content}`))
	   *   .catch(console.error);
	   * @example
	   * // Send a remote file
	   * webhook.send({
	   *   files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']
	   * })
	   *   .then(console.log)
	   *   .catch(console.error);
	   * @example
	   * // Send a local file
	   * webhook.send({
	   *   files: [{
	   *     attachment: 'entire/path/to/file.jpg',
	   *     name: 'file.jpg'
	   *   }]
	   * })
	   *   .then(console.log)
	   *   .catch(console.error);
	   * @example
	   * // Send an embed with a local image inside
	   * webhook.send({
	   *   content: 'This is an embed',
	   *   embeds: [{
	   *     thumbnail: {
	   *          url: 'attachment://file.jpg'
	   *       }
	   *    }],
	   *    files: [{
	   *       attachment: 'entire/path/to/file.jpg',
	   *       name: 'file.jpg'
	   *    }]
	   * })
	   *   .then(console.log)
	   *   .catch(console.error);
	   */
	  async send(options) {
	    if (!this.token) throw new DiscordjsError(ErrorCodes.WebhookTokenUnavailable);

	    let messagePayload;

	    if (options instanceof MessagePayload) {
	      messagePayload = options.resolveBody();
	    } else {
	      messagePayload = MessagePayload.create(this, options).resolveBody();
	    }

	    const query = makeURLSearchParams({
	      wait: true,
	      thread_id: messagePayload.options.threadId,
	    });

	    const { body, files } = await messagePayload.resolveFiles();
	    const d = await this.client.rest.post(Routes.webhook(this.id, this.token), {
	      body,
	      files,
	      query,
	      auth: false,
	    });

	    if (!this.client.channels) return d;
	    return this.client.channels.cache.get(d.channel_id)?.messages._add(d, false) ?? new (getMessage())(this.client, d);
	  }

	  /**
	   * Sends a raw slack message with this webhook.
	   * @param {Object} body The raw body to send
	   * @returns {Promise<boolean>}
	   * @example
	   * // Send a slack message
	   * webhook.sendSlackMessage({
	   *   'username': 'Wumpus',
	   *   'attachments': [{
	   *     'pretext': 'this looks pretty cool',
	   *     'color': '#F0F',
	   *     'footer_icon': 'http://snek.s3.amazonaws.com/topSnek.png',
	   *     'footer': 'Powered by sneks',
	   *     'ts': Date.now() / 1_000
	   *   }]
	   * }).catch(console.error);
	   * @see {@link https://api.slack.com/messaging/webhooks}
	   */
	  async sendSlackMessage(body) {
	    if (!this.token) throw new DiscordjsError(ErrorCodes.WebhookTokenUnavailable);

	    const data = await this.client.rest.post(Routes.webhookPlatform(this.id, this.token, 'slack'), {
	      query: makeURLSearchParams({ wait: true }),
	      auth: false,
	      body,
	    });
	    return data.toString() === 'ok';
	  }

	  /**
	   * Options used to edit a {@link Webhook}.
	   * @typedef {Object} WebhookEditOptions
	   * @property {string} [name=this.name] The new name for the webhook
	   * @property {?(BufferResolvable)} [avatar] The new avatar for the webhook
	   * @property {GuildTextChannelResolvable|VoiceChannel|StageChannel|ForumChannel|MediaChannel} [channel]
	   * The new channel for the webhook
	   * @property {string} [reason] Reason for editing the webhook
	   */

	  /**
	   * Edits this webhook.
	   * @param {WebhookEditOptions} options Options for editing the webhook
	   * @returns {Promise<Webhook>}
	   */
	  async edit({ name = this.name, avatar, channel, reason }) {
	    if (avatar && !(typeof avatar === 'string' && avatar.startsWith('data:'))) {
	      avatar = await resolveImage(avatar);
	    }
	    channel &&= channel.id ?? channel;
	    const data = await this.client.rest.patch(Routes.webhook(this.id, channel ? undefined : this.token), {
	      body: { name, avatar, channel_id: channel },
	      reason,
	      auth: !this.token || Boolean(channel),
	    });

	    this.name = data.name;
	    this.avatar = data.avatar;
	    this.channelId = data.channel_id;
	    return this;
	  }

	  /**
	   * Options that can be passed into fetchMessage.
	   * @typedef {options} WebhookFetchMessageOptions
	   * @property {boolean} [cache=true] Whether to cache the message.
	   * @property {Snowflake} [threadId] The id of the thread this message belongs to.
	   * <info>For interaction webhooks, this property is ignored</info>
	   */

	  /**
	   * Gets a message that was sent by this webhook.
	   * @param {Snowflake|'@original'} message The id of the message to fetch
	   * @param {WebhookFetchMessageOptions} [options={}] The options to provide to fetch the message.
	   * @returns {Promise<Message>} Returns the message sent by this webhook
	   */
	  async fetchMessage(message, { threadId } = {}) {
	    if (!this.token) throw new DiscordjsError(ErrorCodes.WebhookTokenUnavailable);

	    const data = await this.client.rest.get(Routes.webhookMessage(this.id, this.token, message), {
	      query: threadId ? makeURLSearchParams({ thread_id: threadId }) : undefined,
	      auth: false,
	    });

	    if (!this.client.channels) return data;
	    return (
	      this.client.channels.cache.get(data.channel_id)?.messages._add(data, false) ??
	      new (getMessage())(this.client, data)
	    );
	  }

	  /**
	   * Edits a message that was sent by this webhook.
	   * @param {MessageResolvable|'@original'} message The message to edit
	   * @param {string|MessagePayload|WebhookMessageEditOptions} options The options to provide
	   * @returns {Promise<Message>} Returns the message edited by this webhook
	   */
	  async editMessage(message, options) {
	    if (!this.token) throw new DiscordjsError(ErrorCodes.WebhookTokenUnavailable);

	    let messagePayload;

	    if (options instanceof MessagePayload) messagePayload = options;
	    else messagePayload = MessagePayload.create(this, options);

	    const { body, files } = await messagePayload.resolveBody().resolveFiles();

	    const d = await this.client.rest.patch(
	      Routes.webhookMessage(this.id, this.token, typeof message === 'string' ? message : message.id),
	      {
	        body,
	        files,
	        query: messagePayload.options.threadId
	          ? makeURLSearchParams({ thread_id: messagePayload.options.threadId })
	          : undefined,
	        auth: false,
	      },
	    );

	    const channelManager = this.client.channels;
	    if (!channelManager) return d;

	    const messageManager = channelManager.cache.get(d.channel_id)?.messages;
	    if (!messageManager) return new (getMessage())(this.client, d);

	    const existing = messageManager.cache.get(d.id);
	    if (!existing) return messageManager._add(d);

	    const clone = existing._clone();
	    clone._patch(d);
	    return clone;
	  }

	  /**
	   * Deletes the webhook.
	   * @param {string} [reason] Reason for deleting this webhook
	   * @returns {Promise<void>}
	   */
	  delete(reason) {
	    return this.client.deleteWebhook(this.id, { token: this.token, reason });
	  }

	  /**
	   * Delete a message that was sent by this webhook.
	   * @param {MessageResolvable|'@original'} message The message to delete
	   * @param {Snowflake} [threadId] The id of the thread this message belongs to
	   * @returns {Promise<void>}
	   */
	  async deleteMessage(message, threadId) {
	    if (!this.token) throw new DiscordjsError(ErrorCodes.WebhookTokenUnavailable);

	    await this.client.rest.delete(
	      Routes.webhookMessage(this.id, this.token, typeof message === 'string' ? message : message.id),
	      {
	        query: threadId ? makeURLSearchParams({ thread_id: threadId }) : undefined,
	        auth: false,
	      },
	    );
	  }

	  /**
	   * The timestamp the webhook was created at
	   * @type {number}
	   * @readonly
	   */
	  get createdTimestamp() {
	    return DiscordSnowflake.timestampFrom(this.id);
	  }

	  /**
	   * The time the webhook was created at
	   * @type {Date}
	   * @readonly
	   */
	  get createdAt() {
	    return new Date(this.createdTimestamp);
	  }

	  /**
	   * The URL of this webhook
	   * @type {string}
	   * @readonly
	   */
	  get url() {
	    return this.client.options.rest.api + Routes.webhook(this.id, this.token);
	  }

	  /**
	   * A link to the webhook's avatar.
	   * @param {ImageURLOptions} [options={}] Options for the image URL
	   * @returns {?string}
	   */
	  avatarURL(options = {}) {
	    return this.avatar && this.client.rest.cdn.avatar(this.id, this.avatar, options);
	  }

	  /**
	   * Whether this webhook is created by a user.
	   * @returns {boolean}
	   */
	  isUserCreated() {
	    return Boolean(this.type === WebhookType.Incoming && this.owner && !this.owner.bot);
	  }

	  /**
	   * Whether this webhook is created by an application.
	   * @returns {boolean}
	   */
	  isApplicationCreated() {
	    return this.type === WebhookType.Application;
	  }

	  /**
	   * Whether or not this webhook is a channel follower webhook.
	   * @returns {boolean}
	   */
	  isChannelFollower() {
	    return this.type === WebhookType.ChannelFollower;
	  }

	  /**
	   * Whether or not this webhook is an incoming webhook.
	   * @returns {boolean}
	   */
	  isIncoming() {
	    return this.type === WebhookType.Incoming;
	  }

	  static applyToClass(structure, ignore = []) {
	    for (const prop of [
	      'send',
	      'sendSlackMessage',
	      'fetchMessage',
	      'edit',
	      'editMessage',
	      'delete',
	      'deleteMessage',
	      'createdTimestamp',
	      'createdAt',
	      'url',
	    ]) {
	      if (ignore.includes(prop)) continue;
	      Object.defineProperty(structure.prototype, prop, Object.getOwnPropertyDescriptor(Webhook.prototype, prop));
	    }
	  }
	}

	Webhook_1 = Webhook;
	return Webhook_1;
}

var WebhookClient_1;
var hasRequiredWebhookClient;

function requireWebhookClient () {
	if (hasRequiredWebhookClient) return WebhookClient_1;
	hasRequiredWebhookClient = 1;

	const BaseClient = requireBaseClient();
	const { DiscordjsError, ErrorCodes } = requireErrors$1();
	const Webhook = requireWebhook$2();
	const { parseWebhookURL } = requireUtil();

	/**
	 * The webhook client.
	 * @implements {Webhook}
	 * @extends {BaseClient}
	 */
	class WebhookClient extends BaseClient {
	  /**
	   * Represents the credentials used for a webhook in the form of its id and token.
	   * @typedef {Object} WebhookClientDataIdWithToken
	   * @property {Snowflake} id The webhook's id
	   * @property {string} token The webhook's token
	   */

	  /**
	   * Represents the credentials used for a webhook in the form of a URL.
	   * @typedef {Object} WebhookClientDataURL
	   * @property {string} url The full URL for the webhook
	   */

	  /**
	   * Represents the credentials used for a webhook.
	   * @typedef {WebhookClientDataIdWithToken|WebhookClientDataURL} WebhookClientData
	   */

	  /**
	   * Options for a webhook client.
	   * @typedef {Object} WebhookClientOptions
	   * @property {MessageMentionOptions} [allowedMentions] Default value for {@link BaseMessageOptions#allowedMentions}
	   * @property {RESTOptions} [rest] Options for the REST manager
	   */

	  /**
	   * @param {WebhookClientData} data The data of the webhook
	   * @param {WebhookClientOptions} [options] Options for the webhook client
	   */
	  constructor(data, options) {
	    super(options);
	    Object.defineProperty(this, 'client', { value: this });
	    let { id, token } = data;

	    if ('url' in data) {
	      const parsed = parseWebhookURL(data.url);
	      if (!parsed) {
	        throw new DiscordjsError(ErrorCodes.WebhookURLInvalid);
	      }

	      ({ id, token } = parsed);
	    }

	    this.id = id;
	    Object.defineProperty(this, 'token', { value: token, writable: true, configurable: true });
	  }

	  /**
	   * The options the webhook client was instantiated with.
	   * @type {WebhookClientOptions}
	   * @name WebhookClient#options
	   */

	  // These are here only for documentation purposes - they are implemented by Webhook
	  /* eslint-disable no-empty-function, valid-jsdoc */
	  /**
	   * Sends a message with this webhook.
	   * @param {string|MessagePayload|WebhookMessageCreateOptions} options The content for the reply
	   * @returns {Promise<APIMessage>}
	   */
	  send() {}

	  /**
	   * Gets a message that was sent by this webhook.
	   * @param {Snowflake} message The id of the message to fetch
	   * @param {WebhookFetchMessageOptions} [options={}] The options to provide to fetch the message.
	   * @returns {Promise<APIMessage>} Returns the message sent by this webhook
	   */
	  fetchMessage() {}

	  /**
	   * Edits a message that was sent by this webhook.
	   * @param {MessageResolvable} message The message to edit
	   * @param {string|MessagePayload|WebhookMessageEditOptions} options The options to provide
	   * @returns {Promise<APIMessage>} Returns the message edited by this webhook
	   */
	  editMessage() {}

	  sendSlackMessage() {}
	  edit() {}
	  delete() {}
	  deleteMessage() {}
	  get createdTimestamp() {}
	  get createdAt() {}
	  get url() {}
	}

	Webhook.applyToClass(WebhookClient);

	WebhookClient_1 = WebhookClient;
	return WebhookClient_1;
}

var GuildMember = {};

var VoiceState_1;
var hasRequiredVoiceState;

function requireVoiceState () {
	if (hasRequiredVoiceState) return VoiceState_1;
	hasRequiredVoiceState = 1;

	const { ChannelType, Routes } = requireV10$6();
	const Base = requireBase$2();
	const { DiscordjsError, DiscordjsTypeError, ErrorCodes } = requireErrors$1();

	/**
	 * Represents the voice state for a Guild Member.
	 * @extends {Base}
	 */
	class VoiceState extends Base {
	  constructor(guild, data) {
	    super(guild.client);
	    /**
	     * The guild of this voice state
	     * @type {Guild}
	     */
	    this.guild = guild;
	    /**
	     * The id of the member of this voice state
	     * @type {Snowflake}
	     */
	    this.id = data.user_id;
	    this._patch(data);
	  }

	  _patch(data) {
	    if ('deaf' in data) {
	      /**
	       * Whether this member is deafened server-wide
	       * @type {?boolean}
	       */
	      this.serverDeaf = data.deaf;
	    } else {
	      this.serverDeaf ??= null;
	    }

	    if ('mute' in data) {
	      /**
	       * Whether this member is muted server-wide
	       * @type {?boolean}
	       */
	      this.serverMute = data.mute;
	    } else {
	      this.serverMute ??= null;
	    }

	    if ('self_deaf' in data) {
	      /**
	       * Whether this member is self-deafened
	       * @type {?boolean}
	       */
	      this.selfDeaf = data.self_deaf;
	    } else {
	      this.selfDeaf ??= null;
	    }

	    if ('self_mute' in data) {
	      /**
	       * Whether this member is self-muted
	       * @type {?boolean}
	       */
	      this.selfMute = data.self_mute;
	    } else {
	      this.selfMute ??= null;
	    }

	    if ('self_video' in data) {
	      /**
	       * Whether this member's camera is enabled
	       * @type {?boolean}
	       */
	      this.selfVideo = data.self_video;
	    } else {
	      this.selfVideo ??= null;
	    }

	    if ('session_id' in data) {
	      /**
	       * The session id for this member's connection
	       * @type {?string}
	       */
	      this.sessionId = data.session_id;
	    } else {
	      this.sessionId ??= null;
	    }

	    // The self_stream is property is omitted if false, check for another property
	    // here to avoid incorrectly clearing this when partial data is specified
	    if ('self_video' in data) {
	      /**
	       * Whether this member is streaming using "Screen Share"
	       * @type {?boolean}
	       */
	      this.streaming = data.self_stream ?? false;
	    } else {
	      this.streaming ??= null;
	    }

	    if ('channel_id' in data) {
	      /**
	       * The {@link VoiceChannel} or {@link StageChannel} id the member is in
	       * @type {?Snowflake}
	       */
	      this.channelId = data.channel_id;
	    } else {
	      this.channelId ??= null;
	    }

	    if ('suppress' in data) {
	      /**
	       * Whether this member is suppressed from speaking. This property is specific to stage channels only.
	       * @type {?boolean}
	       */
	      this.suppress = data.suppress;
	    } else {
	      this.suppress ??= null;
	    }

	    if ('request_to_speak_timestamp' in data) {
	      /**
	       * The time at which the member requested to speak. This property is specific to stage channels only.
	       * @type {?number}
	       */
	      this.requestToSpeakTimestamp = data.request_to_speak_timestamp && Date.parse(data.request_to_speak_timestamp);
	    } else {
	      this.requestToSpeakTimestamp ??= null;
	    }

	    return this;
	  }

	  /**
	   * The member that this voice state belongs to
	   * @type {?GuildMember}
	   * @readonly
	   */
	  get member() {
	    return this.guild.members.cache.get(this.id) ?? null;
	  }

	  /**
	   * The channel that the member is connected to
	   * @type {?(VoiceChannel|StageChannel)}
	   * @readonly
	   */
	  get channel() {
	    return this.guild.channels.cache.get(this.channelId) ?? null;
	  }

	  /**
	   * Whether this member is either self-deafened or server-deafened
	   * @type {?boolean}
	   * @readonly
	   */
	  get deaf() {
	    return this.serverDeaf || this.selfDeaf;
	  }

	  /**
	   * Whether this member is either self-muted or server-muted
	   * @type {?boolean}
	   * @readonly
	   */
	  get mute() {
	    return this.serverMute || this.selfMute;
	  }

	  /**
	   * Mutes/unmutes the member of this voice state.
	   * @param {boolean} [mute=true] Whether or not the member should be muted
	   * @param {string} [reason] Reason for muting or unmuting
	   * @returns {Promise<GuildMember>}
	   */
	  setMute(mute = true, reason) {
	    return this.guild.members.edit(this.id, { mute, reason });
	  }

	  /**
	   * Deafens/undeafens the member of this voice state.
	   * @param {boolean} [deaf=true] Whether or not the member should be deafened
	   * @param {string} [reason] Reason for deafening or undeafening
	   * @returns {Promise<GuildMember>}
	   */
	  setDeaf(deaf = true, reason) {
	    return this.guild.members.edit(this.id, { deaf, reason });
	  }

	  /**
	   * Disconnects the member from the channel.
	   * @param {string} [reason] Reason for disconnecting the member from the channel
	   * @returns {Promise<GuildMember>}
	   */
	  disconnect(reason) {
	    return this.setChannel(null, reason);
	  }

	  /**
	   * Moves the member to a different channel, or disconnects them from the one they're in.
	   * @param {?GuildVoiceChannelResolvable} channel Channel to move the member to, or `null` if you want to
	   * disconnect them from voice.
	   * @param {string} [reason] Reason for moving member to another channel or disconnecting
	   * @returns {Promise<GuildMember>}
	   */
	  setChannel(channel, reason) {
	    return this.guild.members.edit(this.id, { channel, reason });
	  }

	  /**
	   * Data to edit the logged in user's own voice state with, when in a stage channel
	   * @typedef {Object} VoiceStateEditOptions
	   * @property {boolean} [requestToSpeak] Whether or not the client is requesting to become a speaker.
	   * <info>Only available to the logged in user's own voice state.</info>
	   * @property {boolean} [suppressed] Whether or not the user should be suppressed.
	   */

	  /**
	   * Edits this voice state. Currently only available when in a stage channel
	   * @param {VoiceStateEditOptions} options The options to provide
	   * @returns {Promise<VoiceState>}
	   */
	  async edit(options) {
	    if (this.channel?.type !== ChannelType.GuildStageVoice) throw new DiscordjsError(ErrorCodes.VoiceNotStageChannel);

	    const target = this.client.user.id === this.id ? '@me' : this.id;

	    if (target !== '@me' && options.requestToSpeak !== undefined) {
	      throw new DiscordjsError(ErrorCodes.VoiceStateNotOwn);
	    }

	    if (!['boolean', 'undefined'].includes(typeof options.requestToSpeak)) {
	      throw new DiscordjsTypeError(ErrorCodes.VoiceStateInvalidType, 'requestToSpeak');
	    }

	    if (!['boolean', 'undefined'].includes(typeof options.suppressed)) {
	      throw new DiscordjsTypeError(ErrorCodes.VoiceStateInvalidType, 'suppressed');
	    }

	    await this.client.rest.patch(Routes.guildVoiceState(this.guild.id, target), {
	      body: {
	        channel_id: this.channelId,
	        request_to_speak_timestamp: options.requestToSpeak
	          ? new Date().toISOString()
	          : options.requestToSpeak === false
	            ? null
	            : undefined,
	        suppress: options.suppressed,
	      },
	    });
	    return this;
	  }

	  /**
	   * Fetches this voice state.
	   * @param {boolean} [force=true] Whether to skip the cache check and request the API
	   * @returns {Promise<VoiceState>}
	   */
	  fetch(force = true) {
	    return this.guild.voiceStates.fetch(this.id, { force });
	  }

	  /**
	   * Toggles the request to speak in the channel.
	   * Only applicable for stage channels and for the client's own voice state.
	   * @param {boolean} [requestToSpeak=true] Whether or not the client is requesting to become a speaker.
	   * @example
	   * // Making the client request to speak in a stage channel (raise its hand)
	   * guild.members.me.voice.setRequestToSpeak(true);
	   * @example
	   * // Making the client cancel a request to speak
	   * guild.members.me.voice.setRequestToSpeak(false);
	   * @returns {Promise<VoiceState>}
	   */
	  setRequestToSpeak(requestToSpeak = true) {
	    return this.edit({ requestToSpeak });
	  }

	  /**
	   * Suppress/unsuppress the user. Only applicable for stage channels.
	   * @param {boolean} [suppressed=true] Whether or not the user should be suppressed.
	   * @example
	   * // Making the client a speaker
	   * guild.members.me.voice.setSuppressed(false);
	   * @example
	   * // Making the client an audience member
	   * guild.members.me.voice.setSuppressed(true);
	   * @example
	   * // Inviting another user to speak
	   * voiceState.setSuppressed(false);
	   * @example
	   * // Moving another user to the audience, or cancelling their invite to speak
	   * voiceState.setSuppressed(true);
	   * @returns {Promise<VoiceState>}
	   */
	  setSuppressed(suppressed = true) {
	    return this.edit({ suppressed });
	  }

	  toJSON() {
	    return super.toJSON({
	      id: true,
	      serverDeaf: true,
	      serverMute: true,
	      selfDeaf: true,
	      selfMute: true,
	      sessionId: true,
	      channelId: 'channel',
	    });
	  }
	}

	VoiceState_1 = VoiceState;
	return VoiceState_1;
}

var GuildMemberRoleManager_1;
var hasRequiredGuildMemberRoleManager;

function requireGuildMemberRoleManager () {
	if (hasRequiredGuildMemberRoleManager) return GuildMemberRoleManager_1;
	hasRequiredGuildMemberRoleManager = 1;

	const { Collection } = requireDist$3();
	const { Routes } = requireV10$6();
	const DataManager = requireDataManager();
	const { DiscordjsTypeError, ErrorCodes } = requireErrors$1();
	const { Role } = requireRole$1();

	/**
	 * Manages API methods for roles of a GuildMember and stores their cache.
	 * @extends {DataManager}
	 */
	class GuildMemberRoleManager extends DataManager {
	  constructor(member) {
	    super(member.client, Role);

	    /**
	     * The GuildMember this manager belongs to
	     * @type {GuildMember}
	     */
	    this.member = member;

	    /**
	     * The Guild this manager belongs to
	     * @type {Guild}
	     */
	    this.guild = member.guild;
	  }

	  /**
	   * The roles of this member
	   * @type {Collection<Snowflake, Role>}
	   * @readonly
	   */
	  get cache() {
	    const everyone = this.guild.roles.everyone;
	    return this.guild.roles.cache.filter(role => this.member._roles.includes(role.id)).set(everyone.id, everyone);
	  }

	  /**
	   * The role of the member used to hoist them in a separate category in the users list
	   * @type {?Role}
	   * @readonly
	   */
	  get hoist() {
	    const hoistedRoles = this.cache.filter(role => role.hoist);
	    if (!hoistedRoles.size) return null;
	    return hoistedRoles.reduce((prev, role) => (role.comparePositionTo(prev) > 0 ? role : prev));
	  }

	  /**
	   * The role of the member used to set their role icon
	   * @type {?Role}
	   * @readonly
	   */
	  get icon() {
	    const iconRoles = this.cache.filter(role => role.icon || role.unicodeEmoji);
	    if (!iconRoles.size) return null;
	    return iconRoles.reduce((prev, role) => (role.comparePositionTo(prev) > 0 ? role : prev));
	  }

	  /**
	   * The role of the member used to set their color
	   * @type {?Role}
	   * @readonly
	   */
	  get color() {
	    const coloredRoles = this.cache.filter(role => role.color);
	    if (!coloredRoles.size) return null;
	    return coloredRoles.reduce((prev, role) => (role.comparePositionTo(prev) > 0 ? role : prev));
	  }

	  /**
	   * The role of the member with the highest position
	   * @type {Role}
	   * @readonly
	   */
	  get highest() {
	    return this.cache.reduce((prev, role) => (role.comparePositionTo(prev) > 0 ? role : prev), this.cache.first());
	  }

	  /**
	   * The premium subscriber role of the guild, if present on the member
	   * @type {?Role}
	   * @readonly
	   */
	  get premiumSubscriberRole() {
	    return this.cache.find(role => role.tags?.premiumSubscriberRole) ?? null;
	  }

	  /**
	   * The managed role this member created when joining the guild, if any
	   * <info>Only ever available on bots</info>
	   * @type {?Role}
	   * @readonly
	   */
	  get botRole() {
	    if (!this.member.user.bot) return null;
	    return this.cache.find(role => role.tags?.botId === this.member.user.id) ?? null;
	  }

	  /**
	   * Adds a role (or multiple roles) to the member.
	   * @param {RoleResolvable|RoleResolvable[]|Collection<Snowflake, Role>} roleOrRoles The role or roles to add
	   * @param {string} [reason] Reason for adding the role(s)
	   * @returns {Promise<GuildMember>}
	   */
	  async add(roleOrRoles, reason) {
	    if (roleOrRoles instanceof Collection || Array.isArray(roleOrRoles)) {
	      const resolvedRoles = [];
	      for (const role of roleOrRoles.values()) {
	        const resolvedRole = this.guild.roles.resolveId(role);
	        if (!resolvedRole) {
	          throw new DiscordjsTypeError(ErrorCodes.InvalidElement, 'Array or Collection', 'roles', role);
	        }
	        resolvedRoles.push(resolvedRole);
	      }

	      const newRoles = [...new Set(resolvedRoles.concat(...this.cache.keys()))];
	      return this.set(newRoles, reason);
	    } else {
	      roleOrRoles = this.guild.roles.resolveId(roleOrRoles);
	      if (roleOrRoles === null) {
	        throw new DiscordjsTypeError(
	          ErrorCodes.InvalidType,
	          'roles',
	          'Role, Snowflake or Array or Collection of Roles or Snowflakes',
	        );
	      }

	      await this.client.rest.put(Routes.guildMemberRole(this.guild.id, this.member.id, roleOrRoles), { reason });

	      const clone = this.member._clone();
	      clone._roles = [...this.cache.keys(), roleOrRoles];
	      return clone;
	    }
	  }

	  /**
	   * Removes a role (or multiple roles) from the member.
	   * @param {RoleResolvable|RoleResolvable[]|Collection<Snowflake, Role>} roleOrRoles The role or roles to remove
	   * @param {string} [reason] Reason for removing the role(s)
	   * @returns {Promise<GuildMember>}
	   */
	  async remove(roleOrRoles, reason) {
	    if (roleOrRoles instanceof Collection || Array.isArray(roleOrRoles)) {
	      const resolvedRoles = [];
	      for (const role of roleOrRoles.values()) {
	        const resolvedRole = this.guild.roles.resolveId(role);
	        if (!resolvedRole) {
	          throw new DiscordjsTypeError(ErrorCodes.InvalidElement, 'Array or Collection', 'roles', role);
	        }
	        resolvedRoles.push(resolvedRole);
	      }

	      const newRoles = this.cache.filter(role => !resolvedRoles.includes(role.id));
	      return this.set(newRoles, reason);
	    } else {
	      roleOrRoles = this.guild.roles.resolveId(roleOrRoles);
	      if (roleOrRoles === null) {
	        throw new DiscordjsTypeError(
	          ErrorCodes.InvalidType,
	          'roles',
	          'Role, Snowflake or Array or Collection of Roles or Snowflakes',
	        );
	      }

	      await this.client.rest.delete(Routes.guildMemberRole(this.guild.id, this.member.id, roleOrRoles), { reason });

	      const clone = this.member._clone();
	      const newRoles = this.cache.filter(role => role.id !== roleOrRoles);
	      clone._roles = [...newRoles.keys()];
	      return clone;
	    }
	  }

	  /**
	   * Sets the roles applied to the member.
	   * @param {Collection<Snowflake, Role>|RoleResolvable[]} roles The roles or role ids to apply
	   * @param {string} [reason] Reason for applying the roles
	   * @returns {Promise<GuildMember>}
	   * @example
	   * // Set the member's roles to a single role
	   * guildMember.roles.set(['391156570408615936'])
	   *   .then(console.log)
	   *   .catch(console.error);
	   * @example
	   * // Remove all the roles from a member
	   * guildMember.roles.set([])
	   *   .then(member => console.log(`Member roles is now of ${member.roles.cache.size} size`))
	   *   .catch(console.error);
	   */
	  set(roles, reason) {
	    return this.member.edit({ roles, reason });
	  }

	  clone() {
	    const clone = new this.constructor(this.member);
	    clone.member._roles = [...this.cache.keys()];
	    return clone;
	  }
	}

	GuildMemberRoleManager_1 = GuildMemberRoleManager;
	return GuildMemberRoleManager_1;
}

var GuildMemberFlagsBitField = {};

var hasRequiredGuildMemberFlagsBitField;

function requireGuildMemberFlagsBitField () {
	if (hasRequiredGuildMemberFlagsBitField) return GuildMemberFlagsBitField;
	hasRequiredGuildMemberFlagsBitField = 1;

	const { GuildMemberFlags } = requireV10$6();
	const BitField = requireBitField();

	/**
	 * Data structure that makes it easy to interact with a {@link GuildMember#flags} bitfield.
	 * @extends {BitField}
	 */
	let GuildMemberFlagsBitField$1 = class GuildMemberFlagsBitField extends BitField {
	  /**
	   * Numeric guild guild member flags.
	   * @type {GuildMemberFlags}
	   * @memberof GuildMemberFlagsBitField
	   */
	  static Flags = GuildMemberFlags;
	};

	/**
	 * @name GuildMemberFlagsBitField
	 * @kind constructor
	 * @memberof GuildMemberFlagsBitField
	 * @param {BitFieldResolvable} [bits=0] Bit(s) to read from
	 */

	/**
	 * Bitfield of the packed bits
	 * @type {number}
	 * @name GuildMemberFlagsBitField#bitfield
	 */

	/**
	 * Data that can be resolved to give a guild member flag bitfield. This can be:
	 * * A string (see {@link GuildMemberFlagsBitField.Flags})
	 * * A guild member flag
	 * * An instance of GuildMemberFlagsBitField
	 * * An Array of GuildMemberFlagsResolvable
	 * @typedef {string|number|GuildMemberFlagsBitField|GuildMemberFlagsResolvable[]} GuildMemberFlagsResolvable
	 */

	GuildMemberFlagsBitField.GuildMemberFlagsBitField = GuildMemberFlagsBitField$1;
	return GuildMemberFlagsBitField;
}

var hasRequiredGuildMember;

function requireGuildMember () {
	if (hasRequiredGuildMember) return GuildMember;
	hasRequiredGuildMember = 1;

	const { PermissionFlagsBits } = requireV10$6();
	const Base = requireBase$2();
	const VoiceState = requireVoiceState();
	const TextBasedChannel = requireTextBasedChannel();
	const { DiscordjsError, ErrorCodes } = requireErrors$1();
	const GuildMemberRoleManager = requireGuildMemberRoleManager();
	const { GuildMemberFlagsBitField } = requireGuildMemberFlagsBitField();
	const PermissionsBitField = requirePermissionsBitField();

	/**
	 * Represents a member of a guild on Discord.
	 * @implements {TextBasedChannel}
	 * @extends {Base}
	 */
	let GuildMember$1 = class GuildMember extends Base {
	  constructor(client, data, guild) {
	    super(client);

	    /**
	     * The guild that this member is part of
	     * @type {Guild}
	     */
	    this.guild = guild;

	    /**
	     * The timestamp the member joined the guild at
	     * @type {?number}
	     */
	    this.joinedTimestamp = null;

	    /**
	     * The last timestamp this member started boosting the guild
	     * @type {?number}
	     */
	    this.premiumSinceTimestamp = null;

	    /**
	     * The nickname of this member, if they have one
	     * @type {?string}
	     */
	    this.nickname = null;

	    /**
	     * Whether this member has yet to pass the guild's membership gate
	     * @type {?boolean}
	     */
	    this.pending = null;

	    /**
	     * The timestamp this member's timeout will be removed
	     * @type {?number}
	     */
	    this.communicationDisabledUntilTimestamp = null;

	    /**
	     * The role ids of the member
	     * @name GuildMember#_roles
	     * @type {Snowflake[]}
	     * @private
	     */
	    Object.defineProperty(this, '_roles', { value: [], writable: true });

	    if (data) this._patch(data);
	  }

	  _patch(data) {
	    if ('user' in data) {
	      /**
	       * The user that this guild member instance represents
	       * @type {?User}
	       */
	      this.user = this.client.users._add(data.user, true);
	    }

	    if ('nick' in data) this.nickname = data.nick;
	    if ('avatar' in data) {
	      /**
	       * The guild member's avatar hash
	       * @type {?string}
	       */
	      this.avatar = data.avatar;
	    } else if (typeof this.avatar !== 'string') {
	      this.avatar = null;
	    }
	    if ('joined_at' in data) this.joinedTimestamp = Date.parse(data.joined_at);
	    if ('premium_since' in data) {
	      this.premiumSinceTimestamp = data.premium_since ? Date.parse(data.premium_since) : null;
	    }
	    if ('roles' in data) this._roles = data.roles;

	    if ('pending' in data) {
	      this.pending = data.pending;
	    } else if (!this.partial) {
	      // See https://github.com/discordjs/discord.js/issues/6546 for more info.
	      this.pending ??= false;
	    }

	    if ('communication_disabled_until' in data) {
	      this.communicationDisabledUntilTimestamp =
	        data.communication_disabled_until && Date.parse(data.communication_disabled_until);
	    }

	    if ('flags' in data) {
	      /**
	       * The flags of this member
	       * @type {Readonly<GuildMemberFlagsBitField>}
	       */
	      this.flags = new GuildMemberFlagsBitField(data.flags).freeze();
	    } else {
	      this.flags ??= new GuildMemberFlagsBitField().freeze();
	    }
	  }

	  _clone() {
	    const clone = super._clone();
	    clone._roles = this._roles.slice();
	    return clone;
	  }

	  /**
	   * Whether this GuildMember is a partial
	   * @type {boolean}
	   * @readonly
	   */
	  get partial() {
	    return this.joinedTimestamp === null;
	  }

	  /**
	   * A manager for the roles belonging to this member
	   * @type {GuildMemberRoleManager}
	   * @readonly
	   */
	  get roles() {
	    return new GuildMemberRoleManager(this);
	  }

	  /**
	   * The voice state of this member
	   * @type {VoiceState}
	   * @readonly
	   */
	  get voice() {
	    return this.guild.voiceStates.cache.get(this.id) ?? new VoiceState(this.guild, { user_id: this.id });
	  }

	  /**
	   * A link to the member's guild avatar.
	   * @param {ImageURLOptions} [options={}] Options for the image URL
	   * @returns {?string}
	   */
	  avatarURL(options = {}) {
	    return this.avatar && this.client.rest.cdn.guildMemberAvatar(this.guild.id, this.id, this.avatar, options);
	  }

	  /**
	   * A link to the member's guild avatar if they have one.
	   * Otherwise, a link to their {@link User#displayAvatarURL} will be returned.
	   * @param {ImageURLOptions} [options={}] Options for the image URL
	   * @returns {string}
	   */
	  displayAvatarURL(options) {
	    return this.avatarURL(options) ?? this.user.displayAvatarURL(options);
	  }

	  /**
	   * The time this member joined the guild
	   * @type {?Date}
	   * @readonly
	   */
	  get joinedAt() {
	    return this.joinedTimestamp && new Date(this.joinedTimestamp);
	  }

	  /**
	   * The time this member's timeout will be removed
	   * @type {?Date}
	   * @readonly
	   */
	  get communicationDisabledUntil() {
	    return this.communicationDisabledUntilTimestamp && new Date(this.communicationDisabledUntilTimestamp);
	  }

	  /**
	   * The last time this member started boosting the guild
	   * @type {?Date}
	   * @readonly
	   */
	  get premiumSince() {
	    return this.premiumSinceTimestamp && new Date(this.premiumSinceTimestamp);
	  }

	  /**
	   * The presence of this guild member
	   * @type {?Presence}
	   * @readonly
	   */
	  get presence() {
	    return this.guild.presences.resolve(this.id);
	  }

	  /**
	   * The displayed role color of this member in base 10
	   * @type {number}
	   * @readonly
	   */
	  get displayColor() {
	    return this.roles.color?.color ?? 0;
	  }

	  /**
	   * The displayed role color of this member in hexadecimal
	   * @type {string}
	   * @readonly
	   */
	  get displayHexColor() {
	    return this.roles.color?.hexColor ?? '#000000';
	  }

	  /**
	   * The member's id
	   * @type {Snowflake}
	   * @readonly
	   */
	  get id() {
	    return this.user.id;
	  }

	  /**
	   * The DM between the client's user and this member
	   * @type {?DMChannel}
	   * @readonly
	   */
	  get dmChannel() {
	    return this.client.users.dmChannel(this.id);
	  }

	  /**
	   * The nickname of this member, or their user display name if they don't have one
	   * @type {?string}
	   * @readonly
	   */
	  get displayName() {
	    return this.nickname ?? this.user.displayName;
	  }

	  /**
	   * The overall set of permissions for this member, taking only roles and owner status into account
	   * @type {Readonly<PermissionsBitField>}
	   * @readonly
	   */
	  get permissions() {
	    if (this.user.id === this.guild.ownerId) return new PermissionsBitField(PermissionsBitField.All).freeze();
	    return new PermissionsBitField(this.roles.cache.map(role => role.permissions)).freeze();
	  }

	  /**
	   * Whether the client user is above this user in the hierarchy, according to role position and guild ownership.
	   * This is a prerequisite for many moderative actions.
	   * @type {boolean}
	   * @readonly
	   */
	  get manageable() {
	    if (this.user.id === this.guild.ownerId) return false;
	    if (this.user.id === this.client.user.id) return false;
	    if (this.client.user.id === this.guild.ownerId) return true;
	    if (!this.guild.members.me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);
	    return this.guild.members.me.roles.highest.comparePositionTo(this.roles.highest) > 0;
	  }

	  /**
	   * Whether this member is kickable by the client user
	   * @type {boolean}
	   * @readonly
	   */
	  get kickable() {
	    if (!this.guild.members.me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);
	    return this.manageable && this.guild.members.me.permissions.has(PermissionFlagsBits.KickMembers);
	  }

	  /**
	   * Whether this member is bannable by the client user
	   * @type {boolean}
	   * @readonly
	   */
	  get bannable() {
	    if (!this.guild.members.me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);
	    return this.manageable && this.guild.members.me.permissions.has(PermissionFlagsBits.BanMembers);
	  }

	  /**
	   * Whether this member is moderatable by the client user
	   * @type {boolean}
	   * @readonly
	   */
	  get moderatable() {
	    return (
	      !this.permissions.has(PermissionFlagsBits.Administrator) &&
	      this.manageable &&
	      (this.guild.members.me?.permissions.has(PermissionFlagsBits.ModerateMembers) ?? false)
	    );
	  }

	  /**
	   * Whether this member is currently timed out
	   * @returns {boolean}
	   */
	  isCommunicationDisabled() {
	    return this.communicationDisabledUntilTimestamp > Date.now();
	  }

	  /**
	   * Returns `channel.permissionsFor(guildMember)`. Returns permissions for a member in a guild channel,
	   * taking into account roles and permission overwrites.
	   * @param {GuildChannelResolvable} channel The guild channel to use as context
	   * @returns {Readonly<PermissionsBitField>}
	   */
	  permissionsIn(channel) {
	    channel = this.guild.channels.resolve(channel);
	    if (!channel) throw new DiscordjsError(ErrorCodes.GuildChannelResolve);
	    return channel.permissionsFor(this);
	  }

	  /**
	   * Edits this member.
	   * @param {GuildMemberEditOptions} options The options to provide
	   * @returns {Promise<GuildMember>}
	   */
	  edit(options) {
	    return this.guild.members.edit(this, options);
	  }

	  /**
	   * Sets the flags for this member.
	   * @param {GuildMemberFlagsResolvable} flags The flags to set
	   * @param {string} [reason] Reason for setting the flags
	   * @returns {Promise<GuildMember>}
	   */
	  setFlags(flags, reason) {
	    return this.edit({ flags, reason });
	  }

	  /**
	   * Sets the nickname for this member.
	   * @param {?string} nick The nickname for the guild member, or `null` if you want to reset their nickname
	   * @param {string} [reason] Reason for setting the nickname
	   * @returns {Promise<GuildMember>}
	   * @example
	   * // Set a nickname for a guild member
	   * guildMember.setNickname('cool nickname', 'Needed a new nickname')
	   *   .then(member => console.log(`Set nickname of ${member.user.username}`))
	   *   .catch(console.error);
	   * @example
	   * // Remove a nickname for a guild member
	   * guildMember.setNickname(null, 'No nicknames allowed!')
	   *   .then(member => console.log(`Removed nickname for ${member.user.username}`))
	   *   .catch(console.error);
	   */
	  setNickname(nick, reason) {
	    return this.edit({ nick, reason });
	  }

	  /**
	   * Creates a DM channel between the client and this member.
	   * @param {boolean} [force=false] Whether to skip the cache check and request the API
	   * @returns {Promise<DMChannel>}
	   */
	  createDM(force = false) {
	    return this.user.createDM(force);
	  }

	  /**
	   * Deletes any DMs with this member.
	   * @returns {Promise<DMChannel>}
	   */
	  deleteDM() {
	    return this.user.deleteDM();
	  }

	  /**
	   * Kicks this member from the guild.
	   * @param {string} [reason] Reason for kicking user
	   * @returns {Promise<GuildMember>}
	   */
	  kick(reason) {
	    return this.guild.members.kick(this, reason);
	  }

	  /**
	   * Bans this guild member.
	   * @param {BanOptions} [options] Options for the ban
	   * @returns {Promise<GuildMember>}
	   * @example
	   * // Ban a guild member, deleting a week's worth of messages
	   * guildMember.ban({ deleteMessageSeconds: 60 * 60 * 24 * 7, reason: 'They deserved it' })
	   *   .then(console.log)
	   *   .catch(console.error);
	   */
	  ban(options) {
	    return this.guild.bans.create(this, options);
	  }

	  /**
	   * Times this guild member out.
	   * @param {?DateResolvable} communicationDisabledUntil The date or timestamp
	   * for the member's communication to be disabled until. Provide `null` to remove the timeout.
	   * @param {string} [reason] The reason for this timeout.
	   * @returns {Promise<GuildMember>}
	   * @example
	   * // Time a guild member out for 5 minutes
	   * guildMember.disableCommunicationUntil(Date.now() + (5 * 60 * 1000), 'They deserved it')
	   *   .then(console.log)
	   *   .catch(console.error);
	   * @example
	   * // Remove the timeout of a guild member
	   * guildMember.disableCommunicationUntil(null)
	   *   .then(member => console.log(`Removed timeout for ${member.displayName}`))
	   *   .catch(console.error);
	   */
	  disableCommunicationUntil(communicationDisabledUntil, reason) {
	    return this.edit({ communicationDisabledUntil, reason });
	  }

	  /**
	   * Times this guild member out.
	   * @param {?number} timeout The duration in milliseconds
	   * for the member's communication to be disabled. Provide `null` to remove the timeout.
	   * @param {string} [reason] The reason for this timeout.
	   * @returns {Promise<GuildMember>}
	   * @example
	   * // Time a guild member out for 5 minutes
	   * guildMember.timeout(5 * 60 * 1000, 'They deserved it')
	   *   .then(console.log)
	   *   .catch(console.error);
	   */
	  timeout(timeout, reason) {
	    return this.disableCommunicationUntil(timeout && Date.now() + timeout, reason);
	  }

	  /**
	   * Fetches this GuildMember.
	   * @param {boolean} [force=true] Whether to skip the cache check and request the API
	   * @returns {Promise<GuildMember>}
	   */
	  fetch(force = true) {
	    return this.guild.members.fetch({ user: this.id, cache: true, force });
	  }

	  /**
	   * Whether this guild member equals another guild member. It compares all properties, so for most
	   * comparison it is advisable to just compare `member.id === member2.id` as it is significantly faster
	   * and is often what most users need.
	   * @param {GuildMember} member The member to compare with
	   * @returns {boolean}
	   */
	  equals(member) {
	    return (
	      member instanceof this.constructor &&
	      this.id === member.id &&
	      this.partial === member.partial &&
	      this.guild.id === member.guild.id &&
	      this.joinedTimestamp === member.joinedTimestamp &&
	      this.nickname === member.nickname &&
	      this.avatar === member.avatar &&
	      this.pending === member.pending &&
	      this.communicationDisabledUntilTimestamp === member.communicationDisabledUntilTimestamp &&
	      this.flags.bitfield === member.flags.bitfield &&
	      (this._roles === member._roles ||
	        (this._roles.length === member._roles.length && this._roles.every((role, i) => role === member._roles[i])))
	    );
	  }

	  /**
	   * When concatenated with a string, this automatically returns the user's mention instead of the GuildMember object.
	   * @returns {string}
	   * @example
	   * // Logs: Hello from <@123456789012345678>!
	   * console.log(`Hello from ${member}!`);
	   */
	  toString() {
	    return this.user.toString();
	  }

	  toJSON() {
	    const json = super.toJSON({
	      guild: 'guildId',
	      user: 'userId',
	      displayName: true,
	      roles: true,
	    });
	    json.avatarURL = this.avatarURL();
	    json.displayAvatarURL = this.displayAvatarURL();
	    return json;
	  }
	};

	/**
	 * Sends a message to this user.
	 * @method send
	 * @memberof GuildMember
	 * @instance
	 * @param {string|MessagePayload|MessageCreateOptions} options The options to provide
	 * @returns {Promise<Message>}
	 * @example
	 * // Send a direct message
	 * guildMember.send('Hello!')
	 *   .then(message => console.log(`Sent message: ${message.content} to ${guildMember.displayName}`))
	 *   .catch(console.error);
	 */

	TextBasedChannel.applyToClass(GuildMember$1);

	GuildMember.GuildMember = GuildMember$1;
	return GuildMember;
}

var MessageManager_1;
var hasRequiredMessageManager;

function requireMessageManager () {
	if (hasRequiredMessageManager) return MessageManager_1;
	hasRequiredMessageManager = 1;

	const { Collection } = requireDist$3();
	const { makeURLSearchParams } = requireWeb();
	const { Routes } = requireV10$6();
	const CachedManager = requireCachedManager();
	const { DiscordjsTypeError, ErrorCodes } = requireErrors$1();
	const { Message } = requireMessage();
	const MessagePayload = requireMessagePayload();
	const { MakeCacheOverrideSymbol } = requireSymbols();
	const { resolvePartialEmoji } = requireUtil();

	/**
	 * Manages API methods for Messages and holds their cache.
	 * @extends {CachedManager}
	 * @abstract
	 */
	class MessageManager extends CachedManager {
	  static [MakeCacheOverrideSymbol] = MessageManager;

	  constructor(channel, iterable) {
	    super(channel.client, Message, iterable);

	    /**
	     * The channel that the messages belong to
	     * @type {TextBasedChannels}
	     */
	    this.channel = channel;
	  }

	  /**
	   * The cache of Messages
	   * @type {Collection<Snowflake, Message>}
	   * @name MessageManager#cache
	   */

	  _add(data, cache) {
	    return super._add(data, cache);
	  }

	  /**
	   * Data that can be resolved to a Message object. This can be:
	   * * A Message
	   * * A Snowflake
	   * @typedef {Message|Snowflake} MessageResolvable
	   */

	  /**
	   * Options used to fetch a message.
	   * @typedef {BaseFetchOptions} FetchMessageOptions
	   * @property {MessageResolvable} message The message to fetch
	   */

	  /**
	   * Options used to fetch multiple messages.
	   * <info>The `before`, `after`, and `around` parameters are mutually exclusive.</info>
	   * @typedef {Object} FetchMessagesOptions
	   * @property {number} [limit] The maximum number of messages to return
	   * @property {Snowflake} [before] Consider only messages before this id
	   * @property {Snowflake} [after] Consider only messages after this id
	   * @property {Snowflake} [around] Consider only messages around this id
	   * @property {boolean} [cache] Whether to cache the fetched messages
	   */

	  /**
	   * Fetches message(s) from a channel.
	   * <info>The returned Collection does not contain reaction users of the messages if they were not cached.
	   * Those need to be fetched separately in such a case.</info>
	   * @param {MessageResolvable|FetchMessageOptions|FetchMessagesOptions} [options] Options for fetching message(s)
	   * @returns {Promise<Message|Collection<Snowflake, Message>>}
	   * @example
	   * // Fetch a message
	   * channel.messages.fetch('99539446449315840')
	   *   .then(message => console.log(message.content))
	   *   .catch(console.error);
	   * @example
	   * // Fetch a maximum of 10 messages without caching
	   * channel.messages.fetch({ limit: 10, cache: false })
	   *   .then(messages => console.log(`Received ${messages.size} messages`))
	   *   .catch(console.error);
	   * @example
	   * // Fetch a maximum of 10 messages without caching around a message id
	   * channel.messages.fetch({ limit: 10, cache: false, around: '99539446449315840' })
	   *   .then(messages => console.log(`Received ${messages.size} messages`))
	   *   .catch(console.error);
	   * @example
	   * // Fetch messages and filter by a user id
	   * channel.messages.fetch()
	   *   .then(messages => console.log(`${messages.filter(message =>
	   *          message.author.id === '84484653687267328').size} messages`))
	   *   .catch(console.error);
	   */
	  fetch(options) {
	    if (!options) return this._fetchMany();
	    const { message, cache, force } = options;
	    const resolvedMessage = this.resolveId(message ?? options);
	    if (resolvedMessage) return this._fetchSingle({ message: resolvedMessage, cache, force });
	    return this._fetchMany(options);
	  }

	  async _fetchSingle({ message, cache, force = false }) {
	    if (!force) {
	      const existing = this.cache.get(message);
	      if (existing && !existing.partial) return existing;
	    }

	    const data = await this.client.rest.get(Routes.channelMessage(this.channel.id, message));
	    return this._add(data, cache);
	  }

	  async _fetchMany(options = {}) {
	    const data = await this.client.rest.get(Routes.channelMessages(this.channel.id), {
	      query: makeURLSearchParams(options),
	    });

	    return data.reduce((_data, message) => _data.set(message.id, this._add(message, options.cache)), new Collection());
	  }

	  /**
	   * Fetches the pinned messages of this channel and returns a collection of them.
	   * <info>The returned Collection does not contain any reaction data of the messages.
	   * Those need to be fetched separately.</info>
	   * @param {boolean} [cache=true] Whether to cache the message(s)
	   * @returns {Promise<Collection<Snowflake, Message>>}
	   * @example
	   * // Get pinned messages
	   * channel.messages.fetchPinned()
	   *   .then(messages => console.log(`Received ${messages.size} messages`))
	   *   .catch(console.error);
	   */
	  async fetchPinned(cache = true) {
	    const data = await this.client.rest.get(Routes.channelPins(this.channel.id));
	    const messages = new Collection();
	    for (const message of data) messages.set(message.id, this._add(message, cache));
	    return messages;
	  }

	  /**
	   * Resolves a {@link MessageResolvable} to a {@link Message} object.
	   * @method resolve
	   * @memberof MessageManager
	   * @instance
	   * @param {MessageResolvable} message The message resolvable to resolve
	   * @returns {?Message}
	   */

	  /**
	   * Resolves a {@link MessageResolvable} to a {@link Message} id.
	   * @method resolveId
	   * @memberof MessageManager
	   * @instance
	   * @param {MessageResolvable} message The message resolvable to resolve
	   * @returns {?Snowflake}
	   */

	  /**
	   * Data used to reference an attachment.
	   * @typedef {Object} MessageEditAttachmentData
	   * @property {Snowflake} id The id of the attachment
	   */

	  /**
	   * Options that can be passed to edit a message.
	   * @typedef {BaseMessageOptions} MessageEditOptions
	   * @property {Array<Attachment|MessageEditAttachmentData>} [attachments] An array of attachments to keep.
	   * All attachments will be kept if omitted
	   * @property {MessageFlags} [flags] Which flags to set for the message
	   * <info>Only the {@link MessageFlags.SuppressEmbeds} flag can be modified.</info>
	   */

	  /**
	   * Edits a message, even if it's not cached.
	   * @param {MessageResolvable} message The message to edit
	   * @param {string|MessageEditOptions|MessagePayload} options The options to edit the message
	   * @returns {Promise<Message>}
	   */
	  async edit(message, options) {
	    const messageId = this.resolveId(message);
	    if (!messageId) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'message', 'MessageResolvable');

	    const { body, files } = await (
	      options instanceof MessagePayload
	        ? options
	        : MessagePayload.create(message instanceof Message ? message : this, options)
	    )
	      .resolveBody()
	      .resolveFiles();
	    const d = await this.client.rest.patch(Routes.channelMessage(this.channel.id, messageId), { body, files });

	    const existing = this.cache.get(messageId);
	    if (existing) {
	      const clone = existing._clone();
	      clone._patch(d);
	      return clone;
	    }
	    return this._add(d);
	  }

	  /**
	   * Publishes a message in an announcement channel to all channels following it, even if it's not cached.
	   * @param {MessageResolvable} message The message to publish
	   * @returns {Promise<Message>}
	   */
	  async crosspost(message) {
	    message = this.resolveId(message);
	    if (!message) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'message', 'MessageResolvable');

	    const data = await this.client.rest.post(Routes.channelMessageCrosspost(this.channel.id, message));
	    return this.cache.get(data.id) ?? this._add(data);
	  }

	  /**
	   * Pins a message to the channel's pinned messages, even if it's not cached.
	   * @param {MessageResolvable} message The message to pin
	   * @param {string} [reason] Reason for pinning
	   * @returns {Promise<void>}
	   */
	  async pin(message, reason) {
	    message = this.resolveId(message);
	    if (!message) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'message', 'MessageResolvable');

	    await this.client.rest.put(Routes.channelPin(this.channel.id, message), { reason });
	  }

	  /**
	   * Unpins a message from the channel's pinned messages, even if it's not cached.
	   * @param {MessageResolvable} message The message to unpin
	   * @param {string} [reason] Reason for unpinning
	   * @returns {Promise<void>}
	   */
	  async unpin(message, reason) {
	    message = this.resolveId(message);
	    if (!message) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'message', 'MessageResolvable');

	    await this.client.rest.delete(Routes.channelPin(this.channel.id, message), { reason });
	  }

	  /**
	   * Adds a reaction to a message, even if it's not cached.
	   * @param {MessageResolvable} message The message to react to
	   * @param {EmojiIdentifierResolvable} emoji The emoji to react with
	   * @returns {Promise<void>}
	   */
	  async react(message, emoji) {
	    message = this.resolveId(message);
	    if (!message) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'message', 'MessageResolvable');

	    emoji = resolvePartialEmoji(emoji);
	    if (!emoji) throw new DiscordjsTypeError(ErrorCodes.EmojiType, 'emoji', 'EmojiIdentifierResolvable');

	    const emojiId = emoji.id
	      ? `${emoji.animated ? 'a:' : ''}${emoji.name}:${emoji.id}`
	      : encodeURIComponent(emoji.name);

	    await this.client.rest.put(Routes.channelMessageOwnReaction(this.channel.id, message, emojiId));
	  }

	  /**
	   * Deletes a message, even if it's not cached.
	   * @param {MessageResolvable} message The message to delete
	   * @returns {Promise<void>}
	   */
	  async delete(message) {
	    message = this.resolveId(message);
	    if (!message) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'message', 'MessageResolvable');

	    await this.client.rest.delete(Routes.channelMessage(this.channel.id, message));
	  }

	  /**
	   * Ends a poll.
	   * @param {Snowflake} messageId The id of the message
	   * @returns {Promise<Message>}
	   */
	  async endPoll(messageId) {
	    const message = await this.client.rest.post(Routes.expirePoll(this.channel.id, messageId));
	    return this._add(message, false);
	  }

	  /**
	   * Options used for fetching voters of an answer in a poll.
	   * @typedef {BaseFetchPollAnswerVotersOptions} FetchPollAnswerVotersOptions
	   * @param {Snowflake} messageId The id of the message
	   * @param {number} answerId The id of the answer
	   */

	  /**
	   * Fetches the users that voted for a poll answer.
	   * @param {FetchPollAnswerVotersOptions} options The options for fetching the poll answer voters
	   * @returns {Promise<Collection<Snowflake, User>>}
	   */
	  async fetchPollAnswerVoters({ messageId, answerId, after, limit }) {
	    const voters = await this.client.rest.get(Routes.pollAnswerVoters(this.channel.id, messageId, answerId), {
	      query: makeURLSearchParams({ limit, after }),
	    });

	    return voters.users.reduce((acc, user) => acc.set(user.id, this.client.users._add(user, false)), new Collection());
	  }
	}

	MessageManager_1 = MessageManager;
	return MessageManager_1;
}

var InteractionWebhook_1;
var hasRequiredInteractionWebhook;

function requireInteractionWebhook () {
	if (hasRequiredInteractionWebhook) return InteractionWebhook_1;
	hasRequiredInteractionWebhook = 1;

	const Webhook = requireWebhook$2();

	/**
	 * Represents a webhook for an Interaction
	 * @implements {Webhook}
	 */
	class InteractionWebhook {
	  /**
	   * @param {Client} client The instantiating client
	   * @param {Snowflake} id The application's id
	   * @param {string} token The interaction's token
	   */
	  constructor(client, id, token) {
	    /**
	     * The client that instantiated the interaction webhook
	     * @name InteractionWebhook#client
	     * @type {Client}
	     * @readonly
	     */
	    Object.defineProperty(this, 'client', { value: client });
	    this.id = id;
	    Object.defineProperty(this, 'token', { value: token, writable: true, configurable: true });
	  }

	  // These are here only for documentation purposes - they are implemented by Webhook
	  /* eslint-disable no-empty-function */
	  /**
	   * Sends a message with this webhook.
	   * @param {string|MessagePayload|InteractionReplyOptions} options The content for the reply
	   * @returns {Promise<Message>}
	   */

	  send() {}

	  /**
	   * Gets a message that was sent by this webhook.
	   * @param {Snowflake|'@original'} message The id of the message to fetch
	   * @returns {Promise<Message>} Returns the message sent by this webhook
	   */

	  fetchMessage() {}

	  /**
	   * Edits a message that was sent by this webhook.
	   * @param {MessageResolvable|'@original'} message The message to edit
	   * @param {string|MessagePayload|WebhookMessageEditOptions} options The options to provide
	   * @returns {Promise<Message>} Returns the message edited by this webhook
	   */

	  editMessage() {}
	  deleteMessage() {}
	  get url() {}
	}

	Webhook.applyToClass(InteractionWebhook, ['sendSlackMessage', 'edit', 'delete', 'createdTimestamp', 'createdAt']);

	InteractionWebhook_1 = InteractionWebhook;
	return InteractionWebhook_1;
}

var MessagePayload_1;
var hasRequiredMessagePayload;

function requireMessagePayload () {
	if (hasRequiredMessagePayload) return MessagePayload_1;
	hasRequiredMessagePayload = 1;

	const { Buffer } = require$$0$9;
	const { lazy, isJSONEncodable } = requireDist$7();
	const { DiscordSnowflake } = /*@__PURE__*/ requireCjs$2();
	const { MessageFlags } = requireV10$6();
	const ActionRowBuilder = requireActionRowBuilder();
	const { DiscordjsError, DiscordjsRangeError, ErrorCodes } = requireErrors$1();
	const { resolveFile } = requireDataResolver();
	const MessageFlagsBitField = requireMessageFlagsBitField();
	const { basename, verifyString, resolvePartialEmoji } = requireUtil();

	const getBaseInteraction = lazy(() => requireBaseInteraction());

	/**
	 * Represents a message to be sent to the API.
	 */
	class MessagePayload {
	  /**
	   * @param {MessageTarget} target The target for this message to be sent to
	   * @param {MessagePayloadOption} options The payload of this message
	   */
	  constructor(target, options) {
	    /**
	     * The target for this message to be sent to
	     * @type {MessageTarget}
	     */
	    this.target = target;

	    /**
	     * The payload of this message.
	     * @type {MessagePayloadOption}
	     */
	    this.options = options;

	    /**
	     * Body sendable to the API
	     * @type {?APIMessage}
	     */
	    this.body = null;

	    /**
	     * Files sendable to the API
	     * @type {?RawFile[]}
	     */
	    this.files = null;
	  }

	  /**
	   * Whether or not the target is a {@link Webhook} or a {@link WebhookClient}
	   * @type {boolean}
	   * @readonly
	   */
	  get isWebhook() {
	    const Webhook = requireWebhook$2();
	    const WebhookClient = requireWebhookClient();
	    return this.target instanceof Webhook || this.target instanceof WebhookClient;
	  }

	  /**
	   * Whether or not the target is a {@link User}
	   * @type {boolean}
	   * @readonly
	   */
	  get isUser() {
	    const User = requireUser$3();
	    const { GuildMember } = requireGuildMember();
	    return this.target instanceof User || this.target instanceof GuildMember;
	  }

	  /**
	   * Whether or not the target is a {@link Message}
	   * @type {boolean}
	   * @readonly
	   */
	  get isMessage() {
	    const { Message } = requireMessage();
	    return this.target instanceof Message;
	  }

	  /**
	   * Whether or not the target is a {@link MessageManager}
	   * @type {boolean}
	   * @readonly
	   */
	  get isMessageManager() {
	    const MessageManager = requireMessageManager();
	    return this.target instanceof MessageManager;
	  }

	  /**
	   * Whether or not the target is an {@link BaseInteraction} or an {@link InteractionWebhook}
	   * @type {boolean}
	   * @readonly
	   */
	  get isInteraction() {
	    const BaseInteraction = getBaseInteraction();
	    const InteractionWebhook = requireInteractionWebhook();
	    return this.target instanceof BaseInteraction || this.target instanceof InteractionWebhook;
	  }

	  /**
	   * Makes the content of this message.
	   * @returns {?string}
	   */
	  makeContent() {
	    let content;
	    if (this.options.content === null) {
	      content = '';
	    } else if (this.options.content !== undefined) {
	      content = verifyString(this.options.content, DiscordjsRangeError, ErrorCodes.MessageContentType, true);
	    }

	    return content;
	  }

	  /**
	   * Resolves the body.
	   * @returns {MessagePayload}
	   */
	  resolveBody() {
	    if (this.body) return this;
	    const isInteraction = this.isInteraction;
	    const isWebhook = this.isWebhook;

	    const content = this.makeContent();
	    const tts = Boolean(this.options.tts);

	    let nonce;
	    if (this.options.nonce !== undefined) {
	      nonce = this.options.nonce;
	      if (typeof nonce === 'number' ? !Number.isInteger(nonce) : typeof nonce !== 'string') {
	        throw new DiscordjsRangeError(ErrorCodes.MessageNonceType);
	      }
	    }

	    let enforce_nonce = Boolean(this.options.enforceNonce);

	    // If `nonce` isn't provided, generate one & set `enforceNonce`
	    // Unless `enforceNonce` is explicitly set to `false`(not just falsy)
	    if (nonce === undefined) {
	      if (this.options.enforceNonce !== false && this.target.client.options.enforceNonce) {
	        nonce = DiscordSnowflake.generate().toString();
	        enforce_nonce = true;
	      } else if (enforce_nonce) {
	        throw new DiscordjsError(ErrorCodes.MessageNonceRequired);
	      }
	    }

	    const components = this.options.components?.map(component =>
	      (isJSONEncodable(component) ? component : new ActionRowBuilder(component)).toJSON(),
	    );

	    let username;
	    let avatarURL;
	    let threadName;
	    let appliedTags;
	    if (isWebhook) {
	      username = this.options.username ?? this.target.name;
	      if (this.options.avatarURL) avatarURL = this.options.avatarURL;
	      if (this.options.threadName) threadName = this.options.threadName;
	      if (this.options.appliedTags) appliedTags = this.options.appliedTags;
	    }

	    let flags;
	    if (
	      this.options.flags !== undefined ||
	      (this.isMessage && this.options.reply === undefined) ||
	      this.isMessageManager
	    ) {
	      flags =
	        // eslint-disable-next-line eqeqeq
	        this.options.flags != null
	          ? new MessageFlagsBitField(this.options.flags).bitfield
	          : this.target.flags?.bitfield;
	    }

	    if (isInteraction && this.options.ephemeral) {
	      flags |= MessageFlags.Ephemeral;
	    }

	    let allowedMentions =
	      this.options.allowedMentions === undefined
	        ? this.target.client.options.allowedMentions
	        : this.options.allowedMentions;

	    if (allowedMentions?.repliedUser !== undefined) {
	      allowedMentions = { ...allowedMentions, replied_user: allowedMentions.repliedUser };
	      delete allowedMentions.repliedUser;
	    }

	    let message_reference;
	    if (typeof this.options.reply === 'object') {
	      const reference = this.options.reply.messageReference;
	      const message_id = this.isMessage ? (reference.id ?? reference) : this.target.messages.resolveId(reference);
	      if (message_id) {
	        message_reference = {
	          message_id,
	          fail_if_not_exists: this.options.reply.failIfNotExists ?? this.target.client.options.failIfNotExists,
	        };
	      }
	    }

	    const attachments = this.options.files?.map((file, index) => ({
	      id: index.toString(),
	      description: file.description,
	    }));
	    if (Array.isArray(this.options.attachments)) {
	      this.options.attachments.push(...(attachments ?? []));
	    } else {
	      this.options.attachments = attachments;
	    }

	    let poll;
	    if (this.options.poll) {
	      poll = {
	        question: {
	          text: this.options.poll.question.text,
	        },
	        answers: this.options.poll.answers.map(answer => ({
	          poll_media: { text: answer.text, emoji: resolvePartialEmoji(answer.emoji) },
	        })),
	        duration: this.options.poll.duration,
	        allow_multiselect: this.options.poll.allowMultiselect,
	        layout_type: this.options.poll.layoutType,
	      };
	    }

	    this.body = {
	      content,
	      tts,
	      nonce,
	      enforce_nonce,
	      embeds: this.options.embeds?.map(embed =>
	        isJSONEncodable(embed) ? embed.toJSON() : this.target.client.options.jsonTransformer(embed),
	      ),
	      components,
	      username,
	      avatar_url: avatarURL,
	      allowed_mentions: content === undefined && message_reference === undefined ? undefined : allowedMentions,
	      flags,
	      message_reference,
	      attachments: this.options.attachments,
	      sticker_ids: this.options.stickers?.map(sticker => sticker.id ?? sticker),
	      thread_name: threadName,
	      applied_tags: appliedTags,
	      poll,
	    };
	    return this;
	  }

	  /**
	   * Resolves files.
	   * @returns {Promise<MessagePayload>}
	   */
	  async resolveFiles() {
	    if (this.files) return this;

	    this.files = await Promise.all(this.options.files?.map(file => this.constructor.resolveFile(file)) ?? []);
	    return this;
	  }

	  /**
	   * Resolves a single file into an object sendable to the API.
	   * @param {AttachmentPayload|BufferResolvable|Stream} fileLike Something that could be resolved to a file
	   * @returns {Promise<RawFile>}
	   */
	  static async resolveFile(fileLike) {
	    let attachment;
	    let name;

	    const findName = thing => {
	      if (typeof thing === 'string') {
	        return basename(thing);
	      }

	      if (thing.path) {
	        return basename(thing.path);
	      }

	      return 'file.jpg';
	    };

	    const ownAttachment =
	      typeof fileLike === 'string' || fileLike instanceof Buffer || typeof fileLike.pipe === 'function';
	    if (ownAttachment) {
	      attachment = fileLike;
	      name = findName(attachment);
	    } else {
	      attachment = fileLike.attachment;
	      name = fileLike.name ?? findName(attachment);
	    }

	    const { data, contentType } = await resolveFile(attachment);
	    return { data, name, contentType };
	  }

	  /**
	   * Creates a {@link MessagePayload} from user-level arguments.
	   * @param {MessageTarget} target Target to send to
	   * @param {string|MessagePayloadOption} options Options or content to use
	   * @param {MessagePayloadOption} [extra={}] Extra options to add onto specified options
	   * @returns {MessagePayload}
	   */
	  static create(target, options, extra = {}) {
	    return new this(
	      target,
	      typeof options !== 'object' || options === null ? { content: options, ...extra } : { ...options, ...extra },
	    );
	  }
	}

	MessagePayload_1 = MessagePayload;

	/**
	 * A target for a message.
	 * @typedef {TextBasedChannels|User|GuildMember|Webhook|WebhookClient|BaseInteraction|InteractionWebhook|
	 * Message|MessageManager} MessageTarget
	 */

	/**
	 * A possible payload option.
	 * @typedef {MessageCreateOptions|MessageEditOptions|WebhookMessageCreateOptions|WebhookMessageEditOptions|
	 * InteractionReplyOptions|InteractionUpdateOptions} MessagePayloadOption
	 */

	/**
	 * @external RawFile
	 * @see {@link https://discord.js.org/docs/packages/rest/stable/RawFile:Interface}
	 */
	return MessagePayload_1;
}

var GuildMessageManager_1;
var hasRequiredGuildMessageManager;

function requireGuildMessageManager () {
	if (hasRequiredGuildMessageManager) return GuildMessageManager_1;
	hasRequiredGuildMessageManager = 1;

	const MessageManager = requireMessageManager();

	/**
	 * Manages API methods for messages in a guild and holds their cache.
	 * @extends {MessageManager}
	 */
	class GuildMessageManager extends MessageManager {
	  /**
	   * The channel that the messages belong to
	   * @name GuildMessageManager#channel
	   * @type {GuildTextBasedChannel}
	   */
	}

	GuildMessageManager_1 = GuildMessageManager;
	return GuildMessageManager_1;
}

var TextBasedChannel_1;
var hasRequiredTextBasedChannel;

function requireTextBasedChannel () {
	if (hasRequiredTextBasedChannel) return TextBasedChannel_1;
	hasRequiredTextBasedChannel = 1;

	const { Collection } = requireDist$3();
	const { DiscordSnowflake } = /*@__PURE__*/ requireCjs$2();
	const { InteractionType, Routes } = requireV10$6();
	const { DiscordjsTypeError, DiscordjsError, ErrorCodes } = requireErrors$1();
	const { MaxBulkDeletableMessageAge } = requireConstants$1();
	const InteractionCollector = requireInteractionCollector();
	const MessageCollector = requireMessageCollector();
	const MessagePayload = requireMessagePayload();

	/**
	 * Interface for classes that have text-channel-like features.
	 * @interface
	 */
	class TextBasedChannel {
	  constructor() {
	    /**
	     * A manager of the messages sent to this channel
	     * @type {GuildMessageManager}
	     */
	    this.messages = new GuildMessageManager(this);

	    /**
	     * The channel's last message id, if one was sent
	     * @type {?Snowflake}
	     */
	    this.lastMessageId = null;

	    /**
	     * The timestamp when the last pinned message was pinned, if there was one
	     * @type {?number}
	     */
	    this.lastPinTimestamp = null;
	  }

	  /**
	   * The Message object of the last message in the channel, if one was sent
	   * @type {?Message}
	   * @readonly
	   */
	  get lastMessage() {
	    return this.messages.resolve(this.lastMessageId);
	  }

	  /**
	   * The date when the last pinned message was pinned, if there was one
	   * @type {?Date}
	   * @readonly
	   */
	  get lastPinAt() {
	    return this.lastPinTimestamp && new Date(this.lastPinTimestamp);
	  }

	  /**
	   * Represents the data for a poll answer.
	   * @typedef {Object} PollAnswerData
	   * @property {string} text The text for the poll answer
	   * @property {EmojiIdentifierResolvable} [emoji] The emoji for the poll answer
	   */

	  /**
	   * Represents the data for a poll.
	   * @typedef {Object} PollData
	   * @property {PollQuestionMedia} question The question for the poll
	   * @property {PollAnswerData[]} answers The answers for the poll
	   * @property {number} duration The duration in hours for the poll
	   * @property {boolean} allowMultiselect Whether the poll allows multiple answers
	   * @property {PollLayoutType} [layoutType] The layout type for the poll
	   */

	  /**
	   * The base message options for messages.
	   * @typedef {Object} BaseMessageOptions
	   * @property {?string} [content=''] The content for the message. This can only be `null` when editing a message.
	   * @property {Array<(EmbedBuilder|Embed|APIEmbed)>} [embeds] The embeds for the message
	   * @property {MessageMentionOptions} [allowedMentions] Which mentions should be parsed from the message content
	   * (see [here](https://discord.com/developers/docs/resources/message#allowed-mentions-object) for more details)
	   * @property {Array<(AttachmentBuilder|Attachment|AttachmentPayload|BufferResolvable)>} [files]
	   * The files to send with the message.
	   * @property {Array<(ActionRowBuilder|ActionRow|APIActionRowComponent)>} [components]
	   * Action rows containing interactive components for the message (buttons, select menus)
	   */

	  /**
	   * The base message options for messages including a poll.
	   * @typedef {BaseMessageOptions} BaseMessageOptionsWithPoll
	   * @property {PollData} [poll] The poll to send with the message
	   */

	  /**
	   * Options for sending a message with a reply.
	   * @typedef {Object} ReplyOptions
	   * @property {MessageResolvable} messageReference The message to reply to (must be in the same channel and not system)
	   * @property {boolean} [failIfNotExists=this.client.options.failIfNotExists] Whether to error if the referenced
	   * message does not exist (creates a standard message in this case when false)
	   */

	  /**
	   * The options for sending a message.
	   * @typedef {BaseMessageOptionsWithPoll} BaseMessageCreateOptions
	   * @property {boolean} [tts=false] Whether the message should be spoken aloud
	   * @property {string} [nonce] The nonce for the message
	   * <info>This property is required if `enforceNonce` set to `true`.</info>
	   * @property {boolean} [enforceNonce] Whether the nonce should be checked for uniqueness in the past few minutes.
	   * If another message was created by the same author with the same nonce,
	   * that message will be returned and no new message will be created
	   * @property {StickerResolvable[]} [stickers=[]] The stickers to send in the message
	   * @property {MessageFlags} [flags] Which flags to set for the message.
	   * <info>Only `MessageFlags.SuppressEmbeds` and `MessageFlags.SuppressNotifications` can be set.</info>
	   */

	  /**
	   * The options for sending a message.
	   * @typedef {BaseMessageCreateOptions} MessageCreateOptions
	   * @property {ReplyOptions} [reply] The options for replying to a message
	   */

	  /**
	   * Options provided to control parsing of mentions by Discord
	   * @typedef {Object} MessageMentionOptions
	   * @property {MessageMentionTypes[]} [parse] Types of mentions to be parsed
	   * @property {Snowflake[]} [users] Snowflakes of Users to be parsed as mentions
	   * @property {Snowflake[]} [roles] Snowflakes of Roles to be parsed as mentions
	   * @property {boolean} [repliedUser=true] Whether the author of the Message being replied to should be pinged
	   */

	  /**
	   * Types of mentions to enable in MessageMentionOptions.
	   * - `roles`
	   * - `users`
	   * - `everyone`
	   * @typedef {string} MessageMentionTypes
	   */

	  /**
	   * Sends a message to this channel.
	   * @param {string|MessagePayload|MessageCreateOptions} options The options to provide
	   * @returns {Promise<Message>}
	   * @example
	   * // Send a basic message
	   * channel.send('hello!')
	   *   .then(message => console.log(`Sent message: ${message.content}`))
	   *   .catch(console.error);
	   * @example
	   * // Send a remote file
	   * channel.send({
	   *   files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']
	   * })
	   *   .then(console.log)
	   *   .catch(console.error);
	   * @example
	   * // Send a local file
	   * channel.send({
	   *   files: [{
	   *     attachment: 'entire/path/to/file.jpg',
	   *     name: 'file.jpg',
	   *     description: 'A description of the file'
	   *   }]
	   * })
	   *   .then(console.log)
	   *   .catch(console.error);
	   */
	  async send(options) {
	    const User = requireUser$3();
	    const { GuildMember } = requireGuildMember();

	    if (this instanceof User || this instanceof GuildMember) {
	      const dm = await this.createDM();
	      return dm.send(options);
	    }

	    let messagePayload;

	    if (options instanceof MessagePayload) {
	      messagePayload = options.resolveBody();
	    } else {
	      messagePayload = MessagePayload.create(this, options).resolveBody();
	    }

	    const { body, files } = await messagePayload.resolveFiles();
	    const d = await this.client.rest.post(Routes.channelMessages(this.id), { body, files });

	    return this.messages.cache.get(d.id) ?? this.messages._add(d);
	  }

	  /**
	   * Sends a typing indicator in the channel.
	   * @returns {Promise<void>} Resolves upon the typing status being sent
	   * @example
	   * // Start typing in a channel
	   * channel.sendTyping();
	   */
	  async sendTyping() {
	    await this.client.rest.post(Routes.channelTyping(this.id));
	  }

	  /**
	   * Creates a Message Collector.
	   * @param {MessageCollectorOptions} [options={}] The options to pass to the collector
	   * @returns {MessageCollector}
	   * @example
	   * // Create a message collector
	   * const filter = message => message.content.includes('discord');
	   * const collector = channel.createMessageCollector({ filter, time: 15_000 });
	   * collector.on('collect', message => console.log(`Collected ${message.content}`));
	   * collector.on('end', collected => console.log(`Collected ${collected.size} items`));
	   */
	  createMessageCollector(options = {}) {
	    return new MessageCollector(this, options);
	  }

	  /**
	   * An object containing the same properties as CollectorOptions, but a few more:
	   * @typedef {MessageCollectorOptions} AwaitMessagesOptions
	   * @property {string[]} [errors] Stop/end reasons that cause the promise to reject
	   */

	  /**
	   * Similar to createMessageCollector but in promise form.
	   * Resolves with a collection of messages that pass the specified filter.
	   * @param {AwaitMessagesOptions} [options={}] Optional options to pass to the internal collector
	   * @returns {Promise<Collection<Snowflake, Message>>}
	   * @example
	   * // Await !vote messages
	   * const filter = m => m.content.startsWith('!vote');
	   * // Errors: ['time'] treats ending because of the time limit as an error
	   * channel.awaitMessages({ filter, max: 4, time: 60_000, errors: ['time'] })
	   *   .then(collected => console.log(collected.size))
	   *   .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));
	   */
	  awaitMessages(options = {}) {
	    return new Promise((resolve, reject) => {
	      const collector = this.createMessageCollector(options);
	      collector.once('end', (collection, reason) => {
	        if (options.errors?.includes(reason)) {
	          reject(collection);
	        } else {
	          resolve(collection);
	        }
	      });
	    });
	  }

	  /**
	   * Creates a component interaction collector.
	   * @param {MessageComponentCollectorOptions} [options={}] Options to send to the collector
	   * @returns {InteractionCollector}
	   * @example
	   * // Create a button interaction collector
	   * const filter = (interaction) => interaction.customId === 'button' && interaction.user.id === 'someId';
	   * const collector = channel.createMessageComponentCollector({ filter, time: 15_000 });
	   * collector.on('collect', interaction => console.log(`Collected ${interaction.customId}`));
	   * collector.on('end', collected => console.log(`Collected ${collected.size} items`));
	   */
	  createMessageComponentCollector(options = {}) {
	    return new InteractionCollector(this.client, {
	      ...options,
	      interactionType: InteractionType.MessageComponent,
	      channel: this,
	    });
	  }

	  /**
	   * Collects a single component interaction that passes the filter.
	   * The Promise will reject if the time expires.
	   * @param {AwaitMessageComponentOptions} [options={}] Options to pass to the internal collector
	   * @returns {Promise<MessageComponentInteraction>}
	   * @example
	   * // Collect a message component interaction
	   * const filter = (interaction) => interaction.customId === 'button' && interaction.user.id === 'someId';
	   * channel.awaitMessageComponent({ filter, time: 15_000 })
	   *   .then(interaction => console.log(`${interaction.customId} was clicked!`))
	   *   .catch(console.error);
	   */
	  awaitMessageComponent(options = {}) {
	    const _options = { ...options, max: 1 };
	    return new Promise((resolve, reject) => {
	      const collector = this.createMessageComponentCollector(_options);
	      collector.once('end', (interactions, reason) => {
	        const interaction = interactions.first();
	        if (interaction) resolve(interaction);
	        else reject(new DiscordjsError(ErrorCodes.InteractionCollectorError, reason));
	      });
	    });
	  }

	  /**
	   * Bulk deletes given messages that are newer than two weeks.
	   * @param {Collection<Snowflake, Message>|MessageResolvable[]|number} messages
	   * Messages or number of messages to delete
	   * @param {boolean} [filterOld=false] Filter messages to remove those which are older than two weeks automatically
	   * @returns {Promise<Collection<Snowflake, Message|undefined>>} Returns the deleted messages
	   * @example
	   * // Bulk delete messages
	   * channel.bulkDelete(5)
	   *   .then(messages => console.log(`Bulk deleted ${messages.size} messages`))
	   *   .catch(console.error);
	   */
	  async bulkDelete(messages, filterOld = false) {
	    if (Array.isArray(messages) || messages instanceof Collection) {
	      let messageIds =
	        messages instanceof Collection ? [...messages.keys()] : messages.map(message => message.id ?? message);
	      if (filterOld) {
	        messageIds = messageIds.filter(
	          id => Date.now() - DiscordSnowflake.timestampFrom(id) < MaxBulkDeletableMessageAge,
	        );
	      }
	      if (messageIds.length === 0) return new Collection();
	      if (messageIds.length === 1) {
	        const message = this.client.actions.MessageDelete.getMessage(
	          {
	            message_id: messageIds[0],
	          },
	          this,
	        );
	        await this.client.rest.delete(Routes.channelMessage(this.id, messageIds[0]));
	        return message ? new Collection([[message.id, message]]) : new Collection();
	      }
	      await this.client.rest.post(Routes.channelBulkDelete(this.id), { body: { messages: messageIds } });
	      return messageIds.reduce(
	        (col, id) =>
	          col.set(
	            id,
	            this.client.actions.MessageDeleteBulk.getMessage(
	              {
	                message_id: id,
	              },
	              this,
	            ),
	          ),
	        new Collection(),
	      );
	    }
	    if (!isNaN(messages)) {
	      const msgs = await this.messages.fetch({ limit: messages });
	      return this.bulkDelete(msgs, filterOld);
	    }
	    throw new DiscordjsTypeError(ErrorCodes.MessageBulkDeleteType);
	  }

	  /**
	   * Fetches all webhooks for the channel.
	   * @returns {Promise<Collection<Snowflake, Webhook>>}
	   * @example
	   * // Fetch webhooks
	   * channel.fetchWebhooks()
	   *   .then(hooks => console.log(`This channel has ${hooks.size} hooks`))
	   *   .catch(console.error);
	   */
	  fetchWebhooks() {
	    return this.guild.channels.fetchWebhooks(this.id);
	  }

	  /**
	   * Options used to create a {@link Webhook}.
	   * @typedef {Object} ChannelWebhookCreateOptions
	   * @property {string} name The name of the webhook
	   * @property {?(BufferResolvable|Base64Resolvable)} [avatar] Avatar for the webhook
	   * @property {string} [reason] Reason for creating the webhook
	   */

	  /**
	   * Creates a webhook for the channel.
	   * @param {ChannelWebhookCreateOptions} [options] Options for creating the webhook
	   * @returns {Promise<Webhook>} Returns the created Webhook
	   * @example
	   * // Create a webhook for the current channel
	   * channel.createWebhook({
	   *   name: 'Snek',
	   *   avatar: 'https://i.imgur.com/mI8XcpG.jpg',
	   *   reason: 'Needed a cool new Webhook'
	   * })
	   *   .then(console.log)
	   *   .catch(console.error)
	   */
	  createWebhook(options) {
	    return this.guild.channels.createWebhook({ channel: this.id, ...options });
	  }

	  /**
	   * Sets the rate limit per user (slowmode) for this channel.
	   * @param {number} rateLimitPerUser The new rate limit in seconds
	   * @param {string} [reason] Reason for changing the channel's rate limit
	   * @returns {Promise<this>}
	   */
	  setRateLimitPerUser(rateLimitPerUser, reason) {
	    return this.edit({ rateLimitPerUser, reason });
	  }

	  /**
	   * Sets whether this channel is flagged as NSFW.
	   * @param {boolean} [nsfw=true] Whether the channel should be considered NSFW
	   * @param {string} [reason] Reason for changing the channel's NSFW flag
	   * @returns {Promise<this>}
	   */
	  setNSFW(nsfw = true, reason) {
	    return this.edit({ nsfw, reason });
	  }

	  static applyToClass(structure, full = false, ignore = []) {
	    const props = ['send'];
	    if (full) {
	      props.push(
	        'lastMessage',
	        'lastPinAt',
	        'bulkDelete',
	        'sendTyping',
	        'createMessageCollector',
	        'awaitMessages',
	        'createMessageComponentCollector',
	        'awaitMessageComponent',
	        'fetchWebhooks',
	        'createWebhook',
	        'setRateLimitPerUser',
	        'setNSFW',
	      );
	    }
	    for (const prop of props) {
	      if (ignore.includes(prop)) continue;
	      Object.defineProperty(
	        structure.prototype,
	        prop,
	        Object.getOwnPropertyDescriptor(TextBasedChannel.prototype, prop),
	      );
	    }
	  }
	}

	TextBasedChannel_1 = TextBasedChannel;

	// Fixes Circular
	// eslint-disable-next-line import/order
	const GuildMessageManager = requireGuildMessageManager();
	return TextBasedChannel_1;
}

var DMMessageManager_1;
var hasRequiredDMMessageManager;

function requireDMMessageManager () {
	if (hasRequiredDMMessageManager) return DMMessageManager_1;
	hasRequiredDMMessageManager = 1;

	const MessageManager = requireMessageManager();

	/**
	 * Manages API methods for messages in direct message channels and holds their cache.
	 * @extends {MessageManager}
	 */
	class DMMessageManager extends MessageManager {
	  /**
	   * The channel that the messages belong to
	   * @name DMMessageManager#channel
	   * @type {DMChannel}
	   */
	}

	DMMessageManager_1 = DMMessageManager;
	return DMMessageManager_1;
}

var DMChannel_1;
var hasRequiredDMChannel;

function requireDMChannel () {
	if (hasRequiredDMChannel) return DMChannel_1;
	hasRequiredDMChannel = 1;

	const { userMention } = requireDist$2();
	const { ChannelType } = requireV10$6();
	const { BaseChannel } = requireBaseChannel();
	const TextBasedChannel = requireTextBasedChannel();
	const DMMessageManager = requireDMMessageManager();
	const Partials = requirePartials();

	/**
	 * Represents a direct message channel between two users.
	 * @extends {BaseChannel}
	 * @implements {TextBasedChannel}
	 */
	class DMChannel extends BaseChannel {
	  constructor(client, data) {
	    super(client, data);

	    // Override the channel type so partials have a known type
	    this.type = ChannelType.DM;

	    /**
	     * A manager of the messages belonging to this channel
	     * @type {DMMessageManager}
	     */
	    this.messages = new DMMessageManager(this);
	  }

	  _patch(data) {
	    super._patch(data);

	    if (data.recipients) {
	      const recipient = data.recipients[0];

	      /**
	       * The recipient's id
	       * @type {Snowflake}
	       */
	      this.recipientId = recipient.id;

	      if ('username' in recipient || this.client.options.partials.includes(Partials.User)) {
	        this.client.users._add(recipient);
	      }
	    }

	    if ('last_message_id' in data) {
	      /**
	       * The channel's last message id, if one was sent
	       * @type {?Snowflake}
	       */
	      this.lastMessageId = data.last_message_id;
	    }

	    if ('last_pin_timestamp' in data) {
	      /**
	       * The timestamp when the last pinned message was pinned, if there was one
	       * @type {?number}
	       */
	      this.lastPinTimestamp = Date.parse(data.last_pin_timestamp);
	    } else {
	      this.lastPinTimestamp ??= null;
	    }
	  }

	  /**
	   * Whether this DMChannel is a partial
	   * @type {boolean}
	   * @readonly
	   */
	  get partial() {
	    return this.lastMessageId === undefined;
	  }

	  /**
	   * The recipient on the other end of the DM
	   * @type {?User}
	   * @readonly
	   */
	  get recipient() {
	    return this.client.users.resolve(this.recipientId);
	  }

	  /**
	   * Fetch this DMChannel.
	   * @param {boolean} [force=true] Whether to skip the cache check and request the API
	   * @returns {Promise<DMChannel>}
	   */
	  fetch(force = true) {
	    return this.client.users.createDM(this.recipientId, { force });
	  }

	  /**
	   * When concatenated with a string, this automatically returns the recipient's mention instead of the
	   * DMChannel object.
	   * @returns {string}
	   * @example
	   * // Logs: Hello from <@123456789012345678>!
	   * console.log(`Hello from ${channel}!`);
	   */
	  toString() {
	    return userMention(this.recipientId);
	  }

	  // These are here only for documentation purposes - they are implemented by TextBasedChannel
	  /* eslint-disable no-empty-function */
	  get lastMessage() {}
	  get lastPinAt() {}
	  send() {}
	  sendTyping() {}
	  createMessageCollector() {}
	  awaitMessages() {}
	  createMessageComponentCollector() {}
	  awaitMessageComponent() {}
	  // Doesn't work on DM channels; bulkDelete() {}
	  // Doesn't work on DM channels; fetchWebhooks() {}
	  // Doesn't work on DM channels; createWebhook() {}
	  // Doesn't work on DM channels; setRateLimitPerUser() {}
	  // Doesn't work on DM channels; setNSFW() {}
	}

	TextBasedChannel.applyToClass(DMChannel, true, [
	  'bulkDelete',
	  'fetchWebhooks',
	  'createWebhook',
	  'setRateLimitPerUser',
	  'setNSFW',
	]);

	DMChannel_1 = DMChannel;
	return DMChannel_1;
}

var GuildForumThreadManager_1;
var hasRequiredGuildForumThreadManager;

function requireGuildForumThreadManager () {
	if (hasRequiredGuildForumThreadManager) return GuildForumThreadManager_1;
	hasRequiredGuildForumThreadManager = 1;

	const { Routes } = requireV10$6();
	const ThreadManager = requireThreadManager();
	const { DiscordjsTypeError, ErrorCodes } = requireErrors$1();
	const MessagePayload = requireMessagePayload();

	/**
	 * Manages API methods for threads in forum channels and stores their cache.
	 * @extends {ThreadManager}
	 */
	class GuildForumThreadManager extends ThreadManager {
	  /**
	   * The channel this Manager belongs to
	   * @name GuildForumThreadManager#channel
	   * @type {ForumChannel}
	   */

	  /**
	   * @typedef {BaseMessageOptions} GuildForumThreadMessageCreateOptions
	   * @property {StickerResolvable} [stickers] The stickers to send with the message
	   * @property {BitFieldResolvable} [flags] The flags to send with the message
	   * <info>Only `MessageFlags.SuppressEmbeds` and `MessageFlags.SuppressNotifications` can be set.</info>
	   */

	  /**
	   * Options for creating a thread.
	   * @typedef {StartThreadOptions} GuildForumThreadCreateOptions
	   * @property {GuildForumThreadMessageCreateOptions|MessagePayload} message The message associated with the thread post
	   * @property {Snowflake[]} [appliedTags] The tags to apply to the thread
	   */

	  /**
	   * Creates a new thread in the channel.
	   * @param {GuildForumThreadCreateOptions} [options] Options to create a new thread
	   * @returns {Promise<ThreadChannel>}
	   * @example
	   * // Create a new forum post
	   * forum.threads
	   *   .create({
	   *     name: 'Food Talk',
	   *     autoArchiveDuration: ThreadAutoArchiveDuration.OneHour,
	   *     message: {
	   *      content: 'Discuss your favorite food!',
	   *     },
	   *     reason: 'Needed a separate thread for food',
	   *   })
	   *   .then(threadChannel => console.log(threadChannel))
	   *   .catch(console.error);
	   */
	  async create({
	    name,
	    autoArchiveDuration = this.channel.defaultAutoArchiveDuration,
	    message,
	    reason,
	    rateLimitPerUser,
	    appliedTags,
	  } = {}) {
	    if (!message) {
	      throw new DiscordjsTypeError(ErrorCodes.GuildForumMessageRequired);
	    }

	    const { body, files } = await (message instanceof MessagePayload ? message : MessagePayload.create(this, message))
	      .resolveBody()
	      .resolveFiles();

	    const data = await this.client.rest.post(Routes.threads(this.channel.id), {
	      body: {
	        name,
	        auto_archive_duration: autoArchiveDuration,
	        rate_limit_per_user: rateLimitPerUser,
	        applied_tags: appliedTags,
	        message: body,
	      },
	      files,
	      reason,
	    });

	    return this.client.actions.ThreadCreate.handle(data).thread;
	  }
	}

	GuildForumThreadManager_1 = GuildForumThreadManager;
	return GuildForumThreadManager_1;
}

var ThreadOnlyChannel_1;
var hasRequiredThreadOnlyChannel;

function requireThreadOnlyChannel () {
	if (hasRequiredThreadOnlyChannel) return ThreadOnlyChannel_1;
	hasRequiredThreadOnlyChannel = 1;

	const GuildChannel = requireGuildChannel();
	const TextBasedChannel = requireTextBasedChannel();
	const GuildForumThreadManager = requireGuildForumThreadManager();
	const { transformAPIGuildForumTag, transformAPIGuildDefaultReaction } = requireChannels();

	/**
	 * @typedef {Object} GuildForumTagEmoji
	 * @property {?Snowflake} id The id of a guild's custom emoji
	 * @property {?string} name The unicode character of the emoji
	 */

	/**
	 * @typedef {Object} GuildForumTag
	 * @property {Snowflake} id The id of the tag
	 * @property {string} name The name of the tag
	 * @property {boolean} moderated Whether this tag can only be added to or removed from threads
	 * by a member with the `ManageThreads` permission
	 * @property {?GuildForumTagEmoji} emoji The emoji of this tag
	 */

	/**
	 * @typedef {Object} GuildForumTagData
	 * @property {Snowflake} [id] The id of the tag
	 * @property {string} name The name of the tag
	 * @property {boolean} [moderated] Whether this tag can only be added to or removed from threads
	 * by a member with the `ManageThreads` permission
	 * @property {?GuildForumTagEmoji} [emoji] The emoji of this tag
	 */

	/**
	 * @typedef {Object} DefaultReactionEmoji
	 * @property {?Snowflake} id The id of a guild's custom emoji
	 * @property {?string} name The unicode character of the emoji
	 */

	/**
	 * Represents symbols utilised by thread-only channels.
	 * @extends {GuildChannel}
	 * @implements {TextBasedChannel}
	 * @abstract
	 */
	class ThreadOnlyChannel extends GuildChannel {
	  constructor(guild, data, client) {
	    super(guild, data, client, false);

	    /**
	     * A manager of the threads belonging to this channel
	     * @type {GuildForumThreadManager}
	     */
	    this.threads = new GuildForumThreadManager(this);

	    this._patch(data);
	  }

	  _patch(data) {
	    super._patch(data);
	    if ('available_tags' in data) {
	      /**
	       * The set of tags that can be used in this channel.
	       * @type {GuildForumTag[]}
	       */
	      this.availableTags = data.available_tags.map(tag => transformAPIGuildForumTag(tag));
	    } else {
	      this.availableTags ??= [];
	    }

	    if ('default_reaction_emoji' in data) {
	      /**
	       * The emoji to show in the add reaction button on a thread in a guild forum channel
	       * @type {?DefaultReactionEmoji}
	       */
	      this.defaultReactionEmoji = data.default_reaction_emoji
	        ? transformAPIGuildDefaultReaction(data.default_reaction_emoji)
	        : null;
	    } else {
	      this.defaultReactionEmoji ??= null;
	    }

	    if ('default_thread_rate_limit_per_user' in data) {
	      /**
	       * The initial rate limit per user (slowmode) to set on newly created threads in a channel.
	       * @type {?number}
	       */
	      this.defaultThreadRateLimitPerUser = data.default_thread_rate_limit_per_user;
	    } else {
	      this.defaultThreadRateLimitPerUser ??= null;
	    }

	    if ('rate_limit_per_user' in data) {
	      /**
	       * The rate limit per user (slowmode) for this channel.
	       * @type {?number}
	       */
	      this.rateLimitPerUser = data.rate_limit_per_user;
	    } else {
	      this.rateLimitPerUser ??= null;
	    }

	    if ('default_auto_archive_duration' in data) {
	      /**
	       * The default auto archive duration for newly created threads in this channel.
	       * @type {?ThreadAutoArchiveDuration}
	       */
	      this.defaultAutoArchiveDuration = data.default_auto_archive_duration;
	    } else {
	      this.defaultAutoArchiveDuration ??= null;
	    }

	    if ('nsfw' in data) {
	      /**
	       * If this channel is considered NSFW.
	       * @type {boolean}
	       */
	      this.nsfw = data.nsfw;
	    } else {
	      this.nsfw ??= false;
	    }

	    if ('topic' in data) {
	      /**
	       * The topic of this channel.
	       * @type {?string}
	       */
	      this.topic = data.topic;
	    }

	    if ('default_sort_order' in data) {
	      /**
	       * The default sort order mode used to order posts
	       * @type {?SortOrderType}
	       */
	      this.defaultSortOrder = data.default_sort_order;
	    } else {
	      this.defaultSortOrder ??= null;
	    }
	  }

	  /**
	   * Sets the available tags for this forum channel
	   * @param {GuildForumTagData[]} availableTags The tags to set as available in this channel
	   * @param {string} [reason] Reason for changing the available tags
	   * @returns {Promise<this>}
	   */
	  setAvailableTags(availableTags, reason) {
	    return this.edit({ availableTags, reason });
	  }

	  /**
	   * Sets the default reaction emoji for this channel
	   * @param {?DefaultReactionEmoji} defaultReactionEmoji The emoji to set as the default reaction emoji
	   * @param {string} [reason] Reason for changing the default reaction emoji
	   * @returns {Promise<this>}
	   */
	  setDefaultReactionEmoji(defaultReactionEmoji, reason) {
	    return this.edit({ defaultReactionEmoji, reason });
	  }

	  /**
	   * Sets the default rate limit per user (slowmode) for new threads in this channel
	   * @param {number} defaultThreadRateLimitPerUser The rate limit to set on newly created threads in this channel
	   * @param {string} [reason] Reason for changing the default rate limit
	   * @returns {Promise<this>}
	   */
	  setDefaultThreadRateLimitPerUser(defaultThreadRateLimitPerUser, reason) {
	    return this.edit({ defaultThreadRateLimitPerUser, reason });
	  }

	  /**
	   * Creates an invite to this guild channel.
	   * @param {InviteCreateOptions} [options={}] The options for creating the invite
	   * @returns {Promise<Invite>}
	   * @example
	   * // Create an invite to a channel
	   * channel.createInvite()
	   *   .then(invite => console.log(`Created an invite with a code of ${invite.code}`))
	   *   .catch(console.error);
	   */
	  createInvite(options) {
	    return this.guild.invites.create(this.id, options);
	  }

	  /**
	   * Fetches a collection of invites to this guild channel.
	   * Resolves with a collection mapping invites by their codes.
	   * @param {boolean} [cache=true] Whether to cache the fetched invites
	   * @returns {Promise<Collection<string, Invite>>}
	   */
	  fetchInvites(cache) {
	    return this.guild.invites.fetch({ channelId: this.id, cache });
	  }

	  /**
	   * Sets the default auto archive duration for all newly created threads in this channel.
	   * @param {ThreadAutoArchiveDuration} defaultAutoArchiveDuration The new default auto archive duration
	   * @param {string} [reason] Reason for changing the channel's default auto archive duration
	   * @returns {Promise<this>}
	   */
	  setDefaultAutoArchiveDuration(defaultAutoArchiveDuration, reason) {
	    return this.edit({ defaultAutoArchiveDuration, reason });
	  }

	  /**
	   * Sets a new topic for the guild channel.
	   * @param {?string} topic The new topic for the guild channel
	   * @param {string} [reason] Reason for changing the guild channel's topic
	   * @returns {Promise<this>}
	   * @example
	   * // Set a new channel topic
	   * channel.setTopic('needs more rate limiting')
	   *   .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))
	   *   .catch(console.error);
	   */
	  setTopic(topic, reason) {
	    return this.edit({ topic, reason });
	  }

	  /**
	   * Sets the default sort order mode used to order posts
	   * @param {?SortOrderType} defaultSortOrder The default sort order mode to set on this channel
	   * @param {string} [reason] Reason for changing the default sort order
	   * @returns {Promise<this>}
	   */
	  setDefaultSortOrder(defaultSortOrder, reason) {
	    return this.edit({ defaultSortOrder, reason });
	  }

	  // These are here only for documentation purposes - they are implemented by TextBasedChannel
	  /* eslint-disable no-empty-function */
	  createWebhook() {}
	  fetchWebhooks() {}
	  setNSFW() {}
	  setRateLimitPerUser() {}
	}

	TextBasedChannel.applyToClass(ThreadOnlyChannel, true, [
	  'send',
	  'lastMessage',
	  'lastPinAt',
	  'bulkDelete',
	  'sendTyping',
	  'createMessageCollector',
	  'awaitMessages',
	  'createMessageComponentCollector',
	  'awaitMessageComponent',
	]);

	ThreadOnlyChannel_1 = ThreadOnlyChannel;
	return ThreadOnlyChannel_1;
}

var ThreadMemberFlagsBitField_1;
var hasRequiredThreadMemberFlagsBitField;

function requireThreadMemberFlagsBitField () {
	if (hasRequiredThreadMemberFlagsBitField) return ThreadMemberFlagsBitField_1;
	hasRequiredThreadMemberFlagsBitField = 1;

	const BitField = requireBitField();

	/**
	 * Data structure that makes it easy to interact with a {@link ThreadMember#flags} bitfield.
	 * @extends {BitField}
	 */
	class ThreadMemberFlagsBitField extends BitField {
	  /**
	   * Numeric thread member flags. There are currently no bitflags relevant to bots for this.
	   * @type {Object<string, number>}
	   * @memberof ThreadMemberFlagsBitField
	   */
	  static Flags = {};
	}

	/**
	 * @name ThreadMemberFlagsBitField
	 * @kind constructor
	 * @memberof ThreadMemberFlagsBitField
	 * @param {BitFieldResolvable} [bits=0] Bit(s) to read from
	 */

	/**
	 * Bitfield of the packed bits
	 * @type {number}
	 * @name ThreadMemberFlagsBitField#bitfield
	 */

	ThreadMemberFlagsBitField_1 = ThreadMemberFlagsBitField;
	return ThreadMemberFlagsBitField_1;
}

var ThreadMember_1;
var hasRequiredThreadMember;

function requireThreadMember () {
	if (hasRequiredThreadMember) return ThreadMember_1;
	hasRequiredThreadMember = 1;

	const Base = requireBase$2();
	const ThreadMemberFlagsBitField = requireThreadMemberFlagsBitField();

	/**
	 * Represents a Member for a Thread.
	 * @extends {Base}
	 */
	class ThreadMember extends Base {
	  constructor(thread, data, extra = {}) {
	    super(thread.client);

	    /**
	     * The thread that this member is a part of
	     * @type {ThreadChannel}
	     */
	    this.thread = thread;

	    /**
	     * The timestamp the member last joined the thread at
	     * @type {?number}
	     */
	    this.joinedTimestamp = null;

	    /**
	     * The flags for this thread member. This will be `null` if partial.
	     * @type {?ThreadMemberFlagsBitField}
	     */
	    this.flags = null;

	    /**
	     * The id of the thread member
	     * @type {Snowflake}
	     */
	    this.id = data.user_id;

	    this._patch(data, extra);
	  }

	  _patch(data, extra = {}) {
	    if ('join_timestamp' in data) this.joinedTimestamp = Date.parse(data.join_timestamp);
	    if ('flags' in data) this.flags = new ThreadMemberFlagsBitField(data.flags).freeze();

	    if ('member' in data) {
	      /**
	       * The guild member associated with this thread member.
	       * @type {?GuildMember}
	       * @private
	       */
	      this.member = this.thread.guild.members._add(data.member, extra.cache);
	    } else {
	      this.member ??= null;
	    }
	  }

	  /**
	   * Whether this thread member is a partial
	   * @type {boolean}
	   * @readonly
	   */
	  get partial() {
	    return this.flags === null;
	  }

	  /**
	   * The guild member associated with this thread member
	   * @type {?GuildMember}
	   * @readonly
	   */
	  get guildMember() {
	    return this.member ?? this.thread.guild.members.resolve(this.id);
	  }

	  /**
	   * The last time this member joined the thread
	   * @type {?Date}
	   * @readonly
	   */
	  get joinedAt() {
	    return this.joinedTimestamp && new Date(this.joinedTimestamp);
	  }

	  /**
	   * The user associated with this thread member
	   * @type {?User}
	   * @readonly
	   */
	  get user() {
	    return this.client.users.resolve(this.id);
	  }

	  /**
	   * Whether the client user can manage this thread member
	   * @type {boolean}
	   * @readonly
	   */
	  get manageable() {
	    return !this.thread.archived && this.thread.editable;
	  }

	  /**
	   * Removes this member from the thread.
	   * @param {string} [reason] Reason for removing the member
	   * @returns {Promise<ThreadMember>}
	   */
	  async remove(reason) {
	    await this.thread.members.remove(this.id, reason);
	    return this;
	  }
	}

	ThreadMember_1 = ThreadMember;
	return ThreadMember_1;
}

var ThreadMemberManager_1;
var hasRequiredThreadMemberManager;

function requireThreadMemberManager () {
	if (hasRequiredThreadMemberManager) return ThreadMemberManager_1;
	hasRequiredThreadMemberManager = 1;

	const { Collection } = requireDist$3();
	const { makeURLSearchParams } = requireWeb();
	const { Routes } = requireV10$6();
	const CachedManager = requireCachedManager();
	const { DiscordjsTypeError, ErrorCodes } = requireErrors$1();
	const ThreadMember = requireThreadMember();

	/**
	 * Manages API methods for GuildMembers and stores their cache.
	 * @extends {CachedManager}
	 */
	class ThreadMemberManager extends CachedManager {
	  constructor(thread, iterable) {
	    super(thread.client, ThreadMember, iterable);

	    /**
	     * The thread this manager belongs to
	     * @type {ThreadChannel}
	     */
	    this.thread = thread;
	  }

	  /**
	   * The cache of this Manager
	   * @type {Collection<Snowflake, ThreadMember>}
	   * @name ThreadMemberManager#cache
	   */

	  _add(data, cache = true) {
	    const existing = this.cache.get(data.user_id);
	    if (cache) existing?._patch(data, { cache });
	    if (existing) return existing;

	    const member = new ThreadMember(this.thread, data, { cache });
	    if (cache) this.cache.set(data.user_id, member);
	    return member;
	  }

	  /**
	   * Fetches the client user as a ThreadMember of the thread.
	   * @param {BaseFetchOptions} [options] The options for fetching the member
	   * @returns {Promise<ThreadMember>}
	   */
	  fetchMe(options) {
	    return this.fetch({ ...options, member: this.client.user.id });
	  }

	  /**
	   * The client user as a ThreadMember of this ThreadChannel
	   * @type {?ThreadMember}
	   * @readonly
	   */
	  get me() {
	    return this.resolve(this.client.user.id);
	  }

	  /**
	   * Data that resolves to give a ThreadMember object. This can be:
	   * * A ThreadMember object
	   * * A User resolvable
	   * @typedef {ThreadMember|UserResolvable} ThreadMemberResolvable
	   */

	  /**
	   * Resolves a {@link ThreadMemberResolvable} to a {@link ThreadMember} object.
	   * @param {ThreadMemberResolvable} member The user that is part of the thread
	   * @returns {?GuildMember}
	   */
	  resolve(member) {
	    const memberResolvable = super.resolve(member);
	    if (memberResolvable) return memberResolvable;
	    const userResolvable = this.client.users.resolveId(member);
	    if (userResolvable) return super.resolve(userResolvable);
	    return null;
	  }

	  /**
	   * Resolves a {@link ThreadMemberResolvable} to a {@link ThreadMember} id string.
	   * @param {ThreadMemberResolvable} member The user that is part of the guild
	   * @returns {?Snowflake}
	   */
	  resolveId(member) {
	    const memberResolvable = super.resolveId(member);
	    if (memberResolvable) return memberResolvable;
	    const userResolvable = this.client.users.resolveId(member);
	    return this.cache.has(userResolvable) ? userResolvable : null;
	  }

	  /**
	   * Adds a member to the thread.
	   * @param {UserResolvable|'@me'} member The member to add
	   * @param {string} [reason] The reason for adding this member
	   * @returns {Promise<Snowflake>}
	   */
	  async add(member, reason) {
	    const id = member === '@me' ? member : this.client.users.resolveId(member);
	    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'member', 'UserResolvable');
	    await this.client.rest.put(Routes.threadMembers(this.thread.id, id), { reason });
	    return id;
	  }

	  /**
	   * Remove a user from the thread.
	   * @param {UserResolvable|'@me'} member The member to remove
	   * @param {string} [reason] The reason for removing this member from the thread
	   * @returns {Promise<Snowflake>}
	   */
	  async remove(member, reason) {
	    const id = member === '@me' ? member : this.client.users.resolveId(member);
	    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'member', 'UserResolvable');
	    await this.client.rest.delete(Routes.threadMembers(this.thread.id, id), { reason });
	    return id;
	  }

	  /**
	   * Options used to fetch a thread member.
	   * @typedef {BaseFetchOptions} FetchThreadMemberOptions
	   * @property {ThreadMemberResolvable} member The thread member to fetch
	   * @property {boolean} [withMember] Whether to also return the guild member associated with this thread member
	   */

	  /**
	   * Options used to fetch multiple thread members with guild member data.
	   * <info>With `withMember` set to `true`, pagination is enabled.</info>
	   * @typedef {Object} FetchThreadMembersWithGuildMemberDataOptions
	   * @property {true} withMember Whether to also return the guild member data
	   * @property {Snowflake} [after] Consider only thread members after this id
	   * @property {number} [limit] The maximum number of thread members to return
	   * @property {boolean} [cache] Whether to cache the fetched thread members and guild members
	   */

	  /**
	   * Options used to fetch multiple thread members without guild member data.
	   * @typedef {Object} FetchThreadMembersWithoutGuildMemberDataOptions
	   * @property {false} [withMember] Whether to also return the guild member data
	   * @property {boolean} [cache] Whether to cache the fetched thread members
	   */

	  /**
	   * Options used to fetch multiple thread members.
	   * @typedef {FetchThreadMembersWithGuildMemberDataOptions|
	   * FetchThreadMembersWithoutGuildMemberDataOptions} FetchThreadMembersOptions
	   */

	  /**
	   * Fetches thread member(s) from Discord.
	   * <info>This method requires the {@link GatewayIntentBits.GuildMembers} privileged gateway intent.</info>
	   * @param {ThreadMemberResolvable|FetchThreadMemberOptions|FetchThreadMembersOptions} [options]
	   * Options for fetching thread member(s)
	   * @returns {Promise<ThreadMember|Collection<Snowflake, ThreadMember>>}
	   */
	  fetch(options) {
	    if (!options) return this._fetchMany();
	    const { member, withMember, cache, force } = options;
	    const resolvedMember = this.resolveId(member ?? options);
	    if (resolvedMember) return this._fetchSingle({ member: resolvedMember, withMember, cache, force });
	    return this._fetchMany(options);
	  }

	  async _fetchSingle({ member, withMember, cache, force = false }) {
	    if (!force) {
	      const existing = this.cache.get(member);
	      if (existing) return existing;
	    }

	    const data = await this.client.rest.get(Routes.threadMembers(this.thread.id, member), {
	      query: makeURLSearchParams({ with_member: withMember }),
	    });

	    return this._add(data, cache);
	  }

	  async _fetchMany({ withMember, after, limit, cache } = {}) {
	    const data = await this.client.rest.get(Routes.threadMembers(this.thread.id), {
	      query: makeURLSearchParams({ with_member: withMember, after, limit }),
	    });

	    return data.reduce((col, member) => col.set(member.user_id, this._add(member, cache)), new Collection());
	  }
	}

	ThreadMemberManager_1 = ThreadMemberManager;
	return ThreadMemberManager_1;
}

var ThreadChannel_1;
var hasRequiredThreadChannel;

function requireThreadChannel () {
	if (hasRequiredThreadChannel) return ThreadChannel_1;
	hasRequiredThreadChannel = 1;

	const { DiscordAPIError } = requireWeb();
	const { lazy } = requireDist$7();
	const { RESTJSONErrorCodes, ChannelFlags, ChannelType, PermissionFlagsBits, Routes } = requireV10$6();
	const { BaseChannel } = requireBaseChannel();
	const getThreadOnlyChannel = lazy(() => requireThreadOnlyChannel());
	const TextBasedChannel = requireTextBasedChannel();
	const { DiscordjsError, DiscordjsRangeError, ErrorCodes } = requireErrors$1();
	const GuildMessageManager = requireGuildMessageManager();
	const ThreadMemberManager = requireThreadMemberManager();
	const ChannelFlagsBitField = requireChannelFlagsBitField();

	/**
	 * Represents a thread channel on Discord.
	 * @extends {BaseChannel}
	 * @implements {TextBasedChannel}
	 */
	class ThreadChannel extends BaseChannel {
	  constructor(guild, data, client) {
	    super(guild?.client ?? client, data, false);

	    /**
	     * The guild the thread is in
	     * @type {Guild}
	     */
	    this.guild = guild;

	    /**
	     * The id of the guild the channel is in
	     * @type {Snowflake}
	     */
	    this.guildId = guild?.id ?? data.guild_id;

	    /**
	     * A manager of the messages sent to this thread
	     * @type {GuildMessageManager}
	     */
	    this.messages = new GuildMessageManager(this);

	    /**
	     * A manager of the members that are part of this thread
	     * @type {ThreadMemberManager}
	     */
	    this.members = new ThreadMemberManager(this);
	    if (data) this._patch(data);
	  }

	  _patch(data) {
	    super._patch(data);

	    if ('message' in data) this.messages._add(data.message);

	    if ('name' in data) {
	      /**
	       * The name of the thread
	       * @type {string}
	       */
	      this.name = data.name;
	    }

	    if ('guild_id' in data) {
	      this.guildId = data.guild_id;
	    }

	    if ('parent_id' in data) {
	      /**
	       * The id of the parent channel of this thread
	       * @type {?Snowflake}
	       */
	      this.parentId = data.parent_id;
	    } else {
	      this.parentId ??= null;
	    }

	    if ('thread_metadata' in data) {
	      /**
	       * Whether the thread is locked
	       * @type {?boolean}
	       */
	      this.locked = data.thread_metadata.locked ?? false;

	      /**
	       * Whether members without the {@link PermissionFlagsBits.ManageThreads} permission
	       * can invite other members to this thread.
	       * <info>This property is always `null` in public threads.</info>
	       * @type {?boolean}
	       */
	      this.invitable = this.type === ChannelType.PrivateThread ? (data.thread_metadata.invitable ?? false) : null;

	      /**
	       * Whether the thread is archived
	       * @type {?boolean}
	       */
	      this.archived = data.thread_metadata.archived;

	      /**
	       * The amount of time (in minutes) after which the thread will automatically archive in case of no recent activity
	       * @type {?ThreadAutoArchiveDuration}
	       */
	      this.autoArchiveDuration = data.thread_metadata.auto_archive_duration;

	      /**
	       * The timestamp when the thread's archive status was last changed
	       * <info>If the thread was never archived or unarchived, this is the timestamp at which the thread was
	       * created</info>
	       * @type {?number}
	       */
	      this.archiveTimestamp = Date.parse(data.thread_metadata.archive_timestamp);

	      if ('create_timestamp' in data.thread_metadata) {
	        // Note: this is needed because we can't assign directly to getters
	        this._createdTimestamp = Date.parse(data.thread_metadata.create_timestamp);
	      }
	    } else {
	      this.locked ??= null;
	      this.archived ??= null;
	      this.autoArchiveDuration ??= null;
	      this.archiveTimestamp ??= null;
	      this.invitable ??= null;
	    }

	    this._createdTimestamp ??= this.type === ChannelType.PrivateThread ? super.createdTimestamp : null;

	    if ('owner_id' in data) {
	      /**
	       * The id of the member who created this thread
	       * @type {?Snowflake}
	       */
	      this.ownerId = data.owner_id;
	    } else {
	      this.ownerId ??= null;
	    }

	    if ('last_message_id' in data) {
	      /**
	       * The last message id sent in this thread, if one was sent
	       * @type {?Snowflake}
	       */
	      this.lastMessageId = data.last_message_id;
	    } else {
	      this.lastMessageId ??= null;
	    }

	    if ('last_pin_timestamp' in data) {
	      /**
	       * The timestamp when the last pinned message was pinned, if there was one
	       * @type {?number}
	       */
	      this.lastPinTimestamp = data.last_pin_timestamp ? Date.parse(data.last_pin_timestamp) : null;
	    } else {
	      this.lastPinTimestamp ??= null;
	    }

	    if ('rate_limit_per_user' in data) {
	      /**
	       * The rate limit per user (slowmode) for this thread in seconds
	       * @type {?number}
	       */
	      this.rateLimitPerUser = data.rate_limit_per_user ?? 0;
	    } else {
	      this.rateLimitPerUser ??= null;
	    }

	    if ('message_count' in data) {
	      /**
	       * The approximate count of messages in this thread
	       * <info>Threads created before July 1, 2022 may have an inaccurate count.
	       * If you need an approximate value higher than that, use `ThreadChannel#messages.cache.size`</info>
	       * @type {?number}
	       */
	      this.messageCount = data.message_count;
	    } else {
	      this.messageCount ??= null;
	    }

	    if ('member_count' in data) {
	      /**
	       * The approximate count of users in this thread
	       * <info>This stops counting at 50. If you need an approximate value higher than that, use
	       * `ThreadChannel#members.cache.size`</info>
	       * @type {?number}
	       */
	      this.memberCount = data.member_count;
	    } else {
	      this.memberCount ??= null;
	    }

	    if ('total_message_sent' in data) {
	      /**
	       * The number of messages ever sent in a thread, similar to {@link ThreadChannel#messageCount} except it
	       * will not decrement whenever a message is deleted
	       * @type {?number}
	       */
	      this.totalMessageSent = data.total_message_sent;
	    } else {
	      this.totalMessageSent ??= null;
	    }

	    if (data.member && this.client.user) this.members._add({ user_id: this.client.user.id, ...data.member });
	    if (data.messages) for (const message of data.messages) this.messages._add(message);

	    if ('applied_tags' in data) {
	      /**
	       * The tags applied to this thread
	       * @type {Snowflake[]}
	       */
	      this.appliedTags = data.applied_tags;
	    } else {
	      this.appliedTags ??= [];
	    }
	  }

	  /**
	   * The timestamp when this thread was created. This isn't available for threads
	   * created before 2022-01-09
	   * @type {?number}
	   * @readonly
	   */
	  get createdTimestamp() {
	    return this._createdTimestamp;
	  }

	  /**
	   * A collection of associated guild member objects of this thread's members
	   * @type {Collection<Snowflake, GuildMember>}
	   * @readonly
	   */
	  get guildMembers() {
	    return this.members.cache.mapValues(member => member.guildMember);
	  }

	  /**
	   * The time at which this thread's archive status was last changed
	   * <info>If the thread was never archived or unarchived, this is the time at which the thread was created</info>
	   * @type {?Date}
	   * @readonly
	   */
	  get archivedAt() {
	    return this.archiveTimestamp && new Date(this.archiveTimestamp);
	  }

	  /**
	   * The time the thread was created at
	   * @type {?Date}
	   * @readonly
	   */
	  get createdAt() {
	    return this.createdTimestamp && new Date(this.createdTimestamp);
	  }

	  /**
	   * The parent channel of this thread
	   * @type {?(NewsChannel|TextChannel|ForumChannel|MediaChannel)}
	   * @readonly
	   */
	  get parent() {
	    return this.guild.channels.resolve(this.parentId);
	  }

	  /**
	   * Makes the client user join the thread.
	   * @returns {Promise<ThreadChannel>}
	   */
	  async join() {
	    await this.members.add('@me');
	    return this;
	  }

	  /**
	   * Makes the client user leave the thread.
	   * @returns {Promise<ThreadChannel>}
	   */
	  async leave() {
	    await this.members.remove('@me');
	    return this;
	  }

	  /**
	   * Gets the overall set of permissions for a member or role in this thread's parent channel, taking overwrites into
	   * account.
	   * @param {GuildMemberResolvable|RoleResolvable} memberOrRole The member or role to obtain the overall permissions for
	   * @param {boolean} [checkAdmin=true] Whether having the {@link PermissionFlagsBits.Administrator} permission
	   * will return all permissions
	   * @returns {?Readonly<PermissionsBitField>}
	   */
	  permissionsFor(memberOrRole, checkAdmin) {
	    return this.parent?.permissionsFor(memberOrRole, checkAdmin) ?? null;
	  }

	  /**
	   * Fetches the owner of this thread. If the thread member object isn't needed,
	   * use {@link ThreadChannel#ownerId} instead.
	   * @param {BaseFetchOptions} [options] The options for fetching the member
	   * @returns {Promise<?ThreadMember>}
	   */
	  async fetchOwner(options) {
	    if (!this.ownerId) {
	      throw new DiscordjsError(ErrorCodes.FetchOwnerId, 'thread');
	    }

	    // TODO: Remove that catch in the next major version
	    const member = await this.members._fetchSingle({ ...options, member: this.ownerId }).catch(error => {
	      if (error instanceof DiscordAPIError && error.code === RESTJSONErrorCodes.UnknownMember) {
	        return null;
	      }

	      throw error;
	    });

	    return member;
	  }

	  /**
	   * Fetches the message that started this thread, if any.
	   * <info>The `Promise` will reject if the original message in a forum post is deleted
	   * or when the original message in the parent channel is deleted.
	   * If you just need the id of that message, use {@link BaseChannel#id} instead.</info>
	   * @param {BaseFetchOptions} [options] Additional options for this fetch
	   * @returns {Promise<?Message<true>>}
	   */
	  // eslint-disable-next-line require-await
	  async fetchStarterMessage(options) {
	    const channel = this.parent instanceof getThreadOnlyChannel() ? this : this.parent;
	    return channel?.messages.fetch({ message: this.id, ...options }) ?? null;
	  }

	  /**
	   * The options used to edit a thread channel
	   * @typedef {Object} ThreadEditOptions
	   * @property {string} [name] The new name for the thread
	   * @property {boolean} [archived] Whether the thread is archived
	   * @property {ThreadAutoArchiveDuration} [autoArchiveDuration] The amount of time after which the thread
	   * should automatically archive in case of no recent activity
	   * @property {number} [rateLimitPerUser] The rate limit per user (slowmode) for the thread in seconds
	   * @property {boolean} [locked] Whether the thread is locked
	   * @property {boolean} [invitable] Whether non-moderators can add other non-moderators to a thread
	   * <info>Can only be edited on {@link ChannelType.PrivateThread}</info>
	   * @property {Snowflake[]} [appliedTags] The tags to apply to the thread
	   * @property {ChannelFlagsResolvable} [flags] The flags to set on the channel
	   * @property {string} [reason] Reason for editing the thread
	   */

	  /**
	   * Edits this thread.
	   * @param {ThreadEditOptions} options The options to provide
	   * @returns {Promise<ThreadChannel>}
	   * @example
	   * // Edit a thread
	   * thread.edit({ name: 'new-thread' })
	   *   .then(editedThread => console.log(editedThread))
	   *   .catch(console.error);
	   */
	  async edit(options) {
	    const newData = await this.client.rest.patch(Routes.channel(this.id), {
	      body: {
	        name: (options.name ?? this.name).trim(),
	        archived: options.archived,
	        auto_archive_duration: options.autoArchiveDuration,
	        rate_limit_per_user: options.rateLimitPerUser,
	        locked: options.locked,
	        invitable: this.type === ChannelType.PrivateThread ? options.invitable : undefined,
	        applied_tags: options.appliedTags,
	        flags: 'flags' in options ? ChannelFlagsBitField.resolve(options.flags) : undefined,
	      },
	      reason: options.reason,
	    });

	    return this.client.actions.ChannelUpdate.handle(newData).updated;
	  }

	  /**
	   * Sets whether the thread is archived.
	   * @param {boolean} [archived=true] Whether the thread is archived
	   * @param {string} [reason] Reason for archiving or unarchiving
	   * @returns {Promise<ThreadChannel>}
	   * @example
	   * // Archive the thread
	   * thread.setArchived(true)
	   *   .then(newThread => console.log(`Thread is now ${newThread.archived ? 'archived' : 'active'}`))
	   *   .catch(console.error);
	   */
	  setArchived(archived = true, reason) {
	    return this.edit({ archived, reason });
	  }

	  /**
	   * Sets the duration after which the thread will automatically archive in case of no recent activity.
	   * @param {ThreadAutoArchiveDuration} autoArchiveDuration The amount of time after which the thread
	   * should automatically archive in case of no recent activity
	   * @param {string} [reason] Reason for changing the auto archive duration
	   * @returns {Promise<ThreadChannel>}
	   * @example
	   * // Set the thread's auto archive time to 1 hour
	   * thread.setAutoArchiveDuration(ThreadAutoArchiveDuration.OneHour)
	   *   .then(newThread => {
	   *     console.log(`Thread will now archive after ${newThread.autoArchiveDuration} minutes of inactivity`);
	   *    });
	   *   .catch(console.error);
	   */
	  setAutoArchiveDuration(autoArchiveDuration, reason) {
	    return this.edit({ autoArchiveDuration, reason });
	  }

	  /**
	   * Sets whether members without the {@link PermissionFlagsBits.ManageThreads} permission
	   * can invite other members to this thread.
	   * @param {boolean} [invitable=true] Whether non-moderators can invite non-moderators to this thread
	   * @param {string} [reason] Reason for changing invite
	   * @returns {Promise<ThreadChannel>}
	   */
	  setInvitable(invitable = true, reason) {
	    if (this.type !== ChannelType.PrivateThread) {
	      return Promise.reject(new DiscordjsRangeError(ErrorCodes.ThreadInvitableType, this.type));
	    }
	    return this.edit({ invitable, reason });
	  }

	  /**
	   * Sets whether the thread can be **unarchived** by anyone with the
	   * {@link PermissionFlagsBits.SendMessages} permission. When a thread is locked, only members with the
	   * {@link PermissionFlagsBits.ManageThreads} permission can unarchive it.
	   * @param {boolean} [locked=true] Whether the thread is locked
	   * @param {string} [reason] Reason for locking or unlocking the thread
	   * @returns {Promise<ThreadChannel>}
	   * @example
	   * // Set the thread to locked
	   * thread.setLocked(true)
	   *   .then(newThread => console.log(`Thread is now ${newThread.locked ? 'locked' : 'unlocked'}`))
	   *   .catch(console.error);
	   */
	  setLocked(locked = true, reason) {
	    return this.edit({ locked, reason });
	  }

	  /**
	   * Sets a new name for this thread.
	   * @param {string} name The new name for the thread
	   * @param {string} [reason] Reason for changing the thread's name
	   * @returns {Promise<ThreadChannel>}
	   * @example
	   * // Change the thread's name
	   * thread.setName('not_general')
	   *   .then(newThread => console.log(`Thread's new name is ${newThread.name}`))
	   *   .catch(console.error);
	   */
	  setName(name, reason) {
	    return this.edit({ name, reason });
	  }

	  /**
	   * Sets the rate limit per user (slowmode) for this thread.
	   * @param {number} rateLimitPerUser The new rate limit in seconds
	   * @param {string} [reason] Reason for changing the thread's rate limit
	   * @returns {Promise<ThreadChannel>}
	   */
	  setRateLimitPerUser(rateLimitPerUser, reason) {
	    return this.edit({ rateLimitPerUser, reason });
	  }

	  /**
	   * Set the applied tags for this channel (only applicable to forum threads)
	   * @param {Snowflake[]} appliedTags The tags to set for this channel
	   * @param {string} [reason] Reason for changing the thread's applied tags
	   * @returns {Promise<ThreadChannel>}
	   */
	  setAppliedTags(appliedTags, reason) {
	    return this.edit({ appliedTags, reason });
	  }

	  /**
	   * Pins this thread from the forum channel (only applicable to forum threads).
	   * @param {string} [reason] Reason for pinning
	   * @returns {Promise<ThreadChannel>}
	   */
	  pin(reason) {
	    return this.edit({ flags: this.flags.add(ChannelFlags.Pinned), reason });
	  }

	  /**
	   * Unpins this thread from the forum channel (only applicable to forum threads).
	   * @param {string} [reason] Reason for unpinning
	   * @returns {Promise<ThreadChannel>}
	   */
	  unpin(reason) {
	    return this.edit({ flags: this.flags.remove(ChannelFlags.Pinned), reason });
	  }

	  /**
	   * Whether the client user is a member of the thread.
	   * @type {boolean}
	   * @readonly
	   */
	  get joined() {
	    return this.members.cache.has(this.client.user?.id);
	  }

	  /**
	   * Whether the thread is editable by the client user (name, archived, autoArchiveDuration)
	   * @type {boolean}
	   * @readonly
	   */
	  get editable() {
	    return (
	      (this.ownerId === this.client.user.id && (this.type !== ChannelType.PrivateThread || this.joined)) ||
	      this.manageable
	    );
	  }

	  /**
	   * Whether the thread is joinable by the client user
	   * @type {boolean}
	   * @readonly
	   */
	  get joinable() {
	    return (
	      !this.archived &&
	      !this.joined &&
	      this.permissionsFor(this.client.user)?.has(
	        this.type === ChannelType.PrivateThread ? PermissionFlagsBits.ManageThreads : PermissionFlagsBits.ViewChannel,
	        false,
	      )
	    );
	  }

	  /**
	   * Whether the thread is manageable by the client user, for deleting or editing rateLimitPerUser or locked.
	   * @type {boolean}
	   * @readonly
	   */
	  get manageable() {
	    const permissions = this.permissionsFor(this.client.user);
	    if (!permissions) return false;
	    // This flag allows managing even if timed out
	    if (permissions.has(PermissionFlagsBits.Administrator, false)) return true;

	    return (
	      this.guild.members.me.communicationDisabledUntilTimestamp < Date.now() &&
	      permissions.has(PermissionFlagsBits.ManageThreads, false)
	    );
	  }

	  /**
	   * Whether the thread is viewable by the client user
	   * @type {boolean}
	   * @readonly
	   */
	  get viewable() {
	    if (this.client.user.id === this.guild.ownerId) return true;
	    const permissions = this.permissionsFor(this.client.user);
	    if (!permissions) return false;
	    return permissions.has(PermissionFlagsBits.ViewChannel, false);
	  }

	  /**
	   * Whether the client user can send messages in this thread
	   * @type {boolean}
	   * @readonly
	   */
	  get sendable() {
	    const permissions = this.permissionsFor(this.client.user);
	    if (!permissions) return false;
	    // This flag allows sending even if timed out
	    if (permissions.has(PermissionFlagsBits.Administrator, false)) return true;

	    return (
	      !(this.archived && this.locked && !this.manageable) &&
	      (this.type !== ChannelType.PrivateThread || this.joined || this.manageable) &&
	      permissions.has(PermissionFlagsBits.SendMessagesInThreads, false) &&
	      this.guild.members.me.communicationDisabledUntilTimestamp < Date.now()
	    );
	  }

	  /**
	   * Whether the thread is unarchivable by the client user
	   * @type {boolean}
	   * @readonly
	   */
	  get unarchivable() {
	    return this.archived && this.sendable && (!this.locked || this.manageable);
	  }

	  /**
	   * Deletes this thread.
	   * @param {string} [reason] Reason for deleting this thread
	   * @returns {Promise<ThreadChannel>}
	   * @example
	   * // Delete the thread
	   * thread.delete('cleaning out old threads')
	   *   .then(deletedThread => console.log(deletedThread))
	   *   .catch(console.error);
	   */
	  async delete(reason) {
	    await this.guild.channels.delete(this.id, reason);
	    return this;
	  }

	  // These are here only for documentation purposes - they are implemented by TextBasedChannel
	  /* eslint-disable no-empty-function */
	  get lastMessage() {}
	  get lastPinAt() {}
	  send() {}
	  sendTyping() {}
	  createMessageCollector() {}
	  awaitMessages() {}
	  createMessageComponentCollector() {}
	  awaitMessageComponent() {}
	  bulkDelete() {}
	  // Doesn't work on Thread channels; setRateLimitPerUser() {}
	  // Doesn't work on Thread channels; setNSFW() {}
	}

	TextBasedChannel.applyToClass(ThreadChannel, true, ['fetchWebhooks', 'setRateLimitPerUser', 'setNSFW']);

	ThreadChannel_1 = ThreadChannel;
	return ThreadChannel_1;
}

var ThreadManager_1;
var hasRequiredThreadManager;

function requireThreadManager () {
	if (hasRequiredThreadManager) return ThreadManager_1;
	hasRequiredThreadManager = 1;

	const { Collection } = requireDist$3();
	const { makeURLSearchParams } = requireWeb();
	const { Routes } = requireV10$6();
	const CachedManager = requireCachedManager();
	const { DiscordjsTypeError, ErrorCodes } = requireErrors$1();
	const ThreadChannel = requireThreadChannel();
	const { MakeCacheOverrideSymbol } = requireSymbols();

	/**
	 * Manages API methods for thread-based channels and stores their cache.
	 * @extends {CachedManager}
	 */
	class ThreadManager extends CachedManager {
	  static [MakeCacheOverrideSymbol] = ThreadManager;

	  constructor(channel, iterable) {
	    super(channel.client, ThreadChannel, iterable);

	    /**
	     * The channel this Manager belongs to
	     * @type {TextChannel|NewsChannel|ForumChannel|MediaChannel}
	     */
	    this.channel = channel;
	  }

	  /**
	   * Data that can be resolved to a Thread Channel object. This can be:
	   * * A ThreadChannel object
	   * * A Snowflake
	   * @typedef {ThreadChannel|Snowflake} ThreadChannelResolvable
	   */

	  /**
	   * The cache of this Manager
	   * @type {Collection<Snowflake, ThreadChannel>}
	   * @name ThreadManager#cache
	   */

	  _add(thread) {
	    const existing = this.cache.get(thread.id);
	    if (existing) return existing;
	    this.cache.set(thread.id, thread);
	    return thread;
	  }

	  /**
	   * Resolves a {@link ThreadChannelResolvable} to a {@link ThreadChannel} object.
	   * @method resolve
	   * @memberof ThreadManager
	   * @instance
	   * @param {ThreadChannelResolvable} thread The ThreadChannel resolvable to resolve
	   * @returns {?ThreadChannel}
	   */

	  /**
	   * Resolves a {@link ThreadChannelResolvable} to a {@link ThreadChannel} id.
	   * @method resolveId
	   * @memberof ThreadManager
	   * @instance
	   * @param {ThreadChannelResolvable} thread The ThreadChannel resolvable to resolve
	   * @returns {?Snowflake}
	   */

	  /**
	   * Options for fetching multiple threads.
	   * @typedef {Object} FetchThreadsOptions
	   * @property {FetchArchivedThreadOptions} [archived] Options used to fetch archived threads
	   */

	  /**
	   * Obtains a thread from Discord, or the channel cache if it's already available.
	   * @param {ThreadChannelResolvable|FetchThreadsOptions} [options] The options to fetch threads. If it is a
	   * ThreadChannelResolvable then the specified thread will be fetched. Fetches all active threads if `undefined`
	   * @param {BaseFetchOptions} [cacheOptions] Additional options for this fetch. <warn>The `force` field gets ignored
	   * if `options` is not a {@link ThreadChannelResolvable}</warn>
	   * @returns {Promise<?(ThreadChannel|FetchedThreads|FetchedThreadsMore)>}
	   * {@link FetchedThreads} if active & {@link FetchedThreadsMore} if archived.
	   * @example
	   * // Fetch a thread by its id
	   * channel.threads.fetch('831955138126104859')
	   *   .then(channel => console.log(channel.name))
	   *   .catch(console.error);
	   */
	  fetch(options, { cache, force } = {}) {
	    if (!options) return this.fetchActive(cache);
	    const channel = this.client.channels.resolveId(options);
	    if (channel) return this.client.channels.fetch(channel, { cache, force });
	    if (options.archived) {
	      return this.fetchArchived(options.archived, cache);
	    }
	    return this.fetchActive(cache);
	  }

	  /**
	   * Data that can be resolved to a Date object. This can be:
	   * * A Date object
	   * * A number representing a timestamp
	   * * An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string
	   * @typedef {Date|number|string} DateResolvable
	   */

	  /**
	   * The options used to fetch archived threads.
	   * @typedef {Object} FetchArchivedThreadOptions
	   * @property {string} [type='public'] The type of threads to fetch (`public` or `private`)
	   * @property {boolean} [fetchAll=false] Whether to fetch **all** archived threads when `type` is `private`
	   * <info>This property requires the {@link PermissionFlagsBits.ManageThreads} permission if `true`.</info>
	   * @property {DateResolvable|ThreadChannelResolvable} [before] Only return threads that were archived before this Date
	   * or Snowflake
	   * <warn>Must be a {@link ThreadChannelResolvable} when `type` is `private` and `fetchAll` is `false`.</warn>
	   * @property {number} [limit] Maximum number of threads to return
	   */

	  /**
	   * Data returned from fetching multiple threads.
	   * @typedef {FetchedThreads} FetchedThreadsMore
	   * @property {?boolean} hasMore Whether there are potentially additional threads that require a subsequent call
	   */

	  /**
	   * Obtains a set of archived threads from Discord.
	   * <info>This method requires the {@link PermissionFlagsBits.ReadMessageHistory} permission
	   * in the parent channel.</info>
	   * @param {FetchArchivedThreadOptions} [options] The options to fetch archived threads
	   * @param {boolean} [cache=true] Whether to cache the new thread objects if they aren't already
	   * @returns {Promise<FetchedThreadsMore>}
	   */
	  async fetchArchived({ type = 'public', fetchAll = false, before, limit } = {}, cache = true) {
	    let path = Routes.channelThreads(this.channel.id, type);
	    if (type === 'private' && !fetchAll) {
	      path = Routes.channelJoinedArchivedThreads(this.channel.id);
	    }
	    let timestamp;
	    let id;
	    const query = makeURLSearchParams({ limit });
	    if (before !== undefined) {
	      if (before instanceof ThreadChannel || /^\d{17,19}$/.test(String(before))) {
	        id = this.resolveId(before);
	        timestamp = this.resolve(before)?.archivedAt?.toISOString();
	        const toUse = type === 'private' && !fetchAll ? id : timestamp;
	        if (toUse) {
	          query.set('before', toUse);
	        }
	      } else {
	        try {
	          timestamp = new Date(before).toISOString();
	          if (type === 'public' || fetchAll) {
	            query.set('before', timestamp);
	          }
	        } catch {
	          throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'before', 'DateResolvable or ThreadChannelResolvable');
	        }
	      }
	    }

	    const raw = await this.client.rest.get(path, { query });
	    return this.constructor._mapThreads(raw, this.client, { parent: this.channel, cache });
	  }

	  /**
	   * Obtains all active threads in the channel.
	   * @param {boolean} [cache=true] Whether to cache the fetched data
	   * @returns {Promise<FetchedThreads>}
	   */
	  async fetchActive(cache = true) {
	    const data = await this.channel.guild.channels.rawFetchGuildActiveThreads();
	    return this.constructor._mapThreads(data, this.client, { parent: this.channel, cache });
	  }

	  static _mapThreads(rawThreads, client, { parent, guild, cache }) {
	    const threads = rawThreads.threads.reduce((coll, raw) => {
	      const thread = client.channels._add(raw, guild ?? parent?.guild, { cache });
	      if (parent && thread.parentId !== parent.id) return coll;
	      return coll.set(thread.id, thread);
	    }, new Collection());

	    // Discord sends the thread id as id in this object
	    const threadMembers = rawThreads.members.reduce((coll, raw) => {
	      const thread = threads.get(raw.id);
	      return thread ? coll.set(raw.user_id, thread.members._add(raw)) : coll;
	    }, new Collection());

	    const response = { threads, members: threadMembers };

	    // The GET `/guilds/{guild.id}/threads/active` route does not return `has_more`.
	    if ('has_more' in rawThreads) response.hasMore = rawThreads.has_more;
	    return response;
	  }
	}

	ThreadManager_1 = ThreadManager;
	return ThreadManager_1;
}

var GuildTextThreadManager_1;
var hasRequiredGuildTextThreadManager;

function requireGuildTextThreadManager () {
	if (hasRequiredGuildTextThreadManager) return GuildTextThreadManager_1;
	hasRequiredGuildTextThreadManager = 1;

	const { ChannelType, Routes } = requireV10$6();
	const ThreadManager = requireThreadManager();
	const { DiscordjsTypeError, ErrorCodes } = requireErrors$1();

	/**
	 * Manages API methods for {@link ThreadChannel} objects and stores their cache.
	 * @extends {ThreadManager}
	 */
	class GuildTextThreadManager extends ThreadManager {
	  /**
	   * The channel this Manager belongs to
	   * @name GuildTextThreadManager#channel
	   * @type {TextChannel|NewsChannel}
	   */

	  /**
	   * Options for creating a thread. <warn>Only one of `startMessage` or `type` can be defined.</warn>
	   * @typedef {StartThreadOptions} GuildTextThreadCreateOptions
	   * @property {MessageResolvable} [startMessage] The message to start a thread from.
	   * <warn>If this is defined, then the `type` of thread gets inferred automatically and cannot be changed.</warn>
	   * @property {ThreadChannelTypes} [type] The type of thread to create.
	   * Defaults to {@link ChannelType.PublicThread} if created in a {@link TextChannel}
	   * <warn>When creating threads in a {@link NewsChannel}, this is ignored and is always
	   * {@link ChannelType.AnnouncementThread}</warn>
	   * @property {boolean} [invitable] Whether non-moderators can add other non-moderators to the thread
	   * <info>Can only be set when type will be {@link ChannelType.PrivateThread}</info>
	   */

	  /**
	   * Creates a new thread in the channel.
	   * @param {GuildTextThreadCreateOptions} [options] Options to create a new thread
	   * @returns {Promise<ThreadChannel>}
	   * @example
	   * // Create a new public thread
	   * channel.threads
	   *   .create({
	   *     name: 'food-talk',
	   *     autoArchiveDuration: ThreadAutoArchiveDuration.OneHour,
	   *     reason: 'Needed a separate thread for food',
	   *   })
	   *   .then(threadChannel => console.log(threadChannel))
	   *   .catch(console.error);
	   * @example
	   * // Create a new private thread
	   * channel.threads
	   *   .create({
	   *      name: 'mod-talk',
	   *      autoArchiveDuration: ThreadAutoArchiveDuration.OneHour,
	   *      type: ChannelType.PrivateThread,
	   *      reason: 'Needed a separate thread for moderation',
	   *    })
	   *   .then(threadChannel => console.log(threadChannel))
	   *   .catch(console.error);
	   */
	  async create({
	    name,
	    autoArchiveDuration = this.channel.defaultAutoArchiveDuration,
	    startMessage,
	    type,
	    invitable,
	    reason,
	    rateLimitPerUser,
	  } = {}) {
	    let resolvedType =
	      this.channel.type === ChannelType.GuildAnnouncement ? ChannelType.AnnouncementThread : ChannelType.PublicThread;
	    let startMessageId;
	    if (startMessage) {
	      startMessageId = this.channel.messages.resolveId(startMessage);
	      if (!startMessageId) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'startMessage', 'MessageResolvable');
	    } else if (this.channel.type !== ChannelType.GuildAnnouncement) {
	      resolvedType = type ?? resolvedType;
	    }

	    const data = await this.client.rest.post(Routes.threads(this.channel.id, startMessageId), {
	      body: {
	        name,
	        auto_archive_duration: autoArchiveDuration,
	        type: resolvedType,
	        invitable: resolvedType === ChannelType.PrivateThread ? invitable : undefined,
	        rate_limit_per_user: rateLimitPerUser,
	      },
	      reason,
	    });

	    return this.client.actions.ThreadCreate.handle(data).thread;
	  }
	}

	GuildTextThreadManager_1 = GuildTextThreadManager;
	return GuildTextThreadManager_1;
}

var BaseGuildTextChannel_1;
var hasRequiredBaseGuildTextChannel;

function requireBaseGuildTextChannel () {
	if (hasRequiredBaseGuildTextChannel) return BaseGuildTextChannel_1;
	hasRequiredBaseGuildTextChannel = 1;

	const GuildChannel = requireGuildChannel();
	const TextBasedChannel = requireTextBasedChannel();
	const GuildMessageManager = requireGuildMessageManager();
	const GuildTextThreadManager = requireGuildTextThreadManager();

	/**
	 * Represents a text-based guild channel on Discord.
	 * @extends {GuildChannel}
	 * @implements {TextBasedChannel}
	 */
	class BaseGuildTextChannel extends GuildChannel {
	  constructor(guild, data, client) {
	    super(guild, data, client, false);

	    /**
	     * A manager of the messages sent to this channel
	     * @type {GuildMessageManager}
	     */
	    this.messages = new GuildMessageManager(this);

	    /**
	     * A manager of the threads belonging to this channel
	     * @type {GuildTextThreadManager}
	     */
	    this.threads = new GuildTextThreadManager(this);

	    /**
	     * If the guild considers this channel NSFW
	     * @type {boolean}
	     */
	    this.nsfw = Boolean(data.nsfw);

	    this._patch(data);
	  }

	  _patch(data) {
	    super._patch(data);

	    if ('topic' in data) {
	      /**
	       * The topic of the text channel
	       * @type {?string}
	       */
	      this.topic = data.topic;
	    }

	    if ('nsfw' in data) {
	      this.nsfw = Boolean(data.nsfw);
	    }

	    if ('last_message_id' in data) {
	      /**
	       * The last message id sent in the channel, if one was sent
	       * @type {?Snowflake}
	       */
	      this.lastMessageId = data.last_message_id;
	    }

	    if ('last_pin_timestamp' in data) {
	      /**
	       * The timestamp when the last pinned message was pinned, if there was one
	       * @type {?number}
	       */
	      this.lastPinTimestamp = data.last_pin_timestamp ? Date.parse(data.last_pin_timestamp) : null;
	    }

	    if ('default_auto_archive_duration' in data) {
	      /**
	       * The default auto archive duration for newly created threads in this channel
	       * @type {?ThreadAutoArchiveDuration}
	       */
	      this.defaultAutoArchiveDuration = data.default_auto_archive_duration;
	    }

	    if ('default_thread_rate_limit_per_user' in data) {
	      /**
	       * The initial rate limit per user (slowmode) to set on newly created threads in a channel.
	       * @type {?number}
	       */
	      this.defaultThreadRateLimitPerUser = data.default_thread_rate_limit_per_user;
	    } else {
	      this.defaultThreadRateLimitPerUser ??= null;
	    }

	    if ('messages' in data) {
	      for (const message of data.messages) this.messages._add(message);
	    }
	  }

	  /**
	   * Sets the default auto archive duration for all newly created threads in this channel.
	   * @param {ThreadAutoArchiveDuration} defaultAutoArchiveDuration The new default auto archive duration
	   * @param {string} [reason] Reason for changing the channel's default auto archive duration
	   * @returns {Promise<TextChannel>}
	   */
	  setDefaultAutoArchiveDuration(defaultAutoArchiveDuration, reason) {
	    return this.edit({ defaultAutoArchiveDuration, reason });
	  }

	  /**
	   * Sets the type of this channel.
	   * <info>Only conversion between {@link TextChannel} and {@link NewsChannel} is supported.</info>
	   * @param {ChannelType.GuildText|ChannelType.GuildAnnouncement} type The new channel type
	   * @param {string} [reason] Reason for changing the channel's type
	   * @returns {Promise<GuildChannel>}
	   */
	  setType(type, reason) {
	    return this.edit({ type, reason });
	  }

	  /**
	   * Sets a new topic for the guild channel.
	   * @param {?string} topic The new topic for the guild channel
	   * @param {string} [reason] Reason for changing the guild channel's topic
	   * @returns {Promise<GuildChannel>}
	   * @example
	   * // Set a new channel topic
	   * channel.setTopic('needs more rate limiting')
	   *   .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))
	   *   .catch(console.error);
	   */
	  setTopic(topic, reason) {
	    return this.edit({ topic, reason });
	  }

	  /**
	   * Data that can be resolved to an Application. This can be:
	   * * An Application
	   * * An Activity with associated Application
	   * * A Snowflake
	   * @typedef {Application|Snowflake} ApplicationResolvable
	   */

	  /**
	   * Options used to create an invite to a guild channel.
	   * @typedef {Object} InviteCreateOptions
	   * @property {boolean} [temporary] Whether members that joined via the invite should be automatically
	   * kicked after 24 hours if they have not yet received a role
	   * @property {number} [maxAge] How long the invite should last (in seconds, 0 for forever)
	   * @property {number} [maxUses] Maximum number of uses
	   * @property {boolean} [unique] Create a unique invite, or use an existing one with similar settings
	   * @property {UserResolvable} [targetUser] The user whose stream to display for this invite,
	   * required if `targetType` is {@link InviteTargetType.Stream}, the user must be streaming in the channel
	   * @property {ApplicationResolvable} [targetApplication] The embedded application to open for this invite,
	   * required if `targetType` is {@link InviteTargetType.Stream}, the application must have the
	   * {@link InviteTargetType.EmbeddedApplication} flag
	   * @property {InviteTargetType} [targetType] The type of the target for this voice channel invite
	   * @property {string} [reason] The reason for creating the invite
	   */

	  /**
	   * Creates an invite to this guild channel.
	   * @param {InviteCreateOptions} [options={}] The options for creating the invite
	   * @returns {Promise<Invite>}
	   * @example
	   * // Create an invite to a channel
	   * channel.createInvite()
	   *   .then(invite => console.log(`Created an invite with a code of ${invite.code}`))
	   *   .catch(console.error);
	   */
	  createInvite(options) {
	    return this.guild.invites.create(this.id, options);
	  }

	  /**
	   * Fetches a collection of invites to this guild channel.
	   * Resolves with a collection mapping invites by their codes.
	   * @param {boolean} [cache=true] Whether or not to cache the fetched invites
	   * @returns {Promise<Collection<string, Invite>>}
	   */
	  fetchInvites(cache = true) {
	    return this.guild.invites.fetch({ channelId: this.id, cache });
	  }

	  // These are here only for documentation purposes - they are implemented by TextBasedChannel
	  /* eslint-disable no-empty-function */
	  get lastMessage() {}
	  get lastPinAt() {}
	  send() {}
	  sendTyping() {}
	  createMessageCollector() {}
	  awaitMessages() {}
	  createMessageComponentCollector() {}
	  awaitMessageComponent() {}
	  bulkDelete() {}
	  fetchWebhooks() {}
	  createWebhook() {}
	  setRateLimitPerUser() {}
	  setNSFW() {}
	}

	TextBasedChannel.applyToClass(BaseGuildTextChannel, true);

	BaseGuildTextChannel_1 = BaseGuildTextChannel;
	return BaseGuildTextChannel_1;
}

var NewsChannel_1;
var hasRequiredNewsChannel;

function requireNewsChannel () {
	if (hasRequiredNewsChannel) return NewsChannel_1;
	hasRequiredNewsChannel = 1;

	const { Routes } = requireV10$6();
	const BaseGuildTextChannel = requireBaseGuildTextChannel();
	const { DiscordjsError, ErrorCodes } = requireErrors$1();

	/**
	 * Represents a guild news channel on Discord.
	 * @extends {BaseGuildTextChannel}
	 */
	class NewsChannel extends BaseGuildTextChannel {
	  /**
	   * Adds the target to this channel's followers.
	   * @param {TextChannelResolvable} channel The channel where the webhook should be created
	   * @param {string} [reason] Reason for creating the webhook
	   * @returns {Promise<NewsChannel>}
	   * @example
	   * if (channel.type === ChannelType.GuildAnnouncement) {
	   *   channel.addFollower('222197033908436994', 'Important announcements')
	   *     .then(() => console.log('Added follower'))
	   *     .catch(console.error);
	   * }
	   */
	  async addFollower(channel, reason) {
	    const channelId = this.guild.channels.resolveId(channel);
	    if (!channelId) throw new DiscordjsError(ErrorCodes.GuildChannelResolve);
	    await this.client.rest.post(Routes.channelFollowers(this.id), { body: { webhook_channel_id: channelId }, reason });
	    return this;
	  }
	}

	NewsChannel_1 = NewsChannel;
	return NewsChannel_1;
}

var BaseGuildVoiceChannel_1;
var hasRequiredBaseGuildVoiceChannel;

function requireBaseGuildVoiceChannel () {
	if (hasRequiredBaseGuildVoiceChannel) return BaseGuildVoiceChannel_1;
	hasRequiredBaseGuildVoiceChannel = 1;

	const { Collection } = requireDist$3();
	const { PermissionFlagsBits } = requireV10$6();
	const GuildChannel = requireGuildChannel();
	const TextBasedChannel = requireTextBasedChannel();
	const GuildMessageManager = requireGuildMessageManager();

	/**
	 * Represents a voice-based guild channel on Discord.
	 * @extends {GuildChannel}
	 * @implements {TextBasedChannel}
	 */
	class BaseGuildVoiceChannel extends GuildChannel {
	  constructor(guild, data, client) {
	    super(guild, data, client, false);
	    /**
	     * A manager of the messages sent to this channel
	     * @type {GuildMessageManager}
	     */
	    this.messages = new GuildMessageManager(this);

	    /**
	     * If the guild considers this channel NSFW
	     * @type {boolean}
	     */
	    this.nsfw = Boolean(data.nsfw);

	    this._patch(data);
	  }

	  _patch(data) {
	    super._patch(data);

	    if ('rtc_region' in data) {
	      /**
	       * The RTC region for this voice-based channel. This region is automatically selected if `null`.
	       * @type {?string}
	       */
	      this.rtcRegion = data.rtc_region;
	    }

	    if ('bitrate' in data) {
	      /**
	       * The bitrate of this voice-based channel
	       * @type {number}
	       */
	      this.bitrate = data.bitrate;
	    }

	    if ('user_limit' in data) {
	      /**
	       * The maximum amount of users allowed in this channel.
	       * @type {number}
	       */
	      this.userLimit = data.user_limit;
	    }

	    if ('video_quality_mode' in data) {
	      /**
	       * The camera video quality mode of the channel.
	       * @type {?VideoQualityMode}
	       */
	      this.videoQualityMode = data.video_quality_mode;
	    } else {
	      this.videoQualityMode ??= null;
	    }

	    if ('last_message_id' in data) {
	      /**
	       * The last message id sent in the channel, if one was sent
	       * @type {?Snowflake}
	       */
	      this.lastMessageId = data.last_message_id;
	    }

	    if ('messages' in data) {
	      for (const message of data.messages) this.messages._add(message);
	    }

	    if ('rate_limit_per_user' in data) {
	      /**
	       * The rate limit per user (slowmode) for this channel in seconds
	       * @type {number}
	       */
	      this.rateLimitPerUser = data.rate_limit_per_user;
	    }

	    if ('nsfw' in data) {
	      this.nsfw = data.nsfw;
	    }
	  }

	  /**
	   * The members in this voice-based channel
	   * @type {Collection<Snowflake, GuildMember>}
	   * @readonly
	   */
	  get members() {
	    const coll = new Collection();
	    for (const state of this.guild.voiceStates.cache.values()) {
	      if (state.channelId === this.id && state.member) {
	        coll.set(state.id, state.member);
	      }
	    }
	    return coll;
	  }

	  /**
	   * Checks if the voice-based channel is full
	   * @type {boolean}
	   * @readonly
	   */
	  get full() {
	    return this.userLimit > 0 && this.members.size >= this.userLimit;
	  }

	  /**
	   * Whether the channel is joinable by the client user
	   * @type {boolean}
	   * @readonly
	   */
	  get joinable() {
	    if (!this.viewable) return false;
	    const permissions = this.permissionsFor(this.client.user);
	    if (!permissions) return false;

	    // This flag allows joining even if timed out
	    if (permissions.has(PermissionFlagsBits.Administrator, false)) return true;

	    return (
	      this.guild.members.me.communicationDisabledUntilTimestamp < Date.now() &&
	      permissions.has(PermissionFlagsBits.Connect, false)
	    );
	  }

	  /**
	   * Creates an invite to this guild channel.
	   * @param {InviteCreateOptions} [options={}] The options for creating the invite
	   * @returns {Promise<Invite>}
	   * @example
	   * // Create an invite to a channel
	   * channel.createInvite()
	   *   .then(invite => console.log(`Created an invite with a code of ${invite.code}`))
	   *   .catch(console.error);
	   */
	  createInvite(options) {
	    return this.guild.invites.create(this.id, options);
	  }

	  /**
	   * Fetches a collection of invites to this guild channel.
	   * @param {boolean} [cache=true] Whether to cache the fetched invites
	   * @returns {Promise<Collection<string, Invite>>}
	   */
	  fetchInvites(cache = true) {
	    return this.guild.invites.fetch({ channelId: this.id, cache });
	  }

	  /**
	   * Sets the bitrate of the channel.
	   * @param {number} bitrate The new bitrate
	   * @param {string} [reason] Reason for changing the channel's bitrate
	   * @returns {Promise<BaseGuildVoiceChannel>}
	   * @example
	   * // Set the bitrate of a voice channel
	   * channel.setBitrate(48_000)
	   *   .then(channel => console.log(`Set bitrate to ${channel.bitrate}bps for ${channel.name}`))
	   *   .catch(console.error);
	   */
	  setBitrate(bitrate, reason) {
	    return this.edit({ bitrate, reason });
	  }

	  /**
	   * Sets the RTC region of the channel.
	   * @param {?string} rtcRegion The new region of the channel. Set to `null` to remove a specific region for the channel
	   * @param {string} [reason] The reason for modifying this region.
	   * @returns {Promise<BaseGuildVoiceChannel>}
	   * @example
	   * // Set the RTC region to sydney
	   * channel.setRTCRegion('sydney');
	   * @example
	   * // Remove a fixed region for this channel - let Discord decide automatically
	   * channel.setRTCRegion(null, 'We want to let Discord decide.');
	   */
	  setRTCRegion(rtcRegion, reason) {
	    return this.edit({ rtcRegion, reason });
	  }

	  /**
	   * Sets the user limit of the channel.
	   * @param {number} userLimit The new user limit
	   * @param {string} [reason] Reason for changing the user limit
	   * @returns {Promise<BaseGuildVoiceChannel>}
	   * @example
	   * // Set the user limit of a voice channel
	   * channel.setUserLimit(42)
	   *   .then(channel => console.log(`Set user limit to ${channel.userLimit} for ${channel.name}`))
	   *   .catch(console.error);
	   */
	  setUserLimit(userLimit, reason) {
	    return this.edit({ userLimit, reason });
	  }

	  /**
	   * Sets the camera video quality mode of the channel.
	   * @param {VideoQualityMode} videoQualityMode The new camera video quality mode.
	   * @param {string} [reason] Reason for changing the camera video quality mode.
	   * @returns {Promise<BaseGuildVoiceChannel>}
	   */
	  setVideoQualityMode(videoQualityMode, reason) {
	    return this.edit({ videoQualityMode, reason });
	  }

	  // These are here only for documentation purposes - they are implemented by TextBasedChannel
	  /* eslint-disable no-empty-function */
	  get lastMessage() {}
	  send() {}
	  sendTyping() {}
	  createMessageCollector() {}
	  awaitMessages() {}
	  createMessageComponentCollector() {}
	  awaitMessageComponent() {}
	  bulkDelete() {}
	  fetchWebhooks() {}
	  createWebhook() {}
	  setRateLimitPerUser() {}
	  setNSFW() {}
	}

	TextBasedChannel.applyToClass(BaseGuildVoiceChannel, true, ['lastPinAt']);

	BaseGuildVoiceChannel_1 = BaseGuildVoiceChannel;
	return BaseGuildVoiceChannel_1;
}

var StageChannel_1;
var hasRequiredStageChannel;

function requireStageChannel () {
	if (hasRequiredStageChannel) return StageChannel_1;
	hasRequiredStageChannel = 1;

	const BaseGuildVoiceChannel = requireBaseGuildVoiceChannel();

	/**
	 * Represents a guild stage channel on Discord.
	 * @extends {BaseGuildVoiceChannel}
	 */
	class StageChannel extends BaseGuildVoiceChannel {
	  _patch(data) {
	    super._patch(data);

	    if ('topic' in data) {
	      /**
	       * The topic of the stage channel
	       * @type {?string}
	       */
	      this.topic = data.topic;
	    }
	  }

	  /**
	   * The stage instance of this stage channel, if it exists
	   * @type {?StageInstance}
	   * @readonly
	   */
	  get stageInstance() {
	    return this.guild.stageInstances.cache.find(stageInstance => stageInstance.channelId === this.id) ?? null;
	  }

	  /**
	   * Creates a stage instance associated with this stage channel.
	   * @param {StageInstanceCreateOptions} options The options to create the stage instance
	   * @returns {Promise<StageInstance>}
	   */
	  createStageInstance(options) {
	    return this.guild.stageInstances.create(this.id, options);
	  }

	  /**
	   * Sets a new topic for the guild channel.
	   * @param {?string} topic The new topic for the guild channel
	   * @param {string} [reason] Reason for changing the guild channel's topic
	   * @returns {Promise<StageChannel>}
	   * @example
	   * // Set a new channel topic
	   * stageChannel.setTopic('needs more rate limiting')
	   *   .then(channel => console.log(`Channel's new topic is ${channel.topic}`))
	   *   .catch(console.error);
	   */
	  setTopic(topic, reason) {
	    return this.edit({ topic, reason });
	  }
	}

	/**
	 * Sets the bitrate of the channel.
	 * @method setBitrate
	 * @memberof StageChannel
	 * @instance
	 * @param {number} bitrate The new bitrate
	 * @param {string} [reason] Reason for changing the channel's bitrate
	 * @returns {Promise<StageChannel>}
	 * @example
	 * // Set the bitrate of a voice channel
	 * stageChannel.setBitrate(48_000)
	 *   .then(channel => console.log(`Set bitrate to ${channel.bitrate}bps for ${channel.name}`))
	 *   .catch(console.error);
	 */

	/**
	 * Sets the RTC region of the channel.
	 * @method setRTCRegion
	 * @memberof StageChannel
	 * @instance
	 * @param {?string} rtcRegion The new region of the channel. Set to `null` to remove a specific region for the channel
	 * @param {string} [reason] The reason for modifying this region.
	 * @returns {Promise<StageChannel>}
	 * @example
	 * // Set the RTC region to sydney
	 * stageChannel.setRTCRegion('sydney');
	 * @example
	 * // Remove a fixed region for this channel - let Discord decide automatically
	 * stageChannel.setRTCRegion(null, 'We want to let Discord decide.');
	 */

	/**
	 * Sets the user limit of the channel.
	 * @method setUserLimit
	 * @memberof StageChannel
	 * @instance
	 * @param {number} userLimit The new user limit
	 * @param {string} [reason] Reason for changing the user limit
	 * @returns {Promise<StageChannel>}
	 * @example
	 * // Set the user limit of a voice channel
	 * stageChannel.setUserLimit(42)
	 *   .then(channel => console.log(`Set user limit to ${channel.userLimit} for ${channel.name}`))
	 *   .catch(console.error);
	 */

	/**
	 * Sets the camera video quality mode of the channel.
	 * @method setVideoQualityMode
	 * @memberof StageChannel
	 * @instance
	 * @param {VideoQualityMode} videoQualityMode The new camera video quality mode.
	 * @param {string} [reason] Reason for changing the camera video quality mode.
	 * @returns {Promise<StageChannel>}
	 */

	StageChannel_1 = StageChannel;
	return StageChannel_1;
}

var TextChannel_1;
var hasRequiredTextChannel;

function requireTextChannel () {
	if (hasRequiredTextChannel) return TextChannel_1;
	hasRequiredTextChannel = 1;

	const BaseGuildTextChannel = requireBaseGuildTextChannel();

	/**
	 * Represents a guild text channel on Discord.
	 * @extends {BaseGuildTextChannel}
	 */
	class TextChannel extends BaseGuildTextChannel {
	  _patch(data) {
	    super._patch(data);

	    if ('rate_limit_per_user' in data) {
	      /**
	       * The rate limit per user (slowmode) for this channel in seconds
	       * @type {number}
	       */
	      this.rateLimitPerUser = data.rate_limit_per_user;
	    }
	  }

	  /**
	   * Sets the rate limit per user (slowmode) for this channel.
	   * @param {number} rateLimitPerUser The new rate limit in seconds
	   * @param {string} [reason] Reason for changing the channel's rate limit
	   * @returns {Promise<TextChannel>}
	   */
	  setRateLimitPerUser(rateLimitPerUser, reason) {
	    return this.edit({ rateLimitPerUser, reason });
	  }
	}

	TextChannel_1 = TextChannel;
	return TextChannel_1;
}

var VoiceChannel_1;
var hasRequiredVoiceChannel;

function requireVoiceChannel () {
	if (hasRequiredVoiceChannel) return VoiceChannel_1;
	hasRequiredVoiceChannel = 1;

	const { PermissionFlagsBits } = requireV10$6();
	const BaseGuildVoiceChannel = requireBaseGuildVoiceChannel();

	/**
	 * Represents a guild voice channel on Discord.
	 * @extends {BaseGuildVoiceChannel}
	 */
	class VoiceChannel extends BaseGuildVoiceChannel {
	  /**
	   * Whether the channel is joinable by the client user
	   * @type {boolean}
	   * @readonly
	   */
	  get joinable() {
	    if (!super.joinable) return false;
	    if (this.full && !this.permissionsFor(this.client.user).has(PermissionFlagsBits.MoveMembers, false)) return false;
	    return true;
	  }

	  /**
	   * Checks if the client has permission to send audio to the voice channel
	   * @type {boolean}
	   * @readonly
	   */
	  get speakable() {
	    const permissions = this.permissionsFor(this.client.user);
	    if (!permissions) return false;
	    // This flag allows speaking even if timed out
	    if (permissions.has(PermissionFlagsBits.Administrator, false)) return true;

	    return (
	      this.guild.members.me.communicationDisabledUntilTimestamp < Date.now() &&
	      permissions.has(PermissionFlagsBits.Speak, false)
	    );
	  }
	}

	/**
	 * Sets the bitrate of the channel.
	 * @method setBitrate
	 * @memberof VoiceChannel
	 * @instance
	 * @param {number} bitrate The new bitrate
	 * @param {string} [reason] Reason for changing the channel's bitrate
	 * @returns {Promise<VoiceChannel>}
	 * @example
	 * // Set the bitrate of a voice channel
	 * voiceChannel.setBitrate(48_000)
	 *   .then(channel => console.log(`Set bitrate to ${channel.bitrate}bps for ${channel.name}`))
	 *   .catch(console.error);
	 */

	/**
	 * Sets the RTC region of the channel.
	 * @method setRTCRegion
	 * @memberof VoiceChannel
	 * @instance
	 * @param {?string} rtcRegion The new region of the channel. Set to `null` to remove a specific region for the channel
	 * @param {string} [reason] The reason for modifying this region.
	 * @returns {Promise<VoiceChannel>}
	 * @example
	 * // Set the RTC region to sydney
	 * voiceChannel.setRTCRegion('sydney');
	 * @example
	 * // Remove a fixed region for this channel - let Discord decide automatically
	 * voiceChannel.setRTCRegion(null, 'We want to let Discord decide.');
	 */

	/**
	 * Sets the user limit of the channel.
	 * @method setUserLimit
	 * @memberof VoiceChannel
	 * @instance
	 * @param {number} userLimit The new user limit
	 * @param {string} [reason] Reason for changing the user limit
	 * @returns {Promise<VoiceChannel>}
	 * @example
	 * // Set the user limit of a voice channel
	 * voiceChannel.setUserLimit(42)
	 *   .then(channel => console.log(`Set user limit to ${channel.userLimit} for ${channel.name}`))
	 *   .catch(console.error);
	 */

	/**
	 * Sets the camera video quality mode of the channel.
	 * @method setVideoQualityMode
	 * @memberof VoiceChannel
	 * @instance
	 * @param {VideoQualityMode} videoQualityMode The new camera video quality mode.
	 * @param {string} [reason] Reason for changing the camera video quality mode.
	 * @returns {Promise<VoiceChannel>}
	 */

	VoiceChannel_1 = VoiceChannel;
	return VoiceChannel_1;
}

var DirectoryChannel_1;
var hasRequiredDirectoryChannel;

function requireDirectoryChannel () {
	if (hasRequiredDirectoryChannel) return DirectoryChannel_1;
	hasRequiredDirectoryChannel = 1;

	const { BaseChannel } = requireBaseChannel();

	/**
	 * Represents a channel that displays a directory of guilds.
	 * @extends {BaseChannel}
	 */
	class DirectoryChannel extends BaseChannel {
	  constructor(guild, data, client) {
	    super(client, data);

	    /**
	     * The guild the channel is in
	     * @type {InviteGuild}
	     */
	    this.guild = guild;

	    /**
	     * The id of the guild the channel is in
	     * @type {Snowflake}
	     */
	    this.guildId = guild.id;
	  }

	  _patch(data) {
	    super._patch(data);
	    /**
	     * The channel's name
	     * @type {string}
	     */
	    this.name = data.name;
	  }
	}

	DirectoryChannel_1 = DirectoryChannel;
	return DirectoryChannel_1;
}

var PartialGroupDMMessageManager_1;
var hasRequiredPartialGroupDMMessageManager;

function requirePartialGroupDMMessageManager () {
	if (hasRequiredPartialGroupDMMessageManager) return PartialGroupDMMessageManager_1;
	hasRequiredPartialGroupDMMessageManager = 1;

	const MessageManager = requireMessageManager();

	/**
	 * Manages API methods for messages in group direct message channels and holds their cache.
	 * @extends {MessageManager}
	 */
	class PartialGroupDMMessageManager extends MessageManager {
	  /**
	   * The channel that the messages belong to
	   * @name PartialGroupDMMessageManager#channel
	   * @type {PartialGroupDMChannel}
	   */
	}

	PartialGroupDMMessageManager_1 = PartialGroupDMMessageManager;
	return PartialGroupDMMessageManager_1;
}

var PartialGroupDMChannel_1;
var hasRequiredPartialGroupDMChannel;

function requirePartialGroupDMChannel () {
	if (hasRequiredPartialGroupDMChannel) return PartialGroupDMChannel_1;
	hasRequiredPartialGroupDMChannel = 1;

	const { BaseChannel } = requireBaseChannel();
	const { DiscordjsError, ErrorCodes } = requireErrors$1();
	const PartialGroupDMMessageManager = requirePartialGroupDMMessageManager();

	/**
	 * Represents a Partial Group DM Channel on Discord.
	 * @extends {BaseChannel}
	 */
	class PartialGroupDMChannel extends BaseChannel {
	  constructor(client, data) {
	    super(client, data);

	    // No flags are present when fetching partial group DM channels.
	    this.flags = null;

	    /**
	     * The name of this Group DM Channel
	     * @type {?string}
	     */
	    this.name = data.name;

	    /**
	     * The hash of the channel icon
	     * @type {?string}
	     */
	    this.icon = data.icon;

	    /**
	     * Recipient data received in a {@link PartialGroupDMChannel}.
	     * @typedef {Object} PartialRecipient
	     * @property {string} username The username of the recipient
	     */

	    /**
	     * The recipients of this Group DM Channel.
	     * @type {PartialRecipient[]}
	     */
	    this.recipients = data.recipients;

	    /**
	     * A manager of the messages belonging to this channel
	     * @type {PartialGroupDMMessageManager}
	     */
	    this.messages = new PartialGroupDMMessageManager(this);
	  }

	  /**
	   * The URL to this channel's icon.
	   * @param {ImageURLOptions} [options={}] Options for the image URL
	   * @returns {?string}
	   */
	  iconURL(options = {}) {
	    return this.icon && this.client.rest.cdn.channelIcon(this.id, this.icon, options);
	  }

	  delete() {
	    return Promise.reject(new DiscordjsError(ErrorCodes.DeleteGroupDMChannel));
	  }

	  fetch() {
	    return Promise.reject(new DiscordjsError(ErrorCodes.FetchGroupDMChannel));
	  }
	}

	PartialGroupDMChannel_1 = PartialGroupDMChannel;
	return PartialGroupDMChannel_1;
}

var ForumChannel_1;
var hasRequiredForumChannel;

function requireForumChannel () {
	if (hasRequiredForumChannel) return ForumChannel_1;
	hasRequiredForumChannel = 1;

	const ThreadOnlyChannel = requireThreadOnlyChannel();

	/**
	 * Represents a forum channel.
	 * @extends {ThreadOnlyChannel}
	 */
	class ForumChannel extends ThreadOnlyChannel {
	  _patch(data) {
	    super._patch(data);

	    /**
	     * The default layout type used to display posts
	     * @type {ForumLayoutType}
	     */
	    this.defaultForumLayout = data.default_forum_layout;
	  }

	  /**
	   * Sets the default forum layout type used to display posts
	   * @param {ForumLayoutType} defaultForumLayout The default forum layout type to set on this channel
	   * @param {string} [reason] Reason for changing the default forum layout
	   * @returns {Promise<ForumChannel>}
	   */
	  setDefaultForumLayout(defaultForumLayout, reason) {
	    return this.edit({ defaultForumLayout, reason });
	  }
	}

	ForumChannel_1 = ForumChannel;
	return ForumChannel_1;
}

var MediaChannel_1;
var hasRequiredMediaChannel;

function requireMediaChannel () {
	if (hasRequiredMediaChannel) return MediaChannel_1;
	hasRequiredMediaChannel = 1;

	const ThreadOnlyChannel = requireThreadOnlyChannel();

	/**
	 * Represents a media channel.
	 * @extends {ThreadOnlyChannel}
	 */
	class MediaChannel extends ThreadOnlyChannel {}

	MediaChannel_1 = MediaChannel;
	return MediaChannel_1;
}

var Channels;
var hasRequiredChannels;

function requireChannels () {
	if (hasRequiredChannels) return Channels;
	hasRequiredChannels = 1;

	const { lazy } = requireDist$7();
	const { ChannelType } = requireV10$6();

	const getCategoryChannel = lazy(() => requireCategoryChannel());
	const getDMChannel = lazy(() => requireDMChannel());
	const getNewsChannel = lazy(() => requireNewsChannel());
	const getStageChannel = lazy(() => requireStageChannel());
	const getTextChannel = lazy(() => requireTextChannel());
	const getThreadChannel = lazy(() => requireThreadChannel());
	const getVoiceChannel = lazy(() => requireVoiceChannel());
	const getDirectoryChannel = lazy(() => requireDirectoryChannel());
	const getPartialGroupDMChannel = lazy(() => requirePartialGroupDMChannel());
	const getForumChannel = lazy(() => requireForumChannel());
	const getMediaChannel = lazy(() => requireMediaChannel());

	/**
	 * Extra options for creating a channel.
	 * @typedef {Object} CreateChannelOptions
	 * @property {boolean} [allowFromUnknownGuild] Whether to allow creating a channel from an unknown guild
	 * @private
	 */

	/**
	 * Creates a discord.js channel from data received from the API.
	 * @param {Client} client The client
	 * @param {APIChannel} data The data of the channel to create
	 * @param {Guild} [guild] The guild where this channel belongs
	 * @param {CreateChannelOptions} [extras] Extra information to supply for creating this channel
	 * @returns {BaseChannel} Any kind of channel.
	 * @ignore
	 */
	function createChannel(client, data, guild, { allowUnknownGuild } = {}) {
	  let channel;
	  if (!data.guild_id && !guild) {
	    if ((data.recipients && data.type !== ChannelType.GroupDM) || data.type === ChannelType.DM) {
	      channel = new (getDMChannel())(client, data);
	    } else if (data.type === ChannelType.GroupDM) {
	      channel = new (getPartialGroupDMChannel())(client, data);
	    }
	  } else {
	    guild ??= client.guilds.cache.get(data.guild_id);

	    if (guild || allowUnknownGuild) {
	      switch (data.type) {
	        case ChannelType.GuildText: {
	          channel = new (getTextChannel())(guild, data, client);
	          break;
	        }
	        case ChannelType.GuildVoice: {
	          channel = new (getVoiceChannel())(guild, data, client);
	          break;
	        }
	        case ChannelType.GuildCategory: {
	          channel = new (getCategoryChannel())(guild, data, client);
	          break;
	        }
	        case ChannelType.GuildAnnouncement: {
	          channel = new (getNewsChannel())(guild, data, client);
	          break;
	        }
	        case ChannelType.GuildStageVoice: {
	          channel = new (getStageChannel())(guild, data, client);
	          break;
	        }
	        case ChannelType.AnnouncementThread:
	        case ChannelType.PublicThread:
	        case ChannelType.PrivateThread: {
	          channel = new (getThreadChannel())(guild, data, client);
	          if (!allowUnknownGuild) channel.parent?.threads.cache.set(channel.id, channel);
	          break;
	        }
	        case ChannelType.GuildDirectory:
	          channel = new (getDirectoryChannel())(guild, data, client);
	          break;
	        case ChannelType.GuildForum:
	          channel = new (getForumChannel())(guild, data, client);
	          break;
	        case ChannelType.GuildMedia:
	          channel = new (getMediaChannel())(guild, data, client);
	          break;
	      }
	      if (channel && !allowUnknownGuild) guild.channels?.cache.set(channel.id, channel);
	    }
	  }
	  return channel;
	}

	/**
	 * Transforms an API guild forum tag to camel-cased guild forum tag.
	 * @param {APIGuildForumTag} tag The tag to transform
	 * @returns {GuildForumTag}
	 * @ignore
	 */
	function transformAPIGuildForumTag(tag) {
	  return {
	    id: tag.id,
	    name: tag.name,
	    moderated: tag.moderated,
	    emoji:
	      (tag.emoji_id ?? tag.emoji_name)
	        ? {
	            id: tag.emoji_id,
	            name: tag.emoji_name,
	          }
	        : null,
	  };
	}

	/**
	 * Transforms a camel-cased guild forum tag to an API guild forum tag.
	 * @param {GuildForumTag} tag The tag to transform
	 * @returns {APIGuildForumTag}
	 * @ignore
	 */
	function transformGuildForumTag(tag) {
	  return {
	    id: tag.id,
	    name: tag.name,
	    moderated: tag.moderated,
	    emoji_id: tag.emoji?.id ?? null,
	    emoji_name: tag.emoji?.name ?? null,
	  };
	}

	/**
	 * Transforms an API guild forum default reaction object to a
	 * camel-cased guild forum default reaction object.
	 * @param {APIGuildForumDefaultReactionEmoji} defaultReaction The default reaction to transform
	 * @returns {DefaultReactionEmoji}
	 * @ignore
	 */
	function transformAPIGuildDefaultReaction(defaultReaction) {
	  return {
	    id: defaultReaction.emoji_id,
	    name: defaultReaction.emoji_name,
	  };
	}

	/**
	 * Transforms a camel-cased guild forum default reaction object to an
	 * API guild forum default reaction object.
	 * @param {DefaultReactionEmoji} defaultReaction The default reaction to transform
	 * @returns {APIGuildForumDefaultReactionEmoji}
	 * @ignore
	 */
	function transformGuildDefaultReaction(defaultReaction) {
	  return {
	    emoji_id: defaultReaction.id,
	    emoji_name: defaultReaction.name,
	  };
	}

	Channels = {
	  createChannel,
	  transformAPIGuildForumTag,
	  transformGuildForumTag,
	  transformAPIGuildDefaultReaction,
	  transformGuildDefaultReaction,
	};
	return Channels;
}

var ChannelUpdate;
var hasRequiredChannelUpdate;

function requireChannelUpdate () {
	if (hasRequiredChannelUpdate) return ChannelUpdate;
	hasRequiredChannelUpdate = 1;

	const Action = requireAction();
	const { createChannel } = requireChannels();

	class ChannelUpdateAction extends Action {
	  handle(data) {
	    const client = this.client;
	    let channel = client.channels.cache.get(data.id);

	    if (channel) {
	      const old = channel._update(data);

	      if (channel.type !== data.type) {
	        const newChannel = createChannel(this.client, data, channel.guild);

	        if (!newChannel) {
	          this.client.channels.cache.delete(channel.id);
	          return {};
	        }

	        if (channel.isTextBased() && newChannel.isTextBased()) {
	          for (const [id, message] of channel.messages.cache) newChannel.messages.cache.set(id, message);
	        }

	        channel = newChannel;
	        this.client.channels.cache.set(channel.id, channel);
	      }

	      return {
	        old,
	        updated: channel,
	      };
	    } else {
	      client.channels._add(data);
	    }

	    return {};
	  }
	}

	ChannelUpdate = ChannelUpdateAction;
	return ChannelUpdate;
}

var EntitlementCreate;
var hasRequiredEntitlementCreate;

function requireEntitlementCreate () {
	if (hasRequiredEntitlementCreate) return EntitlementCreate;
	hasRequiredEntitlementCreate = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class EntitlementCreateAction extends Action {
	  handle(data) {
	    const client = this.client;

	    const entitlement = client.application.entitlements._add(data);

	    /**
	     * Emitted whenever an entitlement is created.
	     * @event Client#entitlementCreate
	     * @param {Entitlement} entitlement The entitlement that was created
	     */
	    client.emit(Events.EntitlementCreate, entitlement);

	    return {};
	  }
	}

	EntitlementCreate = EntitlementCreateAction;
	return EntitlementCreate;
}

var EntitlementDelete;
var hasRequiredEntitlementDelete;

function requireEntitlementDelete () {
	if (hasRequiredEntitlementDelete) return EntitlementDelete;
	hasRequiredEntitlementDelete = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class EntitlementDeleteAction extends Action {
	  handle(data) {
	    const client = this.client;

	    const entitlement = client.application.entitlements._add(data, false);

	    client.application.entitlements.cache.delete(entitlement.id);

	    /**
	     * Emitted whenever an entitlement is deleted.
	     * <warn>Entitlements are not deleted when they expire.
	     * This is only triggered when Discord issues a refund or deletes the entitlement manually.</warn>
	     * @event Client#entitlementDelete
	     * @param {Entitlement} entitlement The entitlement that was deleted
	     */
	    client.emit(Events.EntitlementDelete, entitlement);

	    return {};
	  }
	}

	EntitlementDelete = EntitlementDeleteAction;
	return EntitlementDelete;
}

var EntitlementUpdate;
var hasRequiredEntitlementUpdate;

function requireEntitlementUpdate () {
	if (hasRequiredEntitlementUpdate) return EntitlementUpdate;
	hasRequiredEntitlementUpdate = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class EntitlementUpdateAction extends Action {
	  handle(data) {
	    const client = this.client;

	    const oldEntitlement = client.application.entitlements.cache.get(data.id)?._clone() ?? null;
	    const newEntitlement = client.application.entitlements._add(data);

	    /**
	     * Emitted whenever an entitlement is updated - i.e. when a user's subscription renews.
	     * @event Client#entitlementUpdate
	     * @param {?Entitlement} oldEntitlement The entitlement before the update
	     * @param {Entitlement} newEntitlement The entitlement after the update
	     */
	    client.emit(Events.EntitlementUpdate, oldEntitlement, newEntitlement);

	    return {};
	  }
	}

	EntitlementUpdate = EntitlementUpdateAction;
	return EntitlementUpdate;
}

var AutoModerationRule_1;
var hasRequiredAutoModerationRule;

function requireAutoModerationRule () {
	if (hasRequiredAutoModerationRule) return AutoModerationRule_1;
	hasRequiredAutoModerationRule = 1;

	const { Collection } = requireDist$3();
	const Base = requireBase$2();
	const { _transformAPIAutoModerationAction } = requireTransformers();

	/**
	 * Represents an auto moderation rule.
	 * @extends {Base}
	 */
	class AutoModerationRule extends Base {
	  constructor(client, data, guild) {
	    super(client);

	    /**
	     * The id of this auto moderation rule.
	     * @type {Snowflake}
	     */
	    this.id = data.id;

	    /**
	     * The guild this auto moderation rule is for.
	     * @type {Guild}
	     */
	    this.guild = guild;

	    /**
	     * The user that created this auto moderation rule.
	     * @type {Snowflake}
	     */
	    this.creatorId = data.creator_id;

	    /**
	     * The trigger type of this auto moderation rule.
	     * @type {AutoModerationRuleTriggerType}
	     */
	    this.triggerType = data.trigger_type;

	    this._patch(data);
	  }

	  _patch(data) {
	    if ('name' in data) {
	      /**
	       * The name of this auto moderation rule.
	       * @type {string}
	       */
	      this.name = data.name;
	    }

	    if ('event_type' in data) {
	      /**
	       * The event type of this auto moderation rule.
	       * @type {AutoModerationRuleEventType}
	       */
	      this.eventType = data.event_type;
	    }

	    if ('trigger_metadata' in data) {
	      /**
	       * Additional data used to determine whether an auto moderation rule should be triggered.
	       * @typedef {Object} AutoModerationTriggerMetadata
	       * @property {string[]} keywordFilter The substrings that will be searched for in the content
	       * @property {string[]} regexPatterns The regular expression patterns which will be matched against the content
	       * <info>Only Rust-flavored regular expressions are supported.</info>
	       * @property {AutoModerationRuleKeywordPresetType[]} presets
	       * The internally pre-defined wordsets which will be searched for in the content
	       * @property {string[]} allowList The substrings that will be exempt from triggering
	       * {@link AutoModerationRuleTriggerType.Keyword},
	       * {@link AutoModerationRuleTriggerType.KeywordPreset},
	       * and {@link AutoModerationRuleTriggerType.MemberProfile}
	       * @property {?number} mentionTotalLimit The total number of role & user mentions allowed per message
	       * @property {boolean} mentionRaidProtectionEnabled Whether mention raid protection is enabled
	       */

	      /**
	       * The trigger metadata of the rule.
	       * @type {AutoModerationTriggerMetadata}
	       */
	      this.triggerMetadata = {
	        keywordFilter: data.trigger_metadata.keyword_filter ?? [],
	        regexPatterns: data.trigger_metadata.regex_patterns ?? [],
	        presets: data.trigger_metadata.presets ?? [],
	        allowList: data.trigger_metadata.allow_list ?? [],
	        mentionTotalLimit: data.trigger_metadata.mention_total_limit ?? null,
	        mentionRaidProtectionEnabled: data.trigger_metadata.mention_raid_protection_enabled ?? false,
	      };
	    }

	    if ('actions' in data) {
	      /**
	       * An object containing information about an auto moderation rule action.
	       * @typedef {Object} AutoModerationAction
	       * @property {AutoModerationActionType} type The type of this auto moderation rule action
	       * @property {AutoModerationActionMetadata} metadata Additional metadata needed during execution
	       */

	      /**
	       * Additional data used when an auto moderation rule is executed.
	       * @typedef {Object} AutoModerationActionMetadata
	       * @property {?Snowflake} channelId The id of the channel to which content will be logged
	       * @property {?number} durationSeconds The timeout duration in seconds
	       * @property {?string} customMessage The custom message that is shown whenever a message is blocked
	       */

	      /**
	       * The actions of this auto moderation rule.
	       * @type {AutoModerationAction[]}
	       */
	      this.actions = data.actions.map(action => _transformAPIAutoModerationAction(action));
	    }

	    if ('enabled' in data) {
	      /**
	       * Whether this auto moderation rule is enabled.
	       * @type {boolean}
	       */
	      this.enabled = data.enabled;
	    }

	    if ('exempt_roles' in data) {
	      /**
	       * The roles exempt by this auto moderation rule.
	       * @type {Collection<Snowflake, Role>}
	       */
	      this.exemptRoles = new Collection(
	        data.exempt_roles.map(exemptRole => [exemptRole, this.guild.roles.cache.get(exemptRole)]),
	      );
	    }

	    if ('exempt_channels' in data) {
	      /**
	       * The channels exempt by this auto moderation rule.
	       * @type {Collection<Snowflake, GuildChannel|ThreadChannel>}
	       */
	      this.exemptChannels = new Collection(
	        data.exempt_channels.map(exemptChannel => [exemptChannel, this.guild.channels.cache.get(exemptChannel)]),
	      );
	    }
	  }

	  /**
	   * Edits this auto moderation rule.
	   * @param {AutoModerationRuleEditOptions} options Options for editing this auto moderation rule
	   * @returns {Promise<AutoModerationRule>}
	   */
	  edit(options) {
	    return this.guild.autoModerationRules.edit(this.id, options);
	  }

	  /**
	   * Deletes this auto moderation rule.
	   * @param {string} [reason] The reason for deleting this auto moderation rule
	   * @returns {Promise<void>}
	   */
	  delete(reason) {
	    return this.guild.autoModerationRules.delete(this.id, reason);
	  }

	  /**
	   * Sets the name for this auto moderation rule.
	   * @param {string} name The name of this auto moderation rule
	   * @param {string} [reason] The reason for changing the name of this auto moderation rule
	   * @returns {Promise<AutoModerationRule>}
	   */
	  setName(name, reason) {
	    return this.edit({ name, reason });
	  }

	  /**
	   * Sets the event type for this auto moderation rule.
	   * @param {AutoModerationRuleEventType} eventType The event type of this auto moderation rule
	   * @param {string} [reason] The reason for changing the event type of this auto moderation rule
	   * @returns {Promise<AutoModerationRule>}
	   */
	  setEventType(eventType, reason) {
	    return this.edit({ eventType, reason });
	  }

	  /**
	   * Sets the keyword filter for this auto moderation rule.
	   * @param {string[]} keywordFilter The keyword filter of this auto moderation rule
	   * @param {string} [reason] The reason for changing the keyword filter of this auto moderation rule
	   * @returns {Promise<AutoModerationRule>}
	   */
	  setKeywordFilter(keywordFilter, reason) {
	    return this.edit({ triggerMetadata: { ...this.triggerMetadata, keywordFilter }, reason });
	  }

	  /**
	   * Sets the regular expression patterns for this auto moderation rule.
	   * @param {string[]} regexPatterns The regular expression patterns of this auto moderation rule
	   * <info>Only Rust-flavored regular expressions are supported.</info>
	   * @param {string} [reason] The reason for changing the regular expression patterns of this auto moderation rule
	   * @returns {Promise<AutoModerationRule>}
	   */
	  setRegexPatterns(regexPatterns, reason) {
	    return this.edit({ triggerMetadata: { ...this.triggerMetadata, regexPatterns }, reason });
	  }

	  /**
	   * Sets the presets for this auto moderation rule.
	   * @param {AutoModerationRuleKeywordPresetType[]} presets The presets of this auto moderation rule
	   * @param {string} [reason] The reason for changing the presets of this auto moderation rule
	   * @returns {Promise<AutoModerationRule>}
	   */
	  setPresets(presets, reason) {
	    return this.edit({ triggerMetadata: { ...this.triggerMetadata, presets }, reason });
	  }

	  /**
	   * Sets the allow list for this auto moderation rule.
	   * @param {string[]} allowList The substrings that will be exempt from triggering
	   * {@link AutoModerationRuleTriggerType.Keyword},
	   * {@link AutoModerationRuleTriggerType.KeywordPreset},
	   * and {@link AutoModerationRuleTriggerType.MemberProfile}
	   * @param {string} [reason] The reason for changing the allow list of this auto moderation rule
	   * @returns {Promise<AutoModerationRule>}
	   */
	  setAllowList(allowList, reason) {
	    return this.edit({ triggerMetadata: { ...this.triggerMetadata, allowList }, reason });
	  }

	  /**
	   * Sets the mention total limit for this auto moderation rule.
	   * @param {number} mentionTotalLimit The total number of unique role and user mentions allowed per message
	   * @param {string} [reason] The reason for changing the mention total limit of this auto moderation rule
	   * @returns {Promise<AutoModerationRule>}
	   */
	  setMentionTotalLimit(mentionTotalLimit, reason) {
	    return this.edit({ triggerMetadata: { ...this.triggerMetadata, mentionTotalLimit }, reason });
	  }

	  /**
	   * Sets whether to enable mention raid protection for this auto moderation rule.
	   * @param {boolean} mentionRaidProtectionEnabled
	   * Whether to enable mention raid protection for this auto moderation rule
	   * @param {string} [reason] The reason for changing the mention raid protection of this auto moderation rule
	   * @returns {Promise<AutoModerationRule>}
	   */
	  setMentionRaidProtectionEnabled(mentionRaidProtectionEnabled, reason) {
	    return this.edit({ triggerMetadata: { ...this.triggerMetadata, mentionRaidProtectionEnabled }, reason });
	  }

	  /**
	   * Sets the actions for this auto moderation rule.
	   * @param {AutoModerationActionOptions[]} actions The actions of this auto moderation rule
	   * @param {string} [reason] The reason for changing the actions of this auto moderation rule
	   * @returns {Promise<AutoModerationRule>}
	   */
	  setActions(actions, reason) {
	    return this.edit({ actions, reason });
	  }

	  /**
	   * Sets whether this auto moderation rule should be enabled.
	   * @param {boolean} [enabled=true] Whether to enable this auto moderation rule
	   * @param {string} [reason] The reason for enabling or disabling this auto moderation rule
	   * @returns {Promise<AutoModerationRule>}
	   */
	  setEnabled(enabled = true, reason) {
	    return this.edit({ enabled, reason });
	  }

	  /**
	   * Sets the exempt roles for this auto moderation rule.
	   * @param {Collection<Snowflake, Role>|RoleResolvable[]} [exemptRoles]
	   * The roles that should not be affected by the auto moderation rule
	   * @param {string} [reason] The reason for changing the exempt roles of this auto moderation rule
	   * @returns {Promise<AutoModerationRule>}
	   */
	  setExemptRoles(exemptRoles, reason) {
	    return this.edit({ exemptRoles, reason });
	  }

	  /**
	   * Sets the exempt channels for this auto moderation rule.
	   * @param {Collection<Snowflake, GuildChannel|ThreadChannel>|GuildChannelResolvable[]} [exemptChannels]
	   * The channels that should not be affected by the auto moderation rule
	   * @param {string} [reason] The reason for changing the exempt channels of this auto moderation rule
	   * @returns {Promise<AutoModerationRule>}
	   */
	  setExemptChannels(exemptChannels, reason) {
	    return this.edit({ exemptChannels, reason });
	  }
	}

	AutoModerationRule_1 = AutoModerationRule;
	return AutoModerationRule_1;
}

var GuildOnboardingPrompt = {};

var GuildOnboardingPromptOption = {};

var hasRequiredGuildOnboardingPromptOption;

function requireGuildOnboardingPromptOption () {
	if (hasRequiredGuildOnboardingPromptOption) return GuildOnboardingPromptOption;
	hasRequiredGuildOnboardingPromptOption = 1;

	const { Collection } = requireDist$3();
	const Base = requireBase$2();
	const { Emoji } = requireEmoji$2();

	/**
	 * Represents the data of an option from a prompt of a guilds onboarding.
	 * @extends {Base}
	 */
	let GuildOnboardingPromptOption$1 = class GuildOnboardingPromptOption extends Base {
	  constructor(client, data, guildId) {
	    super(client);

	    /**
	     * The id of the guild this onboarding prompt option is from
	     * @type {Snowflake}
	     */
	    this.guildId = guildId;

	    const guild = this.guild;

	    /**
	     * The id of the option
	     * @type {Snowflake}
	     */
	    this.id = data.id;

	    /**
	     * The channels a member is added to when the option is selected
	     * @type {Collection<Snowflake, GuildChannel>}
	     */
	    this.channels = data.channel_ids.reduce(
	      (channels, channelId) => channels.set(channelId, guild.channels.cache.get(channelId)),
	      new Collection(),
	    );

	    /**
	     * The roles assigned to a member when the option is selected
	     * @type {Collection<Snowflake, Role>}
	     */
	    this.roles = data.role_ids.reduce(
	      (roles, roleId) => roles.set(roleId, guild.roles.cache.get(roleId)),
	      new Collection(),
	    );

	    /**
	     * The raw emoji of the option
	     * @type {APIPartialEmoji}
	     * @private
	     */
	    this._emoji = data.emoji;

	    /**
	     * The title of the option
	     * @type {string}
	     */
	    this.title = data.title;

	    /**
	     * The description of the option
	     * @type {?string}
	     */
	    this.description = data.description;
	  }

	  /**
	   * The guild this onboarding prompt option is from
	   * @type {Guild}
	   * @readonly
	   */
	  get guild() {
	    return this.client.guilds.cache.get(this.guildId);
	  }

	  /**
	   * The emoji of this onboarding prompt option
	   * @type {?(GuildEmoji|Emoji)}
	   */
	  get emoji() {
	    if (!this._emoji.id && !this._emoji.name) return null;
	    return this.client.emojis.resolve(this._emoji.id) ?? new Emoji(this.client, this._emoji);
	  }
	};

	GuildOnboardingPromptOption.GuildOnboardingPromptOption = GuildOnboardingPromptOption$1;
	return GuildOnboardingPromptOption;
}

var hasRequiredGuildOnboardingPrompt;

function requireGuildOnboardingPrompt () {
	if (hasRequiredGuildOnboardingPrompt) return GuildOnboardingPrompt;
	hasRequiredGuildOnboardingPrompt = 1;

	const { Collection } = requireDist$3();
	const Base = requireBase$2();
	const { GuildOnboardingPromptOption } = requireGuildOnboardingPromptOption();

	/**
	 * Represents the data of a prompt of a guilds onboarding.
	 * @extends {Base}
	 */
	let GuildOnboardingPrompt$1 = class GuildOnboardingPrompt extends Base {
	  constructor(client, data, guildId) {
	    super(client);

	    /**
	     * The id of the guild this onboarding prompt is from
	     * @type {Snowflake}
	     */
	    this.guildId = guildId;

	    /**
	     * The id of the prompt
	     * @type {Snowflake}
	     */
	    this.id = data.id;

	    /**
	     * The options available within the prompt
	     * @type {Collection<Snowflake, GuildOnboardingPromptOption>}
	     */
	    this.options = data.options.reduce(
	      (options, option) => options.set(option.id, new GuildOnboardingPromptOption(client, option, guildId)),
	      new Collection(),
	    );

	    /**
	     * The title of the prompt
	     * @type {string}
	     */
	    this.title = data.title;

	    /**
	     * Whether users are limited to selecting one option for the prompt
	     * @type {boolean}
	     */
	    this.singleSelect = data.single_select;

	    /**
	     * Whether the prompt is required before a user completes the onboarding flow
	     * @type {boolean}
	     */
	    this.required = data.required;

	    /**
	     * Whether the prompt is present in the onboarding flow.
	     * If `false`, the prompt will only appear in the Channels & Roles tab
	     * @type {boolean}
	     */
	    this.inOnboarding = data.in_onboarding;

	    /**
	     * The type of the prompt
	     * @type {GuildOnboardingPromptType}
	     */
	    this.type = data.type;
	  }

	  /**
	   * The guild this onboarding prompt is from
	   * @type {Guild}
	   * @readonly
	   */
	  get guild() {
	    return this.client.guilds.cache.get(this.guildId);
	  }
	};

	GuildOnboardingPrompt.GuildOnboardingPrompt = GuildOnboardingPrompt$1;
	return GuildOnboardingPrompt;
}

var Integration_1;
var hasRequiredIntegration;

function requireIntegration () {
	if (hasRequiredIntegration) return Integration_1;
	hasRequiredIntegration = 1;

	const { Routes } = requireV10$6();
	const Base = requireBase$2();
	const IntegrationApplication = requireIntegrationApplication();

	/**
	 * The information account for an integration
	 * @typedef {Object} IntegrationAccount
	 * @property {Snowflake|string} id The id of the account
	 * @property {string} name The name of the account
	 */

	/**
	 * The type of an {@link Integration}. This can be:
	 * * `twitch`
	 * * `youtube`
	 * * `discord`
	 * * `guild_subscription`
	 * @typedef {string} IntegrationType
	 */

	/**
	 * Represents a guild integration.
	 * @extends {Base}
	 */
	class Integration extends Base {
	  constructor(client, data, guild) {
	    super(client);

	    /**
	     * The guild this integration belongs to
	     * @type {Guild}
	     */
	    this.guild = guild;

	    /**
	     * The integration id
	     * @type {Snowflake|string}
	     */
	    this.id = data.id;

	    /**
	     * The integration name
	     * @type {string}
	     */
	    this.name = data.name;

	    /**
	     * The integration type
	     * @type {IntegrationType}
	     */
	    this.type = data.type;

	    /**
	     * Whether this integration is enabled
	     * @type {?boolean}
	     */
	    this.enabled = data.enabled ?? null;

	    if ('syncing' in data) {
	      /**
	       * Whether this integration is syncing
	       * @type {?boolean}
	       */
	      this.syncing = data.syncing;
	    } else {
	      this.syncing ??= null;
	    }

	    /**
	     * The role that this integration uses for subscribers
	     * @type {?Role}
	     */
	    this.role = this.guild.roles.resolve(data.role_id);

	    if ('enable_emoticons' in data) {
	      /**
	       * Whether emoticons should be synced for this integration (twitch only currently)
	       * @type {?boolean}
	       */
	      this.enableEmoticons = data.enable_emoticons;
	    } else {
	      this.enableEmoticons ??= null;
	    }

	    if (data.user) {
	      /**
	       * The user for this integration
	       * @type {?User}
	       */
	      this.user = this.client.users._add(data.user);
	    } else {
	      this.user ??= null;
	    }

	    /**
	     * The account integration information
	     * @type {IntegrationAccount}
	     */
	    this.account = data.account;

	    if ('synced_at' in data) {
	      /**
	       * The timestamp at which this integration was last synced at
	       * @type {?number}
	       */
	      this.syncedTimestamp = Date.parse(data.synced_at);
	    } else {
	      this.syncedTimestamp ??= null;
	    }

	    if ('subscriber_count' in data) {
	      /**
	       * How many subscribers this integration has
	       * @type {?number}
	       */
	      this.subscriberCount = data.subscriber_count;
	    } else {
	      this.subscriberCount ??= null;
	    }

	    if ('revoked' in data) {
	      /**
	       * Whether this integration has been revoked
	       * @type {?boolean}
	       */
	      this.revoked = data.revoked;
	    } else {
	      this.revoked ??= null;
	    }

	    this._patch(data);
	  }

	  /**
	   * The date at which this integration was last synced at
	   * @type {?Date}
	   * @readonly
	   */
	  get syncedAt() {
	    return this.syncedTimestamp && new Date(this.syncedTimestamp);
	  }

	  /**
	   * All roles that are managed by this integration
	   * @type {Collection<Snowflake, Role>}
	   * @readonly
	   */
	  get roles() {
	    const roles = this.guild.roles.cache;
	    return roles.filter(role => role.tags?.integrationId === this.id);
	  }

	  _patch(data) {
	    if ('expire_behavior' in data) {
	      /**
	       * The behavior of expiring subscribers
	       * @type {?IntegrationExpireBehavior}
	       */
	      this.expireBehavior = data.expire_behavior;
	    } else {
	      this.expireBehavior ??= null;
	    }

	    if ('expire_grace_period' in data) {
	      /**
	       * The grace period (in days) before expiring subscribers
	       * @type {?number}
	       */
	      this.expireGracePeriod = data.expire_grace_period;
	    } else {
	      this.expireGracePeriod ??= null;
	    }

	    if ('application' in data) {
	      if (this.application) {
	        this.application._patch(data.application);
	      } else {
	        /**
	         * The application for this integration
	         * @type {?IntegrationApplication}
	         */
	        this.application = new IntegrationApplication(this.client, data.application);
	      }
	    } else {
	      this.application ??= null;
	    }

	    if ('scopes' in data) {
	      /**
	       * The scopes this application has been authorized for
	       * @type {OAuth2Scopes[]}
	       */
	      this.scopes = data.scopes;
	    } else {
	      this.scopes ??= [];
	    }
	  }

	  /**
	   * Deletes this integration.
	   * @returns {Promise<Integration>}
	   * @param {string} [reason] Reason for deleting this integration
	   */
	  async delete(reason) {
	    await this.client.rest.delete(Routes.guildIntegration(this.guild.id, this.id), { reason });
	    return this;
	  }

	  toJSON() {
	    return super.toJSON({
	      role: 'roleId',
	      guild: 'guildId',
	      user: 'userId',
	    });
	  }
	}

	Integration_1 = Integration;
	return Integration_1;
}

var StageInstance = {};

var hasRequiredStageInstance$2;

function requireStageInstance$2 () {
	if (hasRequiredStageInstance$2) return StageInstance;
	hasRequiredStageInstance$2 = 1;

	const { DiscordSnowflake } = /*@__PURE__*/ requireCjs$2();
	const Base = requireBase$2();

	/**
	 * Represents a stage instance.
	 * @extends {Base}
	 */
	let StageInstance$1 = class StageInstance extends Base {
	  constructor(client, data) {
	    super(client);

	    /**
	     * The stage instance's id
	     * @type {Snowflake}
	     */
	    this.id = data.id;

	    this._patch(data);
	  }

	  _patch(data) {
	    if ('guild_id' in data) {
	      /**
	       * The id of the guild associated with the stage channel
	       * @type {Snowflake}
	       */
	      this.guildId = data.guild_id;
	    }

	    if ('channel_id' in data) {
	      /**
	       * The id of the channel associated with the stage channel
	       * @type {Snowflake}
	       */
	      this.channelId = data.channel_id;
	    }

	    if ('topic' in data) {
	      /**
	       * The topic of the stage instance
	       * @type {string}
	       */
	      this.topic = data.topic;
	    }

	    if ('privacy_level' in data) {
	      /**
	       * The privacy level of the stage instance
	       * @type {StageInstancePrivacyLevel}
	       */
	      this.privacyLevel = data.privacy_level;
	    }

	    if ('discoverable_disabled' in data) {
	      /**
	       * Whether or not stage discovery is disabled
	       * @type {?boolean}
	       * @deprecated See https://github.com/discord/discord-api-docs/pull/4296 for more information
	       */
	      this.discoverableDisabled = data.discoverable_disabled;
	    } else {
	      this.discoverableDisabled ??= null;
	    }

	    if ('guild_scheduled_event_id' in data) {
	      /**
	       * The associated guild scheduled event id of this stage instance
	       * @type {?Snowflake}
	       */
	      this.guildScheduledEventId = data.guild_scheduled_event_id;
	    } else {
	      this.guildScheduledEventId ??= null;
	    }
	  }

	  /**
	   * The stage channel associated with this stage instance
	   * @type {?StageChannel}
	   * @readonly
	   */
	  get channel() {
	    return this.client.channels.resolve(this.channelId);
	  }

	  /**
	   * The guild this stage instance belongs to
	   * @type {?Guild}
	   * @readonly
	   */
	  get guild() {
	    return this.client.guilds.resolve(this.guildId);
	  }

	  /**
	   * The associated guild scheduled event of this stage instance
	   * @type {?GuildScheduledEvent}
	   * @readonly
	   */
	  get guildScheduledEvent() {
	    return this.guild?.scheduledEvents.resolve(this.guildScheduledEventId) ?? null;
	  }

	  /**
	   * Edits this stage instance.
	   * @param {StageInstanceEditOptions} options The options to edit the stage instance
	   * @returns {Promise<StageInstance>}
	   * @example
	   * // Edit a stage instance
	   * stageInstance.edit({ topic: 'new topic' })
	   *  .then(stageInstance => console.log(stageInstance))
	   *  .catch(console.error)
	   */
	  edit(options) {
	    return this.guild.stageInstances.edit(this.channelId, options);
	  }

	  /**
	   * Deletes this stage instance.
	   * @returns {Promise<StageInstance>}
	   * @example
	   * // Delete a stage instance
	   * stageInstance.delete()
	   *  .then(stageInstance => console.log(stageInstance))
	   *  .catch(console.error);
	   */
	  async delete() {
	    await this.guild.stageInstances.delete(this.channelId);
	    const clone = this._clone();
	    return clone;
	  }

	  /**
	   * Sets the topic of this stage instance.
	   * @param {string} topic The topic for the stage instance
	   * @returns {Promise<StageInstance>}
	   * @example
	   * // Set topic of a stage instance
	   * stageInstance.setTopic('new topic')
	   *  .then(stageInstance => console.log(`Set the topic to: ${stageInstance.topic}`))
	   *  .catch(console.error);
	   */
	  setTopic(topic) {
	    return this.guild.stageInstances.edit(this.channelId, { topic });
	  }

	  /**
	   * The timestamp this stage instances was created at
	   * @type {number}
	   * @readonly
	   */
	  get createdTimestamp() {
	    return DiscordSnowflake.timestampFrom(this.id);
	  }

	  /**
	   * The time this stage instance was created at
	   * @type {Date}
	   * @readonly
	   */
	  get createdAt() {
	    return new Date(this.createdTimestamp);
	  }
	};

	StageInstance.StageInstance = StageInstance$1;
	return StageInstance;
}

var GuildAuditLogsEntry_1;
var hasRequiredGuildAuditLogsEntry;

function requireGuildAuditLogsEntry () {
	if (hasRequiredGuildAuditLogsEntry) return GuildAuditLogsEntry_1;
	hasRequiredGuildAuditLogsEntry = 1;

	const { DiscordSnowflake } = /*@__PURE__*/ requireCjs$2();
	const { AuditLogOptionsType, AuditLogEvent } = requireV10$6();
	const AutoModerationRule = requireAutoModerationRule();
	const { GuildOnboardingPrompt } = requireGuildOnboardingPrompt();
	const { GuildScheduledEvent } = requireGuildScheduledEvent$2();
	const Integration = requireIntegration();
	const Invite = requireInvite$2();
	const { StageInstance } = requireStageInstance$2();
	const { Sticker } = requireSticker$2();
	const Webhook = requireWebhook$2();
	const Partials = requirePartials();
	const { flatten } = requireUtil();

	const Targets = {
	  All: 'All',
	  Guild: 'Guild',
	  GuildScheduledEvent: 'GuildScheduledEvent',
	  Channel: 'Channel',
	  User: 'User',
	  Role: 'Role',
	  Invite: 'Invite',
	  Webhook: 'Webhook',
	  Emoji: 'Emoji',
	  Message: 'Message',
	  Integration: 'Integration',
	  StageInstance: 'StageInstance',
	  Sticker: 'Sticker',
	  Thread: 'Thread',
	  ApplicationCommand: 'ApplicationCommand',
	  AutoModeration: 'AutoModeration',
	  GuildOnboarding: 'GuildOnboarding',
	  GuildOnboardingPrompt: 'GuildOnboardingPrompt',
	  Unknown: 'Unknown',
	};

	/**
	 * The target of a guild audit log entry. It can be one of:
	 * * A guild
	 * * A channel
	 * * A user
	 * * A role
	 * * An invite
	 * * A webhook
	 * * An emoji
	 * * A message
	 * * An integration
	 * * A stage instance
	 * * A sticker
	 * * A guild scheduled event
	 * * A thread
	 * * An application command
	 * * An auto moderation rule
	 * * A guild onboarding prompt
	 * * An object with an id key if target was deleted or fake entity
	 * * An object where the keys represent either the new value or the old value
	 * @typedef {?(Object|Guild|BaseChannel|User|Role|Invite|Webhook|GuildEmoji|Message|Integration|StageInstance|Sticker|
	 * GuildScheduledEvent|ApplicationCommand|AutoModerationRule|GuildOnboardingPrompt)} AuditLogEntryTarget
	 */

	/**
	 * The action type of an entry, e.g. `Create`. Here are the available types:
	 * * Create
	 * * Delete
	 * * Update
	 * * All
	 * @typedef {string} AuditLogActionType
	 */

	/**
	 * The target type of an entry. Here are the available types:
	 * * Guild
	 * * Channel
	 * * User
	 * * Role
	 * * Invite
	 * * Webhook
	 * * Emoji
	 * * Message
	 * * Integration
	 * * StageInstance
	 * * Sticker
	 * * Thread
	 * * GuildScheduledEvent
	 * * ApplicationCommandPermission
	 * * GuildOnboarding
	 * * GuildOnboardingPrompt
	 * * Unknown
	 * @typedef {string} AuditLogTargetType
	 */

	/**
	 * Constructs an object of known properties for a structure from an array of changes.
	 * @param {AuditLogChange[]} changes The array of changes
	 * @param {Object} [initialData={}] The initial data passed to the function
	 * @returns {Object}
	 * @ignore
	 */
	function changesReduce(changes, initialData = {}) {
	  return changes.reduce((accumulator, change) => {
	    accumulator[change.key] = change.new ?? change.old;
	    return accumulator;
	  }, initialData);
	}

	/**
	 * Audit logs entry.
	 */
	class GuildAuditLogsEntry {
	  /**
	   * Key mirror of all available audit log targets.
	   * @type {Object<string, string>}
	   * @memberof GuildAuditLogsEntry
	   */
	  static Targets = Targets;

	  constructor(guild, data, logs) {
	    /**
	     * The target type of this entry
	     * @type {AuditLogTargetType}
	     */
	    this.targetType = GuildAuditLogsEntry.targetType(data.action_type);
	    const targetType = this.targetType;

	    /**
	     * The action type of this entry
	     * @type {AuditLogActionType}
	     */
	    this.actionType = GuildAuditLogsEntry.actionType(data.action_type);

	    /**
	     * The type of action that occurred.
	     * @type {AuditLogEvent}
	     */
	    this.action = data.action_type;

	    /**
	     * The reason of this entry
	     * @type {?string}
	     */
	    this.reason = data.reason ?? null;

	    /**
	     * The id of the user that executed this entry
	     * @type {?Snowflake}
	     */
	    this.executorId = data.user_id;

	    /**
	     * The user that executed this entry
	     * @type {?User}
	     */
	    this.executor = data.user_id
	      ? guild.client.options.partials.includes(Partials.User)
	        ? guild.client.users._add({ id: data.user_id })
	        : (guild.client.users.cache.get(data.user_id) ?? null)
	      : null;

	    /**
	     * An entry in the audit log representing a specific change.
	     * @typedef {Object} AuditLogChange
	     * @property {string} key The property that was changed, e.g. `nick` for nickname changes
	     * <warn>For application command permissions updates the key is the id of the user, channel,
	     * role, or a permission constant that was updated instead of an actual property name</warn>
	     * @property {*} [old] The old value of the change, e.g. for nicknames, the old nickname
	     * @property {*} [new] The new value of the change, e.g. for nicknames, the new nickname
	     */

	    /**
	     * Specific property changes
	     * @type {AuditLogChange[]}
	     */
	    this.changes =
	      data.changes?.map(change => ({
	        key: change.key,
	        ...('old_value' in change ? { old: change.old_value } : {}),
	        ...('new_value' in change ? { new: change.new_value } : {}),
	      })) ?? [];

	    /**
	     * The entry's id
	     * @type {Snowflake}
	     */
	    this.id = data.id;

	    /**
	     * Any extra data from the entry
	     * @type {?(Object|Role|GuildMember)}
	     */
	    this.extra = null;
	    switch (data.action_type) {
	      case AuditLogEvent.MemberPrune:
	        this.extra = {
	          removed: Number(data.options.members_removed),
	          days: Number(data.options.delete_member_days),
	        };
	        break;

	      case AuditLogEvent.MemberMove:
	      case AuditLogEvent.MessageDelete:
	      case AuditLogEvent.MessageBulkDelete:
	        this.extra = {
	          channel: guild.channels.cache.get(data.options.channel_id) ?? { id: data.options.channel_id },
	          count: Number(data.options.count),
	        };
	        break;

	      case AuditLogEvent.MessagePin:
	      case AuditLogEvent.MessageUnpin:
	        this.extra = {
	          channel: guild.client.channels.cache.get(data.options.channel_id) ?? { id: data.options.channel_id },
	          messageId: data.options.message_id,
	        };
	        break;

	      case AuditLogEvent.MemberDisconnect:
	        this.extra = {
	          count: Number(data.options.count),
	        };
	        break;

	      case AuditLogEvent.ChannelOverwriteCreate:
	      case AuditLogEvent.ChannelOverwriteUpdate:
	      case AuditLogEvent.ChannelOverwriteDelete:
	        switch (data.options.type) {
	          case AuditLogOptionsType.Role:
	            this.extra = guild.roles.cache.get(data.options.id) ?? {
	              id: data.options.id,
	              name: data.options.role_name,
	              type: AuditLogOptionsType.Role,
	            };
	            break;

	          case AuditLogOptionsType.Member:
	            this.extra = guild.members.cache.get(data.options.id) ?? {
	              id: data.options.id,
	              type: AuditLogOptionsType.Member,
	            };
	            break;
	        }
	        break;

	      case AuditLogEvent.StageInstanceCreate:
	      case AuditLogEvent.StageInstanceDelete:
	      case AuditLogEvent.StageInstanceUpdate:
	        this.extra = {
	          channel: guild.client.channels.cache.get(data.options?.channel_id) ?? { id: data.options?.channel_id },
	        };
	        break;

	      case AuditLogEvent.ApplicationCommandPermissionUpdate:
	        this.extra = {
	          applicationId: data.options.application_id,
	        };
	        break;

	      case AuditLogEvent.AutoModerationBlockMessage:
	      case AuditLogEvent.AutoModerationFlagToChannel:
	      case AuditLogEvent.AutoModerationUserCommunicationDisabled:
	        this.extra = {
	          autoModerationRuleName: data.options.auto_moderation_rule_name,
	          autoModerationRuleTriggerType: data.options.auto_moderation_rule_trigger_type,
	          channel: guild.client.channels.cache.get(data.options?.channel_id) ?? { id: data.options?.channel_id },
	        };
	        break;

	      case AuditLogEvent.MemberKick:
	      case AuditLogEvent.MemberRoleUpdate: {
	        if (data.integration_type) {
	          this.extra = {
	            integrationType: data.integration_type,
	          };
	        }
	        break;
	      }
	    }

	    /**
	     * The id of the target of this entry
	     * @type {?Snowflake}
	     */
	    this.targetId = data.target_id;

	    /**
	     * The target of this entry
	     * @type {?AuditLogEntryTarget}
	     */
	    this.target = null;
	    if (targetType === Targets.Unknown) {
	      this.target = changesReduce(this.changes);
	      this.target.id = data.target_id;
	      // MemberDisconnect and similar types do not provide a target_id.
	    } else if (targetType === Targets.User && data.target_id) {
	      this.target = guild.client.options.partials.includes(Partials.User)
	        ? guild.client.users._add({ id: data.target_id })
	        : (guild.client.users.cache.get(data.target_id) ?? null);
	    } else if (targetType === Targets.Guild) {
	      this.target = guild.client.guilds.cache.get(data.target_id);
	    } else if (targetType === Targets.Webhook) {
	      this.target =
	        logs?.webhooks.get(data.target_id) ??
	        new Webhook(
	          guild.client,
	          changesReduce(this.changes, {
	            id: data.target_id,
	            guild_id: guild.id,
	          }),
	        );
	    } else if (targetType === Targets.Invite) {
	      const inviteChange = this.changes.find(({ key }) => key === 'code');

	      this.target =
	        guild.invites.cache.get(inviteChange.new ?? inviteChange.old) ??
	        new Invite(guild.client, changesReduce(this.changes, { guild }));
	    } else if (targetType === Targets.Message) {
	      // Discord sends a channel id for the MessageBulkDelete action type.
	      this.target =
	        data.action_type === AuditLogEvent.MessageBulkDelete
	          ? (guild.channels.cache.get(data.target_id) ?? { id: data.target_id })
	          : (guild.client.users.cache.get(data.target_id) ?? null);
	    } else if (targetType === Targets.Integration) {
	      this.target =
	        logs?.integrations.get(data.target_id) ??
	        new Integration(guild.client, changesReduce(this.changes, { id: data.target_id }), guild);
	    } else if (targetType === Targets.Channel || targetType === Targets.Thread) {
	      this.target = guild.channels.cache.get(data.target_id) ?? changesReduce(this.changes, { id: data.target_id });
	    } else if (targetType === Targets.StageInstance) {
	      this.target =
	        guild.stageInstances.cache.get(data.target_id) ??
	        new StageInstance(
	          guild.client,
	          changesReduce(this.changes, {
	            id: data.target_id,
	            channel_id: data.options?.channel_id,
	            guild_id: guild.id,
	          }),
	        );
	    } else if (targetType === Targets.Sticker) {
	      this.target =
	        guild.stickers.cache.get(data.target_id) ??
	        new Sticker(guild.client, changesReduce(this.changes, { id: data.target_id }));
	    } else if (targetType === Targets.GuildScheduledEvent) {
	      this.target =
	        guild.scheduledEvents.cache.get(data.target_id) ??
	        new GuildScheduledEvent(guild.client, changesReduce(this.changes, { id: data.target_id, guild_id: guild.id }));
	    } else if (targetType === Targets.ApplicationCommand) {
	      this.target = logs?.applicationCommands.get(data.target_id) ?? { id: data.target_id };
	    } else if (targetType === Targets.AutoModeration) {
	      this.target =
	        guild.autoModerationRules.cache.get(data.target_id) ??
	        new AutoModerationRule(
	          guild.client,
	          changesReduce(this.changes, { id: data.target_id, guild_id: guild.id }),
	          guild,
	        );
	    } else if (targetType === Targets.GuildOnboardingPrompt) {
	      this.target =
	        data.action_type === AuditLogEvent.OnboardingPromptCreate
	          ? new GuildOnboardingPrompt(guild.client, changesReduce(this.changes, { id: data.target_id }), guild.id)
	          : changesReduce(this.changes, { id: data.target_id });
	    } else if (targetType === Targets.GuildOnboarding) {
	      this.target = changesReduce(this.changes, { id: data.target_id });
	    } else if (data.target_id) {
	      this.target = guild[`${targetType.toLowerCase()}s`]?.cache.get(data.target_id) ?? { id: data.target_id };
	    }
	  }

	  /**
	   * Finds the target type of a guild audit log entry.
	   * @param {AuditLogEvent} target The action target
	   * @returns {AuditLogTargetType}
	   */
	  static targetType(target) {
	    if (target < 10) return Targets.Guild;
	    if (target < 20) return Targets.Channel;
	    if (target < 30) return Targets.User;
	    if (target < 40) return Targets.Role;
	    if (target < 50) return Targets.Invite;
	    if (target < 60) return Targets.Webhook;
	    if (target < 70) return Targets.Emoji;
	    if (target < 80) return Targets.Message;
	    if (target < 83) return Targets.Integration;
	    if (target < 86) return Targets.StageInstance;
	    if (target < 100) return Targets.Sticker;
	    if (target < 110) return Targets.GuildScheduledEvent;
	    if (target < 120) return Targets.Thread;
	    if (target < 130) return Targets.ApplicationCommand;
	    if (target >= 140 && target < 150) return Targets.AutoModeration;
	    if (target >= 163 && target <= 165) return Targets.GuildOnboardingPrompt;
	    if (target >= 160 && target < 170) return Targets.GuildOnboarding;
	    return Targets.Unknown;
	  }

	  /**
	   * Finds the action type from the guild audit log entry action.
	   * @param {AuditLogEvent} action The action target
	   * @returns {AuditLogActionType}
	   */
	  static actionType(action) {
	    if (
	      [
	        AuditLogEvent.ChannelCreate,
	        AuditLogEvent.ChannelOverwriteCreate,
	        AuditLogEvent.MemberBanRemove,
	        AuditLogEvent.BotAdd,
	        AuditLogEvent.RoleCreate,
	        AuditLogEvent.InviteCreate,
	        AuditLogEvent.WebhookCreate,
	        AuditLogEvent.EmojiCreate,
	        AuditLogEvent.MessagePin,
	        AuditLogEvent.IntegrationCreate,
	        AuditLogEvent.StageInstanceCreate,
	        AuditLogEvent.StickerCreate,
	        AuditLogEvent.GuildScheduledEventCreate,
	        AuditLogEvent.ThreadCreate,
	        AuditLogEvent.AutoModerationRuleCreate,
	        AuditLogEvent.AutoModerationBlockMessage,
	        AuditLogEvent.OnboardingPromptCreate,
	        AuditLogEvent.OnboardingCreate,
	      ].includes(action)
	    ) {
	      return 'Create';
	    }

	    if (
	      [
	        AuditLogEvent.ChannelDelete,
	        AuditLogEvent.ChannelOverwriteDelete,
	        AuditLogEvent.MemberKick,
	        AuditLogEvent.MemberPrune,
	        AuditLogEvent.MemberBanAdd,
	        AuditLogEvent.MemberDisconnect,
	        AuditLogEvent.RoleDelete,
	        AuditLogEvent.InviteDelete,
	        AuditLogEvent.WebhookDelete,
	        AuditLogEvent.EmojiDelete,
	        AuditLogEvent.MessageDelete,
	        AuditLogEvent.MessageBulkDelete,
	        AuditLogEvent.MessageUnpin,
	        AuditLogEvent.IntegrationDelete,
	        AuditLogEvent.StageInstanceDelete,
	        AuditLogEvent.StickerDelete,
	        AuditLogEvent.GuildScheduledEventDelete,
	        AuditLogEvent.ThreadDelete,
	        AuditLogEvent.AutoModerationRuleDelete,
	        AuditLogEvent.OnboardingPromptDelete,
	      ].includes(action)
	    ) {
	      return 'Delete';
	    }

	    if (
	      [
	        AuditLogEvent.GuildUpdate,
	        AuditLogEvent.ChannelUpdate,
	        AuditLogEvent.ChannelOverwriteUpdate,
	        AuditLogEvent.MemberUpdate,
	        AuditLogEvent.MemberRoleUpdate,
	        AuditLogEvent.MemberMove,
	        AuditLogEvent.RoleUpdate,
	        AuditLogEvent.InviteUpdate,
	        AuditLogEvent.WebhookUpdate,
	        AuditLogEvent.EmojiUpdate,
	        AuditLogEvent.IntegrationUpdate,
	        AuditLogEvent.StageInstanceUpdate,
	        AuditLogEvent.StickerUpdate,
	        AuditLogEvent.GuildScheduledEventUpdate,
	        AuditLogEvent.ThreadUpdate,
	        AuditLogEvent.ApplicationCommandPermissionUpdate,
	        AuditLogEvent.AutoModerationRuleUpdate,
	        AuditLogEvent.OnboardingPromptUpdate,
	        AuditLogEvent.OnboardingUpdate,
	      ].includes(action)
	    ) {
	      return 'Update';
	    }

	    return 'All';
	  }

	  /**
	   * The timestamp this entry was created at
	   * @type {number}
	   * @readonly
	   */
	  get createdTimestamp() {
	    return DiscordSnowflake.timestampFrom(this.id);
	  }

	  /**
	   * The time this entry was created at
	   * @type {Date}
	   * @readonly
	   */
	  get createdAt() {
	    return new Date(this.createdTimestamp);
	  }

	  toJSON() {
	    return flatten(this, { createdTimestamp: true });
	  }
	}

	GuildAuditLogsEntry_1 = GuildAuditLogsEntry;
	return GuildAuditLogsEntry_1;
}

var GuildAuditLogEntryCreate;
var hasRequiredGuildAuditLogEntryCreate;

function requireGuildAuditLogEntryCreate () {
	if (hasRequiredGuildAuditLogEntryCreate) return GuildAuditLogEntryCreate;
	hasRequiredGuildAuditLogEntryCreate = 1;

	const Action = requireAction();
	const GuildAuditLogsEntry = requireGuildAuditLogsEntry();
	const Events = requireEvents();

	class GuildAuditLogEntryCreateAction extends Action {
	  handle(data) {
	    const client = this.client;
	    const guild = client.guilds.cache.get(data.guild_id);
	    let auditLogEntry;

	    if (guild) {
	      auditLogEntry = new GuildAuditLogsEntry(guild, data);

	      /**
	       * Emitted whenever a guild audit log entry is created.
	       * @event Client#guildAuditLogEntryCreate
	       * @param {GuildAuditLogsEntry} auditLogEntry The entry that was created
	       * @param {Guild} guild The guild where the entry was created
	       */
	      client.emit(Events.GuildAuditLogEntryCreate, auditLogEntry, guild);
	    }

	    return { auditLogEntry };
	  }
	}

	GuildAuditLogEntryCreate = GuildAuditLogEntryCreateAction;
	return GuildAuditLogEntryCreate;
}

var GuildBanAdd_1;
var hasRequiredGuildBanAdd;

function requireGuildBanAdd () {
	if (hasRequiredGuildBanAdd) return GuildBanAdd_1;
	hasRequiredGuildBanAdd = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class GuildBanAdd extends Action {
	  handle(data) {
	    const client = this.client;
	    const guild = client.guilds.cache.get(data.guild_id);

	    /**
	     * Emitted whenever a member is banned from a guild.
	     * @event Client#guildBanAdd
	     * @param {GuildBan} ban The ban that occurred
	     */
	    if (guild) client.emit(Events.GuildBanAdd, guild.bans._add(data));
	  }
	}

	GuildBanAdd_1 = GuildBanAdd;
	return GuildBanAdd_1;
}

var GuildBan_1;
var hasRequiredGuildBan;

function requireGuildBan () {
	if (hasRequiredGuildBan) return GuildBan_1;
	hasRequiredGuildBan = 1;

	const Base = requireBase$2();

	/**
	 * Represents a ban in a guild on Discord.
	 * @extends {Base}
	 */
	class GuildBan extends Base {
	  constructor(client, data, guild) {
	    super(client);

	    /**
	     * The guild in which the ban is
	     * @type {Guild}
	     */
	    this.guild = guild;

	    this._patch(data);
	  }

	  _patch(data) {
	    if ('user' in data) {
	      /**
	       * The user this ban applies to
	       * @type {User}
	       */
	      this.user = this.client.users._add(data.user, true);
	    }

	    if ('reason' in data) {
	      /**
	       * The reason for the ban
	       * @type {?string}
	       */
	      this.reason = data.reason;
	    }
	  }

	  /**
	   * Whether this GuildBan is partial. If the reason is not provided the value is null
	   * @type {boolean}
	   * @readonly
	   */
	  get partial() {
	    return !('reason' in this);
	  }

	  /**
	   * Fetches this GuildBan.
	   * @param {boolean} [force=true] Whether to skip the cache check and request the API
	   * @returns {Promise<GuildBan>}
	   */
	  fetch(force = true) {
	    return this.guild.bans.fetch({ user: this.user, cache: true, force });
	  }
	}

	GuildBan_1 = GuildBan;
	return GuildBan_1;
}

var GuildBanRemove_1;
var hasRequiredGuildBanRemove;

function requireGuildBanRemove () {
	if (hasRequiredGuildBanRemove) return GuildBanRemove_1;
	hasRequiredGuildBanRemove = 1;

	const Action = requireAction();
	const GuildBan = requireGuildBan();
	const Events = requireEvents();

	class GuildBanRemove extends Action {
	  handle(data) {
	    const client = this.client;
	    const guild = client.guilds.cache.get(data.guild_id);

	    /**
	     * Emitted whenever a member is unbanned from a guild.
	     * @event Client#guildBanRemove
	     * @param {GuildBan} ban The ban that was removed
	     */
	    if (guild) {
	      const ban = guild.bans.cache.get(data.user.id) ?? new GuildBan(client, data, guild);
	      guild.bans.cache.delete(ban.user.id);
	      client.emit(Events.GuildBanRemove, ban);
	    }
	  }
	}

	GuildBanRemove_1 = GuildBanRemove;
	return GuildBanRemove_1;
}

var GuildChannelsPositionUpdate_1;
var hasRequiredGuildChannelsPositionUpdate;

function requireGuildChannelsPositionUpdate () {
	if (hasRequiredGuildChannelsPositionUpdate) return GuildChannelsPositionUpdate_1;
	hasRequiredGuildChannelsPositionUpdate = 1;

	const Action = requireAction();

	class GuildChannelsPositionUpdate extends Action {
	  handle(data) {
	    const client = this.client;

	    const guild = client.guilds.cache.get(data.guild_id);
	    if (guild) {
	      for (const partialChannel of data.channels) {
	        const channel = guild.channels.cache.get(partialChannel.id);
	        if (channel) channel.rawPosition = partialChannel.position;
	      }
	    }

	    return { guild };
	  }
	}

	GuildChannelsPositionUpdate_1 = GuildChannelsPositionUpdate;
	return GuildChannelsPositionUpdate_1;
}

var GuildDelete;
var hasRequiredGuildDelete;

function requireGuildDelete () {
	if (hasRequiredGuildDelete) return GuildDelete;
	hasRequiredGuildDelete = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class GuildDeleteAction extends Action {
	  handle(data) {
	    const client = this.client;

	    let guild = client.guilds.cache.get(data.id);
	    if (guild) {
	      if (data.unavailable) {
	        // Guild is unavailable
	        guild.available = false;

	        /**
	         * Emitted whenever a guild becomes unavailable, likely due to a server outage.
	         * @event Client#guildUnavailable
	         * @param {Guild} guild The guild that has become unavailable
	         */
	        client.emit(Events.GuildUnavailable, guild);

	        // Stops the GuildDelete packet thinking a guild was actually deleted,
	        // handles emitting of event itself
	        return;
	      }

	      for (const channel of guild.channels.cache.values()) this.client.channels._remove(channel.id);
	      client.voice.adapters.get(data.id)?.destroy();

	      // Delete guild
	      client.guilds.cache.delete(guild.id);

	      /**
	       * Emitted whenever a guild kicks the client or the guild is deleted/left.
	       * @event Client#guildDelete
	       * @param {Guild} guild The guild that was deleted
	       */
	      client.emit(Events.GuildDelete, guild);
	    }
	  }
	}

	GuildDelete = GuildDeleteAction;
	return GuildDelete;
}

var GuildEmojiCreate;
var hasRequiredGuildEmojiCreate;

function requireGuildEmojiCreate () {
	if (hasRequiredGuildEmojiCreate) return GuildEmojiCreate;
	hasRequiredGuildEmojiCreate = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class GuildEmojiCreateAction extends Action {
	  handle(guild, createdEmoji) {
	    const already = guild.emojis.cache.has(createdEmoji.id);
	    const emoji = guild.emojis._add(createdEmoji);
	    /**
	     * Emitted whenever a custom emoji is created in a guild.
	     * @event Client#emojiCreate
	     * @param {GuildEmoji} emoji The emoji that was created
	     */
	    if (!already) this.client.emit(Events.GuildEmojiCreate, emoji);
	    return { emoji };
	  }
	}

	GuildEmojiCreate = GuildEmojiCreateAction;
	return GuildEmojiCreate;
}

var GuildEmojiDelete;
var hasRequiredGuildEmojiDelete;

function requireGuildEmojiDelete () {
	if (hasRequiredGuildEmojiDelete) return GuildEmojiDelete;
	hasRequiredGuildEmojiDelete = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class GuildEmojiDeleteAction extends Action {
	  handle(emoji) {
	    emoji.guild.emojis.cache.delete(emoji.id);
	    /**
	     * Emitted whenever a custom emoji is deleted in a guild.
	     * @event Client#emojiDelete
	     * @param {GuildEmoji} emoji The emoji that was deleted
	     */
	    this.client.emit(Events.GuildEmojiDelete, emoji);
	    return { emoji };
	  }
	}

	GuildEmojiDelete = GuildEmojiDeleteAction;
	return GuildEmojiDelete;
}

var GuildEmojiUpdate;
var hasRequiredGuildEmojiUpdate;

function requireGuildEmojiUpdate () {
	if (hasRequiredGuildEmojiUpdate) return GuildEmojiUpdate;
	hasRequiredGuildEmojiUpdate = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class GuildEmojiUpdateAction extends Action {
	  handle(current, data) {
	    const old = current._update(data);
	    /**
	     * Emitted whenever a custom emoji is updated in a guild.
	     * @event Client#emojiUpdate
	     * @param {GuildEmoji} oldEmoji The old emoji
	     * @param {GuildEmoji} newEmoji The new emoji
	     */
	    this.client.emit(Events.GuildEmojiUpdate, old, current);
	    return { emoji: current };
	  }
	}

	GuildEmojiUpdate = GuildEmojiUpdateAction;
	return GuildEmojiUpdate;
}

var GuildEmojisUpdate;
var hasRequiredGuildEmojisUpdate;

function requireGuildEmojisUpdate () {
	if (hasRequiredGuildEmojisUpdate) return GuildEmojisUpdate;
	hasRequiredGuildEmojisUpdate = 1;

	const Action = requireAction();

	class GuildEmojisUpdateAction extends Action {
	  handle(data) {
	    const guild = this.client.guilds.cache.get(data.guild_id);
	    if (!guild?.emojis) return;

	    const deletions = new Map(guild.emojis.cache);

	    for (const emoji of data.emojis) {
	      // Determine type of emoji event
	      const cachedEmoji = guild.emojis.cache.get(emoji.id);
	      if (cachedEmoji) {
	        deletions.delete(emoji.id);
	        if (!cachedEmoji.equals(emoji)) {
	          // Emoji updated
	          this.client.actions.GuildEmojiUpdate.handle(cachedEmoji, emoji);
	        }
	      } else {
	        // Emoji added
	        this.client.actions.GuildEmojiCreate.handle(guild, emoji);
	      }
	    }

	    for (const emoji of deletions.values()) {
	      // Emoji deleted
	      this.client.actions.GuildEmojiDelete.handle(emoji);
	    }
	  }
	}

	GuildEmojisUpdate = GuildEmojisUpdateAction;
	return GuildEmojisUpdate;
}

var GuildIntegrationsUpdate_1;
var hasRequiredGuildIntegrationsUpdate;

function requireGuildIntegrationsUpdate () {
	if (hasRequiredGuildIntegrationsUpdate) return GuildIntegrationsUpdate_1;
	hasRequiredGuildIntegrationsUpdate = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class GuildIntegrationsUpdate extends Action {
	  handle(data) {
	    const client = this.client;
	    const guild = client.guilds.cache.get(data.guild_id);
	    /**
	     * Emitted whenever a guild integration is updated
	     * @event Client#guildIntegrationsUpdate
	     * @param {Guild} guild The guild whose integrations were updated
	     */
	    if (guild) client.emit(Events.GuildIntegrationsUpdate, guild);
	  }
	}

	GuildIntegrationsUpdate_1 = GuildIntegrationsUpdate;
	return GuildIntegrationsUpdate_1;
}

var Status;
var hasRequiredStatus;

function requireStatus () {
	if (hasRequiredStatus) return Status;
	hasRequiredStatus = 1;

	const { createEnum } = requireEnums();

	/**
	 * @typedef {Object} Status
	 * @property {number} Ready
	 * @property {number} Connecting
	 * @property {number} Reconnecting
	 * @property {number} Idle
	 * @property {number} Nearly
	 * @property {number} Disconnected
	 * @property {number} WaitingForGuilds
	 * @property {number} Identifying
	 * @property {number} Resuming
	 */

	// JSDoc for IntelliSense purposes
	/**
	 * @type {Status}
	 * @ignore
	 */
	Status = createEnum([
	  'Ready',
	  'Connecting',
	  'Reconnecting',
	  'Idle',
	  'Nearly',
	  'Disconnected',
	  'WaitingForGuilds',
	  'Identifying',
	  'Resuming',
	]);
	return Status;
}

var GuildMemberRemove;
var hasRequiredGuildMemberRemove;

function requireGuildMemberRemove () {
	if (hasRequiredGuildMemberRemove) return GuildMemberRemove;
	hasRequiredGuildMemberRemove = 1;

	const Action = requireAction();
	const Events = requireEvents();
	const Status = requireStatus();

	class GuildMemberRemoveAction extends Action {
	  handle(data, shard) {
	    const client = this.client;
	    const guild = client.guilds.cache.get(data.guild_id);
	    let member = null;
	    if (guild) {
	      member = this.getMember({ user: data.user }, guild);
	      guild.memberCount--;
	      if (member) {
	        guild.members.cache.delete(member.id);
	        /**
	         * Emitted whenever a member leaves a guild, or is kicked.
	         * @event Client#guildMemberRemove
	         * @param {GuildMember} member The member that has left/been kicked from the guild
	         */
	        if (shard.status === Status.Ready) client.emit(Events.GuildMemberRemove, member);
	      }
	      guild.presences.cache.delete(data.user.id);
	      guild.voiceStates.cache.delete(data.user.id);
	    }
	    return { guild, member };
	  }
	}

	GuildMemberRemove = GuildMemberRemoveAction;
	return GuildMemberRemove;
}

var GuildMemberUpdate;
var hasRequiredGuildMemberUpdate;

function requireGuildMemberUpdate () {
	if (hasRequiredGuildMemberUpdate) return GuildMemberUpdate;
	hasRequiredGuildMemberUpdate = 1;

	const Action = requireAction();
	const Events = requireEvents();
	const Status = requireStatus();

	class GuildMemberUpdateAction extends Action {
	  handle(data, shard) {
	    const { client } = this;
	    if (data.user.username) {
	      const user = client.users.cache.get(data.user.id);
	      if (!user) {
	        client.users._add(data.user);
	      } else if (!user._equals(data.user)) {
	        client.actions.UserUpdate.handle(data.user);
	      }
	    }

	    const guild = client.guilds.cache.get(data.guild_id);
	    if (guild) {
	      const member = this.getMember({ user: data.user }, guild);
	      if (member) {
	        const old = member._update(data);
	        /**
	         * Emitted whenever a guild member changes - i.e. new role, removed role, nickname.
	         * @event Client#guildMemberUpdate
	         * @param {GuildMember} oldMember The member before the update
	         * @param {GuildMember} newMember The member after the update
	         */
	        if (shard.status === Status.Ready && !member.equals(old)) client.emit(Events.GuildMemberUpdate, old, member);
	      } else {
	        const newMember = guild.members._add(data);
	        /**
	         * Emitted whenever a member becomes available.
	         * @event Client#guildMemberAvailable
	         * @param {GuildMember} member The member that became available
	         */
	        this.client.emit(Events.GuildMemberAvailable, newMember);
	      }
	    }
	  }
	}

	GuildMemberUpdate = GuildMemberUpdateAction;
	return GuildMemberUpdate;
}

var GuildRoleCreate_1;
var hasRequiredGuildRoleCreate;

function requireGuildRoleCreate () {
	if (hasRequiredGuildRoleCreate) return GuildRoleCreate_1;
	hasRequiredGuildRoleCreate = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class GuildRoleCreate extends Action {
	  handle(data) {
	    const client = this.client;
	    const guild = client.guilds.cache.get(data.guild_id);
	    let role;
	    if (guild) {
	      const already = guild.roles.cache.has(data.role.id);
	      role = guild.roles._add(data.role);
	      /**
	       * Emitted whenever a role is created.
	       * @event Client#roleCreate
	       * @param {Role} role The role that was created
	       */
	      if (!already) client.emit(Events.GuildRoleCreate, role);
	    }
	    return { role };
	  }
	}

	GuildRoleCreate_1 = GuildRoleCreate;
	return GuildRoleCreate_1;
}

var GuildRoleDelete;
var hasRequiredGuildRoleDelete;

function requireGuildRoleDelete () {
	if (hasRequiredGuildRoleDelete) return GuildRoleDelete;
	hasRequiredGuildRoleDelete = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class GuildRoleDeleteAction extends Action {
	  handle(data) {
	    const client = this.client;
	    const guild = client.guilds.cache.get(data.guild_id);
	    let role;

	    if (guild) {
	      role = guild.roles.cache.get(data.role_id);
	      if (role) {
	        guild.roles.cache.delete(data.role_id);
	        /**
	         * Emitted whenever a guild role is deleted.
	         * @event Client#roleDelete
	         * @param {Role} role The role that was deleted
	         */
	        client.emit(Events.GuildRoleDelete, role);
	      }
	    }

	    return { role };
	  }
	}

	GuildRoleDelete = GuildRoleDeleteAction;
	return GuildRoleDelete;
}

var GuildRoleUpdate;
var hasRequiredGuildRoleUpdate;

function requireGuildRoleUpdate () {
	if (hasRequiredGuildRoleUpdate) return GuildRoleUpdate;
	hasRequiredGuildRoleUpdate = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class GuildRoleUpdateAction extends Action {
	  handle(data) {
	    const client = this.client;
	    const guild = client.guilds.cache.get(data.guild_id);

	    if (guild) {
	      let old = null;

	      const role = guild.roles.cache.get(data.role.id);
	      if (role) {
	        old = role._update(data.role);
	        /**
	         * Emitted whenever a guild role is updated.
	         * @event Client#roleUpdate
	         * @param {Role} oldRole The role before the update
	         * @param {Role} newRole The role after the update
	         */
	        client.emit(Events.GuildRoleUpdate, old, role);
	      }

	      return {
	        old,
	        updated: role,
	      };
	    }

	    return {
	      old: null,
	      updated: null,
	    };
	  }
	}

	GuildRoleUpdate = GuildRoleUpdateAction;
	return GuildRoleUpdate;
}

var GuildRolesPositionUpdate_1;
var hasRequiredGuildRolesPositionUpdate;

function requireGuildRolesPositionUpdate () {
	if (hasRequiredGuildRolesPositionUpdate) return GuildRolesPositionUpdate_1;
	hasRequiredGuildRolesPositionUpdate = 1;

	const Action = requireAction();

	class GuildRolesPositionUpdate extends Action {
	  handle(data) {
	    const client = this.client;

	    const guild = client.guilds.cache.get(data.guild_id);
	    if (guild) {
	      for (const partialRole of data.roles) {
	        const role = guild.roles.cache.get(partialRole.id);
	        if (role) role.rawPosition = partialRole.position;
	      }
	    }

	    return { guild };
	  }
	}

	GuildRolesPositionUpdate_1 = GuildRolesPositionUpdate;
	return GuildRolesPositionUpdate_1;
}

var GuildScheduledEventCreate;
var hasRequiredGuildScheduledEventCreate;

function requireGuildScheduledEventCreate () {
	if (hasRequiredGuildScheduledEventCreate) return GuildScheduledEventCreate;
	hasRequiredGuildScheduledEventCreate = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class GuildScheduledEventCreateAction extends Action {
	  handle(data) {
	    const client = this.client;
	    const guild = client.guilds.cache.get(data.guild_id);
	    if (guild) {
	      const guildScheduledEvent = guild.scheduledEvents._add(data);

	      /**
	       * Emitted whenever a guild scheduled event is created.
	       * @event Client#guildScheduledEventCreate
	       * @param {GuildScheduledEvent} guildScheduledEvent The created guild scheduled event
	       */
	      client.emit(Events.GuildScheduledEventCreate, guildScheduledEvent);

	      return { guildScheduledEvent };
	    }

	    return {};
	  }
	}

	GuildScheduledEventCreate = GuildScheduledEventCreateAction;
	return GuildScheduledEventCreate;
}

var GuildScheduledEventDelete;
var hasRequiredGuildScheduledEventDelete;

function requireGuildScheduledEventDelete () {
	if (hasRequiredGuildScheduledEventDelete) return GuildScheduledEventDelete;
	hasRequiredGuildScheduledEventDelete = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class GuildScheduledEventDeleteAction extends Action {
	  handle(data) {
	    const client = this.client;
	    const guild = client.guilds.cache.get(data.guild_id);

	    if (guild) {
	      const guildScheduledEvent = this.getScheduledEvent(data, guild);
	      if (guildScheduledEvent) {
	        guild.scheduledEvents.cache.delete(guildScheduledEvent.id);

	        /**
	         * Emitted whenever a guild scheduled event is deleted.
	         * @event Client#guildScheduledEventDelete
	         * @param {GuildScheduledEvent} guildScheduledEvent The deleted guild scheduled event
	         */
	        client.emit(Events.GuildScheduledEventDelete, guildScheduledEvent);

	        return { guildScheduledEvent };
	      }
	    }

	    return {};
	  }
	}

	GuildScheduledEventDelete = GuildScheduledEventDeleteAction;
	return GuildScheduledEventDelete;
}

var GuildScheduledEventUpdate;
var hasRequiredGuildScheduledEventUpdate;

function requireGuildScheduledEventUpdate () {
	if (hasRequiredGuildScheduledEventUpdate) return GuildScheduledEventUpdate;
	hasRequiredGuildScheduledEventUpdate = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class GuildScheduledEventUpdateAction extends Action {
	  handle(data) {
	    const client = this.client;
	    const guild = client.guilds.cache.get(data.guild_id);

	    if (guild) {
	      const oldGuildScheduledEvent = guild.scheduledEvents.cache.get(data.id)?._clone() ?? null;
	      const newGuildScheduledEvent = guild.scheduledEvents._add(data);

	      /**
	       * Emitted whenever a guild scheduled event gets updated.
	       * @event Client#guildScheduledEventUpdate
	       * @param {?GuildScheduledEvent} oldGuildScheduledEvent The guild scheduled event object before the update
	       * @param {GuildScheduledEvent} newGuildScheduledEvent The guild scheduled event object after the update
	       */
	      client.emit(Events.GuildScheduledEventUpdate, oldGuildScheduledEvent, newGuildScheduledEvent);

	      return { oldGuildScheduledEvent, newGuildScheduledEvent };
	    }

	    return {};
	  }
	}

	GuildScheduledEventUpdate = GuildScheduledEventUpdateAction;
	return GuildScheduledEventUpdate;
}

var GuildScheduledEventUserAdd;
var hasRequiredGuildScheduledEventUserAdd;

function requireGuildScheduledEventUserAdd () {
	if (hasRequiredGuildScheduledEventUserAdd) return GuildScheduledEventUserAdd;
	hasRequiredGuildScheduledEventUserAdd = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class GuildScheduledEventUserAddAction extends Action {
	  handle(data) {
	    const client = this.client;
	    const guild = client.guilds.cache.get(data.guild_id);

	    if (guild) {
	      const guildScheduledEvent = this.getScheduledEvent(data, guild);
	      const user = this.getUser(data);

	      if (guildScheduledEvent && user) {
	        /**
	         * Emitted whenever a user subscribes to a guild scheduled event
	         * @event Client#guildScheduledEventUserAdd
	         * @param {GuildScheduledEvent} guildScheduledEvent The guild scheduled event
	         * @param {User} user The user who subscribed
	         */
	        client.emit(Events.GuildScheduledEventUserAdd, guildScheduledEvent, user);

	        return { guildScheduledEvent, user };
	      }
	    }

	    return {};
	  }
	}

	GuildScheduledEventUserAdd = GuildScheduledEventUserAddAction;
	return GuildScheduledEventUserAdd;
}

var GuildScheduledEventUserRemove;
var hasRequiredGuildScheduledEventUserRemove;

function requireGuildScheduledEventUserRemove () {
	if (hasRequiredGuildScheduledEventUserRemove) return GuildScheduledEventUserRemove;
	hasRequiredGuildScheduledEventUserRemove = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class GuildScheduledEventUserRemoveAction extends Action {
	  handle(data) {
	    const client = this.client;
	    const guild = client.guilds.cache.get(data.guild_id);

	    if (guild) {
	      const guildScheduledEvent = this.getScheduledEvent(data, guild);
	      const user = this.getUser(data);

	      if (guildScheduledEvent && user) {
	        /**
	         * Emitted whenever a user unsubscribes from a guild scheduled event
	         * @event Client#guildScheduledEventUserRemove
	         * @param {GuildScheduledEvent} guildScheduledEvent The guild scheduled event
	         * @param {User} user The user who unsubscribed
	         */
	        client.emit(Events.GuildScheduledEventUserRemove, guildScheduledEvent, user);

	        return { guildScheduledEvent, user };
	      }
	    }

	    return {};
	  }
	}

	GuildScheduledEventUserRemove = GuildScheduledEventUserRemoveAction;
	return GuildScheduledEventUserRemove;
}

var GuildStickerCreate;
var hasRequiredGuildStickerCreate;

function requireGuildStickerCreate () {
	if (hasRequiredGuildStickerCreate) return GuildStickerCreate;
	hasRequiredGuildStickerCreate = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class GuildStickerCreateAction extends Action {
	  handle(guild, createdSticker) {
	    const already = guild.stickers.cache.has(createdSticker.id);
	    const sticker = guild.stickers._add(createdSticker);
	    /**
	     * Emitted whenever a custom sticker is created in a guild.
	     * @event Client#stickerCreate
	     * @param {Sticker} sticker The sticker that was created
	     */
	    if (!already) this.client.emit(Events.GuildStickerCreate, sticker);
	    return { sticker };
	  }
	}

	GuildStickerCreate = GuildStickerCreateAction;
	return GuildStickerCreate;
}

var GuildStickerDelete;
var hasRequiredGuildStickerDelete;

function requireGuildStickerDelete () {
	if (hasRequiredGuildStickerDelete) return GuildStickerDelete;
	hasRequiredGuildStickerDelete = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class GuildStickerDeleteAction extends Action {
	  handle(sticker) {
	    sticker.guild.stickers.cache.delete(sticker.id);
	    /**
	     * Emitted whenever a custom sticker is deleted in a guild.
	     * @event Client#stickerDelete
	     * @param {Sticker} sticker The sticker that was deleted
	     */
	    this.client.emit(Events.GuildStickerDelete, sticker);
	    return { sticker };
	  }
	}

	GuildStickerDelete = GuildStickerDeleteAction;
	return GuildStickerDelete;
}

var GuildStickerUpdate;
var hasRequiredGuildStickerUpdate;

function requireGuildStickerUpdate () {
	if (hasRequiredGuildStickerUpdate) return GuildStickerUpdate;
	hasRequiredGuildStickerUpdate = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class GuildStickerUpdateAction extends Action {
	  handle(current, data) {
	    const old = current._update(data);
	    /**
	     * Emitted whenever a custom sticker is updated in a guild.
	     * @event Client#stickerUpdate
	     * @param {Sticker} oldSticker The old sticker
	     * @param {Sticker} newSticker The new sticker
	     */
	    this.client.emit(Events.GuildStickerUpdate, old, current);
	    return { sticker: current };
	  }
	}

	GuildStickerUpdate = GuildStickerUpdateAction;
	return GuildStickerUpdate;
}

var GuildStickersUpdate;
var hasRequiredGuildStickersUpdate;

function requireGuildStickersUpdate () {
	if (hasRequiredGuildStickersUpdate) return GuildStickersUpdate;
	hasRequiredGuildStickersUpdate = 1;

	const Action = requireAction();

	class GuildStickersUpdateAction extends Action {
	  handle(data) {
	    const guild = this.client.guilds.cache.get(data.guild_id);
	    if (!guild?.stickers) return;

	    const deletions = new Map(guild.stickers.cache);

	    for (const sticker of data.stickers) {
	      // Determine type of sticker event
	      const cachedSticker = guild.stickers.cache.get(sticker.id);
	      if (cachedSticker) {
	        deletions.delete(sticker.id);
	        if (!cachedSticker.equals(sticker)) {
	          // Sticker updated
	          this.client.actions.GuildStickerUpdate.handle(cachedSticker, sticker);
	        }
	      } else {
	        // Sticker added
	        this.client.actions.GuildStickerCreate.handle(guild, sticker);
	      }
	    }

	    for (const sticker of deletions.values()) {
	      // Sticker deleted
	      this.client.actions.GuildStickerDelete.handle(sticker);
	    }
	  }
	}

	GuildStickersUpdate = GuildStickersUpdateAction;
	return GuildStickersUpdate;
}

var GuildUpdate;
var hasRequiredGuildUpdate;

function requireGuildUpdate () {
	if (hasRequiredGuildUpdate) return GuildUpdate;
	hasRequiredGuildUpdate = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class GuildUpdateAction extends Action {
	  handle(data) {
	    const client = this.client;

	    const guild = client.guilds.cache.get(data.id);
	    if (guild) {
	      const old = guild._update(data);
	      /**
	       * Emitted whenever a guild is updated - e.g. name change.
	       * @event Client#guildUpdate
	       * @param {Guild} oldGuild The guild before the update
	       * @param {Guild} newGuild The guild after the update
	       */
	      client.emit(Events.GuildUpdate, old, guild);
	      return {
	        old,
	        updated: guild,
	      };
	    }

	    return {
	      old: null,
	      updated: null,
	    };
	  }
	}

	GuildUpdate = GuildUpdateAction;
	return GuildUpdate;
}

var CommandInteractionOptionResolver_1;
var hasRequiredCommandInteractionOptionResolver;

function requireCommandInteractionOptionResolver () {
	if (hasRequiredCommandInteractionOptionResolver) return CommandInteractionOptionResolver_1;
	hasRequiredCommandInteractionOptionResolver = 1;

	const { ApplicationCommandOptionType } = requireV10$6();
	const { DiscordjsTypeError, ErrorCodes } = requireErrors$1();

	/**
	 * A resolver for command interaction options.
	 */
	class CommandInteractionOptionResolver {
	  constructor(client, options, resolved) {
	    /**
	     * The client that instantiated this.
	     * @name CommandInteractionOptionResolver#client
	     * @type {Client}
	     * @readonly
	     */
	    Object.defineProperty(this, 'client', { value: client });

	    /**
	     * The name of the subcommand group.
	     * @type {?string}
	     * @private
	     */
	    this._group = null;

	    /**
	     * The name of the subcommand.
	     * @type {?string}
	     * @private
	     */
	    this._subcommand = null;

	    /**
	     * The bottom-level options for the interaction.
	     * If there is a subcommand (or subcommand and group), this is the options for the subcommand.
	     * @type {CommandInteractionOption[]}
	     * @private
	     */
	    this._hoistedOptions = options;

	    // Hoist subcommand group if present
	    if (this._hoistedOptions[0]?.type === ApplicationCommandOptionType.SubcommandGroup) {
	      this._group = this._hoistedOptions[0].name;
	      this._hoistedOptions = this._hoistedOptions[0].options ?? [];
	    }
	    // Hoist subcommand if present
	    if (this._hoistedOptions[0]?.type === ApplicationCommandOptionType.Subcommand) {
	      this._subcommand = this._hoistedOptions[0].name;
	      this._hoistedOptions = this._hoistedOptions[0].options ?? [];
	    }

	    /**
	     * The interaction options array.
	     * @name CommandInteractionOptionResolver#data
	     * @type {ReadonlyArray<CommandInteractionOption>}
	     * @readonly
	     */
	    Object.defineProperty(this, 'data', { value: Object.freeze([...options]) });

	    /**
	     * The interaction resolved data
	     * @name CommandInteractionOptionResolver#resolved
	     * @type {?Readonly<CommandInteractionResolvedData>}
	     */
	    Object.defineProperty(this, 'resolved', { value: resolved ? Object.freeze(resolved) : null });
	  }

	  /**
	   * Gets an option by its name.
	   * @param {string} name The name of the option.
	   * @param {boolean} [required=false] Whether to throw an error if the option is not found.
	   * @returns {?CommandInteractionOption} The option, if found.
	   */
	  get(name, required = false) {
	    const option = this._hoistedOptions.find(opt => opt.name === name);
	    if (!option) {
	      if (required) {
	        throw new DiscordjsTypeError(ErrorCodes.CommandInteractionOptionNotFound, name);
	      }
	      return null;
	    }
	    return option;
	  }

	  /**
	   * Gets an option by name and property and checks its type.
	   * @param {string} name The name of the option.
	   * @param {ApplicationCommandOptionType[]} allowedTypes The allowed types of the option.
	   * @param {string[]} properties The properties to check for for `required`.
	   * @param {boolean} required Whether to throw an error if the option is not found.
	   * @returns {?CommandInteractionOption} The option, if found.
	   * @private
	   */
	  _getTypedOption(name, allowedTypes, properties, required) {
	    const option = this.get(name, required);
	    if (!option) {
	      return null;
	    } else if (!allowedTypes.includes(option.type)) {
	      throw new DiscordjsTypeError(ErrorCodes.CommandInteractionOptionType, name, option.type, allowedTypes.join(', '));
	    } else if (required && properties.every(prop => option[prop] === null || option[prop] === undefined)) {
	      throw new DiscordjsTypeError(ErrorCodes.CommandInteractionOptionEmpty, name, option.type);
	    }
	    return option;
	  }

	  /**
	   * Gets the selected subcommand.
	   * @param {boolean} [required=true] Whether to throw an error if there is no subcommand.
	   * @returns {?string} The name of the selected subcommand, or null if not set and not required.
	   */
	  getSubcommand(required = true) {
	    if (required && !this._subcommand) {
	      throw new DiscordjsTypeError(ErrorCodes.CommandInteractionOptionNoSubcommand);
	    }
	    return this._subcommand;
	  }

	  /**
	   * Gets the selected subcommand group.
	   * @param {boolean} [required=false] Whether to throw an error if there is no subcommand group.
	   * @returns {?string} The name of the selected subcommand group, or null if not set and not required.
	   */
	  getSubcommandGroup(required = false) {
	    if (required && !this._group) {
	      throw new DiscordjsTypeError(ErrorCodes.CommandInteractionOptionNoSubcommandGroup);
	    }
	    return this._group;
	  }

	  /**
	   * Gets a boolean option.
	   * @param {string} name The name of the option.
	   * @param {boolean} [required=false] Whether to throw an error if the option is not found.
	   * @returns {?boolean} The value of the option, or null if not set and not required.
	   */
	  getBoolean(name, required = false) {
	    const option = this._getTypedOption(name, [ApplicationCommandOptionType.Boolean], ['value'], required);
	    return option?.value ?? null;
	  }

	  /**
	   * Gets a channel option.
	   * @param {string} name The name of the option.
	   * @param {boolean} [required=false] Whether to throw an error if the option is not found.
	   * @param {ChannelType[]} [channelTypes=[]] The allowed types of channels. If empty, all channel types are allowed.
	   * @returns {?(GuildChannel|ThreadChannel|APIChannel)}
	   * The value of the option, or null if not set and not required.
	   */
	  getChannel(name, required = false, channelTypes = []) {
	    const option = this._getTypedOption(name, [ApplicationCommandOptionType.Channel], ['channel'], required);
	    const channel = option?.channel ?? null;

	    if (channel && channelTypes.length > 0 && !channelTypes.includes(channel.type)) {
	      throw new DiscordjsTypeError(
	        ErrorCodes.CommandInteractionOptionInvalidChannelType,
	        name,
	        channel.type,
	        channelTypes.join(', '),
	      );
	    }

	    return channel;
	  }

	  /**
	   * Gets a string option.
	   * @param {string} name The name of the option.
	   * @param {boolean} [required=false] Whether to throw an error if the option is not found.
	   * @returns {?string} The value of the option, or null if not set and not required.
	   */
	  getString(name, required = false) {
	    const option = this._getTypedOption(name, [ApplicationCommandOptionType.String], ['value'], required);
	    return option?.value ?? null;
	  }

	  /**
	   * Gets an integer option.
	   * @param {string} name The name of the option.
	   * @param {boolean} [required=false] Whether to throw an error if the option is not found.
	   * @returns {?number} The value of the option, or null if not set and not required.
	   */
	  getInteger(name, required = false) {
	    const option = this._getTypedOption(name, [ApplicationCommandOptionType.Integer], ['value'], required);
	    return option?.value ?? null;
	  }

	  /**
	   * Gets a number option.
	   * @param {string} name The name of the option.
	   * @param {boolean} [required=false] Whether to throw an error if the option is not found.
	   * @returns {?number} The value of the option, or null if not set and not required.
	   */
	  getNumber(name, required = false) {
	    const option = this._getTypedOption(name, [ApplicationCommandOptionType.Number], ['value'], required);
	    return option?.value ?? null;
	  }

	  /**
	   * Gets a user option.
	   * @param {string} name The name of the option.
	   * @param {boolean} [required=false] Whether to throw an error if the option is not found.
	   * @returns {?User} The value of the option, or null if not set and not required.
	   */
	  getUser(name, required = false) {
	    const option = this._getTypedOption(
	      name,
	      [ApplicationCommandOptionType.User, ApplicationCommandOptionType.Mentionable],
	      ['user'],
	      required,
	    );
	    return option?.user ?? null;
	  }

	  /**
	   * Gets a member option.
	   * @param {string} name The name of the option.
	   * @returns {?(GuildMember|APIGuildMember)}
	   * The value of the option, or null if the user is not present in the guild or the option is not set.
	   */
	  getMember(name) {
	    const option = this._getTypedOption(
	      name,
	      [ApplicationCommandOptionType.User, ApplicationCommandOptionType.Mentionable],
	      ['member'],
	      false,
	    );
	    return option?.member ?? null;
	  }

	  /**
	   * Gets a role option.
	   * @param {string} name The name of the option.
	   * @param {boolean} [required=false] Whether to throw an error if the option is not found.
	   * @returns {?(Role|APIRole)} The value of the option, or null if not set and not required.
	   */
	  getRole(name, required = false) {
	    const option = this._getTypedOption(
	      name,
	      [ApplicationCommandOptionType.Role, ApplicationCommandOptionType.Mentionable],
	      ['role'],
	      required,
	    );
	    return option?.role ?? null;
	  }

	  /**
	   * Gets an attachment option.
	   * @param {string} name The name of the option.
	   * @param {boolean} [required=false] Whether to throw an error if the option is not found.
	   * @returns {?Attachment} The value of the option, or null if not set and not required.
	   */
	  getAttachment(name, required = false) {
	    const option = this._getTypedOption(name, [ApplicationCommandOptionType.Attachment], ['attachment'], required);
	    return option?.attachment ?? null;
	  }

	  /**
	   * Gets a mentionable option.
	   * @param {string} name The name of the option.
	   * @param {boolean} [required=false] Whether to throw an error if the option is not found.
	   * @returns {?(User|GuildMember|APIGuildMember|Role|APIRole)}
	   * The value of the option, or null if not set and not required.
	   */
	  getMentionable(name, required = false) {
	    const option = this._getTypedOption(
	      name,
	      [ApplicationCommandOptionType.Mentionable],
	      ['user', 'member', 'role'],
	      required,
	    );
	    return option?.member ?? option?.user ?? option?.role ?? null;
	  }

	  /**
	   * Gets a message option.
	   * @param {string} name The name of the option.
	   * @param {boolean} [required=false] Whether to throw an error if the option is not found.
	   * @returns {?Message}
	   * The value of the option, or null if not set and not required.
	   */
	  getMessage(name, required = false) {
	    const option = this._getTypedOption(name, ['_MESSAGE'], ['message'], required);
	    return option?.message ?? null;
	  }

	  /**
	   * The full autocomplete option object.
	   * @typedef {Object} AutocompleteFocusedOption
	   * @property {string} name The name of the option
	   * @property {ApplicationCommandOptionType} type The type of the application command option
	   * @property {string} value The value of the option
	   * @property {boolean} focused Whether this option is currently in focus for autocomplete
	   */

	  /**
	   * Gets the focused option.
	   * @param {boolean} [getFull=false] Whether to get the full option object
	   * @returns {string|AutocompleteFocusedOption}
	   * The value of the option, or the whole option if getFull is true
	   */
	  getFocused(getFull = false) {
	    const focusedOption = this._hoistedOptions.find(option => option.focused);
	    if (!focusedOption) throw new DiscordjsTypeError(ErrorCodes.AutocompleteInteractionOptionNoFocusedOption);
	    return getFull ? focusedOption : focusedOption.value;
	  }
	}

	CommandInteractionOptionResolver_1 = CommandInteractionOptionResolver;
	return CommandInteractionOptionResolver_1;
}

var AutocompleteInteraction_1;
var hasRequiredAutocompleteInteraction;

function requireAutocompleteInteraction () {
	if (hasRequiredAutocompleteInteraction) return AutocompleteInteraction_1;
	hasRequiredAutocompleteInteraction = 1;

	const { InteractionResponseType, Routes } = requireV10$6();
	const BaseInteraction = requireBaseInteraction();
	const CommandInteractionOptionResolver = requireCommandInteractionOptionResolver();
	const { DiscordjsError, ErrorCodes } = requireErrors$1();

	/**
	 * Represents an autocomplete interaction.
	 * @extends {BaseInteraction}
	 */
	class AutocompleteInteraction extends BaseInteraction {
	  constructor(client, data) {
	    super(client, data);

	    /**
	     * The id of the channel this interaction was sent in
	     * @type {Snowflake}
	     * @name AutocompleteInteraction#channelId
	     */

	    /**
	     * The invoked application command's id
	     * @type {Snowflake}
	     */
	    this.commandId = data.data.id;

	    /**
	     * The invoked application command's name
	     * @type {string}
	     */
	    this.commandName = data.data.name;

	    /**
	     * The invoked application command's type
	     * @type {ApplicationCommandType}
	     */
	    this.commandType = data.data.type;

	    /**
	     * The id of the guild the invoked application command is registered to
	     * @type {?Snowflake}
	     */
	    this.commandGuildId = data.data.guild_id ?? null;

	    /**
	     * Whether this interaction has already received a response
	     * @type {boolean}
	     */
	    this.responded = false;

	    /**
	     * The options passed to the command
	     * @type {CommandInteractionOptionResolver}
	     */
	    this.options = new CommandInteractionOptionResolver(this.client, data.data.options ?? []);
	  }

	  /**
	   * The invoked application command, if it was fetched before
	   * @type {?ApplicationCommand}
	   */
	  get command() {
	    const id = this.commandId;
	    return this.guild?.commands.cache.get(id) ?? this.client.application.commands.cache.get(id) ?? null;
	  }

	  /**
	   * Sends results for the autocomplete of this interaction.
	   * @param {ApplicationCommandOptionChoiceData[]} options The options for the autocomplete
	   * @returns {Promise<void>}
	   * @example
	   * // respond to autocomplete interaction
	   * interaction.respond([
	   *  {
	   *    name: 'Option 1',
	   *    value: 'option1',
	   *  },
	   * ])
	   *  .then(() => console.log('Successfully responded to the autocomplete interaction'))
	   *  .catch(console.error);
	   */
	  async respond(options) {
	    if (this.responded) throw new DiscordjsError(ErrorCodes.InteractionAlreadyReplied);

	    await this.client.rest.post(Routes.interactionCallback(this.id, this.token), {
	      body: {
	        type: InteractionResponseType.ApplicationCommandAutocompleteResult,
	        data: {
	          choices: options.map(({ nameLocalizations, ...option }) => ({
	            ...this.client.options.jsonTransformer(option),
	            name_localizations: nameLocalizations,
	          })),
	        },
	      },
	      auth: false,
	    });
	    this.responded = true;
	  }
	}

	AutocompleteInteraction_1 = AutocompleteInteraction;
	return AutocompleteInteraction_1;
}

var InteractionResponse_1;
var hasRequiredInteractionResponse;

function requireInteractionResponse () {
	if (hasRequiredInteractionResponse) return InteractionResponse_1;
	hasRequiredInteractionResponse = 1;

	const { DiscordSnowflake } = /*@__PURE__*/ requireCjs$2();
	const { InteractionType } = requireV10$6();
	const { DiscordjsError, ErrorCodes } = requireErrors$1();

	/**
	 * Represents an interaction's response
	 */
	class InteractionResponse {
	  constructor(interaction, id) {
	    /**
	     * The interaction associated with the interaction response
	     * @type {BaseInteraction}
	     */
	    this.interaction = interaction;
	    /**
	     * The id of the original interaction response
	     * @type {Snowflake}
	     */
	    this.id = id ?? interaction.id;
	    this.client = interaction.client;
	  }

	  /**
	   * The timestamp the interaction response was created at
	   * @type {number}
	   * @readonly
	   */
	  get createdTimestamp() {
	    return DiscordSnowflake.timestampFrom(this.id);
	  }

	  /**
	   * The time the interaction response was created at
	   * @type {Date}
	   * @readonly
	   */
	  get createdAt() {
	    return new Date(this.createdTimestamp);
	  }

	  /**
	   * Collects a single component interaction that passes the filter.
	   * The Promise will reject if the time expires.
	   * @param {AwaitMessageComponentOptions} [options={}] Options to pass to the internal collector
	   * @returns {Promise<MessageComponentInteraction>}
	   */
	  awaitMessageComponent(options = {}) {
	    const _options = { ...options, max: 1 };
	    return new Promise((resolve, reject) => {
	      const collector = this.createMessageComponentCollector(_options);
	      collector.once('end', (interactions, reason) => {
	        const interaction = interactions.first();
	        if (interaction) resolve(interaction);
	        else reject(new DiscordjsError(ErrorCodes.InteractionCollectorError, reason));
	      });
	    });
	  }

	  /**
	   * Creates a message component interaction collector
	   * @param {MessageComponentCollectorOptions} [options={}] Options to send to the collector
	   * @returns {InteractionCollector}
	   */
	  createMessageComponentCollector(options = {}) {
	    return new InteractionCollector(this.client, {
	      ...options,
	      interactionResponse: this,
	      interactionType: InteractionType.MessageComponent,
	    });
	  }

	  /**
	   * Fetches the response as a {@link Message} object.
	   * @returns {Promise<Message>}
	   */
	  fetch() {
	    return this.interaction.fetchReply();
	  }

	  /**
	   * Deletes the response.
	   * @returns {Promise<void>}
	   */
	  delete() {
	    return this.interaction.deleteReply();
	  }

	  /**
	   * Edits the response.
	   * @param {string|MessagePayload|WebhookMessageEditOptions} options The new options for the response.
	   * @returns {Promise<Message>}
	   */
	  edit(options) {
	    return this.interaction.editReply(options);
	  }
	}

	// eslint-disable-next-line import/order
	const InteractionCollector = requireInteractionCollector();
	InteractionResponse_1 = InteractionResponse;
	return InteractionResponse_1;
}

var InteractionResponses_1;
var hasRequiredInteractionResponses;

function requireInteractionResponses () {
	if (hasRequiredInteractionResponses) return InteractionResponses_1;
	hasRequiredInteractionResponses = 1;

	const { deprecate } = require$$0$a;
	const { isJSONEncodable } = requireDist$7();
	const { InteractionResponseType, MessageFlags, Routes, InteractionType } = requireV10$6();
	const { DiscordjsError, ErrorCodes } = requireErrors$1();
	const MessageFlagsBitField = requireMessageFlagsBitField();
	const InteractionCollector = requireInteractionCollector();
	const InteractionResponse = requireInteractionResponse();
	const MessagePayload = requireMessagePayload();

	/**
	 * @typedef {Object} ModalComponentData
	 * @property {string} title The title of the modal
	 * @property {string} customId The custom id of the modal
	 * @property {ActionRow[]} components The components within this modal
	 */

	/**
	 * Interface for classes that support shared interaction response types.
	 * @interface
	 */
	class InteractionResponses {
	  /**
	   * Options for deferring the reply to an {@link BaseInteraction}.
	   * @typedef {Object} InteractionDeferReplyOptions
	   * @property {boolean} [ephemeral] Whether the reply should be ephemeral
	   * @property {boolean} [fetchReply] Whether to fetch the reply
	   */

	  /**
	   * Options for deferring and updating the reply to a {@link MessageComponentInteraction}.
	   * @typedef {Object} InteractionDeferUpdateOptions
	   * @property {boolean} [fetchReply] Whether to fetch the reply
	   */

	  /**
	   * Options for a reply to a {@link BaseInteraction}.
	   * @typedef {BaseMessageOptionsWithPoll} InteractionReplyOptions
	   * @property {boolean} [tts=false] Whether the message should be spoken aloud
	   * @property {boolean} [ephemeral] Whether the reply should be ephemeral
	   * @property {boolean} [fetchReply] Whether to fetch the reply
	   * @property {MessageFlags} [flags] Which flags to set for the message.
	   * <info>Only `MessageFlags.Ephemeral`, `MessageFlags.SuppressEmbeds`, and `MessageFlags.SuppressNotifications`
	   * can be set.</info>
	   */

	  /**
	   * Options for updating the message received from a {@link MessageComponentInteraction}.
	   * @typedef {MessageEditOptions} InteractionUpdateOptions
	   * @property {boolean} [fetchReply] Whether to fetch the reply
	   */

	  /**
	   * Defers the reply to this interaction.
	   * @param {InteractionDeferReplyOptions} [options] Options for deferring the reply to this interaction
	   * @returns {Promise<Message|InteractionResponse>}
	   * @example
	   * // Defer the reply to this interaction
	   * interaction.deferReply()
	   *   .then(console.log)
	   *   .catch(console.error)
	   * @example
	   * // Defer to send an ephemeral reply later
	   * interaction.deferReply({ ephemeral: true })
	   *   .then(console.log)
	   *   .catch(console.error);
	   */
	  async deferReply(options = {}) {
	    if (this.deferred || this.replied) throw new DiscordjsError(ErrorCodes.InteractionAlreadyReplied);
	    this.ephemeral = options.ephemeral ?? false;
	    await this.client.rest.post(Routes.interactionCallback(this.id, this.token), {
	      body: {
	        type: InteractionResponseType.DeferredChannelMessageWithSource,
	        data: {
	          flags: options.ephemeral ? MessageFlags.Ephemeral : undefined,
	        },
	      },
	      auth: false,
	    });
	    this.deferred = true;

	    return options.fetchReply ? this.fetchReply() : new InteractionResponse(this);
	  }

	  /**
	   * Creates a reply to this interaction.
	   * <info>Use the `fetchReply` option to get the bot's reply message.</info>
	   * @param {string|MessagePayload|InteractionReplyOptions} options The options for the reply
	   * @returns {Promise<Message|InteractionResponse>}
	   * @example
	   * // Reply to the interaction and fetch the response
	   * interaction.reply({ content: 'Pong!', fetchReply: true })
	   *   .then((message) => console.log(`Reply sent with content ${message.content}`))
	   *   .catch(console.error);
	   * @example
	   * // Create an ephemeral reply with an embed
	   * const embed = new EmbedBuilder().setDescription('Pong!');
	   *
	   * interaction.reply({ embeds: [embed], ephemeral: true })
	   *   .then(() => console.log('Reply sent.'))
	   *   .catch(console.error);
	   */
	  async reply(options) {
	    if (this.deferred || this.replied) throw new DiscordjsError(ErrorCodes.InteractionAlreadyReplied);

	    let messagePayload;
	    if (options instanceof MessagePayload) messagePayload = options;
	    else messagePayload = MessagePayload.create(this, options);

	    const { body: data, files } = await messagePayload.resolveBody().resolveFiles();

	    this.ephemeral = new MessageFlagsBitField(data.flags).has(MessageFlags.Ephemeral);

	    await this.client.rest.post(Routes.interactionCallback(this.id, this.token), {
	      body: {
	        type: InteractionResponseType.ChannelMessageWithSource,
	        data,
	      },
	      files,
	      auth: false,
	    });
	    this.replied = true;

	    return options.fetchReply ? this.fetchReply() : new InteractionResponse(this);
	  }

	  /**
	   * Fetches a reply to this interaction.
	   * @see Webhook#fetchMessage
	   * @param {Snowflake|'@original'} [message='@original'] The response to fetch
	   * @returns {Promise<Message>}
	   * @example
	   * // Fetch the initial reply to this interaction
	   * interaction.fetchReply()
	   *   .then(reply => console.log(`Replied with ${reply.content}`))
	   *   .catch(console.error);
	   */
	  fetchReply(message = '@original') {
	    return this.webhook.fetchMessage(message);
	  }

	  /**
	   * Options that can be passed into {@link InteractionResponses#editReply}.
	   * @typedef {WebhookMessageEditOptions} InteractionEditReplyOptions
	   * @property {MessageResolvable|'@original'} [message='@original'] The response to edit
	   */

	  /**
	   * Edits a reply to this interaction.
	   * @see Webhook#editMessage
	   * @param {string|MessagePayload|InteractionEditReplyOptions} options The new options for the message
	   * @returns {Promise<Message>}
	   * @example
	   * // Edit the initial reply to this interaction
	   * interaction.editReply('New content')
	   *   .then(console.log)
	   *   .catch(console.error);
	   */
	  async editReply(options) {
	    if (!this.deferred && !this.replied) throw new DiscordjsError(ErrorCodes.InteractionNotReplied);
	    const msg = await this.webhook.editMessage(options.message ?? '@original', options);
	    this.replied = true;
	    return msg;
	  }

	  /**
	   * Deletes a reply to this interaction.
	   * @see Webhook#deleteMessage
	   * @param {MessageResolvable|'@original'} [message='@original'] The response to delete
	   * @returns {Promise<void>}
	   * @example
	   * // Delete the initial reply to this interaction
	   * interaction.deleteReply()
	   *   .then(console.log)
	   *   .catch(console.error);
	   */
	  async deleteReply(message = '@original') {
	    await this.webhook.deleteMessage(message);
	  }

	  /**
	   * Send a follow-up message to this interaction.
	   * @param {string|MessagePayload|InteractionReplyOptions} options The options for the reply
	   * @returns {Promise<Message>}
	   */
	  followUp(options) {
	    if (!this.deferred && !this.replied) return Promise.reject(new DiscordjsError(ErrorCodes.InteractionNotReplied));
	    return this.webhook.send(options);
	  }

	  /**
	   * Defers an update to the message to which the component was attached.
	   * @param {InteractionDeferUpdateOptions} [options] Options for deferring the update to this interaction
	   * @returns {Promise<Message|InteractionResponse>}
	   * @example
	   * // Defer updating and reset the component's loading state
	   * interaction.deferUpdate()
	   *   .then(console.log)
	   *   .catch(console.error);
	   */
	  async deferUpdate(options = {}) {
	    if (this.deferred || this.replied) throw new DiscordjsError(ErrorCodes.InteractionAlreadyReplied);
	    await this.client.rest.post(Routes.interactionCallback(this.id, this.token), {
	      body: {
	        type: InteractionResponseType.DeferredMessageUpdate,
	      },
	      auth: false,
	    });
	    this.deferred = true;

	    return options.fetchReply ? this.fetchReply() : new InteractionResponse(this, this.message?.interaction?.id);
	  }

	  /**
	   * Updates the original message of the component on which the interaction was received on.
	   * @param {string|MessagePayload|InteractionUpdateOptions} options The options for the updated message
	   * @returns {Promise<Message|void>}
	   * @example
	   * // Remove the components from the message
	   * interaction.update({
	   *   content: "A component interaction was received",
	   *   components: []
	   * })
	   *   .then(console.log)
	   *   .catch(console.error);
	   */
	  async update(options) {
	    if (this.deferred || this.replied) throw new DiscordjsError(ErrorCodes.InteractionAlreadyReplied);

	    let messagePayload;
	    if (options instanceof MessagePayload) messagePayload = options;
	    else messagePayload = MessagePayload.create(this, options);

	    const { body: data, files } = await messagePayload.resolveBody().resolveFiles();

	    await this.client.rest.post(Routes.interactionCallback(this.id, this.token), {
	      body: {
	        type: InteractionResponseType.UpdateMessage,
	        data,
	      },
	      files,
	      auth: false,
	    });
	    this.replied = true;

	    return options.fetchReply ? this.fetchReply() : new InteractionResponse(this, this.message.interaction?.id);
	  }

	  /**
	   * Shows a modal component
	   * @param {ModalBuilder|ModalComponentData|APIModalInteractionResponseCallbackData} modal The modal to show
	   * @returns {Promise<void>}
	   */
	  async showModal(modal) {
	    if (this.deferred || this.replied) throw new DiscordjsError(ErrorCodes.InteractionAlreadyReplied);
	    await this.client.rest.post(Routes.interactionCallback(this.id, this.token), {
	      body: {
	        type: InteractionResponseType.Modal,
	        data: isJSONEncodable(modal) ? modal.toJSON() : this.client.options.jsonTransformer(modal),
	      },
	      auth: false,
	    });
	    this.replied = true;
	  }

	  /**
	   * Responds to the interaction with an upgrade button.
	   * <info>Only available for applications with monetization enabled.</info>
	   * @deprecated Sending a premium-style button is the new Discord behaviour.
	   * @returns {Promise<void>}
	   */
	  async sendPremiumRequired() {
	    if (this.deferred || this.replied) throw new DiscordjsError(ErrorCodes.InteractionAlreadyReplied);
	    await this.client.rest.post(Routes.interactionCallback(this.id, this.token), {
	      body: {
	        type: InteractionResponseType.PremiumRequired,
	      },
	      auth: false,
	    });
	    this.replied = true;
	  }

	  /**
	   * An object containing the same properties as {@link CollectorOptions}, but a few less:
	   * @typedef {Object} AwaitModalSubmitOptions
	   * @property {CollectorFilter} [filter] The filter applied to this collector
	   * @property {number} time Time in milliseconds to wait for an interaction before rejecting
	   */

	  /**
	   * Collects a single modal submit interaction that passes the filter.
	   * The Promise will reject if the time expires.
	   * @param {AwaitModalSubmitOptions} options Options to pass to the internal collector
	   * @returns {Promise<ModalSubmitInteraction>}
	   * @example
	   * // Collect a modal submit interaction
	   * const filter = (interaction) => interaction.customId === 'modal';
	   * interaction.awaitModalSubmit({ filter, time: 15_000 })
	   *   .then(interaction => console.log(`${interaction.customId} was submitted!`))
	   *   .catch(console.error);
	   */
	  awaitModalSubmit(options) {
	    if (typeof options.time !== 'number') throw new DiscordjsError(ErrorCodes.InvalidType, 'time', 'number');
	    const _options = { ...options, max: 1, interactionType: InteractionType.ModalSubmit };
	    return new Promise((resolve, reject) => {
	      const collector = new InteractionCollector(this.client, _options);
	      collector.once('end', (interactions, reason) => {
	        const interaction = interactions.first();
	        if (interaction) resolve(interaction);
	        else reject(new DiscordjsError(ErrorCodes.InteractionCollectorError, reason));
	      });
	    });
	  }

	  static applyToClass(structure, ignore = []) {
	    const props = [
	      'deferReply',
	      'reply',
	      'fetchReply',
	      'editReply',
	      'deleteReply',
	      'followUp',
	      'deferUpdate',
	      'update',
	      'showModal',
	      'sendPremiumRequired',
	      'awaitModalSubmit',
	    ];

	    for (const prop of props) {
	      if (ignore.includes(prop)) continue;
	      Object.defineProperty(
	        structure.prototype,
	        prop,
	        Object.getOwnPropertyDescriptor(InteractionResponses.prototype, prop),
	      );
	    }
	  }
	}

	InteractionResponses.prototype.sendPremiumRequired = deprecate(
	  InteractionResponses.prototype.sendPremiumRequired,
	  // eslint-disable-next-line max-len
	  'InteractionResponses#sendPremiumRequired() is deprecated. Sending a premium-style button is the new Discord behaviour.',
	);

	InteractionResponses_1 = InteractionResponses;
	return InteractionResponses_1;
}

var MessageComponentInteraction_1;
var hasRequiredMessageComponentInteraction;

function requireMessageComponentInteraction () {
	if (hasRequiredMessageComponentInteraction) return MessageComponentInteraction_1;
	hasRequiredMessageComponentInteraction = 1;

	const { lazy } = requireDist$7();
	const BaseInteraction = requireBaseInteraction();
	const InteractionWebhook = requireInteractionWebhook();
	const InteractionResponses = requireInteractionResponses();

	const getMessage = lazy(() => requireMessage().Message);

	/**
	 * Represents a message component interaction.
	 * @extends {BaseInteraction}
	 * @implements {InteractionResponses}
	 */
	class MessageComponentInteraction extends BaseInteraction {
	  constructor(client, data) {
	    super(client, data);

	    /**
	     * The id of the channel this interaction was sent in
	     * @type {Snowflake}
	     * @name MessageComponentInteraction#channelId
	     */

	    /**
	     * The message to which the component was attached
	     * @type {Message}
	     */
	    this.message = this.channel?.messages._add(data.message) ?? new (getMessage())(client, data.message);

	    /**
	     * The custom id of the component which was interacted with
	     * @type {string}
	     */
	    this.customId = data.data.custom_id;

	    /**
	     * The type of component which was interacted with
	     * @type {ComponentType}
	     */
	    this.componentType = data.data.component_type;

	    /**
	     * Whether the reply to this interaction has been deferred
	     * @type {boolean}
	     */
	    this.deferred = false;

	    /**
	     * Whether the reply to this interaction is ephemeral
	     * @type {?boolean}
	     */
	    this.ephemeral = null;

	    /**
	     * Whether this interaction has already been replied to
	     * @type {boolean}
	     */
	    this.replied = false;

	    /**
	     * An associated interaction webhook, can be used to further interact with this interaction
	     * @type {InteractionWebhook}
	     */
	    this.webhook = new InteractionWebhook(this.client, this.applicationId, this.token);
	  }

	  /**
	   * Components that can be placed in an action row for messages.
	   * * ButtonComponent
	   * * StringSelectMenuComponent
	   * * UserSelectMenuComponent
	   * * RoleSelectMenuComponent
	   * * MentionableSelectMenuComponent
	   * * ChannelSelectMenuComponent
	   * @typedef {ButtonComponent|StringSelectMenuComponent|UserSelectMenuComponent|
	   * RoleSelectMenuComponent|MentionableSelectMenuComponent|ChannelSelectMenuComponent} MessageActionRowComponent
	   */

	  /**
	   * The component which was interacted with
	   * @type {MessageActionRowComponent|APIMessageActionRowComponent}
	   * @readonly
	   */
	  get component() {
	    return this.message.components
	      .flatMap(row => row.components)
	      .find(component => (component.customId ?? component.custom_id) === this.customId);
	  }

	  // These are here only for documentation purposes - they are implemented by InteractionResponses
	  /* eslint-disable no-empty-function */
	  deferReply() {}
	  reply() {}
	  fetchReply() {}
	  editReply() {}
	  deleteReply() {}
	  followUp() {}
	  deferUpdate() {}
	  update() {}
	  showModal() {}
	  sendPremiumRequired() {}
	  awaitModalSubmit() {}
	}

	InteractionResponses.applyToClass(MessageComponentInteraction);

	MessageComponentInteraction_1 = MessageComponentInteraction;
	return MessageComponentInteraction_1;
}

var ButtonInteraction_1;
var hasRequiredButtonInteraction;

function requireButtonInteraction () {
	if (hasRequiredButtonInteraction) return ButtonInteraction_1;
	hasRequiredButtonInteraction = 1;

	const MessageComponentInteraction = requireMessageComponentInteraction();

	/**
	 * Represents a button interaction.
	 * @extends {MessageComponentInteraction}
	 */
	class ButtonInteraction extends MessageComponentInteraction {}

	ButtonInteraction_1 = ButtonInteraction;
	return ButtonInteraction_1;
}

var ChannelSelectMenuInteraction_1;
var hasRequiredChannelSelectMenuInteraction;

function requireChannelSelectMenuInteraction () {
	if (hasRequiredChannelSelectMenuInteraction) return ChannelSelectMenuInteraction_1;
	hasRequiredChannelSelectMenuInteraction = 1;

	const { Collection } = requireDist$3();
	const MessageComponentInteraction = requireMessageComponentInteraction();

	/**
	 * Represents a {@link ComponentType.ChannelSelect} select menu interaction.
	 * @extends {MessageComponentInteraction}
	 */
	class ChannelSelectMenuInteraction extends MessageComponentInteraction {
	  constructor(client, data) {
	    super(client, data);
	    const { resolved, values } = data.data;

	    /**
	     * An array of the selected channel ids
	     * @type {Snowflake[]}
	     */
	    this.values = values ?? [];

	    /**
	     * Collection of the selected channels
	     * @type {Collection<Snowflake, BaseChannel|APIChannel>}
	     */
	    this.channels = new Collection();

	    for (const channel of Object.values(resolved?.channels ?? {})) {
	      this.channels.set(channel.id, this.client.channels._add(channel, this.guild) ?? channel);
	    }
	  }
	}

	ChannelSelectMenuInteraction_1 = ChannelSelectMenuInteraction;
	return ChannelSelectMenuInteraction_1;
}

var CommandInteraction_1;
var hasRequiredCommandInteraction;

function requireCommandInteraction () {
	if (hasRequiredCommandInteraction) return CommandInteraction_1;
	hasRequiredCommandInteraction = 1;

	const Attachment = requireAttachment$1();
	const BaseInteraction = requireBaseInteraction();
	const InteractionWebhook = requireInteractionWebhook();
	const InteractionResponses = requireInteractionResponses();

	/**
	 * Represents a command interaction.
	 * @extends {BaseInteraction}
	 * @implements {InteractionResponses}
	 * @abstract
	 */
	class CommandInteraction extends BaseInteraction {
	  constructor(client, data) {
	    super(client, data);

	    /**
	     * The id of the channel this interaction was sent in
	     * @type {Snowflake}
	     * @name CommandInteraction#channelId
	     */

	    /**
	     * The invoked application command's id
	     * @type {Snowflake}
	     */
	    this.commandId = data.data.id;

	    /**
	     * The invoked application command's name
	     * @type {string}
	     */
	    this.commandName = data.data.name;

	    /**
	     * The invoked application command's type
	     * @type {ApplicationCommandType}
	     */
	    this.commandType = data.data.type;

	    /**
	     * The id of the guild the invoked application command is registered to
	     * @type {?Snowflake}
	     */
	    this.commandGuildId = data.data.guild_id ?? null;

	    /**
	     * Whether the reply to this interaction has been deferred
	     * @type {boolean}
	     */
	    this.deferred = false;

	    /**
	     * Whether this interaction has already been replied to
	     * @type {boolean}
	     */
	    this.replied = false;

	    /**
	     * Whether the reply to this interaction is ephemeral
	     * @type {?boolean}
	     */
	    this.ephemeral = null;

	    /**
	     * An associated interaction webhook, can be used to further interact with this interaction
	     * @type {InteractionWebhook}
	     */
	    this.webhook = new InteractionWebhook(this.client, this.applicationId, this.token);
	  }

	  /**
	   * The invoked application command, if it was fetched before
	   * @type {?ApplicationCommand}
	   */
	  get command() {
	    const id = this.commandId;
	    return this.guild?.commands.cache.get(id) ?? this.client.application.commands.cache.get(id) ?? null;
	  }

	  /**
	   * Represents the resolved data of a received command interaction.
	   * @typedef {Object} CommandInteractionResolvedData
	   * @property {Collection<Snowflake, User>} [users] The resolved users
	   * @property {Collection<Snowflake, GuildMember|APIGuildMember>} [members] The resolved guild members
	   * @property {Collection<Snowflake, Role|APIRole>} [roles] The resolved roles
	   * @property {Collection<Snowflake, BaseChannel|APIChannel>} [channels] The resolved channels
	   * @property {Collection<Snowflake, Message|APIMessage>} [messages] The resolved messages
	   * @property {Collection<Snowflake, Attachment>} [attachments] The resolved attachments
	   */

	  /**
	   * Represents an option of a received command interaction.
	   * @typedef {Object} CommandInteractionOption
	   * @property {string} name The name of the option
	   * @property {ApplicationCommandOptionType} type The type of the option
	   * @property {boolean} [autocomplete] Whether the autocomplete interaction is enabled for a
	   * {@link ApplicationCommandOptionType.String}, {@link ApplicationCommandOptionType.Integer} or
	   * {@link ApplicationCommandOptionType.Number} option
	   * @property {string|number|boolean} [value] The value of the option
	   * @property {CommandInteractionOption[]} [options] Additional options if this option is a
	   * subcommand (group)
	   * @property {User} [user] The resolved user
	   * @property {GuildMember|APIGuildMember} [member] The resolved member
	   * @property {GuildChannel|ThreadChannel|APIChannel} [channel] The resolved channel
	   * @property {Role|APIRole} [role] The resolved role
	   * @property {Attachment} [attachment] The resolved attachment
	   */

	  /**
	   * Transforms an option received from the API.
	   * @param {APIApplicationCommandOption} option The received option
	   * @param {APIInteractionDataResolved} resolved The resolved interaction data
	   * @returns {CommandInteractionOption}
	   * @private
	   */
	  transformOption(option, resolved) {
	    const result = {
	      name: option.name,
	      type: option.type,
	    };

	    if ('value' in option) result.value = option.value;
	    if ('options' in option) result.options = option.options.map(opt => this.transformOption(opt, resolved));

	    if (resolved) {
	      const user = resolved.users?.[option.value];
	      if (user) result.user = this.client.users._add(user);

	      const member = resolved.members?.[option.value];
	      if (member) result.member = this.guild?.members._add({ user, ...member }) ?? member;

	      const channel = resolved.channels?.[option.value];
	      if (channel) result.channel = this.client.channels._add(channel, this.guild) ?? channel;

	      const role = resolved.roles?.[option.value];
	      if (role) result.role = this.guild?.roles._add(role) ?? role;

	      const attachment = resolved.attachments?.[option.value];
	      if (attachment) result.attachment = new Attachment(attachment);
	    }

	    return result;
	  }

	  // These are here only for documentation purposes - they are implemented by InteractionResponses
	  /* eslint-disable no-empty-function */
	  deferReply() {}
	  reply() {}
	  fetchReply() {}
	  editReply() {}
	  deleteReply() {}
	  followUp() {}
	  showModal() {}
	  sendPremiumRequired() {}
	  awaitModalSubmit() {}
	}

	InteractionResponses.applyToClass(CommandInteraction, ['deferUpdate', 'update']);

	CommandInteraction_1 = CommandInteraction;
	return CommandInteraction_1;
}

var ChatInputCommandInteraction_1;
var hasRequiredChatInputCommandInteraction;

function requireChatInputCommandInteraction () {
	if (hasRequiredChatInputCommandInteraction) return ChatInputCommandInteraction_1;
	hasRequiredChatInputCommandInteraction = 1;

	const CommandInteraction = requireCommandInteraction();
	const CommandInteractionOptionResolver = requireCommandInteractionOptionResolver();
	const { transformResolved } = requireUtil();

	/**
	 * Represents a command interaction.
	 * @extends {CommandInteraction}
	 */
	class ChatInputCommandInteraction extends CommandInteraction {
	  constructor(client, data) {
	    super(client, data);

	    /**
	     * The options passed to the command.
	     * @type {CommandInteractionOptionResolver}
	     */
	    this.options = new CommandInteractionOptionResolver(
	      this.client,
	      data.data.options?.map(option => this.transformOption(option, data.data.resolved)) ?? [],
	      transformResolved({ client: this.client, guild: this.guild, channel: this.channel }, data.data.resolved),
	    );
	  }

	  /**
	   * Returns a string representation of the command interaction.
	   * This can then be copied by a user and executed again in a new command while keeping the option order.
	   * @returns {string}
	   */
	  toString() {
	    const properties = [
	      this.commandName,
	      this.options._group,
	      this.options._subcommand,
	      ...this.options._hoistedOptions.map(option => `${option.name}:${option.value}`),
	    ];
	    return `/${properties.filter(Boolean).join(' ')}`;
	  }
	}

	ChatInputCommandInteraction_1 = ChatInputCommandInteraction;
	return ChatInputCommandInteraction_1;
}

var MentionableSelectMenuInteraction_1;
var hasRequiredMentionableSelectMenuInteraction;

function requireMentionableSelectMenuInteraction () {
	if (hasRequiredMentionableSelectMenuInteraction) return MentionableSelectMenuInteraction_1;
	hasRequiredMentionableSelectMenuInteraction = 1;

	const { Collection } = requireDist$3();
	const MessageComponentInteraction = requireMessageComponentInteraction();
	const Events = requireEvents();

	/**
	 * Represents a {@link ComponentType.MentionableSelect} select menu interaction.
	 * @extends {MessageComponentInteraction}
	 */
	class MentionableSelectMenuInteraction extends MessageComponentInteraction {
	  constructor(client, data) {
	    super(client, data);
	    const { resolved, values } = data.data;
	    const { members, users, roles } = resolved ?? {};

	    /**
	     * An array of the selected user and role ids
	     * @type {Snowflake[]}
	     */
	    this.values = values ?? [];

	    /**
	     * Collection of the selected users
	     * @type {Collection<Snowflake, User>}
	     */
	    this.users = new Collection();

	    /**
	     * Collection of the selected users
	     * @type {Collection<Snowflake, GuildMember|APIGuildMember>}
	     */
	    this.members = new Collection();

	    /**
	     * Collection of the selected roles
	     * @type {Collection<Snowflake, Role|APIRole>}
	     */
	    this.roles = new Collection();

	    if (members) {
	      for (const [id, member] of Object.entries(members)) {
	        const user = users[id];
	        if (!user) {
	          this.client.emit(
	            Events.Debug,
	            `[MentionableSelectMenuInteraction] Received a member without a user, skipping ${id}`,
	          );

	          continue;
	        }

	        this.members.set(id, this.guild?.members._add({ user, ...member }) ?? { user, ...member });
	      }
	    }

	    if (users) {
	      for (const user of Object.values(users)) {
	        this.users.set(user.id, this.client.users._add(user));
	      }
	    }

	    if (roles) {
	      for (const role of Object.values(roles)) {
	        this.roles.set(role.id, this.guild?.roles._add(role) ?? role);
	      }
	    }
	  }
	}

	MentionableSelectMenuInteraction_1 = MentionableSelectMenuInteraction;
	return MentionableSelectMenuInteraction_1;
}

var ContextMenuCommandInteraction_1;
var hasRequiredContextMenuCommandInteraction;

function requireContextMenuCommandInteraction () {
	if (hasRequiredContextMenuCommandInteraction) return ContextMenuCommandInteraction_1;
	hasRequiredContextMenuCommandInteraction = 1;

	const { lazy } = requireDist$7();
	const { ApplicationCommandOptionType } = requireV10$6();
	const CommandInteraction = requireCommandInteraction();
	const CommandInteractionOptionResolver = requireCommandInteractionOptionResolver();
	const { transformResolved } = requireUtil();

	const getMessage = lazy(() => requireMessage().Message);

	/**
	 * Represents a context menu interaction.
	 * @extends {CommandInteraction}
	 */
	class ContextMenuCommandInteraction extends CommandInteraction {
	  constructor(client, data) {
	    super(client, data);
	    /**
	     * The target of the interaction, parsed into options
	     * @type {CommandInteractionOptionResolver}
	     */
	    this.options = new CommandInteractionOptionResolver(
	      this.client,
	      this.resolveContextMenuOptions(data.data),
	      transformResolved({ client: this.client, guild: this.guild, channel: this.channel }, data.data.resolved),
	    );

	    /**
	     * The id of the target of this interaction
	     * @type {Snowflake}
	     */
	    this.targetId = data.data.target_id;
	  }

	  /**
	   * Resolves and transforms options received from the API for a context menu interaction.
	   * @param {APIApplicationCommandInteractionData} data The interaction data
	   * @returns {CommandInteractionOption[]}
	   * @private
	   */
	  resolveContextMenuOptions({ target_id, resolved }) {
	    const result = [];

	    if (resolved.users?.[target_id]) {
	      result.push(
	        this.transformOption({ name: 'user', type: ApplicationCommandOptionType.User, value: target_id }, resolved),
	      );
	    }

	    if (resolved.messages?.[target_id]) {
	      result.push({
	        name: 'message',
	        type: '_MESSAGE',
	        value: target_id,
	        message:
	          this.channel?.messages._add(resolved.messages[target_id]) ??
	          new (getMessage())(this.client, resolved.messages[target_id]),
	      });
	    }

	    return result;
	  }
	}

	ContextMenuCommandInteraction_1 = ContextMenuCommandInteraction;
	return ContextMenuCommandInteraction_1;
}

var MessageContextMenuCommandInteraction_1;
var hasRequiredMessageContextMenuCommandInteraction;

function requireMessageContextMenuCommandInteraction () {
	if (hasRequiredMessageContextMenuCommandInteraction) return MessageContextMenuCommandInteraction_1;
	hasRequiredMessageContextMenuCommandInteraction = 1;

	const ContextMenuCommandInteraction = requireContextMenuCommandInteraction();

	/**
	 * Represents a message context menu interaction.
	 * @extends {ContextMenuCommandInteraction}
	 */
	class MessageContextMenuCommandInteraction extends ContextMenuCommandInteraction {
	  /**
	   * The message this interaction was sent from
	   * @type {Message|APIMessage}
	   * @readonly
	   */
	  get targetMessage() {
	    return this.options.getMessage('message');
	  }
	}

	MessageContextMenuCommandInteraction_1 = MessageContextMenuCommandInteraction;
	return MessageContextMenuCommandInteraction_1;
}

var ModalSubmitFields_1;
var hasRequiredModalSubmitFields;

function requireModalSubmitFields () {
	if (hasRequiredModalSubmitFields) return ModalSubmitFields_1;
	hasRequiredModalSubmitFields = 1;

	const { Collection } = requireDist$3();
	const { ComponentType } = requireV10$6();
	const { DiscordjsTypeError, ErrorCodes } = requireErrors$1();

	/**
	 * Represents the serialized fields from a modal submit interaction
	 */
	class ModalSubmitFields {
	  constructor(components) {
	    /**
	     * The components within the modal
	     * @type {ActionRowModalData[]}
	     */
	    this.components = components;

	    /**
	     * The extracted fields from the modal
	     * @type {Collection<string, ModalData>}
	     */
	    this.fields = components.reduce((accumulator, next) => {
	      next.components.forEach(component => accumulator.set(component.customId, component));
	      return accumulator;
	    }, new Collection());
	  }

	  /**
	   * Gets a field given a custom id from a component
	   * @param {string} customId The custom id of the component
	   * @param {ComponentType} [type] The type of the component
	   * @returns {ModalData}
	   */
	  getField(customId, type) {
	    const field = this.fields.get(customId);
	    if (!field) throw new DiscordjsTypeError(ErrorCodes.ModalSubmitInteractionFieldNotFound, customId);

	    if (type !== undefined && type !== field.type) {
	      throw new DiscordjsTypeError(ErrorCodes.ModalSubmitInteractionFieldType, customId, field.type, type);
	    }

	    return field;
	  }

	  /**
	   * Gets the value of a text input component given a custom id
	   * @param {string} customId The custom id of the text input component
	   * @returns {string}
	   */
	  getTextInputValue(customId) {
	    return this.getField(customId, ComponentType.TextInput).value;
	  }
	}

	ModalSubmitFields_1 = ModalSubmitFields;
	return ModalSubmitFields_1;
}

var ModalSubmitInteraction_1;
var hasRequiredModalSubmitInteraction;

function requireModalSubmitInteraction () {
	if (hasRequiredModalSubmitInteraction) return ModalSubmitInteraction_1;
	hasRequiredModalSubmitInteraction = 1;

	const { lazy } = requireDist$7();
	const BaseInteraction = requireBaseInteraction();
	const InteractionWebhook = requireInteractionWebhook();
	const ModalSubmitFields = requireModalSubmitFields();
	const InteractionResponses = requireInteractionResponses();

	const getMessage = lazy(() => requireMessage().Message);

	/**
	 * @typedef {Object} ModalData
	 * @property {string} value The value of the field
	 * @property {ComponentType} type The component type of the field
	 * @property {string} customId The custom id of the field
	 */

	/**
	 * @typedef {Object} ActionRowModalData
	 * @property {ModalData[]} components The components of this action row
	 * @property {ComponentType} type The component type of the action row
	 */

	/**
	 * Represents a modal interaction
	 * @extends {BaseInteraction}
	 * @implements {InteractionResponses}
	 */
	class ModalSubmitInteraction extends BaseInteraction {
	  constructor(client, data) {
	    super(client, data);
	    /**
	     * The custom id of the modal.
	     * @type {string}
	     */
	    this.customId = data.data.custom_id;

	    if ('message' in data) {
	      /**
	       * The message associated with this interaction
	       * @type {?Message}
	       */
	      this.message = this.channel?.messages._add(data.message) ?? new (getMessage())(this.client, data.message);
	    } else {
	      this.message = null;
	    }

	    /**
	     * The components within the modal
	     * @type {ActionRowModalData[]}
	     */
	    this.components = data.data.components?.map(component => ModalSubmitInteraction.transformComponent(component));

	    /**
	     * The fields within the modal
	     * @type {ModalSubmitFields}
	     */
	    this.fields = new ModalSubmitFields(this.components);

	    /**
	     * Whether the reply to this interaction has been deferred
	     * @type {boolean}
	     */
	    this.deferred = false;

	    /**
	     * Whether this interaction has already been replied to
	     * @type {boolean}
	     */
	    this.replied = false;

	    /**
	     * Whether the reply to this interaction is ephemeral
	     * @type {?boolean}
	     */
	    this.ephemeral = null;

	    /**
	     * An associated interaction webhook, can be used to further interact with this interaction
	     * @type {InteractionWebhook}
	     */
	    this.webhook = new InteractionWebhook(this.client, this.applicationId, this.token);
	  }

	  /**
	   * Transforms component data to discord.js-compatible data
	   * @param {*} rawComponent The data to transform
	   * @returns {ModalData[]}
	   */
	  static transformComponent(rawComponent) {
	    return rawComponent.components
	      ? {
	          type: rawComponent.type,
	          components: rawComponent.components.map(component => this.transformComponent(component)),
	        }
	      : {
	          value: rawComponent.value,
	          type: rawComponent.type,
	          customId: rawComponent.custom_id,
	        };
	  }

	  /**
	   * Whether this is from a {@link MessageComponentInteraction}.
	   * @returns {boolean}
	   */
	  isFromMessage() {
	    return Boolean(this.message);
	  }

	  // These are here only for documentation purposes - they are implemented by InteractionResponses
	  /* eslint-disable no-empty-function */
	  deferReply() {}
	  reply() {}
	  fetchReply() {}
	  editReply() {}
	  deleteReply() {}
	  followUp() {}
	  deferUpdate() {}
	  update() {}
	  sendPremiumRequired() {}
	}

	InteractionResponses.applyToClass(ModalSubmitInteraction, 'showModal');

	ModalSubmitInteraction_1 = ModalSubmitInteraction;
	return ModalSubmitInteraction_1;
}

var RoleSelectMenuInteraction_1;
var hasRequiredRoleSelectMenuInteraction;

function requireRoleSelectMenuInteraction () {
	if (hasRequiredRoleSelectMenuInteraction) return RoleSelectMenuInteraction_1;
	hasRequiredRoleSelectMenuInteraction = 1;

	const { Collection } = requireDist$3();
	const MessageComponentInteraction = requireMessageComponentInteraction();

	/**
	 * Represents a {@link ComponentType.RoleSelect} select menu interaction.
	 * @extends {MessageComponentInteraction}
	 */
	class RoleSelectMenuInteraction extends MessageComponentInteraction {
	  constructor(client, data) {
	    super(client, data);
	    const { resolved, values } = data.data;

	    /**
	     * An array of the selected role ids
	     * @type {Snowflake[]}
	     */
	    this.values = values ?? [];

	    /**
	     * Collection of the selected roles
	     * @type {Collection<Snowflake, Role|APIRole>}
	     */
	    this.roles = new Collection();

	    for (const role of Object.values(resolved?.roles ?? {})) {
	      this.roles.set(role.id, this.guild?.roles._add(role) ?? role);
	    }
	  }
	}

	RoleSelectMenuInteraction_1 = RoleSelectMenuInteraction;
	return RoleSelectMenuInteraction_1;
}

var StringSelectMenuInteraction_1;
var hasRequiredStringSelectMenuInteraction;

function requireStringSelectMenuInteraction () {
	if (hasRequiredStringSelectMenuInteraction) return StringSelectMenuInteraction_1;
	hasRequiredStringSelectMenuInteraction = 1;

	const MessageComponentInteraction = requireMessageComponentInteraction();

	/**
	 * Represents a {@link ComponentType.StringSelect} select menu interaction.
	 * @extends {MessageComponentInteraction}
	 */
	class StringSelectMenuInteraction extends MessageComponentInteraction {
	  constructor(client, data) {
	    super(client, data);

	    /**
	     * The values selected
	     * @type {string[]}
	     */
	    this.values = data.data.values ?? [];
	  }
	}

	StringSelectMenuInteraction_1 = StringSelectMenuInteraction;
	return StringSelectMenuInteraction_1;
}

var UserContextMenuCommandInteraction_1;
var hasRequiredUserContextMenuCommandInteraction;

function requireUserContextMenuCommandInteraction () {
	if (hasRequiredUserContextMenuCommandInteraction) return UserContextMenuCommandInteraction_1;
	hasRequiredUserContextMenuCommandInteraction = 1;

	const ContextMenuCommandInteraction = requireContextMenuCommandInteraction();

	/**
	 * Represents a user context menu interaction.
	 * @extends {ContextMenuCommandInteraction}
	 */
	class UserContextMenuCommandInteraction extends ContextMenuCommandInteraction {
	  /**
	   * The target user from this interaction
	   * @type {User}
	   * @readonly
	   */
	  get targetUser() {
	    return this.options.getUser('user');
	  }

	  /**
	   * The target member from this interaction
	   * @type {?(GuildMember|APIGuildMember)}
	   * @readonly
	   */
	  get targetMember() {
	    return this.options.getMember('user');
	  }
	}

	UserContextMenuCommandInteraction_1 = UserContextMenuCommandInteraction;
	return UserContextMenuCommandInteraction_1;
}

var UserSelectMenuInteraction_1;
var hasRequiredUserSelectMenuInteraction;

function requireUserSelectMenuInteraction () {
	if (hasRequiredUserSelectMenuInteraction) return UserSelectMenuInteraction_1;
	hasRequiredUserSelectMenuInteraction = 1;

	const { Collection } = requireDist$3();
	const MessageComponentInteraction = requireMessageComponentInteraction();
	const Events = requireEvents();

	/**
	 * Represents a {@link ComponentType.UserSelect} select menu interaction.
	 * @extends {MessageComponentInteraction}
	 */
	class UserSelectMenuInteraction extends MessageComponentInteraction {
	  constructor(client, data) {
	    super(client, data);
	    const { resolved, values } = data.data;

	    /**
	     * An array of the selected user ids
	     * @type {Snowflake[]}
	     */
	    this.values = values ?? [];

	    /**
	     * Collection of the selected users
	     * @type {Collection<Snowflake, User>}
	     */
	    this.users = new Collection();

	    /**
	     * Collection of the selected members
	     * @type {Collection<Snowflake, GuildMember|APIGuildMember>}
	     */
	    this.members = new Collection();

	    for (const user of Object.values(resolved?.users ?? {})) {
	      this.users.set(user.id, this.client.users._add(user));
	    }

	    for (const [id, member] of Object.entries(resolved?.members ?? {})) {
	      const user = resolved.users[id];

	      if (!user) {
	        this.client.emit(Events.Debug, `[UserSelectMenuInteraction] Received a member without a user, skipping ${id}`);
	        continue;
	      }

	      this.members.set(id, this.guild?.members._add({ user, ...member }) ?? { user, ...member });
	    }
	  }
	}

	UserSelectMenuInteraction_1 = UserSelectMenuInteraction;
	return UserSelectMenuInteraction_1;
}

var InteractionCreate;
var hasRequiredInteractionCreate;

function requireInteractionCreate () {
	if (hasRequiredInteractionCreate) return InteractionCreate;
	hasRequiredInteractionCreate = 1;

	const { InteractionType, ComponentType, ApplicationCommandType } = requireV10$6();
	const Action = requireAction();
	const AutocompleteInteraction = requireAutocompleteInteraction();
	const ButtonInteraction = requireButtonInteraction();
	const ChannelSelectMenuInteraction = requireChannelSelectMenuInteraction();
	const ChatInputCommandInteraction = requireChatInputCommandInteraction();
	const MentionableSelectMenuInteraction = requireMentionableSelectMenuInteraction();
	const MessageContextMenuCommandInteraction = requireMessageContextMenuCommandInteraction();
	const ModalSubmitInteraction = requireModalSubmitInteraction();
	const RoleSelectMenuInteraction = requireRoleSelectMenuInteraction();
	const StringSelectMenuInteraction = requireStringSelectMenuInteraction();
	const UserContextMenuCommandInteraction = requireUserContextMenuCommandInteraction();
	const UserSelectMenuInteraction = requireUserSelectMenuInteraction();
	const Events = requireEvents();

	class InteractionCreateAction extends Action {
	  handle(data) {
	    const client = this.client;

	    // Resolve and cache partial channels for Interaction#channel getter
	    const channel = data.channel && this.getChannel(data.channel);

	    // Do not emit this for interactions that cache messages that are non-text-based.
	    let InteractionClass;

	    switch (data.type) {
	      case InteractionType.ApplicationCommand:
	        switch (data.data.type) {
	          case ApplicationCommandType.ChatInput:
	            InteractionClass = ChatInputCommandInteraction;
	            break;
	          case ApplicationCommandType.User:
	            InteractionClass = UserContextMenuCommandInteraction;
	            break;
	          case ApplicationCommandType.Message:
	            if (channel && !channel.isTextBased()) return;
	            InteractionClass = MessageContextMenuCommandInteraction;
	            break;
	          default:
	            client.emit(
	              Events.Debug,
	              `[INTERACTION] Received application command interaction with unknown type: ${data.data.type}`,
	            );
	            return;
	        }
	        break;
	      case InteractionType.MessageComponent:
	        if (channel && !channel.isTextBased()) return;

	        switch (data.data.component_type) {
	          case ComponentType.Button:
	            InteractionClass = ButtonInteraction;
	            break;
	          case ComponentType.StringSelect:
	            InteractionClass = StringSelectMenuInteraction;
	            break;
	          case ComponentType.UserSelect:
	            InteractionClass = UserSelectMenuInteraction;
	            break;
	          case ComponentType.RoleSelect:
	            InteractionClass = RoleSelectMenuInteraction;
	            break;
	          case ComponentType.MentionableSelect:
	            InteractionClass = MentionableSelectMenuInteraction;
	            break;
	          case ComponentType.ChannelSelect:
	            InteractionClass = ChannelSelectMenuInteraction;
	            break;
	          default:
	            client.emit(
	              Events.Debug,
	              `[INTERACTION] Received component interaction with unknown type: ${data.data.component_type}`,
	            );
	            return;
	        }
	        break;
	      case InteractionType.ApplicationCommandAutocomplete:
	        InteractionClass = AutocompleteInteraction;
	        break;
	      case InteractionType.ModalSubmit:
	        InteractionClass = ModalSubmitInteraction;
	        break;
	      default:
	        client.emit(Events.Debug, `[INTERACTION] Received interaction with unknown type: ${data.type}`);
	        return;
	    }

	    const interaction = new InteractionClass(client, data);

	    /**
	     * Emitted when an interaction is created.
	     * @event Client#interactionCreate
	     * @param {BaseInteraction} interaction The interaction which was created
	     */
	    client.emit(Events.InteractionCreate, interaction);
	  }
	}

	InteractionCreate = InteractionCreateAction;
	return InteractionCreate;
}

var InviteCreate;
var hasRequiredInviteCreate;

function requireInviteCreate () {
	if (hasRequiredInviteCreate) return InviteCreate;
	hasRequiredInviteCreate = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class InviteCreateAction extends Action {
	  handle(data) {
	    const client = this.client;
	    const channel = client.channels.cache.get(data.channel_id);
	    const guild = client.guilds.cache.get(data.guild_id);
	    if (!channel) return false;

	    const inviteData = Object.assign(data, { channel, guild });
	    const invite = guild.invites._add(inviteData);

	    /**
	     * Emitted when an invite is created.
	     * <info>This event requires the {@link PermissionFlagsBits.ManageChannels} permission for the channel.</info>
	     * @event Client#inviteCreate
	     * @param {Invite} invite The invite that was created
	     */
	    client.emit(Events.InviteCreate, invite);
	    return { invite };
	  }
	}

	InviteCreate = InviteCreateAction;
	return InviteCreate;
}

var InviteDelete;
var hasRequiredInviteDelete;

function requireInviteDelete () {
	if (hasRequiredInviteDelete) return InviteDelete;
	hasRequiredInviteDelete = 1;

	const Action = requireAction();
	const Invite = requireInvite$2();
	const Events = requireEvents();

	class InviteDeleteAction extends Action {
	  handle(data) {
	    const client = this.client;
	    const channel = client.channels.cache.get(data.channel_id);
	    const guild = client.guilds.cache.get(data.guild_id);
	    if (!channel) return false;

	    const inviteData = Object.assign(data, { channel, guild });
	    const invite = new Invite(client, inviteData);
	    guild.invites.cache.delete(invite.code);

	    /**
	     * Emitted when an invite is deleted.
	     * <info>This event requires the {@link PermissionFlagsBits.ManageChannels} permission for the channel.</info>
	     * @event Client#inviteDelete
	     * @param {Invite} invite The invite that was deleted
	     */
	    client.emit(Events.InviteDelete, invite);
	    return { invite };
	  }
	}

	InviteDelete = InviteDeleteAction;
	return InviteDelete;
}

var MessageCreate;
var hasRequiredMessageCreate;

function requireMessageCreate () {
	if (hasRequiredMessageCreate) return MessageCreate;
	hasRequiredMessageCreate = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class MessageCreateAction extends Action {
	  handle(data) {
	    const client = this.client;
	    const channel = this.getChannel({
	      id: data.channel_id,
	      author: data.author,
	      ...('guild_id' in data && { guild_id: data.guild_id }),
	    });
	    if (channel) {
	      if (!channel.isTextBased()) return {};

	      if (channel.isThread()) {
	        channel.messageCount++;
	        channel.totalMessageSent++;
	      }

	      const existing = channel.messages.cache.get(data.id);
	      if (existing && existing.author?.id !== this.client.user.id) return { message: existing };
	      const message = existing ?? channel.messages._add(data);
	      channel.lastMessageId = data.id;

	      /**
	       * Emitted whenever a message is created.
	       * @event Client#messageCreate
	       * @param {Message} message The created message
	       */
	      client.emit(Events.MessageCreate, message);

	      return { message };
	    }

	    return {};
	  }
	}

	MessageCreate = MessageCreateAction;
	return MessageCreate;
}

var MessageDelete;
var hasRequiredMessageDelete;

function requireMessageDelete () {
	if (hasRequiredMessageDelete) return MessageDelete;
	hasRequiredMessageDelete = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class MessageDeleteAction extends Action {
	  handle(data) {
	    const client = this.client;
	    const channel = this.getChannel({ id: data.channel_id, ...('guild_id' in data && { guild_id: data.guild_id }) });
	    let message;
	    if (channel) {
	      if (!channel.isTextBased()) return {};

	      if (channel.isThread()) channel.messageCount--;

	      message = this.getMessage(data, channel);
	      if (message) {
	        channel.messages.cache.delete(message.id);
	        /**
	         * Emitted whenever a message is deleted.
	         * @event Client#messageDelete
	         * @param {Message} message The deleted message
	         */
	        client.emit(Events.MessageDelete, message);
	      }
	    }

	    return { message };
	  }
	}

	MessageDelete = MessageDeleteAction;
	return MessageDelete;
}

var MessageDeleteBulk;
var hasRequiredMessageDeleteBulk;

function requireMessageDeleteBulk () {
	if (hasRequiredMessageDeleteBulk) return MessageDeleteBulk;
	hasRequiredMessageDeleteBulk = 1;

	const { Collection } = requireDist$3();
	const Action = requireAction();
	const Events = requireEvents();

	class MessageDeleteBulkAction extends Action {
	  handle(data) {
	    const client = this.client;
	    const channel = client.channels.cache.get(data.channel_id);

	    if (channel) {
	      if (!channel.isTextBased()) return {};

	      if (channel.isThread()) channel.messageCount -= data.ids.length;

	      const ids = data.ids;
	      const messages = new Collection();
	      for (const id of ids) {
	        const message = this.getMessage(
	          {
	            id,
	            guild_id: data.guild_id,
	          },
	          channel,
	          false,
	        );
	        if (message) {
	          messages.set(message.id, message);
	          channel.messages.cache.delete(id);
	        }
	      }

	      /**
	       * Emitted whenever messages are deleted in bulk.
	       * @event Client#messageDeleteBulk
	       * @param {Collection<Snowflake, Message>} messages The deleted messages, mapped by their id
	       * @param {GuildTextBasedChannel} channel The channel that the messages were deleted in
	       */
	      if (messages.size > 0) client.emit(Events.MessageBulkDelete, messages, channel);
	      return { messages };
	    }
	    return {};
	  }
	}

	MessageDeleteBulk = MessageDeleteBulkAction;
	return MessageDeleteBulk;
}

var MessagePollVoteAdd;
var hasRequiredMessagePollVoteAdd;

function requireMessagePollVoteAdd () {
	if (hasRequiredMessagePollVoteAdd) return MessagePollVoteAdd;
	hasRequiredMessagePollVoteAdd = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class MessagePollVoteAddAction extends Action {
	  handle(data) {
	    const channel = this.getChannel({ id: data.channel_id, ...('guild_id' in data && { guild_id: data.guild_id }) });
	    if (!channel?.isTextBased()) return false;

	    const message = this.getMessage(data, channel);
	    if (!message) return false;

	    const { poll } = message;

	    const answer = poll?.answers.get(data.answer_id);
	    if (!answer) return false;

	    answer.voteCount++;

	    /**
	     * Emitted whenever a user votes in a poll.
	     * @event Client#messagePollVoteAdd
	     * @param {PollAnswer} pollAnswer The answer that was voted on
	     * @param {Snowflake} userId The id of the user that voted
	     */
	    this.client.emit(Events.MessagePollVoteAdd, answer, data.user_id);

	    return { poll };
	  }
	}

	MessagePollVoteAdd = MessagePollVoteAddAction;
	return MessagePollVoteAdd;
}

var MessagePollVoteRemove;
var hasRequiredMessagePollVoteRemove;

function requireMessagePollVoteRemove () {
	if (hasRequiredMessagePollVoteRemove) return MessagePollVoteRemove;
	hasRequiredMessagePollVoteRemove = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class MessagePollVoteRemoveAction extends Action {
	  handle(data) {
	    const channel = this.getChannel({ id: data.channel_id, ...('guild_id' in data && { guild_id: data.guild_id }) });
	    if (!channel?.isTextBased()) return false;

	    const message = this.getMessage(data, channel);
	    if (!message) return false;

	    const { poll } = message;

	    const answer = poll?.answers.get(data.answer_id);
	    if (!answer) return false;

	    answer.voteCount--;

	    /**
	     * Emitted whenever a user removes their vote in a poll.
	     * @event Client#messagePollVoteRemove
	     * @param {PollAnswer} pollAnswer The answer where the vote was removed
	     * @param {Snowflake} userId The id of the user that removed their vote
	     */
	    this.client.emit(Events.MessagePollVoteRemove, answer, data.user_id);

	    return { poll };
	  }
	}

	MessagePollVoteRemove = MessagePollVoteRemoveAction;
	return MessagePollVoteRemove;
}

var MessageReactionAdd_1;
var hasRequiredMessageReactionAdd;

function requireMessageReactionAdd () {
	if (hasRequiredMessageReactionAdd) return MessageReactionAdd_1;
	hasRequiredMessageReactionAdd = 1;

	const Action = requireAction();
	const Events = requireEvents();
	const Partials = requirePartials();

	/*
	{ user_id: 'id',
	     message_id: 'id',
	     emoji: { name: '�', id: null },
	     channel_id: 'id',
	     burst: boolean
	     // If originating from a guild
	     guild_id: 'id',
	     member: { ..., user: { ... } } }
	*/

	class MessageReactionAdd extends Action {
	  handle(data, fromStructure = false) {
	    if (!data.emoji) return false;

	    const user = this.getUserFromMember(data);
	    if (!user) return false;

	    // Verify channel
	    const channel = this.getChannel({
	      id: data.channel_id,
	      ...('guild_id' in data && { guild_id: data.guild_id }),
	      user_id: data.user_id,
	      ...this.spreadInjectedData(data),
	    });

	    if (!channel?.isTextBased()) return false;

	    // Verify message
	    const message = this.getMessage(data, channel);
	    if (!message) return false;

	    // Verify reaction
	    const includePartial = this.client.options.partials.includes(Partials.Reaction);
	    if (message.partial && !includePartial) return false;
	    const reaction = message.reactions._add({
	      emoji: data.emoji,
	      count: message.partial ? null : 0,
	      me: user.id === this.client.user.id,
	      burst_colors: data.burst_colors,
	    });
	    if (!reaction) return false;
	    reaction._add(user, data.burst);
	    if (fromStructure) return { message, reaction, user };
	    /**
	     * Provides additional information about altered reaction
	     * @typedef {Object} MessageReactionEventDetails
	     * @property {boolean} burst Determines whether a super reaction was used
	     */
	    /**
	     * Emitted whenever a reaction is added to a cached message.
	     * @event Client#messageReactionAdd
	     * @param {MessageReaction} messageReaction The reaction object
	     * @param {User} user The user that applied the guild or reaction emoji
	     * @param {MessageReactionEventDetails} details Details of adding the reaction
	     */
	    this.client.emit(Events.MessageReactionAdd, reaction, user, { burst: data.burst });

	    return { message, reaction, user };
	  }
	}

	MessageReactionAdd_1 = MessageReactionAdd;
	return MessageReactionAdd_1;
}

var MessageReactionRemove_1;
var hasRequiredMessageReactionRemove;

function requireMessageReactionRemove () {
	if (hasRequiredMessageReactionRemove) return MessageReactionRemove_1;
	hasRequiredMessageReactionRemove = 1;

	const Action = requireAction();
	const Events = requireEvents();

	/*
	{ user_id: 'id',
	     message_id: 'id',
	     emoji: { name: '�', id: null },
	     channel_id: 'id',
	     guild_id: 'id' }
	*/

	class MessageReactionRemove extends Action {
	  handle(data) {
	    if (!data.emoji) return false;

	    const user = this.getUser(data);
	    if (!user) return false;

	    // Verify channel
	    const channel = this.getChannel({
	      id: data.channel_id,
	      ...('guild_id' in data && { guild_id: data.guild_id }),
	      user_id: data.user_id,
	    });
	    if (!channel?.isTextBased()) return false;

	    // Verify message
	    const message = this.getMessage(data, channel);
	    if (!message) return false;

	    // Verify reaction
	    const reaction = this.getReaction(data, message, user);
	    if (!reaction) return false;
	    reaction._remove(user, data.burst);
	    /**
	     * Emitted whenever a reaction is removed from a cached message.
	     * @event Client#messageReactionRemove
	     * @param {MessageReaction} messageReaction The reaction object
	     * @param {User} user The user whose emoji or reaction emoji was removed
	     * @param {MessageReactionEventDetails} details Details of removing the reaction
	     */
	    this.client.emit(Events.MessageReactionRemove, reaction, user, { burst: data.burst });

	    return { message, reaction, user };
	  }
	}

	MessageReactionRemove_1 = MessageReactionRemove;
	return MessageReactionRemove_1;
}

var MessageReactionRemoveAll_1;
var hasRequiredMessageReactionRemoveAll;

function requireMessageReactionRemoveAll () {
	if (hasRequiredMessageReactionRemoveAll) return MessageReactionRemoveAll_1;
	hasRequiredMessageReactionRemoveAll = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class MessageReactionRemoveAll extends Action {
	  handle(data) {
	    // Verify channel
	    const channel = this.getChannel({ id: data.channel_id, ...('guild_id' in data && { guild_id: data.guild_id }) });
	    if (!channel?.isTextBased()) return false;

	    // Verify message
	    const message = this.getMessage(data, channel);
	    if (!message) return false;

	    // Copy removed reactions to emit for the event.
	    const removed = message.reactions.cache.clone();

	    message.reactions.cache.clear();
	    this.client.emit(Events.MessageReactionRemoveAll, message, removed);

	    return { message };
	  }
	}

	/**
	 * Emitted whenever all reactions are removed from a cached message.
	 * @event Client#messageReactionRemoveAll
	 * @param {Message} message The message the reactions were removed from
	 * @param {Collection<string|Snowflake, MessageReaction>} reactions The cached message reactions that were removed.
	 */

	MessageReactionRemoveAll_1 = MessageReactionRemoveAll;
	return MessageReactionRemoveAll_1;
}

var MessageReactionRemoveEmoji_1;
var hasRequiredMessageReactionRemoveEmoji;

function requireMessageReactionRemoveEmoji () {
	if (hasRequiredMessageReactionRemoveEmoji) return MessageReactionRemoveEmoji_1;
	hasRequiredMessageReactionRemoveEmoji = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class MessageReactionRemoveEmoji extends Action {
	  handle(data) {
	    const channel = this.getChannel({ id: data.channel_id, ...('guild_id' in data && { guild_id: data.guild_id }) });
	    if (!channel?.isTextBased()) return false;

	    const message = this.getMessage(data, channel);
	    if (!message) return false;

	    const reaction = this.getReaction(data, message);
	    if (!reaction) return false;
	    if (!message.partial) message.reactions.cache.delete(reaction.emoji.id ?? reaction.emoji.name);

	    /**
	     * Emitted when a bot removes an emoji reaction from a cached message.
	     * @event Client#messageReactionRemoveEmoji
	     * @param {MessageReaction} reaction The reaction that was removed
	     */
	    this.client.emit(Events.MessageReactionRemoveEmoji, reaction);
	    return { reaction };
	  }
	}

	MessageReactionRemoveEmoji_1 = MessageReactionRemoveEmoji;
	return MessageReactionRemoveEmoji_1;
}

var MessageUpdate;
var hasRequiredMessageUpdate;

function requireMessageUpdate () {
	if (hasRequiredMessageUpdate) return MessageUpdate;
	hasRequiredMessageUpdate = 1;

	const Action = requireAction();

	class MessageUpdateAction extends Action {
	  handle(data) {
	    const channel = this.getChannel({ id: data.channel_id, ...('guild_id' in data && { guild_id: data.guild_id }) });
	    if (channel) {
	      if (!channel.isTextBased()) return {};

	      const { id, channel_id, guild_id, author, timestamp, type } = data;
	      const message = this.getMessage({ id, channel_id, guild_id, author, timestamp, type }, channel);
	      if (message) {
	        const old = message._update(data);
	        return {
	          old,
	          updated: message,
	        };
	      }
	    }

	    return {};
	  }
	}

	MessageUpdate = MessageUpdateAction;
	return MessageUpdate;
}

var PresenceUpdate;
var hasRequiredPresenceUpdate;

function requirePresenceUpdate () {
	if (hasRequiredPresenceUpdate) return PresenceUpdate;
	hasRequiredPresenceUpdate = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class PresenceUpdateAction extends Action {
	  handle(data) {
	    let user = this.client.users.cache.get(data.user.id);
	    if (!user && data.user.username) user = this.client.users._add(data.user);
	    if (!user) return;

	    if (data.user.username) {
	      if (!user._equals(data.user)) this.client.actions.UserUpdate.handle(data.user);
	    }

	    const guild = this.client.guilds.cache.get(data.guild_id);
	    if (!guild) return;

	    const oldPresence = guild.presences.cache.get(user.id)?._clone() ?? null;
	    let member = guild.members.cache.get(user.id);
	    if (!member && data.status !== 'offline') {
	      member = guild.members._add({
	        user,
	        deaf: false,
	        mute: false,
	      });
	      this.client.emit(Events.GuildMemberAvailable, member);
	    }
	    const newPresence = guild.presences._add(Object.assign(data, { guild }));
	    if (this.client.listenerCount(Events.PresenceUpdate) && !newPresence.equals(oldPresence)) {
	      /**
	       * Emitted whenever a guild member's presence (e.g. status, activity) is changed.
	       * @event Client#presenceUpdate
	       * @param {?Presence} oldPresence The presence before the update, if one at all
	       * @param {Presence} newPresence The presence after the update
	       */
	      this.client.emit(Events.PresenceUpdate, oldPresence, newPresence);
	    }
	  }
	}

	PresenceUpdate = PresenceUpdateAction;
	return PresenceUpdate;
}

var StageInstanceCreate;
var hasRequiredStageInstanceCreate;

function requireStageInstanceCreate () {
	if (hasRequiredStageInstanceCreate) return StageInstanceCreate;
	hasRequiredStageInstanceCreate = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class StageInstanceCreateAction extends Action {
	  handle(data) {
	    const client = this.client;
	    const channel = this.getChannel({ id: data.channel_id, guild_id: data.guild_id });

	    if (channel) {
	      const stageInstance = channel.guild.stageInstances._add(data);

	      /**
	       * Emitted whenever a stage instance is created.
	       * @event Client#stageInstanceCreate
	       * @param {StageInstance} stageInstance The created stage instance
	       */
	      client.emit(Events.StageInstanceCreate, stageInstance);

	      return { stageInstance };
	    }

	    return {};
	  }
	}

	StageInstanceCreate = StageInstanceCreateAction;
	return StageInstanceCreate;
}

var StageInstanceDelete;
var hasRequiredStageInstanceDelete;

function requireStageInstanceDelete () {
	if (hasRequiredStageInstanceDelete) return StageInstanceDelete;
	hasRequiredStageInstanceDelete = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class StageInstanceDeleteAction extends Action {
	  handle(data) {
	    const client = this.client;
	    const channel = this.getChannel({ id: data.channel_id, guild_id: data.guild_id });

	    if (channel) {
	      const stageInstance = channel.guild.stageInstances._add(data);
	      if (stageInstance) {
	        channel.guild.stageInstances.cache.delete(stageInstance.id);

	        /**
	         * Emitted whenever a stage instance is deleted.
	         * @event Client#stageInstanceDelete
	         * @param {StageInstance} stageInstance The deleted stage instance
	         */
	        client.emit(Events.StageInstanceDelete, stageInstance);

	        return { stageInstance };
	      }
	    }

	    return {};
	  }
	}

	StageInstanceDelete = StageInstanceDeleteAction;
	return StageInstanceDelete;
}

var StageInstanceUpdate;
var hasRequiredStageInstanceUpdate;

function requireStageInstanceUpdate () {
	if (hasRequiredStageInstanceUpdate) return StageInstanceUpdate;
	hasRequiredStageInstanceUpdate = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class StageInstanceUpdateAction extends Action {
	  handle(data) {
	    const client = this.client;
	    const channel = this.getChannel({ id: data.channel_id, guild_id: data.guild_id });

	    if (channel) {
	      const oldStageInstance = channel.guild.stageInstances.cache.get(data.id)?._clone() ?? null;
	      const newStageInstance = channel.guild.stageInstances._add(data);

	      /**
	       * Emitted whenever a stage instance gets updated - e.g. change in topic or privacy level
	       * @event Client#stageInstanceUpdate
	       * @param {?StageInstance} oldStageInstance The stage instance before the update
	       * @param {StageInstance} newStageInstance The stage instance after the update
	       */
	      client.emit(Events.StageInstanceUpdate, oldStageInstance, newStageInstance);

	      return { oldStageInstance, newStageInstance };
	    }

	    return {};
	  }
	}

	StageInstanceUpdate = StageInstanceUpdateAction;
	return StageInstanceUpdate;
}

var ThreadCreate;
var hasRequiredThreadCreate;

function requireThreadCreate () {
	if (hasRequiredThreadCreate) return ThreadCreate;
	hasRequiredThreadCreate = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class ThreadCreateAction extends Action {
	  handle(data) {
	    const client = this.client;
	    const existing = client.channels.cache.has(data.id);
	    const thread = client.channels._add(data);
	    if (!existing && thread) {
	      /**
	       * Emitted whenever a thread is created or when the client user is added to a thread.
	       * @event Client#threadCreate
	       * @param {ThreadChannel} thread The thread that was created
	       * @param {boolean} newlyCreated Whether the thread was newly created
	       */
	      client.emit(Events.ThreadCreate, thread, data.newly_created ?? false);
	    }
	    return { thread };
	  }
	}

	ThreadCreate = ThreadCreateAction;
	return ThreadCreate;
}

var ThreadDelete;
var hasRequiredThreadDelete;

function requireThreadDelete () {
	if (hasRequiredThreadDelete) return ThreadDelete;
	hasRequiredThreadDelete = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class ThreadDeleteAction extends Action {
	  handle(data) {
	    const client = this.client;
	    const thread = client.channels.cache.get(data.id);

	    if (thread) {
	      client.channels._remove(thread.id);

	      /**
	       * Emitted whenever a thread is deleted.
	       * @event Client#threadDelete
	       * @param {ThreadChannel} thread The thread that was deleted
	       */
	      client.emit(Events.ThreadDelete, thread);
	    }

	    return { thread };
	  }
	}

	ThreadDelete = ThreadDeleteAction;
	return ThreadDelete;
}

var ThreadListSync;
var hasRequiredThreadListSync;

function requireThreadListSync () {
	if (hasRequiredThreadListSync) return ThreadListSync;
	hasRequiredThreadListSync = 1;

	const { Collection } = requireDist$3();
	const Action = requireAction();
	const Events = requireEvents();

	class ThreadListSyncAction extends Action {
	  handle(data) {
	    const client = this.client;

	    const guild = client.guilds.cache.get(data.guild_id);
	    if (!guild) return {};

	    if (data.channel_ids) {
	      for (const id of data.channel_ids) {
	        const channel = client.channels.resolve(id);
	        if (channel) this.removeStale(channel);
	      }
	    } else {
	      for (const channel of guild.channels.cache.values()) {
	        this.removeStale(channel);
	      }
	    }

	    const syncedThreads = data.threads.reduce((coll, rawThread) => {
	      const thread = client.channels._add(rawThread);
	      return coll.set(thread.id, thread);
	    }, new Collection());

	    for (const rawMember of Object.values(data.members)) {
	      // Discord sends the thread id as id in this object
	      const thread = client.channels.cache.get(rawMember.id);
	      if (thread) {
	        thread.members._add(rawMember);
	      }
	    }

	    /**
	     * Emitted whenever the client user gains access to a text or news channel that contains threads
	     * @event Client#threadListSync
	     * @param {Collection<Snowflake, ThreadChannel>} threads The threads that were synced
	     * @param {Guild} guild The guild that the threads were synced in
	     */
	    client.emit(Events.ThreadListSync, syncedThreads, guild);

	    return {
	      syncedThreads,
	    };
	  }

	  removeStale(channel) {
	    channel.threads?.cache.forEach(thread => {
	      if (!thread.archived) {
	        this.client.channels._remove(thread.id);
	      }
	    });
	  }
	}

	ThreadListSync = ThreadListSyncAction;
	return ThreadListSync;
}

var ThreadMemberUpdate;
var hasRequiredThreadMemberUpdate;

function requireThreadMemberUpdate () {
	if (hasRequiredThreadMemberUpdate) return ThreadMemberUpdate;
	hasRequiredThreadMemberUpdate = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class ThreadMemberUpdateAction extends Action {
	  handle(data) {
	    const client = this.client;
	    // Discord sends the thread id as id in this object
	    const thread = client.channels.cache.get(data.id);
	    if (thread) {
	      const member = thread.members.cache.get(data.user_id);
	      if (!member) {
	        const newMember = thread.members._add(data);
	        return { newMember };
	      }
	      const old = member._update(data);
	      /**
	       * Emitted whenever the client user's thread member is updated.
	       * @event Client#threadMemberUpdate
	       * @param {ThreadMember} oldMember The member before the update
	       * @param {ThreadMember} newMember The member after the update
	       */
	      client.emit(Events.ThreadMemberUpdate, old, member);
	    }
	    return {};
	  }
	}

	ThreadMemberUpdate = ThreadMemberUpdateAction;
	return ThreadMemberUpdate;
}

var ThreadMembersUpdate;
var hasRequiredThreadMembersUpdate;

function requireThreadMembersUpdate () {
	if (hasRequiredThreadMembersUpdate) return ThreadMembersUpdate;
	hasRequiredThreadMembersUpdate = 1;

	const { Collection } = requireDist$3();
	const Action = requireAction();
	const Events = requireEvents();

	class ThreadMembersUpdateAction extends Action {
	  handle(data) {
	    const client = this.client;
	    const thread = client.channels.cache.get(data.id);
	    if (thread) {
	      thread.memberCount = data.member_count;
	      const addedMembers = new Collection();
	      const removedMembers = new Collection();

	      data.added_members?.reduce(
	        (_addedMembers, addedMember) => _addedMembers.set(addedMember.user_id, thread.members._add(addedMember)),
	        addedMembers,
	      );

	      data.removed_member_ids?.reduce((removedMembersIds, removedMembersId) => {
	        const threadMember = this.getThreadMember(removedMembersId, thread.members);
	        if (threadMember) removedMembersIds.set(threadMember.id, threadMember);
	        thread.members.cache.delete(removedMembersId);
	        return removedMembersIds;
	      }, removedMembers);

	      if (addedMembers.size === 0 && removedMembers.size === 0) {
	        // Uncached thread member(s) left.
	        return {};
	      }

	      /**
	       * Emitted whenever members are added or removed from a thread.
	       * <info>This event requires the {@link GatewayIntentBits.GuildMembers} privileged gateway intent.</info>
	       * @event Client#threadMembersUpdate
	       * @param {Collection<Snowflake, ThreadMember>} addedMembers The members that were added
	       * @param {Collection<Snowflake, ThreadMember>} removedMembers The members that were removed
	       * @param {ThreadChannel} thread The thread where members got updated
	       */
	      client.emit(Events.ThreadMembersUpdate, addedMembers, removedMembers, thread);
	    }
	    return {};
	  }
	}

	ThreadMembersUpdate = ThreadMembersUpdateAction;
	return ThreadMembersUpdate;
}

var Typing_1;
var hasRequiredTyping;

function requireTyping () {
	if (hasRequiredTyping) return Typing_1;
	hasRequiredTyping = 1;

	const Base = requireBase$2();

	/**
	 * Represents a typing state for a user in a channel.
	 * @extends {Base}
	 */
	class Typing extends Base {
	  constructor(channel, user, data) {
	    super(channel.client);

	    /**
	     * The channel the status is from
	     * @type {TextBasedChannels}
	     */
	    this.channel = channel;

	    /**
	     * The user who is typing
	     * @type {User}
	     */
	    this.user = user;

	    this._patch(data);
	  }

	  _patch(data) {
	    if ('timestamp' in data) {
	      /**
	       * The UNIX timestamp in milliseconds the user started typing at
	       * @type {number}
	       */
	      this.startedTimestamp = data.timestamp * 1_000;
	    }
	  }

	  /**
	   * Indicates whether the status is received from a guild.
	   * @returns {boolean}
	   */
	  inGuild() {
	    return this.guild !== null;
	  }

	  /**
	   * The time the user started typing at
	   * @type {Date}
	   * @readonly
	   */
	  get startedAt() {
	    return new Date(this.startedTimestamp);
	  }

	  /**
	   * The guild the status is from
	   * @type {?Guild}
	   * @readonly
	   */
	  get guild() {
	    return this.channel.guild ?? null;
	  }

	  /**
	   * The member who is typing
	   * @type {?GuildMember}
	   * @readonly
	   */
	  get member() {
	    return this.guild?.members.resolve(this.user) ?? null;
	  }
	}

	Typing_1 = Typing;
	return Typing_1;
}

var TypingStart_1;
var hasRequiredTypingStart;

function requireTypingStart () {
	if (hasRequiredTypingStart) return TypingStart_1;
	hasRequiredTypingStart = 1;

	const Action = requireAction();
	const Typing = requireTyping();
	const Events = requireEvents();

	class TypingStart extends Action {
	  handle(data) {
	    const channel = this.getChannel({ id: data.channel_id, ...('guild_id' in data && { guild_id: data.guild_id }) });
	    if (!channel) return;

	    if (!channel.isTextBased()) {
	      this.client.emit(Events.Warn, `Discord sent a typing packet to a ${channel.type} channel ${channel.id}`);
	      return;
	    }

	    const user = this.getUserFromMember(data);
	    if (user) {
	      /**
	       * Emitted whenever a user starts typing in a channel.
	       * @event Client#typingStart
	       * @param {Typing} typing The typing state
	       */
	      this.client.emit(Events.TypingStart, new Typing(channel, user, data));
	    }
	  }
	}

	TypingStart_1 = TypingStart;
	return TypingStart_1;
}

var UserUpdate;
var hasRequiredUserUpdate;

function requireUserUpdate () {
	if (hasRequiredUserUpdate) return UserUpdate;
	hasRequiredUserUpdate = 1;

	const Action = requireAction();
	const Events = requireEvents();

	class UserUpdateAction extends Action {
	  handle(data) {
	    const client = this.client;

	    const newUser = data.id === client.user.id ? client.user : client.users.cache.get(data.id);
	    const oldUser = newUser._update(data);

	    if (!oldUser.equals(newUser)) {
	      /**
	       * Emitted whenever a user's details (e.g. username) are changed.
	       * Triggered by the Discord gateway events {@link Events.UserUpdate},
	       * {@link Events.GuildMemberUpdate}, and {@link Events.PresenceUpdate}.
	       * @event Client#userUpdate
	       * @param {User} oldUser The user before the update
	       * @param {User} newUser The user after the update
	       */
	      client.emit(Events.UserUpdate, oldUser, newUser);
	      return {
	        old: oldUser,
	        updated: newUser,
	      };
	    }

	    return {
	      old: null,
	      updated: null,
	    };
	  }
	}

	UserUpdate = UserUpdateAction;
	return UserUpdate;
}

var VoiceStateUpdate_1;
var hasRequiredVoiceStateUpdate;

function requireVoiceStateUpdate () {
	if (hasRequiredVoiceStateUpdate) return VoiceStateUpdate_1;
	hasRequiredVoiceStateUpdate = 1;

	const Action = requireAction();
	const VoiceState = requireVoiceState();
	const Events = requireEvents();

	class VoiceStateUpdate extends Action {
	  handle(data) {
	    const client = this.client;
	    const guild = client.guilds.cache.get(data.guild_id);
	    if (guild) {
	      // Update the state
	      const oldState =
	        guild.voiceStates.cache.get(data.user_id)?._clone() ?? new VoiceState(guild, { user_id: data.user_id });

	      const newState = guild.voiceStates._add(data);

	      // Get the member
	      let member = guild.members.cache.get(data.user_id);
	      if (member && data.member) {
	        member._patch(data.member);
	      } else if (data.member?.user && data.member.joined_at) {
	        member = guild.members._add(data.member);
	      }

	      // Emit event
	      if (member?.user.id === client.user.id) {
	        client.emit('debug', `[VOICE] received voice state update: ${JSON.stringify(data)}`);
	        client.voice.onVoiceStateUpdate(data);
	      }

	      /**
	       * Emitted whenever a member changes voice state - e.g. joins/leaves a channel, mutes/unmutes.
	       * @event Client#voiceStateUpdate
	       * @param {VoiceState} oldState The voice state before the update
	       * @param {VoiceState} newState The voice state after the update
	       */
	      client.emit(Events.VoiceStateUpdate, oldState, newState);
	    }
	  }
	}

	VoiceStateUpdate_1 = VoiceStateUpdate;
	return VoiceStateUpdate_1;
}

var WebhooksUpdate_1;
var hasRequiredWebhooksUpdate;

function requireWebhooksUpdate () {
	if (hasRequiredWebhooksUpdate) return WebhooksUpdate_1;
	hasRequiredWebhooksUpdate = 1;

	const process = require$$0$d;
	const Action = requireAction();

	let deprecationEmitted = false;

	class WebhooksUpdate extends Action {
	  handle(data) {
	    const client = this.client;
	    const channel = client.channels.cache.get(data.channel_id);
	    if (!channel) return;

	    // TODO: change to Events.WebhooksUpdate in the next major version
	    /**
	     * Emitted whenever a channel has its webhooks changed.
	     * @event Client#webhooksUpdate
	     * @param {TextChannel|NewsChannel|VoiceChannel|StageChannel|ForumChannel|MediaChannel} channel
	     * The channel that had a webhook update
	     */
	    client.emit('webhooksUpdate', channel);

	    /**
	     * Emitted whenever a channel has its webhooks changed.
	     * @event Client#webhookUpdate
	     * @param {TextChannel|NewsChannel|VoiceChannel|StageChannel|ForumChannel|MediaChannel} channel
	     * The channel that had a webhook update
	     * @deprecated Use {@link Client#event:webhooksUpdate} instead.
	     */
	    if (client.emit('webhookUpdate', channel) && !deprecationEmitted) {
	      deprecationEmitted = true;
	      process.emitWarning('The webhookUpdate event is deprecated. Use webhooksUpdate instead.', 'DeprecationWarning');
	    }
	  }
	}

	WebhooksUpdate_1 = WebhooksUpdate;
	return WebhooksUpdate_1;
}

var ActionsManager_1;
var hasRequiredActionsManager;

function requireActionsManager () {
	if (hasRequiredActionsManager) return ActionsManager_1;
	hasRequiredActionsManager = 1;

	class ActionsManager {
	  // These symbols represent fully built data that we inject at times when calling actions manually.
	  // Action#getUser, for example, will return the injected data (which is assumed to be a built structure)
	  // instead of trying to make it from provided data
	  injectedUser = Symbol('djs.actions.injectedUser');
	  injectedChannel = Symbol('djs.actions.injectedChannel');
	  injectedMessage = Symbol('djs.actions.injectedMessage');

	  constructor(client) {
	    this.client = client;

	    this.register(requireApplicationCommandPermissionsUpdate());
	    this.register(requireAutoModerationActionExecution());
	    this.register(requireAutoModerationRuleCreate());
	    this.register(requireAutoModerationRuleDelete());
	    this.register(requireAutoModerationRuleUpdate());
	    this.register(requireChannelCreate());
	    this.register(requireChannelDelete());
	    this.register(requireChannelUpdate());
	    this.register(requireEntitlementCreate());
	    this.register(requireEntitlementDelete());
	    this.register(requireEntitlementUpdate());
	    this.register(requireGuildAuditLogEntryCreate());
	    this.register(requireGuildBanAdd());
	    this.register(requireGuildBanRemove());
	    this.register(requireGuildChannelsPositionUpdate());
	    this.register(requireGuildDelete());
	    this.register(requireGuildEmojiCreate());
	    this.register(requireGuildEmojiDelete());
	    this.register(requireGuildEmojiUpdate());
	    this.register(requireGuildEmojisUpdate());
	    this.register(requireGuildIntegrationsUpdate());
	    this.register(requireGuildMemberRemove());
	    this.register(requireGuildMemberUpdate());
	    this.register(requireGuildRoleCreate());
	    this.register(requireGuildRoleDelete());
	    this.register(requireGuildRoleUpdate());
	    this.register(requireGuildRolesPositionUpdate());
	    this.register(requireGuildScheduledEventCreate());
	    this.register(requireGuildScheduledEventDelete());
	    this.register(requireGuildScheduledEventUpdate());
	    this.register(requireGuildScheduledEventUserAdd());
	    this.register(requireGuildScheduledEventUserRemove());
	    this.register(requireGuildStickerCreate());
	    this.register(requireGuildStickerDelete());
	    this.register(requireGuildStickerUpdate());
	    this.register(requireGuildStickersUpdate());
	    this.register(requireGuildUpdate());
	    this.register(requireInteractionCreate());
	    this.register(requireInviteCreate());
	    this.register(requireInviteDelete());
	    this.register(requireMessageCreate());
	    this.register(requireMessageDelete());
	    this.register(requireMessageDeleteBulk());
	    this.register(requireMessagePollVoteAdd());
	    this.register(requireMessagePollVoteRemove());
	    this.register(requireMessageReactionAdd());
	    this.register(requireMessageReactionRemove());
	    this.register(requireMessageReactionRemoveAll());
	    this.register(requireMessageReactionRemoveEmoji());
	    this.register(requireMessageUpdate());
	    this.register(requirePresenceUpdate());
	    this.register(requireStageInstanceCreate());
	    this.register(requireStageInstanceDelete());
	    this.register(requireStageInstanceUpdate());
	    this.register(requireThreadCreate());
	    this.register(requireThreadDelete());
	    this.register(requireThreadListSync());
	    this.register(requireThreadMemberUpdate());
	    this.register(requireThreadMembersUpdate());
	    this.register(requireTypingStart());
	    this.register(requireUserUpdate());
	    this.register(requireVoiceStateUpdate());
	    this.register(requireWebhooksUpdate());
	  }

	  register(Action) {
	    this[Action.name.replace(/Action$/, '')] = new Action(this.client);
	  }
	}

	ActionsManager_1 = ActionsManager;
	return ActionsManager_1;
}

var ClientVoiceManager_1;
var hasRequiredClientVoiceManager;

function requireClientVoiceManager () {
	if (hasRequiredClientVoiceManager) return ClientVoiceManager_1;
	hasRequiredClientVoiceManager = 1;

	const Events = requireEvents();

	/**
	 * Manages voice connections for the client
	 */
	class ClientVoiceManager {
	  constructor(client) {
	    /**
	     * The client that instantiated this voice manager
	     * @type {Client}
	     * @readonly
	     * @name ClientVoiceManager#client
	     */
	    Object.defineProperty(this, 'client', { value: client });

	    /**
	     * Maps guild ids to voice adapters created for use with `@discordjs/voice`.
	     * @type {Map<Snowflake, Object>}
	     */
	    this.adapters = new Map();

	    client.on(Events.ShardDisconnect, (_, shardId) => {
	      for (const [guildId, adapter] of this.adapters.entries()) {
	        if (client.guilds.cache.get(guildId)?.shardId === shardId) {
	          adapter.destroy();
	        }
	      }
	    });
	  }

	  onVoiceServer(payload) {
	    this.adapters.get(payload.guild_id)?.onVoiceServerUpdate(payload);
	  }

	  onVoiceStateUpdate(payload) {
	    if (payload.guild_id && payload.session_id && payload.user_id === this.client.user?.id) {
	      this.adapters.get(payload.guild_id)?.onVoiceStateUpdate(payload);
	    }
	  }
	}

	ClientVoiceManager_1 = ClientVoiceManager;
	return ClientVoiceManager_1;
}

var v10$a = {};

var v10$9 = {};

var common$3 = {};

var hasRequiredCommon$3;

function requireCommon$3 () {
	if (hasRequiredCommon$3) return common$3;
	hasRequiredCommon$3 = 1;
	Object.defineProperty(common$3, "__esModule", { value: true });
	
	return common$3;
}

var hasRequiredV10$5;

function requireV10$5 () {
	if (hasRequiredV10$5) return v10$9;
	hasRequiredV10$5 = 1;
	(function (exports) {
		/**
		 * Types extracted from https://discord.com/developers/docs/topics/gateway
		 */
		var __createBinding = (v10$9 && v10$9.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (v10$9 && v10$9.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.GatewayDispatchEvents = exports.GatewayIntentBits = exports.GatewayCloseCodes = exports.GatewayOpcodes = exports.GatewayVersion = void 0;
		__exportStar(requireCommon$3(), exports);
		exports.GatewayVersion = '10';
		/**
		 * https://discord.com/developers/docs/topics/opcodes-and-status-codes#gateway-gateway-opcodes
		 */
		var GatewayOpcodes;
		(function (GatewayOpcodes) {
		    /**
		     * An event was dispatched
		     */
		    GatewayOpcodes[GatewayOpcodes["Dispatch"] = 0] = "Dispatch";
		    /**
		     * A bidirectional opcode to maintain an active gateway connection.
		     * Fired periodically by the client, or fired by the gateway to request an immediate heartbeat from the client.
		     */
		    GatewayOpcodes[GatewayOpcodes["Heartbeat"] = 1] = "Heartbeat";
		    /**
		     * Starts a new session during the initial handshake
		     */
		    GatewayOpcodes[GatewayOpcodes["Identify"] = 2] = "Identify";
		    /**
		     * Update the client's presence
		     */
		    GatewayOpcodes[GatewayOpcodes["PresenceUpdate"] = 3] = "PresenceUpdate";
		    /**
		     * Used to join/leave or move between voice channels
		     */
		    GatewayOpcodes[GatewayOpcodes["VoiceStateUpdate"] = 4] = "VoiceStateUpdate";
		    /**
		     * Resume a previous session that was disconnected
		     */
		    GatewayOpcodes[GatewayOpcodes["Resume"] = 6] = "Resume";
		    /**
		     * You should attempt to reconnect and resume immediately
		     */
		    GatewayOpcodes[GatewayOpcodes["Reconnect"] = 7] = "Reconnect";
		    /**
		     * Request information about offline guild members in a large guild
		     */
		    GatewayOpcodes[GatewayOpcodes["RequestGuildMembers"] = 8] = "RequestGuildMembers";
		    /**
		     * The session has been invalidated. You should reconnect and identify/resume accordingly
		     */
		    GatewayOpcodes[GatewayOpcodes["InvalidSession"] = 9] = "InvalidSession";
		    /**
		     * Sent immediately after connecting, contains the `heartbeat_interval` to use
		     */
		    GatewayOpcodes[GatewayOpcodes["Hello"] = 10] = "Hello";
		    /**
		     * Sent in response to receiving a heartbeat to acknowledge that it has been received
		     */
		    GatewayOpcodes[GatewayOpcodes["HeartbeatAck"] = 11] = "HeartbeatAck";
		})(GatewayOpcodes || (exports.GatewayOpcodes = GatewayOpcodes = {}));
		/**
		 * https://discord.com/developers/docs/topics/opcodes-and-status-codes#gateway-gateway-close-event-codes
		 */
		var GatewayCloseCodes;
		(function (GatewayCloseCodes) {
		    /**
		     * We're not sure what went wrong. Try reconnecting?
		     */
		    GatewayCloseCodes[GatewayCloseCodes["UnknownError"] = 4000] = "UnknownError";
		    /**
		     * You sent an invalid Gateway opcode or an invalid payload for an opcode. Don't do that!
		     *
		     * See https://discord.com/developers/docs/topics/gateway-events#payload-structure
		     */
		    GatewayCloseCodes[GatewayCloseCodes["UnknownOpcode"] = 4001] = "UnknownOpcode";
		    /**
		     * You sent an invalid payload to us. Don't do that!
		     *
		     * See https://discord.com/developers/docs/topics/gateway#sending-events
		     */
		    GatewayCloseCodes[GatewayCloseCodes["DecodeError"] = 4002] = "DecodeError";
		    /**
		     * You sent us a payload prior to identifying
		     *
		     * See https://discord.com/developers/docs/topics/gateway-events#identify
		     */
		    GatewayCloseCodes[GatewayCloseCodes["NotAuthenticated"] = 4003] = "NotAuthenticated";
		    /**
		     * The account token sent with your identify payload is incorrect
		     *
		     * See https://discord.com/developers/docs/topics/gateway-events#identify
		     */
		    GatewayCloseCodes[GatewayCloseCodes["AuthenticationFailed"] = 4004] = "AuthenticationFailed";
		    /**
		     * You sent more than one identify payload. Don't do that!
		     */
		    GatewayCloseCodes[GatewayCloseCodes["AlreadyAuthenticated"] = 4005] = "AlreadyAuthenticated";
		    /**
		     * The sequence sent when resuming the session was invalid. Reconnect and start a new session
		     *
		     * See https://discord.com/developers/docs/topics/gateway-events#resume
		     */
		    GatewayCloseCodes[GatewayCloseCodes["InvalidSeq"] = 4007] = "InvalidSeq";
		    /**
		     * Woah nelly! You're sending payloads to us too quickly. Slow it down! You will be disconnected on receiving this
		     */
		    GatewayCloseCodes[GatewayCloseCodes["RateLimited"] = 4008] = "RateLimited";
		    /**
		     * Your session timed out. Reconnect and start a new one
		     */
		    GatewayCloseCodes[GatewayCloseCodes["SessionTimedOut"] = 4009] = "SessionTimedOut";
		    /**
		     * You sent us an invalid shard when identifying
		     *
		     * See https://discord.com/developers/docs/topics/gateway#sharding
		     */
		    GatewayCloseCodes[GatewayCloseCodes["InvalidShard"] = 4010] = "InvalidShard";
		    /**
		     * The session would have handled too many guilds - you are required to shard your connection in order to connect
		     *
		     * See https://discord.com/developers/docs/topics/gateway#sharding
		     */
		    GatewayCloseCodes[GatewayCloseCodes["ShardingRequired"] = 4011] = "ShardingRequired";
		    /**
		     * You sent an invalid version for the gateway
		     */
		    GatewayCloseCodes[GatewayCloseCodes["InvalidAPIVersion"] = 4012] = "InvalidAPIVersion";
		    /**
		     * You sent an invalid intent for a Gateway Intent. You may have incorrectly calculated the bitwise value
		     *
		     * See https://discord.com/developers/docs/topics/gateway#gateway-intents
		     */
		    GatewayCloseCodes[GatewayCloseCodes["InvalidIntents"] = 4013] = "InvalidIntents";
		    /**
		     * You sent a disallowed intent for a Gateway Intent. You may have tried to specify an intent that you have not
		     * enabled or are not whitelisted for
		     *
		     * See https://discord.com/developers/docs/topics/gateway#gateway-intents
		     *
		     * See https://discord.com/developers/docs/topics/gateway#privileged-intents
		     */
		    GatewayCloseCodes[GatewayCloseCodes["DisallowedIntents"] = 4014] = "DisallowedIntents";
		})(GatewayCloseCodes || (exports.GatewayCloseCodes = GatewayCloseCodes = {}));
		/**
		 * https://discord.com/developers/docs/topics/gateway#list-of-intents
		 */
		var GatewayIntentBits;
		(function (GatewayIntentBits) {
		    GatewayIntentBits[GatewayIntentBits["Guilds"] = 1] = "Guilds";
		    GatewayIntentBits[GatewayIntentBits["GuildMembers"] = 2] = "GuildMembers";
		    GatewayIntentBits[GatewayIntentBits["GuildModeration"] = 4] = "GuildModeration";
		    /**
		     * @deprecated This is the old name for {@apilink GatewayIntentBits#GuildModeration}
		     */
		    GatewayIntentBits[GatewayIntentBits["GuildBans"] = 4] = "GuildBans";
		    GatewayIntentBits[GatewayIntentBits["GuildEmojisAndStickers"] = 8] = "GuildEmojisAndStickers";
		    GatewayIntentBits[GatewayIntentBits["GuildIntegrations"] = 16] = "GuildIntegrations";
		    GatewayIntentBits[GatewayIntentBits["GuildWebhooks"] = 32] = "GuildWebhooks";
		    GatewayIntentBits[GatewayIntentBits["GuildInvites"] = 64] = "GuildInvites";
		    GatewayIntentBits[GatewayIntentBits["GuildVoiceStates"] = 128] = "GuildVoiceStates";
		    GatewayIntentBits[GatewayIntentBits["GuildPresences"] = 256] = "GuildPresences";
		    GatewayIntentBits[GatewayIntentBits["GuildMessages"] = 512] = "GuildMessages";
		    GatewayIntentBits[GatewayIntentBits["GuildMessageReactions"] = 1024] = "GuildMessageReactions";
		    GatewayIntentBits[GatewayIntentBits["GuildMessageTyping"] = 2048] = "GuildMessageTyping";
		    GatewayIntentBits[GatewayIntentBits["DirectMessages"] = 4096] = "DirectMessages";
		    GatewayIntentBits[GatewayIntentBits["DirectMessageReactions"] = 8192] = "DirectMessageReactions";
		    GatewayIntentBits[GatewayIntentBits["DirectMessageTyping"] = 16384] = "DirectMessageTyping";
		    GatewayIntentBits[GatewayIntentBits["MessageContent"] = 32768] = "MessageContent";
		    GatewayIntentBits[GatewayIntentBits["GuildScheduledEvents"] = 65536] = "GuildScheduledEvents";
		    GatewayIntentBits[GatewayIntentBits["AutoModerationConfiguration"] = 1048576] = "AutoModerationConfiguration";
		    GatewayIntentBits[GatewayIntentBits["AutoModerationExecution"] = 2097152] = "AutoModerationExecution";
		    GatewayIntentBits[GatewayIntentBits["GuildMessagePolls"] = 16777216] = "GuildMessagePolls";
		    GatewayIntentBits[GatewayIntentBits["DirectMessagePolls"] = 33554432] = "DirectMessagePolls";
		})(GatewayIntentBits || (exports.GatewayIntentBits = GatewayIntentBits = {}));
		/**
		 * https://discord.com/developers/docs/topics/gateway-events#receive-events
		 */
		var GatewayDispatchEvents;
		(function (GatewayDispatchEvents) {
		    GatewayDispatchEvents["ApplicationCommandPermissionsUpdate"] = "APPLICATION_COMMAND_PERMISSIONS_UPDATE";
		    GatewayDispatchEvents["ChannelCreate"] = "CHANNEL_CREATE";
		    GatewayDispatchEvents["ChannelDelete"] = "CHANNEL_DELETE";
		    GatewayDispatchEvents["ChannelPinsUpdate"] = "CHANNEL_PINS_UPDATE";
		    GatewayDispatchEvents["ChannelUpdate"] = "CHANNEL_UPDATE";
		    GatewayDispatchEvents["GuildBanAdd"] = "GUILD_BAN_ADD";
		    GatewayDispatchEvents["GuildBanRemove"] = "GUILD_BAN_REMOVE";
		    GatewayDispatchEvents["GuildCreate"] = "GUILD_CREATE";
		    GatewayDispatchEvents["GuildDelete"] = "GUILD_DELETE";
		    GatewayDispatchEvents["GuildEmojisUpdate"] = "GUILD_EMOJIS_UPDATE";
		    GatewayDispatchEvents["GuildIntegrationsUpdate"] = "GUILD_INTEGRATIONS_UPDATE";
		    GatewayDispatchEvents["GuildMemberAdd"] = "GUILD_MEMBER_ADD";
		    GatewayDispatchEvents["GuildMemberRemove"] = "GUILD_MEMBER_REMOVE";
		    GatewayDispatchEvents["GuildMembersChunk"] = "GUILD_MEMBERS_CHUNK";
		    GatewayDispatchEvents["GuildMemberUpdate"] = "GUILD_MEMBER_UPDATE";
		    GatewayDispatchEvents["GuildRoleCreate"] = "GUILD_ROLE_CREATE";
		    GatewayDispatchEvents["GuildRoleDelete"] = "GUILD_ROLE_DELETE";
		    GatewayDispatchEvents["GuildRoleUpdate"] = "GUILD_ROLE_UPDATE";
		    GatewayDispatchEvents["GuildStickersUpdate"] = "GUILD_STICKERS_UPDATE";
		    GatewayDispatchEvents["GuildUpdate"] = "GUILD_UPDATE";
		    GatewayDispatchEvents["IntegrationCreate"] = "INTEGRATION_CREATE";
		    GatewayDispatchEvents["IntegrationDelete"] = "INTEGRATION_DELETE";
		    GatewayDispatchEvents["IntegrationUpdate"] = "INTEGRATION_UPDATE";
		    GatewayDispatchEvents["InteractionCreate"] = "INTERACTION_CREATE";
		    GatewayDispatchEvents["InviteCreate"] = "INVITE_CREATE";
		    GatewayDispatchEvents["InviteDelete"] = "INVITE_DELETE";
		    GatewayDispatchEvents["MessageCreate"] = "MESSAGE_CREATE";
		    GatewayDispatchEvents["MessageDelete"] = "MESSAGE_DELETE";
		    GatewayDispatchEvents["MessageDeleteBulk"] = "MESSAGE_DELETE_BULK";
		    GatewayDispatchEvents["MessageReactionAdd"] = "MESSAGE_REACTION_ADD";
		    GatewayDispatchEvents["MessageReactionRemove"] = "MESSAGE_REACTION_REMOVE";
		    GatewayDispatchEvents["MessageReactionRemoveAll"] = "MESSAGE_REACTION_REMOVE_ALL";
		    GatewayDispatchEvents["MessageReactionRemoveEmoji"] = "MESSAGE_REACTION_REMOVE_EMOJI";
		    GatewayDispatchEvents["MessageUpdate"] = "MESSAGE_UPDATE";
		    GatewayDispatchEvents["PresenceUpdate"] = "PRESENCE_UPDATE";
		    GatewayDispatchEvents["StageInstanceCreate"] = "STAGE_INSTANCE_CREATE";
		    GatewayDispatchEvents["StageInstanceDelete"] = "STAGE_INSTANCE_DELETE";
		    GatewayDispatchEvents["StageInstanceUpdate"] = "STAGE_INSTANCE_UPDATE";
		    GatewayDispatchEvents["Ready"] = "READY";
		    GatewayDispatchEvents["Resumed"] = "RESUMED";
		    GatewayDispatchEvents["ThreadCreate"] = "THREAD_CREATE";
		    GatewayDispatchEvents["ThreadDelete"] = "THREAD_DELETE";
		    GatewayDispatchEvents["ThreadListSync"] = "THREAD_LIST_SYNC";
		    GatewayDispatchEvents["ThreadMembersUpdate"] = "THREAD_MEMBERS_UPDATE";
		    GatewayDispatchEvents["ThreadMemberUpdate"] = "THREAD_MEMBER_UPDATE";
		    GatewayDispatchEvents["ThreadUpdate"] = "THREAD_UPDATE";
		    GatewayDispatchEvents["TypingStart"] = "TYPING_START";
		    GatewayDispatchEvents["UserUpdate"] = "USER_UPDATE";
		    GatewayDispatchEvents["VoiceServerUpdate"] = "VOICE_SERVER_UPDATE";
		    GatewayDispatchEvents["VoiceStateUpdate"] = "VOICE_STATE_UPDATE";
		    GatewayDispatchEvents["WebhooksUpdate"] = "WEBHOOKS_UPDATE";
		    GatewayDispatchEvents["MessagePollVoteAdd"] = "MESSAGE_POLL_VOTE_ADD";
		    GatewayDispatchEvents["MessagePollVoteRemove"] = "MESSAGE_POLL_VOTE_REMOVE";
		    GatewayDispatchEvents["GuildScheduledEventCreate"] = "GUILD_SCHEDULED_EVENT_CREATE";
		    GatewayDispatchEvents["GuildScheduledEventUpdate"] = "GUILD_SCHEDULED_EVENT_UPDATE";
		    GatewayDispatchEvents["GuildScheduledEventDelete"] = "GUILD_SCHEDULED_EVENT_DELETE";
		    GatewayDispatchEvents["GuildScheduledEventUserAdd"] = "GUILD_SCHEDULED_EVENT_USER_ADD";
		    GatewayDispatchEvents["GuildScheduledEventUserRemove"] = "GUILD_SCHEDULED_EVENT_USER_REMOVE";
		    GatewayDispatchEvents["AutoModerationRuleCreate"] = "AUTO_MODERATION_RULE_CREATE";
		    GatewayDispatchEvents["AutoModerationRuleUpdate"] = "AUTO_MODERATION_RULE_UPDATE";
		    GatewayDispatchEvents["AutoModerationRuleDelete"] = "AUTO_MODERATION_RULE_DELETE";
		    GatewayDispatchEvents["AutoModerationActionExecution"] = "AUTO_MODERATION_ACTION_EXECUTION";
		    GatewayDispatchEvents["GuildAuditLogEntryCreate"] = "GUILD_AUDIT_LOG_ENTRY_CREATE";
		    GatewayDispatchEvents["EntitlementCreate"] = "ENTITLEMENT_CREATE";
		    GatewayDispatchEvents["EntitlementUpdate"] = "ENTITLEMENT_UPDATE";
		    GatewayDispatchEvents["EntitlementDelete"] = "ENTITLEMENT_DELETE";
		})(GatewayDispatchEvents || (exports.GatewayDispatchEvents = GatewayDispatchEvents = {}));
		// #endregion Shared
		
	} (v10$9));
	return v10$9;
}

var v10Exports$4 = requireV10$5();
var mod$5 = /*@__PURE__*/getDefaultExportFromCjs(v10Exports$4);

const GatewayCloseCodes = mod$5.GatewayCloseCodes;
const GatewayDispatchEvents = mod$5.GatewayDispatchEvents;
const GatewayIntentBits = mod$5.GatewayIntentBits;
const GatewayOpcodes = mod$5.GatewayOpcodes;
const GatewayVersion = mod$5.GatewayVersion;

var v10$8 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	GatewayCloseCodes: GatewayCloseCodes,
	GatewayDispatchEvents: GatewayDispatchEvents,
	GatewayIntentBits: GatewayIntentBits,
	GatewayOpcodes: GatewayOpcodes,
	GatewayVersion: GatewayVersion,
	default: mod$5
});

var require$$0 = /*@__PURE__*/getAugmentedNamespace(v10$8);

var globals$1 = {};

var hasRequiredGlobals;

function requireGlobals () {
	if (hasRequiredGlobals) return globals$1;
	hasRequiredGlobals = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.FormattingPatterns = void 0;
		/**
		 * https://discord.com/developers/docs/reference#message-formatting-formats
		 */
		exports.FormattingPatterns = {
		    /**
		     * Regular expression for matching a user mention, strictly without a nickname
		     *
		     * The `id` group property is present on the `exec` result of this expression
		     */
		    User: /<@(?<id>\d{17,20})>/,
		    /**
		     * Regular expression for matching a user mention, strictly with a nickname
		     *
		     * The `id` group property is present on the `exec` result of this expression
		     *
		     * @deprecated Passing `!` in user mentions is no longer necessary / supported, and future message contents won't have it
		     */
		    UserWithNickname: /<@!(?<id>\d{17,20})>/,
		    /**
		     * Regular expression for matching a user mention, with or without a nickname
		     *
		     * The `id` group property is present on the `exec` result of this expression
		     *
		     * @deprecated Passing `!` in user mentions is no longer necessary / supported, and future message contents won't have it
		     */
		    UserWithOptionalNickname: /<@!?(?<id>\d{17,20})>/,
		    /**
		     * Regular expression for matching a channel mention
		     *
		     * The `id` group property is present on the `exec` result of this expression
		     */
		    Channel: /<#(?<id>\d{17,20})>/,
		    /**
		     * Regular expression for matching a role mention
		     *
		     * The `id` group property is present on the `exec` result of this expression
		     */
		    Role: /<@&(?<id>\d{17,20})>/,
		    /**
		     * Regular expression for matching a application command mention
		     *
		     * The `fullName` (possibly including `name`, `subcommandOrGroup` and `subcommand`) and `id` group properties are present on the `exec` result of this expression
		     */
		    SlashCommand: 
		    // eslint-disable-next-line unicorn/no-unsafe-regex
		    /<\/(?<fullName>(?<name>[-_\p{Letter}\p{Number}\p{sc=Deva}\p{sc=Thai}]{1,32})(?: (?<subcommandOrGroup>[-_\p{Letter}\p{Number}\p{sc=Deva}\p{sc=Thai}]{1,32}))?(?: (?<subcommand>[-_\p{Letter}\p{Number}\p{sc=Deva}\p{sc=Thai}]{1,32}))?):(?<id>\d{17,20})>/u,
		    /**
		     * Regular expression for matching a custom emoji, either static or animated
		     *
		     * The `animated`, `name` and `id` group properties are present on the `exec` result of this expression
		     */
		    Emoji: /<(?<animated>a)?:(?<name>\w{2,32}):(?<id>\d{17,20})>/,
		    /**
		     * Regular expression for matching strictly an animated custom emoji
		     *
		     * The `animated`, `name` and `id` group properties are present on the `exec` result of this expression
		     */
		    AnimatedEmoji: /<(?<animated>a):(?<name>\w{2,32}):(?<id>\d{17,20})>/,
		    /**
		     * Regular expression for matching strictly a static custom emoji
		     *
		     * The `name` and `id` group properties are present on the `exec` result of this expression
		     */
		    StaticEmoji: /<:(?<name>\w{2,32}):(?<id>\d{17,20})>/,
		    /**
		     * Regular expression for matching a timestamp, either default or custom styled
		     *
		     * The `timestamp` and `style` group properties are present on the `exec` result of this expression
		     */
		    // eslint-disable-next-line prefer-named-capture-group
		    Timestamp: /<t:(?<timestamp>-?\d{1,13})(:(?<style>[DFRTdft]))?>/,
		    /**
		     * Regular expression for matching strictly default styled timestamps
		     *
		     * The `timestamp` group property is present on the `exec` result of this expression
		     */
		    DefaultStyledTimestamp: /<t:(?<timestamp>-?\d{1,13})>/,
		    /**
		     * Regular expression for matching strictly custom styled timestamps
		     *
		     * The `timestamp` and `style` group properties are present on the `exec` result of this expression
		     */
		    StyledTimestamp: /<t:(?<timestamp>-?\d{1,13}):(?<style>[DFRTdft])>/,
		};
		/**
		 * Freezes the formatting patterns
		 *
		 * @internal
		 */
		Object.freeze(exports.FormattingPatterns);
		
	} (globals$1));
	return globals$1;
}

var globalsExports = requireGlobals();
var mod$4 = /*@__PURE__*/getDefaultExportFromCjs(globalsExports);

const FormattingPatterns = mod$4.FormattingPatterns;

var globals = /*#__PURE__*/Object.freeze({
	__proto__: null,
	FormattingPatterns: FormattingPatterns,
	default: mod$4
});

var require$$1 = /*@__PURE__*/getAugmentedNamespace(globals);

var v10$7 = {};

var common$2 = {};

var hasRequiredCommon$2;

function requireCommon$2 () {
	if (hasRequiredCommon$2) return common$2;
	hasRequiredCommon$2 = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.PermissionFlagsBits = void 0;
		/**
		 * https://discord.com/developers/docs/topics/permissions#permissions-bitwise-permission-flags
		 *
		 * These flags are exported as `BigInt`s and NOT numbers. Wrapping them in `Number()`
		 * may cause issues, try to use BigInts as much as possible or modules that can
		 * replicate them in some way
		 */
		exports.PermissionFlagsBits = {
		    /**
		     * Allows creation of instant invites
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    CreateInstantInvite: 1n << 0n,
		    /**
		     * Allows kicking members
		     */
		    // eslint-disable-next-line sonarjs/no-identical-expressions
		    KickMembers: 1n << 1n,
		    /**
		     * Allows banning members
		     */
		    BanMembers: 1n << 2n,
		    /**
		     * Allows all permissions and bypasses channel permission overwrites
		     */
		    Administrator: 1n << 3n,
		    /**
		     * Allows management and editing of channels
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    ManageChannels: 1n << 4n,
		    /**
		     * Allows management and editing of the guild
		     */
		    ManageGuild: 1n << 5n,
		    /**
		     * Allows for the addition of reactions to messages
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    AddReactions: 1n << 6n,
		    /**
		     * Allows for viewing of audit logs
		     */
		    ViewAuditLog: 1n << 7n,
		    /**
		     * Allows for using priority speaker in a voice channel
		     *
		     * Applies to channel types: Voice
		     */
		    PrioritySpeaker: 1n << 8n,
		    /**
		     * Allows the user to go live
		     *
		     * Applies to channel types: Voice, Stage
		     */
		    Stream: 1n << 9n,
		    /**
		     * Allows guild members to view a channel, which includes reading messages in text channels and joining voice channels
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    ViewChannel: 1n << 10n,
		    /**
		     * Allows for sending messages in a channel and creating threads in a forum
		     * (does not allow sending messages in threads)
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    SendMessages: 1n << 11n,
		    /**
		     * Allows for sending of `/tts` messages
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    SendTTSMessages: 1n << 12n,
		    /**
		     * Allows for deletion of other users messages
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    ManageMessages: 1n << 13n,
		    /**
		     * Links sent by users with this permission will be auto-embedded
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    EmbedLinks: 1n << 14n,
		    /**
		     * Allows for uploading images and files
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    AttachFiles: 1n << 15n,
		    /**
		     * Allows for reading of message history
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    ReadMessageHistory: 1n << 16n,
		    /**
		     * Allows for using the `@everyone` tag to notify all users in a channel,
		     * and the `@here` tag to notify all online users in a channel
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    MentionEveryone: 1n << 17n,
		    /**
		     * Allows the usage of custom emojis from other servers
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    UseExternalEmojis: 1n << 18n,
		    /**
		     * Allows for viewing guild insights
		     */
		    ViewGuildInsights: 1n << 19n,
		    /**
		     * Allows for joining of a voice channel
		     *
		     * Applies to channel types: Voice, Stage
		     */
		    Connect: 1n << 20n,
		    /**
		     * Allows for speaking in a voice channel
		     *
		     * Applies to channel types: Voice
		     */
		    Speak: 1n << 21n,
		    /**
		     * Allows for muting members in a voice channel
		     *
		     * Applies to channel types: Voice, Stage
		     */
		    MuteMembers: 1n << 22n,
		    /**
		     * Allows for deafening of members in a voice channel
		     *
		     * Applies to channel types: Voice
		     */
		    DeafenMembers: 1n << 23n,
		    /**
		     * Allows for moving of members between voice channels
		     *
		     * Applies to channel types: Voice, Stage
		     */
		    MoveMembers: 1n << 24n,
		    /**
		     * Allows for using voice-activity-detection in a voice channel
		     *
		     * Applies to channel types: Voice
		     */
		    UseVAD: 1n << 25n,
		    /**
		     * Allows for modification of own nickname
		     */
		    ChangeNickname: 1n << 26n,
		    /**
		     * Allows for modification of other users nicknames
		     */
		    ManageNicknames: 1n << 27n,
		    /**
		     * Allows management and editing of roles
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    ManageRoles: 1n << 28n,
		    /**
		     * Allows management and editing of webhooks
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    ManageWebhooks: 1n << 29n,
		    /**
		     * Allows management and editing of emojis, stickers, and soundboard sounds
		     *
		     * @deprecated This is the old name for {@apilink PermissionFlagsBits#ManageGuildExpressions}
		     */
		    ManageEmojisAndStickers: 1n << 30n,
		    /**
		     * Allows for editing and deleting emojis, stickers, and soundboard sounds created by all users
		     */
		    ManageGuildExpressions: 1n << 30n,
		    /**
		     * Allows members to use application commands, including slash commands and context menu commands
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    UseApplicationCommands: 1n << 31n,
		    /**
		     * Allows for requesting to speak in stage channels
		     *
		     * Applies to channel types: Stage
		     */
		    RequestToSpeak: 1n << 32n,
		    /**
		     * Allows for editing and deleting scheduled events created by all users
		     *
		     * Applies to channel types: Voice, Stage
		     */
		    ManageEvents: 1n << 33n,
		    /**
		     * Allows for deleting and archiving threads, and viewing all private threads
		     *
		     * Applies to channel types: Text
		     */
		    ManageThreads: 1n << 34n,
		    /**
		     * Allows for creating public and announcement threads
		     *
		     * Applies to channel types: Text
		     */
		    CreatePublicThreads: 1n << 35n,
		    /**
		     * Allows for creating private threads
		     *
		     * Applies to channel types: Text
		     */
		    CreatePrivateThreads: 1n << 36n,
		    /**
		     * Allows the usage of custom stickers from other servers
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    UseExternalStickers: 1n << 37n,
		    /**
		     * Allows for sending messages in threads
		     *
		     * Applies to channel types: Text
		     */
		    SendMessagesInThreads: 1n << 38n,
		    /**
		     * Allows for using Activities (applications with the {@apilink ApplicationFlags.Embedded} flag) in a voice channel
		     *
		     * Applies to channel types: Voice
		     */
		    UseEmbeddedActivities: 1n << 39n,
		    /**
		     * Allows for timing out users to prevent them from sending or reacting to messages in chat and threads,
		     * and from speaking in voice and stage channels
		     */
		    ModerateMembers: 1n << 40n,
		    /**
		     * Allows for viewing role subscription insights
		     */
		    ViewCreatorMonetizationAnalytics: 1n << 41n,
		    /**
		     * Allows for using soundboard in a voice channel
		     *
		     * Applies to channel types: Voice
		     */
		    UseSoundboard: 1n << 42n,
		    /**
		     * Allows for creating emojis, stickers, and soundboard sounds, and editing and deleting those created by the current user
		     */
		    CreateGuildExpressions: 1n << 43n,
		    /**
		     * Allows for creating scheduled events, and editing and deleting those created by the current user
		     *
		     * Applies to channel types: Voice, Stage
		     */
		    CreateEvents: 1n << 44n,
		    /**
		     * Allows the usage of custom soundboard sounds from other servers
		     *
		     * Applies to channel types: Voice
		     */
		    UseExternalSounds: 1n << 45n,
		    /**
		     * Allows sending voice messages
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    SendVoiceMessages: 1n << 46n,
		    /**
		     * Allows sending polls
		     *
		     * Applies to channel types: Text, Voice, Stage
		     */
		    SendPolls: 1n << 49n,
		};
		/**
		 * Freeze the object of bits, preventing any modifications to it
		 *
		 * @internal
		 */
		Object.freeze(exports.PermissionFlagsBits);
		
	} (common$2));
	return common$2;
}

var application$1 = {};

var hasRequiredApplication$1;

function requireApplication$1 () {
	if (hasRequiredApplication$1) return application$1;
	hasRequiredApplication$1 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/application
	 */
	Object.defineProperty(application$1, "__esModule", { value: true });
	application$1.ApplicationRoleConnectionMetadataType = application$1.ApplicationFlags = void 0;
	/**
	 * https://discord.com/developers/docs/resources/application#application-object-application-flags
	 */
	var ApplicationFlags;
	(function (ApplicationFlags) {
	    /**
	     * @unstable This application flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ApplicationFlags[ApplicationFlags["EmbeddedReleased"] = 2] = "EmbeddedReleased";
	    /**
	     * @unstable This application flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ApplicationFlags[ApplicationFlags["ManagedEmoji"] = 4] = "ManagedEmoji";
	    /**
	     * @unstable This application flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ApplicationFlags[ApplicationFlags["EmbeddedIAP"] = 8] = "EmbeddedIAP";
	    /**
	     * @unstable This application flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ApplicationFlags[ApplicationFlags["GroupDMCreate"] = 16] = "GroupDMCreate";
	    /**
	     * Indicates if an app uses the Auto Moderation API
	     */
	    ApplicationFlags[ApplicationFlags["ApplicationAutoModerationRuleCreateBadge"] = 64] = "ApplicationAutoModerationRuleCreateBadge";
	    /**
	     * @unstable This application flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ApplicationFlags[ApplicationFlags["RPCHasConnected"] = 2048] = "RPCHasConnected";
	    /**
	     * Intent required for bots in 100 or more servers to receive `presence_update` events
	     */
	    ApplicationFlags[ApplicationFlags["GatewayPresence"] = 4096] = "GatewayPresence";
	    /**
	     * Intent required for bots in under 100 servers to receive `presence_update` events, found in Bot Settings
	     */
	    ApplicationFlags[ApplicationFlags["GatewayPresenceLimited"] = 8192] = "GatewayPresenceLimited";
	    /**
	     * Intent required for bots in 100 or more servers to receive member-related events like `guild_member_add`.
	     * See list of member-related events [under `GUILD_MEMBERS`](https://discord.com/developers/docs/topics/gateway#list-of-intents)
	     */
	    ApplicationFlags[ApplicationFlags["GatewayGuildMembers"] = 16384] = "GatewayGuildMembers";
	    /**
	     * Intent required for bots in under 100 servers to receive member-related events like `guild_member_add`, found in Bot Settings.
	     * See list of member-related events [under `GUILD_MEMBERS`](https://discord.com/developers/docs/topics/gateway#list-of-intents)
	     */
	    ApplicationFlags[ApplicationFlags["GatewayGuildMembersLimited"] = 32768] = "GatewayGuildMembersLimited";
	    /**
	     * Indicates unusual growth of an app that prevents verification
	     */
	    ApplicationFlags[ApplicationFlags["VerificationPendingGuildLimit"] = 65536] = "VerificationPendingGuildLimit";
	    /**
	     * Indicates if an app is embedded within the Discord client (currently unavailable publicly)
	     */
	    ApplicationFlags[ApplicationFlags["Embedded"] = 131072] = "Embedded";
	    /**
	     * Intent required for bots in 100 or more servers to receive [message content](https://support-dev.discord.com/hc/en-us/articles/4404772028055)
	     */
	    ApplicationFlags[ApplicationFlags["GatewayMessageContent"] = 262144] = "GatewayMessageContent";
	    /**
	     * Intent required for bots in under 100 servers to receive [message content](https://support-dev.discord.com/hc/en-us/articles/4404772028055),
	     * found in Bot Settings
	     */
	    ApplicationFlags[ApplicationFlags["GatewayMessageContentLimited"] = 524288] = "GatewayMessageContentLimited";
	    /**
	     * @unstable This application flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ApplicationFlags[ApplicationFlags["EmbeddedFirstParty"] = 1048576] = "EmbeddedFirstParty";
	    /**
	     * Indicates if an app has registered global [application commands](https://discord.com/developers/docs/interactions/application-commands)
	     */
	    ApplicationFlags[ApplicationFlags["ApplicationCommandBadge"] = 8388608] = "ApplicationCommandBadge";
	})(ApplicationFlags || (application$1.ApplicationFlags = ApplicationFlags = {}));
	/**
	 * https://discord.com/developers/docs/resources/application-role-connection-metadata#application-role-connection-metadata-object-application-role-connection-metadata-type
	 */
	var ApplicationRoleConnectionMetadataType;
	(function (ApplicationRoleConnectionMetadataType) {
	    /**
	     * The metadata value (`integer`) is less than or equal to the guild's configured value (`integer`)
	     */
	    ApplicationRoleConnectionMetadataType[ApplicationRoleConnectionMetadataType["IntegerLessThanOrEqual"] = 1] = "IntegerLessThanOrEqual";
	    /**
	     * The metadata value (`integer`) is greater than or equal to the guild's configured value (`integer`)
	     */
	    ApplicationRoleConnectionMetadataType[ApplicationRoleConnectionMetadataType["IntegerGreaterThanOrEqual"] = 2] = "IntegerGreaterThanOrEqual";
	    /**
	     * The metadata value (`integer`) is equal to the guild's configured value (`integer`)
	     */
	    ApplicationRoleConnectionMetadataType[ApplicationRoleConnectionMetadataType["IntegerEqual"] = 3] = "IntegerEqual";
	    /**
	     * The metadata value (`integer`) is not equal to the guild's configured value (`integer`)
	     */
	    ApplicationRoleConnectionMetadataType[ApplicationRoleConnectionMetadataType["IntegerNotEqual"] = 4] = "IntegerNotEqual";
	    /**
	     * The metadata value (`ISO8601 string`) is less than or equal to the guild's configured value (`integer`; days before current date)
	     */
	    ApplicationRoleConnectionMetadataType[ApplicationRoleConnectionMetadataType["DatetimeLessThanOrEqual"] = 5] = "DatetimeLessThanOrEqual";
	    /**
	     * The metadata value (`ISO8601 string`) is greater than or equal to the guild's configured value (`integer`; days before current date)
	     */
	    ApplicationRoleConnectionMetadataType[ApplicationRoleConnectionMetadataType["DatetimeGreaterThanOrEqual"] = 6] = "DatetimeGreaterThanOrEqual";
	    /**
	     * The metadata value (`integer`) is equal to the guild's configured value (`integer`; `1`)
	     */
	    ApplicationRoleConnectionMetadataType[ApplicationRoleConnectionMetadataType["BooleanEqual"] = 7] = "BooleanEqual";
	    /**
	     * The metadata value (`integer`) is not equal to the guild's configured value (`integer`; `1`)
	     */
	    ApplicationRoleConnectionMetadataType[ApplicationRoleConnectionMetadataType["BooleanNotEqual"] = 8] = "BooleanNotEqual";
	})(ApplicationRoleConnectionMetadataType || (application$1.ApplicationRoleConnectionMetadataType = ApplicationRoleConnectionMetadataType = {}));
	
	return application$1;
}

var auditLog$1 = {};

var hasRequiredAuditLog$1;

function requireAuditLog$1 () {
	if (hasRequiredAuditLog$1) return auditLog$1;
	hasRequiredAuditLog$1 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/audit-log
	 */
	Object.defineProperty(auditLog$1, "__esModule", { value: true });
	auditLog$1.AuditLogOptionsType = auditLog$1.AuditLogEvent = void 0;
	/**
	 * https://discord.com/developers/docs/resources/audit-log#audit-log-entry-object-audit-log-events
	 */
	var AuditLogEvent;
	(function (AuditLogEvent) {
	    AuditLogEvent[AuditLogEvent["GuildUpdate"] = 1] = "GuildUpdate";
	    AuditLogEvent[AuditLogEvent["ChannelCreate"] = 10] = "ChannelCreate";
	    AuditLogEvent[AuditLogEvent["ChannelUpdate"] = 11] = "ChannelUpdate";
	    AuditLogEvent[AuditLogEvent["ChannelDelete"] = 12] = "ChannelDelete";
	    AuditLogEvent[AuditLogEvent["ChannelOverwriteCreate"] = 13] = "ChannelOverwriteCreate";
	    AuditLogEvent[AuditLogEvent["ChannelOverwriteUpdate"] = 14] = "ChannelOverwriteUpdate";
	    AuditLogEvent[AuditLogEvent["ChannelOverwriteDelete"] = 15] = "ChannelOverwriteDelete";
	    AuditLogEvent[AuditLogEvent["MemberKick"] = 20] = "MemberKick";
	    AuditLogEvent[AuditLogEvent["MemberPrune"] = 21] = "MemberPrune";
	    AuditLogEvent[AuditLogEvent["MemberBanAdd"] = 22] = "MemberBanAdd";
	    AuditLogEvent[AuditLogEvent["MemberBanRemove"] = 23] = "MemberBanRemove";
	    AuditLogEvent[AuditLogEvent["MemberUpdate"] = 24] = "MemberUpdate";
	    AuditLogEvent[AuditLogEvent["MemberRoleUpdate"] = 25] = "MemberRoleUpdate";
	    AuditLogEvent[AuditLogEvent["MemberMove"] = 26] = "MemberMove";
	    AuditLogEvent[AuditLogEvent["MemberDisconnect"] = 27] = "MemberDisconnect";
	    AuditLogEvent[AuditLogEvent["BotAdd"] = 28] = "BotAdd";
	    AuditLogEvent[AuditLogEvent["RoleCreate"] = 30] = "RoleCreate";
	    AuditLogEvent[AuditLogEvent["RoleUpdate"] = 31] = "RoleUpdate";
	    AuditLogEvent[AuditLogEvent["RoleDelete"] = 32] = "RoleDelete";
	    AuditLogEvent[AuditLogEvent["InviteCreate"] = 40] = "InviteCreate";
	    AuditLogEvent[AuditLogEvent["InviteUpdate"] = 41] = "InviteUpdate";
	    AuditLogEvent[AuditLogEvent["InviteDelete"] = 42] = "InviteDelete";
	    AuditLogEvent[AuditLogEvent["WebhookCreate"] = 50] = "WebhookCreate";
	    AuditLogEvent[AuditLogEvent["WebhookUpdate"] = 51] = "WebhookUpdate";
	    AuditLogEvent[AuditLogEvent["WebhookDelete"] = 52] = "WebhookDelete";
	    AuditLogEvent[AuditLogEvent["EmojiCreate"] = 60] = "EmojiCreate";
	    AuditLogEvent[AuditLogEvent["EmojiUpdate"] = 61] = "EmojiUpdate";
	    AuditLogEvent[AuditLogEvent["EmojiDelete"] = 62] = "EmojiDelete";
	    AuditLogEvent[AuditLogEvent["MessageDelete"] = 72] = "MessageDelete";
	    AuditLogEvent[AuditLogEvent["MessageBulkDelete"] = 73] = "MessageBulkDelete";
	    AuditLogEvent[AuditLogEvent["MessagePin"] = 74] = "MessagePin";
	    AuditLogEvent[AuditLogEvent["MessageUnpin"] = 75] = "MessageUnpin";
	    AuditLogEvent[AuditLogEvent["IntegrationCreate"] = 80] = "IntegrationCreate";
	    AuditLogEvent[AuditLogEvent["IntegrationUpdate"] = 81] = "IntegrationUpdate";
	    AuditLogEvent[AuditLogEvent["IntegrationDelete"] = 82] = "IntegrationDelete";
	    AuditLogEvent[AuditLogEvent["StageInstanceCreate"] = 83] = "StageInstanceCreate";
	    AuditLogEvent[AuditLogEvent["StageInstanceUpdate"] = 84] = "StageInstanceUpdate";
	    AuditLogEvent[AuditLogEvent["StageInstanceDelete"] = 85] = "StageInstanceDelete";
	    AuditLogEvent[AuditLogEvent["StickerCreate"] = 90] = "StickerCreate";
	    AuditLogEvent[AuditLogEvent["StickerUpdate"] = 91] = "StickerUpdate";
	    AuditLogEvent[AuditLogEvent["StickerDelete"] = 92] = "StickerDelete";
	    AuditLogEvent[AuditLogEvent["GuildScheduledEventCreate"] = 100] = "GuildScheduledEventCreate";
	    AuditLogEvent[AuditLogEvent["GuildScheduledEventUpdate"] = 101] = "GuildScheduledEventUpdate";
	    AuditLogEvent[AuditLogEvent["GuildScheduledEventDelete"] = 102] = "GuildScheduledEventDelete";
	    AuditLogEvent[AuditLogEvent["ThreadCreate"] = 110] = "ThreadCreate";
	    AuditLogEvent[AuditLogEvent["ThreadUpdate"] = 111] = "ThreadUpdate";
	    AuditLogEvent[AuditLogEvent["ThreadDelete"] = 112] = "ThreadDelete";
	    AuditLogEvent[AuditLogEvent["ApplicationCommandPermissionUpdate"] = 121] = "ApplicationCommandPermissionUpdate";
	    AuditLogEvent[AuditLogEvent["AutoModerationRuleCreate"] = 140] = "AutoModerationRuleCreate";
	    AuditLogEvent[AuditLogEvent["AutoModerationRuleUpdate"] = 141] = "AutoModerationRuleUpdate";
	    AuditLogEvent[AuditLogEvent["AutoModerationRuleDelete"] = 142] = "AutoModerationRuleDelete";
	    AuditLogEvent[AuditLogEvent["AutoModerationBlockMessage"] = 143] = "AutoModerationBlockMessage";
	    AuditLogEvent[AuditLogEvent["AutoModerationFlagToChannel"] = 144] = "AutoModerationFlagToChannel";
	    AuditLogEvent[AuditLogEvent["AutoModerationUserCommunicationDisabled"] = 145] = "AutoModerationUserCommunicationDisabled";
	    AuditLogEvent[AuditLogEvent["CreatorMonetizationRequestCreated"] = 150] = "CreatorMonetizationRequestCreated";
	    AuditLogEvent[AuditLogEvent["CreatorMonetizationTermsAccepted"] = 151] = "CreatorMonetizationTermsAccepted";
	    AuditLogEvent[AuditLogEvent["OnboardingPromptCreate"] = 163] = "OnboardingPromptCreate";
	    AuditLogEvent[AuditLogEvent["OnboardingPromptUpdate"] = 164] = "OnboardingPromptUpdate";
	    AuditLogEvent[AuditLogEvent["OnboardingPromptDelete"] = 165] = "OnboardingPromptDelete";
	    AuditLogEvent[AuditLogEvent["OnboardingCreate"] = 166] = "OnboardingCreate";
	    AuditLogEvent[AuditLogEvent["OnboardingUpdate"] = 167] = "OnboardingUpdate";
	})(AuditLogEvent || (auditLog$1.AuditLogEvent = AuditLogEvent = {}));
	var AuditLogOptionsType;
	(function (AuditLogOptionsType) {
	    AuditLogOptionsType["Role"] = "0";
	    AuditLogOptionsType["Member"] = "1";
	})(AuditLogOptionsType || (auditLog$1.AuditLogOptionsType = AuditLogOptionsType = {}));
	
	return auditLog$1;
}

var autoModeration$1 = {};

var hasRequiredAutoModeration$1;

function requireAutoModeration$1 () {
	if (hasRequiredAutoModeration$1) return autoModeration$1;
	hasRequiredAutoModeration$1 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/auto-moderation
	 */
	Object.defineProperty(autoModeration$1, "__esModule", { value: true });
	autoModeration$1.AutoModerationActionType = autoModeration$1.AutoModerationRuleEventType = autoModeration$1.AutoModerationRuleKeywordPresetType = autoModeration$1.AutoModerationRuleTriggerType = void 0;
	/**
	 * https://discord.com/developers/docs/resources/auto-moderation#auto-moderation-rule-object-trigger-types
	 */
	var AutoModerationRuleTriggerType;
	(function (AutoModerationRuleTriggerType) {
	    /**
	     * Check if content contains words from a user defined list of keywords (Maximum of 6 per guild)
	     */
	    AutoModerationRuleTriggerType[AutoModerationRuleTriggerType["Keyword"] = 1] = "Keyword";
	    /**
	     * Check if content represents generic spam (Maximum of 1 per guild)
	     */
	    AutoModerationRuleTriggerType[AutoModerationRuleTriggerType["Spam"] = 3] = "Spam";
	    /**
	     * Check if content contains words from internal pre-defined wordsets (Maximum of 1 per guild)
	     */
	    AutoModerationRuleTriggerType[AutoModerationRuleTriggerType["KeywordPreset"] = 4] = "KeywordPreset";
	    /**
	     * Check if content contains more mentions than allowed (Maximum of 1 per guild)
	     */
	    AutoModerationRuleTriggerType[AutoModerationRuleTriggerType["MentionSpam"] = 5] = "MentionSpam";
	})(AutoModerationRuleTriggerType || (autoModeration$1.AutoModerationRuleTriggerType = AutoModerationRuleTriggerType = {}));
	/**
	 * https://discord.com/developers/docs/resources/auto-moderation#auto-moderation-rule-object-keyword-preset-types
	 */
	var AutoModerationRuleKeywordPresetType;
	(function (AutoModerationRuleKeywordPresetType) {
	    /**
	     * Words that may be considered forms of swearing or cursing
	     */
	    AutoModerationRuleKeywordPresetType[AutoModerationRuleKeywordPresetType["Profanity"] = 1] = "Profanity";
	    /**
	     * Words that refer to sexually explicit behavior or activity
	     */
	    AutoModerationRuleKeywordPresetType[AutoModerationRuleKeywordPresetType["SexualContent"] = 2] = "SexualContent";
	    /**
	     * Personal insults or words that may be considered hate speech
	     */
	    AutoModerationRuleKeywordPresetType[AutoModerationRuleKeywordPresetType["Slurs"] = 3] = "Slurs";
	})(AutoModerationRuleKeywordPresetType || (autoModeration$1.AutoModerationRuleKeywordPresetType = AutoModerationRuleKeywordPresetType = {}));
	/**
	 * https://discord.com/developers/docs/resources/auto-moderation#auto-moderation-rule-object-event-types
	 */
	var AutoModerationRuleEventType;
	(function (AutoModerationRuleEventType) {
	    /**
	     * When a member sends or edits a message in the guild
	     */
	    AutoModerationRuleEventType[AutoModerationRuleEventType["MessageSend"] = 1] = "MessageSend";
	})(AutoModerationRuleEventType || (autoModeration$1.AutoModerationRuleEventType = AutoModerationRuleEventType = {}));
	/**
	 * https://discord.com/developers/docs/resources/auto-moderation#auto-moderation-action-object-action-types
	 */
	var AutoModerationActionType;
	(function (AutoModerationActionType) {
	    /**
	     * Blocks a member's message and prevents it from being posted.
	     * A custom explanation can be specified and shown to members whenever their message is blocked
	     */
	    AutoModerationActionType[AutoModerationActionType["BlockMessage"] = 1] = "BlockMessage";
	    /**
	     * Logs user content to a specified channel
	     */
	    AutoModerationActionType[AutoModerationActionType["SendAlertMessage"] = 2] = "SendAlertMessage";
	    /**
	     * Timeout user for specified duration, this action type can be set if the bot has `MODERATE_MEMBERS` permission
	     */
	    AutoModerationActionType[AutoModerationActionType["Timeout"] = 3] = "Timeout";
	})(AutoModerationActionType || (autoModeration$1.AutoModerationActionType = AutoModerationActionType = {}));
	
	return autoModeration$1;
}

var channel$2 = {};

var hasRequiredChannel$2;

function requireChannel$2 () {
	if (hasRequiredChannel$2) return channel$2;
	hasRequiredChannel$2 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/channel
	 */
	Object.defineProperty(channel$2, "__esModule", { value: true });
	channel$2.ChannelFlags = channel$2.SelectMenuDefaultValueType = channel$2.TextInputStyle = channel$2.ButtonStyle = channel$2.ComponentType = channel$2.AllowedMentionsTypes = channel$2.AttachmentFlags = channel$2.EmbedType = channel$2.ThreadMemberFlags = channel$2.ThreadAutoArchiveDuration = channel$2.OverwriteType = channel$2.MessageFlags = channel$2.MessageActivityType = channel$2.MessageType = channel$2.VideoQualityMode = channel$2.ChannelType = channel$2.ForumLayoutType = channel$2.SortOrderType = void 0;
	/**
	 * https://discord.com/developers/docs/resources/channel/#channel-object-sort-order-types
	 */
	var SortOrderType;
	(function (SortOrderType) {
	    /**
	     * Sort forum posts by activity
	     */
	    SortOrderType[SortOrderType["LatestActivity"] = 0] = "LatestActivity";
	    /**
	     * Sort forum posts by creation time (from most recent to oldest)
	     */
	    SortOrderType[SortOrderType["CreationDate"] = 1] = "CreationDate";
	})(SortOrderType || (channel$2.SortOrderType = SortOrderType = {}));
	/**
	 * https://discord.com/developers/docs/resources/channel/#channel-object-forum-layout-types
	 */
	var ForumLayoutType;
	(function (ForumLayoutType) {
	    /**
	     * No default has been set for forum channel
	     */
	    ForumLayoutType[ForumLayoutType["NotSet"] = 0] = "NotSet";
	    /**
	     * Display posts as a list
	     */
	    ForumLayoutType[ForumLayoutType["ListView"] = 1] = "ListView";
	    /**
	     * Display posts as a collection of tiles
	     */
	    ForumLayoutType[ForumLayoutType["GalleryView"] = 2] = "GalleryView";
	})(ForumLayoutType || (channel$2.ForumLayoutType = ForumLayoutType = {}));
	/**
	 * https://discord.com/developers/docs/resources/channel#channel-object-channel-types
	 */
	var ChannelType;
	(function (ChannelType) {
	    /**
	     * A text channel within a guild
	     */
	    ChannelType[ChannelType["GuildText"] = 0] = "GuildText";
	    /**
	     * A direct message between users
	     */
	    ChannelType[ChannelType["DM"] = 1] = "DM";
	    /**
	     * A voice channel within a guild
	     */
	    ChannelType[ChannelType["GuildVoice"] = 2] = "GuildVoice";
	    /**
	     * A direct message between multiple users
	     */
	    ChannelType[ChannelType["GroupDM"] = 3] = "GroupDM";
	    /**
	     * An organizational category that contains up to 50 channels
	     *
	     * See https://support.discord.com/hc/articles/115001580171
	     */
	    ChannelType[ChannelType["GuildCategory"] = 4] = "GuildCategory";
	    /**
	     * A channel that users can follow and crosspost into their own guild
	     *
	     * See https://support.discord.com/hc/articles/360032008192
	     */
	    ChannelType[ChannelType["GuildAnnouncement"] = 5] = "GuildAnnouncement";
	    /**
	     * A temporary sub-channel within a Guild Announcement channel
	     */
	    ChannelType[ChannelType["AnnouncementThread"] = 10] = "AnnouncementThread";
	    /**
	     * A temporary sub-channel within a Guild Text or Guild Forum channel
	     */
	    ChannelType[ChannelType["PublicThread"] = 11] = "PublicThread";
	    /**
	     * A temporary sub-channel within a Guild Text channel that is only viewable by those invited and those with the Manage Threads permission
	     */
	    ChannelType[ChannelType["PrivateThread"] = 12] = "PrivateThread";
	    /**
	     * A voice channel for hosting events with an audience
	     *
	     * See https://support.discord.com/hc/articles/1500005513722
	     */
	    ChannelType[ChannelType["GuildStageVoice"] = 13] = "GuildStageVoice";
	    /**
	     * The channel in a Student Hub containing the listed servers
	     *
	     * See https://support.discord.com/hc/articles/4406046651927
	     */
	    ChannelType[ChannelType["GuildDirectory"] = 14] = "GuildDirectory";
	    /**
	     * A channel that can only contain threads
	     */
	    ChannelType[ChannelType["GuildForum"] = 15] = "GuildForum";
	    /**
	     * A channel like forum channels but contains media for server subscriptions
	     *
	     * See https://creator-support.discord.com/hc/articles/14346342766743
	     */
	    ChannelType[ChannelType["GuildMedia"] = 16] = "GuildMedia";
	    // EVERYTHING BELOW THIS LINE SHOULD BE OLD NAMES FOR RENAMED ENUM MEMBERS //
	    /**
	     * A channel that users can follow and crosspost into their own guild
	     *
	     * @deprecated This is the old name for {@apilink ChannelType#GuildAnnouncement}
	     *
	     * See https://support.discord.com/hc/articles/360032008192
	     */
	    ChannelType[ChannelType["GuildNews"] = 5] = "GuildNews";
	    /**
	     * A temporary sub-channel within a Guild Announcement channel
	     *
	     * @deprecated This is the old name for {@apilink ChannelType#AnnouncementThread}
	     */
	    // eslint-disable-next-line @typescript-eslint/no-duplicate-enum-values
	    ChannelType[ChannelType["GuildNewsThread"] = 10] = "GuildNewsThread";
	    /**
	     * A temporary sub-channel within a Guild Text channel
	     *
	     * @deprecated This is the old name for {@apilink ChannelType#PublicThread}
	     */
	    ChannelType[ChannelType["GuildPublicThread"] = 11] = "GuildPublicThread";
	    /**
	     * A temporary sub-channel within a Guild Text channel that is only viewable by those invited and those with the Manage Threads permission
	     *
	     * @deprecated This is the old name for {@apilink ChannelType#PrivateThread}
	     */
	    ChannelType[ChannelType["GuildPrivateThread"] = 12] = "GuildPrivateThread";
	})(ChannelType || (channel$2.ChannelType = ChannelType = {}));
	var VideoQualityMode;
	(function (VideoQualityMode) {
	    /**
	     * Discord chooses the quality for optimal performance
	     */
	    VideoQualityMode[VideoQualityMode["Auto"] = 1] = "Auto";
	    /**
	     * 720p
	     */
	    VideoQualityMode[VideoQualityMode["Full"] = 2] = "Full";
	})(VideoQualityMode || (channel$2.VideoQualityMode = VideoQualityMode = {}));
	/**
	 * https://discord.com/developers/docs/resources/channel#message-object-message-types
	 */
	var MessageType;
	(function (MessageType) {
	    MessageType[MessageType["Default"] = 0] = "Default";
	    MessageType[MessageType["RecipientAdd"] = 1] = "RecipientAdd";
	    MessageType[MessageType["RecipientRemove"] = 2] = "RecipientRemove";
	    MessageType[MessageType["Call"] = 3] = "Call";
	    MessageType[MessageType["ChannelNameChange"] = 4] = "ChannelNameChange";
	    MessageType[MessageType["ChannelIconChange"] = 5] = "ChannelIconChange";
	    MessageType[MessageType["ChannelPinnedMessage"] = 6] = "ChannelPinnedMessage";
	    MessageType[MessageType["UserJoin"] = 7] = "UserJoin";
	    MessageType[MessageType["GuildBoost"] = 8] = "GuildBoost";
	    MessageType[MessageType["GuildBoostTier1"] = 9] = "GuildBoostTier1";
	    MessageType[MessageType["GuildBoostTier2"] = 10] = "GuildBoostTier2";
	    MessageType[MessageType["GuildBoostTier3"] = 11] = "GuildBoostTier3";
	    MessageType[MessageType["ChannelFollowAdd"] = 12] = "ChannelFollowAdd";
	    MessageType[MessageType["GuildDiscoveryDisqualified"] = 14] = "GuildDiscoveryDisqualified";
	    MessageType[MessageType["GuildDiscoveryRequalified"] = 15] = "GuildDiscoveryRequalified";
	    MessageType[MessageType["GuildDiscoveryGracePeriodInitialWarning"] = 16] = "GuildDiscoveryGracePeriodInitialWarning";
	    MessageType[MessageType["GuildDiscoveryGracePeriodFinalWarning"] = 17] = "GuildDiscoveryGracePeriodFinalWarning";
	    MessageType[MessageType["ThreadCreated"] = 18] = "ThreadCreated";
	    MessageType[MessageType["Reply"] = 19] = "Reply";
	    MessageType[MessageType["ChatInputCommand"] = 20] = "ChatInputCommand";
	    MessageType[MessageType["ThreadStarterMessage"] = 21] = "ThreadStarterMessage";
	    MessageType[MessageType["GuildInviteReminder"] = 22] = "GuildInviteReminder";
	    MessageType[MessageType["ContextMenuCommand"] = 23] = "ContextMenuCommand";
	    MessageType[MessageType["AutoModerationAction"] = 24] = "AutoModerationAction";
	    MessageType[MessageType["RoleSubscriptionPurchase"] = 25] = "RoleSubscriptionPurchase";
	    MessageType[MessageType["InteractionPremiumUpsell"] = 26] = "InteractionPremiumUpsell";
	    MessageType[MessageType["StageStart"] = 27] = "StageStart";
	    MessageType[MessageType["StageEnd"] = 28] = "StageEnd";
	    MessageType[MessageType["StageSpeaker"] = 29] = "StageSpeaker";
	    /**
	     * @unstable https://github.com/discord/discord-api-docs/pull/5927#discussion_r1107678548
	     */
	    MessageType[MessageType["StageRaiseHand"] = 30] = "StageRaiseHand";
	    MessageType[MessageType["StageTopic"] = 31] = "StageTopic";
	    MessageType[MessageType["GuildApplicationPremiumSubscription"] = 32] = "GuildApplicationPremiumSubscription";
	})(MessageType || (channel$2.MessageType = MessageType = {}));
	/**
	 * https://discord.com/developers/docs/resources/channel#message-object-message-activity-types
	 */
	var MessageActivityType;
	(function (MessageActivityType) {
	    MessageActivityType[MessageActivityType["Join"] = 1] = "Join";
	    MessageActivityType[MessageActivityType["Spectate"] = 2] = "Spectate";
	    MessageActivityType[MessageActivityType["Listen"] = 3] = "Listen";
	    MessageActivityType[MessageActivityType["JoinRequest"] = 5] = "JoinRequest";
	})(MessageActivityType || (channel$2.MessageActivityType = MessageActivityType = {}));
	/**
	 * https://discord.com/developers/docs/resources/channel#message-object-message-flags
	 */
	var MessageFlags;
	(function (MessageFlags) {
	    /**
	     * This message has been published to subscribed channels (via Channel Following)
	     */
	    MessageFlags[MessageFlags["Crossposted"] = 1] = "Crossposted";
	    /**
	     * This message originated from a message in another channel (via Channel Following)
	     */
	    MessageFlags[MessageFlags["IsCrosspost"] = 2] = "IsCrosspost";
	    /**
	     * Do not include any embeds when serializing this message
	     */
	    MessageFlags[MessageFlags["SuppressEmbeds"] = 4] = "SuppressEmbeds";
	    /**
	     * The source message for this crosspost has been deleted (via Channel Following)
	     */
	    MessageFlags[MessageFlags["SourceMessageDeleted"] = 8] = "SourceMessageDeleted";
	    /**
	     * This message came from the urgent message system
	     */
	    MessageFlags[MessageFlags["Urgent"] = 16] = "Urgent";
	    /**
	     * This message has an associated thread, which shares its id
	     */
	    MessageFlags[MessageFlags["HasThread"] = 32] = "HasThread";
	    /**
	     * This message is only visible to the user who invoked the Interaction
	     */
	    MessageFlags[MessageFlags["Ephemeral"] = 64] = "Ephemeral";
	    /**
	     * This message is an Interaction Response and the bot is "thinking"
	     */
	    MessageFlags[MessageFlags["Loading"] = 128] = "Loading";
	    /**
	     * This message failed to mention some roles and add their members to the thread
	     */
	    MessageFlags[MessageFlags["FailedToMentionSomeRolesInThread"] = 256] = "FailedToMentionSomeRolesInThread";
	    /**
	     * @unstable This message flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    MessageFlags[MessageFlags["ShouldShowLinkNotDiscordWarning"] = 1024] = "ShouldShowLinkNotDiscordWarning";
	    /**
	     * This message will not trigger push and desktop notifications
	     */
	    MessageFlags[MessageFlags["SuppressNotifications"] = 4096] = "SuppressNotifications";
	    /**
	     * This message is a voice message
	     */
	    MessageFlags[MessageFlags["IsVoiceMessage"] = 8192] = "IsVoiceMessage";
	})(MessageFlags || (channel$2.MessageFlags = MessageFlags = {}));
	var OverwriteType;
	(function (OverwriteType) {
	    OverwriteType[OverwriteType["Role"] = 0] = "Role";
	    OverwriteType[OverwriteType["Member"] = 1] = "Member";
	})(OverwriteType || (channel$2.OverwriteType = OverwriteType = {}));
	var ThreadAutoArchiveDuration;
	(function (ThreadAutoArchiveDuration) {
	    ThreadAutoArchiveDuration[ThreadAutoArchiveDuration["OneHour"] = 60] = "OneHour";
	    ThreadAutoArchiveDuration[ThreadAutoArchiveDuration["OneDay"] = 1440] = "OneDay";
	    ThreadAutoArchiveDuration[ThreadAutoArchiveDuration["ThreeDays"] = 4320] = "ThreeDays";
	    ThreadAutoArchiveDuration[ThreadAutoArchiveDuration["OneWeek"] = 10080] = "OneWeek";
	})(ThreadAutoArchiveDuration || (channel$2.ThreadAutoArchiveDuration = ThreadAutoArchiveDuration = {}));
	var ThreadMemberFlags;
	(function (ThreadMemberFlags) {
	    /**
	     * @unstable This thread member flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ThreadMemberFlags[ThreadMemberFlags["HasInteracted"] = 1] = "HasInteracted";
	    /**
	     * @unstable This thread member flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ThreadMemberFlags[ThreadMemberFlags["AllMessages"] = 2] = "AllMessages";
	    /**
	     * @unstable This thread member flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ThreadMemberFlags[ThreadMemberFlags["OnlyMentions"] = 4] = "OnlyMentions";
	    /**
	     * @unstable This thread member flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ThreadMemberFlags[ThreadMemberFlags["NoMessages"] = 8] = "NoMessages";
	})(ThreadMemberFlags || (channel$2.ThreadMemberFlags = ThreadMemberFlags = {}));
	/**
	 * https://discord.com/developers/docs/resources/channel#embed-object-embed-types
	 *
	 * @deprecated *Embed types should be considered deprecated and might be removed in a future API version*
	 */
	var EmbedType;
	(function (EmbedType) {
	    /**
	     * Generic embed rendered from embed attributes
	     */
	    EmbedType["Rich"] = "rich";
	    /**
	     * Image embed
	     */
	    EmbedType["Image"] = "image";
	    /**
	     * Video embed
	     */
	    EmbedType["Video"] = "video";
	    /**
	     * Animated gif image embed rendered as a video embed
	     */
	    EmbedType["GIFV"] = "gifv";
	    /**
	     * Article embed
	     */
	    EmbedType["Article"] = "article";
	    /**
	     * Link embed
	     */
	    EmbedType["Link"] = "link";
	    /**
	     * Auto moderation alert embed
	     *
	     * @unstable This embed type is currently not documented by Discord, but it is returned in the auto moderation system messages.
	     */
	    EmbedType["AutoModerationMessage"] = "auto_moderation_message";
	})(EmbedType || (channel$2.EmbedType = EmbedType = {}));
	/**
	 * https://discord.com/developers/docs/resources/channel#attachment-object-attachment-structure-attachment-flags
	 */
	var AttachmentFlags;
	(function (AttachmentFlags) {
	    /**
	     * This attachment has been edited using the remix feature on mobile
	     */
	    AttachmentFlags[AttachmentFlags["IsRemix"] = 4] = "IsRemix";
	})(AttachmentFlags || (channel$2.AttachmentFlags = AttachmentFlags = {}));
	/**
	 * https://discord.com/developers/docs/resources/channel#allowed-mentions-object-allowed-mention-types
	 */
	var AllowedMentionsTypes;
	(function (AllowedMentionsTypes) {
	    /**
	     * Controls @everyone and @here mentions
	     */
	    AllowedMentionsTypes["Everyone"] = "everyone";
	    /**
	     * Controls role mentions
	     */
	    AllowedMentionsTypes["Role"] = "roles";
	    /**
	     * Controls user mentions
	     */
	    AllowedMentionsTypes["User"] = "users";
	})(AllowedMentionsTypes || (channel$2.AllowedMentionsTypes = AllowedMentionsTypes = {}));
	/**
	 * https://discord.com/developers/docs/interactions/message-components#component-object-component-types
	 */
	var ComponentType;
	(function (ComponentType) {
	    /**
	     * Action Row component
	     */
	    ComponentType[ComponentType["ActionRow"] = 1] = "ActionRow";
	    /**
	     * Button component
	     */
	    ComponentType[ComponentType["Button"] = 2] = "Button";
	    /**
	     * Select menu for picking from defined text options
	     */
	    ComponentType[ComponentType["StringSelect"] = 3] = "StringSelect";
	    /**
	     * Text Input component
	     */
	    ComponentType[ComponentType["TextInput"] = 4] = "TextInput";
	    /**
	     * Select menu for users
	     */
	    ComponentType[ComponentType["UserSelect"] = 5] = "UserSelect";
	    /**
	     * Select menu for roles
	     */
	    ComponentType[ComponentType["RoleSelect"] = 6] = "RoleSelect";
	    /**
	     * Select menu for users and roles
	     */
	    ComponentType[ComponentType["MentionableSelect"] = 7] = "MentionableSelect";
	    /**
	     * Select menu for channels
	     */
	    ComponentType[ComponentType["ChannelSelect"] = 8] = "ChannelSelect";
	    // EVERYTHING BELOW THIS LINE SHOULD BE OLD NAMES FOR RENAMED ENUM MEMBERS //
	    /**
	     * Select menu for picking from defined text options
	     *
	     * @deprecated This is the old name for {@apilink ComponentType#StringSelect}
	     */
	    ComponentType[ComponentType["SelectMenu"] = 3] = "SelectMenu";
	})(ComponentType || (channel$2.ComponentType = ComponentType = {}));
	/**
	 * https://discord.com/developers/docs/interactions/message-components#button-object-button-styles
	 */
	var ButtonStyle;
	(function (ButtonStyle) {
	    ButtonStyle[ButtonStyle["Primary"] = 1] = "Primary";
	    ButtonStyle[ButtonStyle["Secondary"] = 2] = "Secondary";
	    ButtonStyle[ButtonStyle["Success"] = 3] = "Success";
	    ButtonStyle[ButtonStyle["Danger"] = 4] = "Danger";
	    ButtonStyle[ButtonStyle["Link"] = 5] = "Link";
	})(ButtonStyle || (channel$2.ButtonStyle = ButtonStyle = {}));
	/**
	 * https://discord.com/developers/docs/interactions/message-components#text-inputs-text-input-styles
	 */
	var TextInputStyle;
	(function (TextInputStyle) {
	    TextInputStyle[TextInputStyle["Short"] = 1] = "Short";
	    TextInputStyle[TextInputStyle["Paragraph"] = 2] = "Paragraph";
	})(TextInputStyle || (channel$2.TextInputStyle = TextInputStyle = {}));
	/**
	 * https://discord.com/developers/docs/interactions/message-components#select-menu-object-select-default-value-structure
	 */
	var SelectMenuDefaultValueType;
	(function (SelectMenuDefaultValueType) {
	    SelectMenuDefaultValueType["Channel"] = "channel";
	    SelectMenuDefaultValueType["Role"] = "role";
	    SelectMenuDefaultValueType["User"] = "user";
	})(SelectMenuDefaultValueType || (channel$2.SelectMenuDefaultValueType = SelectMenuDefaultValueType = {}));
	/**
	 * https://discord.com/developers/docs/resources/channel#channel-object-channel-flags
	 */
	var ChannelFlags;
	(function (ChannelFlags) {
	    /**
	     * @unstable This channel flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ChannelFlags[ChannelFlags["GuildFeedRemoved"] = 1] = "GuildFeedRemoved";
	    /**
	     * This thread is pinned to the top of its parent forum channel
	     */
	    ChannelFlags[ChannelFlags["Pinned"] = 2] = "Pinned";
	    /**
	     * @unstable This channel flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ChannelFlags[ChannelFlags["ActiveChannelsRemoved"] = 4] = "ActiveChannelsRemoved";
	    /**
	     * Whether a tag is required to be specified when creating a thread in a forum channel.
	     * Tags are specified in the `applied_tags` field
	     */
	    ChannelFlags[ChannelFlags["RequireTag"] = 16] = "RequireTag";
	    /**
	     * @unstable This channel flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ChannelFlags[ChannelFlags["IsSpam"] = 32] = "IsSpam";
	    /**
	     * @unstable This channel flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ChannelFlags[ChannelFlags["IsGuildResourceChannel"] = 128] = "IsGuildResourceChannel";
	    /**
	     * @unstable This channel flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ChannelFlags[ChannelFlags["ClydeAI"] = 256] = "ClydeAI";
	    /**
	     * @unstable This channel flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    ChannelFlags[ChannelFlags["IsScheduledForDeletion"] = 512] = "IsScheduledForDeletion";
	    /**
	     * Whether media download options are hidden.
	     */
	    ChannelFlags[ChannelFlags["HideMediaDownloadOptions"] = 32768] = "HideMediaDownloadOptions";
	})(ChannelFlags || (channel$2.ChannelFlags = ChannelFlags = {}));
	
	return channel$2;
}

var emoji$1 = {};

var hasRequiredEmoji$1;

function requireEmoji$1 () {
	if (hasRequiredEmoji$1) return emoji$1;
	hasRequiredEmoji$1 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/emoji
	 */
	Object.defineProperty(emoji$1, "__esModule", { value: true });
	
	return emoji$1;
}

var gateway$1 = {};

var hasRequiredGateway$1;

function requireGateway$1 () {
	if (hasRequiredGateway$1) return gateway$1;
	hasRequiredGateway$1 = 1;
	/**
	 * Types extracted from
	 *  - https://discord.com/developers/docs/topics/gateway
	 *  - https://discord.com/developers/docs/topics/gateway-events
	 */
	Object.defineProperty(gateway$1, "__esModule", { value: true });
	gateway$1.ActivityFlags = gateway$1.ActivityType = gateway$1.ActivityPlatform = gateway$1.PresenceUpdateStatus = void 0;
	/**
	 * https://discord.com/developers/docs/topics/gateway-events#update-presence-status-types
	 */
	var PresenceUpdateStatus;
	(function (PresenceUpdateStatus) {
	    PresenceUpdateStatus["Online"] = "online";
	    PresenceUpdateStatus["DoNotDisturb"] = "dnd";
	    PresenceUpdateStatus["Idle"] = "idle";
	    /**
	     * Invisible and shown as offline
	     */
	    PresenceUpdateStatus["Invisible"] = "invisible";
	    PresenceUpdateStatus["Offline"] = "offline";
	})(PresenceUpdateStatus || (gateway$1.PresenceUpdateStatus = PresenceUpdateStatus = {}));
	/**
	 * @unstable This enum is currently not documented by Discord but has known values which we will try to keep up to date.
	 * Values might be added or removed without a major version bump.
	 */
	var ActivityPlatform;
	(function (ActivityPlatform) {
	    ActivityPlatform["Desktop"] = "desktop";
	    ActivityPlatform["Xbox"] = "xbox";
	    ActivityPlatform["Samsung"] = "samsung";
	    ActivityPlatform["IOS"] = "ios";
	    ActivityPlatform["Android"] = "android";
	    ActivityPlatform["Embedded"] = "embedded";
	    ActivityPlatform["PS4"] = "ps4";
	    ActivityPlatform["PS5"] = "ps5";
	})(ActivityPlatform || (gateway$1.ActivityPlatform = ActivityPlatform = {}));
	/**
	 * https://discord.com/developers/docs/topics/gateway-events#activity-object-activity-types
	 */
	var ActivityType;
	(function (ActivityType) {
	    /**
	     * Playing {game}
	     */
	    ActivityType[ActivityType["Playing"] = 0] = "Playing";
	    /**
	     * Streaming {details}
	     */
	    ActivityType[ActivityType["Streaming"] = 1] = "Streaming";
	    /**
	     * Listening to {name}
	     */
	    ActivityType[ActivityType["Listening"] = 2] = "Listening";
	    /**
	     * Watching {details}
	     */
	    ActivityType[ActivityType["Watching"] = 3] = "Watching";
	    /**
	     * {emoji} {state}
	     */
	    ActivityType[ActivityType["Custom"] = 4] = "Custom";
	    /**
	     * Competing in {name}
	     */
	    ActivityType[ActivityType["Competing"] = 5] = "Competing";
	})(ActivityType || (gateway$1.ActivityType = ActivityType = {}));
	/**
	 * https://discord.com/developers/docs/topics/gateway-events#activity-object-activity-flags
	 */
	var ActivityFlags;
	(function (ActivityFlags) {
	    ActivityFlags[ActivityFlags["Instance"] = 1] = "Instance";
	    ActivityFlags[ActivityFlags["Join"] = 2] = "Join";
	    ActivityFlags[ActivityFlags["Spectate"] = 4] = "Spectate";
	    ActivityFlags[ActivityFlags["JoinRequest"] = 8] = "JoinRequest";
	    ActivityFlags[ActivityFlags["Sync"] = 16] = "Sync";
	    ActivityFlags[ActivityFlags["Play"] = 32] = "Play";
	    ActivityFlags[ActivityFlags["PartyPrivacyFriends"] = 64] = "PartyPrivacyFriends";
	    ActivityFlags[ActivityFlags["PartyPrivacyVoiceChannel"] = 128] = "PartyPrivacyVoiceChannel";
	    ActivityFlags[ActivityFlags["Embedded"] = 256] = "Embedded";
	})(ActivityFlags || (gateway$1.ActivityFlags = ActivityFlags = {}));
	
	return gateway$1;
}

var guild$1 = {};

var hasRequiredGuild$2;

function requireGuild$2 () {
	if (hasRequiredGuild$2) return guild$1;
	hasRequiredGuild$2 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/guild
	 */
	Object.defineProperty(guild$1, "__esModule", { value: true });
	guild$1.GuildOnboardingPromptType = guild$1.GuildOnboardingMode = guild$1.MembershipScreeningFieldType = guild$1.GuildWidgetStyle = guild$1.IntegrationExpireBehavior = guild$1.GuildMemberFlags = guild$1.GuildFeature = guild$1.GuildSystemChannelFlags = guild$1.GuildHubType = guild$1.GuildPremiumTier = guild$1.GuildVerificationLevel = guild$1.GuildNSFWLevel = guild$1.GuildMFALevel = guild$1.GuildExplicitContentFilter = guild$1.GuildDefaultMessageNotifications = void 0;
	/**
	 * https://discord.com/developers/docs/resources/guild#guild-object-default-message-notification-level
	 */
	var GuildDefaultMessageNotifications;
	(function (GuildDefaultMessageNotifications) {
	    GuildDefaultMessageNotifications[GuildDefaultMessageNotifications["AllMessages"] = 0] = "AllMessages";
	    GuildDefaultMessageNotifications[GuildDefaultMessageNotifications["OnlyMentions"] = 1] = "OnlyMentions";
	})(GuildDefaultMessageNotifications || (guild$1.GuildDefaultMessageNotifications = GuildDefaultMessageNotifications = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild#guild-object-explicit-content-filter-level
	 */
	var GuildExplicitContentFilter;
	(function (GuildExplicitContentFilter) {
	    GuildExplicitContentFilter[GuildExplicitContentFilter["Disabled"] = 0] = "Disabled";
	    GuildExplicitContentFilter[GuildExplicitContentFilter["MembersWithoutRoles"] = 1] = "MembersWithoutRoles";
	    GuildExplicitContentFilter[GuildExplicitContentFilter["AllMembers"] = 2] = "AllMembers";
	})(GuildExplicitContentFilter || (guild$1.GuildExplicitContentFilter = GuildExplicitContentFilter = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild#guild-object-mfa-level
	 */
	var GuildMFALevel;
	(function (GuildMFALevel) {
	    GuildMFALevel[GuildMFALevel["None"] = 0] = "None";
	    GuildMFALevel[GuildMFALevel["Elevated"] = 1] = "Elevated";
	})(GuildMFALevel || (guild$1.GuildMFALevel = GuildMFALevel = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild#guild-object-guild-nsfw-level
	 */
	var GuildNSFWLevel;
	(function (GuildNSFWLevel) {
	    GuildNSFWLevel[GuildNSFWLevel["Default"] = 0] = "Default";
	    GuildNSFWLevel[GuildNSFWLevel["Explicit"] = 1] = "Explicit";
	    GuildNSFWLevel[GuildNSFWLevel["Safe"] = 2] = "Safe";
	    GuildNSFWLevel[GuildNSFWLevel["AgeRestricted"] = 3] = "AgeRestricted";
	})(GuildNSFWLevel || (guild$1.GuildNSFWLevel = GuildNSFWLevel = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild#guild-object-verification-level
	 */
	var GuildVerificationLevel;
	(function (GuildVerificationLevel) {
	    /**
	     * Unrestricted
	     */
	    GuildVerificationLevel[GuildVerificationLevel["None"] = 0] = "None";
	    /**
	     * Must have verified email on account
	     */
	    GuildVerificationLevel[GuildVerificationLevel["Low"] = 1] = "Low";
	    /**
	     * Must be registered on Discord for longer than 5 minutes
	     */
	    GuildVerificationLevel[GuildVerificationLevel["Medium"] = 2] = "Medium";
	    /**
	     * Must be a member of the guild for longer than 10 minutes
	     */
	    GuildVerificationLevel[GuildVerificationLevel["High"] = 3] = "High";
	    /**
	     * Must have a verified phone number
	     */
	    GuildVerificationLevel[GuildVerificationLevel["VeryHigh"] = 4] = "VeryHigh";
	})(GuildVerificationLevel || (guild$1.GuildVerificationLevel = GuildVerificationLevel = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild#guild-object-premium-tier
	 */
	var GuildPremiumTier;
	(function (GuildPremiumTier) {
	    GuildPremiumTier[GuildPremiumTier["None"] = 0] = "None";
	    GuildPremiumTier[GuildPremiumTier["Tier1"] = 1] = "Tier1";
	    GuildPremiumTier[GuildPremiumTier["Tier2"] = 2] = "Tier2";
	    GuildPremiumTier[GuildPremiumTier["Tier3"] = 3] = "Tier3";
	})(GuildPremiumTier || (guild$1.GuildPremiumTier = GuildPremiumTier = {}));
	var GuildHubType;
	(function (GuildHubType) {
	    GuildHubType[GuildHubType["Default"] = 0] = "Default";
	    GuildHubType[GuildHubType["HighSchool"] = 1] = "HighSchool";
	    GuildHubType[GuildHubType["College"] = 2] = "College";
	})(GuildHubType || (guild$1.GuildHubType = GuildHubType = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild#guild-object-system-channel-flags
	 */
	var GuildSystemChannelFlags;
	(function (GuildSystemChannelFlags) {
	    /**
	     * Suppress member join notifications
	     */
	    GuildSystemChannelFlags[GuildSystemChannelFlags["SuppressJoinNotifications"] = 1] = "SuppressJoinNotifications";
	    /**
	     * Suppress server boost notifications
	     */
	    GuildSystemChannelFlags[GuildSystemChannelFlags["SuppressPremiumSubscriptions"] = 2] = "SuppressPremiumSubscriptions";
	    /**
	     * Suppress server setup tips
	     */
	    GuildSystemChannelFlags[GuildSystemChannelFlags["SuppressGuildReminderNotifications"] = 4] = "SuppressGuildReminderNotifications";
	    /**
	     * Hide member join sticker reply buttons
	     */
	    GuildSystemChannelFlags[GuildSystemChannelFlags["SuppressJoinNotificationReplies"] = 8] = "SuppressJoinNotificationReplies";
	    /**
	     * Suppress role subscription purchase and renewal notifications
	     */
	    GuildSystemChannelFlags[GuildSystemChannelFlags["SuppressRoleSubscriptionPurchaseNotifications"] = 16] = "SuppressRoleSubscriptionPurchaseNotifications";
	    /**
	     * Hide role subscription sticker reply buttons
	     */
	    GuildSystemChannelFlags[GuildSystemChannelFlags["SuppressRoleSubscriptionPurchaseNotificationReplies"] = 32] = "SuppressRoleSubscriptionPurchaseNotificationReplies";
	})(GuildSystemChannelFlags || (guild$1.GuildSystemChannelFlags = GuildSystemChannelFlags = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild#guild-object-guild-features
	 */
	var GuildFeature;
	(function (GuildFeature) {
	    /**
	     * Guild has access to set an animated guild banner image
	     */
	    GuildFeature["AnimatedBanner"] = "ANIMATED_BANNER";
	    /**
	     * Guild has access to set an animated guild icon
	     */
	    GuildFeature["AnimatedIcon"] = "ANIMATED_ICON";
	    /**
	     * Guild is using the old permissions configuration behavior
	     *
	     * See https://discord.com/developers/docs/change-log#upcoming-application-command-permission-changes
	     */
	    GuildFeature["ApplicationCommandPermissionsV2"] = "APPLICATION_COMMAND_PERMISSIONS_V2";
	    /**
	     * Guild has set up auto moderation rules
	     */
	    GuildFeature["AutoModeration"] = "AUTO_MODERATION";
	    /**
	     * Guild has access to set a guild banner image
	     */
	    GuildFeature["Banner"] = "BANNER";
	    /**
	     * Guild can enable welcome screen, Membership Screening and discovery, and receives community updates
	     */
	    GuildFeature["Community"] = "COMMUNITY";
	    /**
	     * Guild has enabled monetization
	     */
	    GuildFeature["CreatorMonetizableProvisional"] = "CREATOR_MONETIZABLE_PROVISIONAL";
	    /**
	     * Guild has enabled the role subscription promo page
	     */
	    GuildFeature["CreatorStorePage"] = "CREATOR_STORE_PAGE";
	    /**
	     * Guild has been set as a support server on the App Directory
	     */
	    GuildFeature["DeveloperSupportServer"] = "DEVELOPER_SUPPORT_SERVER";
	    /**
	     * Guild is able to be discovered in the directory
	     */
	    GuildFeature["Discoverable"] = "DISCOVERABLE";
	    /**
	     * Guild is able to be featured in the directory
	     */
	    GuildFeature["Featurable"] = "FEATURABLE";
	    /**
	     * Guild is listed in a directory channel
	     */
	    GuildFeature["HasDirectoryEntry"] = "HAS_DIRECTORY_ENTRY";
	    /**
	     * Guild is a Student Hub
	     *
	     * See https://support.discord.com/hc/articles/4406046651927
	     *
	     * @unstable This feature is currently not documented by Discord, but has known value
	     */
	    GuildFeature["Hub"] = "HUB";
	    /**
	     * Guild has disabled invite usage, preventing users from joining
	     */
	    GuildFeature["InvitesDisabled"] = "INVITES_DISABLED";
	    /**
	     * Guild has access to set an invite splash background
	     */
	    GuildFeature["InviteSplash"] = "INVITE_SPLASH";
	    /**
	     * Guild is in a Student Hub
	     *
	     * See https://support.discord.com/hc/articles/4406046651927
	     *
	     * @unstable This feature is currently not documented by Discord, but has known value
	     */
	    GuildFeature["LinkedToHub"] = "LINKED_TO_HUB";
	    /**
	     * Guild has enabled Membership Screening
	     */
	    GuildFeature["MemberVerificationGateEnabled"] = "MEMBER_VERIFICATION_GATE_ENABLED";
	    /**
	     * Guild has enabled monetization
	     *
	     * @unstable This feature is no longer documented by Discord
	     */
	    GuildFeature["MonetizationEnabled"] = "MONETIZATION_ENABLED";
	    /**
	     * Guild has increased custom sticker slots
	     */
	    GuildFeature["MoreStickers"] = "MORE_STICKERS";
	    /**
	     * Guild has access to create news channels
	     */
	    GuildFeature["News"] = "NEWS";
	    /**
	     * Guild is partnered
	     */
	    GuildFeature["Partnered"] = "PARTNERED";
	    /**
	     * Guild can be previewed before joining via Membership Screening or the directory
	     */
	    GuildFeature["PreviewEnabled"] = "PREVIEW_ENABLED";
	    /**
	     * Guild has access to create private threads
	     */
	    GuildFeature["PrivateThreads"] = "PRIVATE_THREADS";
	    /**
	     * Guild has disabled alerts for join raids in the configured safety alerts channel
	     */
	    GuildFeature["RaidAlertsDisabled"] = "RAID_ALERTS_DISABLED";
	    GuildFeature["RelayEnabled"] = "RELAY_ENABLED";
	    /**
	     * Guild is able to set role icons
	     */
	    GuildFeature["RoleIcons"] = "ROLE_ICONS";
	    /**
	     * Guild has role subscriptions that can be purchased
	     */
	    GuildFeature["RoleSubscriptionsAvailableForPurchase"] = "ROLE_SUBSCRIPTIONS_AVAILABLE_FOR_PURCHASE";
	    /**
	     * Guild has enabled role subscriptions
	     */
	    GuildFeature["RoleSubscriptionsEnabled"] = "ROLE_SUBSCRIPTIONS_ENABLED";
	    /**
	     * Guild has enabled ticketed events
	     */
	    GuildFeature["TicketedEventsEnabled"] = "TICKETED_EVENTS_ENABLED";
	    /**
	     * Guild has access to set a vanity URL
	     */
	    GuildFeature["VanityURL"] = "VANITY_URL";
	    /**
	     * Guild is verified
	     */
	    GuildFeature["Verified"] = "VERIFIED";
	    /**
	     * Guild has access to set 384kbps bitrate in voice (previously VIP voice servers)
	     */
	    GuildFeature["VIPRegions"] = "VIP_REGIONS";
	    /**
	     * Guild has enabled the welcome screen
	     */
	    GuildFeature["WelcomeScreenEnabled"] = "WELCOME_SCREEN_ENABLED";
	})(GuildFeature || (guild$1.GuildFeature = GuildFeature = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild#guild-member-object-guild-member-flags
	 */
	var GuildMemberFlags;
	(function (GuildMemberFlags) {
	    /**
	     * Member has left and rejoined the guild
	     */
	    GuildMemberFlags[GuildMemberFlags["DidRejoin"] = 1] = "DidRejoin";
	    /**
	     * Member has completed onboarding
	     */
	    GuildMemberFlags[GuildMemberFlags["CompletedOnboarding"] = 2] = "CompletedOnboarding";
	    /**
	     * Member bypasses guild verification requirements
	     */
	    GuildMemberFlags[GuildMemberFlags["BypassesVerification"] = 4] = "BypassesVerification";
	    /**
	     * Member has started onboarding
	     */
	    GuildMemberFlags[GuildMemberFlags["StartedOnboarding"] = 8] = "StartedOnboarding";
	    /**
	     * @unstable This guild member flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    GuildMemberFlags[GuildMemberFlags["StartedHomeActions"] = 32] = "StartedHomeActions";
	    /**
	     * @unstable This guild member flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    GuildMemberFlags[GuildMemberFlags["CompletedHomeActions"] = 64] = "CompletedHomeActions";
	    /**
	     * @unstable This guild member flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    GuildMemberFlags[GuildMemberFlags["AutomodQuarantinedUsernameOrGuildNickname"] = 128] = "AutomodQuarantinedUsernameOrGuildNickname";
	    /**
	     * @unstable This guild member flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    GuildMemberFlags[GuildMemberFlags["AutomodQuarantinedBio"] = 256] = "AutomodQuarantinedBio";
	})(GuildMemberFlags || (guild$1.GuildMemberFlags = GuildMemberFlags = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild#integration-object-integration-expire-behaviors
	 */
	var IntegrationExpireBehavior;
	(function (IntegrationExpireBehavior) {
	    IntegrationExpireBehavior[IntegrationExpireBehavior["RemoveRole"] = 0] = "RemoveRole";
	    IntegrationExpireBehavior[IntegrationExpireBehavior["Kick"] = 1] = "Kick";
	})(IntegrationExpireBehavior || (guild$1.IntegrationExpireBehavior = IntegrationExpireBehavior = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild#get-guild-widget-image-widget-style-options
	 */
	var GuildWidgetStyle;
	(function (GuildWidgetStyle) {
	    /**
	     * Shield style widget with Discord icon and guild members online count
	     */
	    GuildWidgetStyle["Shield"] = "shield";
	    /**
	     * Large image with guild icon, name and online count. "POWERED BY DISCORD" as the footer of the widget
	     */
	    GuildWidgetStyle["Banner1"] = "banner1";
	    /**
	     * Smaller widget style with guild icon, name and online count. Split on the right with Discord logo
	     */
	    GuildWidgetStyle["Banner2"] = "banner2";
	    /**
	     * Large image with guild icon, name and online count. In the footer, Discord logo on the left and "Chat Now" on the right
	     */
	    GuildWidgetStyle["Banner3"] = "banner3";
	    /**
	     * Large Discord logo at the top of the widget. Guild icon, name and online count in the middle portion of the widget
	     * and a "JOIN MY SERVER" button at the bottom
	     */
	    GuildWidgetStyle["Banner4"] = "banner4";
	})(GuildWidgetStyle || (guild$1.GuildWidgetStyle = GuildWidgetStyle = {}));
	var MembershipScreeningFieldType;
	(function (MembershipScreeningFieldType) {
	    /**
	     * Server Rules
	     */
	    MembershipScreeningFieldType["Terms"] = "TERMS";
	})(MembershipScreeningFieldType || (guild$1.MembershipScreeningFieldType = MembershipScreeningFieldType = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild#guild-onboarding-object-onboarding-mode
	 */
	var GuildOnboardingMode;
	(function (GuildOnboardingMode) {
	    /**
	     * Counts only Default Channels towards constraints
	     */
	    GuildOnboardingMode[GuildOnboardingMode["OnboardingDefault"] = 0] = "OnboardingDefault";
	    /**
	     * Counts Default Channels and Questions towards constraints
	     */
	    GuildOnboardingMode[GuildOnboardingMode["OnboardingAdvanced"] = 1] = "OnboardingAdvanced";
	})(GuildOnboardingMode || (guild$1.GuildOnboardingMode = GuildOnboardingMode = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild#guild-onboarding-object-prompt-types
	 */
	var GuildOnboardingPromptType;
	(function (GuildOnboardingPromptType) {
	    GuildOnboardingPromptType[GuildOnboardingPromptType["MultipleChoice"] = 0] = "MultipleChoice";
	    GuildOnboardingPromptType[GuildOnboardingPromptType["Dropdown"] = 1] = "Dropdown";
	})(GuildOnboardingPromptType || (guild$1.GuildOnboardingPromptType = GuildOnboardingPromptType = {}));
	
	return guild$1;
}

var guildScheduledEvent$1 = {};

var hasRequiredGuildScheduledEvent$1;

function requireGuildScheduledEvent$1 () {
	if (hasRequiredGuildScheduledEvent$1) return guildScheduledEvent$1;
	hasRequiredGuildScheduledEvent$1 = 1;
	Object.defineProperty(guildScheduledEvent$1, "__esModule", { value: true });
	guildScheduledEvent$1.GuildScheduledEventPrivacyLevel = guildScheduledEvent$1.GuildScheduledEventStatus = guildScheduledEvent$1.GuildScheduledEventEntityType = void 0;
	/**
	 * https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-object-guild-scheduled-event-entity-types
	 */
	var GuildScheduledEventEntityType;
	(function (GuildScheduledEventEntityType) {
	    GuildScheduledEventEntityType[GuildScheduledEventEntityType["StageInstance"] = 1] = "StageInstance";
	    GuildScheduledEventEntityType[GuildScheduledEventEntityType["Voice"] = 2] = "Voice";
	    GuildScheduledEventEntityType[GuildScheduledEventEntityType["External"] = 3] = "External";
	})(GuildScheduledEventEntityType || (guildScheduledEvent$1.GuildScheduledEventEntityType = GuildScheduledEventEntityType = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-object-guild-scheduled-event-status
	 */
	var GuildScheduledEventStatus;
	(function (GuildScheduledEventStatus) {
	    GuildScheduledEventStatus[GuildScheduledEventStatus["Scheduled"] = 1] = "Scheduled";
	    GuildScheduledEventStatus[GuildScheduledEventStatus["Active"] = 2] = "Active";
	    GuildScheduledEventStatus[GuildScheduledEventStatus["Completed"] = 3] = "Completed";
	    GuildScheduledEventStatus[GuildScheduledEventStatus["Canceled"] = 4] = "Canceled";
	})(GuildScheduledEventStatus || (guildScheduledEvent$1.GuildScheduledEventStatus = GuildScheduledEventStatus = {}));
	/**
	 * https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-object-guild-scheduled-event-privacy-level
	 */
	var GuildScheduledEventPrivacyLevel;
	(function (GuildScheduledEventPrivacyLevel) {
	    /**
	     * The scheduled event is only accessible to guild members
	     */
	    GuildScheduledEventPrivacyLevel[GuildScheduledEventPrivacyLevel["GuildOnly"] = 2] = "GuildOnly";
	})(GuildScheduledEventPrivacyLevel || (guildScheduledEvent$1.GuildScheduledEventPrivacyLevel = GuildScheduledEventPrivacyLevel = {}));
	
	return guildScheduledEvent$1;
}

var interactions$1 = {};

var applicationCommands = {};

var chatInput = {};

var attachment = {};

var hasRequiredAttachment;

function requireAttachment () {
	if (hasRequiredAttachment) return attachment;
	hasRequiredAttachment = 1;
	Object.defineProperty(attachment, "__esModule", { value: true });
	
	return attachment;
}

var base$1 = {};

var hasRequiredBase$1;

function requireBase$1 () {
	if (hasRequiredBase$1) return base$1;
	hasRequiredBase$1 = 1;
	Object.defineProperty(base$1, "__esModule", { value: true });
	
	return base$1;
}

var boolean = {};

var hasRequiredBoolean;

function requireBoolean () {
	if (hasRequiredBoolean) return boolean;
	hasRequiredBoolean = 1;
	Object.defineProperty(boolean, "__esModule", { value: true });
	
	return boolean;
}

var channel$1 = {};

var hasRequiredChannel$1;

function requireChannel$1 () {
	if (hasRequiredChannel$1) return channel$1;
	hasRequiredChannel$1 = 1;
	Object.defineProperty(channel$1, "__esModule", { value: true });
	
	return channel$1;
}

var integer = {};

var hasRequiredInteger;

function requireInteger () {
	if (hasRequiredInteger) return integer;
	hasRequiredInteger = 1;
	Object.defineProperty(integer, "__esModule", { value: true });
	
	return integer;
}

var mentionable = {};

var hasRequiredMentionable;

function requireMentionable () {
	if (hasRequiredMentionable) return mentionable;
	hasRequiredMentionable = 1;
	Object.defineProperty(mentionable, "__esModule", { value: true });
	
	return mentionable;
}

var number = {};

var hasRequiredNumber;

function requireNumber () {
	if (hasRequiredNumber) return number;
	hasRequiredNumber = 1;
	Object.defineProperty(number, "__esModule", { value: true });
	
	return number;
}

var role = {};

var hasRequiredRole;

function requireRole () {
	if (hasRequiredRole) return role;
	hasRequiredRole = 1;
	Object.defineProperty(role, "__esModule", { value: true });
	
	return role;
}

var shared = {};

var hasRequiredShared;

function requireShared () {
	if (hasRequiredShared) return shared;
	hasRequiredShared = 1;
	Object.defineProperty(shared, "__esModule", { value: true });
	shared.ApplicationCommandOptionType = void 0;
	/**
	 * https://discord.com/developers/docs/interactions/application-commands#application-command-object-application-command-option-type
	 */
	var ApplicationCommandOptionType;
	(function (ApplicationCommandOptionType) {
	    ApplicationCommandOptionType[ApplicationCommandOptionType["Subcommand"] = 1] = "Subcommand";
	    ApplicationCommandOptionType[ApplicationCommandOptionType["SubcommandGroup"] = 2] = "SubcommandGroup";
	    ApplicationCommandOptionType[ApplicationCommandOptionType["String"] = 3] = "String";
	    ApplicationCommandOptionType[ApplicationCommandOptionType["Integer"] = 4] = "Integer";
	    ApplicationCommandOptionType[ApplicationCommandOptionType["Boolean"] = 5] = "Boolean";
	    ApplicationCommandOptionType[ApplicationCommandOptionType["User"] = 6] = "User";
	    ApplicationCommandOptionType[ApplicationCommandOptionType["Channel"] = 7] = "Channel";
	    ApplicationCommandOptionType[ApplicationCommandOptionType["Role"] = 8] = "Role";
	    ApplicationCommandOptionType[ApplicationCommandOptionType["Mentionable"] = 9] = "Mentionable";
	    ApplicationCommandOptionType[ApplicationCommandOptionType["Number"] = 10] = "Number";
	    ApplicationCommandOptionType[ApplicationCommandOptionType["Attachment"] = 11] = "Attachment";
	})(ApplicationCommandOptionType || (shared.ApplicationCommandOptionType = ApplicationCommandOptionType = {}));
	
	return shared;
}

var string = {};

var hasRequiredString;

function requireString () {
	if (hasRequiredString) return string;
	hasRequiredString = 1;
	Object.defineProperty(string, "__esModule", { value: true });
	
	return string;
}

var subcommand = {};

var hasRequiredSubcommand;

function requireSubcommand () {
	if (hasRequiredSubcommand) return subcommand;
	hasRequiredSubcommand = 1;
	Object.defineProperty(subcommand, "__esModule", { value: true });
	
	return subcommand;
}

var subcommandGroup = {};

var hasRequiredSubcommandGroup;

function requireSubcommandGroup () {
	if (hasRequiredSubcommandGroup) return subcommandGroup;
	hasRequiredSubcommandGroup = 1;
	Object.defineProperty(subcommandGroup, "__esModule", { value: true });
	
	return subcommandGroup;
}

var user$2 = {};

var hasRequiredUser$2;

function requireUser$2 () {
	if (hasRequiredUser$2) return user$2;
	hasRequiredUser$2 = 1;
	Object.defineProperty(user$2, "__esModule", { value: true });
	
	return user$2;
}

var hasRequiredChatInput;

function requireChatInput () {
	if (hasRequiredChatInput) return chatInput;
	hasRequiredChatInput = 1;
	(function (exports) {
		var __createBinding = (chatInput && chatInput.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (chatInput && chatInput.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(requireAttachment(), exports);
		__exportStar(requireBase$1(), exports);
		__exportStar(requireBoolean(), exports);
		__exportStar(requireChannel$1(), exports);
		__exportStar(requireInteger(), exports);
		__exportStar(requireMentionable(), exports);
		__exportStar(requireNumber(), exports);
		__exportStar(requireRole(), exports);
		__exportStar(requireShared(), exports);
		__exportStar(requireString(), exports);
		__exportStar(requireSubcommand(), exports);
		__exportStar(requireSubcommandGroup(), exports);
		__exportStar(requireUser$2(), exports);
		
	} (chatInput));
	return chatInput;
}

var contextMenu = {};

var hasRequiredContextMenu;

function requireContextMenu () {
	if (hasRequiredContextMenu) return contextMenu;
	hasRequiredContextMenu = 1;
	Object.defineProperty(contextMenu, "__esModule", { value: true });
	
	return contextMenu;
}

var permissions$1 = {};

var hasRequiredPermissions$1;

function requirePermissions$1 () {
	if (hasRequiredPermissions$1) return permissions$1;
	hasRequiredPermissions$1 = 1;
	Object.defineProperty(permissions$1, "__esModule", { value: true });
	permissions$1.APIApplicationCommandPermissionsConstant = permissions$1.ApplicationCommandPermissionType = void 0;
	/**
	 * https://discord.com/developers/docs/interactions/application-commands#application-command-permissions-object-application-command-permission-type
	 */
	var ApplicationCommandPermissionType;
	(function (ApplicationCommandPermissionType) {
	    ApplicationCommandPermissionType[ApplicationCommandPermissionType["Role"] = 1] = "Role";
	    ApplicationCommandPermissionType[ApplicationCommandPermissionType["User"] = 2] = "User";
	    ApplicationCommandPermissionType[ApplicationCommandPermissionType["Channel"] = 3] = "Channel";
	})(ApplicationCommandPermissionType || (permissions$1.ApplicationCommandPermissionType = ApplicationCommandPermissionType = {}));
	/**
	 * https://discord.com/developers/docs/interactions/application-commands#application-command-permissions-object-application-command-permissions-constants
	 */
	permissions$1.APIApplicationCommandPermissionsConstant = {
	    // eslint-disable-next-line unicorn/prefer-native-coercion-functions
	    Everyone: (guildId) => String(guildId),
	    AllChannels: (guildId) => String(BigInt(guildId) - 1n),
	};
	
	return permissions$1;
}

var hasRequiredApplicationCommands;

function requireApplicationCommands () {
	if (hasRequiredApplicationCommands) return applicationCommands;
	hasRequiredApplicationCommands = 1;
	(function (exports) {
		var __createBinding = (applicationCommands && applicationCommands.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (applicationCommands && applicationCommands.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.ApplicationCommandType = void 0;
		__exportStar(requireChatInput(), exports);
		__exportStar(requireContextMenu(), exports);
		__exportStar(requirePermissions$1(), exports);
		/**
		 * https://discord.com/developers/docs/interactions/application-commands#application-command-object-application-command-types
		 */
		var ApplicationCommandType;
		(function (ApplicationCommandType) {
		    ApplicationCommandType[ApplicationCommandType["ChatInput"] = 1] = "ChatInput";
		    ApplicationCommandType[ApplicationCommandType["User"] = 2] = "User";
		    ApplicationCommandType[ApplicationCommandType["Message"] = 3] = "Message";
		})(ApplicationCommandType || (exports.ApplicationCommandType = ApplicationCommandType = {}));
		
	} (applicationCommands));
	return applicationCommands;
}

var autocomplete = {};

var hasRequiredAutocomplete;

function requireAutocomplete () {
	if (hasRequiredAutocomplete) return autocomplete;
	hasRequiredAutocomplete = 1;
	Object.defineProperty(autocomplete, "__esModule", { value: true });
	
	return autocomplete;
}

var base = {};

var hasRequiredBase;

function requireBase () {
	if (hasRequiredBase) return base;
	hasRequiredBase = 1;
	Object.defineProperty(base, "__esModule", { value: true });
	
	return base;
}

var messageComponents = {};

var hasRequiredMessageComponents;

function requireMessageComponents () {
	if (hasRequiredMessageComponents) return messageComponents;
	hasRequiredMessageComponents = 1;
	Object.defineProperty(messageComponents, "__esModule", { value: true });
	
	return messageComponents;
}

var modalSubmit = {};

var hasRequiredModalSubmit;

function requireModalSubmit () {
	if (hasRequiredModalSubmit) return modalSubmit;
	hasRequiredModalSubmit = 1;
	Object.defineProperty(modalSubmit, "__esModule", { value: true });
	
	return modalSubmit;
}

var ping = {};

var hasRequiredPing;

function requirePing () {
	if (hasRequiredPing) return ping;
	hasRequiredPing = 1;
	Object.defineProperty(ping, "__esModule", { value: true });
	
	return ping;
}

var responses = {};

var hasRequiredResponses;

function requireResponses () {
	if (hasRequiredResponses) return responses;
	hasRequiredResponses = 1;
	Object.defineProperty(responses, "__esModule", { value: true });
	responses.InteractionResponseType = responses.InteractionType = void 0;
	/**
	 * https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object-interaction-type
	 */
	var InteractionType;
	(function (InteractionType) {
	    InteractionType[InteractionType["Ping"] = 1] = "Ping";
	    InteractionType[InteractionType["ApplicationCommand"] = 2] = "ApplicationCommand";
	    InteractionType[InteractionType["MessageComponent"] = 3] = "MessageComponent";
	    InteractionType[InteractionType["ApplicationCommandAutocomplete"] = 4] = "ApplicationCommandAutocomplete";
	    InteractionType[InteractionType["ModalSubmit"] = 5] = "ModalSubmit";
	})(InteractionType || (responses.InteractionType = InteractionType = {}));
	/**
	 * https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-response-object-interaction-callback-type
	 */
	var InteractionResponseType;
	(function (InteractionResponseType) {
	    /**
	     * ACK a `Ping`
	     */
	    InteractionResponseType[InteractionResponseType["Pong"] = 1] = "Pong";
	    /**
	     * Respond to an interaction with a message
	     */
	    InteractionResponseType[InteractionResponseType["ChannelMessageWithSource"] = 4] = "ChannelMessageWithSource";
	    /**
	     * ACK an interaction and edit to a response later, the user sees a loading state
	     */
	    InteractionResponseType[InteractionResponseType["DeferredChannelMessageWithSource"] = 5] = "DeferredChannelMessageWithSource";
	    /**
	     * ACK a button interaction and update it to a loading state
	     */
	    InteractionResponseType[InteractionResponseType["DeferredMessageUpdate"] = 6] = "DeferredMessageUpdate";
	    /**
	     * ACK a button interaction and edit the message to which the button was attached
	     */
	    InteractionResponseType[InteractionResponseType["UpdateMessage"] = 7] = "UpdateMessage";
	    /**
	     * For autocomplete interactions
	     */
	    InteractionResponseType[InteractionResponseType["ApplicationCommandAutocompleteResult"] = 8] = "ApplicationCommandAutocompleteResult";
	    /**
	     * Respond to an interaction with an modal for a user to fill-out
	     */
	    InteractionResponseType[InteractionResponseType["Modal"] = 9] = "Modal";
	    /**
	     * Respond to an interaction with an upgrade button, only available for apps with monetization enabled
	     */
	    InteractionResponseType[InteractionResponseType["PremiumRequired"] = 10] = "PremiumRequired";
	})(InteractionResponseType || (responses.InteractionResponseType = InteractionResponseType = {}));
	
	return responses;
}

var hasRequiredInteractions$1;

function requireInteractions$1 () {
	if (hasRequiredInteractions$1) return interactions$1;
	hasRequiredInteractions$1 = 1;
	(function (exports) {
		var __createBinding = (interactions$1 && interactions$1.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (interactions$1 && interactions$1.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(requireApplicationCommands(), exports);
		__exportStar(requireAutocomplete(), exports);
		__exportStar(requireBase(), exports);
		__exportStar(requireMessageComponents(), exports);
		__exportStar(requireModalSubmit(), exports);
		__exportStar(requirePing(), exports);
		__exportStar(requireResponses(), exports);
		
	} (interactions$1));
	return interactions$1;
}

var invite$1 = {};

var hasRequiredInvite$1;

function requireInvite$1 () {
	if (hasRequiredInvite$1) return invite$1;
	hasRequiredInvite$1 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/invite
	 */
	Object.defineProperty(invite$1, "__esModule", { value: true });
	invite$1.InviteTargetType = invite$1.InviteType = void 0;
	/**
	 * https://discord.com/developers/docs/resources/invite#invite-object-invite-types
	 */
	var InviteType;
	(function (InviteType) {
	    InviteType[InviteType["Guild"] = 0] = "Guild";
	    InviteType[InviteType["GroupDM"] = 1] = "GroupDM";
	    InviteType[InviteType["Friend"] = 2] = "Friend";
	})(InviteType || (invite$1.InviteType = InviteType = {}));
	/**
	 * https://discord.com/developers/docs/resources/invite#invite-object-invite-target-types
	 */
	var InviteTargetType;
	(function (InviteTargetType) {
	    InviteTargetType[InviteTargetType["Stream"] = 1] = "Stream";
	    InviteTargetType[InviteTargetType["EmbeddedApplication"] = 2] = "EmbeddedApplication";
	})(InviteTargetType || (invite$1.InviteTargetType = InviteTargetType = {}));
	
	return invite$1;
}

var oauth2$1 = {};

var hasRequiredOauth2$1;

function requireOauth2$1 () {
	if (hasRequiredOauth2$1) return oauth2$1;
	hasRequiredOauth2$1 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/topics/oauth2
	 */
	Object.defineProperty(oauth2$1, "__esModule", { value: true });
	oauth2$1.OAuth2Scopes = void 0;
	var OAuth2Scopes;
	(function (OAuth2Scopes) {
	    /**
	     * For oauth2 bots, this puts the bot in the user's selected guild by default
	     */
	    OAuth2Scopes["Bot"] = "bot";
	    /**
	     * Allows [/users/@me/connections](https://discord.com/developers/docs/resources/user#get-user-connections)
	     * to return linked third-party accounts
	     *
	     * See https://discord.com/developers/docs/resources/user#get-user-connections
	     */
	    OAuth2Scopes["Connections"] = "connections";
	    /**
	     * Allows your app to see information about the user's DMs and group DMs - requires Discord approval
	     */
	    OAuth2Scopes["DMChannelsRead"] = "dm_channels.read";
	    /**
	     * Enables [/users/@me](https://discord.com/developers/docs/resources/user#get-current-user) to return an `email`
	     *
	     * See https://discord.com/developers/docs/resources/user#get-current-user
	     */
	    OAuth2Scopes["Email"] = "email";
	    /**
	     * Allows [/users/@me](https://discord.com/developers/docs/resources/user#get-current-user) without `email`
	     *
	     * See https://discord.com/developers/docs/resources/user#get-current-user
	     */
	    OAuth2Scopes["Identify"] = "identify";
	    /**
	     * Allows [/users/@me/guilds](https://discord.com/developers/docs/resources/user#get-current-user-guilds)
	     * to return basic information about all of a user's guilds
	     *
	     * See https://discord.com/developers/docs/resources/user#get-current-user-guilds
	     */
	    OAuth2Scopes["Guilds"] = "guilds";
	    /**
	     * Allows [/guilds/{guild.id}/members/{user.id}](https://discord.com/developers/docs/resources/guild#add-guild-member)
	     * to be used for joining users to a guild
	     *
	     * See https://discord.com/developers/docs/resources/guild#add-guild-member
	     */
	    OAuth2Scopes["GuildsJoin"] = "guilds.join";
	    /**
	     * Allows /users/@me/guilds/{guild.id}/member to return a user's member information in a guild
	     *
	     * See https://discord.com/developers/docs/resources/user#get-current-user-guild-member
	     */
	    OAuth2Scopes["GuildsMembersRead"] = "guilds.members.read";
	    /**
	     * Allows your app to join users to a group dm
	     *
	     * See https://discord.com/developers/docs/resources/channel#group-dm-add-recipient
	     */
	    OAuth2Scopes["GroupDMJoins"] = "gdm.join";
	    /**
	     * For local rpc server api access, this allows you to read messages from all client channels
	     * (otherwise restricted to channels/guilds your app creates)
	     */
	    OAuth2Scopes["MessagesRead"] = "messages.read";
	    /**
	     * Allows your app to update a user's connection and metadata for the app
	     */
	    OAuth2Scopes["RoleConnectionsWrite"] = "role_connections.write";
	    /**
	     * For local rpc server access, this allows you to control a user's local Discord client - requires Discord approval
	     */
	    OAuth2Scopes["RPC"] = "rpc";
	    /**
	     * For local rpc server api access, this allows you to receive notifications pushed out to the user - requires Discord approval
	     */
	    OAuth2Scopes["RPCNotificationsRead"] = "rpc.notifications.read";
	    /**
	     * This generates a webhook that is returned in the oauth token response for authorization code grants
	     */
	    OAuth2Scopes["WebhookIncoming"] = "webhook.incoming";
	    /**
	     * Allows your app to connect to voice on user's behalf and see all the voice members - requires Discord approval
	     */
	    OAuth2Scopes["Voice"] = "voice";
	    /**
	     * Allows your app to upload/update builds for a user's applications - requires Discord approval
	     */
	    OAuth2Scopes["ApplicationsBuildsUpload"] = "applications.builds.upload";
	    /**
	     * Allows your app to read build data for a user's applications
	     */
	    OAuth2Scopes["ApplicationsBuildsRead"] = "applications.builds.read";
	    /**
	     * Allows your app to read and update store data (SKUs, store listings, achievements, etc.) for a user's applications
	     */
	    OAuth2Scopes["ApplicationsStoreUpdate"] = "applications.store.update";
	    /**
	     * Allows your app to read entitlements for a user's applications
	     */
	    OAuth2Scopes["ApplicationsEntitlements"] = "applications.entitlements";
	    /**
	     * Allows your app to know a user's friends and implicit relationships - requires Discord approval
	     */
	    OAuth2Scopes["RelationshipsRead"] = "relationships.read";
	    /**
	     * Allows your app to fetch data from a user's "Now Playing/Recently Played" list - requires Discord approval
	     */
	    OAuth2Scopes["ActivitiesRead"] = "activities.read";
	    /**
	     * Allows your app to update a user's activity - requires Discord approval (NOT REQUIRED FOR GAMESDK ACTIVITY MANAGER)
	     *
	     * See https://discord.com/developers/docs/game-sdk/activities
	     */
	    OAuth2Scopes["ActivitiesWrite"] = "activities.write";
	    /**
	     * Allows your app to use Application Commands in a guild
	     *
	     * See https://discord.com/developers/docs/interactions/application-commands
	     */
	    OAuth2Scopes["ApplicationsCommands"] = "applications.commands";
	    /**
	     * Allows your app to update its Application Commands via this bearer token - client credentials grant only
	     *
	     * See https://discord.com/developers/docs/interactions/application-commands
	     */
	    OAuth2Scopes["ApplicationsCommandsUpdate"] = "applications.commands.update";
	    /**
	     * Allows your app to update permissions for its commands using a Bearer token - client credentials grant only
	     *
	     * See https://discord.com/developers/docs/interactions/application-commands
	     */
	    OAuth2Scopes["ApplicationCommandsPermissionsUpdate"] = "applications.commands.permissions.update";
	})(OAuth2Scopes || (oauth2$1.OAuth2Scopes = OAuth2Scopes = {}));
	
	return oauth2$1;
}

var poll$1 = {};

var hasRequiredPoll$1;

function requirePoll$1 () {
	if (hasRequiredPoll$1) return poll$1;
	hasRequiredPoll$1 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/poll
	 */
	Object.defineProperty(poll$1, "__esModule", { value: true });
	poll$1.PollLayoutType = void 0;
	/**
	 * https://discord.com/developers/docs/resources/poll#layout-type
	 */
	var PollLayoutType;
	(function (PollLayoutType) {
	    /**
	     * The, uhm, default layout type
	     */
	    PollLayoutType[PollLayoutType["Default"] = 1] = "Default";
	})(PollLayoutType || (poll$1.PollLayoutType = PollLayoutType = {}));
	
	return poll$1;
}

var permissions = {};

var hasRequiredPermissions;

function requirePermissions () {
	if (hasRequiredPermissions) return permissions;
	hasRequiredPermissions = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/topics/permissions
	 */
	Object.defineProperty(permissions, "__esModule", { value: true });
	permissions.RoleFlags = void 0;
	/**
	 * https://discord.com/developers/docs/topics/permissions#role-object-role-flags
	 */
	var RoleFlags;
	(function (RoleFlags) {
	    /**
	     * Role can be selected by members in an onboarding prompt
	     */
	    RoleFlags[RoleFlags["InPrompt"] = 1] = "InPrompt";
	})(RoleFlags || (permissions.RoleFlags = RoleFlags = {}));
	
	return permissions;
}

var stageInstance$1 = {};

var hasRequiredStageInstance$1;

function requireStageInstance$1 () {
	if (hasRequiredStageInstance$1) return stageInstance$1;
	hasRequiredStageInstance$1 = 1;
	Object.defineProperty(stageInstance$1, "__esModule", { value: true });
	stageInstance$1.StageInstancePrivacyLevel = void 0;
	/**
	 * https://discord.com/developers/docs/resources/stage-instance#stage-instance-object-privacy-level
	 */
	var StageInstancePrivacyLevel;
	(function (StageInstancePrivacyLevel) {
	    /**
	     * The stage instance is visible publicly, such as on stage discovery
	     *
	     * @deprecated
	     */
	    StageInstancePrivacyLevel[StageInstancePrivacyLevel["Public"] = 1] = "Public";
	    /**
	     * The stage instance is visible to only guild members
	     */
	    StageInstancePrivacyLevel[StageInstancePrivacyLevel["GuildOnly"] = 2] = "GuildOnly";
	})(StageInstancePrivacyLevel || (stageInstance$1.StageInstancePrivacyLevel = StageInstancePrivacyLevel = {}));
	
	return stageInstance$1;
}

var sticker$1 = {};

var hasRequiredSticker$1;

function requireSticker$1 () {
	if (hasRequiredSticker$1) return sticker$1;
	hasRequiredSticker$1 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/sticker
	 */
	Object.defineProperty(sticker$1, "__esModule", { value: true });
	sticker$1.StickerFormatType = sticker$1.StickerType = void 0;
	/**
	 * https://discord.com/developers/docs/resources/sticker#sticker-object-sticker-types
	 */
	var StickerType;
	(function (StickerType) {
	    /**
	     * An official sticker in a pack
	     */
	    StickerType[StickerType["Standard"] = 1] = "Standard";
	    /**
	     * A sticker uploaded to a guild for the guild's members
	     */
	    StickerType[StickerType["Guild"] = 2] = "Guild";
	})(StickerType || (sticker$1.StickerType = StickerType = {}));
	/**
	 * https://discord.com/developers/docs/resources/sticker#sticker-object-sticker-format-types
	 */
	var StickerFormatType;
	(function (StickerFormatType) {
	    StickerFormatType[StickerFormatType["PNG"] = 1] = "PNG";
	    StickerFormatType[StickerFormatType["APNG"] = 2] = "APNG";
	    StickerFormatType[StickerFormatType["Lottie"] = 3] = "Lottie";
	    StickerFormatType[StickerFormatType["GIF"] = 4] = "GIF";
	})(StickerFormatType || (sticker$1.StickerFormatType = StickerFormatType = {}));
	
	return sticker$1;
}

var teams = {};

var hasRequiredTeams;

function requireTeams () {
	if (hasRequiredTeams) return teams;
	hasRequiredTeams = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/topics/teams
	 */
	Object.defineProperty(teams, "__esModule", { value: true });
	teams.TeamMemberRole = teams.TeamMemberMembershipState = void 0;
	/**
	 * https://discord.com/developers/docs/topics/teams#data-models-membership-state-enum
	 */
	var TeamMemberMembershipState;
	(function (TeamMemberMembershipState) {
	    TeamMemberMembershipState[TeamMemberMembershipState["Invited"] = 1] = "Invited";
	    TeamMemberMembershipState[TeamMemberMembershipState["Accepted"] = 2] = "Accepted";
	})(TeamMemberMembershipState || (teams.TeamMemberMembershipState = TeamMemberMembershipState = {}));
	/**
	 * https://discord.com/developers/docs/topics/teams#team-member-roles-team-member-role-types
	 */
	var TeamMemberRole;
	(function (TeamMemberRole) {
	    TeamMemberRole["Admin"] = "admin";
	    TeamMemberRole["Developer"] = "developer";
	    TeamMemberRole["ReadOnly"] = "read_only";
	})(TeamMemberRole || (teams.TeamMemberRole = TeamMemberRole = {}));
	
	return teams;
}

var template$1 = {};

var hasRequiredTemplate$1;

function requireTemplate$1 () {
	if (hasRequiredTemplate$1) return template$1;
	hasRequiredTemplate$1 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/guild-template
	 */
	Object.defineProperty(template$1, "__esModule", { value: true });
	
	return template$1;
}

var user$1 = {};

var hasRequiredUser$1;

function requireUser$1 () {
	if (hasRequiredUser$1) return user$1;
	hasRequiredUser$1 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/user
	 */
	Object.defineProperty(user$1, "__esModule", { value: true });
	user$1.ConnectionVisibility = user$1.ConnectionService = user$1.UserPremiumType = user$1.UserFlags = void 0;
	/**
	 * https://discord.com/developers/docs/resources/user#user-object-user-flags
	 */
	var UserFlags;
	(function (UserFlags) {
	    /**
	     * Discord Employee
	     */
	    UserFlags[UserFlags["Staff"] = 1] = "Staff";
	    /**
	     * Partnered Server Owner
	     */
	    UserFlags[UserFlags["Partner"] = 2] = "Partner";
	    /**
	     * HypeSquad Events Member
	     */
	    UserFlags[UserFlags["Hypesquad"] = 4] = "Hypesquad";
	    /**
	     * Bug Hunter Level 1
	     */
	    UserFlags[UserFlags["BugHunterLevel1"] = 8] = "BugHunterLevel1";
	    /**
	     * @unstable This user flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    UserFlags[UserFlags["MFASMS"] = 16] = "MFASMS";
	    /**
	     * @unstable This user flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    UserFlags[UserFlags["PremiumPromoDismissed"] = 32] = "PremiumPromoDismissed";
	    /**
	     * House Bravery Member
	     */
	    UserFlags[UserFlags["HypeSquadOnlineHouse1"] = 64] = "HypeSquadOnlineHouse1";
	    /**
	     * House Brilliance Member
	     */
	    UserFlags[UserFlags["HypeSquadOnlineHouse2"] = 128] = "HypeSquadOnlineHouse2";
	    /**
	     * House Balance Member
	     */
	    UserFlags[UserFlags["HypeSquadOnlineHouse3"] = 256] = "HypeSquadOnlineHouse3";
	    /**
	     * Early Nitro Supporter
	     */
	    UserFlags[UserFlags["PremiumEarlySupporter"] = 512] = "PremiumEarlySupporter";
	    /**
	     * User is a [team](https://discord.com/developers/docs/topics/teams)
	     */
	    UserFlags[UserFlags["TeamPseudoUser"] = 1024] = "TeamPseudoUser";
	    /**
	     * @unstable This user flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    UserFlags[UserFlags["HasUnreadUrgentMessages"] = 8192] = "HasUnreadUrgentMessages";
	    /**
	     * Bug Hunter Level 2
	     */
	    UserFlags[UserFlags["BugHunterLevel2"] = 16384] = "BugHunterLevel2";
	    /**
	     * Verified Bot
	     */
	    UserFlags[UserFlags["VerifiedBot"] = 65536] = "VerifiedBot";
	    /**
	     * Early Verified Bot Developer
	     */
	    UserFlags[UserFlags["VerifiedDeveloper"] = 131072] = "VerifiedDeveloper";
	    /**
	     * Moderator Programs Alumni
	     */
	    UserFlags[UserFlags["CertifiedModerator"] = 262144] = "CertifiedModerator";
	    /**
	     * Bot uses only [HTTP interactions](https://discord.com/developers/docs/interactions/receiving-and-responding#receiving-an-interaction) and is shown in the online member list
	     */
	    UserFlags[UserFlags["BotHTTPInteractions"] = 524288] = "BotHTTPInteractions";
	    /**
	     * User has been identified as spammer
	     *
	     * @unstable This user flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    UserFlags[UserFlags["Spammer"] = 1048576] = "Spammer";
	    /**
	     * @unstable This user flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     */
	    UserFlags[UserFlags["DisablePremium"] = 2097152] = "DisablePremium";
	    /**
	     * User is an [Active Developer](https://support-dev.discord.com/hc/articles/10113997751447)
	     */
	    UserFlags[UserFlags["ActiveDeveloper"] = 4194304] = "ActiveDeveloper";
	    /**
	     * User's account has been [quarantined](https://support.discord.com/hc/articles/6461420677527) based on recent activity
	     *
	     * @unstable This user flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     * @privateRemarks
	     *
	     * This value would be 1 << 44, but bit shifting above 1 << 30 requires bigints
	     */
	    UserFlags[UserFlags["Quarantined"] = 17592186044416] = "Quarantined";
	    /**
	     * @unstable This user flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     * @privateRemarks
	     *
	     * This value would be 1 << 50, but bit shifting above 1 << 30 requires bigints
	     */
	    UserFlags[UserFlags["Collaborator"] = 1125899906842624] = "Collaborator";
	    /**
	     * @unstable This user flag is currently not documented by Discord but has a known value which we will try to keep up to date.
	     * @privateRemarks
	     *
	     * This value would be 1 << 51, but bit shifting above 1 << 30 requires bigints
	     */
	    UserFlags[UserFlags["RestrictedCollaborator"] = 2251799813685248] = "RestrictedCollaborator";
	})(UserFlags || (user$1.UserFlags = UserFlags = {}));
	/**
	 * https://discord.com/developers/docs/resources/user#user-object-premium-types
	 */
	var UserPremiumType;
	(function (UserPremiumType) {
	    UserPremiumType[UserPremiumType["None"] = 0] = "None";
	    UserPremiumType[UserPremiumType["NitroClassic"] = 1] = "NitroClassic";
	    UserPremiumType[UserPremiumType["Nitro"] = 2] = "Nitro";
	    UserPremiumType[UserPremiumType["NitroBasic"] = 3] = "NitroBasic";
	})(UserPremiumType || (user$1.UserPremiumType = UserPremiumType = {}));
	var ConnectionService;
	(function (ConnectionService) {
	    ConnectionService["BattleNet"] = "battlenet";
	    ConnectionService["BungieNet"] = "bungie";
	    ConnectionService["Domain"] = "domain";
	    ConnectionService["eBay"] = "ebay";
	    ConnectionService["EpicGames"] = "epicgames";
	    ConnectionService["Facebook"] = "facebook";
	    ConnectionService["GitHub"] = "github";
	    ConnectionService["Instagram"] = "instagram";
	    ConnectionService["LeagueOfLegends"] = "leagueoflegends";
	    ConnectionService["PayPal"] = "paypal";
	    ConnectionService["PlayStationNetwork"] = "playstation";
	    ConnectionService["Reddit"] = "reddit";
	    ConnectionService["RiotGames"] = "riotgames";
	    ConnectionService["Spotify"] = "spotify";
	    ConnectionService["Skype"] = "skype";
	    ConnectionService["Steam"] = "steam";
	    ConnectionService["TikTok"] = "tiktok";
	    ConnectionService["Twitch"] = "twitch";
	    ConnectionService["X"] = "twitter";
	    /**
	     * @deprecated This is the old name for {@apilink ConnectionService#X}
	     */
	    ConnectionService["Twitter"] = "twitter";
	    ConnectionService["Xbox"] = "xbox";
	    ConnectionService["YouTube"] = "youtube";
	})(ConnectionService || (user$1.ConnectionService = ConnectionService = {}));
	var ConnectionVisibility;
	(function (ConnectionVisibility) {
	    /**
	     * Invisible to everyone except the user themselves
	     */
	    ConnectionVisibility[ConnectionVisibility["None"] = 0] = "None";
	    /**
	     * Visible to everyone
	     */
	    ConnectionVisibility[ConnectionVisibility["Everyone"] = 1] = "Everyone";
	})(ConnectionVisibility || (user$1.ConnectionVisibility = ConnectionVisibility = {}));
	
	return user$1;
}

var voice$1 = {};

var hasRequiredVoice$1;

function requireVoice$1 () {
	if (hasRequiredVoice$1) return voice$1;
	hasRequiredVoice$1 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/voice
	 */
	Object.defineProperty(voice$1, "__esModule", { value: true });
	
	return voice$1;
}

var webhook$1 = {};

var hasRequiredWebhook$1;

function requireWebhook$1 () {
	if (hasRequiredWebhook$1) return webhook$1;
	hasRequiredWebhook$1 = 1;
	/**
	 * Types extracted from https://discord.com/developers/docs/resources/webhook
	 */
	Object.defineProperty(webhook$1, "__esModule", { value: true });
	webhook$1.WebhookType = void 0;
	var WebhookType;
	(function (WebhookType) {
	    /**
	     * Incoming Webhooks can post messages to channels with a generated token
	     */
	    WebhookType[WebhookType["Incoming"] = 1] = "Incoming";
	    /**
	     * Channel Follower Webhooks are internal webhooks used with Channel Following to post new messages into channels
	     */
	    WebhookType[WebhookType["ChannelFollower"] = 2] = "ChannelFollower";
	    /**
	     * Application webhooks are webhooks used with Interactions
	     */
	    WebhookType[WebhookType["Application"] = 3] = "Application";
	})(WebhookType || (webhook$1.WebhookType = WebhookType = {}));
	
	return webhook$1;
}

var monetization$1 = {};

var hasRequiredMonetization$1;

function requireMonetization$1 () {
	if (hasRequiredMonetization$1) return monetization$1;
	hasRequiredMonetization$1 = 1;
	Object.defineProperty(monetization$1, "__esModule", { value: true });
	monetization$1.SKUType = monetization$1.SKUFlags = monetization$1.EntitlementType = void 0;
	/**
	 * https://discord.com/developers/docs/monetization/entitlements#entitlement-object-entitlement-types
	 */
	var EntitlementType;
	(function (EntitlementType) {
	    /**
	     * Entitlement was purchased by user
	     */
	    EntitlementType[EntitlementType["Purchase"] = 1] = "Purchase";
	    /**
	     * Entitlement for Discord Nitro subscription
	     */
	    EntitlementType[EntitlementType["PremiumSubscription"] = 2] = "PremiumSubscription";
	    /**
	     * Entitlement was gifted by developer
	     */
	    EntitlementType[EntitlementType["DeveloperGift"] = 3] = "DeveloperGift";
	    /**
	     * Entitlement was purchased by a dev in application test mode
	     */
	    EntitlementType[EntitlementType["TestModePurchase"] = 4] = "TestModePurchase";
	    /**
	     * Entitlement was granted when the SKU was free
	     */
	    EntitlementType[EntitlementType["FreePurchase"] = 5] = "FreePurchase";
	    /**
	     * Entitlement was gifted by another user
	     */
	    EntitlementType[EntitlementType["UserGift"] = 6] = "UserGift";
	    /**
	     * Entitlement was claimed by user for free as a Nitro Subscriber
	     */
	    EntitlementType[EntitlementType["PremiumPurchase"] = 7] = "PremiumPurchase";
	    /**
	     * Entitlement was purchased as an app subscription
	     */
	    EntitlementType[EntitlementType["ApplicationSubscription"] = 8] = "ApplicationSubscription";
	})(EntitlementType || (monetization$1.EntitlementType = EntitlementType = {}));
	/**
	 * https://discord.com/developers/docs/monetization/skus#sku-object-sku-flags
	 */
	var SKUFlags;
	(function (SKUFlags) {
	    /**
	     * SKU is available for purchase
	     */
	    SKUFlags[SKUFlags["Available"] = 4] = "Available";
	    /**
	     * Recurring SKU that can be purchased by a user and applied to a single server.
	     * Grants access to every user in that server.
	     */
	    SKUFlags[SKUFlags["GuildSubscription"] = 128] = "GuildSubscription";
	    /**
	     * Recurring SKU purchased by a user for themselves. Grants access to the purchasing user in every server.
	     */
	    SKUFlags[SKUFlags["UserSubscription"] = 256] = "UserSubscription";
	})(SKUFlags || (monetization$1.SKUFlags = SKUFlags = {}));
	var SKUType;
	(function (SKUType) {
	    /**
	     * Durable one-time purchase
	     */
	    SKUType[SKUType["Durable"] = 2] = "Durable";
	    /**
	     * Consumable one-time purchase
	     */
	    SKUType[SKUType["Consumable"] = 3] = "Consumable";
	    /**
	     * Represents a recurring subscription
	     */
	    SKUType[SKUType["Subscription"] = 5] = "Subscription";
	    /**
	     * System-generated group for each Subscription SKU created
	     */
	    SKUType[SKUType["SubscriptionGroup"] = 6] = "SubscriptionGroup";
	})(SKUType || (monetization$1.SKUType = SKUType = {}));
	
	return monetization$1;
}

var hasRequiredV10$4;

function requireV10$4 () {
	if (hasRequiredV10$4) return v10$7;
	hasRequiredV10$4 = 1;
	(function (exports) {
		var __createBinding = (v10$7 && v10$7.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (v10$7 && v10$7.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(requireCommon$2(), exports);
		__exportStar(requireApplication$1(), exports);
		__exportStar(requireAuditLog$1(), exports);
		__exportStar(requireAutoModeration$1(), exports);
		__exportStar(requireChannel$2(), exports);
		__exportStar(requireEmoji$1(), exports);
		__exportStar(requireGateway$1(), exports);
		__exportStar(requireGuild$2(), exports);
		__exportStar(requireGuildScheduledEvent$1(), exports);
		__exportStar(requireInteractions$1(), exports);
		__exportStar(requireInvite$1(), exports);
		__exportStar(requireOauth2$1(), exports);
		__exportStar(requirePoll$1(), exports);
		__exportStar(requirePermissions(), exports);
		__exportStar(requireStageInstance$1(), exports);
		__exportStar(requireSticker$1(), exports);
		__exportStar(requireTeams(), exports);
		__exportStar(requireTemplate$1(), exports);
		__exportStar(requireUser$1(), exports);
		__exportStar(requireVoice$1(), exports);
		__exportStar(requireWebhook$1(), exports);
		__exportStar(requireMonetization$1(), exports);
		
	} (v10$7));
	return v10$7;
}

var v10Exports$3 = requireV10$4();
var mod$3 = /*@__PURE__*/getDefaultExportFromCjs(v10Exports$3);

const APIApplicationCommandPermissionsConstant = mod$3.APIApplicationCommandPermissionsConstant;
const ActivityFlags = mod$3.ActivityFlags;
const ActivityPlatform = mod$3.ActivityPlatform;
const ActivityType = mod$3.ActivityType;
const AllowedMentionsTypes = mod$3.AllowedMentionsTypes;
const ApplicationCommandOptionType = mod$3.ApplicationCommandOptionType;
const ApplicationCommandPermissionType = mod$3.ApplicationCommandPermissionType;
const ApplicationCommandType = mod$3.ApplicationCommandType;
const ApplicationFlags = mod$3.ApplicationFlags;
const ApplicationRoleConnectionMetadataType = mod$3.ApplicationRoleConnectionMetadataType;
const AttachmentFlags = mod$3.AttachmentFlags;
const AuditLogEvent = mod$3.AuditLogEvent;
const AuditLogOptionsType = mod$3.AuditLogOptionsType;
const AutoModerationActionType = mod$3.AutoModerationActionType;
const AutoModerationRuleEventType = mod$3.AutoModerationRuleEventType;
const AutoModerationRuleKeywordPresetType = mod$3.AutoModerationRuleKeywordPresetType;
const AutoModerationRuleTriggerType = mod$3.AutoModerationRuleTriggerType;
const ButtonStyle = mod$3.ButtonStyle;
const ChannelFlags = mod$3.ChannelFlags;
const ChannelType = mod$3.ChannelType;
const ComponentType = mod$3.ComponentType;
const ConnectionService = mod$3.ConnectionService;
const ConnectionVisibility = mod$3.ConnectionVisibility;
const EmbedType = mod$3.EmbedType;
const EntitlementType = mod$3.EntitlementType;
const ForumLayoutType = mod$3.ForumLayoutType;
const GuildDefaultMessageNotifications = mod$3.GuildDefaultMessageNotifications;
const GuildExplicitContentFilter = mod$3.GuildExplicitContentFilter;
const GuildFeature = mod$3.GuildFeature;
const GuildHubType = mod$3.GuildHubType;
const GuildMFALevel = mod$3.GuildMFALevel;
const GuildMemberFlags = mod$3.GuildMemberFlags;
const GuildNSFWLevel = mod$3.GuildNSFWLevel;
const GuildOnboardingMode = mod$3.GuildOnboardingMode;
const GuildOnboardingPromptType = mod$3.GuildOnboardingPromptType;
const GuildPremiumTier = mod$3.GuildPremiumTier;
const GuildScheduledEventEntityType = mod$3.GuildScheduledEventEntityType;
const GuildScheduledEventPrivacyLevel = mod$3.GuildScheduledEventPrivacyLevel;
const GuildScheduledEventStatus = mod$3.GuildScheduledEventStatus;
const GuildSystemChannelFlags = mod$3.GuildSystemChannelFlags;
const GuildVerificationLevel = mod$3.GuildVerificationLevel;
const GuildWidgetStyle = mod$3.GuildWidgetStyle;
const IntegrationExpireBehavior = mod$3.IntegrationExpireBehavior;
const InteractionResponseType = mod$3.InteractionResponseType;
const InteractionType = mod$3.InteractionType;
const InviteTargetType = mod$3.InviteTargetType;
const InviteType = mod$3.InviteType;
const MembershipScreeningFieldType = mod$3.MembershipScreeningFieldType;
const MessageActivityType = mod$3.MessageActivityType;
const MessageFlags = mod$3.MessageFlags;
const MessageType = mod$3.MessageType;
const OAuth2Scopes = mod$3.OAuth2Scopes;
const OverwriteType = mod$3.OverwriteType;
const PermissionFlagsBits = mod$3.PermissionFlagsBits;
const PollLayoutType = mod$3.PollLayoutType;
const PresenceUpdateStatus = mod$3.PresenceUpdateStatus;
const RoleFlags = mod$3.RoleFlags;
const SKUFlags = mod$3.SKUFlags;
const SKUType = mod$3.SKUType;
const SelectMenuDefaultValueType = mod$3.SelectMenuDefaultValueType;
const SortOrderType = mod$3.SortOrderType;
const StageInstancePrivacyLevel = mod$3.StageInstancePrivacyLevel;
const StickerFormatType = mod$3.StickerFormatType;
const StickerType = mod$3.StickerType;
const TeamMemberMembershipState = mod$3.TeamMemberMembershipState;
const TeamMemberRole = mod$3.TeamMemberRole;
const TextInputStyle = mod$3.TextInputStyle;
const ThreadAutoArchiveDuration = mod$3.ThreadAutoArchiveDuration;
const ThreadMemberFlags = mod$3.ThreadMemberFlags;
const UserFlags = mod$3.UserFlags;
const UserPremiumType = mod$3.UserPremiumType;
const VideoQualityMode = mod$3.VideoQualityMode;
const WebhookType = mod$3.WebhookType;

var v10$6 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	APIApplicationCommandPermissionsConstant: APIApplicationCommandPermissionsConstant,
	ActivityFlags: ActivityFlags,
	ActivityPlatform: ActivityPlatform,
	ActivityType: ActivityType,
	AllowedMentionsTypes: AllowedMentionsTypes,
	ApplicationCommandOptionType: ApplicationCommandOptionType,
	ApplicationCommandPermissionType: ApplicationCommandPermissionType,
	ApplicationCommandType: ApplicationCommandType,
	ApplicationFlags: ApplicationFlags,
	ApplicationRoleConnectionMetadataType: ApplicationRoleConnectionMetadataType,
	AttachmentFlags: AttachmentFlags,
	AuditLogEvent: AuditLogEvent,
	AuditLogOptionsType: AuditLogOptionsType,
	AutoModerationActionType: AutoModerationActionType,
	AutoModerationRuleEventType: AutoModerationRuleEventType,
	AutoModerationRuleKeywordPresetType: AutoModerationRuleKeywordPresetType,
	AutoModerationRuleTriggerType: AutoModerationRuleTriggerType,
	ButtonStyle: ButtonStyle,
	ChannelFlags: ChannelFlags,
	ChannelType: ChannelType,
	ComponentType: ComponentType,
	ConnectionService: ConnectionService,
	ConnectionVisibility: ConnectionVisibility,
	EmbedType: EmbedType,
	EntitlementType: EntitlementType,
	ForumLayoutType: ForumLayoutType,
	GuildDefaultMessageNotifications: GuildDefaultMessageNotifications,
	GuildExplicitContentFilter: GuildExplicitContentFilter,
	GuildFeature: GuildFeature,
	GuildHubType: GuildHubType,
	GuildMFALevel: GuildMFALevel,
	GuildMemberFlags: GuildMemberFlags,
	GuildNSFWLevel: GuildNSFWLevel,
	GuildOnboardingMode: GuildOnboardingMode,
	GuildOnboardingPromptType: GuildOnboardingPromptType,
	GuildPremiumTier: GuildPremiumTier,
	GuildScheduledEventEntityType: GuildScheduledEventEntityType,
	GuildScheduledEventPrivacyLevel: GuildScheduledEventPrivacyLevel,
	GuildScheduledEventStatus: GuildScheduledEventStatus,
	GuildSystemChannelFlags: GuildSystemChannelFlags,
	GuildVerificationLevel: GuildVerificationLevel,
	GuildWidgetStyle: GuildWidgetStyle,
	IntegrationExpireBehavior: IntegrationExpireBehavior,
	InteractionResponseType: InteractionResponseType,
	InteractionType: InteractionType,
	InviteTargetType: InviteTargetType,
	InviteType: InviteType,
	MembershipScreeningFieldType: MembershipScreeningFieldType,
	MessageActivityType: MessageActivityType,
	MessageFlags: MessageFlags,
	MessageType: MessageType,
	OAuth2Scopes: OAuth2Scopes,
	OverwriteType: OverwriteType,
	PermissionFlagsBits: PermissionFlagsBits,
	PollLayoutType: PollLayoutType,
	PresenceUpdateStatus: PresenceUpdateStatus,
	RoleFlags: RoleFlags,
	SKUFlags: SKUFlags,
	SKUType: SKUType,
	SelectMenuDefaultValueType: SelectMenuDefaultValueType,
	SortOrderType: SortOrderType,
	StageInstancePrivacyLevel: StageInstancePrivacyLevel,
	StickerFormatType: StickerFormatType,
	StickerType: StickerType,
	TeamMemberMembershipState: TeamMemberMembershipState,
	TeamMemberRole: TeamMemberRole,
	TextInputStyle: TextInputStyle,
	ThreadAutoArchiveDuration: ThreadAutoArchiveDuration,
	ThreadMemberFlags: ThreadMemberFlags,
	UserFlags: UserFlags,
	UserPremiumType: UserPremiumType,
	VideoQualityMode: VideoQualityMode,
	WebhookType: WebhookType,
	default: mod$3
});

var require$$2 = /*@__PURE__*/getAugmentedNamespace(v10$6);

var v10$5 = {};

var common$1 = {};

var hasRequiredCommon$1;

function requireCommon$1 () {
	if (hasRequiredCommon$1) return common$1;
	hasRequiredCommon$1 = 1;
	Object.defineProperty(common$1, "__esModule", { value: true });
	common$1.Locale = common$1.RESTJSONErrorCodes = void 0;
	/**
	 * https://discord.com/developers/docs/topics/opcodes-and-status-codes#json-json-error-codes
	 */
	var RESTJSONErrorCodes;
	(function (RESTJSONErrorCodes) {
	    RESTJSONErrorCodes[RESTJSONErrorCodes["GeneralError"] = 0] = "GeneralError";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownAccount"] = 10001] = "UnknownAccount";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownApplication"] = 10002] = "UnknownApplication";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownChannel"] = 10003] = "UnknownChannel";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownGuild"] = 10004] = "UnknownGuild";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownIntegration"] = 10005] = "UnknownIntegration";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownInvite"] = 10006] = "UnknownInvite";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownMember"] = 10007] = "UnknownMember";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownMessage"] = 10008] = "UnknownMessage";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownPermissionOverwrite"] = 10009] = "UnknownPermissionOverwrite";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownProvider"] = 10010] = "UnknownProvider";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownRole"] = 10011] = "UnknownRole";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownToken"] = 10012] = "UnknownToken";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownUser"] = 10013] = "UnknownUser";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownEmoji"] = 10014] = "UnknownEmoji";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownWebhook"] = 10015] = "UnknownWebhook";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownWebhookService"] = 10016] = "UnknownWebhookService";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownSession"] = 10020] = "UnknownSession";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownBan"] = 10026] = "UnknownBan";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownSKU"] = 10027] = "UnknownSKU";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownStoreListing"] = 10028] = "UnknownStoreListing";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownEntitlement"] = 10029] = "UnknownEntitlement";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownBuild"] = 10030] = "UnknownBuild";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownLobby"] = 10031] = "UnknownLobby";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownBranch"] = 10032] = "UnknownBranch";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownStoreDirectoryLayout"] = 10033] = "UnknownStoreDirectoryLayout";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownRedistributable"] = 10036] = "UnknownRedistributable";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownGiftCode"] = 10038] = "UnknownGiftCode";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownStream"] = 10049] = "UnknownStream";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownPremiumServerSubscribeCooldown"] = 10050] = "UnknownPremiumServerSubscribeCooldown";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownGuildTemplate"] = 10057] = "UnknownGuildTemplate";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownDiscoverableServerCategory"] = 10059] = "UnknownDiscoverableServerCategory";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownSticker"] = 10060] = "UnknownSticker";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownInteraction"] = 10062] = "UnknownInteraction";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownApplicationCommand"] = 10063] = "UnknownApplicationCommand";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownVoiceState"] = 10065] = "UnknownVoiceState";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownApplicationCommandPermissions"] = 10066] = "UnknownApplicationCommandPermissions";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownStageInstance"] = 10067] = "UnknownStageInstance";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownGuildMemberVerificationForm"] = 10068] = "UnknownGuildMemberVerificationForm";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownGuildWelcomeScreen"] = 10069] = "UnknownGuildWelcomeScreen";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownGuildScheduledEvent"] = 10070] = "UnknownGuildScheduledEvent";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownGuildScheduledEventUser"] = 10071] = "UnknownGuildScheduledEventUser";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnknownTag"] = 10087] = "UnknownTag";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["BotsCannotUseThisEndpoint"] = 20001] = "BotsCannotUseThisEndpoint";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["OnlyBotsCanUseThisEndpoint"] = 20002] = "OnlyBotsCanUseThisEndpoint";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ExplicitContentCannotBeSentToTheDesiredRecipient"] = 20009] = "ExplicitContentCannotBeSentToTheDesiredRecipient";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["NotAuthorizedToPerformThisActionOnThisApplication"] = 20012] = "NotAuthorizedToPerformThisActionOnThisApplication";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ActionCannotBePerformedDueToSlowmodeRateLimit"] = 20016] = "ActionCannotBePerformedDueToSlowmodeRateLimit";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["TheMazeIsntMeantForYou"] = 20017] = "TheMazeIsntMeantForYou";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["OnlyTheOwnerOfThisAccountCanPerformThisAction"] = 20018] = "OnlyTheOwnerOfThisAccountCanPerformThisAction";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["AnnouncementEditLimitExceeded"] = 20022] = "AnnouncementEditLimitExceeded";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UnderMinimumAge"] = 20024] = "UnderMinimumAge";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ChannelSendRateLimit"] = 20028] = "ChannelSendRateLimit";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ServerSendRateLimit"] = 20029] = "ServerSendRateLimit";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["StageTopicServerNameServerDescriptionOrChannelNamesContainDisallowedWords"] = 20031] = "StageTopicServerNameServerDescriptionOrChannelNamesContainDisallowedWords";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["GuildPremiumSubscriptionLevelTooLow"] = 20035] = "GuildPremiumSubscriptionLevelTooLow";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfGuildsReached"] = 30001] = "MaximumNumberOfGuildsReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfFriendsReached"] = 30002] = "MaximumNumberOfFriendsReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfPinsReachedForTheChannel"] = 30003] = "MaximumNumberOfPinsReachedForTheChannel";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfRecipientsReached"] = 30004] = "MaximumNumberOfRecipientsReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfGuildRolesReached"] = 30005] = "MaximumNumberOfGuildRolesReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfWebhooksReached"] = 30007] = "MaximumNumberOfWebhooksReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfEmojisReached"] = 30008] = "MaximumNumberOfEmojisReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfReactionsReached"] = 30010] = "MaximumNumberOfReactionsReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfGroupDMsReached"] = 30011] = "MaximumNumberOfGroupDMsReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfGuildChannelsReached"] = 30013] = "MaximumNumberOfGuildChannelsReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfAttachmentsInAMessageReached"] = 30015] = "MaximumNumberOfAttachmentsInAMessageReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfInvitesReached"] = 30016] = "MaximumNumberOfInvitesReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfAnimatedEmojisReached"] = 30018] = "MaximumNumberOfAnimatedEmojisReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfServerMembersReached"] = 30019] = "MaximumNumberOfServerMembersReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfServerCategoriesReached"] = 30030] = "MaximumNumberOfServerCategoriesReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["GuildAlreadyHasTemplate"] = 30031] = "GuildAlreadyHasTemplate";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfApplicationCommandsReached"] = 30032] = "MaximumNumberOfApplicationCommandsReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumThreadParticipantsReached"] = 30033] = "MaximumThreadParticipantsReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumDailyApplicationCommandCreatesReached"] = 30034] = "MaximumDailyApplicationCommandCreatesReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfNonGuildMemberBansHasBeenExceeded"] = 30035] = "MaximumNumberOfNonGuildMemberBansHasBeenExceeded";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfBanFetchesHasBeenReached"] = 30037] = "MaximumNumberOfBanFetchesHasBeenReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfUncompletedGuildScheduledEventsReached"] = 30038] = "MaximumNumberOfUncompletedGuildScheduledEventsReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfStickersReached"] = 30039] = "MaximumNumberOfStickersReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfPruneRequestsHasBeenReached"] = 30040] = "MaximumNumberOfPruneRequestsHasBeenReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfGuildWidgetSettingsUpdatesHasBeenReached"] = 30042] = "MaximumNumberOfGuildWidgetSettingsUpdatesHasBeenReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfEditsToMessagesOlderThanOneHourReached"] = 30046] = "MaximumNumberOfEditsToMessagesOlderThanOneHourReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfPinnedThreadsInForumHasBeenReached"] = 30047] = "MaximumNumberOfPinnedThreadsInForumHasBeenReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfTagsInForumHasBeenReached"] = 30048] = "MaximumNumberOfTagsInForumHasBeenReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["BitrateIsTooHighForChannelOfThisType"] = 30052] = "BitrateIsTooHighForChannelOfThisType";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfPremiumEmojisReached"] = 30056] = "MaximumNumberOfPremiumEmojisReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfWebhooksPerGuildReached"] = 30058] = "MaximumNumberOfWebhooksPerGuildReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumNumberOfChannelPermissionOverwritesReached"] = 30060] = "MaximumNumberOfChannelPermissionOverwritesReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["TheChannelsForThisGuildAreTooLarge"] = 30061] = "TheChannelsForThisGuildAreTooLarge";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["Unauthorized"] = 40001] = "Unauthorized";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["VerifyYourAccount"] = 40002] = "VerifyYourAccount";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["OpeningDirectMessagesTooFast"] = 40003] = "OpeningDirectMessagesTooFast";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["SendMessagesHasBeenTemporarilyDisabled"] = 40004] = "SendMessagesHasBeenTemporarilyDisabled";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["RequestEntityTooLarge"] = 40005] = "RequestEntityTooLarge";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["FeatureTemporarilyDisabledServerSide"] = 40006] = "FeatureTemporarilyDisabledServerSide";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UserBannedFromThisGuild"] = 40007] = "UserBannedFromThisGuild";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ConnectionHasBeenRevoked"] = 40012] = "ConnectionHasBeenRevoked";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["TargetUserIsNotConnectedToVoice"] = 40032] = "TargetUserIsNotConnectedToVoice";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ThisMessageWasAlreadyCrossposted"] = 40033] = "ThisMessageWasAlreadyCrossposted";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ApplicationCommandWithThatNameAlreadyExists"] = 40041] = "ApplicationCommandWithThatNameAlreadyExists";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ApplicationInteractionFailedToSend"] = 40043] = "ApplicationInteractionFailedToSend";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotSendAMessageInAForumChannel"] = 40058] = "CannotSendAMessageInAForumChannel";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InteractionHasAlreadyBeenAcknowledged"] = 40060] = "InteractionHasAlreadyBeenAcknowledged";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["TagNamesMustBeUnique"] = 40061] = "TagNamesMustBeUnique";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ServiceResourceIsBeingRateLimited"] = 40062] = "ServiceResourceIsBeingRateLimited";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ThereAreNoTagsAvailableThatCanBeSetByNonModerators"] = 40066] = "ThereAreNoTagsAvailableThatCanBeSetByNonModerators";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["TagRequiredToCreateAForumPostInThisChannel"] = 40067] = "TagRequiredToCreateAForumPostInThisChannel";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["AnEntitlementHasAlreadyBeenGrantedForThisResource"] = 40074] = "AnEntitlementHasAlreadyBeenGrantedForThisResource";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MissingAccess"] = 50001] = "MissingAccess";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidAccountType"] = 50002] = "InvalidAccountType";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotExecuteActionOnDMChannel"] = 50003] = "CannotExecuteActionOnDMChannel";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["GuildWidgetDisabled"] = 50004] = "GuildWidgetDisabled";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotEditMessageAuthoredByAnotherUser"] = 50005] = "CannotEditMessageAuthoredByAnotherUser";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotSendAnEmptyMessage"] = 50006] = "CannotSendAnEmptyMessage";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotSendMessagesToThisUser"] = 50007] = "CannotSendMessagesToThisUser";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotSendMessagesInNonTextChannel"] = 50008] = "CannotSendMessagesInNonTextChannel";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ChannelVerificationLevelTooHighForYouToGainAccess"] = 50009] = "ChannelVerificationLevelTooHighForYouToGainAccess";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["OAuth2ApplicationDoesNotHaveBot"] = 50010] = "OAuth2ApplicationDoesNotHaveBot";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["OAuth2ApplicationLimitReached"] = 50011] = "OAuth2ApplicationLimitReached";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidOAuth2State"] = 50012] = "InvalidOAuth2State";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MissingPermissions"] = 50013] = "MissingPermissions";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidToken"] = 50014] = "InvalidToken";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["NoteWasTooLong"] = 50015] = "NoteWasTooLong";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ProvidedTooFewOrTooManyMessagesToDelete"] = 50016] = "ProvidedTooFewOrTooManyMessagesToDelete";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidMFALevel"] = 50017] = "InvalidMFALevel";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MessageCanOnlyBePinnedInTheChannelItWasSentIn"] = 50019] = "MessageCanOnlyBePinnedInTheChannelItWasSentIn";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InviteCodeInvalidOrTaken"] = 50020] = "InviteCodeInvalidOrTaken";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotExecuteActionOnSystemMessage"] = 50021] = "CannotExecuteActionOnSystemMessage";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotExecuteActionOnThisChannelType"] = 50024] = "CannotExecuteActionOnThisChannelType";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidOAuth2AccessToken"] = 50025] = "InvalidOAuth2AccessToken";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MissingRequiredOAuth2Scope"] = 50026] = "MissingRequiredOAuth2Scope";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidWebhookToken"] = 50027] = "InvalidWebhookToken";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidRole"] = 50028] = "InvalidRole";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidRecipients"] = 50033] = "InvalidRecipients";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["OneOfTheMessagesProvidedWasTooOldForBulkDelete"] = 50034] = "OneOfTheMessagesProvidedWasTooOldForBulkDelete";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidFormBodyOrContentType"] = 50035] = "InvalidFormBodyOrContentType";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InviteAcceptedToGuildWithoutTheBotBeingIn"] = 50036] = "InviteAcceptedToGuildWithoutTheBotBeingIn";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidActivityAction"] = 50039] = "InvalidActivityAction";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidAPIVersion"] = 50041] = "InvalidAPIVersion";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["FileUploadedExceedsMaximumSize"] = 50045] = "FileUploadedExceedsMaximumSize";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidFileUploaded"] = 50046] = "InvalidFileUploaded";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotSelfRedeemThisGift"] = 50054] = "CannotSelfRedeemThisGift";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidGuild"] = 50055] = "InvalidGuild";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidSKU"] = 50057] = "InvalidSKU";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidRequestOrigin"] = 50067] = "InvalidRequestOrigin";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidMessageType"] = 50068] = "InvalidMessageType";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["PaymentSourceRequiredToRedeemGift"] = 50070] = "PaymentSourceRequiredToRedeemGift";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotModifyASystemWebhook"] = 50073] = "CannotModifyASystemWebhook";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotDeleteChannelRequiredForCommunityGuilds"] = 50074] = "CannotDeleteChannelRequiredForCommunityGuilds";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotEditStickersWithinMessage"] = 50080] = "CannotEditStickersWithinMessage";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidStickerSent"] = 50081] = "InvalidStickerSent";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidActionOnArchivedThread"] = 50083] = "InvalidActionOnArchivedThread";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidThreadNotificationSettings"] = 50084] = "InvalidThreadNotificationSettings";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ParameterEarlierThanCreation"] = 50085] = "ParameterEarlierThanCreation";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CommunityServerChannelsMustBeTextChannels"] = 50086] = "CommunityServerChannelsMustBeTextChannels";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["TheEntityTypeOfTheEventIsDifferentFromTheEntityYouAreTryingToStartTheEventFor"] = 50091] = "TheEntityTypeOfTheEventIsDifferentFromTheEntityYouAreTryingToStartTheEventFor";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ServerNotAvailableInYourLocation"] = 50095] = "ServerNotAvailableInYourLocation";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ServerNeedsMonetizationEnabledToPerformThisAction"] = 50097] = "ServerNeedsMonetizationEnabledToPerformThisAction";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ServerNeedsMoreBoostsToPerformThisAction"] = 50101] = "ServerNeedsMoreBoostsToPerformThisAction";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["RequestBodyContainsInvalidJSON"] = 50109] = "RequestBodyContainsInvalidJSON";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["OwnerCannotBePendingMember"] = 50131] = "OwnerCannotBePendingMember";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["OwnershipCannotBeMovedToABotUser"] = 50132] = "OwnershipCannotBeMovedToABotUser";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["FailedToResizeAssetBelowTheMinimumSize"] = 50138] = "FailedToResizeAssetBelowTheMinimumSize";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotMixSubscriptionAndNonSubscriptionRolesForAnEmoji"] = 50144] = "CannotMixSubscriptionAndNonSubscriptionRolesForAnEmoji";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotConvertBetweenPremiumEmojiAndNormalEmoji"] = 50145] = "CannotConvertBetweenPremiumEmojiAndNormalEmoji";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UploadedFileNotFound"] = 50146] = "UploadedFileNotFound";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["VoiceMessagesDoNotSupportAdditionalContent"] = 50159] = "VoiceMessagesDoNotSupportAdditionalContent";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["VoiceMessagesMustHaveASingleAudioAttachment"] = 50160] = "VoiceMessagesMustHaveASingleAudioAttachment";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["VoiceMessagesMustHaveSupportingMetadata"] = 50161] = "VoiceMessagesMustHaveSupportingMetadata";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["VoiceMessagesCannotBeEdited"] = 50162] = "VoiceMessagesCannotBeEdited";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotDeleteGuildSubscriptionIntegration"] = 50163] = "CannotDeleteGuildSubscriptionIntegration";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["YouCannotSendVoiceMessagesInThisChannel"] = 50173] = "YouCannotSendVoiceMessagesInThisChannel";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["TheUserAccountMustFirstBeVerified"] = 50178] = "TheUserAccountMustFirstBeVerified";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["YouDoNotHavePermissionToSendThisSticker"] = 50600] = "YouDoNotHavePermissionToSendThisSticker";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["TwoFactorAuthenticationIsRequired"] = 60003] = "TwoFactorAuthenticationIsRequired";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["NoUsersWithDiscordTagExist"] = 80004] = "NoUsersWithDiscordTagExist";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ReactionWasBlocked"] = 90001] = "ReactionWasBlocked";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UserCannotUseBurstReactions"] = 90002] = "UserCannotUseBurstReactions";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ApplicationNotYetAvailable"] = 110001] = "ApplicationNotYetAvailable";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["APIResourceOverloaded"] = 130000] = "APIResourceOverloaded";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["TheStageIsAlreadyOpen"] = 150006] = "TheStageIsAlreadyOpen";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotReplyWithoutPermissionToReadMessageHistory"] = 160002] = "CannotReplyWithoutPermissionToReadMessageHistory";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ThreadAlreadyCreatedForMessage"] = 160004] = "ThreadAlreadyCreatedForMessage";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["ThreadLocked"] = 160005] = "ThreadLocked";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumActiveThreads"] = 160006] = "MaximumActiveThreads";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MaximumActiveAnnouncementThreads"] = 160007] = "MaximumActiveAnnouncementThreads";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidJSONForUploadedLottieFile"] = 170001] = "InvalidJSONForUploadedLottieFile";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["UploadedLottiesCannotContainRasterizedImages"] = 170002] = "UploadedLottiesCannotContainRasterizedImages";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["StickerMaximumFramerateExceeded"] = 170003] = "StickerMaximumFramerateExceeded";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["StickerFrameCountExceedsMaximumOf1000Frames"] = 170004] = "StickerFrameCountExceedsMaximumOf1000Frames";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["LottieAnimationMaximumDimensionsExceeded"] = 170005] = "LottieAnimationMaximumDimensionsExceeded";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["StickerFramerateIsTooSmallOrTooLarge"] = 170006] = "StickerFramerateIsTooSmallOrTooLarge";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["StickerAnimationDurationExceedsMaximumOf5Seconds"] = 170007] = "StickerAnimationDurationExceedsMaximumOf5Seconds";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotUpdateAFinishedEvent"] = 180000] = "CannotUpdateAFinishedEvent";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["FailedToCreateStageNeededForStageEvent"] = 180002] = "FailedToCreateStageNeededForStageEvent";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MessageWasBlockedByAutomaticModeration"] = 200000] = "MessageWasBlockedByAutomaticModeration";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["TitleWasBlockedByAutomaticModeration"] = 200001] = "TitleWasBlockedByAutomaticModeration";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["WebhooksPostedToForumChannelsMustHaveAThreadNameOrThreadId"] = 220001] = "WebhooksPostedToForumChannelsMustHaveAThreadNameOrThreadId";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["WebhooksPostedToForumChannelsCannotHaveBothAThreadNameAndThreadId"] = 220002] = "WebhooksPostedToForumChannelsCannotHaveBothAThreadNameAndThreadId";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["WebhooksCanOnlyCreateThreadsInForumChannels"] = 220003] = "WebhooksCanOnlyCreateThreadsInForumChannels";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["WebhookServicesCannotBeUsedInForumChannels"] = 220004] = "WebhookServicesCannotBeUsedInForumChannels";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["MessageBlockedByHarmfulLinksFilter"] = 240000] = "MessageBlockedByHarmfulLinksFilter";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotEnableOnboardingRequirementsAreNotMet"] = 350000] = "CannotEnableOnboardingRequirementsAreNotMet";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotUpdateOnboardingWhileBelowRequirements"] = 350001] = "CannotUpdateOnboardingWhileBelowRequirements";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["FailedToBanUsers"] = 500000] = "FailedToBanUsers";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["PollVotingBlocked"] = 520000] = "PollVotingBlocked";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["PollExpired"] = 520001] = "PollExpired";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["InvalidChannelTypeForPollCreation"] = 520002] = "InvalidChannelTypeForPollCreation";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotEditAPollMessage"] = 520003] = "CannotEditAPollMessage";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotUseAnEmojiIncludedWithThePoll"] = 520004] = "CannotUseAnEmojiIncludedWithThePoll";
	    RESTJSONErrorCodes[RESTJSONErrorCodes["CannotExpireANonPollMessage"] = 520006] = "CannotExpireANonPollMessage";
	})(RESTJSONErrorCodes || (common$1.RESTJSONErrorCodes = RESTJSONErrorCodes = {}));
	/**
	 * https://discord.com/developers/docs/reference#locales
	 */
	var Locale;
	(function (Locale) {
	    Locale["Indonesian"] = "id";
	    Locale["EnglishUS"] = "en-US";
	    Locale["EnglishGB"] = "en-GB";
	    Locale["Bulgarian"] = "bg";
	    Locale["ChineseCN"] = "zh-CN";
	    Locale["ChineseTW"] = "zh-TW";
	    Locale["Croatian"] = "hr";
	    Locale["Czech"] = "cs";
	    Locale["Danish"] = "da";
	    Locale["Dutch"] = "nl";
	    Locale["Finnish"] = "fi";
	    Locale["French"] = "fr";
	    Locale["German"] = "de";
	    Locale["Greek"] = "el";
	    Locale["Hindi"] = "hi";
	    Locale["Hungarian"] = "hu";
	    Locale["Italian"] = "it";
	    Locale["Japanese"] = "ja";
	    Locale["Korean"] = "ko";
	    Locale["Lithuanian"] = "lt";
	    Locale["Norwegian"] = "no";
	    Locale["Polish"] = "pl";
	    Locale["PortugueseBR"] = "pt-BR";
	    Locale["Romanian"] = "ro";
	    Locale["Russian"] = "ru";
	    Locale["SpanishES"] = "es-ES";
	    Locale["SpanishLATAM"] = "es-419";
	    Locale["Swedish"] = "sv-SE";
	    Locale["Thai"] = "th";
	    Locale["Turkish"] = "tr";
	    Locale["Ukrainian"] = "uk";
	    Locale["Vietnamese"] = "vi";
	})(Locale || (common$1.Locale = Locale = {}));
	
	return common$1;
}

var application = {};

var hasRequiredApplication;

function requireApplication () {
	if (hasRequiredApplication) return application;
	hasRequiredApplication = 1;
	Object.defineProperty(application, "__esModule", { value: true });
	
	return application;
}

var auditLog = {};

var hasRequiredAuditLog;

function requireAuditLog () {
	if (hasRequiredAuditLog) return auditLog;
	hasRequiredAuditLog = 1;
	Object.defineProperty(auditLog, "__esModule", { value: true });
	
	return auditLog;
}

var autoModeration = {};

var hasRequiredAutoModeration;

function requireAutoModeration () {
	if (hasRequiredAutoModeration) return autoModeration;
	hasRequiredAutoModeration = 1;
	Object.defineProperty(autoModeration, "__esModule", { value: true });
	
	return autoModeration;
}

var channel = {};

var hasRequiredChannel;

function requireChannel () {
	if (hasRequiredChannel) return channel;
	hasRequiredChannel = 1;
	Object.defineProperty(channel, "__esModule", { value: true });
	
	return channel;
}

var emoji = {};

var hasRequiredEmoji;

function requireEmoji () {
	if (hasRequiredEmoji) return emoji;
	hasRequiredEmoji = 1;
	Object.defineProperty(emoji, "__esModule", { value: true });
	
	return emoji;
}

var gateway = {};

var hasRequiredGateway;

function requireGateway () {
	if (hasRequiredGateway) return gateway;
	hasRequiredGateway = 1;
	Object.defineProperty(gateway, "__esModule", { value: true });
	
	return gateway;
}

var guild = {};

var hasRequiredGuild$1;

function requireGuild$1 () {
	if (hasRequiredGuild$1) return guild;
	hasRequiredGuild$1 = 1;
	Object.defineProperty(guild, "__esModule", { value: true });
	
	return guild;
}

var guildScheduledEvent = {};

var hasRequiredGuildScheduledEvent;

function requireGuildScheduledEvent () {
	if (hasRequiredGuildScheduledEvent) return guildScheduledEvent;
	hasRequiredGuildScheduledEvent = 1;
	Object.defineProperty(guildScheduledEvent, "__esModule", { value: true });
	
	return guildScheduledEvent;
}

var interactions = {};

var hasRequiredInteractions;

function requireInteractions () {
	if (hasRequiredInteractions) return interactions;
	hasRequiredInteractions = 1;
	Object.defineProperty(interactions, "__esModule", { value: true });
	
	return interactions;
}

var invite = {};

var hasRequiredInvite;

function requireInvite () {
	if (hasRequiredInvite) return invite;
	hasRequiredInvite = 1;
	Object.defineProperty(invite, "__esModule", { value: true });
	
	return invite;
}

var oauth2 = {};

var hasRequiredOauth2;

function requireOauth2 () {
	if (hasRequiredOauth2) return oauth2;
	hasRequiredOauth2 = 1;
	Object.defineProperty(oauth2, "__esModule", { value: true });
	
	return oauth2;
}

var poll = {};

var hasRequiredPoll;

function requirePoll () {
	if (hasRequiredPoll) return poll;
	hasRequiredPoll = 1;
	Object.defineProperty(poll, "__esModule", { value: true });
	
	return poll;
}

var stageInstance = {};

var hasRequiredStageInstance;

function requireStageInstance () {
	if (hasRequiredStageInstance) return stageInstance;
	hasRequiredStageInstance = 1;
	Object.defineProperty(stageInstance, "__esModule", { value: true });
	
	return stageInstance;
}

var sticker = {};

var hasRequiredSticker;

function requireSticker () {
	if (hasRequiredSticker) return sticker;
	hasRequiredSticker = 1;
	Object.defineProperty(sticker, "__esModule", { value: true });
	
	return sticker;
}

var template = {};

var hasRequiredTemplate;

function requireTemplate () {
	if (hasRequiredTemplate) return template;
	hasRequiredTemplate = 1;
	Object.defineProperty(template, "__esModule", { value: true });
	
	return template;
}

var user = {};

var hasRequiredUser;

function requireUser () {
	if (hasRequiredUser) return user;
	hasRequiredUser = 1;
	Object.defineProperty(user, "__esModule", { value: true });
	
	return user;
}

var voice = {};

var hasRequiredVoice;

function requireVoice () {
	if (hasRequiredVoice) return voice;
	hasRequiredVoice = 1;
	Object.defineProperty(voice, "__esModule", { value: true });
	
	return voice;
}

var webhook = {};

var hasRequiredWebhook;

function requireWebhook () {
	if (hasRequiredWebhook) return webhook;
	hasRequiredWebhook = 1;
	Object.defineProperty(webhook, "__esModule", { value: true });
	
	return webhook;
}

var monetization = {};

var hasRequiredMonetization;

function requireMonetization () {
	if (hasRequiredMonetization) return monetization;
	hasRequiredMonetization = 1;
	Object.defineProperty(monetization, "__esModule", { value: true });
	monetization.EntitlementOwnerType = void 0;
	/**
	 * https://discord.com/developers/docs/monetization/entitlements#create-test-entitlement
	 */
	var EntitlementOwnerType;
	(function (EntitlementOwnerType) {
	    EntitlementOwnerType[EntitlementOwnerType["Guild"] = 1] = "Guild";
	    EntitlementOwnerType[EntitlementOwnerType["User"] = 2] = "User";
	})(EntitlementOwnerType || (monetization.EntitlementOwnerType = EntitlementOwnerType = {}));
	
	return monetization;
}

var hasRequiredV10$3;

function requireV10$3 () {
	if (hasRequiredV10$3) return v10$5;
	hasRequiredV10$3 = 1;
	(function (exports) {
		var __createBinding = (v10$5 && v10$5.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (v10$5 && v10$5.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.OAuth2Routes = exports.RouteBases = exports.CDNRoutes = exports.ImageFormat = exports.StickerPackApplicationId = exports.Routes = exports.APIVersion = void 0;
		__exportStar(requireCommon$1(), exports);
		__exportStar(requireApplication(), exports);
		__exportStar(requireAuditLog(), exports);
		__exportStar(requireAutoModeration(), exports);
		__exportStar(requireChannel(), exports);
		__exportStar(requireEmoji(), exports);
		__exportStar(requireGateway(), exports);
		__exportStar(requireGuild$1(), exports);
		__exportStar(requireGuildScheduledEvent(), exports);
		__exportStar(requireInteractions(), exports);
		__exportStar(requireInvite(), exports);
		__exportStar(requireOauth2(), exports);
		__exportStar(requirePoll(), exports);
		__exportStar(requireStageInstance(), exports);
		__exportStar(requireSticker(), exports);
		__exportStar(requireTemplate(), exports);
		__exportStar(requireUser(), exports);
		__exportStar(requireVoice(), exports);
		__exportStar(requireWebhook(), exports);
		__exportStar(requireMonetization(), exports);
		exports.APIVersion = '10';
		exports.Routes = {
		    /**
		     * Route for:
		     * - GET `/applications/{application.id}/role-connections/metadata`
		     * - PUT `/applications/{application.id}/role-connections/metadata`
		     */
		    applicationRoleConnectionMetadata(applicationId) {
		        return `/applications/${applicationId}/role-connections/metadata`;
		    },
		    /**
		     * Route for:
		     * - GET  `/guilds/{guild.id}/auto-moderation/rules`
		     * - POST `/guilds/{guild.id}/auto-moderation/rules`
		     */
		    guildAutoModerationRules(guildId) {
		        return `/guilds/${guildId}/auto-moderation/rules`;
		    },
		    /**
		     * Routes for:
		     * - GET    `/guilds/{guild.id}/auto-moderation/rules/{rule.id}`
		     * - PATCH  `/guilds/{guild.id}/auto-moderation/rules/{rule.id}`
		     * - DELETE `/guilds/{guild.id}/auto-moderation/rules/{rule.id}`
		     */
		    guildAutoModerationRule(guildId, ruleId) {
		        return `/guilds/${guildId}/auto-moderation/rules/${ruleId}`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/audit-logs`
		     */
		    guildAuditLog(guildId) {
		        return `/guilds/${guildId}/audit-logs`;
		    },
		    /**
		     * Route for:
		     * - GET    `/channels/{channel.id}`
		     * - PATCH  `/channels/{channel.id}`
		     * - DELETE `/channels/{channel.id}`
		     */
		    channel(channelId) {
		        return `/channels/${channelId}`;
		    },
		    /**
		     * Route for:
		     * - GET  `/channels/{channel.id}/messages`
		     * - POST `/channels/{channel.id}/messages`
		     */
		    channelMessages(channelId) {
		        return `/channels/${channelId}/messages`;
		    },
		    /**
		     * Route for:
		     * - GET    `/channels/{channel.id}/messages/{message.id}`
		     * - PATCH  `/channels/{channel.id}/messages/{message.id}`
		     * - DELETE `/channels/{channel.id}/messages/{message.id}`
		     */
		    channelMessage(channelId, messageId) {
		        return `/channels/${channelId}/messages/${messageId}`;
		    },
		    /**
		     * Route for:
		     * - POST `/channels/{channel.id}/messages/{message.id}/crosspost`
		     */
		    channelMessageCrosspost(channelId, messageId) {
		        return `/channels/${channelId}/messages/${messageId}/crosspost`;
		    },
		    /**
		     * Route for:
		     * - PUT    `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/@me`
		     * - DELETE `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/@me`
		     *
		     * **Note**: You need to URL encode the emoji yourself
		     */
		    channelMessageOwnReaction(channelId, messageId, emoji) {
		        return `/channels/${channelId}/messages/${messageId}/reactions/${emoji}/@me`;
		    },
		    /**
		     * Route for:
		     * - DELETE `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/{user.id}`
		     *
		     * **Note**: You need to URL encode the emoji yourself
		     */
		    channelMessageUserReaction(channelId, messageId, emoji, userId) {
		        return `/channels/${channelId}/messages/${messageId}/reactions/${emoji}/${userId}`;
		    },
		    /**
		     * Route for:
		     * - GET    `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}`
		     * - DELETE `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}`
		     *
		     * **Note**: You need to URL encode the emoji yourself
		     */
		    channelMessageReaction(channelId, messageId, emoji) {
		        return `/channels/${channelId}/messages/${messageId}/reactions/${emoji}`;
		    },
		    /**
		     * Route for:
		     * - DELETE `/channels/{channel.id}/messages/{message.id}/reactions`
		     */
		    channelMessageAllReactions(channelId, messageId) {
		        return `/channels/${channelId}/messages/${messageId}/reactions`;
		    },
		    /**
		     * Route for:
		     * - POST `/channels/{channel.id}/messages/bulk-delete`
		     */
		    channelBulkDelete(channelId) {
		        return `/channels/${channelId}/messages/bulk-delete`;
		    },
		    /**
		     * Route for:
		     * - PUT    `/channels/{channel.id}/permissions/{overwrite.id}`
		     * - DELETE `/channels/{channel.id}/permissions/{overwrite.id}`
		     */
		    channelPermission(channelId, overwriteId) {
		        return `/channels/${channelId}/permissions/${overwriteId}`;
		    },
		    /**
		     * Route for:
		     * - GET  `/channels/{channel.id}/invites`
		     * - POST `/channels/{channel.id}/invites`
		     */
		    channelInvites(channelId) {
		        return `/channels/${channelId}/invites`;
		    },
		    /**
		     * Route for:
		     * - POST `/channels/{channel.id}/followers`
		     */
		    channelFollowers(channelId) {
		        return `/channels/${channelId}/followers`;
		    },
		    /**
		     * Route for:
		     * - POST `/channels/{channel.id}/typing`
		     */
		    channelTyping(channelId) {
		        return `/channels/${channelId}/typing`;
		    },
		    /**
		     * Route for:
		     * - GET `/channels/{channel.id}/pins`
		     */
		    channelPins(channelId) {
		        return `/channels/${channelId}/pins`;
		    },
		    /**
		     * Route for:
		     * - PUT    `/channels/{channel.id}/pins/{message.id}`
		     * - DELETE `/channels/{channel.id}/pins/{message.id}`
		     */
		    channelPin(channelId, messageId) {
		        return `/channels/${channelId}/pins/${messageId}`;
		    },
		    /**
		     * Route for:
		     * - PUT    `/channels/{channel.id}/recipients/{user.id}`
		     * - DELETE `/channels/{channel.id}/recipients/{user.id}`
		     */
		    channelRecipient(channelId, userId) {
		        return `/channels/${channelId}/recipients/${userId}`;
		    },
		    /**
		     * Route for:
		     * - GET  `/guilds/{guild.id}/emojis`
		     * - POST `/guilds/{guild.id}/emojis`
		     */
		    guildEmojis(guildId) {
		        return `/guilds/${guildId}/emojis`;
		    },
		    /**
		     * Route for:
		     * - GET    `/guilds/{guild.id}/emojis/{emoji.id}`
		     * - PATCH  `/guilds/{guild.id}/emojis/{emoji.id}`
		     * - DELETE `/guilds/{guild.id}/emojis/{emoji.id}`
		     */
		    guildEmoji(guildId, emojiId) {
		        return `/guilds/${guildId}/emojis/${emojiId}`;
		    },
		    /**
		     * Route for:
		     * - POST `/guilds`
		     */
		    guilds() {
		        return '/guilds';
		    },
		    /**
		     * Route for:
		     * - GET    `/guilds/{guild.id}`
		     * - PATCH  `/guilds/{guild.id}`
		     * - DELETE `/guilds/{guild.id}`
		     */
		    guild(guildId) {
		        return `/guilds/${guildId}`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/preview`
		     */
		    guildPreview(guildId) {
		        return `/guilds/${guildId}/preview`;
		    },
		    /**
		     * Route for:
		     * - GET   `/guilds/{guild.id}/channels`
		     * - POST  `/guilds/{guild.id}/channels`
		     * - PATCH `/guilds/{guild.id}/channels`
		     */
		    guildChannels(guildId) {
		        return `/guilds/${guildId}/channels`;
		    },
		    /**
		     * Route for:
		     * - GET    `/guilds/{guild.id}/members/{user.id}`
		     * - PUT    `/guilds/{guild.id}/members/{user.id}`
		     * - PATCH  `/guilds/{guild.id}/members/@me`
		     * - PATCH  `/guilds/{guild.id}/members/{user.id}`
		     * - DELETE `/guilds/{guild.id}/members/{user.id}`
		     */
		    guildMember(guildId, userId = '@me') {
		        return `/guilds/${guildId}/members/${userId}`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/members`
		     */
		    guildMembers(guildId) {
		        return `/guilds/${guildId}/members`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/members/search`
		     */
		    guildMembersSearch(guildId) {
		        return `/guilds/${guildId}/members/search`;
		    },
		    /**
		     * Route for:
		     * - PATCH `/guilds/{guild.id}/members/@me/nick`
		     *
		     * @deprecated Use {@link Routes.guildMember} instead.
		     */
		    guildCurrentMemberNickname(guildId) {
		        return `/guilds/${guildId}/members/@me/nick`;
		    },
		    /**
		     * Route for:
		     * - PUT    `/guilds/{guild.id}/members/{user.id}/roles/{role.id}`
		     * - DELETE `/guilds/{guild.id}/members/{user.id}/roles/{role.id}`
		     */
		    guildMemberRole(guildId, memberId, roleId) {
		        return `/guilds/${guildId}/members/${memberId}/roles/${roleId}`;
		    },
		    /**
		     * Route for:
		     * - POST `/guilds/{guild.id}/mfa`
		     */
		    guildMFA(guildId) {
		        return `/guilds/${guildId}/mfa`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/bans`
		     */
		    guildBans(guildId) {
		        return `/guilds/${guildId}/bans`;
		    },
		    /**
		     * Route for:
		     * - GET    `/guilds/{guild.id}/bans/{user.id}`
		     * - PUT    `/guilds/{guild.id}/bans/{user.id}`
		     * - DELETE `/guilds/{guild.id}/bans/{user.id}`
		     */
		    guildBan(guildId, userId) {
		        return `/guilds/${guildId}/bans/${userId}`;
		    },
		    /**
		     * Route for:
		     * - GET   `/guilds/{guild.id}/roles`
		     * - POST  `/guilds/{guild.id}/roles`
		     * - PATCH `/guilds/{guild.id}/roles`
		     */
		    guildRoles(guildId) {
		        return `/guilds/${guildId}/roles`;
		    },
		    /**
		     * Route for:
		     * - PATCH  `/guilds/{guild.id}/roles/{role.id}`
		     * - DELETE `/guilds/{guild.id}/roles/{role.id}`
		     */
		    guildRole(guildId, roleId) {
		        return `/guilds/${guildId}/roles/${roleId}`;
		    },
		    /**
		     * Route for:
		     * - GET  `/guilds/{guild.id}/prune`
		     * - POST `/guilds/{guild.id}/prune`
		     */
		    guildPrune(guildId) {
		        return `/guilds/${guildId}/prune`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/regions`
		     */
		    guildVoiceRegions(guildId) {
		        return `/guilds/${guildId}/regions`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/invites`
		     */
		    guildInvites(guildId) {
		        return `/guilds/${guildId}/invites`;
		    },
		    /**
		     * Route for:
		     * - GET  `/guilds/{guild.id}/integrations`
		     */
		    guildIntegrations(guildId) {
		        return `/guilds/${guildId}/integrations`;
		    },
		    /**
		     * Route for:
		     * - DELETE `/guilds/{guild.id}/integrations/{integration.id}`
		     */
		    guildIntegration(guildId, integrationId) {
		        return `/guilds/${guildId}/integrations/${integrationId}`;
		    },
		    /**
		     * Route for:
		     * - GET   `/guilds/{guild.id}/widget`
		     * - PATCH `/guilds/{guild.id}/widget`
		     */
		    guildWidgetSettings(guildId) {
		        return `/guilds/${guildId}/widget`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/widget.json`
		     */
		    guildWidgetJSON(guildId) {
		        return `/guilds/${guildId}/widget.json`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/vanity-url`
		     */
		    guildVanityUrl(guildId) {
		        return `/guilds/${guildId}/vanity-url`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/widget.png`
		     */
		    guildWidgetImage(guildId) {
		        return `/guilds/${guildId}/widget.png`;
		    },
		    /**
		     * Route for:
		     * - GET    `/invites/{invite.code}`
		     * - DELETE `/invites/{invite.code}`
		     */
		    invite(code) {
		        return `/invites/${code}`;
		    },
		    /**
		     * Route for:
		     * - GET  `/guilds/templates/{template.code}`
		     * - POST `/guilds/templates/{template.code}`
		     */
		    template(code) {
		        return `/guilds/templates/${code}`;
		    },
		    /**
		     * Route for:
		     * - GET  `/guilds/{guild.id}/templates`
		     * - POST `/guilds/{guild.id}/templates`
		     */
		    guildTemplates(guildId) {
		        return `/guilds/${guildId}/templates`;
		    },
		    /**
		     * Route for:
		     * - PUT    `/guilds/{guild.id}/templates/{template.code}`
		     * - PATCH  `/guilds/{guild.id}/templates/{template.code}`
		     * - DELETE `/guilds/{guild.id}/templates/{template.code}`
		     */
		    guildTemplate(guildId, code) {
		        return `/guilds/${guildId}/templates/${code}`;
		    },
		    /**
		     * Route for:
		     * - GET `/channels/{channel.id}/polls/{message.id}/answers/{answer_id}`
		     */
		    pollAnswerVoters(channelId, messageId, answerId) {
		        return `/channels/${channelId}/polls/${messageId}/answers/${answerId}`;
		    },
		    /**
		     * Route for:
		     * - POST `/channels/{channel.id}/polls/{message.id}/expire`
		     */
		    expirePoll(channelId, messageId) {
		        return `/channels/${channelId}/polls/${messageId}/expire`;
		    },
		    /**
		     * Route for:
		     * - POST `/channels/{channel.id}/threads`
		     * - POST `/channels/{channel.id}/messages/{message.id}/threads`
		     */
		    threads(parentId, messageId) {
		        const parts = ['', 'channels', parentId];
		        if (messageId)
		            parts.push('messages', messageId);
		        parts.push('threads');
		        return parts.join('/');
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/threads/active`
		     */
		    guildActiveThreads(guildId) {
		        return `/guilds/${guildId}/threads/active`;
		    },
		    /**
		     * Route for:
		     * - GET `/channels/{channel.id}/threads/archived/public`
		     * - GET `/channels/{channel.id}/threads/archived/private`
		     */
		    channelThreads(channelId, archivedStatus) {
		        return `/channels/${channelId}/threads/archived/${archivedStatus}`;
		    },
		    /**
		     * Route for:
		     * - GET `/channels/{channel.id}/users/@me/threads/archived/private`
		     */
		    channelJoinedArchivedThreads(channelId) {
		        return `/channels/${channelId}/users/@me/threads/archived/private`;
		    },
		    /**
		     * Route for:
		     * - GET    `/channels/{thread.id}/thread-members`
		     * - GET    `/channels/{thread.id}/thread-members/{user.id}`
		     * - PUT    `/channels/{thread.id}/thread-members/@me`
		     * - PUT    `/channels/{thread.id}/thread-members/{user.id}`
		     * - DELETE `/channels/{thread.id}/thread-members/@me`
		     * - DELETE `/channels/{thread.id}/thread-members/{user.id}`
		     */
		    threadMembers(threadId, userId) {
		        const parts = ['', 'channels', threadId, 'thread-members'];
		        if (userId)
		            parts.push(userId);
		        return parts.join('/');
		    },
		    /**
		     * Route for:
		     * - GET   `/users/@me`
		     * - GET   `/users/{user.id}`
		     * - PATCH `/users/@me`
		     *
		     * @param [userId] The user ID, defaulted to `@me`
		     */
		    user(userId = '@me') {
		        return `/users/${userId}`;
		    },
		    /**
		     * Route for:
		     * - GET `/users/@me/applications/{application.id}/role-connection`
		     * - PUT `/users/@me/applications/{application.id}/role-connection`
		     */
		    userApplicationRoleConnection(applicationId) {
		        return `/users/@me/applications/${applicationId}/role-connection`;
		    },
		    /**
		     * Route for:
		     * - GET `/users/@me/guilds`
		     */
		    userGuilds() {
		        return `/users/@me/guilds`;
		    },
		    /**
		     * Route for:
		     * - GET `/users/@me/guilds/{guild.id}/member`
		     */
		    userGuildMember(guildId) {
		        return `/users/@me/guilds/${guildId}/member`;
		    },
		    /**
		     * Route for:
		     * - DELETE `/users/@me/guilds/{guild.id}`
		     */
		    userGuild(guildId) {
		        return `/users/@me/guilds/${guildId}`;
		    },
		    /**
		     * Route for:
		     * - POST `/users/@me/channels`
		     */
		    userChannels() {
		        return `/users/@me/channels`;
		    },
		    /**
		     * Route for:
		     * - GET `/users/@me/connections`
		     */
		    userConnections() {
		        return `/users/@me/connections`;
		    },
		    /**
		     * Route for:
		     * - GET `/voice/regions`
		     */
		    voiceRegions() {
		        return `/voice/regions`;
		    },
		    /**
		     * Route for:
		     * - GET  `/channels/{channel.id}/webhooks`
		     * - POST `/channels/{channel.id}/webhooks`
		     */
		    channelWebhooks(channelId) {
		        return `/channels/${channelId}/webhooks`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/webhooks`
		     */
		    guildWebhooks(guildId) {
		        return `/guilds/${guildId}/webhooks`;
		    },
		    /**
		     * Route for:
		     * - GET    `/webhooks/{webhook.id}`
		     * - GET    `/webhooks/{webhook.id}/{webhook.token}`
		     * - PATCH  `/webhooks/{webhook.id}`
		     * - PATCH  `/webhooks/{webhook.id}/{webhook.token}`
		     * - DELETE `/webhooks/{webhook.id}`
		     * - DELETE `/webhooks/{webhook.id}/{webhook.token}`
		     * - POST   `/webhooks/{webhook.id}/{webhook.token}`
		     *
		     * - POST   `/webhooks/{application.id}/{interaction.token}`
		     */
		    webhook(webhookId, webhookToken) {
		        const parts = ['', 'webhooks', webhookId];
		        if (webhookToken)
		            parts.push(webhookToken);
		        return parts.join('/');
		    },
		    /**
		     * Route for:
		     * - GET    `/webhooks/{webhook.id}/{webhook.token}/messages/@original`
		     * - GET    `/webhooks/{webhook.id}/{webhook.token}/messages/{message.id}`
		     * - PATCH  `/webhooks/{webhook.id}/{webhook.token}/messages/@original`
		     * - PATCH  `/webhooks/{webhook.id}/{webhook.token}/messages/{message.id}`
		     * - DELETE `/webhooks/{webhook.id}/{webhook.token}/messages/@original`
		     * - DELETE `/webhooks/{webhook.id}/{webhook.token}/messages/{message.id}`
		     *
		     * - PATCH  `/webhooks/{application.id}/{interaction.token}/messages/@original`
		     * - PATCH  `/webhooks/{application.id}/{interaction.token}/messages/{message.id}`
		     * - DELETE `/webhooks/{application.id}/{interaction.token}/messages/{message.id}`
		     */
		    webhookMessage(webhookId, webhookToken, messageId = '@original') {
		        return `/webhooks/${webhookId}/${webhookToken}/messages/${messageId}`;
		    },
		    /**
		     * Route for:
		     * - POST `/webhooks/{webhook.id}/{webhook.token}/github`
		     * - POST `/webhooks/{webhook.id}/{webhook.token}/slack`
		     */
		    webhookPlatform(webhookId, webhookToken, platform) {
		        return `/webhooks/${webhookId}/${webhookToken}/${platform}`;
		    },
		    /**
		     * Route for:
		     * - GET `/gateway`
		     */
		    gateway() {
		        return `/gateway`;
		    },
		    /**
		     * Route for:
		     * - GET `/gateway/bot`
		     */
		    gatewayBot() {
		        return `/gateway/bot`;
		    },
		    /**
		     * Route for:
		     * - GET `/oauth2/applications/@me`
		     */
		    oauth2CurrentApplication() {
		        return `/oauth2/applications/@me`;
		    },
		    /**
		     * Route for:
		     * - GET `/oauth2/@me`
		     */
		    oauth2CurrentAuthorization() {
		        return `/oauth2/@me`;
		    },
		    /**
		     * Route for:
		     * - GET `/oauth2/authorize`
		     */
		    oauth2Authorization() {
		        return `/oauth2/authorize`;
		    },
		    /**
		     * Route for:
		     * - POST `/oauth2/token`
		     */
		    oauth2TokenExchange() {
		        return `/oauth2/token`;
		    },
		    /**
		     * Route for:
		     * - POST `/oauth2/token/revoke`
		     */
		    oauth2TokenRevocation() {
		        return `/oauth2/token/revoke`;
		    },
		    /**
		     * Route for:
		     * - GET  `/applications/{application.id}/commands`
		     * - PUT  `/applications/{application.id}/commands`
		     * - POST `/applications/{application.id}/commands`
		     */
		    applicationCommands(applicationId) {
		        return `/applications/${applicationId}/commands`;
		    },
		    /**
		     * Route for:
		     * - GET    `/applications/{application.id}/commands/{command.id}`
		     * - PATCH  `/applications/{application.id}/commands/{command.id}`
		     * - DELETE `/applications/{application.id}/commands/{command.id}`
		     */
		    applicationCommand(applicationId, commandId) {
		        return `/applications/${applicationId}/commands/${commandId}`;
		    },
		    /**
		     * Route for:
		     * - GET  `/applications/{application.id}/guilds/{guild.id}/commands`
		     * - PUT  `/applications/{application.id}/guilds/{guild.id}/commands`
		     * - POST `/applications/{application.id}/guilds/{guild.id}/commands`
		     */
		    applicationGuildCommands(applicationId, guildId) {
		        return `/applications/${applicationId}/guilds/${guildId}/commands`;
		    },
		    /**
		     * Route for:
		     * - GET    `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}`
		     * - PATCH  `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}`
		     * - DELETE `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}`
		     */
		    applicationGuildCommand(applicationId, guildId, commandId) {
		        return `/applications/${applicationId}/guilds/${guildId}/commands/${commandId}`;
		    },
		    /**
		     * Route for:
		     * - POST `/interactions/{interaction.id}/{interaction.token}/callback`
		     */
		    interactionCallback(interactionId, interactionToken) {
		        return `/interactions/${interactionId}/${interactionToken}/callback`;
		    },
		    /**
		     * Route for:
		     * - GET   `/guilds/{guild.id}/member-verification`
		     * - PATCH `/guilds/{guild.id}/member-verification`
		     */
		    guildMemberVerification(guildId) {
		        return `/guilds/${guildId}/member-verification`;
		    },
		    /**
		     * Route for:
		     * - PATCH `/guilds/{guild.id}/voice-states/@me`
		     * - PATCH `/guilds/{guild.id}/voice-states/{user.id}`
		     */
		    guildVoiceState(guildId, userId = '@me') {
		        return `/guilds/${guildId}/voice-states/${userId}`;
		    },
		    /**
		     * Route for:
		     * - GET `/applications/{application.id}/guilds/{guild.id}/commands/permissions`
		     * - PUT `/applications/{application.id}/guilds/{guild.id}/commands/permissions`
		     */
		    guildApplicationCommandsPermissions(applicationId, guildId) {
		        return `/applications/${applicationId}/guilds/${guildId}/commands/permissions`;
		    },
		    /**
		     * Route for:
		     * - GET `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}/permissions`
		     * - PUT `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}/permissions`
		     */
		    applicationCommandPermissions(applicationId, guildId, commandId) {
		        return `/applications/${applicationId}/guilds/${guildId}/commands/${commandId}/permissions`;
		    },
		    /**
		     * Route for:
		     * - GET   `/guilds/{guild.id}/welcome-screen`
		     * - PATCH `/guilds/{guild.id}/welcome-screen`
		     */
		    guildWelcomeScreen(guildId) {
		        return `/guilds/${guildId}/welcome-screen`;
		    },
		    /**
		     * Route for:
		     * - POST `/stage-instances`
		     */
		    stageInstances() {
		        return `/stage-instances`;
		    },
		    /**
		     * Route for:
		     * - GET `/stage-instances/{channel.id}`
		     * - PATCH `/stage-instances/{channel.id}`
		     * - DELETE `/stage-instances/{channel.id}`
		     */
		    stageInstance(channelId) {
		        return `/stage-instances/${channelId}`;
		    },
		    /**
		     * Route for:
		     * - GET `/stickers/{sticker.id}`
		     */
		    sticker(stickerId) {
		        return `/stickers/${stickerId}`;
		    },
		    /**
		     * Route for:
		     * - GET `/sticker-packs`
		     */
		    stickerPacks() {
		        return '/sticker-packs';
		    },
		    /**
		     * Route for:
		     * - GET `/sticker-packs`
		     *
		     * @deprecated Use {@link Routes.stickerPacks} instead.
		     */
		    nitroStickerPacks() {
		        return '/sticker-packs';
		    },
		    /**
		     * Route for:
		     * - GET  `/guilds/{guild.id}/stickers`
		     * - POST `/guilds/{guild.id}/stickers`
		     */
		    guildStickers(guildId) {
		        return `/guilds/${guildId}/stickers`;
		    },
		    /**
		     * Route for:
		     * - GET    `/guilds/{guild.id}/stickers/{sticker.id}`
		     * - PATCH  `/guilds/{guild.id}/stickers/{sticker.id}`
		     * - DELETE `/guilds/{guild.id}/stickers/{sticker.id}`
		     */
		    guildSticker(guildId, stickerId) {
		        return `/guilds/${guildId}/stickers/${stickerId}`;
		    },
		    /**
		     * Route for:
		     * - GET  `/guilds/{guild.id}/scheduled-events`
		     * - POST `/guilds/{guild.id}/scheduled-events`
		     */
		    guildScheduledEvents(guildId) {
		        return `/guilds/${guildId}/scheduled-events`;
		    },
		    /**
		     * Route for:
		     * - GET  `/guilds/{guild.id}/scheduled-events/{guildScheduledEvent.id}`
		     * - PATCH `/guilds/{guild.id}/scheduled-events/{guildScheduledEvent.id}`
		     * - DELETE `/guilds/{guild.id}/scheduled-events/{guildScheduledEvent.id}`
		     */
		    guildScheduledEvent(guildId, guildScheduledEventId) {
		        return `/guilds/${guildId}/scheduled-events/${guildScheduledEventId}`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/scheduled-events/{guildScheduledEvent.id}/users`
		     */
		    guildScheduledEventUsers(guildId, guildScheduledEventId) {
		        return `/guilds/${guildId}/scheduled-events/${guildScheduledEventId}/users`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/${guild.id}/onboarding`
		     * - PUT `/guilds/${guild.id}/onboarding`
		     */
		    guildOnboarding(guildId) {
		        return `/guilds/${guildId}/onboarding`;
		    },
		    /**
		     * Route for:
		     * - GET `/applications/@me`
		     * - PATCH `/applications/@me`
		     */
		    currentApplication() {
		        return '/applications/@me';
		    },
		    /**
		     * Route for:
		     * - GET `/applications/{application.id}/entitlements`
		     * - POST `/applications/{application.id}/entitlements`
		     */
		    entitlements(applicationId) {
		        return `/applications/${applicationId}/entitlements`;
		    },
		    /**
		     * Route for:
		     * - DELETE `/applications/{application.id}/entitlements/{entitlement.id}`
		     */
		    entitlement(applicationId, entitlementId) {
		        return `/applications/${applicationId}/entitlements/${entitlementId}`;
		    },
		    /**
		     * Route for:
		     * - GET `/applications/{application.id}/skus`
		     */
		    skus(applicationId) {
		        return `/applications/${applicationId}/skus`;
		    },
		    /**
		     * Route for:
		     * - POST `/guilds/{guild.id}/bulk-ban`
		     */
		    guildBulkBan(guildId) {
		        return `/guilds/${guildId}/bulk-ban`;
		    },
		    /**
		     * Route for:
		     * - POST `/applications/${application.id}/entitlements/${entitlement.id}/consume`
		     */
		    consumeEntitlement(applicationId, entitlementId) {
		        return `/applications/${applicationId}/entitlements/${entitlementId}/consume`;
		    },
		};
		exports.StickerPackApplicationId = '710982414301790216';
		var ImageFormat;
		(function (ImageFormat) {
		    ImageFormat["JPEG"] = "jpeg";
		    ImageFormat["PNG"] = "png";
		    ImageFormat["WebP"] = "webp";
		    ImageFormat["GIF"] = "gif";
		    ImageFormat["Lottie"] = "json";
		})(ImageFormat || (exports.ImageFormat = ImageFormat = {}));
		exports.CDNRoutes = {
		    /**
		     * Route for:
		     * - GET `/emojis/{emoji.id}.{png|jpeg|webp|gif}`
		     *
		     * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format
		     *
		     * This route supports the extensions: PNG, JPEG, WebP, GIF
		     */
		    emoji(emojiId, format) {
		        return `/emojis/${emojiId}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/icons/{guild.id}.{png|jpeg|webp|gif}`
		     *
		     * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format
		     *
		     * This route supports the extensions: PNG, JPEG, WebP, GIF
		     */
		    guildIcon(guildId, guildIcon, format) {
		        return `icons/${guildId}/${guildIcon}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/splashes/{guild.id}/{guild.splash}.{png|jpeg|webp}`
		     *
		     * This route supports the extensions: PNG, JPEG, WebP
		     */
		    guildSplash(guildId, guildSplash, format) {
		        return `/splashes/${guildId}/${guildSplash}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/discovery-splashes/{guild.id}/{guild.discovery_splash}.{png|jpeg|webp}`
		     *
		     * This route supports the extensions: PNG, JPEG, WebP
		     */
		    guildDiscoverySplash(guildId, guildDiscoverySplash, format) {
		        return `/discovery-splashes/${guildId}/${guildDiscoverySplash}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/banners/{guild.id}/{guild.banner}.{png|jpeg|webp|gif}`
		     *
		     * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format
		     *
		     * This route supports the extensions: PNG, JPEG, WebP, GIF
		     */
		    guildBanner(guildId, guildBanner, format) {
		        return `/banners/${guildId}/${guildBanner}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/banners/{user.id}/{user.banner}.{png|jpeg|webp|gif}`
		     *
		     * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format
		     *
		     * This route supports the extensions: PNG, JPEG, WebP, GIF
		     */
		    userBanner(userId, userBanner, format) {
		        return `/banners/${userId}/${userBanner}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/embed/avatars/{index}.png`
		     *
		     * The value for `index` parameter depends on whether the user is [migrated to the new username system](https://discord.com/developers/docs/change-log#unique-usernames-on-discord).
		     * For users on the new username system, `index` will be `(user.id >> 22) % 6`.
		     * For users on the legacy username system, `index` will be `user.discriminator % 5`.
		     *
		     * This route supports the extension: PNG
		     */
		    defaultUserAvatar(index) {
		        return `/embed/avatars/${index}.png`;
		    },
		    /**
		     * Route for:
		     * - GET `/avatars/{user.id}/{user.avatar}.{png|jpeg|webp|gif}`
		     *
		     * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format
		     *
		     * This route supports the extensions: PNG, JPEG, WebP, GIF
		     */
		    userAvatar(userId, userAvatar, format) {
		        return `/avatars/${userId}/${userAvatar}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/{guild.id}/users/{user.id}/{guild_member.avatar}.{png|jpeg|webp|gif}`
		     *
		     * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format
		     *
		     * This route supports the extensions: PNG, JPEG, WebP, GIF
		     */
		    guildMemberAvatar(guildId, userId, memberAvatar, format) {
		        return `/guilds/${guildId}/users/${userId}/avatars/${memberAvatar}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/avatar-decorations/{user.id}/{user.avatar_decoration}.png`
		     *
		     * This route supports the extension: PNG
		     */
		    userAvatarDecoration(userId, userAvatarDecoration) {
		        return `/avatar-decorations/${userId}/${userAvatarDecoration}.png`;
		    },
		    /**
		     * Route for:
		     * - GET `/app-icons/{application.id}/{application.icon}.{png|jpeg|webp}`
		     *
		     * This route supports the extensions: PNG, JPEG, WebP
		     */
		    applicationIcon(applicationId, applicationIcon, format) {
		        return `/app-icons/${applicationId}/${applicationIcon}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/app-icons/{application.id}/{application.cover_image}.{png|jpeg|webp}`
		     *
		     * This route supports the extensions: PNG, JPEG, WebP
		     */
		    applicationCover(applicationId, applicationCoverImage, format) {
		        return `/app-icons/${applicationId}/${applicationCoverImage}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/app-assets/{application.id}/{application.asset_id}.{png|jpeg|webp}`
		     *
		     * This route supports the extensions: PNG, JPEG, WebP
		     */
		    applicationAsset(applicationId, applicationAssetId, format) {
		        return `/app-assets/${applicationId}/${applicationAssetId}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/app-assets/{application.id}/achievements/{achievement.id}/icons/{achievement.icon}.{png|jpeg|webp}`
		     *
		     * This route supports the extensions: PNG, JPEG, WebP
		     */
		    achievementIcon(applicationId, achievementId, achievementIconHash, format) {
		        return `/app-assets/${applicationId}/achievements/${achievementId}/icons/${achievementIconHash}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/app-assets/710982414301790216/store/{sticker_pack.banner.asset_id}.{png|jpeg|webp}`
		     *
		     * This route supports the extensions: PNG, JPEG, WebP
		     */
		    stickerPackBanner(stickerPackBannerAssetId, format) {
		        return `/app-assets/${exports.StickerPackApplicationId}/store/${stickerPackBannerAssetId}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/app-assets/${application.id}/store/${asset.id}.{png|jpeg|webp}}`
		     *
		     * This route supports the extensions: PNG, JPEG, WebP
		     */
		    storePageAsset(applicationId, assetId, format = ImageFormat.PNG) {
		        return `/app-assets/${applicationId}/store/${assetId}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `team-icons/{team.id}/{team.icon}.{png|jpeg|webp}`
		     *
		     * This route supports the extensions: PNG, JPEG, WebP
		     */
		    teamIcon(teamId, teamIcon, format) {
		        return `/team-icons/${teamId}/${teamIcon}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/stickers/{sticker.id}.{png|json}`
		     *
		     * This route supports the extensions: PNG, Lottie, GIF
		     */
		    sticker(stickerId, format) {
		        return `/stickers/${stickerId}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/role-icons/{role.id}/{role.icon}.{png|jpeg|webp}`
		     *
		     * This route supports the extensions: PNG, JPEG, WebP
		     */
		    roleIcon(roleId, roleIcon, format) {
		        return `/role-icons/${roleId}/${roleIcon}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/guild-events/{guild_scheduled_event.id}/{guild_scheduled_event.image}.{png|jpeg|webp}`
		     *
		     * This route supports the extensions: PNG, JPEG, WebP
		     */
		    guildScheduledEventCover(guildScheduledEventId, guildScheduledEventCoverImage, format) {
		        return `/guild-events/${guildScheduledEventId}/${guildScheduledEventCoverImage}.${format}`;
		    },
		    /**
		     * Route for:
		     * - GET `/guilds/${guild.id}/users/${user.id}/banners/${guild_member.banner}.{png|jpeg|webp|gif}`
		     *
		     * This route supports the extensions: PNG, JPEG, WebP, GIF
		     */
		    guildMemberBanner(guildId, userId, guildMemberBanner, format) {
		        return `/guilds/${guildId}/users/${userId}/banners/${guildMemberBanner}.${format}`;
		    },
		};
		exports.RouteBases = {
		    api: `https://discord.com/api/v${exports.APIVersion}`,
		    cdn: 'https://cdn.discordapp.com',
		    invite: 'https://discord.gg',
		    template: 'https://discord.new',
		    gift: 'https://discord.gift',
		    scheduledEvent: 'https://discord.com/events',
		};
		// Freeze bases object
		Object.freeze(exports.RouteBases);
		exports.OAuth2Routes = {
		    authorizationURL: `${exports.RouteBases.api}${exports.Routes.oauth2Authorization()}`,
		    tokenURL: `${exports.RouteBases.api}${exports.Routes.oauth2TokenExchange()}`,
		    /**
		     * See https://tools.ietf.org/html/rfc7009
		     */
		    tokenRevocationURL: `${exports.RouteBases.api}${exports.Routes.oauth2TokenRevocation()}`,
		};
		// Freeze OAuth2 route object
		Object.freeze(exports.OAuth2Routes);
		
	} (v10$5));
	return v10$5;
}

var v10Exports$2 = requireV10$3();
var mod$2 = /*@__PURE__*/getDefaultExportFromCjs(v10Exports$2);

const APIVersion = mod$2.APIVersion;
const CDNRoutes = mod$2.CDNRoutes;
const EntitlementOwnerType = mod$2.EntitlementOwnerType;
const ImageFormat = mod$2.ImageFormat;
const Locale = mod$2.Locale;
const OAuth2Routes = mod$2.OAuth2Routes;
const RESTJSONErrorCodes = mod$2.RESTJSONErrorCodes;
const RouteBases = mod$2.RouteBases;
const Routes = mod$2.Routes;
const StickerPackApplicationId = mod$2.StickerPackApplicationId;

var v10$4 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	APIVersion: APIVersion,
	CDNRoutes: CDNRoutes,
	EntitlementOwnerType: EntitlementOwnerType,
	ImageFormat: ImageFormat,
	Locale: Locale,
	OAuth2Routes: OAuth2Routes,
	RESTJSONErrorCodes: RESTJSONErrorCodes,
	RouteBases: RouteBases,
	Routes: Routes,
	StickerPackApplicationId: StickerPackApplicationId,
	default: mod$2
});

var require$$3 = /*@__PURE__*/getAugmentedNamespace(v10$4);

var v10$3 = {};

var common = {};

var hasRequiredCommon;

function requireCommon () {
	if (hasRequiredCommon) return common;
	hasRequiredCommon = 1;
	Object.defineProperty(common, "__esModule", { value: true });
	common.RPCCloseEventCodes = common.RPCErrorCodes = void 0;
	/**
	 * https://discord.com/developers/docs/topics/opcodes-and-status-codes#rpc-rpc-error-codes
	 */
	var RPCErrorCodes;
	(function (RPCErrorCodes) {
	    RPCErrorCodes[RPCErrorCodes["UnknownError"] = 1000] = "UnknownError";
	    RPCErrorCodes[RPCErrorCodes["InvalidPayload"] = 4000] = "InvalidPayload";
	    RPCErrorCodes[RPCErrorCodes["InvalidCommand"] = 4002] = "InvalidCommand";
	    RPCErrorCodes[RPCErrorCodes["InvalidGuild"] = 4003] = "InvalidGuild";
	    RPCErrorCodes[RPCErrorCodes["InvalidEvent"] = 4004] = "InvalidEvent";
	    RPCErrorCodes[RPCErrorCodes["InvalidChannel"] = 4005] = "InvalidChannel";
	    RPCErrorCodes[RPCErrorCodes["InvalidPermissions"] = 4006] = "InvalidPermissions";
	    RPCErrorCodes[RPCErrorCodes["InvalidClientId"] = 4007] = "InvalidClientId";
	    RPCErrorCodes[RPCErrorCodes["InvalidOrigin"] = 4008] = "InvalidOrigin";
	    RPCErrorCodes[RPCErrorCodes["InvalidToken"] = 4009] = "InvalidToken";
	    RPCErrorCodes[RPCErrorCodes["InvalidUser"] = 4010] = "InvalidUser";
	    RPCErrorCodes[RPCErrorCodes["OAuth2Error"] = 5000] = "OAuth2Error";
	    RPCErrorCodes[RPCErrorCodes["SelectChannelTimedOut"] = 5001] = "SelectChannelTimedOut";
	    RPCErrorCodes[RPCErrorCodes["GetGuildTimedOut"] = 5002] = "GetGuildTimedOut";
	    RPCErrorCodes[RPCErrorCodes["SelectVoiceForceRequired"] = 5003] = "SelectVoiceForceRequired";
	    RPCErrorCodes[RPCErrorCodes["CaptureShortcutAlreadyListening"] = 5004] = "CaptureShortcutAlreadyListening";
	})(RPCErrorCodes || (common.RPCErrorCodes = RPCErrorCodes = {}));
	/**
	 * https://discord.com/developers/docs/topics/opcodes-and-status-codes#rpc-rpc-close-event-codes
	 */
	var RPCCloseEventCodes;
	(function (RPCCloseEventCodes) {
	    RPCCloseEventCodes[RPCCloseEventCodes["InvalidClientId"] = 4000] = "InvalidClientId";
	    RPCCloseEventCodes[RPCCloseEventCodes["InvalidOrigin"] = 4001] = "InvalidOrigin";
	    RPCCloseEventCodes[RPCCloseEventCodes["RateLimited"] = 4002] = "RateLimited";
	    RPCCloseEventCodes[RPCCloseEventCodes["TokenRevoked"] = 4003] = "TokenRevoked";
	    RPCCloseEventCodes[RPCCloseEventCodes["InvalidVersion"] = 4004] = "InvalidVersion";
	    RPCCloseEventCodes[RPCCloseEventCodes["InvalidEncoding"] = 4005] = "InvalidEncoding";
	})(RPCCloseEventCodes || (common.RPCCloseEventCodes = RPCCloseEventCodes = {}));
	
	return common;
}

var hasRequiredV10$2;

function requireV10$2 () {
	if (hasRequiredV10$2) return v10$3;
	hasRequiredV10$2 = 1;
	(function (exports) {
		var __createBinding = (v10$3 && v10$3.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (v10$3 && v10$3.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(requireCommon(), exports);
		
	} (v10$3));
	return v10$3;
}

var v10Exports$1 = requireV10$2();
var mod$1 = /*@__PURE__*/getDefaultExportFromCjs(v10Exports$1);

const RPCCloseEventCodes = mod$1.RPCCloseEventCodes;
const RPCErrorCodes = mod$1.RPCErrorCodes;

var v10$2 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	RPCCloseEventCodes: RPCCloseEventCodes,
	RPCErrorCodes: RPCErrorCodes,
	default: mod$1
});

var require$$4 = /*@__PURE__*/getAugmentedNamespace(v10$2);

var v10$1 = {};

var hasRequiredV10$1;

function requireV10$1 () {
	if (hasRequiredV10$1) return v10$1;
	hasRequiredV10$1 = 1;
	Object.defineProperty(v10$1, "__esModule", { value: true });
	v10$1.isContextMenuApplicationCommandInteraction = v10$1.isChatInputApplicationCommandInteraction = v10$1.isMessageComponentSelectMenuInteraction = v10$1.isMessageComponentButtonInteraction = v10$1.isMessageComponentInteraction = v10$1.isInteractionButton = v10$1.isLinkButton = v10$1.isMessageComponentGuildInteraction = v10$1.isMessageComponentDMInteraction = v10$1.isApplicationCommandGuildInteraction = v10$1.isApplicationCommandDMInteraction = v10$1.isGuildInteraction = v10$1.isDMInteraction = void 0;
	const index_1 = require$$2;
	// Interactions
	/**
	 * A type-guard check for DM interactions
	 *
	 * @param interaction The interaction to check against
	 * @returns A boolean that indicates if the interaction was received in a DM channel
	 */
	function isDMInteraction(interaction) {
	    return Reflect.has(interaction, 'user');
	}
	v10$1.isDMInteraction = isDMInteraction;
	/**
	 * A type-guard check for guild interactions
	 *
	 * @param interaction The interaction to check against
	 * @returns A boolean that indicates if the interaction was received in a guild
	 */
	function isGuildInteraction(interaction) {
	    return Reflect.has(interaction, 'guild_id');
	}
	v10$1.isGuildInteraction = isGuildInteraction;
	// ApplicationCommandInteractions
	/**
	 * A type-guard check for DM application command interactions
	 *
	 * @param interaction The application command interaction to check against
	 * @returns A boolean that indicates if the application command interaction was received in a DM channel
	 */
	function isApplicationCommandDMInteraction(interaction) {
	    return isDMInteraction(interaction);
	}
	v10$1.isApplicationCommandDMInteraction = isApplicationCommandDMInteraction;
	/**
	 * A type-guard check for guild application command interactions
	 *
	 * @param interaction The interaction to check against
	 * @returns A boolean that indicates if the application command interaction was received in a guild
	 */
	function isApplicationCommandGuildInteraction(interaction) {
	    return isGuildInteraction(interaction);
	}
	v10$1.isApplicationCommandGuildInteraction = isApplicationCommandGuildInteraction;
	// MessageComponentInteractions
	/**
	 * A type-guard check for DM message component interactions
	 *
	 * @param interaction The message component interaction to check against
	 * @returns A boolean that indicates if the message component interaction was received in a DM channel
	 */
	function isMessageComponentDMInteraction(interaction) {
	    return isDMInteraction(interaction);
	}
	v10$1.isMessageComponentDMInteraction = isMessageComponentDMInteraction;
	/**
	 * A type-guard check for guild message component interactions
	 *
	 * @param interaction The interaction to check against
	 * @returns A boolean that indicates if the message component interaction was received in a guild
	 */
	function isMessageComponentGuildInteraction(interaction) {
	    return isGuildInteraction(interaction);
	}
	v10$1.isMessageComponentGuildInteraction = isMessageComponentGuildInteraction;
	// Buttons
	/**
	 * A type-guard check for buttons that have a `url` attached to them.
	 *
	 * @param component The button to check against
	 * @returns A boolean that indicates if the button has a `url` attached to it
	 */
	function isLinkButton(component) {
	    return component.style === index_1.ButtonStyle.Link;
	}
	v10$1.isLinkButton = isLinkButton;
	/**
	 * A type-guard check for buttons that have a `custom_id` attached to them.
	 *
	 * @param component The button to check against
	 * @returns A boolean that indicates if the button has a `custom_id` attached to it
	 */
	function isInteractionButton(component) {
	    return component.style !== index_1.ButtonStyle.Link;
	}
	v10$1.isInteractionButton = isInteractionButton;
	// Message Components
	/**
	 * A type-guard check for message component interactions
	 *
	 * @param interaction The interaction to check against
	 * @returns A boolean that indicates if the interaction is a message component
	 */
	function isMessageComponentInteraction(interaction) {
	    return interaction.type === index_1.InteractionType.MessageComponent;
	}
	v10$1.isMessageComponentInteraction = isMessageComponentInteraction;
	/**
	 * A type-guard check for button message component interactions
	 *
	 * @param interaction The message component interaction to check against
	 * @returns A boolean that indicates if the message component is a button
	 */
	function isMessageComponentButtonInteraction(interaction) {
	    return interaction.data.component_type === index_1.ComponentType.Button;
	}
	v10$1.isMessageComponentButtonInteraction = isMessageComponentButtonInteraction;
	/**
	 * A type-guard check for select menu message component interactions
	 *
	 * @param interaction The message component interaction to check against
	 * @returns A boolean that indicates if the message component is a select menu
	 */
	function isMessageComponentSelectMenuInteraction(interaction) {
	    return [
	        index_1.ComponentType.StringSelect,
	        index_1.ComponentType.UserSelect,
	        index_1.ComponentType.RoleSelect,
	        index_1.ComponentType.MentionableSelect,
	        index_1.ComponentType.ChannelSelect,
	    ].includes(interaction.data.component_type);
	}
	v10$1.isMessageComponentSelectMenuInteraction = isMessageComponentSelectMenuInteraction;
	// Application Commands
	/**
	 * A type-guard check for chat input application commands.
	 *
	 * @param interaction The interaction to check against
	 * @returns A boolean that indicates if the interaction is a chat input application command
	 */
	function isChatInputApplicationCommandInteraction(interaction) {
	    return interaction.data.type === index_1.ApplicationCommandType.ChatInput;
	}
	v10$1.isChatInputApplicationCommandInteraction = isChatInputApplicationCommandInteraction;
	/**
	 * A type-guard check for context menu application commands.
	 *
	 * @param interaction The interaction to check against
	 * @returns A boolean that indicates if the interaction is a context menu application command
	 */
	function isContextMenuApplicationCommandInteraction(interaction) {
	    return (interaction.data.type === index_1.ApplicationCommandType.Message ||
	        interaction.data.type === index_1.ApplicationCommandType.User);
	}
	v10$1.isContextMenuApplicationCommandInteraction = isContextMenuApplicationCommandInteraction;
	
	return v10$1;
}

var v10Exports = requireV10$1();
var mod = /*@__PURE__*/getDefaultExportFromCjs(v10Exports);

const isApplicationCommandDMInteraction = mod.isApplicationCommandDMInteraction;
const isApplicationCommandGuildInteraction = mod.isApplicationCommandGuildInteraction;
const isChatInputApplicationCommandInteraction = mod.isChatInputApplicationCommandInteraction;
const isContextMenuApplicationCommandInteraction = mod.isContextMenuApplicationCommandInteraction;
const isDMInteraction = mod.isDMInteraction;
const isGuildInteraction = mod.isGuildInteraction;
const isInteractionButton = mod.isInteractionButton;
const isLinkButton = mod.isLinkButton;
const isMessageComponentButtonInteraction = mod.isMessageComponentButtonInteraction;
const isMessageComponentDMInteraction = mod.isMessageComponentDMInteraction;
const isMessageComponentGuildInteraction = mod.isMessageComponentGuildInteraction;
const isMessageComponentInteraction = mod.isMessageComponentInteraction;
const isMessageComponentSelectMenuInteraction = mod.isMessageComponentSelectMenuInteraction;

var v10 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	default: mod,
	isApplicationCommandDMInteraction: isApplicationCommandDMInteraction,
	isApplicationCommandGuildInteraction: isApplicationCommandGuildInteraction,
	isChatInputApplicationCommandInteraction: isChatInputApplicationCommandInteraction,
	isContextMenuApplicationCommandInteraction: isContextMenuApplicationCommandInteraction,
	isDMInteraction: isDMInteraction,
	isGuildInteraction: isGuildInteraction,
	isInteractionButton: isInteractionButton,
	isLinkButton: isLinkButton,
	isMessageComponentButtonInteraction: isMessageComponentButtonInteraction,
	isMessageComponentDMInteraction: isMessageComponentDMInteraction,
	isMessageComponentGuildInteraction: isMessageComponentGuildInteraction,
	isMessageComponentInteraction: isMessageComponentInteraction,
	isMessageComponentSelectMenuInteraction: isMessageComponentSelectMenuInteraction
});

var require$$5 = /*@__PURE__*/getAugmentedNamespace(v10);

var hasRequiredV10;

function requireV10 () {
	if (hasRequiredV10) return v10$a;
	hasRequiredV10 = 1;
	(function (exports) {
		var __createBinding = (v10$a && v10$a.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (v10$a && v10$a.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.Utils = void 0;
		__exportStar(require$$0, exports);
		__exportStar(require$$1, exports);
		__exportStar(require$$2, exports);
		__exportStar(require$$3, exports);
		__exportStar(require$$4, exports);
		exports.Utils = require$$5;
		
	} (v10$a));
	return v10$a;
}

var bufferUtil = {exports: {}};

var constants;
var hasRequiredConstants;

function requireConstants () {
	if (hasRequiredConstants) return constants;
	hasRequiredConstants = 1;

	const BINARY_TYPES = ['nodebuffer', 'arraybuffer', 'fragments'];
	const hasBlob = typeof Blob !== 'undefined';

	if (hasBlob) BINARY_TYPES.push('blob');

	constants = {
	  BINARY_TYPES,
	  EMPTY_BUFFER: Buffer.alloc(0),
	  GUID: '258EAFA5-E914-47DA-95CA-C5AB0DC85B11',
	  hasBlob,
	  kForOnEventAttribute: Symbol('kIsForOnEventAttribute'),
	  kListener: Symbol('kListener'),
	  kStatusCode: Symbol('status-code'),
	  kWebSocket: Symbol('websocket'),
	  NOOP: () => {}
	};
	return constants;
}

var hasRequiredBufferUtil;

function requireBufferUtil () {
	if (hasRequiredBufferUtil) return bufferUtil.exports;
	hasRequiredBufferUtil = 1;

	const { EMPTY_BUFFER } = requireConstants();

	const FastBuffer = Buffer[Symbol.species];

	/**
	 * Merges an array of buffers into a new buffer.
	 *
	 * @param {Buffer[]} list The array of buffers to concat
	 * @param {Number} totalLength The total length of buffers in the list
	 * @return {Buffer} The resulting buffer
	 * @public
	 */
	function concat(list, totalLength) {
	  if (list.length === 0) return EMPTY_BUFFER;
	  if (list.length === 1) return list[0];

	  const target = Buffer.allocUnsafe(totalLength);
	  let offset = 0;

	  for (let i = 0; i < list.length; i++) {
	    const buf = list[i];
	    target.set(buf, offset);
	    offset += buf.length;
	  }

	  if (offset < totalLength) {
	    return new FastBuffer(target.buffer, target.byteOffset, offset);
	  }

	  return target;
	}

	/**
	 * Masks a buffer using the given mask.
	 *
	 * @param {Buffer} source The buffer to mask
	 * @param {Buffer} mask The mask to use
	 * @param {Buffer} output The buffer where to store the result
	 * @param {Number} offset The offset at which to start writing
	 * @param {Number} length The number of bytes to mask.
	 * @public
	 */
	function _mask(source, mask, output, offset, length) {
	  for (let i = 0; i < length; i++) {
	    output[offset + i] = source[i] ^ mask[i & 3];
	  }
	}

	/**
	 * Unmasks a buffer using the given mask.
	 *
	 * @param {Buffer} buffer The buffer to unmask
	 * @param {Buffer} mask The mask to use
	 * @public
	 */
	function _unmask(buffer, mask) {
	  for (let i = 0; i < buffer.length; i++) {
	    buffer[i] ^= mask[i & 3];
	  }
	}

	/**
	 * Converts a buffer to an `ArrayBuffer`.
	 *
	 * @param {Buffer} buf The buffer to convert
	 * @return {ArrayBuffer} Converted buffer
	 * @public
	 */
	function toArrayBuffer(buf) {
	  if (buf.length === buf.buffer.byteLength) {
	    return buf.buffer;
	  }

	  return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.length);
	}

	/**
	 * Converts `data` to a `Buffer`.
	 *
	 * @param {*} data The data to convert
	 * @return {Buffer} The buffer
	 * @throws {TypeError}
	 * @public
	 */
	function toBuffer(data) {
	  toBuffer.readOnly = true;

	  if (Buffer.isBuffer(data)) return data;

	  let buf;

	  if (data instanceof ArrayBuffer) {
	    buf = new FastBuffer(data);
	  } else if (ArrayBuffer.isView(data)) {
	    buf = new FastBuffer(data.buffer, data.byteOffset, data.byteLength);
	  } else {
	    buf = Buffer.from(data);
	    toBuffer.readOnly = false;
	  }

	  return buf;
	}

	bufferUtil.exports = {
	  concat,
	  mask: _mask,
	  toArrayBuffer,
	  toBuffer,
	  unmask: _unmask
	};

	/* istanbul ignore else  */
	if (!process.env.WS_NO_BUFFER_UTIL) {
	  try {
	    const bufferUtil$1 = require('bufferutil');

	    bufferUtil.exports.mask = function (source, mask, output, offset, length) {
	      if (length < 48) _mask(source, mask, output, offset, length);
	      else bufferUtil$1.mask(source, mask, output, offset, length);
	    };

	    bufferUtil.exports.unmask = function (buffer, mask) {
	      if (buffer.length < 32) _unmask(buffer, mask);
	      else bufferUtil$1.unmask(buffer, mask);
	    };
	  } catch (e) {
	    // Continue regardless of the error.
	  }
	}
	return bufferUtil.exports;
}

var limiter;
var hasRequiredLimiter;

function requireLimiter () {
	if (hasRequiredLimiter) return limiter;
	hasRequiredLimiter = 1;

	const kDone = Symbol('kDone');
	const kRun = Symbol('kRun');

	/**
	 * A very simple job queue with adjustable concurrency. Adapted from
	 * https://github.com/STRML/async-limiter
	 */
	class Limiter {
	  /**
	   * Creates a new `Limiter`.
	   *
	   * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed
	   *     to run concurrently
	   */
	  constructor(concurrency) {
	    this[kDone] = () => {
	      this.pending--;
	      this[kRun]();
	    };
	    this.concurrency = concurrency || Infinity;
	    this.jobs = [];
	    this.pending = 0;
	  }

	  /**
	   * Adds a job to the queue.
	   *
	   * @param {Function} job The job to run
	   * @public
	   */
	  add(job) {
	    this.jobs.push(job);
	    this[kRun]();
	  }

	  /**
	   * Removes a job from the queue and runs it if possible.
	   *
	   * @private
	   */
	  [kRun]() {
	    if (this.pending === this.concurrency) return;

	    if (this.jobs.length) {
	      const job = this.jobs.shift();

	      this.pending++;
	      job(this[kDone]);
	    }
	  }
	}

	limiter = Limiter;
	return limiter;
}

var permessageDeflate;
var hasRequiredPermessageDeflate;

function requirePermessageDeflate () {
	if (hasRequiredPermessageDeflate) return permessageDeflate;
	hasRequiredPermessageDeflate = 1;

	const zlib = require$$0$f;

	const bufferUtil = requireBufferUtil();
	const Limiter = requireLimiter();
	const { kStatusCode } = requireConstants();

	const FastBuffer = Buffer[Symbol.species];
	const TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);
	const kPerMessageDeflate = Symbol('permessage-deflate');
	const kTotalLength = Symbol('total-length');
	const kCallback = Symbol('callback');
	const kBuffers = Symbol('buffers');
	const kError = Symbol('error');

	//
	// We limit zlib concurrency, which prevents severe memory fragmentation
	// as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913
	// and https://github.com/websockets/ws/issues/1202
	//
	// Intentionally global; it's the global thread pool that's an issue.
	//
	let zlibLimiter;

	/**
	 * permessage-deflate implementation.
	 */
	class PerMessageDeflate {
	  /**
	   * Creates a PerMessageDeflate instance.
	   *
	   * @param {Object} [options] Configuration options
	   * @param {(Boolean|Number)} [options.clientMaxWindowBits] Advertise support
	   *     for, or request, a custom client window size
	   * @param {Boolean} [options.clientNoContextTakeover=false] Advertise/
	   *     acknowledge disabling of client context takeover
	   * @param {Number} [options.concurrencyLimit=10] The number of concurrent
	   *     calls to zlib
	   * @param {(Boolean|Number)} [options.serverMaxWindowBits] Request/confirm the
	   *     use of a custom server window size
	   * @param {Boolean} [options.serverNoContextTakeover=false] Request/accept
	   *     disabling of server context takeover
	   * @param {Number} [options.threshold=1024] Size (in bytes) below which
	   *     messages should not be compressed if context takeover is disabled
	   * @param {Object} [options.zlibDeflateOptions] Options to pass to zlib on
	   *     deflate
	   * @param {Object} [options.zlibInflateOptions] Options to pass to zlib on
	   *     inflate
	   * @param {Boolean} [isServer=false] Create the instance in either server or
	   *     client mode
	   * @param {Number} [maxPayload=0] The maximum allowed message length
	   */
	  constructor(options, isServer, maxPayload) {
	    this._maxPayload = maxPayload | 0;
	    this._options = options || {};
	    this._threshold =
	      this._options.threshold !== undefined ? this._options.threshold : 1024;
	    this._isServer = !!isServer;
	    this._deflate = null;
	    this._inflate = null;

	    this.params = null;

	    if (!zlibLimiter) {
	      const concurrency =
	        this._options.concurrencyLimit !== undefined
	          ? this._options.concurrencyLimit
	          : 10;
	      zlibLimiter = new Limiter(concurrency);
	    }
	  }

	  /**
	   * @type {String}
	   */
	  static get extensionName() {
	    return 'permessage-deflate';
	  }

	  /**
	   * Create an extension negotiation offer.
	   *
	   * @return {Object} Extension parameters
	   * @public
	   */
	  offer() {
	    const params = {};

	    if (this._options.serverNoContextTakeover) {
	      params.server_no_context_takeover = true;
	    }
	    if (this._options.clientNoContextTakeover) {
	      params.client_no_context_takeover = true;
	    }
	    if (this._options.serverMaxWindowBits) {
	      params.server_max_window_bits = this._options.serverMaxWindowBits;
	    }
	    if (this._options.clientMaxWindowBits) {
	      params.client_max_window_bits = this._options.clientMaxWindowBits;
	    } else if (this._options.clientMaxWindowBits == null) {
	      params.client_max_window_bits = true;
	    }

	    return params;
	  }

	  /**
	   * Accept an extension negotiation offer/response.
	   *
	   * @param {Array} configurations The extension negotiation offers/reponse
	   * @return {Object} Accepted configuration
	   * @public
	   */
	  accept(configurations) {
	    configurations = this.normalizeParams(configurations);

	    this.params = this._isServer
	      ? this.acceptAsServer(configurations)
	      : this.acceptAsClient(configurations);

	    return this.params;
	  }

	  /**
	   * Releases all resources used by the extension.
	   *
	   * @public
	   */
	  cleanup() {
	    if (this._inflate) {
	      this._inflate.close();
	      this._inflate = null;
	    }

	    if (this._deflate) {
	      const callback = this._deflate[kCallback];

	      this._deflate.close();
	      this._deflate = null;

	      if (callback) {
	        callback(
	          new Error(
	            'The deflate stream was closed while data was being processed'
	          )
	        );
	      }
	    }
	  }

	  /**
	   *  Accept an extension negotiation offer.
	   *
	   * @param {Array} offers The extension negotiation offers
	   * @return {Object} Accepted configuration
	   * @private
	   */
	  acceptAsServer(offers) {
	    const opts = this._options;
	    const accepted = offers.find((params) => {
	      if (
	        (opts.serverNoContextTakeover === false &&
	          params.server_no_context_takeover) ||
	        (params.server_max_window_bits &&
	          (opts.serverMaxWindowBits === false ||
	            (typeof opts.serverMaxWindowBits === 'number' &&
	              opts.serverMaxWindowBits > params.server_max_window_bits))) ||
	        (typeof opts.clientMaxWindowBits === 'number' &&
	          !params.client_max_window_bits)
	      ) {
	        return false;
	      }

	      return true;
	    });

	    if (!accepted) {
	      throw new Error('None of the extension offers can be accepted');
	    }

	    if (opts.serverNoContextTakeover) {
	      accepted.server_no_context_takeover = true;
	    }
	    if (opts.clientNoContextTakeover) {
	      accepted.client_no_context_takeover = true;
	    }
	    if (typeof opts.serverMaxWindowBits === 'number') {
	      accepted.server_max_window_bits = opts.serverMaxWindowBits;
	    }
	    if (typeof opts.clientMaxWindowBits === 'number') {
	      accepted.client_max_window_bits = opts.clientMaxWindowBits;
	    } else if (
	      accepted.client_max_window_bits === true ||
	      opts.clientMaxWindowBits === false
	    ) {
	      delete accepted.client_max_window_bits;
	    }

	    return accepted;
	  }

	  /**
	   * Accept the extension negotiation response.
	   *
	   * @param {Array} response The extension negotiation response
	   * @return {Object} Accepted configuration
	   * @private
	   */
	  acceptAsClient(response) {
	    const params = response[0];

	    if (
	      this._options.clientNoContextTakeover === false &&
	      params.client_no_context_takeover
	    ) {
	      throw new Error('Unexpected parameter "client_no_context_takeover"');
	    }

	    if (!params.client_max_window_bits) {
	      if (typeof this._options.clientMaxWindowBits === 'number') {
	        params.client_max_window_bits = this._options.clientMaxWindowBits;
	      }
	    } else if (
	      this._options.clientMaxWindowBits === false ||
	      (typeof this._options.clientMaxWindowBits === 'number' &&
	        params.client_max_window_bits > this._options.clientMaxWindowBits)
	    ) {
	      throw new Error(
	        'Unexpected or invalid parameter "client_max_window_bits"'
	      );
	    }

	    return params;
	  }

	  /**
	   * Normalize parameters.
	   *
	   * @param {Array} configurations The extension negotiation offers/reponse
	   * @return {Array} The offers/response with normalized parameters
	   * @private
	   */
	  normalizeParams(configurations) {
	    configurations.forEach((params) => {
	      Object.keys(params).forEach((key) => {
	        let value = params[key];

	        if (value.length > 1) {
	          throw new Error(`Parameter "${key}" must have only a single value`);
	        }

	        value = value[0];

	        if (key === 'client_max_window_bits') {
	          if (value !== true) {
	            const num = +value;
	            if (!Number.isInteger(num) || num < 8 || num > 15) {
	              throw new TypeError(
	                `Invalid value for parameter "${key}": ${value}`
	              );
	            }
	            value = num;
	          } else if (!this._isServer) {
	            throw new TypeError(
	              `Invalid value for parameter "${key}": ${value}`
	            );
	          }
	        } else if (key === 'server_max_window_bits') {
	          const num = +value;
	          if (!Number.isInteger(num) || num < 8 || num > 15) {
	            throw new TypeError(
	              `Invalid value for parameter "${key}": ${value}`
	            );
	          }
	          value = num;
	        } else if (
	          key === 'client_no_context_takeover' ||
	          key === 'server_no_context_takeover'
	        ) {
	          if (value !== true) {
	            throw new TypeError(
	              `Invalid value for parameter "${key}": ${value}`
	            );
	          }
	        } else {
	          throw new Error(`Unknown parameter "${key}"`);
	        }

	        params[key] = value;
	      });
	    });

	    return configurations;
	  }

	  /**
	   * Decompress data. Concurrency limited.
	   *
	   * @param {Buffer} data Compressed data
	   * @param {Boolean} fin Specifies whether or not this is the last fragment
	   * @param {Function} callback Callback
	   * @public
	   */
	  decompress(data, fin, callback) {
	    zlibLimiter.add((done) => {
	      this._decompress(data, fin, (err, result) => {
	        done();
	        callback(err, result);
	      });
	    });
	  }

	  /**
	   * Compress data. Concurrency limited.
	   *
	   * @param {(Buffer|String)} data Data to compress
	   * @param {Boolean} fin Specifies whether or not this is the last fragment
	   * @param {Function} callback Callback
	   * @public
	   */
	  compress(data, fin, callback) {
	    zlibLimiter.add((done) => {
	      this._compress(data, fin, (err, result) => {
	        done();
	        callback(err, result);
	      });
	    });
	  }

	  /**
	   * Decompress data.
	   *
	   * @param {Buffer} data Compressed data
	   * @param {Boolean} fin Specifies whether or not this is the last fragment
	   * @param {Function} callback Callback
	   * @private
	   */
	  _decompress(data, fin, callback) {
	    const endpoint = this._isServer ? 'client' : 'server';

	    if (!this._inflate) {
	      const key = `${endpoint}_max_window_bits`;
	      const windowBits =
	        typeof this.params[key] !== 'number'
	          ? zlib.Z_DEFAULT_WINDOWBITS
	          : this.params[key];

	      this._inflate = zlib.createInflateRaw({
	        ...this._options.zlibInflateOptions,
	        windowBits
	      });
	      this._inflate[kPerMessageDeflate] = this;
	      this._inflate[kTotalLength] = 0;
	      this._inflate[kBuffers] = [];
	      this._inflate.on('error', inflateOnError);
	      this._inflate.on('data', inflateOnData);
	    }

	    this._inflate[kCallback] = callback;

	    this._inflate.write(data);
	    if (fin) this._inflate.write(TRAILER);

	    this._inflate.flush(() => {
	      const err = this._inflate[kError];

	      if (err) {
	        this._inflate.close();
	        this._inflate = null;
	        callback(err);
	        return;
	      }

	      const data = bufferUtil.concat(
	        this._inflate[kBuffers],
	        this._inflate[kTotalLength]
	      );

	      if (this._inflate._readableState.endEmitted) {
	        this._inflate.close();
	        this._inflate = null;
	      } else {
	        this._inflate[kTotalLength] = 0;
	        this._inflate[kBuffers] = [];

	        if (fin && this.params[`${endpoint}_no_context_takeover`]) {
	          this._inflate.reset();
	        }
	      }

	      callback(null, data);
	    });
	  }

	  /**
	   * Compress data.
	   *
	   * @param {(Buffer|String)} data Data to compress
	   * @param {Boolean} fin Specifies whether or not this is the last fragment
	   * @param {Function} callback Callback
	   * @private
	   */
	  _compress(data, fin, callback) {
	    const endpoint = this._isServer ? 'server' : 'client';

	    if (!this._deflate) {
	      const key = `${endpoint}_max_window_bits`;
	      const windowBits =
	        typeof this.params[key] !== 'number'
	          ? zlib.Z_DEFAULT_WINDOWBITS
	          : this.params[key];

	      this._deflate = zlib.createDeflateRaw({
	        ...this._options.zlibDeflateOptions,
	        windowBits
	      });

	      this._deflate[kTotalLength] = 0;
	      this._deflate[kBuffers] = [];

	      this._deflate.on('data', deflateOnData);
	    }

	    this._deflate[kCallback] = callback;

	    this._deflate.write(data);
	    this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {
	      if (!this._deflate) {
	        //
	        // The deflate stream was closed while data was being processed.
	        //
	        return;
	      }

	      let data = bufferUtil.concat(
	        this._deflate[kBuffers],
	        this._deflate[kTotalLength]
	      );

	      if (fin) {
	        data = new FastBuffer(data.buffer, data.byteOffset, data.length - 4);
	      }

	      //
	      // Ensure that the callback will not be called again in
	      // `PerMessageDeflate#cleanup()`.
	      //
	      this._deflate[kCallback] = null;

	      this._deflate[kTotalLength] = 0;
	      this._deflate[kBuffers] = [];

	      if (fin && this.params[`${endpoint}_no_context_takeover`]) {
	        this._deflate.reset();
	      }

	      callback(null, data);
	    });
	  }
	}

	permessageDeflate = PerMessageDeflate;

	/**
	 * The listener of the `zlib.DeflateRaw` stream `'data'` event.
	 *
	 * @param {Buffer} chunk A chunk of data
	 * @private
	 */
	function deflateOnData(chunk) {
	  this[kBuffers].push(chunk);
	  this[kTotalLength] += chunk.length;
	}

	/**
	 * The listener of the `zlib.InflateRaw` stream `'data'` event.
	 *
	 * @param {Buffer} chunk A chunk of data
	 * @private
	 */
	function inflateOnData(chunk) {
	  this[kTotalLength] += chunk.length;

	  if (
	    this[kPerMessageDeflate]._maxPayload < 1 ||
	    this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload
	  ) {
	    this[kBuffers].push(chunk);
	    return;
	  }

	  this[kError] = new RangeError('Max payload size exceeded');
	  this[kError].code = 'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH';
	  this[kError][kStatusCode] = 1009;
	  this.removeListener('data', inflateOnData);
	  this.reset();
	}

	/**
	 * The listener of the `zlib.InflateRaw` stream `'error'` event.
	 *
	 * @param {Error} err The emitted error
	 * @private
	 */
	function inflateOnError(err) {
	  //
	  // There is no need to call `Zlib#close()` as the handle is automatically
	  // closed when an error is emitted.
	  //
	  this[kPerMessageDeflate]._inflate = null;
	  err[kStatusCode] = 1007;
	  this[kCallback](err);
	}
	return permessageDeflate;
}

var validation = {exports: {}};

var hasRequiredValidation;

function requireValidation () {
	if (hasRequiredValidation) return validation.exports;
	hasRequiredValidation = 1;

	const { isUtf8 } = require$$0$g;

	const { hasBlob } = requireConstants();

	//
	// Allowed token characters:
	//
	// '!', '#', '$', '%', '&', ''', '*', '+', '-',
	// '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'
	//
	// tokenChars[32] === 0 // ' '
	// tokenChars[33] === 1 // '!'
	// tokenChars[34] === 0 // '"'
	// ...
	//
	// prettier-ignore
	const tokenChars = [
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31
	  0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, // 32 - 47
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63
	  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 80 - 95
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0 // 112 - 127
	];

	/**
	 * Checks if a status code is allowed in a close frame.
	 *
	 * @param {Number} code The status code
	 * @return {Boolean} `true` if the status code is valid, else `false`
	 * @public
	 */
	function isValidStatusCode(code) {
	  return (
	    (code >= 1000 &&
	      code <= 1014 &&
	      code !== 1004 &&
	      code !== 1005 &&
	      code !== 1006) ||
	    (code >= 3000 && code <= 4999)
	  );
	}

	/**
	 * Checks if a given buffer contains only correct UTF-8.
	 * Ported from https://www.cl.cam.ac.uk/%7Emgk25/ucs/utf8_check.c by
	 * Markus Kuhn.
	 *
	 * @param {Buffer} buf The buffer to check
	 * @return {Boolean} `true` if `buf` contains only correct UTF-8, else `false`
	 * @public
	 */
	function _isValidUTF8(buf) {
	  const len = buf.length;
	  let i = 0;

	  while (i < len) {
	    if ((buf[i] & 0x80) === 0) {
	      // 0xxxxxxx
	      i++;
	    } else if ((buf[i] & 0xe0) === 0xc0) {
	      // 110xxxxx 10xxxxxx
	      if (
	        i + 1 === len ||
	        (buf[i + 1] & 0xc0) !== 0x80 ||
	        (buf[i] & 0xfe) === 0xc0 // Overlong
	      ) {
	        return false;
	      }

	      i += 2;
	    } else if ((buf[i] & 0xf0) === 0xe0) {
	      // 1110xxxx 10xxxxxx 10xxxxxx
	      if (
	        i + 2 >= len ||
	        (buf[i + 1] & 0xc0) !== 0x80 ||
	        (buf[i + 2] & 0xc0) !== 0x80 ||
	        (buf[i] === 0xe0 && (buf[i + 1] & 0xe0) === 0x80) || // Overlong
	        (buf[i] === 0xed && (buf[i + 1] & 0xe0) === 0xa0) // Surrogate (U+D800 - U+DFFF)
	      ) {
	        return false;
	      }

	      i += 3;
	    } else if ((buf[i] & 0xf8) === 0xf0) {
	      // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
	      if (
	        i + 3 >= len ||
	        (buf[i + 1] & 0xc0) !== 0x80 ||
	        (buf[i + 2] & 0xc0) !== 0x80 ||
	        (buf[i + 3] & 0xc0) !== 0x80 ||
	        (buf[i] === 0xf0 && (buf[i + 1] & 0xf0) === 0x80) || // Overlong
	        (buf[i] === 0xf4 && buf[i + 1] > 0x8f) ||
	        buf[i] > 0xf4 // > U+10FFFF
	      ) {
	        return false;
	      }

	      i += 4;
	    } else {
	      return false;
	    }
	  }

	  return true;
	}

	/**
	 * Determines whether a value is a `Blob`.
	 *
	 * @param {*} value The value to be tested
	 * @return {Boolean} `true` if `value` is a `Blob`, else `false`
	 * @private
	 */
	function isBlob(value) {
	  return (
	    hasBlob &&
	    typeof value === 'object' &&
	    typeof value.arrayBuffer === 'function' &&
	    typeof value.type === 'string' &&
	    typeof value.stream === 'function' &&
	    (value[Symbol.toStringTag] === 'Blob' ||
	      value[Symbol.toStringTag] === 'File')
	  );
	}

	validation.exports = {
	  isBlob,
	  isValidStatusCode,
	  isValidUTF8: _isValidUTF8,
	  tokenChars
	};

	if (isUtf8) {
	  validation.exports.isValidUTF8 = function (buf) {
	    return buf.length < 24 ? _isValidUTF8(buf) : isUtf8(buf);
	  };
	} /* istanbul ignore else  */ else if (!process.env.WS_NO_UTF_8_VALIDATE) {
	  try {
	    const isValidUTF8 = require('utf-8-validate');

	    validation.exports.isValidUTF8 = function (buf) {
	      return buf.length < 32 ? _isValidUTF8(buf) : isValidUTF8(buf);
	    };
	  } catch (e) {
	    // Continue regardless of the error.
	  }
	}
	return validation.exports;
}

var receiver;
var hasRequiredReceiver;

function requireReceiver () {
	if (hasRequiredReceiver) return receiver;
	hasRequiredReceiver = 1;

	const { Writable } = require$$0$h;

	const PerMessageDeflate = requirePermessageDeflate();
	const {
	  BINARY_TYPES,
	  EMPTY_BUFFER,
	  kStatusCode,
	  kWebSocket
	} = requireConstants();
	const { concat, toArrayBuffer, unmask } = requireBufferUtil();
	const { isValidStatusCode, isValidUTF8 } = requireValidation();

	const FastBuffer = Buffer[Symbol.species];

	const GET_INFO = 0;
	const GET_PAYLOAD_LENGTH_16 = 1;
	const GET_PAYLOAD_LENGTH_64 = 2;
	const GET_MASK = 3;
	const GET_DATA = 4;
	const INFLATING = 5;
	const DEFER_EVENT = 6;

	/**
	 * HyBi Receiver implementation.
	 *
	 * @extends Writable
	 */
	class Receiver extends Writable {
	  /**
	   * Creates a Receiver instance.
	   *
	   * @param {Object} [options] Options object
	   * @param {Boolean} [options.allowSynchronousEvents=true] Specifies whether
	   *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted
	   *     multiple times in the same tick
	   * @param {String} [options.binaryType=nodebuffer] The type for binary data
	   * @param {Object} [options.extensions] An object containing the negotiated
	   *     extensions
	   * @param {Boolean} [options.isServer=false] Specifies whether to operate in
	   *     client or server mode
	   * @param {Number} [options.maxPayload=0] The maximum allowed message length
	   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or
	   *     not to skip UTF-8 validation for text and close messages
	   */
	  constructor(options = {}) {
	    super();

	    this._allowSynchronousEvents =
	      options.allowSynchronousEvents !== undefined
	        ? options.allowSynchronousEvents
	        : true;
	    this._binaryType = options.binaryType || BINARY_TYPES[0];
	    this._extensions = options.extensions || {};
	    this._isServer = !!options.isServer;
	    this._maxPayload = options.maxPayload | 0;
	    this._skipUTF8Validation = !!options.skipUTF8Validation;
	    this[kWebSocket] = undefined;

	    this._bufferedBytes = 0;
	    this._buffers = [];

	    this._compressed = false;
	    this._payloadLength = 0;
	    this._mask = undefined;
	    this._fragmented = 0;
	    this._masked = false;
	    this._fin = false;
	    this._opcode = 0;

	    this._totalPayloadLength = 0;
	    this._messageLength = 0;
	    this._fragments = [];

	    this._errored = false;
	    this._loop = false;
	    this._state = GET_INFO;
	  }

	  /**
	   * Implements `Writable.prototype._write()`.
	   *
	   * @param {Buffer} chunk The chunk of data to write
	   * @param {String} encoding The character encoding of `chunk`
	   * @param {Function} cb Callback
	   * @private
	   */
	  _write(chunk, encoding, cb) {
	    if (this._opcode === 0x08 && this._state == GET_INFO) return cb();

	    this._bufferedBytes += chunk.length;
	    this._buffers.push(chunk);
	    this.startLoop(cb);
	  }

	  /**
	   * Consumes `n` bytes from the buffered data.
	   *
	   * @param {Number} n The number of bytes to consume
	   * @return {Buffer} The consumed bytes
	   * @private
	   */
	  consume(n) {
	    this._bufferedBytes -= n;

	    if (n === this._buffers[0].length) return this._buffers.shift();

	    if (n < this._buffers[0].length) {
	      const buf = this._buffers[0];
	      this._buffers[0] = new FastBuffer(
	        buf.buffer,
	        buf.byteOffset + n,
	        buf.length - n
	      );

	      return new FastBuffer(buf.buffer, buf.byteOffset, n);
	    }

	    const dst = Buffer.allocUnsafe(n);

	    do {
	      const buf = this._buffers[0];
	      const offset = dst.length - n;

	      if (n >= buf.length) {
	        dst.set(this._buffers.shift(), offset);
	      } else {
	        dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);
	        this._buffers[0] = new FastBuffer(
	          buf.buffer,
	          buf.byteOffset + n,
	          buf.length - n
	        );
	      }

	      n -= buf.length;
	    } while (n > 0);

	    return dst;
	  }

	  /**
	   * Starts the parsing loop.
	   *
	   * @param {Function} cb Callback
	   * @private
	   */
	  startLoop(cb) {
	    this._loop = true;

	    do {
	      switch (this._state) {
	        case GET_INFO:
	          this.getInfo(cb);
	          break;
	        case GET_PAYLOAD_LENGTH_16:
	          this.getPayloadLength16(cb);
	          break;
	        case GET_PAYLOAD_LENGTH_64:
	          this.getPayloadLength64(cb);
	          break;
	        case GET_MASK:
	          this.getMask();
	          break;
	        case GET_DATA:
	          this.getData(cb);
	          break;
	        case INFLATING:
	        case DEFER_EVENT:
	          this._loop = false;
	          return;
	      }
	    } while (this._loop);

	    if (!this._errored) cb();
	  }

	  /**
	   * Reads the first two bytes of a frame.
	   *
	   * @param {Function} cb Callback
	   * @private
	   */
	  getInfo(cb) {
	    if (this._bufferedBytes < 2) {
	      this._loop = false;
	      return;
	    }

	    const buf = this.consume(2);

	    if ((buf[0] & 0x30) !== 0x00) {
	      const error = this.createError(
	        RangeError,
	        'RSV2 and RSV3 must be clear',
	        true,
	        1002,
	        'WS_ERR_UNEXPECTED_RSV_2_3'
	      );

	      cb(error);
	      return;
	    }

	    const compressed = (buf[0] & 0x40) === 0x40;

	    if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {
	      const error = this.createError(
	        RangeError,
	        'RSV1 must be clear',
	        true,
	        1002,
	        'WS_ERR_UNEXPECTED_RSV_1'
	      );

	      cb(error);
	      return;
	    }

	    this._fin = (buf[0] & 0x80) === 0x80;
	    this._opcode = buf[0] & 0x0f;
	    this._payloadLength = buf[1] & 0x7f;

	    if (this._opcode === 0x00) {
	      if (compressed) {
	        const error = this.createError(
	          RangeError,
	          'RSV1 must be clear',
	          true,
	          1002,
	          'WS_ERR_UNEXPECTED_RSV_1'
	        );

	        cb(error);
	        return;
	      }

	      if (!this._fragmented) {
	        const error = this.createError(
	          RangeError,
	          'invalid opcode 0',
	          true,
	          1002,
	          'WS_ERR_INVALID_OPCODE'
	        );

	        cb(error);
	        return;
	      }

	      this._opcode = this._fragmented;
	    } else if (this._opcode === 0x01 || this._opcode === 0x02) {
	      if (this._fragmented) {
	        const error = this.createError(
	          RangeError,
	          `invalid opcode ${this._opcode}`,
	          true,
	          1002,
	          'WS_ERR_INVALID_OPCODE'
	        );

	        cb(error);
	        return;
	      }

	      this._compressed = compressed;
	    } else if (this._opcode > 0x07 && this._opcode < 0x0b) {
	      if (!this._fin) {
	        const error = this.createError(
	          RangeError,
	          'FIN must be set',
	          true,
	          1002,
	          'WS_ERR_EXPECTED_FIN'
	        );

	        cb(error);
	        return;
	      }

	      if (compressed) {
	        const error = this.createError(
	          RangeError,
	          'RSV1 must be clear',
	          true,
	          1002,
	          'WS_ERR_UNEXPECTED_RSV_1'
	        );

	        cb(error);
	        return;
	      }

	      if (
	        this._payloadLength > 0x7d ||
	        (this._opcode === 0x08 && this._payloadLength === 1)
	      ) {
	        const error = this.createError(
	          RangeError,
	          `invalid payload length ${this._payloadLength}`,
	          true,
	          1002,
	          'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH'
	        );

	        cb(error);
	        return;
	      }
	    } else {
	      const error = this.createError(
	        RangeError,
	        `invalid opcode ${this._opcode}`,
	        true,
	        1002,
	        'WS_ERR_INVALID_OPCODE'
	      );

	      cb(error);
	      return;
	    }

	    if (!this._fin && !this._fragmented) this._fragmented = this._opcode;
	    this._masked = (buf[1] & 0x80) === 0x80;

	    if (this._isServer) {
	      if (!this._masked) {
	        const error = this.createError(
	          RangeError,
	          'MASK must be set',
	          true,
	          1002,
	          'WS_ERR_EXPECTED_MASK'
	        );

	        cb(error);
	        return;
	      }
	    } else if (this._masked) {
	      const error = this.createError(
	        RangeError,
	        'MASK must be clear',
	        true,
	        1002,
	        'WS_ERR_UNEXPECTED_MASK'
	      );

	      cb(error);
	      return;
	    }

	    if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;
	    else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;
	    else this.haveLength(cb);
	  }

	  /**
	   * Gets extended payload length (7+16).
	   *
	   * @param {Function} cb Callback
	   * @private
	   */
	  getPayloadLength16(cb) {
	    if (this._bufferedBytes < 2) {
	      this._loop = false;
	      return;
	    }

	    this._payloadLength = this.consume(2).readUInt16BE(0);
	    this.haveLength(cb);
	  }

	  /**
	   * Gets extended payload length (7+64).
	   *
	   * @param {Function} cb Callback
	   * @private
	   */
	  getPayloadLength64(cb) {
	    if (this._bufferedBytes < 8) {
	      this._loop = false;
	      return;
	    }

	    const buf = this.consume(8);
	    const num = buf.readUInt32BE(0);

	    //
	    // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned
	    // if payload length is greater than this number.
	    //
	    if (num > Math.pow(2, 53 - 32) - 1) {
	      const error = this.createError(
	        RangeError,
	        'Unsupported WebSocket frame: payload length > 2^53 - 1',
	        false,
	        1009,
	        'WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH'
	      );

	      cb(error);
	      return;
	    }

	    this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);
	    this.haveLength(cb);
	  }

	  /**
	   * Payload length has been read.
	   *
	   * @param {Function} cb Callback
	   * @private
	   */
	  haveLength(cb) {
	    if (this._payloadLength && this._opcode < 0x08) {
	      this._totalPayloadLength += this._payloadLength;
	      if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {
	        const error = this.createError(
	          RangeError,
	          'Max payload size exceeded',
	          false,
	          1009,
	          'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'
	        );

	        cb(error);
	        return;
	      }
	    }

	    if (this._masked) this._state = GET_MASK;
	    else this._state = GET_DATA;
	  }

	  /**
	   * Reads mask bytes.
	   *
	   * @private
	   */
	  getMask() {
	    if (this._bufferedBytes < 4) {
	      this._loop = false;
	      return;
	    }

	    this._mask = this.consume(4);
	    this._state = GET_DATA;
	  }

	  /**
	   * Reads data bytes.
	   *
	   * @param {Function} cb Callback
	   * @private
	   */
	  getData(cb) {
	    let data = EMPTY_BUFFER;

	    if (this._payloadLength) {
	      if (this._bufferedBytes < this._payloadLength) {
	        this._loop = false;
	        return;
	      }

	      data = this.consume(this._payloadLength);

	      if (
	        this._masked &&
	        (this._mask[0] | this._mask[1] | this._mask[2] | this._mask[3]) !== 0
	      ) {
	        unmask(data, this._mask);
	      }
	    }

	    if (this._opcode > 0x07) {
	      this.controlMessage(data, cb);
	      return;
	    }

	    if (this._compressed) {
	      this._state = INFLATING;
	      this.decompress(data, cb);
	      return;
	    }

	    if (data.length) {
	      //
	      // This message is not compressed so its length is the sum of the payload
	      // length of all fragments.
	      //
	      this._messageLength = this._totalPayloadLength;
	      this._fragments.push(data);
	    }

	    this.dataMessage(cb);
	  }

	  /**
	   * Decompresses data.
	   *
	   * @param {Buffer} data Compressed data
	   * @param {Function} cb Callback
	   * @private
	   */
	  decompress(data, cb) {
	    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];

	    perMessageDeflate.decompress(data, this._fin, (err, buf) => {
	      if (err) return cb(err);

	      if (buf.length) {
	        this._messageLength += buf.length;
	        if (this._messageLength > this._maxPayload && this._maxPayload > 0) {
	          const error = this.createError(
	            RangeError,
	            'Max payload size exceeded',
	            false,
	            1009,
	            'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'
	          );

	          cb(error);
	          return;
	        }

	        this._fragments.push(buf);
	      }

	      this.dataMessage(cb);
	      if (this._state === GET_INFO) this.startLoop(cb);
	    });
	  }

	  /**
	   * Handles a data message.
	   *
	   * @param {Function} cb Callback
	   * @private
	   */
	  dataMessage(cb) {
	    if (!this._fin) {
	      this._state = GET_INFO;
	      return;
	    }

	    const messageLength = this._messageLength;
	    const fragments = this._fragments;

	    this._totalPayloadLength = 0;
	    this._messageLength = 0;
	    this._fragmented = 0;
	    this._fragments = [];

	    if (this._opcode === 2) {
	      let data;

	      if (this._binaryType === 'nodebuffer') {
	        data = concat(fragments, messageLength);
	      } else if (this._binaryType === 'arraybuffer') {
	        data = toArrayBuffer(concat(fragments, messageLength));
	      } else if (this._binaryType === 'blob') {
	        data = new Blob(fragments);
	      } else {
	        data = fragments;
	      }

	      if (this._allowSynchronousEvents) {
	        this.emit('message', data, true);
	        this._state = GET_INFO;
	      } else {
	        this._state = DEFER_EVENT;
	        setImmediate(() => {
	          this.emit('message', data, true);
	          this._state = GET_INFO;
	          this.startLoop(cb);
	        });
	      }
	    } else {
	      const buf = concat(fragments, messageLength);

	      if (!this._skipUTF8Validation && !isValidUTF8(buf)) {
	        const error = this.createError(
	          Error,
	          'invalid UTF-8 sequence',
	          true,
	          1007,
	          'WS_ERR_INVALID_UTF8'
	        );

	        cb(error);
	        return;
	      }

	      if (this._state === INFLATING || this._allowSynchronousEvents) {
	        this.emit('message', buf, false);
	        this._state = GET_INFO;
	      } else {
	        this._state = DEFER_EVENT;
	        setImmediate(() => {
	          this.emit('message', buf, false);
	          this._state = GET_INFO;
	          this.startLoop(cb);
	        });
	      }
	    }
	  }

	  /**
	   * Handles a control message.
	   *
	   * @param {Buffer} data Data to handle
	   * @return {(Error|RangeError|undefined)} A possible error
	   * @private
	   */
	  controlMessage(data, cb) {
	    if (this._opcode === 0x08) {
	      if (data.length === 0) {
	        this._loop = false;
	        this.emit('conclude', 1005, EMPTY_BUFFER);
	        this.end();
	      } else {
	        const code = data.readUInt16BE(0);

	        if (!isValidStatusCode(code)) {
	          const error = this.createError(
	            RangeError,
	            `invalid status code ${code}`,
	            true,
	            1002,
	            'WS_ERR_INVALID_CLOSE_CODE'
	          );

	          cb(error);
	          return;
	        }

	        const buf = new FastBuffer(
	          data.buffer,
	          data.byteOffset + 2,
	          data.length - 2
	        );

	        if (!this._skipUTF8Validation && !isValidUTF8(buf)) {
	          const error = this.createError(
	            Error,
	            'invalid UTF-8 sequence',
	            true,
	            1007,
	            'WS_ERR_INVALID_UTF8'
	          );

	          cb(error);
	          return;
	        }

	        this._loop = false;
	        this.emit('conclude', code, buf);
	        this.end();
	      }

	      this._state = GET_INFO;
	      return;
	    }

	    if (this._allowSynchronousEvents) {
	      this.emit(this._opcode === 0x09 ? 'ping' : 'pong', data);
	      this._state = GET_INFO;
	    } else {
	      this._state = DEFER_EVENT;
	      setImmediate(() => {
	        this.emit(this._opcode === 0x09 ? 'ping' : 'pong', data);
	        this._state = GET_INFO;
	        this.startLoop(cb);
	      });
	    }
	  }

	  /**
	   * Builds an error object.
	   *
	   * @param {function(new:Error|RangeError)} ErrorCtor The error constructor
	   * @param {String} message The error message
	   * @param {Boolean} prefix Specifies whether or not to add a default prefix to
	   *     `message`
	   * @param {Number} statusCode The status code
	   * @param {String} errorCode The exposed error code
	   * @return {(Error|RangeError)} The error
	   * @private
	   */
	  createError(ErrorCtor, message, prefix, statusCode, errorCode) {
	    this._loop = false;
	    this._errored = true;

	    const err = new ErrorCtor(
	      prefix ? `Invalid WebSocket frame: ${message}` : message
	    );

	    Error.captureStackTrace(err, this.createError);
	    err.code = errorCode;
	    err[kStatusCode] = statusCode;
	    return err;
	  }
	}

	receiver = Receiver;
	return receiver;
}

/* eslint no-unused-vars: ["error", { "varsIgnorePattern": "^Duplex" }] */

var sender;
var hasRequiredSender;

function requireSender () {
	if (hasRequiredSender) return sender;
	hasRequiredSender = 1;
	const { randomFillSync } = require$$1$c;

	const PerMessageDeflate = requirePermessageDeflate();
	const { EMPTY_BUFFER, kWebSocket, NOOP } = requireConstants();
	const { isBlob, isValidStatusCode } = requireValidation();
	const { mask: applyMask, toBuffer } = requireBufferUtil();

	const kByteLength = Symbol('kByteLength');
	const maskBuffer = Buffer.alloc(4);
	const RANDOM_POOL_SIZE = 8 * 1024;
	let randomPool;
	let randomPoolPointer = RANDOM_POOL_SIZE;

	const DEFAULT = 0;
	const DEFLATING = 1;
	const GET_BLOB_DATA = 2;

	/**
	 * HyBi Sender implementation.
	 */
	class Sender {
	  /**
	   * Creates a Sender instance.
	   *
	   * @param {Duplex} socket The connection socket
	   * @param {Object} [extensions] An object containing the negotiated extensions
	   * @param {Function} [generateMask] The function used to generate the masking
	   *     key
	   */
	  constructor(socket, extensions, generateMask) {
	    this._extensions = extensions || {};

	    if (generateMask) {
	      this._generateMask = generateMask;
	      this._maskBuffer = Buffer.alloc(4);
	    }

	    this._socket = socket;

	    this._firstFragment = true;
	    this._compress = false;

	    this._bufferedBytes = 0;
	    this._queue = [];
	    this._state = DEFAULT;
	    this.onerror = NOOP;
	    this[kWebSocket] = undefined;
	  }

	  /**
	   * Frames a piece of data according to the HyBi WebSocket protocol.
	   *
	   * @param {(Buffer|String)} data The data to frame
	   * @param {Object} options Options object
	   * @param {Boolean} [options.fin=false] Specifies whether or not to set the
	   *     FIN bit
	   * @param {Function} [options.generateMask] The function used to generate the
	   *     masking key
	   * @param {Boolean} [options.mask=false] Specifies whether or not to mask
	   *     `data`
	   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking
	   *     key
	   * @param {Number} options.opcode The opcode
	   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be
	   *     modified
	   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the
	   *     RSV1 bit
	   * @return {(Buffer|String)[]} The framed data
	   * @public
	   */
	  static frame(data, options) {
	    let mask;
	    let merge = false;
	    let offset = 2;
	    let skipMasking = false;

	    if (options.mask) {
	      mask = options.maskBuffer || maskBuffer;

	      if (options.generateMask) {
	        options.generateMask(mask);
	      } else {
	        if (randomPoolPointer === RANDOM_POOL_SIZE) {
	          /* istanbul ignore else  */
	          if (randomPool === undefined) {
	            //
	            // This is lazily initialized because server-sent frames must not
	            // be masked so it may never be used.
	            //
	            randomPool = Buffer.alloc(RANDOM_POOL_SIZE);
	          }

	          randomFillSync(randomPool, 0, RANDOM_POOL_SIZE);
	          randomPoolPointer = 0;
	        }

	        mask[0] = randomPool[randomPoolPointer++];
	        mask[1] = randomPool[randomPoolPointer++];
	        mask[2] = randomPool[randomPoolPointer++];
	        mask[3] = randomPool[randomPoolPointer++];
	      }

	      skipMasking = (mask[0] | mask[1] | mask[2] | mask[3]) === 0;
	      offset = 6;
	    }

	    let dataLength;

	    if (typeof data === 'string') {
	      if (
	        (!options.mask || skipMasking) &&
	        options[kByteLength] !== undefined
	      ) {
	        dataLength = options[kByteLength];
	      } else {
	        data = Buffer.from(data);
	        dataLength = data.length;
	      }
	    } else {
	      dataLength = data.length;
	      merge = options.mask && options.readOnly && !skipMasking;
	    }

	    let payloadLength = dataLength;

	    if (dataLength >= 65536) {
	      offset += 8;
	      payloadLength = 127;
	    } else if (dataLength > 125) {
	      offset += 2;
	      payloadLength = 126;
	    }

	    const target = Buffer.allocUnsafe(merge ? dataLength + offset : offset);

	    target[0] = options.fin ? options.opcode | 0x80 : options.opcode;
	    if (options.rsv1) target[0] |= 0x40;

	    target[1] = payloadLength;

	    if (payloadLength === 126) {
	      target.writeUInt16BE(dataLength, 2);
	    } else if (payloadLength === 127) {
	      target[2] = target[3] = 0;
	      target.writeUIntBE(dataLength, 4, 6);
	    }

	    if (!options.mask) return [target, data];

	    target[1] |= 0x80;
	    target[offset - 4] = mask[0];
	    target[offset - 3] = mask[1];
	    target[offset - 2] = mask[2];
	    target[offset - 1] = mask[3];

	    if (skipMasking) return [target, data];

	    if (merge) {
	      applyMask(data, mask, target, offset, dataLength);
	      return [target];
	    }

	    applyMask(data, mask, data, 0, dataLength);
	    return [target, data];
	  }

	  /**
	   * Sends a close message to the other peer.
	   *
	   * @param {Number} [code] The status code component of the body
	   * @param {(String|Buffer)} [data] The message component of the body
	   * @param {Boolean} [mask=false] Specifies whether or not to mask the message
	   * @param {Function} [cb] Callback
	   * @public
	   */
	  close(code, data, mask, cb) {
	    let buf;

	    if (code === undefined) {
	      buf = EMPTY_BUFFER;
	    } else if (typeof code !== 'number' || !isValidStatusCode(code)) {
	      throw new TypeError('First argument must be a valid error code number');
	    } else if (data === undefined || !data.length) {
	      buf = Buffer.allocUnsafe(2);
	      buf.writeUInt16BE(code, 0);
	    } else {
	      const length = Buffer.byteLength(data);

	      if (length > 123) {
	        throw new RangeError('The message must not be greater than 123 bytes');
	      }

	      buf = Buffer.allocUnsafe(2 + length);
	      buf.writeUInt16BE(code, 0);

	      if (typeof data === 'string') {
	        buf.write(data, 2);
	      } else {
	        buf.set(data, 2);
	      }
	    }

	    const options = {
	      [kByteLength]: buf.length,
	      fin: true,
	      generateMask: this._generateMask,
	      mask,
	      maskBuffer: this._maskBuffer,
	      opcode: 0x08,
	      readOnly: false,
	      rsv1: false
	    };

	    if (this._state !== DEFAULT) {
	      this.enqueue([this.dispatch, buf, false, options, cb]);
	    } else {
	      this.sendFrame(Sender.frame(buf, options), cb);
	    }
	  }

	  /**
	   * Sends a ping message to the other peer.
	   *
	   * @param {*} data The message to send
	   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
	   * @param {Function} [cb] Callback
	   * @public
	   */
	  ping(data, mask, cb) {
	    let byteLength;
	    let readOnly;

	    if (typeof data === 'string') {
	      byteLength = Buffer.byteLength(data);
	      readOnly = false;
	    } else if (isBlob(data)) {
	      byteLength = data.size;
	      readOnly = false;
	    } else {
	      data = toBuffer(data);
	      byteLength = data.length;
	      readOnly = toBuffer.readOnly;
	    }

	    if (byteLength > 125) {
	      throw new RangeError('The data size must not be greater than 125 bytes');
	    }

	    const options = {
	      [kByteLength]: byteLength,
	      fin: true,
	      generateMask: this._generateMask,
	      mask,
	      maskBuffer: this._maskBuffer,
	      opcode: 0x09,
	      readOnly,
	      rsv1: false
	    };

	    if (isBlob(data)) {
	      if (this._state !== DEFAULT) {
	        this.enqueue([this.getBlobData, data, false, options, cb]);
	      } else {
	        this.getBlobData(data, false, options, cb);
	      }
	    } else if (this._state !== DEFAULT) {
	      this.enqueue([this.dispatch, data, false, options, cb]);
	    } else {
	      this.sendFrame(Sender.frame(data, options), cb);
	    }
	  }

	  /**
	   * Sends a pong message to the other peer.
	   *
	   * @param {*} data The message to send
	   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
	   * @param {Function} [cb] Callback
	   * @public
	   */
	  pong(data, mask, cb) {
	    let byteLength;
	    let readOnly;

	    if (typeof data === 'string') {
	      byteLength = Buffer.byteLength(data);
	      readOnly = false;
	    } else if (isBlob(data)) {
	      byteLength = data.size;
	      readOnly = false;
	    } else {
	      data = toBuffer(data);
	      byteLength = data.length;
	      readOnly = toBuffer.readOnly;
	    }

	    if (byteLength > 125) {
	      throw new RangeError('The data size must not be greater than 125 bytes');
	    }

	    const options = {
	      [kByteLength]: byteLength,
	      fin: true,
	      generateMask: this._generateMask,
	      mask,
	      maskBuffer: this._maskBuffer,
	      opcode: 0x0a,
	      readOnly,
	      rsv1: false
	    };

	    if (isBlob(data)) {
	      if (this._state !== DEFAULT) {
	        this.enqueue([this.getBlobData, data, false, options, cb]);
	      } else {
	        this.getBlobData(data, false, options, cb);
	      }
	    } else if (this._state !== DEFAULT) {
	      this.enqueue([this.dispatch, data, false, options, cb]);
	    } else {
	      this.sendFrame(Sender.frame(data, options), cb);
	    }
	  }

	  /**
	   * Sends a data message to the other peer.
	   *
	   * @param {*} data The message to send
	   * @param {Object} options Options object
	   * @param {Boolean} [options.binary=false] Specifies whether `data` is binary
	   *     or text
	   * @param {Boolean} [options.compress=false] Specifies whether or not to
	   *     compress `data`
	   * @param {Boolean} [options.fin=false] Specifies whether the fragment is the
	   *     last one
	   * @param {Boolean} [options.mask=false] Specifies whether or not to mask
	   *     `data`
	   * @param {Function} [cb] Callback
	   * @public
	   */
	  send(data, options, cb) {
	    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];
	    let opcode = options.binary ? 2 : 1;
	    let rsv1 = options.compress;

	    let byteLength;
	    let readOnly;

	    if (typeof data === 'string') {
	      byteLength = Buffer.byteLength(data);
	      readOnly = false;
	    } else if (isBlob(data)) {
	      byteLength = data.size;
	      readOnly = false;
	    } else {
	      data = toBuffer(data);
	      byteLength = data.length;
	      readOnly = toBuffer.readOnly;
	    }

	    if (this._firstFragment) {
	      this._firstFragment = false;
	      if (
	        rsv1 &&
	        perMessageDeflate &&
	        perMessageDeflate.params[
	          perMessageDeflate._isServer
	            ? 'server_no_context_takeover'
	            : 'client_no_context_takeover'
	        ]
	      ) {
	        rsv1 = byteLength >= perMessageDeflate._threshold;
	      }
	      this._compress = rsv1;
	    } else {
	      rsv1 = false;
	      opcode = 0;
	    }

	    if (options.fin) this._firstFragment = true;

	    const opts = {
	      [kByteLength]: byteLength,
	      fin: options.fin,
	      generateMask: this._generateMask,
	      mask: options.mask,
	      maskBuffer: this._maskBuffer,
	      opcode,
	      readOnly,
	      rsv1
	    };

	    if (isBlob(data)) {
	      if (this._state !== DEFAULT) {
	        this.enqueue([this.getBlobData, data, this._compress, opts, cb]);
	      } else {
	        this.getBlobData(data, this._compress, opts, cb);
	      }
	    } else if (this._state !== DEFAULT) {
	      this.enqueue([this.dispatch, data, this._compress, opts, cb]);
	    } else {
	      this.dispatch(data, this._compress, opts, cb);
	    }
	  }

	  /**
	   * Gets the contents of a blob as binary data.
	   *
	   * @param {Blob} blob The blob
	   * @param {Boolean} [compress=false] Specifies whether or not to compress
	   *     the data
	   * @param {Object} options Options object
	   * @param {Boolean} [options.fin=false] Specifies whether or not to set the
	   *     FIN bit
	   * @param {Function} [options.generateMask] The function used to generate the
	   *     masking key
	   * @param {Boolean} [options.mask=false] Specifies whether or not to mask
	   *     `data`
	   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking
	   *     key
	   * @param {Number} options.opcode The opcode
	   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be
	   *     modified
	   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the
	   *     RSV1 bit
	   * @param {Function} [cb] Callback
	   * @private
	   */
	  getBlobData(blob, compress, options, cb) {
	    this._bufferedBytes += options[kByteLength];
	    this._state = GET_BLOB_DATA;

	    blob
	      .arrayBuffer()
	      .then((arrayBuffer) => {
	        if (this._socket.destroyed) {
	          const err = new Error(
	            'The socket was closed while the blob was being read'
	          );

	          //
	          // `callCallbacks` is called in the next tick to ensure that errors
	          // that might be thrown in the callbacks behave like errors thrown
	          // outside the promise chain.
	          //
	          process.nextTick(callCallbacks, this, err, cb);
	          return;
	        }

	        this._bufferedBytes -= options[kByteLength];
	        const data = toBuffer(arrayBuffer);

	        if (!compress) {
	          this._state = DEFAULT;
	          this.sendFrame(Sender.frame(data, options), cb);
	          this.dequeue();
	        } else {
	          this.dispatch(data, compress, options, cb);
	        }
	      })
	      .catch((err) => {
	        //
	        // `onError` is called in the next tick for the same reason that
	        // `callCallbacks` above is.
	        //
	        process.nextTick(onError, this, err, cb);
	      });
	  }

	  /**
	   * Dispatches a message.
	   *
	   * @param {(Buffer|String)} data The message to send
	   * @param {Boolean} [compress=false] Specifies whether or not to compress
	   *     `data`
	   * @param {Object} options Options object
	   * @param {Boolean} [options.fin=false] Specifies whether or not to set the
	   *     FIN bit
	   * @param {Function} [options.generateMask] The function used to generate the
	   *     masking key
	   * @param {Boolean} [options.mask=false] Specifies whether or not to mask
	   *     `data`
	   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking
	   *     key
	   * @param {Number} options.opcode The opcode
	   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be
	   *     modified
	   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the
	   *     RSV1 bit
	   * @param {Function} [cb] Callback
	   * @private
	   */
	  dispatch(data, compress, options, cb) {
	    if (!compress) {
	      this.sendFrame(Sender.frame(data, options), cb);
	      return;
	    }

	    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];

	    this._bufferedBytes += options[kByteLength];
	    this._state = DEFLATING;
	    perMessageDeflate.compress(data, options.fin, (_, buf) => {
	      if (this._socket.destroyed) {
	        const err = new Error(
	          'The socket was closed while data was being compressed'
	        );

	        callCallbacks(this, err, cb);
	        return;
	      }

	      this._bufferedBytes -= options[kByteLength];
	      this._state = DEFAULT;
	      options.readOnly = false;
	      this.sendFrame(Sender.frame(buf, options), cb);
	      this.dequeue();
	    });
	  }

	  /**
	   * Executes queued send operations.
	   *
	   * @private
	   */
	  dequeue() {
	    while (this._state === DEFAULT && this._queue.length) {
	      const params = this._queue.shift();

	      this._bufferedBytes -= params[3][kByteLength];
	      Reflect.apply(params[0], this, params.slice(1));
	    }
	  }

	  /**
	   * Enqueues a send operation.
	   *
	   * @param {Array} params Send operation parameters.
	   * @private
	   */
	  enqueue(params) {
	    this._bufferedBytes += params[3][kByteLength];
	    this._queue.push(params);
	  }

	  /**
	   * Sends a frame.
	   *
	   * @param {Buffer[]} list The frame to send
	   * @param {Function} [cb] Callback
	   * @private
	   */
	  sendFrame(list, cb) {
	    if (list.length === 2) {
	      this._socket.cork();
	      this._socket.write(list[0]);
	      this._socket.write(list[1], cb);
	      this._socket.uncork();
	    } else {
	      this._socket.write(list[0], cb);
	    }
	  }
	}

	sender = Sender;

	/**
	 * Calls queued callbacks with an error.
	 *
	 * @param {Sender} sender The `Sender` instance
	 * @param {Error} err The error to call the callbacks with
	 * @param {Function} [cb] The first callback
	 * @private
	 */
	function callCallbacks(sender, err, cb) {
	  if (typeof cb === 'function') cb(err);

	  for (let i = 0; i < sender._queue.length; i++) {
	    const params = sender._queue[i];
	    const callback = params[params.length - 1];

	    if (typeof callback === 'function') callback(err);
	  }
	}

	/**
	 * Handles a `Sender` error.
	 *
	 * @param {Sender} sender The `Sender` instance
	 * @param {Error} err The error
	 * @param {Function} [cb] The first pending callback
	 * @private
	 */
	function onError(sender, err, cb) {
	  callCallbacks(sender, err, cb);
	  sender.onerror(err);
	}
	return sender;
}

var eventTarget;
var hasRequiredEventTarget;

function requireEventTarget () {
	if (hasRequiredEventTarget) return eventTarget;
	hasRequiredEventTarget = 1;

	const { kForOnEventAttribute, kListener } = requireConstants();

	const kCode = Symbol('kCode');
	const kData = Symbol('kData');
	const kError = Symbol('kError');
	const kMessage = Symbol('kMessage');
	const kReason = Symbol('kReason');
	const kTarget = Symbol('kTarget');
	const kType = Symbol('kType');
	const kWasClean = Symbol('kWasClean');

	/**
	 * Class representing an event.
	 */
	class Event {
	  /**
	   * Create a new `Event`.
	   *
	   * @param {String} type The name of the event
	   * @throws {TypeError} If the `type` argument is not specified
	   */
	  constructor(type) {
	    this[kTarget] = null;
	    this[kType] = type;
	  }

	  /**
	   * @type {*}
	   */
	  get target() {
	    return this[kTarget];
	  }

	  /**
	   * @type {String}
	   */
	  get type() {
	    return this[kType];
	  }
	}

	Object.defineProperty(Event.prototype, 'target', { enumerable: true });
	Object.defineProperty(Event.prototype, 'type', { enumerable: true });

	/**
	 * Class representing a close event.
	 *
	 * @extends Event
	 */
	class CloseEvent extends Event {
	  /**
	   * Create a new `CloseEvent`.
	   *
	   * @param {String} type The name of the event
	   * @param {Object} [options] A dictionary object that allows for setting
	   *     attributes via object members of the same name
	   * @param {Number} [options.code=0] The status code explaining why the
	   *     connection was closed
	   * @param {String} [options.reason=''] A human-readable string explaining why
	   *     the connection was closed
	   * @param {Boolean} [options.wasClean=false] Indicates whether or not the
	   *     connection was cleanly closed
	   */
	  constructor(type, options = {}) {
	    super(type);

	    this[kCode] = options.code === undefined ? 0 : options.code;
	    this[kReason] = options.reason === undefined ? '' : options.reason;
	    this[kWasClean] = options.wasClean === undefined ? false : options.wasClean;
	  }

	  /**
	   * @type {Number}
	   */
	  get code() {
	    return this[kCode];
	  }

	  /**
	   * @type {String}
	   */
	  get reason() {
	    return this[kReason];
	  }

	  /**
	   * @type {Boolean}
	   */
	  get wasClean() {
	    return this[kWasClean];
	  }
	}

	Object.defineProperty(CloseEvent.prototype, 'code', { enumerable: true });
	Object.defineProperty(CloseEvent.prototype, 'reason', { enumerable: true });
	Object.defineProperty(CloseEvent.prototype, 'wasClean', { enumerable: true });

	/**
	 * Class representing an error event.
	 *
	 * @extends Event
	 */
	class ErrorEvent extends Event {
	  /**
	   * Create a new `ErrorEvent`.
	   *
	   * @param {String} type The name of the event
	   * @param {Object} [options] A dictionary object that allows for setting
	   *     attributes via object members of the same name
	   * @param {*} [options.error=null] The error that generated this event
	   * @param {String} [options.message=''] The error message
	   */
	  constructor(type, options = {}) {
	    super(type);

	    this[kError] = options.error === undefined ? null : options.error;
	    this[kMessage] = options.message === undefined ? '' : options.message;
	  }

	  /**
	   * @type {*}
	   */
	  get error() {
	    return this[kError];
	  }

	  /**
	   * @type {String}
	   */
	  get message() {
	    return this[kMessage];
	  }
	}

	Object.defineProperty(ErrorEvent.prototype, 'error', { enumerable: true });
	Object.defineProperty(ErrorEvent.prototype, 'message', { enumerable: true });

	/**
	 * Class representing a message event.
	 *
	 * @extends Event
	 */
	class MessageEvent extends Event {
	  /**
	   * Create a new `MessageEvent`.
	   *
	   * @param {String} type The name of the event
	   * @param {Object} [options] A dictionary object that allows for setting
	   *     attributes via object members of the same name
	   * @param {*} [options.data=null] The message content
	   */
	  constructor(type, options = {}) {
	    super(type);

	    this[kData] = options.data === undefined ? null : options.data;
	  }

	  /**
	   * @type {*}
	   */
	  get data() {
	    return this[kData];
	  }
	}

	Object.defineProperty(MessageEvent.prototype, 'data', { enumerable: true });

	/**
	 * This provides methods for emulating the `EventTarget` interface. It's not
	 * meant to be used directly.
	 *
	 * @mixin
	 */
	const EventTarget = {
	  /**
	   * Register an event listener.
	   *
	   * @param {String} type A string representing the event type to listen for
	   * @param {(Function|Object)} handler The listener to add
	   * @param {Object} [options] An options object specifies characteristics about
	   *     the event listener
	   * @param {Boolean} [options.once=false] A `Boolean` indicating that the
	   *     listener should be invoked at most once after being added. If `true`,
	   *     the listener would be automatically removed when invoked.
	   * @public
	   */
	  addEventListener(type, handler, options = {}) {
	    for (const listener of this.listeners(type)) {
	      if (
	        !options[kForOnEventAttribute] &&
	        listener[kListener] === handler &&
	        !listener[kForOnEventAttribute]
	      ) {
	        return;
	      }
	    }

	    let wrapper;

	    if (type === 'message') {
	      wrapper = function onMessage(data, isBinary) {
	        const event = new MessageEvent('message', {
	          data: isBinary ? data : data.toString()
	        });

	        event[kTarget] = this;
	        callListener(handler, this, event);
	      };
	    } else if (type === 'close') {
	      wrapper = function onClose(code, message) {
	        const event = new CloseEvent('close', {
	          code,
	          reason: message.toString(),
	          wasClean: this._closeFrameReceived && this._closeFrameSent
	        });

	        event[kTarget] = this;
	        callListener(handler, this, event);
	      };
	    } else if (type === 'error') {
	      wrapper = function onError(error) {
	        const event = new ErrorEvent('error', {
	          error,
	          message: error.message
	        });

	        event[kTarget] = this;
	        callListener(handler, this, event);
	      };
	    } else if (type === 'open') {
	      wrapper = function onOpen() {
	        const event = new Event('open');

	        event[kTarget] = this;
	        callListener(handler, this, event);
	      };
	    } else {
	      return;
	    }

	    wrapper[kForOnEventAttribute] = !!options[kForOnEventAttribute];
	    wrapper[kListener] = handler;

	    if (options.once) {
	      this.once(type, wrapper);
	    } else {
	      this.on(type, wrapper);
	    }
	  },

	  /**
	   * Remove an event listener.
	   *
	   * @param {String} type A string representing the event type to remove
	   * @param {(Function|Object)} handler The listener to remove
	   * @public
	   */
	  removeEventListener(type, handler) {
	    for (const listener of this.listeners(type)) {
	      if (listener[kListener] === handler && !listener[kForOnEventAttribute]) {
	        this.removeListener(type, listener);
	        break;
	      }
	    }
	  }
	};

	eventTarget = {
	  CloseEvent,
	  ErrorEvent,
	  Event,
	  EventTarget,
	  MessageEvent
	};

	/**
	 * Call an event listener
	 *
	 * @param {(Function|Object)} listener The listener to call
	 * @param {*} thisArg The value to use as `this`` when calling the listener
	 * @param {Event} event The event to pass to the listener
	 * @private
	 */
	function callListener(listener, thisArg, event) {
	  if (typeof listener === 'object' && listener.handleEvent) {
	    listener.handleEvent.call(listener, event);
	  } else {
	    listener.call(thisArg, event);
	  }
	}
	return eventTarget;
}

var extension;
var hasRequiredExtension;

function requireExtension () {
	if (hasRequiredExtension) return extension;
	hasRequiredExtension = 1;

	const { tokenChars } = requireValidation();

	/**
	 * Adds an offer to the map of extension offers or a parameter to the map of
	 * parameters.
	 *
	 * @param {Object} dest The map of extension offers or parameters
	 * @param {String} name The extension or parameter name
	 * @param {(Object|Boolean|String)} elem The extension parameters or the
	 *     parameter value
	 * @private
	 */
	function push(dest, name, elem) {
	  if (dest[name] === undefined) dest[name] = [elem];
	  else dest[name].push(elem);
	}

	/**
	 * Parses the `Sec-WebSocket-Extensions` header into an object.
	 *
	 * @param {String} header The field value of the header
	 * @return {Object} The parsed object
	 * @public
	 */
	function parse(header) {
	  const offers = Object.create(null);
	  let params = Object.create(null);
	  let mustUnescape = false;
	  let isEscaping = false;
	  let inQuotes = false;
	  let extensionName;
	  let paramName;
	  let start = -1;
	  let code = -1;
	  let end = -1;
	  let i = 0;

	  for (; i < header.length; i++) {
	    code = header.charCodeAt(i);

	    if (extensionName === undefined) {
	      if (end === -1 && tokenChars[code] === 1) {
	        if (start === -1) start = i;
	      } else if (
	        i !== 0 &&
	        (code === 0x20 /* ' ' */ || code === 0x09) /* '\t' */
	      ) {
	        if (end === -1 && start !== -1) end = i;
	      } else if (code === 0x3b /* ';' */ || code === 0x2c /* ',' */) {
	        if (start === -1) {
	          throw new SyntaxError(`Unexpected character at index ${i}`);
	        }

	        if (end === -1) end = i;
	        const name = header.slice(start, end);
	        if (code === 0x2c) {
	          push(offers, name, params);
	          params = Object.create(null);
	        } else {
	          extensionName = name;
	        }

	        start = end = -1;
	      } else {
	        throw new SyntaxError(`Unexpected character at index ${i}`);
	      }
	    } else if (paramName === undefined) {
	      if (end === -1 && tokenChars[code] === 1) {
	        if (start === -1) start = i;
	      } else if (code === 0x20 || code === 0x09) {
	        if (end === -1 && start !== -1) end = i;
	      } else if (code === 0x3b || code === 0x2c) {
	        if (start === -1) {
	          throw new SyntaxError(`Unexpected character at index ${i}`);
	        }

	        if (end === -1) end = i;
	        push(params, header.slice(start, end), true);
	        if (code === 0x2c) {
	          push(offers, extensionName, params);
	          params = Object.create(null);
	          extensionName = undefined;
	        }

	        start = end = -1;
	      } else if (code === 0x3d /* '=' */ && start !== -1 && end === -1) {
	        paramName = header.slice(start, i);
	        start = end = -1;
	      } else {
	        throw new SyntaxError(`Unexpected character at index ${i}`);
	      }
	    } else {
	      //
	      // The value of a quoted-string after unescaping must conform to the
	      // token ABNF, so only token characters are valid.
	      // Ref: https://tools.ietf.org/html/rfc6455#section-9.1
	      //
	      if (isEscaping) {
	        if (tokenChars[code] !== 1) {
	          throw new SyntaxError(`Unexpected character at index ${i}`);
	        }
	        if (start === -1) start = i;
	        else if (!mustUnescape) mustUnescape = true;
	        isEscaping = false;
	      } else if (inQuotes) {
	        if (tokenChars[code] === 1) {
	          if (start === -1) start = i;
	        } else if (code === 0x22 /* '"' */ && start !== -1) {
	          inQuotes = false;
	          end = i;
	        } else if (code === 0x5c /* '\' */) {
	          isEscaping = true;
	        } else {
	          throw new SyntaxError(`Unexpected character at index ${i}`);
	        }
	      } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {
	        inQuotes = true;
	      } else if (end === -1 && tokenChars[code] === 1) {
	        if (start === -1) start = i;
	      } else if (start !== -1 && (code === 0x20 || code === 0x09)) {
	        if (end === -1) end = i;
	      } else if (code === 0x3b || code === 0x2c) {
	        if (start === -1) {
	          throw new SyntaxError(`Unexpected character at index ${i}`);
	        }

	        if (end === -1) end = i;
	        let value = header.slice(start, end);
	        if (mustUnescape) {
	          value = value.replace(/\\/g, '');
	          mustUnescape = false;
	        }
	        push(params, paramName, value);
	        if (code === 0x2c) {
	          push(offers, extensionName, params);
	          params = Object.create(null);
	          extensionName = undefined;
	        }

	        paramName = undefined;
	        start = end = -1;
	      } else {
	        throw new SyntaxError(`Unexpected character at index ${i}`);
	      }
	    }
	  }

	  if (start === -1 || inQuotes || code === 0x20 || code === 0x09) {
	    throw new SyntaxError('Unexpected end of input');
	  }

	  if (end === -1) end = i;
	  const token = header.slice(start, end);
	  if (extensionName === undefined) {
	    push(offers, token, params);
	  } else {
	    if (paramName === undefined) {
	      push(params, token, true);
	    } else if (mustUnescape) {
	      push(params, paramName, token.replace(/\\/g, ''));
	    } else {
	      push(params, paramName, token);
	    }
	    push(offers, extensionName, params);
	  }

	  return offers;
	}

	/**
	 * Builds the `Sec-WebSocket-Extensions` header field value.
	 *
	 * @param {Object} extensions The map of extensions and parameters to format
	 * @return {String} A string representing the given object
	 * @public
	 */
	function format(extensions) {
	  return Object.keys(extensions)
	    .map((extension) => {
	      let configurations = extensions[extension];
	      if (!Array.isArray(configurations)) configurations = [configurations];
	      return configurations
	        .map((params) => {
	          return [extension]
	            .concat(
	              Object.keys(params).map((k) => {
	                let values = params[k];
	                if (!Array.isArray(values)) values = [values];
	                return values
	                  .map((v) => (v === true ? k : `${k}=${v}`))
	                  .join('; ');
	              })
	            )
	            .join('; ');
	        })
	        .join(', ');
	    })
	    .join(', ');
	}

	extension = { format, parse };
	return extension;
}

/* eslint no-unused-vars: ["error", { "varsIgnorePattern": "^Duplex|Readable$", "caughtErrors": "none" }] */

var websocket;
var hasRequiredWebsocket;

function requireWebsocket () {
	if (hasRequiredWebsocket) return websocket;
	hasRequiredWebsocket = 1;

	const EventEmitter = require$$0$5;
	const https = require$$1$7;
	const http = require$$0$6;
	const net = require$$3$3;
	const tls = require$$4$6;
	const { randomBytes, createHash } = require$$1$c;
	const { URL } = require$$7;

	const PerMessageDeflate = requirePermessageDeflate();
	const Receiver = requireReceiver();
	const Sender = requireSender();
	const { isBlob } = requireValidation();

	const {
	  BINARY_TYPES,
	  EMPTY_BUFFER,
	  GUID,
	  kForOnEventAttribute,
	  kListener,
	  kStatusCode,
	  kWebSocket,
	  NOOP
	} = requireConstants();
	const {
	  EventTarget: { addEventListener, removeEventListener }
	} = requireEventTarget();
	const { format, parse } = requireExtension();
	const { toBuffer } = requireBufferUtil();

	const closeTimeout = 30 * 1000;
	const kAborted = Symbol('kAborted');
	const protocolVersions = [8, 13];
	const readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];
	const subprotocolRegex = /^[!#$%&'*+\-.0-9A-Z^_`|a-z~]+$/;

	/**
	 * Class representing a WebSocket.
	 *
	 * @extends EventEmitter
	 */
	class WebSocket extends EventEmitter {
	  /**
	   * Create a new `WebSocket`.
	   *
	   * @param {(String|URL)} address The URL to which to connect
	   * @param {(String|String[])} [protocols] The subprotocols
	   * @param {Object} [options] Connection options
	   */
	  constructor(address, protocols, options) {
	    super();

	    this._binaryType = BINARY_TYPES[0];
	    this._closeCode = 1006;
	    this._closeFrameReceived = false;
	    this._closeFrameSent = false;
	    this._closeMessage = EMPTY_BUFFER;
	    this._closeTimer = null;
	    this._errorEmitted = false;
	    this._extensions = {};
	    this._paused = false;
	    this._protocol = '';
	    this._readyState = WebSocket.CONNECTING;
	    this._receiver = null;
	    this._sender = null;
	    this._socket = null;

	    if (address !== null) {
	      this._bufferedAmount = 0;
	      this._isServer = false;
	      this._redirects = 0;

	      if (protocols === undefined) {
	        protocols = [];
	      } else if (!Array.isArray(protocols)) {
	        if (typeof protocols === 'object' && protocols !== null) {
	          options = protocols;
	          protocols = [];
	        } else {
	          protocols = [protocols];
	        }
	      }

	      initAsClient(this, address, protocols, options);
	    } else {
	      this._autoPong = options.autoPong;
	      this._isServer = true;
	    }
	  }

	  /**
	   * For historical reasons, the custom "nodebuffer" type is used by the default
	   * instead of "blob".
	   *
	   * @type {String}
	   */
	  get binaryType() {
	    return this._binaryType;
	  }

	  set binaryType(type) {
	    if (!BINARY_TYPES.includes(type)) return;

	    this._binaryType = type;

	    //
	    // Allow to change `binaryType` on the fly.
	    //
	    if (this._receiver) this._receiver._binaryType = type;
	  }

	  /**
	   * @type {Number}
	   */
	  get bufferedAmount() {
	    if (!this._socket) return this._bufferedAmount;

	    return this._socket._writableState.length + this._sender._bufferedBytes;
	  }

	  /**
	   * @type {String}
	   */
	  get extensions() {
	    return Object.keys(this._extensions).join();
	  }

	  /**
	   * @type {Boolean}
	   */
	  get isPaused() {
	    return this._paused;
	  }

	  /**
	   * @type {Function}
	   */
	  /* istanbul ignore next */
	  get onclose() {
	    return null;
	  }

	  /**
	   * @type {Function}
	   */
	  /* istanbul ignore next */
	  get onerror() {
	    return null;
	  }

	  /**
	   * @type {Function}
	   */
	  /* istanbul ignore next */
	  get onopen() {
	    return null;
	  }

	  /**
	   * @type {Function}
	   */
	  /* istanbul ignore next */
	  get onmessage() {
	    return null;
	  }

	  /**
	   * @type {String}
	   */
	  get protocol() {
	    return this._protocol;
	  }

	  /**
	   * @type {Number}
	   */
	  get readyState() {
	    return this._readyState;
	  }

	  /**
	   * @type {String}
	   */
	  get url() {
	    return this._url;
	  }

	  /**
	   * Set up the socket and the internal resources.
	   *
	   * @param {Duplex} socket The network socket between the server and client
	   * @param {Buffer} head The first packet of the upgraded stream
	   * @param {Object} options Options object
	   * @param {Boolean} [options.allowSynchronousEvents=false] Specifies whether
	   *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted
	   *     multiple times in the same tick
	   * @param {Function} [options.generateMask] The function used to generate the
	   *     masking key
	   * @param {Number} [options.maxPayload=0] The maximum allowed message size
	   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or
	   *     not to skip UTF-8 validation for text and close messages
	   * @private
	   */
	  setSocket(socket, head, options) {
	    const receiver = new Receiver({
	      allowSynchronousEvents: options.allowSynchronousEvents,
	      binaryType: this.binaryType,
	      extensions: this._extensions,
	      isServer: this._isServer,
	      maxPayload: options.maxPayload,
	      skipUTF8Validation: options.skipUTF8Validation
	    });

	    const sender = new Sender(socket, this._extensions, options.generateMask);

	    this._receiver = receiver;
	    this._sender = sender;
	    this._socket = socket;

	    receiver[kWebSocket] = this;
	    sender[kWebSocket] = this;
	    socket[kWebSocket] = this;

	    receiver.on('conclude', receiverOnConclude);
	    receiver.on('drain', receiverOnDrain);
	    receiver.on('error', receiverOnError);
	    receiver.on('message', receiverOnMessage);
	    receiver.on('ping', receiverOnPing);
	    receiver.on('pong', receiverOnPong);

	    sender.onerror = senderOnError;

	    //
	    // These methods may not be available if `socket` is just a `Duplex`.
	    //
	    if (socket.setTimeout) socket.setTimeout(0);
	    if (socket.setNoDelay) socket.setNoDelay();

	    if (head.length > 0) socket.unshift(head);

	    socket.on('close', socketOnClose);
	    socket.on('data', socketOnData);
	    socket.on('end', socketOnEnd);
	    socket.on('error', socketOnError);

	    this._readyState = WebSocket.OPEN;
	    this.emit('open');
	  }

	  /**
	   * Emit the `'close'` event.
	   *
	   * @private
	   */
	  emitClose() {
	    if (!this._socket) {
	      this._readyState = WebSocket.CLOSED;
	      this.emit('close', this._closeCode, this._closeMessage);
	      return;
	    }

	    if (this._extensions[PerMessageDeflate.extensionName]) {
	      this._extensions[PerMessageDeflate.extensionName].cleanup();
	    }

	    this._receiver.removeAllListeners();
	    this._readyState = WebSocket.CLOSED;
	    this.emit('close', this._closeCode, this._closeMessage);
	  }

	  /**
	   * Start a closing handshake.
	   *
	   *          +----------+   +-----------+   +----------+
	   *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -
	   *    |     +----------+   +-----------+   +----------+     |
	   *          +----------+   +-----------+         |
	   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING
	   *          +----------+   +-----------+   |
	   *    |           |                        |   +---+        |
	   *                +------------------------+-->|fin| - - - -
	   *    |         +---+                      |   +---+
	   *     - - - - -|fin|<---------------------+
	   *              +---+
	   *
	   * @param {Number} [code] Status code explaining why the connection is closing
	   * @param {(String|Buffer)} [data] The reason why the connection is
	   *     closing
	   * @public
	   */
	  close(code, data) {
	    if (this.readyState === WebSocket.CLOSED) return;
	    if (this.readyState === WebSocket.CONNECTING) {
	      const msg = 'WebSocket was closed before the connection was established';
	      abortHandshake(this, this._req, msg);
	      return;
	    }

	    if (this.readyState === WebSocket.CLOSING) {
	      if (
	        this._closeFrameSent &&
	        (this._closeFrameReceived || this._receiver._writableState.errorEmitted)
	      ) {
	        this._socket.end();
	      }

	      return;
	    }

	    this._readyState = WebSocket.CLOSING;
	    this._sender.close(code, data, !this._isServer, (err) => {
	      //
	      // This error is handled by the `'error'` listener on the socket. We only
	      // want to know if the close frame has been sent here.
	      //
	      if (err) return;

	      this._closeFrameSent = true;

	      if (
	        this._closeFrameReceived ||
	        this._receiver._writableState.errorEmitted
	      ) {
	        this._socket.end();
	      }
	    });

	    setCloseTimer(this);
	  }

	  /**
	   * Pause the socket.
	   *
	   * @public
	   */
	  pause() {
	    if (
	      this.readyState === WebSocket.CONNECTING ||
	      this.readyState === WebSocket.CLOSED
	    ) {
	      return;
	    }

	    this._paused = true;
	    this._socket.pause();
	  }

	  /**
	   * Send a ping.
	   *
	   * @param {*} [data] The data to send
	   * @param {Boolean} [mask] Indicates whether or not to mask `data`
	   * @param {Function} [cb] Callback which is executed when the ping is sent
	   * @public
	   */
	  ping(data, mask, cb) {
	    if (this.readyState === WebSocket.CONNECTING) {
	      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');
	    }

	    if (typeof data === 'function') {
	      cb = data;
	      data = mask = undefined;
	    } else if (typeof mask === 'function') {
	      cb = mask;
	      mask = undefined;
	    }

	    if (typeof data === 'number') data = data.toString();

	    if (this.readyState !== WebSocket.OPEN) {
	      sendAfterClose(this, data, cb);
	      return;
	    }

	    if (mask === undefined) mask = !this._isServer;
	    this._sender.ping(data || EMPTY_BUFFER, mask, cb);
	  }

	  /**
	   * Send a pong.
	   *
	   * @param {*} [data] The data to send
	   * @param {Boolean} [mask] Indicates whether or not to mask `data`
	   * @param {Function} [cb] Callback which is executed when the pong is sent
	   * @public
	   */
	  pong(data, mask, cb) {
	    if (this.readyState === WebSocket.CONNECTING) {
	      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');
	    }

	    if (typeof data === 'function') {
	      cb = data;
	      data = mask = undefined;
	    } else if (typeof mask === 'function') {
	      cb = mask;
	      mask = undefined;
	    }

	    if (typeof data === 'number') data = data.toString();

	    if (this.readyState !== WebSocket.OPEN) {
	      sendAfterClose(this, data, cb);
	      return;
	    }

	    if (mask === undefined) mask = !this._isServer;
	    this._sender.pong(data || EMPTY_BUFFER, mask, cb);
	  }

	  /**
	   * Resume the socket.
	   *
	   * @public
	   */
	  resume() {
	    if (
	      this.readyState === WebSocket.CONNECTING ||
	      this.readyState === WebSocket.CLOSED
	    ) {
	      return;
	    }

	    this._paused = false;
	    if (!this._receiver._writableState.needDrain) this._socket.resume();
	  }

	  /**
	   * Send a data message.
	   *
	   * @param {*} data The message to send
	   * @param {Object} [options] Options object
	   * @param {Boolean} [options.binary] Specifies whether `data` is binary or
	   *     text
	   * @param {Boolean} [options.compress] Specifies whether or not to compress
	   *     `data`
	   * @param {Boolean} [options.fin=true] Specifies whether the fragment is the
	   *     last one
	   * @param {Boolean} [options.mask] Specifies whether or not to mask `data`
	   * @param {Function} [cb] Callback which is executed when data is written out
	   * @public
	   */
	  send(data, options, cb) {
	    if (this.readyState === WebSocket.CONNECTING) {
	      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');
	    }

	    if (typeof options === 'function') {
	      cb = options;
	      options = {};
	    }

	    if (typeof data === 'number') data = data.toString();

	    if (this.readyState !== WebSocket.OPEN) {
	      sendAfterClose(this, data, cb);
	      return;
	    }

	    const opts = {
	      binary: typeof data !== 'string',
	      mask: !this._isServer,
	      compress: true,
	      fin: true,
	      ...options
	    };

	    if (!this._extensions[PerMessageDeflate.extensionName]) {
	      opts.compress = false;
	    }

	    this._sender.send(data || EMPTY_BUFFER, opts, cb);
	  }

	  /**
	   * Forcibly close the connection.
	   *
	   * @public
	   */
	  terminate() {
	    if (this.readyState === WebSocket.CLOSED) return;
	    if (this.readyState === WebSocket.CONNECTING) {
	      const msg = 'WebSocket was closed before the connection was established';
	      abortHandshake(this, this._req, msg);
	      return;
	    }

	    if (this._socket) {
	      this._readyState = WebSocket.CLOSING;
	      this._socket.destroy();
	    }
	  }
	}

	/**
	 * @constant {Number} CONNECTING
	 * @memberof WebSocket
	 */
	Object.defineProperty(WebSocket, 'CONNECTING', {
	  enumerable: true,
	  value: readyStates.indexOf('CONNECTING')
	});

	/**
	 * @constant {Number} CONNECTING
	 * @memberof WebSocket.prototype
	 */
	Object.defineProperty(WebSocket.prototype, 'CONNECTING', {
	  enumerable: true,
	  value: readyStates.indexOf('CONNECTING')
	});

	/**
	 * @constant {Number} OPEN
	 * @memberof WebSocket
	 */
	Object.defineProperty(WebSocket, 'OPEN', {
	  enumerable: true,
	  value: readyStates.indexOf('OPEN')
	});

	/**
	 * @constant {Number} OPEN
	 * @memberof WebSocket.prototype
	 */
	Object.defineProperty(WebSocket.prototype, 'OPEN', {
	  enumerable: true,
	  value: readyStates.indexOf('OPEN')
	});

	/**
	 * @constant {Number} CLOSING
	 * @memberof WebSocket
	 */
	Object.defineProperty(WebSocket, 'CLOSING', {
	  enumerable: true,
	  value: readyStates.indexOf('CLOSING')
	});

	/**
	 * @constant {Number} CLOSING
	 * @memberof WebSocket.prototype
	 */
	Object.defineProperty(WebSocket.prototype, 'CLOSING', {
	  enumerable: true,
	  value: readyStates.indexOf('CLOSING')
	});

	/**
	 * @constant {Number} CLOSED
	 * @memberof WebSocket
	 */
	Object.defineProperty(WebSocket, 'CLOSED', {
	  enumerable: true,
	  value: readyStates.indexOf('CLOSED')
	});

	/**
	 * @constant {Number} CLOSED
	 * @memberof WebSocket.prototype
	 */
	Object.defineProperty(WebSocket.prototype, 'CLOSED', {
	  enumerable: true,
	  value: readyStates.indexOf('CLOSED')
	});

	[
	  'binaryType',
	  'bufferedAmount',
	  'extensions',
	  'isPaused',
	  'protocol',
	  'readyState',
	  'url'
	].forEach((property) => {
	  Object.defineProperty(WebSocket.prototype, property, { enumerable: true });
	});

	//
	// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.
	// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface
	//
	['open', 'error', 'close', 'message'].forEach((method) => {
	  Object.defineProperty(WebSocket.prototype, `on${method}`, {
	    enumerable: true,
	    get() {
	      for (const listener of this.listeners(method)) {
	        if (listener[kForOnEventAttribute]) return listener[kListener];
	      }

	      return null;
	    },
	    set(handler) {
	      for (const listener of this.listeners(method)) {
	        if (listener[kForOnEventAttribute]) {
	          this.removeListener(method, listener);
	          break;
	        }
	      }

	      if (typeof handler !== 'function') return;

	      this.addEventListener(method, handler, {
	        [kForOnEventAttribute]: true
	      });
	    }
	  });
	});

	WebSocket.prototype.addEventListener = addEventListener;
	WebSocket.prototype.removeEventListener = removeEventListener;

	websocket = WebSocket;

	/**
	 * Initialize a WebSocket client.
	 *
	 * @param {WebSocket} websocket The client to initialize
	 * @param {(String|URL)} address The URL to which to connect
	 * @param {Array} protocols The subprotocols
	 * @param {Object} [options] Connection options
	 * @param {Boolean} [options.allowSynchronousEvents=true] Specifies whether any
	 *     of the `'message'`, `'ping'`, and `'pong'` events can be emitted multiple
	 *     times in the same tick
	 * @param {Boolean} [options.autoPong=true] Specifies whether or not to
	 *     automatically send a pong in response to a ping
	 * @param {Function} [options.finishRequest] A function which can be used to
	 *     customize the headers of each http request before it is sent
	 * @param {Boolean} [options.followRedirects=false] Whether or not to follow
	 *     redirects
	 * @param {Function} [options.generateMask] The function used to generate the
	 *     masking key
	 * @param {Number} [options.handshakeTimeout] Timeout in milliseconds for the
	 *     handshake request
	 * @param {Number} [options.maxPayload=104857600] The maximum allowed message
	 *     size
	 * @param {Number} [options.maxRedirects=10] The maximum number of redirects
	 *     allowed
	 * @param {String} [options.origin] Value of the `Origin` or
	 *     `Sec-WebSocket-Origin` header
	 * @param {(Boolean|Object)} [options.perMessageDeflate=true] Enable/disable
	 *     permessage-deflate
	 * @param {Number} [options.protocolVersion=13] Value of the
	 *     `Sec-WebSocket-Version` header
	 * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or
	 *     not to skip UTF-8 validation for text and close messages
	 * @private
	 */
	function initAsClient(websocket, address, protocols, options) {
	  const opts = {
	    allowSynchronousEvents: true,
	    autoPong: true,
	    protocolVersion: protocolVersions[1],
	    maxPayload: 100 * 1024 * 1024,
	    skipUTF8Validation: false,
	    perMessageDeflate: true,
	    followRedirects: false,
	    maxRedirects: 10,
	    ...options,
	    socketPath: undefined,
	    hostname: undefined,
	    protocol: undefined,
	    timeout: undefined,
	    method: 'GET',
	    host: undefined,
	    path: undefined,
	    port: undefined
	  };

	  websocket._autoPong = opts.autoPong;

	  if (!protocolVersions.includes(opts.protocolVersion)) {
	    throw new RangeError(
	      `Unsupported protocol version: ${opts.protocolVersion} ` +
	        `(supported versions: ${protocolVersions.join(', ')})`
	    );
	  }

	  let parsedUrl;

	  if (address instanceof URL) {
	    parsedUrl = address;
	  } else {
	    try {
	      parsedUrl = new URL(address);
	    } catch (e) {
	      throw new SyntaxError(`Invalid URL: ${address}`);
	    }
	  }

	  if (parsedUrl.protocol === 'http:') {
	    parsedUrl.protocol = 'ws:';
	  } else if (parsedUrl.protocol === 'https:') {
	    parsedUrl.protocol = 'wss:';
	  }

	  websocket._url = parsedUrl.href;

	  const isSecure = parsedUrl.protocol === 'wss:';
	  const isIpcUrl = parsedUrl.protocol === 'ws+unix:';
	  let invalidUrlMessage;

	  if (parsedUrl.protocol !== 'ws:' && !isSecure && !isIpcUrl) {
	    invalidUrlMessage =
	      'The URL\'s protocol must be one of "ws:", "wss:", ' +
	      '"http:", "https", or "ws+unix:"';
	  } else if (isIpcUrl && !parsedUrl.pathname) {
	    invalidUrlMessage = "The URL's pathname is empty";
	  } else if (parsedUrl.hash) {
	    invalidUrlMessage = 'The URL contains a fragment identifier';
	  }

	  if (invalidUrlMessage) {
	    const err = new SyntaxError(invalidUrlMessage);

	    if (websocket._redirects === 0) {
	      throw err;
	    } else {
	      emitErrorAndClose(websocket, err);
	      return;
	    }
	  }

	  const defaultPort = isSecure ? 443 : 80;
	  const key = randomBytes(16).toString('base64');
	  const request = isSecure ? https.request : http.request;
	  const protocolSet = new Set();
	  let perMessageDeflate;

	  opts.createConnection =
	    opts.createConnection || (isSecure ? tlsConnect : netConnect);
	  opts.defaultPort = opts.defaultPort || defaultPort;
	  opts.port = parsedUrl.port || defaultPort;
	  opts.host = parsedUrl.hostname.startsWith('[')
	    ? parsedUrl.hostname.slice(1, -1)
	    : parsedUrl.hostname;
	  opts.headers = {
	    ...opts.headers,
	    'Sec-WebSocket-Version': opts.protocolVersion,
	    'Sec-WebSocket-Key': key,
	    Connection: 'Upgrade',
	    Upgrade: 'websocket'
	  };
	  opts.path = parsedUrl.pathname + parsedUrl.search;
	  opts.timeout = opts.handshakeTimeout;

	  if (opts.perMessageDeflate) {
	    perMessageDeflate = new PerMessageDeflate(
	      opts.perMessageDeflate !== true ? opts.perMessageDeflate : {},
	      false,
	      opts.maxPayload
	    );
	    opts.headers['Sec-WebSocket-Extensions'] = format({
	      [PerMessageDeflate.extensionName]: perMessageDeflate.offer()
	    });
	  }
	  if (protocols.length) {
	    for (const protocol of protocols) {
	      if (
	        typeof protocol !== 'string' ||
	        !subprotocolRegex.test(protocol) ||
	        protocolSet.has(protocol)
	      ) {
	        throw new SyntaxError(
	          'An invalid or duplicated subprotocol was specified'
	        );
	      }

	      protocolSet.add(protocol);
	    }

	    opts.headers['Sec-WebSocket-Protocol'] = protocols.join(',');
	  }
	  if (opts.origin) {
	    if (opts.protocolVersion < 13) {
	      opts.headers['Sec-WebSocket-Origin'] = opts.origin;
	    } else {
	      opts.headers.Origin = opts.origin;
	    }
	  }
	  if (parsedUrl.username || parsedUrl.password) {
	    opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;
	  }

	  if (isIpcUrl) {
	    const parts = opts.path.split(':');

	    opts.socketPath = parts[0];
	    opts.path = parts[1];
	  }

	  let req;

	  if (opts.followRedirects) {
	    if (websocket._redirects === 0) {
	      websocket._originalIpc = isIpcUrl;
	      websocket._originalSecure = isSecure;
	      websocket._originalHostOrSocketPath = isIpcUrl
	        ? opts.socketPath
	        : parsedUrl.host;

	      const headers = options && options.headers;

	      //
	      // Shallow copy the user provided options so that headers can be changed
	      // without mutating the original object.
	      //
	      options = { ...options, headers: {} };

	      if (headers) {
	        for (const [key, value] of Object.entries(headers)) {
	          options.headers[key.toLowerCase()] = value;
	        }
	      }
	    } else if (websocket.listenerCount('redirect') === 0) {
	      const isSameHost = isIpcUrl
	        ? websocket._originalIpc
	          ? opts.socketPath === websocket._originalHostOrSocketPath
	          : false
	        : websocket._originalIpc
	          ? false
	          : parsedUrl.host === websocket._originalHostOrSocketPath;

	      if (!isSameHost || (websocket._originalSecure && !isSecure)) {
	        //
	        // Match curl 7.77.0 behavior and drop the following headers. These
	        // headers are also dropped when following a redirect to a subdomain.
	        //
	        delete opts.headers.authorization;
	        delete opts.headers.cookie;

	        if (!isSameHost) delete opts.headers.host;

	        opts.auth = undefined;
	      }
	    }

	    //
	    // Match curl 7.77.0 behavior and make the first `Authorization` header win.
	    // If the `Authorization` header is set, then there is nothing to do as it
	    // will take precedence.
	    //
	    if (opts.auth && !options.headers.authorization) {
	      options.headers.authorization =
	        'Basic ' + Buffer.from(opts.auth).toString('base64');
	    }

	    req = websocket._req = request(opts);

	    if (websocket._redirects) {
	      //
	      // Unlike what is done for the `'upgrade'` event, no early exit is
	      // triggered here if the user calls `websocket.close()` or
	      // `websocket.terminate()` from a listener of the `'redirect'` event. This
	      // is because the user can also call `request.destroy()` with an error
	      // before calling `websocket.close()` or `websocket.terminate()` and this
	      // would result in an error being emitted on the `request` object with no
	      // `'error'` event listeners attached.
	      //
	      websocket.emit('redirect', websocket.url, req);
	    }
	  } else {
	    req = websocket._req = request(opts);
	  }

	  if (opts.timeout) {
	    req.on('timeout', () => {
	      abortHandshake(websocket, req, 'Opening handshake has timed out');
	    });
	  }

	  req.on('error', (err) => {
	    if (req === null || req[kAborted]) return;

	    req = websocket._req = null;
	    emitErrorAndClose(websocket, err);
	  });

	  req.on('response', (res) => {
	    const location = res.headers.location;
	    const statusCode = res.statusCode;

	    if (
	      location &&
	      opts.followRedirects &&
	      statusCode >= 300 &&
	      statusCode < 400
	    ) {
	      if (++websocket._redirects > opts.maxRedirects) {
	        abortHandshake(websocket, req, 'Maximum redirects exceeded');
	        return;
	      }

	      req.abort();

	      let addr;

	      try {
	        addr = new URL(location, address);
	      } catch (e) {
	        const err = new SyntaxError(`Invalid URL: ${location}`);
	        emitErrorAndClose(websocket, err);
	        return;
	      }

	      initAsClient(websocket, addr, protocols, options);
	    } else if (!websocket.emit('unexpected-response', req, res)) {
	      abortHandshake(
	        websocket,
	        req,
	        `Unexpected server response: ${res.statusCode}`
	      );
	    }
	  });

	  req.on('upgrade', (res, socket, head) => {
	    websocket.emit('upgrade', res);

	    //
	    // The user may have closed the connection from a listener of the
	    // `'upgrade'` event.
	    //
	    if (websocket.readyState !== WebSocket.CONNECTING) return;

	    req = websocket._req = null;

	    const upgrade = res.headers.upgrade;

	    if (upgrade === undefined || upgrade.toLowerCase() !== 'websocket') {
	      abortHandshake(websocket, socket, 'Invalid Upgrade header');
	      return;
	    }

	    const digest = createHash('sha1')
	      .update(key + GUID)
	      .digest('base64');

	    if (res.headers['sec-websocket-accept'] !== digest) {
	      abortHandshake(websocket, socket, 'Invalid Sec-WebSocket-Accept header');
	      return;
	    }

	    const serverProt = res.headers['sec-websocket-protocol'];
	    let protError;

	    if (serverProt !== undefined) {
	      if (!protocolSet.size) {
	        protError = 'Server sent a subprotocol but none was requested';
	      } else if (!protocolSet.has(serverProt)) {
	        protError = 'Server sent an invalid subprotocol';
	      }
	    } else if (protocolSet.size) {
	      protError = 'Server sent no subprotocol';
	    }

	    if (protError) {
	      abortHandshake(websocket, socket, protError);
	      return;
	    }

	    if (serverProt) websocket._protocol = serverProt;

	    const secWebSocketExtensions = res.headers['sec-websocket-extensions'];

	    if (secWebSocketExtensions !== undefined) {
	      if (!perMessageDeflate) {
	        const message =
	          'Server sent a Sec-WebSocket-Extensions header but no extension ' +
	          'was requested';
	        abortHandshake(websocket, socket, message);
	        return;
	      }

	      let extensions;

	      try {
	        extensions = parse(secWebSocketExtensions);
	      } catch (err) {
	        const message = 'Invalid Sec-WebSocket-Extensions header';
	        abortHandshake(websocket, socket, message);
	        return;
	      }

	      const extensionNames = Object.keys(extensions);

	      if (
	        extensionNames.length !== 1 ||
	        extensionNames[0] !== PerMessageDeflate.extensionName
	      ) {
	        const message = 'Server indicated an extension that was not requested';
	        abortHandshake(websocket, socket, message);
	        return;
	      }

	      try {
	        perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);
	      } catch (err) {
	        const message = 'Invalid Sec-WebSocket-Extensions header';
	        abortHandshake(websocket, socket, message);
	        return;
	      }

	      websocket._extensions[PerMessageDeflate.extensionName] =
	        perMessageDeflate;
	    }

	    websocket.setSocket(socket, head, {
	      allowSynchronousEvents: opts.allowSynchronousEvents,
	      generateMask: opts.generateMask,
	      maxPayload: opts.maxPayload,
	      skipUTF8Validation: opts.skipUTF8Validation
	    });
	  });

	  if (opts.finishRequest) {
	    opts.finishRequest(req, websocket);
	  } else {
	    req.end();
	  }
	}

	/**
	 * Emit the `'error'` and `'close'` events.
	 *
	 * @param {WebSocket} websocket The WebSocket instance
	 * @param {Error} The error to emit
	 * @private
	 */
	function emitErrorAndClose(websocket, err) {
	  websocket._readyState = WebSocket.CLOSING;
	  //
	  // The following assignment is practically useless and is done only for
	  // consistency.
	  //
	  websocket._errorEmitted = true;
	  websocket.emit('error', err);
	  websocket.emitClose();
	}

	/**
	 * Create a `net.Socket` and initiate a connection.
	 *
	 * @param {Object} options Connection options
	 * @return {net.Socket} The newly created socket used to start the connection
	 * @private
	 */
	function netConnect(options) {
	  options.path = options.socketPath;
	  return net.connect(options);
	}

	/**
	 * Create a `tls.TLSSocket` and initiate a connection.
	 *
	 * @param {Object} options Connection options
	 * @return {tls.TLSSocket} The newly created socket used to start the connection
	 * @private
	 */
	function tlsConnect(options) {
	  options.path = undefined;

	  if (!options.servername && options.servername !== '') {
	    options.servername = net.isIP(options.host) ? '' : options.host;
	  }

	  return tls.connect(options);
	}

	/**
	 * Abort the handshake and emit an error.
	 *
	 * @param {WebSocket} websocket The WebSocket instance
	 * @param {(http.ClientRequest|net.Socket|tls.Socket)} stream The request to
	 *     abort or the socket to destroy
	 * @param {String} message The error message
	 * @private
	 */
	function abortHandshake(websocket, stream, message) {
	  websocket._readyState = WebSocket.CLOSING;

	  const err = new Error(message);
	  Error.captureStackTrace(err, abortHandshake);

	  if (stream.setHeader) {
	    stream[kAborted] = true;
	    stream.abort();

	    if (stream.socket && !stream.socket.destroyed) {
	      //
	      // On Node.js >= 14.3.0 `request.abort()` does not destroy the socket if
	      // called after the request completed. See
	      // https://github.com/websockets/ws/issues/1869.
	      //
	      stream.socket.destroy();
	    }

	    process.nextTick(emitErrorAndClose, websocket, err);
	  } else {
	    stream.destroy(err);
	    stream.once('error', websocket.emit.bind(websocket, 'error'));
	    stream.once('close', websocket.emitClose.bind(websocket));
	  }
	}

	/**
	 * Handle cases where the `ping()`, `pong()`, or `send()` methods are called
	 * when the `readyState` attribute is `CLOSING` or `CLOSED`.
	 *
	 * @param {WebSocket} websocket The WebSocket instance
	 * @param {*} [data] The data to send
	 * @param {Function} [cb] Callback
	 * @private
	 */
	function sendAfterClose(websocket, data, cb) {
	  if (data) {
	    const length = isBlob(data) ? data.size : toBuffer(data).length;

	    //
	    // The `_bufferedAmount` property is used only when the peer is a client and
	    // the opening handshake fails. Under these circumstances, in fact, the
	    // `setSocket()` method is not called, so the `_socket` and `_sender`
	    // properties are set to `null`.
	    //
	    if (websocket._socket) websocket._sender._bufferedBytes += length;
	    else websocket._bufferedAmount += length;
	  }

	  if (cb) {
	    const err = new Error(
	      `WebSocket is not open: readyState ${websocket.readyState} ` +
	        `(${readyStates[websocket.readyState]})`
	    );
	    process.nextTick(cb, err);
	  }
	}

	/**
	 * The listener of the `Receiver` `'conclude'` event.
	 *
	 * @param {Number} code The status code
	 * @param {Buffer} reason The reason for closing
	 * @private
	 */
	function receiverOnConclude(code, reason) {
	  const websocket = this[kWebSocket];

	  websocket._closeFrameReceived = true;
	  websocket._closeMessage = reason;
	  websocket._closeCode = code;

	  if (websocket._socket[kWebSocket] === undefined) return;

	  websocket._socket.removeListener('data', socketOnData);
	  process.nextTick(resume, websocket._socket);

	  if (code === 1005) websocket.close();
	  else websocket.close(code, reason);
	}

	/**
	 * The listener of the `Receiver` `'drain'` event.
	 *
	 * @private
	 */
	function receiverOnDrain() {
	  const websocket = this[kWebSocket];

	  if (!websocket.isPaused) websocket._socket.resume();
	}

	/**
	 * The listener of the `Receiver` `'error'` event.
	 *
	 * @param {(RangeError|Error)} err The emitted error
	 * @private
	 */
	function receiverOnError(err) {
	  const websocket = this[kWebSocket];

	  if (websocket._socket[kWebSocket] !== undefined) {
	    websocket._socket.removeListener('data', socketOnData);

	    //
	    // On Node.js < 14.0.0 the `'error'` event is emitted synchronously. See
	    // https://github.com/websockets/ws/issues/1940.
	    //
	    process.nextTick(resume, websocket._socket);

	    websocket.close(err[kStatusCode]);
	  }

	  if (!websocket._errorEmitted) {
	    websocket._errorEmitted = true;
	    websocket.emit('error', err);
	  }
	}

	/**
	 * The listener of the `Receiver` `'finish'` event.
	 *
	 * @private
	 */
	function receiverOnFinish() {
	  this[kWebSocket].emitClose();
	}

	/**
	 * The listener of the `Receiver` `'message'` event.
	 *
	 * @param {Buffer|ArrayBuffer|Buffer[])} data The message
	 * @param {Boolean} isBinary Specifies whether the message is binary or not
	 * @private
	 */
	function receiverOnMessage(data, isBinary) {
	  this[kWebSocket].emit('message', data, isBinary);
	}

	/**
	 * The listener of the `Receiver` `'ping'` event.
	 *
	 * @param {Buffer} data The data included in the ping frame
	 * @private
	 */
	function receiverOnPing(data) {
	  const websocket = this[kWebSocket];

	  if (websocket._autoPong) websocket.pong(data, !this._isServer, NOOP);
	  websocket.emit('ping', data);
	}

	/**
	 * The listener of the `Receiver` `'pong'` event.
	 *
	 * @param {Buffer} data The data included in the pong frame
	 * @private
	 */
	function receiverOnPong(data) {
	  this[kWebSocket].emit('pong', data);
	}

	/**
	 * Resume a readable stream
	 *
	 * @param {Readable} stream The readable stream
	 * @private
	 */
	function resume(stream) {
	  stream.resume();
	}

	/**
	 * The `Sender` error event handler.
	 *
	 * @param {Error} The error
	 * @private
	 */
	function senderOnError(err) {
	  const websocket = this[kWebSocket];

	  if (websocket.readyState === WebSocket.CLOSED) return;
	  if (websocket.readyState === WebSocket.OPEN) {
	    websocket._readyState = WebSocket.CLOSING;
	    setCloseTimer(websocket);
	  }

	  //
	  // `socket.end()` is used instead of `socket.destroy()` to allow the other
	  // peer to finish sending queued data. There is no need to set a timer here
	  // because `CLOSING` means that it is already set or not needed.
	  //
	  this._socket.end();

	  if (!websocket._errorEmitted) {
	    websocket._errorEmitted = true;
	    websocket.emit('error', err);
	  }
	}

	/**
	 * Set a timer to destroy the underlying raw socket of a WebSocket.
	 *
	 * @param {WebSocket} websocket The WebSocket instance
	 * @private
	 */
	function setCloseTimer(websocket) {
	  websocket._closeTimer = setTimeout(
	    websocket._socket.destroy.bind(websocket._socket),
	    closeTimeout
	  );
	}

	/**
	 * The listener of the socket `'close'` event.
	 *
	 * @private
	 */
	function socketOnClose() {
	  const websocket = this[kWebSocket];

	  this.removeListener('close', socketOnClose);
	  this.removeListener('data', socketOnData);
	  this.removeListener('end', socketOnEnd);

	  websocket._readyState = WebSocket.CLOSING;

	  let chunk;

	  //
	  // The close frame might not have been received or the `'end'` event emitted,
	  // for example, if the socket was destroyed due to an error. Ensure that the
	  // `receiver` stream is closed after writing any remaining buffered data to
	  // it. If the readable side of the socket is in flowing mode then there is no
	  // buffered data as everything has been already written and `readable.read()`
	  // will return `null`. If instead, the socket is paused, any possible buffered
	  // data will be read as a single chunk.
	  //
	  if (
	    !this._readableState.endEmitted &&
	    !websocket._closeFrameReceived &&
	    !websocket._receiver._writableState.errorEmitted &&
	    (chunk = websocket._socket.read()) !== null
	  ) {
	    websocket._receiver.write(chunk);
	  }

	  websocket._receiver.end();

	  this[kWebSocket] = undefined;

	  clearTimeout(websocket._closeTimer);

	  if (
	    websocket._receiver._writableState.finished ||
	    websocket._receiver._writableState.errorEmitted
	  ) {
	    websocket.emitClose();
	  } else {
	    websocket._receiver.on('error', receiverOnFinish);
	    websocket._receiver.on('finish', receiverOnFinish);
	  }
	}

	/**
	 * The listener of the socket `'data'` event.
	 *
	 * @param {Buffer} chunk A chunk of data
	 * @private
	 */
	function socketOnData(chunk) {
	  if (!this[kWebSocket]._receiver.write(chunk)) {
	    this.pause();
	  }
	}

	/**
	 * The listener of the socket `'end'` event.
	 *
	 * @private
	 */
	function socketOnEnd() {
	  const websocket = this[kWebSocket];

	  websocket._readyState = WebSocket.CLOSING;
	  websocket._receiver.end();
	  this.end();
	}

	/**
	 * The listener of the socket `'error'` event.
	 *
	 * @private
	 */
	function socketOnError() {
	  const websocket = this[kWebSocket];

	  this.removeListener('error', socketOnError);
	  this.on('error', NOOP);

	  if (websocket) {
	    websocket._readyState = WebSocket.CLOSING;
	    this.destroy();
	  }
	}
	return websocket;
}

var stream;
var hasRequiredStream;

function requireStream () {
	if (hasRequiredStream) return stream;
	hasRequiredStream = 1;

	const { Duplex } = require$$0$h;

	/**
	 * Emits the `'close'` event on a stream.
	 *
	 * @param {Duplex} stream The stream.
	 * @private
	 */
	function emitClose(stream) {
	  stream.emit('close');
	}

	/**
	 * The listener of the `'end'` event.
	 *
	 * @private
	 */
	function duplexOnEnd() {
	  if (!this.destroyed && this._writableState.finished) {
	    this.destroy();
	  }
	}

	/**
	 * The listener of the `'error'` event.
	 *
	 * @param {Error} err The error
	 * @private
	 */
	function duplexOnError(err) {
	  this.removeListener('error', duplexOnError);
	  this.destroy();
	  if (this.listenerCount('error') === 0) {
	    // Do not suppress the throwing behavior.
	    this.emit('error', err);
	  }
	}

	/**
	 * Wraps a `WebSocket` in a duplex stream.
	 *
	 * @param {WebSocket} ws The `WebSocket` to wrap
	 * @param {Object} [options] The options for the `Duplex` constructor
	 * @return {Duplex} The duplex stream
	 * @public
	 */
	function createWebSocketStream(ws, options) {
	  let terminateOnDestroy = true;

	  const duplex = new Duplex({
	    ...options,
	    autoDestroy: false,
	    emitClose: false,
	    objectMode: false,
	    writableObjectMode: false
	  });

	  ws.on('message', function message(msg, isBinary) {
	    const data =
	      !isBinary && duplex._readableState.objectMode ? msg.toString() : msg;

	    if (!duplex.push(data)) ws.pause();
	  });

	  ws.once('error', function error(err) {
	    if (duplex.destroyed) return;

	    // Prevent `ws.terminate()` from being called by `duplex._destroy()`.
	    //
	    // - If the `'error'` event is emitted before the `'open'` event, then
	    //   `ws.terminate()` is a noop as no socket is assigned.
	    // - Otherwise, the error is re-emitted by the listener of the `'error'`
	    //   event of the `Receiver` object. The listener already closes the
	    //   connection by calling `ws.close()`. This allows a close frame to be
	    //   sent to the other peer. If `ws.terminate()` is called right after this,
	    //   then the close frame might not be sent.
	    terminateOnDestroy = false;
	    duplex.destroy(err);
	  });

	  ws.once('close', function close() {
	    if (duplex.destroyed) return;

	    duplex.push(null);
	  });

	  duplex._destroy = function (err, callback) {
	    if (ws.readyState === ws.CLOSED) {
	      callback(err);
	      process.nextTick(emitClose, duplex);
	      return;
	    }

	    let called = false;

	    ws.once('error', function error(err) {
	      called = true;
	      callback(err);
	    });

	    ws.once('close', function close() {
	      if (!called) callback(err);
	      process.nextTick(emitClose, duplex);
	    });

	    if (terminateOnDestroy) ws.terminate();
	  };

	  duplex._final = function (callback) {
	    if (ws.readyState === ws.CONNECTING) {
	      ws.once('open', function open() {
	        duplex._final(callback);
	      });
	      return;
	    }

	    // If the value of the `_socket` property is `null` it means that `ws` is a
	    // client websocket and the handshake failed. In fact, when this happens, a
	    // socket is never assigned to the websocket. Wait for the `'error'` event
	    // that will be emitted by the websocket.
	    if (ws._socket === null) return;

	    if (ws._socket._writableState.finished) {
	      callback();
	      if (duplex._readableState.endEmitted) duplex.destroy();
	    } else {
	      ws._socket.once('finish', function finish() {
	        // `duplex` is not destroyed here because the `'end'` event will be
	        // emitted on `duplex` after this `'finish'` event. The EOF signaling
	        // `null` chunk is, in fact, pushed when the websocket emits `'close'`.
	        callback();
	      });
	      ws.close();
	    }
	  };

	  duplex._read = function () {
	    if (ws.isPaused) ws.resume();
	  };

	  duplex._write = function (chunk, encoding, callback) {
	    if (ws.readyState === ws.CONNECTING) {
	      ws.once('open', function open() {
	        duplex._write(chunk, encoding, callback);
	      });
	      return;
	    }

	    ws.send(chunk, callback);
	  };

	  duplex.on('end', duplexOnEnd);
	  duplex.on('error', duplexOnError);
	  return duplex;
	}

	stream = createWebSocketStream;
	return stream;
}

var subprotocol;
var hasRequiredSubprotocol;

function requireSubprotocol () {
	if (hasRequiredSubprotocol) return subprotocol;
	hasRequiredSubprotocol = 1;

	const { tokenChars } = requireValidation();

	/**
	 * Parses the `Sec-WebSocket-Protocol` header into a set of subprotocol names.
	 *
	 * @param {String} header The field value of the header
	 * @return {Set} The subprotocol names
	 * @public
	 */
	function parse(header) {
	  const protocols = new Set();
	  let start = -1;
	  let end = -1;
	  let i = 0;

	  for (i; i < header.length; i++) {
	    const code = header.charCodeAt(i);

	    if (end === -1 && tokenChars[code] === 1) {
	      if (start === -1) start = i;
	    } else if (
	      i !== 0 &&
	      (code === 0x20 /* ' ' */ || code === 0x09) /* '\t' */
	    ) {
	      if (end === -1 && start !== -1) end = i;
	    } else if (code === 0x2c /* ',' */) {
	      if (start === -1) {
	        throw new SyntaxError(`Unexpected character at index ${i}`);
	      }

	      if (end === -1) end = i;

	      const protocol = header.slice(start, end);

	      if (protocols.has(protocol)) {
	        throw new SyntaxError(`The "${protocol}" subprotocol is duplicated`);
	      }

	      protocols.add(protocol);
	      start = end = -1;
	    } else {
	      throw new SyntaxError(`Unexpected character at index ${i}`);
	    }
	  }

	  if (start === -1 || end !== -1) {
	    throw new SyntaxError('Unexpected end of input');
	  }

	  const protocol = header.slice(start, i);

	  if (protocols.has(protocol)) {
	    throw new SyntaxError(`The "${protocol}" subprotocol is duplicated`);
	  }

	  protocols.add(protocol);
	  return protocols;
	}

	subprotocol = { parse };
	return subprotocol;
}

/* eslint no-unused-vars: ["error", { "varsIgnorePattern": "^Duplex$", "caughtErrors": "none" }] */

var websocketServer;
var hasRequiredWebsocketServer;

function requireWebsocketServer () {
	if (hasRequiredWebsocketServer) return websocketServer;
	hasRequiredWebsocketServer = 1;

	const EventEmitter = require$$0$5;
	const http = require$$0$6;
	const { createHash } = require$$1$c;

	const extension = requireExtension();
	const PerMessageDeflate = requirePermessageDeflate();
	const subprotocol = requireSubprotocol();
	const WebSocket = requireWebsocket();
	const { GUID, kWebSocket } = requireConstants();

	const keyRegex = /^[+/0-9A-Za-z]{22}==$/;

	const RUNNING = 0;
	const CLOSING = 1;
	const CLOSED = 2;

	/**
	 * Class representing a WebSocket server.
	 *
	 * @extends EventEmitter
	 */
	class WebSocketServer extends EventEmitter {
	  /**
	   * Create a `WebSocketServer` instance.
	   *
	   * @param {Object} options Configuration options
	   * @param {Boolean} [options.allowSynchronousEvents=true] Specifies whether
	   *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted
	   *     multiple times in the same tick
	   * @param {Boolean} [options.autoPong=true] Specifies whether or not to
	   *     automatically send a pong in response to a ping
	   * @param {Number} [options.backlog=511] The maximum length of the queue of
	   *     pending connections
	   * @param {Boolean} [options.clientTracking=true] Specifies whether or not to
	   *     track clients
	   * @param {Function} [options.handleProtocols] A hook to handle protocols
	   * @param {String} [options.host] The hostname where to bind the server
	   * @param {Number} [options.maxPayload=104857600] The maximum allowed message
	   *     size
	   * @param {Boolean} [options.noServer=false] Enable no server mode
	   * @param {String} [options.path] Accept only connections matching this path
	   * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable
	   *     permessage-deflate
	   * @param {Number} [options.port] The port where to bind the server
	   * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S
	   *     server to use
	   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or
	   *     not to skip UTF-8 validation for text and close messages
	   * @param {Function} [options.verifyClient] A hook to reject connections
	   * @param {Function} [options.WebSocket=WebSocket] Specifies the `WebSocket`
	   *     class to use. It must be the `WebSocket` class or class that extends it
	   * @param {Function} [callback] A listener for the `listening` event
	   */
	  constructor(options, callback) {
	    super();

	    options = {
	      allowSynchronousEvents: true,
	      autoPong: true,
	      maxPayload: 100 * 1024 * 1024,
	      skipUTF8Validation: false,
	      perMessageDeflate: false,
	      handleProtocols: null,
	      clientTracking: true,
	      verifyClient: null,
	      noServer: false,
	      backlog: null, // use default (511 as implemented in net.js)
	      server: null,
	      host: null,
	      path: null,
	      port: null,
	      WebSocket,
	      ...options
	    };

	    if (
	      (options.port == null && !options.server && !options.noServer) ||
	      (options.port != null && (options.server || options.noServer)) ||
	      (options.server && options.noServer)
	    ) {
	      throw new TypeError(
	        'One and only one of the "port", "server", or "noServer" options ' +
	          'must be specified'
	      );
	    }

	    if (options.port != null) {
	      this._server = http.createServer((req, res) => {
	        const body = http.STATUS_CODES[426];

	        res.writeHead(426, {
	          'Content-Length': body.length,
	          'Content-Type': 'text/plain'
	        });
	        res.end(body);
	      });
	      this._server.listen(
	        options.port,
	        options.host,
	        options.backlog,
	        callback
	      );
	    } else if (options.server) {
	      this._server = options.server;
	    }

	    if (this._server) {
	      const emitConnection = this.emit.bind(this, 'connection');

	      this._removeListeners = addListeners(this._server, {
	        listening: this.emit.bind(this, 'listening'),
	        error: this.emit.bind(this, 'error'),
	        upgrade: (req, socket, head) => {
	          this.handleUpgrade(req, socket, head, emitConnection);
	        }
	      });
	    }

	    if (options.perMessageDeflate === true) options.perMessageDeflate = {};
	    if (options.clientTracking) {
	      this.clients = new Set();
	      this._shouldEmitClose = false;
	    }

	    this.options = options;
	    this._state = RUNNING;
	  }

	  /**
	   * Returns the bound address, the address family name, and port of the server
	   * as reported by the operating system if listening on an IP socket.
	   * If the server is listening on a pipe or UNIX domain socket, the name is
	   * returned as a string.
	   *
	   * @return {(Object|String|null)} The address of the server
	   * @public
	   */
	  address() {
	    if (this.options.noServer) {
	      throw new Error('The server is operating in "noServer" mode');
	    }

	    if (!this._server) return null;
	    return this._server.address();
	  }

	  /**
	   * Stop the server from accepting new connections and emit the `'close'` event
	   * when all existing connections are closed.
	   *
	   * @param {Function} [cb] A one-time listener for the `'close'` event
	   * @public
	   */
	  close(cb) {
	    if (this._state === CLOSED) {
	      if (cb) {
	        this.once('close', () => {
	          cb(new Error('The server is not running'));
	        });
	      }

	      process.nextTick(emitClose, this);
	      return;
	    }

	    if (cb) this.once('close', cb);

	    if (this._state === CLOSING) return;
	    this._state = CLOSING;

	    if (this.options.noServer || this.options.server) {
	      if (this._server) {
	        this._removeListeners();
	        this._removeListeners = this._server = null;
	      }

	      if (this.clients) {
	        if (!this.clients.size) {
	          process.nextTick(emitClose, this);
	        } else {
	          this._shouldEmitClose = true;
	        }
	      } else {
	        process.nextTick(emitClose, this);
	      }
	    } else {
	      const server = this._server;

	      this._removeListeners();
	      this._removeListeners = this._server = null;

	      //
	      // The HTTP/S server was created internally. Close it, and rely on its
	      // `'close'` event.
	      //
	      server.close(() => {
	        emitClose(this);
	      });
	    }
	  }

	  /**
	   * See if a given request should be handled by this server instance.
	   *
	   * @param {http.IncomingMessage} req Request object to inspect
	   * @return {Boolean} `true` if the request is valid, else `false`
	   * @public
	   */
	  shouldHandle(req) {
	    if (this.options.path) {
	      const index = req.url.indexOf('?');
	      const pathname = index !== -1 ? req.url.slice(0, index) : req.url;

	      if (pathname !== this.options.path) return false;
	    }

	    return true;
	  }

	  /**
	   * Handle a HTTP Upgrade request.
	   *
	   * @param {http.IncomingMessage} req The request object
	   * @param {Duplex} socket The network socket between the server and client
	   * @param {Buffer} head The first packet of the upgraded stream
	   * @param {Function} cb Callback
	   * @public
	   */
	  handleUpgrade(req, socket, head, cb) {
	    socket.on('error', socketOnError);

	    const key = req.headers['sec-websocket-key'];
	    const upgrade = req.headers.upgrade;
	    const version = +req.headers['sec-websocket-version'];

	    if (req.method !== 'GET') {
	      const message = 'Invalid HTTP method';
	      abortHandshakeOrEmitwsClientError(this, req, socket, 405, message);
	      return;
	    }

	    if (upgrade === undefined || upgrade.toLowerCase() !== 'websocket') {
	      const message = 'Invalid Upgrade header';
	      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);
	      return;
	    }

	    if (key === undefined || !keyRegex.test(key)) {
	      const message = 'Missing or invalid Sec-WebSocket-Key header';
	      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);
	      return;
	    }

	    if (version !== 8 && version !== 13) {
	      const message = 'Missing or invalid Sec-WebSocket-Version header';
	      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);
	      return;
	    }

	    if (!this.shouldHandle(req)) {
	      abortHandshake(socket, 400);
	      return;
	    }

	    const secWebSocketProtocol = req.headers['sec-websocket-protocol'];
	    let protocols = new Set();

	    if (secWebSocketProtocol !== undefined) {
	      try {
	        protocols = subprotocol.parse(secWebSocketProtocol);
	      } catch (err) {
	        const message = 'Invalid Sec-WebSocket-Protocol header';
	        abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);
	        return;
	      }
	    }

	    const secWebSocketExtensions = req.headers['sec-websocket-extensions'];
	    const extensions = {};

	    if (
	      this.options.perMessageDeflate &&
	      secWebSocketExtensions !== undefined
	    ) {
	      const perMessageDeflate = new PerMessageDeflate(
	        this.options.perMessageDeflate,
	        true,
	        this.options.maxPayload
	      );

	      try {
	        const offers = extension.parse(secWebSocketExtensions);

	        if (offers[PerMessageDeflate.extensionName]) {
	          perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);
	          extensions[PerMessageDeflate.extensionName] = perMessageDeflate;
	        }
	      } catch (err) {
	        const message =
	          'Invalid or unacceptable Sec-WebSocket-Extensions header';
	        abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);
	        return;
	      }
	    }

	    //
	    // Optionally call external client verification handler.
	    //
	    if (this.options.verifyClient) {
	      const info = {
	        origin:
	          req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],
	        secure: !!(req.socket.authorized || req.socket.encrypted),
	        req
	      };

	      if (this.options.verifyClient.length === 2) {
	        this.options.verifyClient(info, (verified, code, message, headers) => {
	          if (!verified) {
	            return abortHandshake(socket, code || 401, message, headers);
	          }

	          this.completeUpgrade(
	            extensions,
	            key,
	            protocols,
	            req,
	            socket,
	            head,
	            cb
	          );
	        });
	        return;
	      }

	      if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);
	    }

	    this.completeUpgrade(extensions, key, protocols, req, socket, head, cb);
	  }

	  /**
	   * Upgrade the connection to WebSocket.
	   *
	   * @param {Object} extensions The accepted extensions
	   * @param {String} key The value of the `Sec-WebSocket-Key` header
	   * @param {Set} protocols The subprotocols
	   * @param {http.IncomingMessage} req The request object
	   * @param {Duplex} socket The network socket between the server and client
	   * @param {Buffer} head The first packet of the upgraded stream
	   * @param {Function} cb Callback
	   * @throws {Error} If called more than once with the same socket
	   * @private
	   */
	  completeUpgrade(extensions, key, protocols, req, socket, head, cb) {
	    //
	    // Destroy the socket if the client has already sent a FIN packet.
	    //
	    if (!socket.readable || !socket.writable) return socket.destroy();

	    if (socket[kWebSocket]) {
	      throw new Error(
	        'server.handleUpgrade() was called more than once with the same ' +
	          'socket, possibly due to a misconfiguration'
	      );
	    }

	    if (this._state > RUNNING) return abortHandshake(socket, 503);

	    const digest = createHash('sha1')
	      .update(key + GUID)
	      .digest('base64');

	    const headers = [
	      'HTTP/1.1 101 Switching Protocols',
	      'Upgrade: websocket',
	      'Connection: Upgrade',
	      `Sec-WebSocket-Accept: ${digest}`
	    ];

	    const ws = new this.options.WebSocket(null, undefined, this.options);

	    if (protocols.size) {
	      //
	      // Optionally call external protocol selection handler.
	      //
	      const protocol = this.options.handleProtocols
	        ? this.options.handleProtocols(protocols, req)
	        : protocols.values().next().value;

	      if (protocol) {
	        headers.push(`Sec-WebSocket-Protocol: ${protocol}`);
	        ws._protocol = protocol;
	      }
	    }

	    if (extensions[PerMessageDeflate.extensionName]) {
	      const params = extensions[PerMessageDeflate.extensionName].params;
	      const value = extension.format({
	        [PerMessageDeflate.extensionName]: [params]
	      });
	      headers.push(`Sec-WebSocket-Extensions: ${value}`);
	      ws._extensions = extensions;
	    }

	    //
	    // Allow external modification/inspection of handshake headers.
	    //
	    this.emit('headers', headers, req);

	    socket.write(headers.concat('\r\n').join('\r\n'));
	    socket.removeListener('error', socketOnError);

	    ws.setSocket(socket, head, {
	      allowSynchronousEvents: this.options.allowSynchronousEvents,
	      maxPayload: this.options.maxPayload,
	      skipUTF8Validation: this.options.skipUTF8Validation
	    });

	    if (this.clients) {
	      this.clients.add(ws);
	      ws.on('close', () => {
	        this.clients.delete(ws);

	        if (this._shouldEmitClose && !this.clients.size) {
	          process.nextTick(emitClose, this);
	        }
	      });
	    }

	    cb(ws, req);
	  }
	}

	websocketServer = WebSocketServer;

	/**
	 * Add event listeners on an `EventEmitter` using a map of <event, listener>
	 * pairs.
	 *
	 * @param {EventEmitter} server The event emitter
	 * @param {Object.<String, Function>} map The listeners to add
	 * @return {Function} A function that will remove the added listeners when
	 *     called
	 * @private
	 */
	function addListeners(server, map) {
	  for (const event of Object.keys(map)) server.on(event, map[event]);

	  return function removeListeners() {
	    for (const event of Object.keys(map)) {
	      server.removeListener(event, map[event]);
	    }
	  };
	}

	/**
	 * Emit a `'close'` event on an `EventEmitter`.
	 *
	 * @param {EventEmitter} server The event emitter
	 * @private
	 */
	function emitClose(server) {
	  server._state = CLOSED;
	  server.emit('close');
	}

	/**
	 * Handle socket errors.
	 *
	 * @private
	 */
	function socketOnError() {
	  this.destroy();
	}

	/**
	 * Close the connection when preconditions are not fulfilled.
	 *
	 * @param {Duplex} socket The socket of the upgrade request
	 * @param {Number} code The HTTP response status code
	 * @param {String} [message] The HTTP response body
	 * @param {Object} [headers] Additional HTTP response headers
	 * @private
	 */
	function abortHandshake(socket, code, message, headers) {
	  //
	  // The socket is writable unless the user destroyed or ended it before calling
	  // `server.handleUpgrade()` or in the `verifyClient` function, which is a user
	  // error. Handling this does not make much sense as the worst that can happen
	  // is that some of the data written by the user might be discarded due to the
	  // call to `socket.end()` below, which triggers an `'error'` event that in
	  // turn causes the socket to be destroyed.
	  //
	  message = message || http.STATUS_CODES[code];
	  headers = {
	    Connection: 'close',
	    'Content-Type': 'text/html',
	    'Content-Length': Buffer.byteLength(message),
	    ...headers
	  };

	  socket.once('finish', socket.destroy);

	  socket.end(
	    `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\r\n` +
	      Object.keys(headers)
	        .map((h) => `${h}: ${headers[h]}`)
	        .join('\r\n') +
	      '\r\n\r\n' +
	      message
	  );
	}

	/**
	 * Emit a `'wsClientError'` event on a `WebSocketServer` if there is at least
	 * one listener for it, otherwise call `abortHandshake()`.
	 *
	 * @param {WebSocketServer} server The WebSocket server
	 * @param {http.IncomingMessage} req The request object
	 * @param {Duplex} socket The socket of the upgrade request
	 * @param {Number} code The HTTP response status code
	 * @param {String} message The HTTP response body
	 * @private
	 */
	function abortHandshakeOrEmitwsClientError(server, req, socket, code, message) {
	  if (server.listenerCount('wsClientError')) {
	    const err = new Error(message);
	    Error.captureStackTrace(err, abortHandshakeOrEmitwsClientError);

	    server.emit('wsClientError', err, socket, req);
	  } else {
	    abortHandshake(socket, code, message);
	  }
	}
	return websocketServer;
}

var ws;
var hasRequiredWs;

function requireWs () {
	if (hasRequiredWs) return ws;
	hasRequiredWs = 1;

	const WebSocket = requireWebsocket();

	WebSocket.createWebSocketStream = requireStream();
	WebSocket.Server = requireWebsocketServer();
	WebSocket.Receiver = requireReceiver();
	WebSocket.Sender = requireSender();

	WebSocket.WebSocket = WebSocket;
	WebSocket.WebSocketServer = WebSocket.Server;

	ws = WebSocket;
	return ws;
}

var dist;
var hasRequiredDist;

function requireDist () {
	if (hasRequiredDist) return dist;
	hasRequiredDist = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

	// src/index.ts
	var src_exports = {};
	__export(src_exports, {
	  CloseCodes: () => CloseCodes,
	  CompressionMethod: () => CompressionMethod,
	  DefaultDeviceProperty: () => DefaultDeviceProperty,
	  DefaultWebSocketManagerOptions: () => DefaultWebSocketManagerOptions,
	  Encoding: () => Encoding,
	  ImportantGatewayOpcodes: () => ImportantGatewayOpcodes,
	  SimpleContextFetchingStrategy: () => SimpleContextFetchingStrategy,
	  SimpleIdentifyThrottler: () => SimpleIdentifyThrottler,
	  SimpleShardingStrategy: () => SimpleShardingStrategy,
	  WebSocketManager: () => WebSocketManager,
	  WebSocketShard: () => WebSocketShard,
	  WebSocketShardDestroyRecovery: () => WebSocketShardDestroyRecovery,
	  WebSocketShardEvents: () => WebSocketShardEvents,
	  WebSocketShardStatus: () => WebSocketShardStatus,
	  WorkerBootstrapper: () => WorkerBootstrapper,
	  WorkerContextFetchingStrategy: () => WorkerContextFetchingStrategy,
	  WorkerReceivePayloadOp: () => WorkerReceivePayloadOp,
	  WorkerSendPayloadOp: () => WorkerSendPayloadOp,
	  WorkerShardingStrategy: () => WorkerShardingStrategy,
	  getInitialSendRateLimitState: () => getInitialSendRateLimitState,
	  managerToFetchingStrategyOptions: () => managerToFetchingStrategyOptions,
	  version: () => version
	});
	dist = __toCommonJS(src_exports);

	// src/strategies/context/IContextFetchingStrategy.ts
	async function managerToFetchingStrategyOptions(manager) {
	  const {
	    buildIdentifyThrottler,
	    buildStrategy,
	    retrieveSessionInfo,
	    updateSessionInfo,
	    shardCount,
	    shardIds,
	    rest,
	    ...managerOptions
	  } = manager.options;
	  return {
	    ...managerOptions,
	    gatewayInformation: await manager.fetchGatewayInformation(),
	    shardCount: await manager.getShardCount()
	  };
	}
	__name(managerToFetchingStrategyOptions, "managerToFetchingStrategyOptions");

	// src/strategies/context/SimpleContextFetchingStrategy.ts
	var SimpleContextFetchingStrategy = class _SimpleContextFetchingStrategy {
	  constructor(manager, options) {
	    this.manager = manager;
	    this.options = options;
	  }
	  static {
	    __name(this, "SimpleContextFetchingStrategy");
	  }
	  // This strategy assumes every shard is running under the same process - therefore we need a single
	  // IdentifyThrottler per manager.
	  static throttlerCache = /* @__PURE__ */ new WeakMap();
	  static async ensureThrottler(manager) {
	    const throttler = _SimpleContextFetchingStrategy.throttlerCache.get(manager);
	    if (throttler) {
	      return throttler;
	    }
	    const newThrottler = await manager.options.buildIdentifyThrottler(manager);
	    _SimpleContextFetchingStrategy.throttlerCache.set(manager, newThrottler);
	    return newThrottler;
	  }
	  async retrieveSessionInfo(shardId) {
	    return this.manager.options.retrieveSessionInfo(shardId);
	  }
	  updateSessionInfo(shardId, sessionInfo) {
	    return this.manager.options.updateSessionInfo(shardId, sessionInfo);
	  }
	  async waitForIdentify(shardId, signal) {
	    const throttler = await _SimpleContextFetchingStrategy.ensureThrottler(this.manager);
	    await throttler.waitForIdentify(shardId, signal);
	  }
	};

	// src/strategies/context/WorkerContextFetchingStrategy.ts
	var import_node_worker_threads2 = require$$0$i;
	var import_collection2 = requireDist$6();

	// src/strategies/sharding/WorkerShardingStrategy.ts
	var import_node_events = require$$0$5;
	var import_node_path = path;
	var import_node_worker_threads = require$$0$i;
	var import_collection = requireDist$6();
	var WorkerSendPayloadOp = /* @__PURE__ */ ((WorkerSendPayloadOp2) => {
	  WorkerSendPayloadOp2[WorkerSendPayloadOp2["Connect"] = 0] = "Connect";
	  WorkerSendPayloadOp2[WorkerSendPayloadOp2["Destroy"] = 1] = "Destroy";
	  WorkerSendPayloadOp2[WorkerSendPayloadOp2["Send"] = 2] = "Send";
	  WorkerSendPayloadOp2[WorkerSendPayloadOp2["SessionInfoResponse"] = 3] = "SessionInfoResponse";
	  WorkerSendPayloadOp2[WorkerSendPayloadOp2["ShardIdentifyResponse"] = 4] = "ShardIdentifyResponse";
	  WorkerSendPayloadOp2[WorkerSendPayloadOp2["FetchStatus"] = 5] = "FetchStatus";
	  return WorkerSendPayloadOp2;
	})(WorkerSendPayloadOp || {});
	var WorkerReceivePayloadOp = /* @__PURE__ */ ((WorkerReceivePayloadOp2) => {
	  WorkerReceivePayloadOp2[WorkerReceivePayloadOp2["Connected"] = 0] = "Connected";
	  WorkerReceivePayloadOp2[WorkerReceivePayloadOp2["Destroyed"] = 1] = "Destroyed";
	  WorkerReceivePayloadOp2[WorkerReceivePayloadOp2["Event"] = 2] = "Event";
	  WorkerReceivePayloadOp2[WorkerReceivePayloadOp2["RetrieveSessionInfo"] = 3] = "RetrieveSessionInfo";
	  WorkerReceivePayloadOp2[WorkerReceivePayloadOp2["UpdateSessionInfo"] = 4] = "UpdateSessionInfo";
	  WorkerReceivePayloadOp2[WorkerReceivePayloadOp2["WaitForIdentify"] = 5] = "WaitForIdentify";
	  WorkerReceivePayloadOp2[WorkerReceivePayloadOp2["FetchStatusResponse"] = 6] = "FetchStatusResponse";
	  WorkerReceivePayloadOp2[WorkerReceivePayloadOp2["WorkerReady"] = 7] = "WorkerReady";
	  WorkerReceivePayloadOp2[WorkerReceivePayloadOp2["CancelIdentify"] = 8] = "CancelIdentify";
	  return WorkerReceivePayloadOp2;
	})(WorkerReceivePayloadOp || {});
	var WorkerShardingStrategy = class {
	  static {
	    __name(this, "WorkerShardingStrategy");
	  }
	  manager;
	  options;
	  #workers = [];
	  #workerByShardId = new import_collection.Collection();
	  connectPromises = new import_collection.Collection();
	  destroyPromises = new import_collection.Collection();
	  fetchStatusPromises = new import_collection.Collection();
	  waitForIdentifyControllers = new import_collection.Collection();
	  throttler;
	  constructor(manager, options) {
	    this.manager = manager;
	    this.options = options;
	  }
	  /**
	   * {@inheritDoc IShardingStrategy.spawn}
	   */
	  async spawn(shardIds) {
	    const shardsPerWorker = this.options.shardsPerWorker === "all" ? shardIds.length : this.options.shardsPerWorker;
	    const strategyOptions = await managerToFetchingStrategyOptions(this.manager);
	    const loops = Math.ceil(shardIds.length / shardsPerWorker);
	    const promises = [];
	    for (let idx = 0; idx < loops; idx++) {
	      const slice = shardIds.slice(idx * shardsPerWorker, (idx + 1) * shardsPerWorker);
	      const workerData2 = {
	        ...strategyOptions,
	        shardIds: slice
	      };
	      promises.push(this.setupWorker(workerData2));
	    }
	    await Promise.all(promises);
	  }
	  /**
	   * {@inheritDoc IShardingStrategy.connect}
	   */
	  async connect() {
	    const promises = [];
	    for (const [shardId, worker] of this.#workerByShardId.entries()) {
	      const payload = {
	        op: 0 /* Connect */,
	        shardId
	      };
	      const promise = new Promise((resolve2) => this.connectPromises.set(shardId, resolve2));
	      worker.postMessage(payload);
	      promises.push(promise);
	    }
	    await Promise.all(promises);
	  }
	  /**
	   * {@inheritDoc IShardingStrategy.destroy}
	   */
	  async destroy(options = {}) {
	    const promises = [];
	    for (const [shardId, worker] of this.#workerByShardId.entries()) {
	      const payload = {
	        op: 1 /* Destroy */,
	        shardId,
	        options
	      };
	      promises.push(
	        // eslint-disable-next-line no-promise-executor-return, promise/prefer-await-to-then
	        new Promise((resolve2) => this.destroyPromises.set(shardId, resolve2)).then(async () => worker.terminate())
	      );
	      worker.postMessage(payload);
	    }
	    this.#workers = [];
	    this.#workerByShardId.clear();
	    await Promise.all(promises);
	  }
	  /**
	   * {@inheritDoc IShardingStrategy.send}
	   */
	  send(shardId, data) {
	    const worker = this.#workerByShardId.get(shardId);
	    if (!worker) {
	      throw new Error(`No worker found for shard ${shardId}`);
	    }
	    const payload = {
	      op: 2 /* Send */,
	      shardId,
	      payload: data
	    };
	    worker.postMessage(payload);
	  }
	  /**
	   * {@inheritDoc IShardingStrategy.fetchStatus}
	   */
	  async fetchStatus() {
	    const statuses = new import_collection.Collection();
	    for (const [shardId, worker] of this.#workerByShardId.entries()) {
	      const nonce = Math.random();
	      const payload = {
	        op: 5 /* FetchStatus */,
	        shardId,
	        nonce
	      };
	      const promise = new Promise((resolve2) => this.fetchStatusPromises.set(nonce, resolve2));
	      worker.postMessage(payload);
	      const status = await promise;
	      statuses.set(shardId, status);
	    }
	    return statuses;
	  }
	  async setupWorker(workerData2) {
	    const worker = new import_node_worker_threads.Worker(this.resolveWorkerPath(), { workerData: workerData2 });
	    await (0, import_node_events.once)(worker, "online");
	    await this.waitForWorkerReady(worker);
	    worker.on("error", (err) => {
	      throw err;
	    }).on("messageerror", (err) => {
	      throw err;
	    }).on("message", async (payload) => {
	      if ("op" in payload) {
	        await this.onMessage(worker, payload);
	      } else {
	        await this.options.unknownPayloadHandler?.(payload);
	      }
	    });
	    this.#workers.push(worker);
	    for (const shardId of workerData2.shardIds) {
	      this.#workerByShardId.set(shardId, worker);
	    }
	  }
	  resolveWorkerPath() {
	    const path = this.options.workerPath;
	    if (!path) {
	      return (0, import_node_path.join)(__dirname, "defaultWorker.js");
	    }
	    if ((0, import_node_path.isAbsolute)(path)) {
	      return path;
	    }
	    if (/^\.\.?[/\\]/.test(path)) {
	      return (0, import_node_path.resolve)(path);
	    }
	    try {
	      return require.resolve(path);
	    } catch {
	      return (0, import_node_path.resolve)(path);
	    }
	  }
	  async waitForWorkerReady(worker) {
	    return new Promise((resolve2) => {
	      const handler = /* @__PURE__ */ __name((payload) => {
	        if (payload.op === 7 /* WorkerReady */) {
	          resolve2();
	          worker.off("message", handler);
	        }
	      }, "handler");
	      worker.on("message", handler);
	    });
	  }
	  async onMessage(worker, payload) {
	    switch (payload.op) {
	      case 0 /* Connected */: {
	        this.connectPromises.get(payload.shardId)?.();
	        this.connectPromises.delete(payload.shardId);
	        break;
	      }
	      case 1 /* Destroyed */: {
	        this.destroyPromises.get(payload.shardId)?.();
	        this.destroyPromises.delete(payload.shardId);
	        break;
	      }
	      case 2 /* Event */: {
	        this.manager.emit(payload.event, { ...payload.data, shardId: payload.shardId });
	        break;
	      }
	      case 3 /* RetrieveSessionInfo */: {
	        const session = await this.manager.options.retrieveSessionInfo(payload.shardId);
	        const response = {
	          op: 3 /* SessionInfoResponse */,
	          nonce: payload.nonce,
	          session
	        };
	        worker.postMessage(response);
	        break;
	      }
	      case 4 /* UpdateSessionInfo */: {
	        await this.manager.options.updateSessionInfo(payload.shardId, payload.session);
	        break;
	      }
	      case 5 /* WaitForIdentify */: {
	        const throttler = await this.ensureThrottler();
	        try {
	          const controller = new AbortController();
	          this.waitForIdentifyControllers.set(payload.nonce, controller);
	          await throttler.waitForIdentify(payload.shardId, controller.signal);
	        } catch {
	          return;
	        }
	        const response = {
	          op: 4 /* ShardIdentifyResponse */,
	          nonce: payload.nonce,
	          ok: true
	        };
	        worker.postMessage(response);
	        break;
	      }
	      case 6 /* FetchStatusResponse */: {
	        this.fetchStatusPromises.get(payload.nonce)?.(payload.status);
	        this.fetchStatusPromises.delete(payload.nonce);
	        break;
	      }
	      case 7 /* WorkerReady */: {
	        break;
	      }
	      case 8 /* CancelIdentify */: {
	        this.waitForIdentifyControllers.get(payload.nonce)?.abort();
	        this.waitForIdentifyControllers.delete(payload.nonce);
	        const response = {
	          op: 4 /* ShardIdentifyResponse */,
	          nonce: payload.nonce,
	          ok: false
	        };
	        worker.postMessage(response);
	        break;
	      }
	      default: {
	        await this.options.unknownPayloadHandler?.(payload);
	        break;
	      }
	    }
	  }
	  async ensureThrottler() {
	    this.throttler ??= await this.manager.options.buildIdentifyThrottler(this.manager);
	    return this.throttler;
	  }
	};

	// src/strategies/context/WorkerContextFetchingStrategy.ts
	var WorkerContextFetchingStrategy = class {
	  constructor(options) {
	    this.options = options;
	    if (import_node_worker_threads2.isMainThread) {
	      throw new Error("Cannot instantiate WorkerContextFetchingStrategy on the main thread");
	    }
	    import_node_worker_threads2.parentPort.on("message", (payload) => {
	      if (payload.op === 3 /* SessionInfoResponse */) {
	        this.sessionPromises.get(payload.nonce)?.(payload.session);
	        this.sessionPromises.delete(payload.nonce);
	      }
	      if (payload.op === 4 /* ShardIdentifyResponse */) {
	        const promise = this.waitForIdentifyPromises.get(payload.nonce);
	        if (payload.ok) {
	          promise?.resolve();
	        } else {
	          promise?.reject(promise.signal.reason);
	        }
	        this.waitForIdentifyPromises.delete(payload.nonce);
	      }
	    });
	  }
	  static {
	    __name(this, "WorkerContextFetchingStrategy");
	  }
	  sessionPromises = new import_collection2.Collection();
	  waitForIdentifyPromises = new import_collection2.Collection();
	  async retrieveSessionInfo(shardId) {
	    const nonce = Math.random();
	    const payload = {
	      op: 3 /* RetrieveSessionInfo */,
	      shardId,
	      nonce
	    };
	    const promise = new Promise((resolve2) => this.sessionPromises.set(nonce, resolve2));
	    import_node_worker_threads2.parentPort.postMessage(payload);
	    return promise;
	  }
	  updateSessionInfo(shardId, sessionInfo) {
	    const payload = {
	      op: 4 /* UpdateSessionInfo */,
	      shardId,
	      session: sessionInfo
	    };
	    import_node_worker_threads2.parentPort.postMessage(payload);
	  }
	  async waitForIdentify(shardId, signal) {
	    const nonce = Math.random();
	    const payload = {
	      op: 5 /* WaitForIdentify */,
	      nonce,
	      shardId
	    };
	    const promise = new Promise(
	      (resolve2, reject) => (
	        // eslint-disable-next-line no-promise-executor-return
	        this.waitForIdentifyPromises.set(nonce, { signal, resolve: resolve2, reject })
	      )
	    );
	    import_node_worker_threads2.parentPort.postMessage(payload);
	    const listener = /* @__PURE__ */ __name(() => {
	      const payload2 = {
	        op: 8 /* CancelIdentify */,
	        nonce
	      };
	      import_node_worker_threads2.parentPort.postMessage(payload2);
	    }, "listener");
	    signal.addEventListener("abort", listener);
	    try {
	      await promise;
	    } finally {
	      signal.removeEventListener("abort", listener);
	    }
	  }
	};

	// src/strategies/sharding/SimpleShardingStrategy.ts
	var import_collection6 = requireDist$6();

	// src/ws/WebSocketShard.ts
	var import_node_buffer = require$$0$g;
	var import_node_events2 = require$$0$5;
	var import_node_timers = require$$4$3;
	var import_promises2 = require$$6;
	var import_node_url = require$$7;
	var import_node_util = require$$8$1;
	var import_node_zlib = require$$0$f;
	var import_collection5 = requireDist$6();
	var import_util2 = requireDist$7();
	var import_async_queue2 = /*@__PURE__*/ requireCjs$1();
	var import_async_event_emitter = /*@__PURE__*/ requireDist$5();
	var import_v102 = requireV10();
	var import_ws = requireWs();

	// src/utils/constants.ts
	var import_node_process = __toESM(require$$15);
	var import_collection4 = requireDist$6();
	var import_util = requireDist$7();
	var import_v10 = requireV10();

	// src/throttling/SimpleIdentifyThrottler.ts
	var import_promises = require$$6;
	var import_collection3 = requireDist$6();
	var import_async_queue = /*@__PURE__*/ requireCjs$1();
	var SimpleIdentifyThrottler = class {
	  constructor(maxConcurrency) {
	    this.maxConcurrency = maxConcurrency;
	  }
	  static {
	    __name(this, "SimpleIdentifyThrottler");
	  }
	  states = new import_collection3.Collection();
	  /**
	   * {@inheritDoc IIdentifyThrottler.waitForIdentify}
	   */
	  async waitForIdentify(shardId, signal) {
	    const key = shardId % this.maxConcurrency;
	    const state = this.states.ensure(key, () => {
	      return {
	        queue: new import_async_queue.AsyncQueue(),
	        resetsAt: Number.POSITIVE_INFINITY
	      };
	    });
	    await state.queue.wait({ signal });
	    try {
	      const diff = state.resetsAt - Date.now();
	      if (diff <= 5e3) {
	        const time = diff + Math.random() * 1500;
	        await (0, import_promises.setTimeout)(time);
	      }
	      state.resetsAt = Date.now() + 5e3;
	    } finally {
	      state.queue.shift();
	    }
	  }
	};

	// src/utils/constants.ts
	var Encoding = /* @__PURE__ */ ((Encoding2) => {
	  Encoding2["JSON"] = "json";
	  return Encoding2;
	})(Encoding || {});
	var CompressionMethod = /* @__PURE__ */ ((CompressionMethod2) => {
	  CompressionMethod2["ZlibStream"] = "zlib-stream";
	  return CompressionMethod2;
	})(CompressionMethod || {});
	var DefaultDeviceProperty = `@discordjs/ws 1.1.1`;
	var getDefaultSessionStore = (0, import_util.lazy)(() => new import_collection4.Collection());
	var DefaultWebSocketManagerOptions = {
	  async buildIdentifyThrottler(manager) {
	    const info = await manager.fetchGatewayInformation();
	    return new SimpleIdentifyThrottler(info.session_start_limit.max_concurrency);
	  },
	  buildStrategy: (manager) => new SimpleShardingStrategy(manager),
	  shardCount: null,
	  shardIds: null,
	  largeThreshold: null,
	  initialPresence: null,
	  identifyProperties: {
	    browser: DefaultDeviceProperty,
	    device: DefaultDeviceProperty,
	    os: import_node_process.default.platform
	  },
	  version: import_v10.APIVersion,
	  encoding: "json" /* JSON */,
	  compression: null,
	  retrieveSessionInfo(shardId) {
	    const store = getDefaultSessionStore();
	    return store.get(shardId) ?? null;
	  },
	  updateSessionInfo(shardId, info) {
	    const store = getDefaultSessionStore();
	    if (info) {
	      store.set(shardId, info);
	    } else {
	      store.delete(shardId);
	    }
	  },
	  handshakeTimeout: 3e4,
	  helloTimeout: 6e4,
	  readyTimeout: 15e3
	};
	var ImportantGatewayOpcodes = /* @__PURE__ */ new Set([
	  import_v10.GatewayOpcodes.Heartbeat,
	  import_v10.GatewayOpcodes.Identify,
	  import_v10.GatewayOpcodes.Resume
	]);
	function getInitialSendRateLimitState() {
	  return {
	    sent: 0,
	    resetAt: Date.now() + 6e4
	  };
	}
	__name(getInitialSendRateLimitState, "getInitialSendRateLimitState");

	// src/ws/WebSocketShard.ts
	var getZlibSync = (0, import_util2.lazy)(async () => import('zlib-sync').then((mod) => mod.default).catch(() => null));
	var WebSocketShardEvents = /* @__PURE__ */ ((WebSocketShardEvents2) => {
	  WebSocketShardEvents2["Closed"] = "closed";
	  WebSocketShardEvents2["Debug"] = "debug";
	  WebSocketShardEvents2["Dispatch"] = "dispatch";
	  WebSocketShardEvents2["Error"] = "error";
	  WebSocketShardEvents2["HeartbeatComplete"] = "heartbeat";
	  WebSocketShardEvents2["Hello"] = "hello";
	  WebSocketShardEvents2["Ready"] = "ready";
	  WebSocketShardEvents2["Resumed"] = "resumed";
	  return WebSocketShardEvents2;
	})(WebSocketShardEvents || {});
	var WebSocketShardStatus = /* @__PURE__ */ ((WebSocketShardStatus2) => {
	  WebSocketShardStatus2[WebSocketShardStatus2["Idle"] = 0] = "Idle";
	  WebSocketShardStatus2[WebSocketShardStatus2["Connecting"] = 1] = "Connecting";
	  WebSocketShardStatus2[WebSocketShardStatus2["Resuming"] = 2] = "Resuming";
	  WebSocketShardStatus2[WebSocketShardStatus2["Ready"] = 3] = "Ready";
	  return WebSocketShardStatus2;
	})(WebSocketShardStatus || {});
	var WebSocketShardDestroyRecovery = /* @__PURE__ */ ((WebSocketShardDestroyRecovery2) => {
	  WebSocketShardDestroyRecovery2[WebSocketShardDestroyRecovery2["Reconnect"] = 0] = "Reconnect";
	  WebSocketShardDestroyRecovery2[WebSocketShardDestroyRecovery2["Resume"] = 1] = "Resume";
	  return WebSocketShardDestroyRecovery2;
	})(WebSocketShardDestroyRecovery || {});
	var CloseCodes = /* @__PURE__ */ ((CloseCodes2) => {
	  CloseCodes2[CloseCodes2["Normal"] = 1e3] = "Normal";
	  CloseCodes2[CloseCodes2["Resuming"] = 4200] = "Resuming";
	  return CloseCodes2;
	})(CloseCodes || {});
	var WebSocketConstructor = (0, import_util2.shouldUseGlobalFetchAndWebSocket)() ? globalThis.WebSocket : import_ws.WebSocket;
	var WebSocketShard = class extends import_async_event_emitter.AsyncEventEmitter {
	  static {
	    __name(this, "WebSocketShard");
	  }
	  connection = null;
	  useIdentifyCompress = false;
	  inflate = null;
	  textDecoder = new import_node_util.TextDecoder();
	  replayedEvents = 0;
	  isAck = true;
	  sendRateLimitState = getInitialSendRateLimitState();
	  initialHeartbeatTimeoutController = null;
	  heartbeatInterval = null;
	  lastHeartbeatAt = -1;
	  // Indicates whether the shard has already resolved its original connect() call
	  initialConnectResolved = false;
	  // Indicates if we failed to connect to the ws url (ECONNREFUSED/ECONNRESET)
	  failedToConnectDueToNetworkError = false;
	  sendQueue = new import_async_queue2.AsyncQueue();
	  timeoutAbortControllers = new import_collection5.Collection();
	  strategy;
	  id;
	  #status = 0 /* Idle */;
	  get status() {
	    return this.#status;
	  }
	  constructor(strategy, id) {
	    super();
	    this.strategy = strategy;
	    this.id = id;
	  }
	  async connect() {
	    const controller = new AbortController();
	    let promise;
	    if (!this.initialConnectResolved) {
	      promise = Promise.race([
	        (0, import_node_events2.once)(this, "ready" /* Ready */, { signal: controller.signal }),
	        (0, import_node_events2.once)(this, "resumed" /* Resumed */, { signal: controller.signal })
	      ]);
	    }
	    void this.internalConnect();
	    try {
	      await promise;
	    } catch ({ error }) {
	      throw error;
	    } finally {
	      controller.abort();
	    }
	    this.initialConnectResolved = true;
	  }
	  async internalConnect() {
	    if (this.#status !== 0 /* Idle */) {
	      throw new Error("Tried to connect a shard that wasn't idle");
	    }
	    const { version: version2, encoding, compression } = this.strategy.options;
	    const params = new import_node_url.URLSearchParams({ v: version2, encoding });
	    if (compression) {
	      const zlib = await getZlibSync();
	      if (zlib) {
	        params.append("compress", compression);
	        this.inflate = new zlib.Inflate({
	          chunkSize: 65535,
	          to: "string"
	        });
	      } else if (!this.useIdentifyCompress) {
	        this.useIdentifyCompress = true;
	        console.warn(
	          "WebSocketShard: Compression is enabled but zlib-sync is not installed, falling back to identify compress"
	        );
	      }
	    }
	    const session = await this.strategy.retrieveSessionInfo(this.id);
	    const url = `${session?.resumeURL ?? this.strategy.options.gatewayInformation.url}?${params.toString()}`;
	    this.debug([`Connecting to ${url}`]);
	    const connection = new WebSocketConstructor(url, [], {
	      handshakeTimeout: this.strategy.options.handshakeTimeout ?? void 0
	    });
	    connection.binaryType = "arraybuffer";
	    connection.onmessage = (event) => {
	      void this.onMessage(event.data, event.data instanceof ArrayBuffer);
	    };
	    connection.onerror = (event) => {
	      this.onError(event.error);
	    };
	    connection.onclose = (event) => {
	      void this.onClose(event.code);
	    };
	    connection.onopen = () => {
	      this.sendRateLimitState = getInitialSendRateLimitState();
	    };
	    this.connection = connection;
	    this.#status = 1 /* Connecting */;
	    const { ok } = await this.waitForEvent("hello" /* Hello */, this.strategy.options.helloTimeout);
	    if (!ok) {
	      return;
	    }
	    if (session?.shardCount === this.strategy.options.shardCount) {
	      await this.resume(session);
	    } else {
	      await this.identify();
	    }
	  }
	  async destroy(options = {}) {
	    if (this.#status === 0 /* Idle */) {
	      this.debug(["Tried to destroy a shard that was idle"]);
	      return;
	    }
	    if (!options.code) {
	      options.code = options.recover === 1 /* Resume */ ? 4200 /* Resuming */ : 1e3 /* Normal */;
	    }
	    this.debug([
	      "Destroying shard",
	      `Reason: ${options.reason ?? "none"}`,
	      `Code: ${options.code}`,
	      `Recover: ${options.recover === void 0 ? "none" : WebSocketShardDestroyRecovery[options.recover]}`
	    ]);
	    this.isAck = true;
	    if (this.heartbeatInterval) {
	      (0, import_node_timers.clearInterval)(this.heartbeatInterval);
	    }
	    if (this.initialHeartbeatTimeoutController) {
	      this.initialHeartbeatTimeoutController.abort();
	      this.initialHeartbeatTimeoutController = null;
	    }
	    this.lastHeartbeatAt = -1;
	    for (const controller of this.timeoutAbortControllers.values()) {
	      controller.abort();
	    }
	    this.timeoutAbortControllers.clear();
	    this.failedToConnectDueToNetworkError = false;
	    if (options.recover !== 1 /* Resume */) {
	      await this.strategy.updateSessionInfo(this.id, null);
	    }
	    if (this.connection) {
	      this.connection.onmessage = null;
	      this.connection.onclose = null;
	      const shouldClose = this.connection.readyState === import_ws.WebSocket.OPEN;
	      this.debug([
	        "Connection status during destroy",
	        `Needs closing: ${shouldClose}`,
	        `Ready state: ${this.connection.readyState}`
	      ]);
	      if (shouldClose) {
	        let outerResolve;
	        const promise = new Promise((resolve2) => {
	          outerResolve = resolve2;
	        });
	        this.connection.onclose = outerResolve;
	        this.connection.close(options.code, options.reason);
	        await promise;
	        this.emit("closed" /* Closed */, { code: options.code });
	      }
	      this.connection.onerror = null;
	    } else {
	      this.debug(["Destroying a shard that has no connection; please open an issue on GitHub"]);
	    }
	    this.#status = 0 /* Idle */;
	    if (options.recover !== void 0) {
	      await (0, import_promises2.setTimeout)(500);
	      return this.internalConnect();
	    }
	  }
	  async waitForEvent(event, timeoutDuration) {
	    this.debug([`Waiting for event ${event} ${timeoutDuration ? `for ${timeoutDuration}ms` : "indefinitely"}`]);
	    const timeoutController = new AbortController();
	    const timeout = timeoutDuration ? (0, import_node_timers.setTimeout)(() => timeoutController.abort(), timeoutDuration).unref() : null;
	    this.timeoutAbortControllers.set(event, timeoutController);
	    const closeController = new AbortController();
	    try {
	      const closed = await Promise.race([
	        (0, import_node_events2.once)(this, event, { signal: timeoutController.signal }).then(() => false),
	        (0, import_node_events2.once)(this, "closed" /* Closed */, { signal: closeController.signal }).then(() => true)
	      ]);
	      return { ok: !closed };
	    } catch {
	      void this.destroy({
	        code: 1e3 /* Normal */,
	        reason: "Something timed out or went wrong while waiting for an event",
	        recover: 0 /* Reconnect */
	      });
	      return { ok: false };
	    } finally {
	      if (timeout) {
	        (0, import_node_timers.clearTimeout)(timeout);
	      }
	      this.timeoutAbortControllers.delete(event);
	      if (!closeController.signal.aborted) {
	        closeController.abort();
	      }
	    }
	  }
	  async send(payload) {
	    if (!this.connection) {
	      throw new Error("WebSocketShard wasn't connected");
	    }
	    if (ImportantGatewayOpcodes.has(payload.op)) {
	      this.connection.send(JSON.stringify(payload));
	      return;
	    }
	    if (this.#status !== 3 /* Ready */ && !ImportantGatewayOpcodes.has(payload.op)) {
	      this.debug(["Tried to send a non-crucial payload before the shard was ready, waiting"]);
	      try {
	        await (0, import_node_events2.once)(this, "ready" /* Ready */);
	      } catch {
	        return this.send(payload);
	      }
	    }
	    await this.sendQueue.wait();
	    const now = Date.now();
	    if (now >= this.sendRateLimitState.resetAt) {
	      this.sendRateLimitState = getInitialSendRateLimitState();
	    }
	    if (this.sendRateLimitState.sent + 1 >= 115) {
	      const sleepFor = this.sendRateLimitState.resetAt - now + Math.random() * 1500;
	      this.debug([`Was about to hit the send rate limit, sleeping for ${sleepFor}ms`]);
	      const controller = new AbortController();
	      const interrupted = await Promise.race([
	        (0, import_promises2.setTimeout)(sleepFor).then(() => false),
	        (0, import_node_events2.once)(this, "closed" /* Closed */, { signal: controller.signal }).then(() => true)
	      ]);
	      if (interrupted) {
	        this.debug(["Connection closed while waiting for the send rate limit to reset, re-queueing payload"]);
	        this.sendQueue.shift();
	        return this.send(payload);
	      }
	      controller.abort();
	    }
	    this.sendRateLimitState.sent++;
	    this.sendQueue.shift();
	    this.connection.send(JSON.stringify(payload));
	  }
	  async identify() {
	    this.debug(["Waiting for identify throttle"]);
	    const controller = new AbortController();
	    const closeHandler = /* @__PURE__ */ __name(() => {
	      controller.abort();
	    }, "closeHandler");
	    this.on("closed" /* Closed */, closeHandler);
	    try {
	      await this.strategy.waitForIdentify(this.id, controller.signal);
	    } catch {
	      if (controller.signal.aborted) {
	        this.debug(["Was waiting for an identify, but the shard closed in the meantime"]);
	        return;
	      }
	      this.debug([
	        "IContextFetchingStrategy#waitForIdentify threw an unknown error.",
	        "If you're using a custom strategy, this is probably nothing to worry about.",
	        "If you're not, please open an issue on GitHub."
	      ]);
	      await this.destroy({
	        reason: "Identify throttling logic failed",
	        recover: 1 /* Resume */
	      });
	    } finally {
	      this.off("closed" /* Closed */, closeHandler);
	    }
	    this.debug([
	      "Identifying",
	      `shard id: ${this.id.toString()}`,
	      `shard count: ${this.strategy.options.shardCount}`,
	      `intents: ${this.strategy.options.intents}`,
	      `compression: ${this.inflate ? "zlib-stream" : this.useIdentifyCompress ? "identify" : "none"}`
	    ]);
	    const d = {
	      token: this.strategy.options.token,
	      properties: this.strategy.options.identifyProperties,
	      intents: this.strategy.options.intents,
	      compress: this.useIdentifyCompress,
	      shard: [this.id, this.strategy.options.shardCount]
	    };
	    if (this.strategy.options.largeThreshold) {
	      d.large_threshold = this.strategy.options.largeThreshold;
	    }
	    if (this.strategy.options.initialPresence) {
	      d.presence = this.strategy.options.initialPresence;
	    }
	    await this.send({
	      op: import_v102.GatewayOpcodes.Identify,
	      d
	    });
	    await this.waitForEvent("ready" /* Ready */, this.strategy.options.readyTimeout);
	  }
	  async resume(session) {
	    this.debug([
	      "Resuming session",
	      `resume url: ${session.resumeURL}`,
	      `sequence: ${session.sequence}`,
	      `shard id: ${this.id.toString()}`
	    ]);
	    this.#status = 2 /* Resuming */;
	    this.replayedEvents = 0;
	    return this.send({
	      op: import_v102.GatewayOpcodes.Resume,
	      d: {
	        token: this.strategy.options.token,
	        seq: session.sequence,
	        session_id: session.sessionId
	      }
	    });
	  }
	  async heartbeat(requested = false) {
	    if (!this.isAck && !requested) {
	      return this.destroy({ reason: "Zombie connection", recover: 1 /* Resume */ });
	    }
	    const session = await this.strategy.retrieveSessionInfo(this.id);
	    await this.send({
	      op: import_v102.GatewayOpcodes.Heartbeat,
	      d: session?.sequence ?? null
	    });
	    this.lastHeartbeatAt = Date.now();
	    this.isAck = false;
	  }
	  async unpackMessage(data, isBinary) {
	    if (!isBinary) {
	      try {
	        return JSON.parse(data);
	      } catch {
	        return null;
	      }
	    }
	    const decompressable = new Uint8Array(data);
	    if (this.useIdentifyCompress) {
	      return new Promise((resolve2, reject) => {
	        (0, import_node_zlib.inflate)(decompressable, { chunkSize: 65535 }, (err, result) => {
	          if (err) {
	            reject(err);
	            return;
	          }
	          resolve2(JSON.parse(this.textDecoder.decode(result)));
	        });
	      });
	    }
	    if (this.inflate) {
	      const l = decompressable.length;
	      const flush = l >= 4 && decompressable[l - 4] === 0 && decompressable[l - 3] === 0 && decompressable[l - 2] === 255 && decompressable[l - 1] === 255;
	      const zlib = await getZlibSync();
	      this.inflate.push(import_node_buffer.Buffer.from(decompressable), flush ? zlib.Z_SYNC_FLUSH : zlib.Z_NO_FLUSH);
	      if (this.inflate.err) {
	        this.emit("error" /* Error */, {
	          error: new Error(`${this.inflate.err}${this.inflate.msg ? `: ${this.inflate.msg}` : ""}`)
	        });
	      }
	      if (!flush) {
	        return null;
	      }
	      const { result } = this.inflate;
	      if (!result) {
	        return null;
	      }
	      return JSON.parse(typeof result === "string" ? result : this.textDecoder.decode(result));
	    }
	    this.debug([
	      "Received a message we were unable to decompress",
	      `isBinary: ${isBinary.toString()}`,
	      `useIdentifyCompress: ${this.useIdentifyCompress.toString()}`,
	      `inflate: ${Boolean(this.inflate).toString()}`
	    ]);
	    return null;
	  }
	  async onMessage(data, isBinary) {
	    const payload = await this.unpackMessage(data, isBinary);
	    if (!payload) {
	      return;
	    }
	    switch (payload.op) {
	      case import_v102.GatewayOpcodes.Dispatch: {
	        if (this.#status === 2 /* Resuming */) {
	          this.replayedEvents++;
	        }
	        switch (payload.t) {
	          case import_v102.GatewayDispatchEvents.Ready: {
	            this.#status = 3 /* Ready */;
	            const session2 = {
	              sequence: payload.s,
	              sessionId: payload.d.session_id,
	              shardId: this.id,
	              shardCount: this.strategy.options.shardCount,
	              resumeURL: payload.d.resume_gateway_url
	            };
	            await this.strategy.updateSessionInfo(this.id, session2);
	            this.emit("ready" /* Ready */, { data: payload.d });
	            break;
	          }
	          case import_v102.GatewayDispatchEvents.Resumed: {
	            this.#status = 3 /* Ready */;
	            this.debug([`Resumed and replayed ${this.replayedEvents} events`]);
	            this.emit("resumed" /* Resumed */);
	            break;
	          }
	        }
	        const session = await this.strategy.retrieveSessionInfo(this.id);
	        if (session) {
	          if (payload.s > session.sequence) {
	            await this.strategy.updateSessionInfo(this.id, { ...session, sequence: payload.s });
	          }
	        } else {
	          this.debug([
	            `Received a ${payload.t} event but no session is available. Session information cannot be re-constructed in this state without a full reconnect`
	          ]);
	        }
	        this.emit("dispatch" /* Dispatch */, { data: payload });
	        break;
	      }
	      case import_v102.GatewayOpcodes.Heartbeat: {
	        await this.heartbeat(true);
	        break;
	      }
	      case import_v102.GatewayOpcodes.Reconnect: {
	        await this.destroy({
	          reason: "Told to reconnect by Discord",
	          recover: 1 /* Resume */
	        });
	        break;
	      }
	      case import_v102.GatewayOpcodes.InvalidSession: {
	        this.debug([`Invalid session; will attempt to resume: ${payload.d.toString()}`]);
	        const session = await this.strategy.retrieveSessionInfo(this.id);
	        if (payload.d && session) {
	          await this.resume(session);
	        } else {
	          await this.destroy({
	            reason: "Invalid session",
	            recover: 0 /* Reconnect */
	          });
	        }
	        break;
	      }
	      case import_v102.GatewayOpcodes.Hello: {
	        this.emit("hello" /* Hello */);
	        const jitter = Math.random();
	        const firstWait = Math.floor(payload.d.heartbeat_interval * jitter);
	        this.debug([`Preparing first heartbeat of the connection with a jitter of ${jitter}; waiting ${firstWait}ms`]);
	        try {
	          const controller = new AbortController();
	          this.initialHeartbeatTimeoutController = controller;
	          await (0, import_promises2.setTimeout)(firstWait, void 0, { signal: controller.signal });
	        } catch {
	          this.debug(["Cancelled initial heartbeat due to #destroy being called"]);
	          return;
	        } finally {
	          this.initialHeartbeatTimeoutController = null;
	        }
	        await this.heartbeat();
	        this.debug([`First heartbeat sent, starting to beat every ${payload.d.heartbeat_interval}ms`]);
	        this.heartbeatInterval = (0, import_node_timers.setInterval)(() => void this.heartbeat(), payload.d.heartbeat_interval);
	        break;
	      }
	      case import_v102.GatewayOpcodes.HeartbeatAck: {
	        this.isAck = true;
	        const ackAt = Date.now();
	        this.emit("heartbeat" /* HeartbeatComplete */, {
	          ackAt,
	          heartbeatAt: this.lastHeartbeatAt,
	          latency: ackAt - this.lastHeartbeatAt
	        });
	        break;
	      }
	    }
	  }
	  onError(error) {
	    if ("code" in error && ["ECONNRESET", "ECONNREFUSED"].includes(error.code)) {
	      this.debug(["Failed to connect to the gateway URL specified due to a network error"]);
	      this.failedToConnectDueToNetworkError = true;
	      return;
	    }
	    this.emit("error" /* Error */, { error });
	  }
	  async onClose(code) {
	    this.emit("closed" /* Closed */, { code });
	    switch (code) {
	      case 1e3 /* Normal */: {
	        return this.destroy({
	          code,
	          reason: "Got disconnected by Discord",
	          recover: 0 /* Reconnect */
	        });
	      }
	      case 4200 /* Resuming */: {
	        break;
	      }
	      case import_v102.GatewayCloseCodes.UnknownError: {
	        this.debug([`An unknown error occurred: ${code}`]);
	        return this.destroy({ code, recover: 1 /* Resume */ });
	      }
	      case import_v102.GatewayCloseCodes.UnknownOpcode: {
	        this.debug(["An invalid opcode was sent to Discord."]);
	        return this.destroy({ code, recover: 1 /* Resume */ });
	      }
	      case import_v102.GatewayCloseCodes.DecodeError: {
	        this.debug(["An invalid payload was sent to Discord."]);
	        return this.destroy({ code, recover: 1 /* Resume */ });
	      }
	      case import_v102.GatewayCloseCodes.NotAuthenticated: {
	        this.debug(["A request was somehow sent before the identify/resume payload."]);
	        return this.destroy({ code, recover: 0 /* Reconnect */ });
	      }
	      case import_v102.GatewayCloseCodes.AuthenticationFailed: {
	        this.emit("error" /* Error */, {
	          error: new Error("Authentication failed")
	        });
	        return this.destroy({ code });
	      }
	      case import_v102.GatewayCloseCodes.AlreadyAuthenticated: {
	        this.debug(["More than one auth payload was sent."]);
	        return this.destroy({ code, recover: 0 /* Reconnect */ });
	      }
	      case import_v102.GatewayCloseCodes.InvalidSeq: {
	        this.debug(["An invalid sequence was sent."]);
	        return this.destroy({ code, recover: 0 /* Reconnect */ });
	      }
	      case import_v102.GatewayCloseCodes.RateLimited: {
	        this.debug(["The WebSocket rate limit has been hit, this should never happen"]);
	        return this.destroy({ code, recover: 0 /* Reconnect */ });
	      }
	      case import_v102.GatewayCloseCodes.SessionTimedOut: {
	        this.debug(["Session timed out."]);
	        return this.destroy({ code, recover: 1 /* Resume */ });
	      }
	      case import_v102.GatewayCloseCodes.InvalidShard: {
	        this.emit("error" /* Error */, {
	          error: new Error("Invalid shard")
	        });
	        return this.destroy({ code });
	      }
	      case import_v102.GatewayCloseCodes.ShardingRequired: {
	        this.emit("error" /* Error */, {
	          error: new Error("Sharding is required")
	        });
	        return this.destroy({ code });
	      }
	      case import_v102.GatewayCloseCodes.InvalidAPIVersion: {
	        this.emit("error" /* Error */, {
	          error: new Error("Used an invalid API version")
	        });
	        return this.destroy({ code });
	      }
	      case import_v102.GatewayCloseCodes.InvalidIntents: {
	        this.emit("error" /* Error */, {
	          error: new Error("Used invalid intents")
	        });
	        return this.destroy({ code });
	      }
	      case import_v102.GatewayCloseCodes.DisallowedIntents: {
	        this.emit("error" /* Error */, {
	          error: new Error("Used disallowed intents")
	        });
	        return this.destroy({ code });
	      }
	      default: {
	        this.debug([
	          `The gateway closed with an unexpected code ${code}, attempting to ${this.failedToConnectDueToNetworkError ? "reconnect" : "resume"}.`
	        ]);
	        return this.destroy({
	          code,
	          recover: this.failedToConnectDueToNetworkError ? 0 /* Reconnect */ : 1 /* Resume */
	        });
	      }
	    }
	  }
	  debug(messages) {
	    const message = `${messages[0]}${messages.length > 1 ? `
${messages.slice(1).map((m) => `	${m}`).join("\n")}` : ""}`;
	    this.emit("debug" /* Debug */, { message });
	  }
	};

	// src/strategies/sharding/SimpleShardingStrategy.ts
	var SimpleShardingStrategy = class {
	  static {
	    __name(this, "SimpleShardingStrategy");
	  }
	  manager;
	  shards = new import_collection6.Collection();
	  constructor(manager) {
	    this.manager = manager;
	  }
	  /**
	   * {@inheritDoc IShardingStrategy.spawn}
	   */
	  async spawn(shardIds) {
	    const strategyOptions = await managerToFetchingStrategyOptions(this.manager);
	    for (const shardId of shardIds) {
	      const strategy = new SimpleContextFetchingStrategy(this.manager, strategyOptions);
	      const shard = new WebSocketShard(strategy, shardId);
	      for (const event of Object.values(WebSocketShardEvents)) {
	        shard.on(event, (payload) => this.manager.emit(event, { ...payload, shardId }));
	      }
	      this.shards.set(shardId, shard);
	    }
	  }
	  /**
	   * {@inheritDoc IShardingStrategy.connect}
	   */
	  async connect() {
	    const promises = [];
	    for (const shard of this.shards.values()) {
	      promises.push(shard.connect());
	    }
	    await Promise.all(promises);
	  }
	  /**
	   * {@inheritDoc IShardingStrategy.destroy}
	   */
	  async destroy(options) {
	    const promises = [];
	    for (const shard of this.shards.values()) {
	      promises.push(shard.destroy(options));
	    }
	    await Promise.all(promises);
	    this.shards.clear();
	  }
	  /**
	   * {@inheritDoc IShardingStrategy.send}
	   */
	  async send(shardId, payload) {
	    const shard = this.shards.get(shardId);
	    if (!shard) {
	      throw new RangeError(`Shard ${shardId} not found`);
	    }
	    return shard.send(payload);
	  }
	  /**
	   * {@inheritDoc IShardingStrategy.fetchStatus}
	   */
	  async fetchStatus() {
	    return this.shards.mapValues((shard) => shard.status);
	  }
	};

	// src/utils/WorkerBootstrapper.ts
	var import_node_worker_threads3 = require$$0$i;
	var import_collection7 = requireDist$6();
	var WorkerBootstrapper = class {
	  static {
	    __name(this, "WorkerBootstrapper");
	  }
	  /**
	   * The data passed to the worker thread
	   */
	  data = import_node_worker_threads3.workerData;
	  /**
	   * The shards that are managed by this worker
	   */
	  shards = new import_collection7.Collection();
	  constructor() {
	    if (import_node_worker_threads3.isMainThread) {
	      throw new Error("Expected WorkerBootstrap to not be used within the main thread");
	    }
	  }
	  /**
	   * Helper method to initiate a shard's connection process
	   */
	  async connect(shardId) {
	    const shard = this.shards.get(shardId);
	    if (!shard) {
	      throw new RangeError(`Shard ${shardId} does not exist`);
	    }
	    await shard.connect();
	  }
	  /**
	   * Helper method to destroy a shard
	   */
	  async destroy(shardId, options) {
	    const shard = this.shards.get(shardId);
	    if (!shard) {
	      throw new RangeError(`Shard ${shardId} does not exist`);
	    }
	    await shard.destroy(options);
	  }
	  /**
	   * Helper method to attach event listeners to the parentPort
	   */
	  setupThreadEvents() {
	    import_node_worker_threads3.parentPort.on("messageerror", (err) => {
	      throw err;
	    }).on("message", async (payload) => {
	      switch (payload.op) {
	        case 0 /* Connect */: {
	          await this.connect(payload.shardId);
	          const response = {
	            op: 0 /* Connected */,
	            shardId: payload.shardId
	          };
	          import_node_worker_threads3.parentPort.postMessage(response);
	          break;
	        }
	        case 1 /* Destroy */: {
	          await this.destroy(payload.shardId, payload.options);
	          const response = {
	            op: 1 /* Destroyed */,
	            shardId: payload.shardId
	          };
	          import_node_worker_threads3.parentPort.postMessage(response);
	          break;
	        }
	        case 2 /* Send */: {
	          const shard = this.shards.get(payload.shardId);
	          if (!shard) {
	            throw new RangeError(`Shard ${payload.shardId} does not exist`);
	          }
	          await shard.send(payload.payload);
	          break;
	        }
	        case 3 /* SessionInfoResponse */: {
	          break;
	        }
	        case 4 /* ShardIdentifyResponse */: {
	          break;
	        }
	        case 5 /* FetchStatus */: {
	          const shard = this.shards.get(payload.shardId);
	          if (!shard) {
	            throw new Error(`Shard ${payload.shardId} does not exist`);
	          }
	          const response = {
	            op: 6 /* FetchStatusResponse */,
	            status: shard.status,
	            nonce: payload.nonce
	          };
	          import_node_worker_threads3.parentPort.postMessage(response);
	          break;
	        }
	      }
	    });
	  }
	  /**
	   * Bootstraps the worker thread with the provided options
	   */
	  async bootstrap(options = {}) {
	    for (const shardId of this.data.shardIds) {
	      const shard = new WebSocketShard(new WorkerContextFetchingStrategy(this.data), shardId);
	      for (const event of options.forwardEvents ?? Object.values(WebSocketShardEvents)) {
	        shard.on(event, (data) => {
	          const payload = {
	            op: 2 /* Event */,
	            event,
	            data,
	            shardId
	          };
	          import_node_worker_threads3.parentPort.postMessage(payload);
	        });
	      }
	      await options.shardCallback?.(shard);
	      this.shards.set(shardId, shard);
	    }
	    this.setupThreadEvents();
	    const message = {
	      op: 7 /* WorkerReady */
	    };
	    import_node_worker_threads3.parentPort.postMessage(message);
	  }
	};

	// src/ws/WebSocketManager.ts
	var import_util3 = requireDist$7();
	var import_util4 = requireDist$7();
	var import_async_event_emitter2 = /*@__PURE__*/ requireDist$5();
	var import_v103 = requireV10();
	(0, import_util4.polyfillDispose)();
	var WebSocketManager = class extends import_async_event_emitter2.AsyncEventEmitter {
	  static {
	    __name(this, "WebSocketManager");
	  }
	  /**
	   * The options being used by this manager
	   */
	  options;
	  /**
	   * Internal cache for a GET /gateway/bot result
	   */
	  gatewayInformation = null;
	  /**
	   * Internal cache for the shard ids
	   */
	  shardIds = null;
	  /**
	   * Strategy used to manage shards
	   *
	   * @defaultValue `SimpleShardingStrategy`
	   */
	  strategy;
	  constructor(options) {
	    super();
	    this.options = { ...DefaultWebSocketManagerOptions, ...options };
	    this.strategy = this.options.buildStrategy(this);
	  }
	  /**
	   * Fetches the gateway information from Discord - or returns it from cache if available
	   *
	   * @param force - Whether to ignore the cache and force a fresh fetch
	   */
	  async fetchGatewayInformation(force = false) {
	    if (this.gatewayInformation) {
	      if (this.gatewayInformation.expiresAt <= Date.now()) {
	        this.gatewayInformation = null;
	      } else if (!force) {
	        return this.gatewayInformation.data;
	      }
	    }
	    const data = await this.options.rest.get(import_v103.Routes.gatewayBot());
	    this.gatewayInformation = { data, expiresAt: Date.now() + (data.session_start_limit.reset_after || 5e3) };
	    return this.gatewayInformation.data;
	  }
	  /**
	   * Updates your total shard count on-the-fly, spawning shards as needed
	   *
	   * @param shardCount - The new shard count to use
	   */
	  async updateShardCount(shardCount) {
	    await this.strategy.destroy({ reason: "User is adjusting their shards" });
	    this.options.shardCount = shardCount;
	    const shardIds = await this.getShardIds(true);
	    await this.strategy.spawn(shardIds);
	    return this;
	  }
	  /**
	   * Yields the total number of shards across for your bot, accounting for Discord recommendations
	   */
	  async getShardCount() {
	    if (this.options.shardCount) {
	      return this.options.shardCount;
	    }
	    const shardIds = await this.getShardIds();
	    return Math.max(...shardIds) + 1;
	  }
	  /**
	   * Yields the ids of the shards this manager should manage
	   */
	  async getShardIds(force = false) {
	    if (this.shardIds && !force) {
	      return this.shardIds;
	    }
	    let shardIds;
	    if (this.options.shardIds) {
	      if (Array.isArray(this.options.shardIds)) {
	        shardIds = this.options.shardIds;
	      } else {
	        const { start, end } = this.options.shardIds;
	        shardIds = [...(0, import_util3.range)({ start, end: end + 1 })];
	      }
	    } else {
	      const data = await this.fetchGatewayInformation();
	      shardIds = [...(0, import_util3.range)(this.options.shardCount ?? data.shards)];
	    }
	    this.shardIds = shardIds;
	    return shardIds;
	  }
	  async connect() {
	    const shardCount = await this.getShardCount();
	    await this.updateShardCount(shardCount);
	    const shardIds = await this.getShardIds();
	    const data = await this.fetchGatewayInformation();
	    if (data.session_start_limit.remaining < shardIds.length) {
	      throw new Error(
	        `Not enough sessions remaining to spawn ${shardIds.length} shards; only ${data.session_start_limit.remaining} remaining; resets at ${new Date(Date.now() + data.session_start_limit.reset_after).toISOString()}`
	      );
	    }
	    await this.strategy.connect();
	  }
	  destroy(options) {
	    return this.strategy.destroy(options);
	  }
	  send(shardId, payload) {
	    return this.strategy.send(shardId, payload);
	  }
	  fetchStatus() {
	    return this.strategy.fetchStatus();
	  }
	  async [Symbol.asyncDispose]() {
	    await this.destroy();
	  }
	};

	// src/index.ts
	var version = "1.1.1";
	
	return dist;
}

var WebSocketShardEvents;
var hasRequiredWebSocketShardEvents;

function requireWebSocketShardEvents () {
	if (hasRequiredWebSocketShardEvents) return WebSocketShardEvents;
	hasRequiredWebSocketShardEvents = 1;

	/**
	 * @typedef {Object} WebSocketShardEvents
	 * @property {string} Close close
	 * @property {string} Destroyed destroyed
	 * @property {string} InvalidSession invalidSession
	 * @property {string} Ready ready
	 * @property {string} Resumed resumed
	 * @property {string} AllReady allReady
	 */

	// JSDoc for IntelliSense purposes
	/**
	 * @type {WebSocketShardEvents}
	 * @ignore
	 */
	WebSocketShardEvents = {
	  Close: 'close',
	  Destroyed: 'destroyed',
	  InvalidSession: 'invalidSession',
	  Ready: 'ready',
	  Resumed: 'resumed',
	  AllReady: 'allReady',
	};
	return WebSocketShardEvents;
}

var WebSocketShard_1;
var hasRequiredWebSocketShard;

function requireWebSocketShard () {
	if (hasRequiredWebSocketShard) return WebSocketShard_1;
	hasRequiredWebSocketShard = 1;

	const EventEmitter = require$$0$b;
	const process = require$$0$d;
	const { setTimeout, clearTimeout } = require$$0$e;
	const { GatewayIntentBits } = requireV10$6();
	const Status = requireStatus();
	const WebSocketShardEvents = requireWebSocketShardEvents();

	let deprecationEmittedForImportant = false;
	/**
	 * Represents a Shard's WebSocket connection
	 * @extends {EventEmitter}
	 */
	class WebSocketShard extends EventEmitter {
	  constructor(manager, id) {
	    super();

	    /**
	     * The WebSocketManager of the shard
	     * @type {WebSocketManager}
	     */
	    this.manager = manager;

	    /**
	     * The shard's id
	     * @type {number}
	     */
	    this.id = id;

	    /**
	     * The current status of the shard
	     * @type {Status}
	     */
	    this.status = Status.Idle;

	    /**
	     * The sequence of the shard after close
	     * @type {number}
	     * @private
	     */
	    this.closeSequence = 0;

	    /**
	     * The previous heartbeat ping of the shard
	     * @type {number}
	     */
	    this.ping = -1;

	    /**
	     * The last time a ping was sent (a timestamp)
	     * @type {number}
	     */
	    this.lastPingTimestamp = -1;

	    /**
	     * A set of guild ids this shard expects to receive
	     * @name WebSocketShard#expectedGuilds
	     * @type {?Set<string>}
	     * @private
	     */
	    Object.defineProperty(this, 'expectedGuilds', { value: null, writable: true });

	    /**
	     * The ready timeout
	     * @name WebSocketShard#readyTimeout
	     * @type {?NodeJS.Timeout}
	     * @private
	     */
	    Object.defineProperty(this, 'readyTimeout', { value: null, writable: true });

	    /**
	     * @external SessionInfo
	     * @see {@link https://discord.js.org/docs/packages/ws/stable/SessionInfo:Interface}
	     */

	    /**
	     * The session info used by `@discordjs/ws` package.
	     * @name WebSocketShard#sessionInfo
	     * @type {?SessionInfo}
	     * @private
	     */
	    Object.defineProperty(this, 'sessionInfo', { value: null, writable: true });
	  }

	  /**
	   * Emits a debug event.
	   * @param {string[]} messages The debug message
	   * @private
	   */
	  debug(messages) {
	    this.manager.debug(messages, this.id);
	  }

	  /**
	   * @external CloseEvent
	   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}
	   */

	  /**
	   * This method is responsible to emit close event for this shard.
	   * This method helps the shard reconnect.
	   * @param {CloseEvent} [event] Close event that was received
	   * @deprecated
	   */
	  emitClose(
	    event = {
	      code: 1011,
	      reason: 'INTERNAL_ERROR',
	      wasClean: false,
	    },
	  ) {
	    this.debug([
	      '[CLOSE]',
	      `Event Code: ${event.code}`,
	      `Clean     : ${event.wasClean}`,
	      `Reason    : ${event.reason ?? 'No reason received'}`,
	    ]);

	    /**
	     * Emitted when a shard's WebSocket closes.
	     * @private
	     * @event WebSocketShard#close
	     * @param {CloseEvent} event The received event
	     */
	    this.emit(WebSocketShardEvents.Close, event);
	  }

	  /**
	   * Called when the shard receives the READY payload.
	   * @param {Object} packet The received packet
	   * @private
	   */
	  onReadyPacket(packet) {
	    if (!packet) {
	      this.debug([`Received broken packet: '${packet}'.`]);
	      return;
	    }

	    /**
	     * Emitted when the shard receives the READY payload and is now waiting for guilds
	     * @event WebSocketShard#ready
	     */
	    this.emit(WebSocketShardEvents.Ready);

	    this.expectedGuilds = new Set(packet.guilds.map(guild => guild.id));
	    this.status = Status.WaitingForGuilds;
	  }

	  /**
	   * Called when a GuildCreate or GuildDelete for this shard was sent after READY payload was received,
	   * but before we emitted the READY event.
	   * @param {Snowflake} guildId the id of the Guild sent in the payload
	   * @private
	   */
	  gotGuild(guildId) {
	    this.expectedGuilds.delete(guildId);
	    this.checkReady();
	  }

	  /**
	   * Checks if the shard can be marked as ready
	   * @private
	   */
	  checkReady() {
	    // Step 0. Clear the ready timeout, if it exists
	    if (this.readyTimeout) {
	      clearTimeout(this.readyTimeout);
	      this.readyTimeout = null;
	    }
	    // Step 1. If we don't have any other guilds pending, we are ready
	    if (!this.expectedGuilds.size) {
	      this.debug(['Shard received all its guilds. Marking as fully ready.']);
	      this.status = Status.Ready;

	      /**
	       * Emitted when the shard is fully ready.
	       * This event is emitted if:
	       * * all guilds were received by this shard
	       * * the ready timeout expired, and some guilds are unavailable
	       * @event WebSocketShard#allReady
	       * @param {?Set<string>} unavailableGuilds Set of unavailable guilds, if any
	       */
	      this.emit(WebSocketShardEvents.AllReady);
	      return;
	    }
	    const hasGuildsIntent = this.manager.client.options.intents.has(GatewayIntentBits.Guilds);
	    // Step 2. Create a timeout that will mark the shard as ready if there are still unavailable guilds
	    // * The timeout is 15 seconds by default
	    // * This can be optionally changed in the client options via the `waitGuildTimeout` option
	    // * a timeout time of zero will skip this timeout, which potentially could cause the Client to miss guilds.

	    const { waitGuildTimeout } = this.manager.client.options;

	    this.readyTimeout = setTimeout(
	      () => {
	        this.debug([
	          hasGuildsIntent
	            ? `Shard did not receive any guild packets in ${waitGuildTimeout} ms.`
	            : 'Shard will not receive anymore guild packets.',
	          `Unavailable guild count: ${this.expectedGuilds.size}`,
	        ]);

	        this.readyTimeout = null;
	        this.status = Status.Ready;

	        this.emit(WebSocketShardEvents.AllReady, this.expectedGuilds);
	      },
	      hasGuildsIntent ? waitGuildTimeout : 0,
	    ).unref();
	  }

	  /**
	   * Adds a packet to the queue to be sent to the gateway.
	   * <warn>If you use this method, make sure you understand that you need to provide
	   * a full [Payload](https://discord.com/developers/docs/topics/gateway#commands-and-events-gateway-commands).
	   * Do not use this method if you don't know what you're doing.</warn>
	   * @param {Object} data The full packet to send
	   * @param {boolean} [important=false] If this packet should be added first in queue
	   * <warn>This parameter is **deprecated**. Important payloads are determined by their opcode instead.</warn>
	   */
	  send(data, important = false) {
	    if (important && !deprecationEmittedForImportant) {
	      process.emitWarning(
	        'Sending important payloads explicitly is deprecated. They are determined by their opcode implicitly now.',
	        'DeprecationWarning',
	      );
	      deprecationEmittedForImportant = true;
	    }
	    this.manager._ws.send(this.id, data);
	  }
	}

	WebSocketShard_1 = WebSocketShard;
	return WebSocketShard_1;
}

var APPLICATION_COMMAND_PERMISSIONS_UPDATE;
var hasRequiredAPPLICATION_COMMAND_PERMISSIONS_UPDATE;

function requireAPPLICATION_COMMAND_PERMISSIONS_UPDATE () {
	if (hasRequiredAPPLICATION_COMMAND_PERMISSIONS_UPDATE) return APPLICATION_COMMAND_PERMISSIONS_UPDATE;
	hasRequiredAPPLICATION_COMMAND_PERMISSIONS_UPDATE = 1;

	APPLICATION_COMMAND_PERMISSIONS_UPDATE = (client, packet) => {
	  client.actions.ApplicationCommandPermissionsUpdate.handle(packet.d);
	};
	return APPLICATION_COMMAND_PERMISSIONS_UPDATE;
}

var AUTO_MODERATION_ACTION_EXECUTION;
var hasRequiredAUTO_MODERATION_ACTION_EXECUTION;

function requireAUTO_MODERATION_ACTION_EXECUTION () {
	if (hasRequiredAUTO_MODERATION_ACTION_EXECUTION) return AUTO_MODERATION_ACTION_EXECUTION;
	hasRequiredAUTO_MODERATION_ACTION_EXECUTION = 1;

	AUTO_MODERATION_ACTION_EXECUTION = (client, packet) => {
	  client.actions.AutoModerationActionExecution.handle(packet.d);
	};
	return AUTO_MODERATION_ACTION_EXECUTION;
}

var AUTO_MODERATION_RULE_CREATE;
var hasRequiredAUTO_MODERATION_RULE_CREATE;

function requireAUTO_MODERATION_RULE_CREATE () {
	if (hasRequiredAUTO_MODERATION_RULE_CREATE) return AUTO_MODERATION_RULE_CREATE;
	hasRequiredAUTO_MODERATION_RULE_CREATE = 1;

	AUTO_MODERATION_RULE_CREATE = (client, packet) => {
	  client.actions.AutoModerationRuleCreate.handle(packet.d);
	};
	return AUTO_MODERATION_RULE_CREATE;
}

var AUTO_MODERATION_RULE_DELETE;
var hasRequiredAUTO_MODERATION_RULE_DELETE;

function requireAUTO_MODERATION_RULE_DELETE () {
	if (hasRequiredAUTO_MODERATION_RULE_DELETE) return AUTO_MODERATION_RULE_DELETE;
	hasRequiredAUTO_MODERATION_RULE_DELETE = 1;

	AUTO_MODERATION_RULE_DELETE = (client, packet) => {
	  client.actions.AutoModerationRuleDelete.handle(packet.d);
	};
	return AUTO_MODERATION_RULE_DELETE;
}

var AUTO_MODERATION_RULE_UPDATE;
var hasRequiredAUTO_MODERATION_RULE_UPDATE;

function requireAUTO_MODERATION_RULE_UPDATE () {
	if (hasRequiredAUTO_MODERATION_RULE_UPDATE) return AUTO_MODERATION_RULE_UPDATE;
	hasRequiredAUTO_MODERATION_RULE_UPDATE = 1;

	AUTO_MODERATION_RULE_UPDATE = (client, packet) => {
	  client.actions.AutoModerationRuleUpdate.handle(packet.d);
	};
	return AUTO_MODERATION_RULE_UPDATE;
}

var CHANNEL_CREATE;
var hasRequiredCHANNEL_CREATE;

function requireCHANNEL_CREATE () {
	if (hasRequiredCHANNEL_CREATE) return CHANNEL_CREATE;
	hasRequiredCHANNEL_CREATE = 1;

	CHANNEL_CREATE = (client, packet) => {
	  client.actions.ChannelCreate.handle(packet.d);
	};
	return CHANNEL_CREATE;
}

var CHANNEL_DELETE;
var hasRequiredCHANNEL_DELETE;

function requireCHANNEL_DELETE () {
	if (hasRequiredCHANNEL_DELETE) return CHANNEL_DELETE;
	hasRequiredCHANNEL_DELETE = 1;

	CHANNEL_DELETE = (client, packet) => {
	  client.actions.ChannelDelete.handle(packet.d);
	};
	return CHANNEL_DELETE;
}

var CHANNEL_PINS_UPDATE;
var hasRequiredCHANNEL_PINS_UPDATE;

function requireCHANNEL_PINS_UPDATE () {
	if (hasRequiredCHANNEL_PINS_UPDATE) return CHANNEL_PINS_UPDATE;
	hasRequiredCHANNEL_PINS_UPDATE = 1;

	const Events = requireEvents();

	CHANNEL_PINS_UPDATE = (client, { d: data }) => {
	  const channel = client.channels.cache.get(data.channel_id);
	  const time = data.last_pin_timestamp ? Date.parse(data.last_pin_timestamp) : null;

	  if (channel) {
	    // Discord sends null for last_pin_timestamp if the last pinned message was removed
	    channel.lastPinTimestamp = time;

	    /**
	     * Emitted whenever the pins of a channel are updated. Due to the nature of the WebSocket event,
	     * not much information can be provided easily here - you need to manually check the pins yourself.
	     * @event Client#channelPinsUpdate
	     * @param {TextBasedChannels} channel The channel that the pins update occurred in
	     * @param {Date} time The time of the pins update
	     */
	    client.emit(Events.ChannelPinsUpdate, channel, time);
	  }
	};
	return CHANNEL_PINS_UPDATE;
}

var CHANNEL_UPDATE;
var hasRequiredCHANNEL_UPDATE;

function requireCHANNEL_UPDATE () {
	if (hasRequiredCHANNEL_UPDATE) return CHANNEL_UPDATE;
	hasRequiredCHANNEL_UPDATE = 1;

	const Events = requireEvents();

	CHANNEL_UPDATE = (client, packet) => {
	  const { old, updated } = client.actions.ChannelUpdate.handle(packet.d);
	  if (old && updated) {
	    /**
	     * Emitted whenever a channel is updated - e.g. name change, topic change, channel type change.
	     * @event Client#channelUpdate
	     * @param {DMChannel|GuildChannel} oldChannel The channel before the update
	     * @param {DMChannel|GuildChannel} newChannel The channel after the update
	     */
	    client.emit(Events.ChannelUpdate, old, updated);
	  }
	};
	return CHANNEL_UPDATE;
}

var ENTITLEMENT_CREATE;
var hasRequiredENTITLEMENT_CREATE;

function requireENTITLEMENT_CREATE () {
	if (hasRequiredENTITLEMENT_CREATE) return ENTITLEMENT_CREATE;
	hasRequiredENTITLEMENT_CREATE = 1;

	ENTITLEMENT_CREATE = (client, packet) => {
	  client.actions.EntitlementCreate.handle(packet.d);
	};
	return ENTITLEMENT_CREATE;
}

var ENTITLEMENT_DELETE;
var hasRequiredENTITLEMENT_DELETE;

function requireENTITLEMENT_DELETE () {
	if (hasRequiredENTITLEMENT_DELETE) return ENTITLEMENT_DELETE;
	hasRequiredENTITLEMENT_DELETE = 1;

	ENTITLEMENT_DELETE = (client, packet) => {
	  client.actions.EntitlementDelete.handle(packet.d);
	};
	return ENTITLEMENT_DELETE;
}

var ENTITLEMENT_UPDATE;
var hasRequiredENTITLEMENT_UPDATE;

function requireENTITLEMENT_UPDATE () {
	if (hasRequiredENTITLEMENT_UPDATE) return ENTITLEMENT_UPDATE;
	hasRequiredENTITLEMENT_UPDATE = 1;

	ENTITLEMENT_UPDATE = (client, packet) => {
	  client.actions.EntitlementUpdate.handle(packet.d);
	};
	return ENTITLEMENT_UPDATE;
}

var GUILD_AUDIT_LOG_ENTRY_CREATE;
var hasRequiredGUILD_AUDIT_LOG_ENTRY_CREATE;

function requireGUILD_AUDIT_LOG_ENTRY_CREATE () {
	if (hasRequiredGUILD_AUDIT_LOG_ENTRY_CREATE) return GUILD_AUDIT_LOG_ENTRY_CREATE;
	hasRequiredGUILD_AUDIT_LOG_ENTRY_CREATE = 1;

	GUILD_AUDIT_LOG_ENTRY_CREATE = (client, packet) => {
	  client.actions.GuildAuditLogEntryCreate.handle(packet.d);
	};
	return GUILD_AUDIT_LOG_ENTRY_CREATE;
}

var GUILD_BAN_ADD;
var hasRequiredGUILD_BAN_ADD;

function requireGUILD_BAN_ADD () {
	if (hasRequiredGUILD_BAN_ADD) return GUILD_BAN_ADD;
	hasRequiredGUILD_BAN_ADD = 1;

	GUILD_BAN_ADD = (client, packet) => {
	  client.actions.GuildBanAdd.handle(packet.d);
	};
	return GUILD_BAN_ADD;
}

var GUILD_BAN_REMOVE;
var hasRequiredGUILD_BAN_REMOVE;

function requireGUILD_BAN_REMOVE () {
	if (hasRequiredGUILD_BAN_REMOVE) return GUILD_BAN_REMOVE;
	hasRequiredGUILD_BAN_REMOVE = 1;

	GUILD_BAN_REMOVE = (client, packet) => {
	  client.actions.GuildBanRemove.handle(packet.d);
	};
	return GUILD_BAN_REMOVE;
}

var GUILD_CREATE;
var hasRequiredGUILD_CREATE;

function requireGUILD_CREATE () {
	if (hasRequiredGUILD_CREATE) return GUILD_CREATE;
	hasRequiredGUILD_CREATE = 1;

	const Events = requireEvents();
	const Status = requireStatus();

	GUILD_CREATE = (client, { d: data }, shard) => {
	  let guild = client.guilds.cache.get(data.id);
	  if (guild) {
	    if (!guild.available && !data.unavailable) {
	      // A newly available guild
	      guild._patch(data);

	      /**
	       * Emitted whenever a guild becomes available.
	       * @event Client#guildAvailable
	       * @param {Guild} guild The guild that became available
	       */
	      client.emit(Events.GuildAvailable, guild);
	    }
	  } else {
	    // A new guild
	    data.shardId = shard.id;
	    guild = client.guilds._add(data);
	    if (client.ws.status === Status.Ready) {
	      /**
	       * Emitted whenever the client joins a guild.
	       * @event Client#guildCreate
	       * @param {Guild} guild The created guild
	       */
	      client.emit(Events.GuildCreate, guild);
	    }
	  }
	};
	return GUILD_CREATE;
}

var GUILD_DELETE;
var hasRequiredGUILD_DELETE;

function requireGUILD_DELETE () {
	if (hasRequiredGUILD_DELETE) return GUILD_DELETE;
	hasRequiredGUILD_DELETE = 1;

	GUILD_DELETE = (client, packet) => {
	  client.actions.GuildDelete.handle(packet.d);
	};
	return GUILD_DELETE;
}

var GUILD_EMOJIS_UPDATE;
var hasRequiredGUILD_EMOJIS_UPDATE;

function requireGUILD_EMOJIS_UPDATE () {
	if (hasRequiredGUILD_EMOJIS_UPDATE) return GUILD_EMOJIS_UPDATE;
	hasRequiredGUILD_EMOJIS_UPDATE = 1;

	GUILD_EMOJIS_UPDATE = (client, packet) => {
	  client.actions.GuildEmojisUpdate.handle(packet.d);
	};
	return GUILD_EMOJIS_UPDATE;
}

var GUILD_INTEGRATIONS_UPDATE;
var hasRequiredGUILD_INTEGRATIONS_UPDATE;

function requireGUILD_INTEGRATIONS_UPDATE () {
	if (hasRequiredGUILD_INTEGRATIONS_UPDATE) return GUILD_INTEGRATIONS_UPDATE;
	hasRequiredGUILD_INTEGRATIONS_UPDATE = 1;

	GUILD_INTEGRATIONS_UPDATE = (client, packet) => {
	  client.actions.GuildIntegrationsUpdate.handle(packet.d);
	};
	return GUILD_INTEGRATIONS_UPDATE;
}

var GUILD_MEMBERS_CHUNK;
var hasRequiredGUILD_MEMBERS_CHUNK;

function requireGUILD_MEMBERS_CHUNK () {
	if (hasRequiredGUILD_MEMBERS_CHUNK) return GUILD_MEMBERS_CHUNK;
	hasRequiredGUILD_MEMBERS_CHUNK = 1;

	const { Collection } = requireDist$3();
	const Events = requireEvents();

	GUILD_MEMBERS_CHUNK = (client, { d: data }) => {
	  const guild = client.guilds.cache.get(data.guild_id);
	  if (!guild) return;
	  const members = new Collection();

	  for (const member of data.members) members.set(member.user.id, guild.members._add(member));
	  if (data.presences) {
	    for (const presence of data.presences) guild.presences._add(Object.assign(presence, { guild }));
	  }

	  /**
	   * Represents the properties of a guild members chunk
	   * @typedef {Object} GuildMembersChunk
	   * @property {number} index Index of the received chunk
	   * @property {number} count Number of chunks the client should receive
	   * @property {Array<*>} notFound An array of whatever could not be found
	   * when using {@link GatewayOpcodes.RequestGuildMembers}
	   * @property {?string} nonce Nonce for this chunk
	   */

	  /**
	   * Emitted whenever a chunk of guild members is received (all members come from the same guild).
	   * @event Client#guildMembersChunk
	   * @param {Collection<Snowflake, GuildMember>} members The members in the chunk
	   * @param {Guild} guild The guild related to the member chunk
	   * @param {GuildMembersChunk} chunk Properties of the received chunk
	   */
	  client.emit(Events.GuildMembersChunk, members, guild, {
	    index: data.chunk_index,
	    count: data.chunk_count,
	    notFound: data.not_found,
	    nonce: data.nonce,
	  });
	};
	return GUILD_MEMBERS_CHUNK;
}

var GUILD_MEMBER_ADD;
var hasRequiredGUILD_MEMBER_ADD;

function requireGUILD_MEMBER_ADD () {
	if (hasRequiredGUILD_MEMBER_ADD) return GUILD_MEMBER_ADD;
	hasRequiredGUILD_MEMBER_ADD = 1;

	const Events = requireEvents();
	const Status = requireStatus();

	GUILD_MEMBER_ADD = (client, { d: data }, shard) => {
	  const guild = client.guilds.cache.get(data.guild_id);
	  if (guild) {
	    guild.memberCount++;
	    const member = guild.members._add(data);
	    if (shard.status === Status.Ready) {
	      /**
	       * Emitted whenever a user joins a guild.
	       * @event Client#guildMemberAdd
	       * @param {GuildMember} member The member that has joined a guild
	       */
	      client.emit(Events.GuildMemberAdd, member);
	    }
	  }
	};
	return GUILD_MEMBER_ADD;
}

var GUILD_MEMBER_REMOVE;
var hasRequiredGUILD_MEMBER_REMOVE;

function requireGUILD_MEMBER_REMOVE () {
	if (hasRequiredGUILD_MEMBER_REMOVE) return GUILD_MEMBER_REMOVE;
	hasRequiredGUILD_MEMBER_REMOVE = 1;

	GUILD_MEMBER_REMOVE = (client, packet, shard) => {
	  client.actions.GuildMemberRemove.handle(packet.d, shard);
	};
	return GUILD_MEMBER_REMOVE;
}

var GUILD_MEMBER_UPDATE;
var hasRequiredGUILD_MEMBER_UPDATE;

function requireGUILD_MEMBER_UPDATE () {
	if (hasRequiredGUILD_MEMBER_UPDATE) return GUILD_MEMBER_UPDATE;
	hasRequiredGUILD_MEMBER_UPDATE = 1;

	GUILD_MEMBER_UPDATE = (client, packet, shard) => {
	  client.actions.GuildMemberUpdate.handle(packet.d, shard);
	};
	return GUILD_MEMBER_UPDATE;
}

var GUILD_ROLE_CREATE;
var hasRequiredGUILD_ROLE_CREATE;

function requireGUILD_ROLE_CREATE () {
	if (hasRequiredGUILD_ROLE_CREATE) return GUILD_ROLE_CREATE;
	hasRequiredGUILD_ROLE_CREATE = 1;

	GUILD_ROLE_CREATE = (client, packet) => {
	  client.actions.GuildRoleCreate.handle(packet.d);
	};
	return GUILD_ROLE_CREATE;
}

var GUILD_ROLE_DELETE;
var hasRequiredGUILD_ROLE_DELETE;

function requireGUILD_ROLE_DELETE () {
	if (hasRequiredGUILD_ROLE_DELETE) return GUILD_ROLE_DELETE;
	hasRequiredGUILD_ROLE_DELETE = 1;

	GUILD_ROLE_DELETE = (client, packet) => {
	  client.actions.GuildRoleDelete.handle(packet.d);
	};
	return GUILD_ROLE_DELETE;
}

var GUILD_ROLE_UPDATE;
var hasRequiredGUILD_ROLE_UPDATE;

function requireGUILD_ROLE_UPDATE () {
	if (hasRequiredGUILD_ROLE_UPDATE) return GUILD_ROLE_UPDATE;
	hasRequiredGUILD_ROLE_UPDATE = 1;

	GUILD_ROLE_UPDATE = (client, packet) => {
	  client.actions.GuildRoleUpdate.handle(packet.d);
	};
	return GUILD_ROLE_UPDATE;
}

var GUILD_SCHEDULED_EVENT_CREATE;
var hasRequiredGUILD_SCHEDULED_EVENT_CREATE;

function requireGUILD_SCHEDULED_EVENT_CREATE () {
	if (hasRequiredGUILD_SCHEDULED_EVENT_CREATE) return GUILD_SCHEDULED_EVENT_CREATE;
	hasRequiredGUILD_SCHEDULED_EVENT_CREATE = 1;

	GUILD_SCHEDULED_EVENT_CREATE = (client, packet) => {
	  client.actions.GuildScheduledEventCreate.handle(packet.d);
	};
	return GUILD_SCHEDULED_EVENT_CREATE;
}

var GUILD_SCHEDULED_EVENT_DELETE;
var hasRequiredGUILD_SCHEDULED_EVENT_DELETE;

function requireGUILD_SCHEDULED_EVENT_DELETE () {
	if (hasRequiredGUILD_SCHEDULED_EVENT_DELETE) return GUILD_SCHEDULED_EVENT_DELETE;
	hasRequiredGUILD_SCHEDULED_EVENT_DELETE = 1;

	GUILD_SCHEDULED_EVENT_DELETE = (client, packet) => {
	  client.actions.GuildScheduledEventDelete.handle(packet.d);
	};
	return GUILD_SCHEDULED_EVENT_DELETE;
}

var GUILD_SCHEDULED_EVENT_UPDATE;
var hasRequiredGUILD_SCHEDULED_EVENT_UPDATE;

function requireGUILD_SCHEDULED_EVENT_UPDATE () {
	if (hasRequiredGUILD_SCHEDULED_EVENT_UPDATE) return GUILD_SCHEDULED_EVENT_UPDATE;
	hasRequiredGUILD_SCHEDULED_EVENT_UPDATE = 1;

	GUILD_SCHEDULED_EVENT_UPDATE = (client, packet) => {
	  client.actions.GuildScheduledEventUpdate.handle(packet.d);
	};
	return GUILD_SCHEDULED_EVENT_UPDATE;
}

var GUILD_SCHEDULED_EVENT_USER_ADD;
var hasRequiredGUILD_SCHEDULED_EVENT_USER_ADD;

function requireGUILD_SCHEDULED_EVENT_USER_ADD () {
	if (hasRequiredGUILD_SCHEDULED_EVENT_USER_ADD) return GUILD_SCHEDULED_EVENT_USER_ADD;
	hasRequiredGUILD_SCHEDULED_EVENT_USER_ADD = 1;

	GUILD_SCHEDULED_EVENT_USER_ADD = (client, packet) => {
	  client.actions.GuildScheduledEventUserAdd.handle(packet.d);
	};
	return GUILD_SCHEDULED_EVENT_USER_ADD;
}

var GUILD_SCHEDULED_EVENT_USER_REMOVE;
var hasRequiredGUILD_SCHEDULED_EVENT_USER_REMOVE;

function requireGUILD_SCHEDULED_EVENT_USER_REMOVE () {
	if (hasRequiredGUILD_SCHEDULED_EVENT_USER_REMOVE) return GUILD_SCHEDULED_EVENT_USER_REMOVE;
	hasRequiredGUILD_SCHEDULED_EVENT_USER_REMOVE = 1;

	GUILD_SCHEDULED_EVENT_USER_REMOVE = (client, packet) => {
	  client.actions.GuildScheduledEventUserRemove.handle(packet.d);
	};
	return GUILD_SCHEDULED_EVENT_USER_REMOVE;
}

var GUILD_STICKERS_UPDATE;
var hasRequiredGUILD_STICKERS_UPDATE;

function requireGUILD_STICKERS_UPDATE () {
	if (hasRequiredGUILD_STICKERS_UPDATE) return GUILD_STICKERS_UPDATE;
	hasRequiredGUILD_STICKERS_UPDATE = 1;

	GUILD_STICKERS_UPDATE = (client, packet) => {
	  client.actions.GuildStickersUpdate.handle(packet.d);
	};
	return GUILD_STICKERS_UPDATE;
}

var GUILD_UPDATE;
var hasRequiredGUILD_UPDATE;

function requireGUILD_UPDATE () {
	if (hasRequiredGUILD_UPDATE) return GUILD_UPDATE;
	hasRequiredGUILD_UPDATE = 1;

	GUILD_UPDATE = (client, packet) => {
	  client.actions.GuildUpdate.handle(packet.d);
	};
	return GUILD_UPDATE;
}

var INTERACTION_CREATE;
var hasRequiredINTERACTION_CREATE;

function requireINTERACTION_CREATE () {
	if (hasRequiredINTERACTION_CREATE) return INTERACTION_CREATE;
	hasRequiredINTERACTION_CREATE = 1;

	INTERACTION_CREATE = (client, packet) => {
	  client.actions.InteractionCreate.handle(packet.d);
	};
	return INTERACTION_CREATE;
}

var INVITE_CREATE;
var hasRequiredINVITE_CREATE;

function requireINVITE_CREATE () {
	if (hasRequiredINVITE_CREATE) return INVITE_CREATE;
	hasRequiredINVITE_CREATE = 1;

	INVITE_CREATE = (client, packet) => {
	  client.actions.InviteCreate.handle(packet.d);
	};
	return INVITE_CREATE;
}

var INVITE_DELETE;
var hasRequiredINVITE_DELETE;

function requireINVITE_DELETE () {
	if (hasRequiredINVITE_DELETE) return INVITE_DELETE;
	hasRequiredINVITE_DELETE = 1;

	INVITE_DELETE = (client, packet) => {
	  client.actions.InviteDelete.handle(packet.d);
	};
	return INVITE_DELETE;
}

var MESSAGE_CREATE;
var hasRequiredMESSAGE_CREATE;

function requireMESSAGE_CREATE () {
	if (hasRequiredMESSAGE_CREATE) return MESSAGE_CREATE;
	hasRequiredMESSAGE_CREATE = 1;

	MESSAGE_CREATE = (client, packet) => {
	  client.actions.MessageCreate.handle(packet.d);
	};
	return MESSAGE_CREATE;
}

var MESSAGE_DELETE;
var hasRequiredMESSAGE_DELETE;

function requireMESSAGE_DELETE () {
	if (hasRequiredMESSAGE_DELETE) return MESSAGE_DELETE;
	hasRequiredMESSAGE_DELETE = 1;

	MESSAGE_DELETE = (client, packet) => {
	  client.actions.MessageDelete.handle(packet.d);
	};
	return MESSAGE_DELETE;
}

var MESSAGE_DELETE_BULK;
var hasRequiredMESSAGE_DELETE_BULK;

function requireMESSAGE_DELETE_BULK () {
	if (hasRequiredMESSAGE_DELETE_BULK) return MESSAGE_DELETE_BULK;
	hasRequiredMESSAGE_DELETE_BULK = 1;

	MESSAGE_DELETE_BULK = (client, packet) => {
	  client.actions.MessageDeleteBulk.handle(packet.d);
	};
	return MESSAGE_DELETE_BULK;
}

var MESSAGE_POLL_VOTE_ADD;
var hasRequiredMESSAGE_POLL_VOTE_ADD;

function requireMESSAGE_POLL_VOTE_ADD () {
	if (hasRequiredMESSAGE_POLL_VOTE_ADD) return MESSAGE_POLL_VOTE_ADD;
	hasRequiredMESSAGE_POLL_VOTE_ADD = 1;

	MESSAGE_POLL_VOTE_ADD = (client, packet) => {
	  client.actions.MessagePollVoteAdd.handle(packet.d);
	};
	return MESSAGE_POLL_VOTE_ADD;
}

var MESSAGE_POLL_VOTE_REMOVE;
var hasRequiredMESSAGE_POLL_VOTE_REMOVE;

function requireMESSAGE_POLL_VOTE_REMOVE () {
	if (hasRequiredMESSAGE_POLL_VOTE_REMOVE) return MESSAGE_POLL_VOTE_REMOVE;
	hasRequiredMESSAGE_POLL_VOTE_REMOVE = 1;

	MESSAGE_POLL_VOTE_REMOVE = (client, packet) => {
	  client.actions.MessagePollVoteRemove.handle(packet.d);
	};
	return MESSAGE_POLL_VOTE_REMOVE;
}

var MESSAGE_REACTION_ADD;
var hasRequiredMESSAGE_REACTION_ADD;

function requireMESSAGE_REACTION_ADD () {
	if (hasRequiredMESSAGE_REACTION_ADD) return MESSAGE_REACTION_ADD;
	hasRequiredMESSAGE_REACTION_ADD = 1;

	MESSAGE_REACTION_ADD = (client, packet) => {
	  client.actions.MessageReactionAdd.handle(packet.d);
	};
	return MESSAGE_REACTION_ADD;
}

var MESSAGE_REACTION_REMOVE;
var hasRequiredMESSAGE_REACTION_REMOVE;

function requireMESSAGE_REACTION_REMOVE () {
	if (hasRequiredMESSAGE_REACTION_REMOVE) return MESSAGE_REACTION_REMOVE;
	hasRequiredMESSAGE_REACTION_REMOVE = 1;

	MESSAGE_REACTION_REMOVE = (client, packet) => {
	  client.actions.MessageReactionRemove.handle(packet.d);
	};
	return MESSAGE_REACTION_REMOVE;
}

var MESSAGE_REACTION_REMOVE_ALL;
var hasRequiredMESSAGE_REACTION_REMOVE_ALL;

function requireMESSAGE_REACTION_REMOVE_ALL () {
	if (hasRequiredMESSAGE_REACTION_REMOVE_ALL) return MESSAGE_REACTION_REMOVE_ALL;
	hasRequiredMESSAGE_REACTION_REMOVE_ALL = 1;

	MESSAGE_REACTION_REMOVE_ALL = (client, packet) => {
	  client.actions.MessageReactionRemoveAll.handle(packet.d);
	};
	return MESSAGE_REACTION_REMOVE_ALL;
}

var MESSAGE_REACTION_REMOVE_EMOJI;
var hasRequiredMESSAGE_REACTION_REMOVE_EMOJI;

function requireMESSAGE_REACTION_REMOVE_EMOJI () {
	if (hasRequiredMESSAGE_REACTION_REMOVE_EMOJI) return MESSAGE_REACTION_REMOVE_EMOJI;
	hasRequiredMESSAGE_REACTION_REMOVE_EMOJI = 1;

	MESSAGE_REACTION_REMOVE_EMOJI = (client, packet) => {
	  client.actions.MessageReactionRemoveEmoji.handle(packet.d);
	};
	return MESSAGE_REACTION_REMOVE_EMOJI;
}

var MESSAGE_UPDATE;
var hasRequiredMESSAGE_UPDATE;

function requireMESSAGE_UPDATE () {
	if (hasRequiredMESSAGE_UPDATE) return MESSAGE_UPDATE;
	hasRequiredMESSAGE_UPDATE = 1;

	const Events = requireEvents();

	MESSAGE_UPDATE = (client, packet) => {
	  const { old, updated } = client.actions.MessageUpdate.handle(packet.d);
	  if (old && updated) {
	    /**
	     * Emitted whenever a message is updated - e.g. embed or content change.
	     * @event Client#messageUpdate
	     * @param {Message} oldMessage The message before the update
	     * @param {Message} newMessage The message after the update
	     */
	    client.emit(Events.MessageUpdate, old, updated);
	  }
	};
	return MESSAGE_UPDATE;
}

var PRESENCE_UPDATE;
var hasRequiredPRESENCE_UPDATE;

function requirePRESENCE_UPDATE () {
	if (hasRequiredPRESENCE_UPDATE) return PRESENCE_UPDATE;
	hasRequiredPRESENCE_UPDATE = 1;

	PRESENCE_UPDATE = (client, packet) => {
	  client.actions.PresenceUpdate.handle(packet.d);
	};
	return PRESENCE_UPDATE;
}

var ClientUser_1;
var hasRequiredClientUser;

function requireClientUser () {
	if (hasRequiredClientUser) return ClientUser_1;
	hasRequiredClientUser = 1;

	const { Routes } = requireV10$6();
	const User = requireUser$3();
	const { resolveImage } = requireDataResolver();

	/**
	 * Represents the logged in client's Discord user.
	 * @extends {User}
	 */
	class ClientUser extends User {
	  _patch(data) {
	    super._patch(data);

	    if ('verified' in data) {
	      /**
	       * Whether or not this account has been verified
	       * @type {boolean}
	       */
	      this.verified = data.verified;
	    }

	    if ('mfa_enabled' in data) {
	      /**
	       * If the bot's {@link ClientApplication#owner Owner} has MFA enabled on their account
	       * @type {?boolean}
	       */
	      this.mfaEnabled = typeof data.mfa_enabled === 'boolean' ? data.mfa_enabled : null;
	    } else {
	      this.mfaEnabled ??= null;
	    }

	    if ('token' in data) this.client.token = data.token;
	  }

	  /**
	   * Represents the client user's presence
	   * @type {ClientPresence}
	   * @readonly
	   */
	  get presence() {
	    return this.client.presence;
	  }

	  /**
	   * Data used to edit the logged in client
	   * @typedef {Object} ClientUserEditOptions
	   * @property {string} [username] The new username
	   * @property {?(BufferResolvable|Base64Resolvable)} [avatar] The new avatar
	   * @property {?(BufferResolvable|Base64Resolvable)} [banner] The new banner
	   */

	  /**
	   * Edits the logged in client.
	   * @param {ClientUserEditOptions} options The options to provide
	   * @returns {Promise<ClientUser>}
	   */
	  async edit({ username, avatar, banner }) {
	    const data = await this.client.rest.patch(Routes.user(), {
	      body: {
	        username,
	        avatar: avatar && (await resolveImage(avatar)),
	        banner: banner && (await resolveImage(banner)),
	      },
	    });

	    this.client.token = data.token;
	    this.client.rest.setToken(data.token);
	    const { updated } = this.client.actions.UserUpdate.handle(data);
	    return updated ?? this;
	  }

	  /**
	   * Sets the username of the logged in client.
	   * <info>Changing usernames in Discord is heavily rate limited, with only 2 requests
	   * every hour. Use this sparingly!</info>
	   * @param {string} username The new username
	   * @returns {Promise<ClientUser>}
	   * @example
	   * // Set username
	   * client.user.setUsername('discordjs')
	   *   .then(user => console.log(`My new username is ${user.username}`))
	   *   .catch(console.error);
	   */
	  setUsername(username) {
	    return this.edit({ username });
	  }

	  /**
	   * Sets the avatar of the logged in client.
	   * @param {?(BufferResolvable|Base64Resolvable)} avatar The new avatar
	   * @returns {Promise<ClientUser>}
	   * @example
	   * // Set avatar
	   * client.user.setAvatar('./avatar.png')
	   *   .then(user => console.log(`New avatar set!`))
	   *   .catch(console.error);
	   */
	  setAvatar(avatar) {
	    return this.edit({ avatar });
	  }

	  /**
	   * Sets the banner of the logged in client.
	   * @param {?(BufferResolvable|Base64Resolvable)} banner The new banner
	   * @returns {Promise<ClientUser>}
	   * @example
	   * // Set banner
	   * client.user.setBanner('./banner.png')
	   *   .then(user => console.log(`New banner set!`))
	   *   .catch(console.error);
	   */
	  setBanner(banner) {
	    return this.edit({ banner });
	  }

	  /**
	   * Options for setting activities
	   * @typedef {Object} ActivitiesOptions
	   * @property {string} name Name of the activity
	   * @property {string} [state] State of the activity
	   * @property {ActivityType} [type] Type of the activity
	   * @property {string} [url] Twitch / YouTube stream URL
	   */

	  /**
	   * Data resembling a raw Discord presence.
	   * @typedef {Object} PresenceData
	   * @property {PresenceStatusData} [status] Status of the user
	   * @property {boolean} [afk] Whether the user is AFK
	   * @property {ActivitiesOptions[]} [activities] Activity the user is playing
	   * @property {number|number[]} [shardId] Shard id(s) to have the activity set on
	   */

	  /**
	   * Sets the full presence of the client user.
	   * @param {PresenceData} data Data for the presence
	   * @returns {ClientPresence}
	   * @example
	   * // Set the client user's presence
	   * client.user.setPresence({ activities: [{ name: 'with discord.js' }], status: 'idle' });
	   */
	  setPresence(data) {
	    return this.client.presence.set(data);
	  }

	  /**
	   * A user's status. Must be one of:
	   * * `online`
	   * * `idle`
	   * * `invisible`
	   * * `dnd` (do not disturb)
	   * @typedef {string} PresenceStatusData
	   */

	  /**
	   * Sets the status of the client user.
	   * @param {PresenceStatusData} status Status to change to
	   * @param {number|number[]} [shardId] Shard id(s) to have the activity set on
	   * @returns {ClientPresence}
	   * @example
	   * // Set the client user's status
	   * client.user.setStatus('idle');
	   */
	  setStatus(status, shardId) {
	    return this.setPresence({ status, shardId });
	  }

	  /**
	   * Options for setting an activity.
	   * @typedef {Object} ActivityOptions
	   * @property {string} name Name of the activity
	   * @property {string} [state] State of the activity
	   * @property {string} [url] Twitch / YouTube stream URL
	   * @property {ActivityType} [type] Type of the activity
	   * @property {number|number[]} [shardId] Shard Id(s) to have the activity set on
	   */

	  /**
	   * Sets the activity the client user is playing.
	   * @param {string|ActivityOptions} name Activity being played, or options for setting the activity
	   * @param {ActivityOptions} [options] Options for setting the activity
	   * @returns {ClientPresence}
	   * @example
	   * // Set the client user's activity
	   * client.user.setActivity('discord.js', { type: ActivityType.Watching });
	   */
	  setActivity(name, options = {}) {
	    if (!name) return this.setPresence({ activities: [], shardId: options.shardId });

	    const activity = Object.assign({}, options, typeof name === 'object' ? name : { name });
	    return this.setPresence({ activities: [activity], shardId: activity.shardId });
	  }

	  /**
	   * Sets/removes the AFK flag for the client user.
	   * @param {boolean} [afk=true] Whether or not the user is AFK
	   * @param {number|number[]} [shardId] Shard Id(s) to have the AFK flag set on
	   * @returns {ClientPresence}
	   */
	  setAFK(afk = true, shardId) {
	    return this.setPresence({ afk, shardId });
	  }
	}

	ClientUser_1 = ClientUser;
	return ClientUser_1;
}

var READY;
var hasRequiredREADY;

function requireREADY () {
	if (hasRequiredREADY) return READY;
	hasRequiredREADY = 1;

	const ClientApplication = requireClientApplication();
	let ClientUser;

	READY = (client, { d: data }, shard) => {
	  if (client.user) {
	    client.user._patch(data.user);
	  } else {
	    ClientUser ??= requireClientUser();
	    client.user = new ClientUser(client, data.user);
	    client.users.cache.set(client.user.id, client.user);
	  }

	  for (const guild of data.guilds) {
	    guild.shardId = shard.id;
	    client.guilds._add(guild);
	  }

	  if (client.application) {
	    client.application._patch(data.application);
	  } else {
	    client.application = new ClientApplication(client, data.application);
	  }

	  shard.checkReady();
	};
	return READY;
}

var RESUMED;
var hasRequiredRESUMED;

function requireRESUMED () {
	if (hasRequiredRESUMED) return RESUMED;
	hasRequiredRESUMED = 1;

	const Events = requireEvents();

	RESUMED = (client, packet, shard) => {
	  const replayed = shard.sessionInfo.sequence - shard.closeSequence;
	  /**
	   * Emitted when a shard resumes successfully.
	   * @event Client#shardResume
	   * @param {number} id The shard id that resumed
	   * @param {number} replayedEvents The amount of replayed events
	   */
	  client.emit(Events.ShardResume, shard.id, replayed);
	};
	return RESUMED;
}

var STAGE_INSTANCE_CREATE;
var hasRequiredSTAGE_INSTANCE_CREATE;

function requireSTAGE_INSTANCE_CREATE () {
	if (hasRequiredSTAGE_INSTANCE_CREATE) return STAGE_INSTANCE_CREATE;
	hasRequiredSTAGE_INSTANCE_CREATE = 1;

	STAGE_INSTANCE_CREATE = (client, packet) => {
	  client.actions.StageInstanceCreate.handle(packet.d);
	};
	return STAGE_INSTANCE_CREATE;
}

var STAGE_INSTANCE_DELETE;
var hasRequiredSTAGE_INSTANCE_DELETE;

function requireSTAGE_INSTANCE_DELETE () {
	if (hasRequiredSTAGE_INSTANCE_DELETE) return STAGE_INSTANCE_DELETE;
	hasRequiredSTAGE_INSTANCE_DELETE = 1;

	STAGE_INSTANCE_DELETE = (client, packet) => {
	  client.actions.StageInstanceDelete.handle(packet.d);
	};
	return STAGE_INSTANCE_DELETE;
}

var STAGE_INSTANCE_UPDATE;
var hasRequiredSTAGE_INSTANCE_UPDATE;

function requireSTAGE_INSTANCE_UPDATE () {
	if (hasRequiredSTAGE_INSTANCE_UPDATE) return STAGE_INSTANCE_UPDATE;
	hasRequiredSTAGE_INSTANCE_UPDATE = 1;

	STAGE_INSTANCE_UPDATE = (client, packet) => {
	  client.actions.StageInstanceUpdate.handle(packet.d);
	};
	return STAGE_INSTANCE_UPDATE;
}

var THREAD_CREATE;
var hasRequiredTHREAD_CREATE;

function requireTHREAD_CREATE () {
	if (hasRequiredTHREAD_CREATE) return THREAD_CREATE;
	hasRequiredTHREAD_CREATE = 1;

	THREAD_CREATE = (client, packet) => {
	  client.actions.ThreadCreate.handle(packet.d);
	};
	return THREAD_CREATE;
}

var THREAD_DELETE;
var hasRequiredTHREAD_DELETE;

function requireTHREAD_DELETE () {
	if (hasRequiredTHREAD_DELETE) return THREAD_DELETE;
	hasRequiredTHREAD_DELETE = 1;

	THREAD_DELETE = (client, packet) => {
	  client.actions.ThreadDelete.handle(packet.d);
	};
	return THREAD_DELETE;
}

var THREAD_LIST_SYNC;
var hasRequiredTHREAD_LIST_SYNC;

function requireTHREAD_LIST_SYNC () {
	if (hasRequiredTHREAD_LIST_SYNC) return THREAD_LIST_SYNC;
	hasRequiredTHREAD_LIST_SYNC = 1;

	THREAD_LIST_SYNC = (client, packet) => {
	  client.actions.ThreadListSync.handle(packet.d);
	};
	return THREAD_LIST_SYNC;
}

var THREAD_MEMBERS_UPDATE;
var hasRequiredTHREAD_MEMBERS_UPDATE;

function requireTHREAD_MEMBERS_UPDATE () {
	if (hasRequiredTHREAD_MEMBERS_UPDATE) return THREAD_MEMBERS_UPDATE;
	hasRequiredTHREAD_MEMBERS_UPDATE = 1;

	THREAD_MEMBERS_UPDATE = (client, packet) => {
	  client.actions.ThreadMembersUpdate.handle(packet.d);
	};
	return THREAD_MEMBERS_UPDATE;
}

var THREAD_MEMBER_UPDATE;
var hasRequiredTHREAD_MEMBER_UPDATE;

function requireTHREAD_MEMBER_UPDATE () {
	if (hasRequiredTHREAD_MEMBER_UPDATE) return THREAD_MEMBER_UPDATE;
	hasRequiredTHREAD_MEMBER_UPDATE = 1;

	THREAD_MEMBER_UPDATE = (client, packet) => {
	  client.actions.ThreadMemberUpdate.handle(packet.d);
	};
	return THREAD_MEMBER_UPDATE;
}

var THREAD_UPDATE;
var hasRequiredTHREAD_UPDATE;

function requireTHREAD_UPDATE () {
	if (hasRequiredTHREAD_UPDATE) return THREAD_UPDATE;
	hasRequiredTHREAD_UPDATE = 1;

	const Events = requireEvents();

	THREAD_UPDATE = (client, packet) => {
	  const { old, updated } = client.actions.ChannelUpdate.handle(packet.d);
	  if (old && updated) {
	    /**
	     * Emitted whenever a thread is updated - e.g. name change, archive state change, locked state change.
	     * @event Client#threadUpdate
	     * @param {ThreadChannel} oldThread The thread before the update
	     * @param {ThreadChannel} newThread The thread after the update
	     */
	    client.emit(Events.ThreadUpdate, old, updated);
	  }
	};
	return THREAD_UPDATE;
}

var TYPING_START;
var hasRequiredTYPING_START;

function requireTYPING_START () {
	if (hasRequiredTYPING_START) return TYPING_START;
	hasRequiredTYPING_START = 1;

	TYPING_START = (client, packet) => {
	  client.actions.TypingStart.handle(packet.d);
	};
	return TYPING_START;
}

var USER_UPDATE;
var hasRequiredUSER_UPDATE;

function requireUSER_UPDATE () {
	if (hasRequiredUSER_UPDATE) return USER_UPDATE;
	hasRequiredUSER_UPDATE = 1;

	USER_UPDATE = (client, packet) => {
	  client.actions.UserUpdate.handle(packet.d);
	};
	return USER_UPDATE;
}

var VOICE_SERVER_UPDATE;
var hasRequiredVOICE_SERVER_UPDATE;

function requireVOICE_SERVER_UPDATE () {
	if (hasRequiredVOICE_SERVER_UPDATE) return VOICE_SERVER_UPDATE;
	hasRequiredVOICE_SERVER_UPDATE = 1;

	VOICE_SERVER_UPDATE = (client, packet) => {
	  client.emit('debug', `[VOICE] received voice server: ${JSON.stringify(packet)}`);
	  client.voice.onVoiceServer(packet.d);
	};
	return VOICE_SERVER_UPDATE;
}

var VOICE_STATE_UPDATE;
var hasRequiredVOICE_STATE_UPDATE;

function requireVOICE_STATE_UPDATE () {
	if (hasRequiredVOICE_STATE_UPDATE) return VOICE_STATE_UPDATE;
	hasRequiredVOICE_STATE_UPDATE = 1;

	VOICE_STATE_UPDATE = (client, packet) => {
	  client.actions.VoiceStateUpdate.handle(packet.d);
	};
	return VOICE_STATE_UPDATE;
}

var WEBHOOKS_UPDATE;
var hasRequiredWEBHOOKS_UPDATE;

function requireWEBHOOKS_UPDATE () {
	if (hasRequiredWEBHOOKS_UPDATE) return WEBHOOKS_UPDATE;
	hasRequiredWEBHOOKS_UPDATE = 1;

	WEBHOOKS_UPDATE = (client, packet) => {
	  client.actions.WebhooksUpdate.handle(packet.d);
	};
	return WEBHOOKS_UPDATE;
}

var handlers_1;
var hasRequiredHandlers;

function requireHandlers () {
	if (hasRequiredHandlers) return handlers_1;
	hasRequiredHandlers = 1;

	const handlers = Object.fromEntries([
	  ['APPLICATION_COMMAND_PERMISSIONS_UPDATE', requireAPPLICATION_COMMAND_PERMISSIONS_UPDATE()],
	  ['AUTO_MODERATION_ACTION_EXECUTION', requireAUTO_MODERATION_ACTION_EXECUTION()],
	  ['AUTO_MODERATION_RULE_CREATE', requireAUTO_MODERATION_RULE_CREATE()],
	  ['AUTO_MODERATION_RULE_DELETE', requireAUTO_MODERATION_RULE_DELETE()],
	  ['AUTO_MODERATION_RULE_UPDATE', requireAUTO_MODERATION_RULE_UPDATE()],
	  ['CHANNEL_CREATE', requireCHANNEL_CREATE()],
	  ['CHANNEL_DELETE', requireCHANNEL_DELETE()],
	  ['CHANNEL_PINS_UPDATE', requireCHANNEL_PINS_UPDATE()],
	  ['CHANNEL_UPDATE', requireCHANNEL_UPDATE()],
	  ['ENTITLEMENT_CREATE', requireENTITLEMENT_CREATE()],
	  ['ENTITLEMENT_DELETE', requireENTITLEMENT_DELETE()],
	  ['ENTITLEMENT_UPDATE', requireENTITLEMENT_UPDATE()],
	  ['GUILD_AUDIT_LOG_ENTRY_CREATE', requireGUILD_AUDIT_LOG_ENTRY_CREATE()],
	  ['GUILD_BAN_ADD', requireGUILD_BAN_ADD()],
	  ['GUILD_BAN_REMOVE', requireGUILD_BAN_REMOVE()],
	  ['GUILD_CREATE', requireGUILD_CREATE()],
	  ['GUILD_DELETE', requireGUILD_DELETE()],
	  ['GUILD_EMOJIS_UPDATE', requireGUILD_EMOJIS_UPDATE()],
	  ['GUILD_INTEGRATIONS_UPDATE', requireGUILD_INTEGRATIONS_UPDATE()],
	  ['GUILD_MEMBERS_CHUNK', requireGUILD_MEMBERS_CHUNK()],
	  ['GUILD_MEMBER_ADD', requireGUILD_MEMBER_ADD()],
	  ['GUILD_MEMBER_REMOVE', requireGUILD_MEMBER_REMOVE()],
	  ['GUILD_MEMBER_UPDATE', requireGUILD_MEMBER_UPDATE()],
	  ['GUILD_ROLE_CREATE', requireGUILD_ROLE_CREATE()],
	  ['GUILD_ROLE_DELETE', requireGUILD_ROLE_DELETE()],
	  ['GUILD_ROLE_UPDATE', requireGUILD_ROLE_UPDATE()],
	  ['GUILD_SCHEDULED_EVENT_CREATE', requireGUILD_SCHEDULED_EVENT_CREATE()],
	  ['GUILD_SCHEDULED_EVENT_DELETE', requireGUILD_SCHEDULED_EVENT_DELETE()],
	  ['GUILD_SCHEDULED_EVENT_UPDATE', requireGUILD_SCHEDULED_EVENT_UPDATE()],
	  ['GUILD_SCHEDULED_EVENT_USER_ADD', requireGUILD_SCHEDULED_EVENT_USER_ADD()],
	  ['GUILD_SCHEDULED_EVENT_USER_REMOVE', requireGUILD_SCHEDULED_EVENT_USER_REMOVE()],
	  ['GUILD_STICKERS_UPDATE', requireGUILD_STICKERS_UPDATE()],
	  ['GUILD_UPDATE', requireGUILD_UPDATE()],
	  ['INTERACTION_CREATE', requireINTERACTION_CREATE()],
	  ['INVITE_CREATE', requireINVITE_CREATE()],
	  ['INVITE_DELETE', requireINVITE_DELETE()],
	  ['MESSAGE_CREATE', requireMESSAGE_CREATE()],
	  ['MESSAGE_DELETE', requireMESSAGE_DELETE()],
	  ['MESSAGE_DELETE_BULK', requireMESSAGE_DELETE_BULK()],
	  ['MESSAGE_POLL_VOTE_ADD', requireMESSAGE_POLL_VOTE_ADD()],
	  ['MESSAGE_POLL_VOTE_REMOVE', requireMESSAGE_POLL_VOTE_REMOVE()],
	  ['MESSAGE_REACTION_ADD', requireMESSAGE_REACTION_ADD()],
	  ['MESSAGE_REACTION_REMOVE', requireMESSAGE_REACTION_REMOVE()],
	  ['MESSAGE_REACTION_REMOVE_ALL', requireMESSAGE_REACTION_REMOVE_ALL()],
	  ['MESSAGE_REACTION_REMOVE_EMOJI', requireMESSAGE_REACTION_REMOVE_EMOJI()],
	  ['MESSAGE_UPDATE', requireMESSAGE_UPDATE()],
	  ['PRESENCE_UPDATE', requirePRESENCE_UPDATE()],
	  ['READY', requireREADY()],
	  ['RESUMED', requireRESUMED()],
	  ['STAGE_INSTANCE_CREATE', requireSTAGE_INSTANCE_CREATE()],
	  ['STAGE_INSTANCE_DELETE', requireSTAGE_INSTANCE_DELETE()],
	  ['STAGE_INSTANCE_UPDATE', requireSTAGE_INSTANCE_UPDATE()],
	  ['THREAD_CREATE', requireTHREAD_CREATE()],
	  ['THREAD_DELETE', requireTHREAD_DELETE()],
	  ['THREAD_LIST_SYNC', requireTHREAD_LIST_SYNC()],
	  ['THREAD_MEMBERS_UPDATE', requireTHREAD_MEMBERS_UPDATE()],
	  ['THREAD_MEMBER_UPDATE', requireTHREAD_MEMBER_UPDATE()],
	  ['THREAD_UPDATE', requireTHREAD_UPDATE()],
	  ['TYPING_START', requireTYPING_START()],
	  ['USER_UPDATE', requireUSER_UPDATE()],
	  ['VOICE_SERVER_UPDATE', requireVOICE_SERVER_UPDATE()],
	  ['VOICE_STATE_UPDATE', requireVOICE_STATE_UPDATE()],
	  ['WEBHOOKS_UPDATE', requireWEBHOOKS_UPDATE()],
	]);

	handlers_1 = handlers;
	return handlers_1;
}

var WebSocketManager_1;
var hasRequiredWebSocketManager;

function requireWebSocketManager () {
	if (hasRequiredWebSocketManager) return WebSocketManager_1;
	hasRequiredWebSocketManager = 1;

	const EventEmitter = require$$0$b;
	const process = require$$0$d;
	const { setImmediate } = require$$0$e;
	const { Collection } = requireDist$3();
	const {
	  WebSocketManager: WSWebSocketManager,
	  WebSocketShardEvents: WSWebSocketShardEvents,
	  CompressionMethod,
	  CloseCodes,
	} = requireDist();
	const { GatewayCloseCodes, GatewayDispatchEvents } = requireV10$6();
	const WebSocketShard = requireWebSocketShard();
	const PacketHandlers = requireHandlers();
	const { DiscordjsError, ErrorCodes } = requireErrors$1();
	const Events = requireEvents();
	const Status = requireStatus();
	const WebSocketShardEvents = requireWebSocketShardEvents();

	let zlib;

	try {
	  zlib = require('zlib-sync');
	} catch {} // eslint-disable-line no-empty

	const BeforeReadyWhitelist = [
	  GatewayDispatchEvents.Ready,
	  GatewayDispatchEvents.Resumed,
	  GatewayDispatchEvents.GuildCreate,
	  GatewayDispatchEvents.GuildDelete,
	  GatewayDispatchEvents.GuildMembersChunk,
	  GatewayDispatchEvents.GuildMemberAdd,
	  GatewayDispatchEvents.GuildMemberRemove,
	];

	const WaitingForGuildEvents = [GatewayDispatchEvents.GuildCreate, GatewayDispatchEvents.GuildDelete];

	const UNRESUMABLE_CLOSE_CODES = [
	  CloseCodes.Normal,
	  GatewayCloseCodes.AlreadyAuthenticated,
	  GatewayCloseCodes.InvalidSeq,
	];

	const reasonIsDeprecated = 'the reason property is deprecated, use the code property to determine the reason';
	let deprecationEmittedForInvalidSessionEvent = false;
	let deprecationEmittedForDestroyedEvent = false;

	/**
	 * The WebSocket manager for this client.
	 * <info>This class forwards raw dispatch events,
	 * read more about it here {@link https://discord.com/developers/docs/topics/gateway}</info>
	 * @extends {EventEmitter}
	 */
	class WebSocketManager extends EventEmitter {
	  constructor(client) {
	    super();

	    /**
	     * The client that instantiated this WebSocketManager
	     * @type {Client}
	     * @readonly
	     * @name WebSocketManager#client
	     */
	    Object.defineProperty(this, 'client', { value: client });

	    /**
	     * The gateway this manager uses
	     * @type {?string}
	     */
	    this.gateway = null;

	    /**
	     * A collection of all shards this manager handles
	     * @type {Collection<number, WebSocketShard>}
	     */
	    this.shards = new Collection();

	    /**
	     * An array of queued events before this WebSocketManager became ready
	     * @type {Object[]}
	     * @private
	     * @name WebSocketManager#packetQueue
	     */
	    Object.defineProperty(this, 'packetQueue', { value: [] });

	    /**
	     * The current status of this WebSocketManager
	     * @type {Status}
	     */
	    this.status = Status.Idle;

	    /**
	     * If this manager was destroyed. It will prevent shards from reconnecting
	     * @type {boolean}
	     * @private
	     */
	    this.destroyed = false;

	    /**
	     * The internal WebSocketManager from `@discordjs/ws`.
	     * @type {WSWebSocketManager}
	     * @private
	     */
	    this._ws = null;
	  }

	  /**
	   * The average ping of all WebSocketShards
	   * @type {number}
	   * @readonly
	   */
	  get ping() {
	    const sum = this.shards.reduce((a, b) => a + b.ping, 0);
	    return sum / this.shards.size;
	  }

	  /**
	   * Emits a debug message.
	   * @param {string[]} messages The debug message
	   * @param {?number} [shardId] The id of the shard that emitted this message, if any
	   * @private
	   */
	  debug(messages, shardId) {
	    this.client.emit(
	      Events.Debug,
	      `[WS => ${typeof shardId === 'number' ? `Shard ${shardId}` : 'Manager'}] ${messages.join('\n\t')}`,
	    );
	  }

	  /**
	   * Connects this manager to the gateway.
	   * @private
	   */
	  async connect() {
	    const invalidToken = new DiscordjsError(ErrorCodes.TokenInvalid);
	    const { shards, shardCount, intents, ws } = this.client.options;
	    if (this._ws && this._ws.options.token !== this.client.token) {
	      await this._ws.destroy({ code: CloseCodes.Normal, reason: 'Login with differing token requested' });
	      this._ws = null;
	    }
	    if (!this._ws) {
	      const wsOptions = {
	        intents: intents.bitfield,
	        rest: this.client.rest,
	        token: this.client.token,
	        largeThreshold: ws.large_threshold,
	        version: ws.version,
	        shardIds: shards === 'auto' ? null : shards,
	        shardCount: shards === 'auto' ? null : shardCount,
	        initialPresence: ws.presence,
	        retrieveSessionInfo: shardId => this.shards.get(shardId).sessionInfo,
	        updateSessionInfo: (shardId, sessionInfo) => {
	          this.shards.get(shardId).sessionInfo = sessionInfo;
	        },
	        compression: zlib ? CompressionMethod.ZlibStream : null,
	      };
	      if (ws.buildIdentifyThrottler) wsOptions.buildIdentifyThrottler = ws.buildIdentifyThrottler;
	      if (ws.buildStrategy) wsOptions.buildStrategy = ws.buildStrategy;
	      this._ws = new WSWebSocketManager(wsOptions);
	      this.attachEvents();
	    }

	    const {
	      url: gatewayURL,
	      shards: recommendedShards,
	      session_start_limit: sessionStartLimit,
	    } = await this._ws.fetchGatewayInformation().catch(error => {
	      throw error.status === 401 ? invalidToken : error;
	    });

	    const { total, remaining } = sessionStartLimit;
	    this.debug(['Fetched Gateway Information', `URL: ${gatewayURL}`, `Recommended Shards: ${recommendedShards}`]);
	    this.debug(['Session Limit Information', `Total: ${total}`, `Remaining: ${remaining}`]);
	    this.gateway = `${gatewayURL}/`;

	    this.client.options.shardCount = await this._ws.getShardCount();
	    this.client.options.shards = await this._ws.getShardIds();
	    this.totalShards = this.client.options.shards.length;
	    for (const id of this.client.options.shards) {
	      if (!this.shards.has(id)) {
	        const shard = new WebSocketShard(this, id);
	        this.shards.set(id, shard);

	        shard.on(WebSocketShardEvents.AllReady, unavailableGuilds => {
	          /**
	           * Emitted when a shard turns ready.
	           * @event Client#shardReady
	           * @param {number} id The shard id that turned ready
	           * @param {?Set<Snowflake>} unavailableGuilds Set of unavailable guild ids, if any
	           */
	          this.client.emit(Events.ShardReady, shard.id, unavailableGuilds);

	          this.checkShardsReady();
	        });
	        shard.status = Status.Connecting;
	      }
	    }

	    await this._ws.connect();

	    this.shards.forEach(shard => {
	      if (shard.listenerCount(WebSocketShardEvents.InvalidSession) > 0 && !deprecationEmittedForInvalidSessionEvent) {
	        process.emitWarning(
	          'The WebSocketShard#invalidSession event is deprecated and will never emit.',
	          'DeprecationWarning',
	        );

	        deprecationEmittedForInvalidSessionEvent = true;
	      }
	      if (shard.listenerCount(WebSocketShardEvents.Destroyed) > 0 && !deprecationEmittedForDestroyedEvent) {
	        process.emitWarning(
	          'The WebSocketShard#destroyed event is deprecated and will never emit.',
	          'DeprecationWarning',
	        );

	        deprecationEmittedForDestroyedEvent = true;
	      }
	    });
	  }

	  /**
	   * Attaches event handlers to the internal WebSocketShardManager from `@discordjs/ws`.
	   * @private
	   */
	  attachEvents() {
	    this._ws.on(WSWebSocketShardEvents.Debug, ({ message, shardId }) => this.debug([message], shardId));
	    this._ws.on(WSWebSocketShardEvents.Dispatch, ({ data, shardId }) => {
	      this.client.emit(Events.Raw, data, shardId);
	      this.emit(data.t, data.d, shardId);
	      const shard = this.shards.get(shardId);
	      this.handlePacket(data, shard);
	      if (shard.status === Status.WaitingForGuilds && WaitingForGuildEvents.includes(data.t)) {
	        shard.gotGuild(data.d.id);
	      }
	    });

	    this._ws.on(WSWebSocketShardEvents.Ready, ({ data, shardId }) => {
	      this.shards.get(shardId).onReadyPacket(data);
	    });

	    this._ws.on(WSWebSocketShardEvents.Closed, ({ code, shardId }) => {
	      const shard = this.shards.get(shardId);
	      shard.emit(WebSocketShardEvents.Close, { code, reason: reasonIsDeprecated, wasClean: true });
	      if (UNRESUMABLE_CLOSE_CODES.includes(code) && this.destroyed) {
	        shard.status = Status.Disconnected;
	        /**
	         * Emitted when a shard's WebSocket disconnects and will no longer reconnect.
	         * @event Client#shardDisconnect
	         * @param {CloseEvent} event The WebSocket close event
	         * @param {number} id The shard id that disconnected
	         */
	        this.client.emit(Events.ShardDisconnect, { code, reason: reasonIsDeprecated, wasClean: true }, shardId);
	        this.debug([`Shard not resumable: ${code} (${GatewayCloseCodes[code] ?? CloseCodes[code]})`], shardId);
	        return;
	      }

	      this.shards.get(shardId).status = Status.Connecting;
	      /**
	       * Emitted when a shard is attempting to reconnect or re-identify.
	       * @event Client#shardReconnecting
	       * @param {number} id The shard id that is attempting to reconnect
	       */
	      this.client.emit(Events.ShardReconnecting, shardId);
	    });
	    this._ws.on(WSWebSocketShardEvents.Hello, ({ shardId }) => {
	      const shard = this.shards.get(shardId);
	      if (shard.sessionInfo) {
	        shard.closeSequence = shard.sessionInfo.sequence;
	        shard.status = Status.Resuming;
	      } else {
	        shard.status = Status.Identifying;
	      }
	    });

	    this._ws.on(WSWebSocketShardEvents.Resumed, ({ shardId }) => {
	      const shard = this.shards.get(shardId);
	      shard.status = Status.Ready;
	      /**
	       * Emitted when the shard resumes successfully
	       * @event WebSocketShard#resumed
	       */
	      shard.emit(WebSocketShardEvents.Resumed);
	    });

	    this._ws.on(WSWebSocketShardEvents.HeartbeatComplete, ({ heartbeatAt, latency, shardId }) => {
	      this.debug([`Heartbeat acknowledged, latency of ${latency}ms.`], shardId);
	      const shard = this.shards.get(shardId);
	      shard.lastPingTimestamp = heartbeatAt;
	      shard.ping = latency;
	    });

	    this._ws.on(WSWebSocketShardEvents.Error, ({ error, shardId }) => {
	      /**
	       * Emitted whenever a shard's WebSocket encounters a connection error.
	       * @event Client#shardError
	       * @param {Error} error The encountered error
	       * @param {number} shardId The shard that encountered this error
	       */
	      this.client.emit(Events.ShardError, error, shardId);
	    });
	  }

	  /**
	   * Broadcasts a packet to every shard this manager handles.
	   * @param {Object} packet The packet to send
	   * @private
	   */
	  broadcast(packet) {
	    for (const shardId of this.shards.keys()) this._ws.send(shardId, packet);
	  }

	  /**
	   * Destroys this manager and all its shards.
	   * @private
	   */
	  async destroy() {
	    if (this.destroyed) return;
	    // TODO: Make a util for getting a stack
	    this.debug([Object.assign(new Error(), { name: 'Manager was destroyed:' }).stack]);
	    this.destroyed = true;
	    await this._ws?.destroy({ code: CloseCodes.Normal, reason: 'Manager was destroyed' });
	  }

	  /**
	   * Processes a packet and queues it if this WebSocketManager is not ready.
	   * @param {Object} [packet] The packet to be handled
	   * @param {WebSocketShard} [shard] The shard that will handle this packet
	   * @returns {boolean}
	   * @private
	   */
	  handlePacket(packet, shard) {
	    if (packet && this.status !== Status.Ready) {
	      if (!BeforeReadyWhitelist.includes(packet.t)) {
	        this.packetQueue.push({ packet, shard });
	        return false;
	      }
	    }

	    if (this.packetQueue.length) {
	      const item = this.packetQueue.shift();
	      setImmediate(() => {
	        this.handlePacket(item.packet, item.shard);
	      }).unref();
	    }

	    if (packet && PacketHandlers[packet.t]) {
	      PacketHandlers[packet.t](this.client, packet, shard);
	    }

	    return true;
	  }

	  /**
	   * Checks whether the client is ready to be marked as ready.
	   * @private
	   */
	  checkShardsReady() {
	    if (this.status === Status.Ready) return;
	    if (this.shards.size !== this.totalShards || this.shards.some(shard => shard.status !== Status.Ready)) {
	      return;
	    }

	    this.triggerClientReady();
	  }

	  /**
	   * Causes the client to be marked as ready and emits the ready event.
	   * @private
	   */
	  triggerClientReady() {
	    this.status = Status.Ready;

	    this.client.readyTimestamp = Date.now();

	    /**
	     * Emitted when the client becomes ready to start working.
	     * @event Client#ready
	     * @param {Client} client The client
	     */
	    this.client.emit(Events.ClientReady, this.client);

	    this.handlePacket();
	  }
	}

	WebSocketManager_1 = WebSocketManager;
	return WebSocketManager_1;
}

var BaseGuildEmojiManager_1;
var hasRequiredBaseGuildEmojiManager;

function requireBaseGuildEmojiManager () {
	if (hasRequiredBaseGuildEmojiManager) return BaseGuildEmojiManager_1;
	hasRequiredBaseGuildEmojiManager = 1;

	const CachedManager = requireCachedManager();
	const GuildEmoji = requireGuildEmoji();
	const ReactionEmoji = requireReactionEmoji();
	const { parseEmoji } = requireUtil();

	/**
	 * Holds methods to resolve GuildEmojis and stores their cache.
	 * @extends {CachedManager}
	 */
	class BaseGuildEmojiManager extends CachedManager {
	  constructor(client, iterable) {
	    super(client, GuildEmoji, iterable);
	  }

	  /**
	   * The cache of GuildEmojis
	   * @type {Collection<Snowflake, GuildEmoji>}
	   * @name BaseGuildEmojiManager#cache
	   */

	  /**
	   * Data that can be resolved into a GuildEmoji object. This can be:
	   * * A Snowflake
	   * * A GuildEmoji object
	   * * A ReactionEmoji object
	   * @typedef {Snowflake|GuildEmoji|ReactionEmoji} EmojiResolvable
	   */

	  /**
	   * Resolves an EmojiResolvable to an Emoji object.
	   * @param {EmojiResolvable} emoji The Emoji resolvable to identify
	   * @returns {?GuildEmoji}
	   */
	  resolve(emoji) {
	    if (emoji instanceof ReactionEmoji) return super.resolve(emoji.id);
	    return super.resolve(emoji);
	  }

	  /**
	   * Resolves an EmojiResolvable to an Emoji id string.
	   * @param {EmojiResolvable} emoji The Emoji resolvable to identify
	   * @returns {?Snowflake}
	   */
	  resolveId(emoji) {
	    if (emoji instanceof ReactionEmoji) return emoji.id;
	    return super.resolveId(emoji);
	  }

	  /**
	   * Data that can be resolved to give an emoji identifier. This can be:
	   * * An EmojiResolvable
	   * * The `<a:name:id>`, `<:name:id>`, `a:name:id` or `name:id` emoji identifier string of an emoji
	   * * The Unicode representation of an emoji
	   * @typedef {string|EmojiResolvable} EmojiIdentifierResolvable
	   */

	  /**
	   * Resolves an EmojiResolvable to an emoji identifier.
	   * @param {EmojiIdentifierResolvable} emoji The emoji resolvable to resolve
	   * @returns {?string}
	   */
	  resolveIdentifier(emoji) {
	    const emojiResolvable = this.resolve(emoji);
	    if (emojiResolvable) return emojiResolvable.identifier;
	    if (emoji instanceof ReactionEmoji) return emoji.identifier;
	    if (typeof emoji === 'string') {
	      const res = parseEmoji(emoji);
	      if (res?.name.length) {
	        emoji = `${res.animated ? 'a:' : ''}${res.name}${res.id ? `:${res.id}` : ''}`;
	      }
	      if (!emoji.includes('%')) return encodeURIComponent(emoji);
	      return emoji;
	    }
	    return null;
	  }
	}

	BaseGuildEmojiManager_1 = BaseGuildEmojiManager;
	return BaseGuildEmojiManager_1;
}

var ChannelManager_1;
var hasRequiredChannelManager;

function requireChannelManager () {
	if (hasRequiredChannelManager) return ChannelManager_1;
	hasRequiredChannelManager = 1;

	const process = require$$0$d;
	const { Routes } = requireV10$6();
	const CachedManager = requireCachedManager();
	const { BaseChannel } = requireBaseChannel();
	const { createChannel } = requireChannels();
	const { ThreadChannelTypes } = requireConstants$1();
	const Events = requireEvents();

	let cacheWarningEmitted = false;

	/**
	 * A manager of channels belonging to a client
	 * @extends {CachedManager}
	 */
	class ChannelManager extends CachedManager {
	  constructor(client, iterable) {
	    super(client, BaseChannel, iterable);
	    const defaultCaching =
	      this._cache.constructor.name === 'Collection' ||
	      this._cache.maxSize === undefined ||
	      this._cache.maxSize === Infinity;
	    if (!cacheWarningEmitted && !defaultCaching) {
	      cacheWarningEmitted = true;
	      process.emitWarning(
	        `Overriding the cache handling for ${this.constructor.name} is unsupported and breaks functionality.`,
	        'UnsupportedCacheOverwriteWarning',
	      );
	    }
	  }

	  /**
	   * The cache of Channels
	   * @type {Collection<Snowflake, BaseChannel>}
	   * @name ChannelManager#cache
	   */

	  _add(data, guild, { cache = true, allowUnknownGuild = false } = {}) {
	    const existing = this.cache.get(data.id);
	    if (existing) {
	      if (cache) existing._patch(data);
	      guild?.channels?._add(existing);
	      if (ThreadChannelTypes.includes(existing.type)) {
	        existing.parent?.threads?._add(existing);
	      }
	      return existing;
	    }

	    const channel = createChannel(this.client, data, guild, { allowUnknownGuild });

	    if (!channel) {
	      this.client.emit(Events.Debug, `Failed to find guild, or unknown type for channel ${data.id} ${data.type}`);
	      return null;
	    }

	    if (cache && !allowUnknownGuild) this.cache.set(channel.id, channel);

	    return channel;
	  }

	  _remove(id) {
	    const channel = this.cache.get(id);
	    channel?.guild?.channels.cache.delete(id);

	    for (const [code, invite] of channel?.guild?.invites.cache ?? []) {
	      if (invite.channelId === id) channel.guild.invites.cache.delete(code);
	    }

	    channel?.parent?.threads?.cache.delete(id);
	    this.cache.delete(id);
	  }

	  /**
	   * Data that can be resolved to give a Channel object. This can be:
	   * * A Channel object
	   * * A Snowflake
	   * @typedef {BaseChannel|Snowflake} ChannelResolvable
	   */

	  /**
	   * Resolves a ChannelResolvable to a Channel object.
	   * @method resolve
	   * @memberof ChannelManager
	   * @instance
	   * @param {ChannelResolvable} channel The channel resolvable to resolve
	   * @returns {?BaseChannel}
	   */

	  /**
	   * Resolves a ChannelResolvable to a channel id string.
	   * @method resolveId
	   * @memberof ChannelManager
	   * @instance
	   * @param {ChannelResolvable} channel The channel resolvable to resolve
	   * @returns {?Snowflake}
	   */

	  /**
	   * Options for fetching a channel from Discord
	   * @typedef {BaseFetchOptions} FetchChannelOptions
	   * @property {boolean} [allowUnknownGuild=false] Allows the channel to be returned even if the guild is not in cache,
	   * it will not be cached. <warn>Many of the properties and methods on the returned channel will throw errors</warn>
	   */

	  /**
	   * Obtains a channel from Discord, or the channel cache if it's already available.
	   * @param {Snowflake} id The channel's id
	   * @param {FetchChannelOptions} [options] Additional options for this fetch
	   * @returns {Promise<?BaseChannel>}
	   * @example
	   * // Fetch a channel by its id
	   * client.channels.fetch('222109930545610754')
	   *   .then(channel => console.log(channel.name))
	   *   .catch(console.error);
	   */
	  async fetch(id, { allowUnknownGuild = false, cache = true, force = false } = {}) {
	    if (!force) {
	      const existing = this.cache.get(id);
	      if (existing && !existing.partial) return existing;
	    }

	    const data = await this.client.rest.get(Routes.channel(id));
	    return this._add(data, null, { cache, allowUnknownGuild });
	  }
	}

	ChannelManager_1 = ChannelManager;
	return ChannelManager_1;
}

var ShardClientUtil_1;
var hasRequiredShardClientUtil;

function requireShardClientUtil () {
	if (hasRequiredShardClientUtil) return ShardClientUtil_1;
	hasRequiredShardClientUtil = 1;

	const process = require$$0$d;
	const { calculateShardId } = requireDist$7();
	const { DiscordjsError, DiscordjsTypeError, ErrorCodes } = requireErrors$1();
	const Events = requireEvents();
	const { makeError, makePlainError } = requireUtil();

	/**
	 * Helper class for sharded clients spawned as a child process/worker, such as from a {@link ShardingManager}.
	 * Utilises IPC to send and receive data to/from the master process and other shards.
	 */
	class ShardClientUtil {
	  constructor(client, mode) {
	    /**
	     * Client for the shard
	     * @type {Client}
	     */
	    this.client = client;

	    /**
	     * Mode the shard was spawned with
	     * @type {ShardingManagerMode}
	     */
	    this.mode = mode;

	    /**
	     * Message port for the master process (only when {@link ShardClientUtil#mode} is `worker`)
	     * @type {?MessagePort}
	     */
	    this.parentPort = null;

	    switch (mode) {
	      case 'process':
	        process.on('message', this._handleMessage.bind(this));
	        client.on(Events.ShardReady, () => {
	          process.send({ _ready: true });
	        });
	        client.on(Events.ShardDisconnect, () => {
	          process.send({ _disconnect: true });
	        });
	        client.on(Events.ShardReconnecting, () => {
	          process.send({ _reconnecting: true });
	        });
	        client.on(Events.ShardResume, () => {
	          process.send({ _resume: true });
	        });
	        break;
	      case 'worker':
	        this.parentPort = require$$5$6.parentPort;
	        this.parentPort.on('message', this._handleMessage.bind(this));
	        client.on(Events.ShardReady, () => {
	          this.parentPort.postMessage({ _ready: true });
	        });
	        client.on(Events.ShardDisconnect, () => {
	          this.parentPort.postMessage({ _disconnect: true });
	        });
	        client.on(Events.ShardReconnecting, () => {
	          this.parentPort.postMessage({ _reconnecting: true });
	        });
	        client.on(Events.ShardResume, () => {
	          this.parentPort.postMessage({ _resume: true });
	        });
	        break;
	    }
	  }

	  /**
	   * Array of shard ids of this client
	   * @type {number[]}
	   * @readonly
	   */
	  get ids() {
	    return this.client.options.shards;
	  }

	  /**
	   * Total number of shards
	   * @type {number}
	   * @readonly
	   */
	  get count() {
	    return this.client.options.shardCount;
	  }

	  /**
	   * Sends a message to the master process.
	   * @param {*} message Message to send
	   * @returns {Promise<void>}
	   * @emits Shard#message
	   */
	  send(message) {
	    return new Promise((resolve, reject) => {
	      switch (this.mode) {
	        case 'process':
	          process.send(message, err => {
	            if (err) reject(err);
	            else resolve();
	          });
	          break;
	        case 'worker':
	          this.parentPort.postMessage(message);
	          resolve();
	          break;
	      }
	    });
	  }

	  /**
	   * Fetches a client property value of each shard, or a given shard.
	   * @param {string} prop Name of the client property to get, using periods for nesting
	   * @param {number} [shard] Shard to fetch property from, all if undefined
	   * @returns {Promise<*|Array<*>>}
	   * @example
	   * client.shard.fetchClientValues('guilds.cache.size')
	   *   .then(results => console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`))
	   *   .catch(console.error);
	   * @see {@link ShardingManager#fetchClientValues}
	   */
	  fetchClientValues(prop, shard) {
	    return new Promise((resolve, reject) => {
	      const parent = this.parentPort ?? process;

	      const listener = message => {
	        if (message?._sFetchProp !== prop || message._sFetchPropShard !== shard) return;
	        parent.removeListener('message', listener);
	        this.decrementMaxListeners(parent);
	        if (!message._error) resolve(message._result);
	        else reject(makeError(message._error));
	      };
	      this.incrementMaxListeners(parent);
	      parent.on('message', listener);

	      this.send({ _sFetchProp: prop, _sFetchPropShard: shard }).catch(err => {
	        parent.removeListener('message', listener);
	        this.decrementMaxListeners(parent);
	        reject(err);
	      });
	    });
	  }

	  /**
	   * Evaluates a script or function on all shards, or a given shard, in the context of the {@link Client}s.
	   * @param {Function} script JavaScript to run on each shard
	   * @param {BroadcastEvalOptions} [options={}] The options for the broadcast
	   * @returns {Promise<*|Array<*>>} Results of the script execution
	   * @example
	   * client.shard.broadcastEval(client => client.guilds.cache.size)
	   *   .then(results => console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`))
	   *   .catch(console.error);
	   * @see {@link ShardingManager#broadcastEval}
	   */
	  broadcastEval(script, options = {}) {
	    return new Promise((resolve, reject) => {
	      const parent = this.parentPort ?? process;
	      if (typeof script !== 'function') {
	        reject(new DiscordjsTypeError(ErrorCodes.ShardingInvalidEvalBroadcast));
	        return;
	      }
	      script = `(${script})(this, ${JSON.stringify(options.context)})`;

	      const listener = message => {
	        if (message?._sEval !== script || message._sEvalShard !== options.shard) return;
	        parent.removeListener('message', listener);
	        this.decrementMaxListeners(parent);
	        if (!message._error) resolve(message._result);
	        else reject(makeError(message._error));
	      };
	      this.incrementMaxListeners(parent);
	      parent.on('message', listener);
	      this.send({ _sEval: script, _sEvalShard: options.shard }).catch(err => {
	        parent.removeListener('message', listener);
	        this.decrementMaxListeners(parent);
	        reject(err);
	      });
	    });
	  }

	  /**
	   * Requests a respawn of all shards.
	   * @param {MultipleShardRespawnOptions} [options] Options for respawning shards
	   * @returns {Promise<void>} Resolves upon the message being sent
	   * @see {@link ShardingManager#respawnAll}
	   */
	  respawnAll({ shardDelay = 5_000, respawnDelay = 500, timeout = 30_000 } = {}) {
	    return this.send({ _sRespawnAll: { shardDelay, respawnDelay, timeout } });
	  }

	  /**
	   * Handles an IPC message.
	   * @param {*} message Message received
	   * @private
	   */
	  async _handleMessage(message) {
	    if (!message) return;
	    if (message._fetchProp) {
	      try {
	        const props = message._fetchProp.split('.');
	        let value = this.client;
	        for (const prop of props) value = value[prop];
	        this._respond('fetchProp', { _fetchProp: message._fetchProp, _result: value });
	      } catch (err) {
	        this._respond('fetchProp', { _fetchProp: message._fetchProp, _error: makePlainError(err) });
	      }
	    } else if (message._eval) {
	      try {
	        this._respond('eval', { _eval: message._eval, _result: await this.client._eval(message._eval) });
	      } catch (err) {
	        this._respond('eval', { _eval: message._eval, _error: makePlainError(err) });
	      }
	    }
	  }

	  /**
	   * Sends a message to the master process, emitting an error from the client upon failure.
	   * @param {string} type Type of response to send
	   * @param {*} message Message to send
	   * @private
	   */
	  _respond(type, message) {
	    this.send(message).catch(err => {
	      const error = new Error(`Error when sending ${type} response to master process: ${err.message}`);
	      error.stack = err.stack;
	      /**
	       * Emitted when the client encounters an error.
	       * <warn>Errors thrown within this event do not have a catch handler, it is
	       * recommended to not use async functions as `error` event handlers. See the
	       * [Node.js docs](https://nodejs.org/api/events.html#capture-rejections-of-promises) for details.</warn>
	       * @event Client#error
	       * @param {Error} error The error encountered
	       */
	      this.client.emit(Events.Error, error);
	    });
	  }

	  /**
	   * Creates/gets the singleton of this class.
	   * @param {Client} client The client to use
	   * @param {ShardingManagerMode} mode Mode the shard was spawned with
	   * @returns {ShardClientUtil}
	   */
	  static singleton(client, mode) {
	    if (!this._singleton) {
	      this._singleton = new this(client, mode);
	    } else {
	      client.emit(
	        Events.Warn,
	        'Multiple clients created in child process/worker; only the first will handle sharding helpers.',
	      );
	    }
	    return this._singleton;
	  }

	  /**
	   * Get the shard id for a given guild id.
	   * @param {Snowflake} guildId Snowflake guild id to get shard id for
	   * @param {number} shardCount Number of shards
	   * @returns {number}
	   */
	  static shardIdForGuildId(guildId, shardCount) {
	    const shard = calculateShardId(guildId, shardCount);
	    if (shard < 0) throw new DiscordjsError(ErrorCodes.ShardingShardMiscalculation, shard, guildId, shardCount);
	    return shard;
	  }

	  /**
	   * Increments max listeners by one for a given emitter, if they are not zero.
	   * @param {EventEmitter|process} emitter The emitter that emits the events.
	   * @private
	   */
	  incrementMaxListeners(emitter) {
	    const maxListeners = emitter.getMaxListeners();
	    if (maxListeners !== 0) {
	      emitter.setMaxListeners(maxListeners + 1);
	    }
	  }

	  /**
	   * Decrements max listeners by one for a given emitter, if they are not zero.
	   * @param {EventEmitter|process} emitter The emitter that emits the events.
	   * @private
	   */
	  decrementMaxListeners(emitter) {
	    const maxListeners = emitter.getMaxListeners();
	    if (maxListeners !== 0) {
	      emitter.setMaxListeners(maxListeners - 1);
	    }
	  }
	}

	ShardClientUtil_1 = ShardClientUtil;
	return ShardClientUtil_1;
}

var Guild = {};

var GuildAuditLogs_1;
var hasRequiredGuildAuditLogs;

function requireGuildAuditLogs () {
	if (hasRequiredGuildAuditLogs) return GuildAuditLogs_1;
	hasRequiredGuildAuditLogs = 1;

	const { Collection } = requireDist$3();
	const ApplicationCommand = requireApplicationCommand();
	const GuildAuditLogsEntry = requireGuildAuditLogsEntry();
	const Integration = requireIntegration();
	const Webhook = requireWebhook$2();
	const { flatten } = requireUtil();

	/**
	 * Audit logs entries are held in this class.
	 */
	class GuildAuditLogs {
	  constructor(guild, data) {
	    if (data.users) for (const user of data.users) guild.client.users._add(user);
	    if (data.threads) for (const thread of data.threads) guild.client.channels._add(thread, guild);
	    /**
	     * Cached webhooks
	     * @type {Collection<Snowflake, Webhook>}
	     * @private
	     */
	    this.webhooks = new Collection();
	    if (data.webhooks) {
	      for (const hook of data.webhooks) {
	        this.webhooks.set(hook.id, new Webhook(guild.client, hook));
	      }
	    }

	    /**
	     * Cached integrations
	     * @type {Collection<Snowflake|string, Integration>}
	     * @private
	     */
	    this.integrations = new Collection();
	    if (data.integrations) {
	      for (const integration of data.integrations) {
	        this.integrations.set(integration.id, new Integration(guild.client, integration, guild));
	      }
	    }

	    /**
	     * Cached {@link GuildScheduledEvent}s.
	     * @type {Collection<Snowflake, GuildScheduledEvent>}
	     * @private
	     */
	    this.guildScheduledEvents = data.guild_scheduled_events.reduce(
	      (guildScheduledEvents, guildScheduledEvent) =>
	        guildScheduledEvents.set(guildScheduledEvent.id, guild.scheduledEvents._add(guildScheduledEvent)),
	      new Collection(),
	    );

	    /**
	     * Cached application commands, includes application commands from other applications
	     * @type {Collection<Snowflake, ApplicationCommand>}
	     * @private
	     */
	    this.applicationCommands = new Collection();
	    if (data.application_commands) {
	      for (const command of data.application_commands) {
	        this.applicationCommands.set(command.id, new ApplicationCommand(guild.client, command, guild));
	      }
	    }

	    /**
	     * Cached auto moderation rules.
	     * @type {Collection<Snowflake, AutoModerationRule>}
	     * @private
	     */
	    this.autoModerationRules = data.auto_moderation_rules.reduce(
	      (autoModerationRules, autoModerationRule) =>
	        autoModerationRules.set(autoModerationRule.id, guild.autoModerationRules._add(autoModerationRule)),
	      new Collection(),
	    );

	    /**
	     * The entries for this guild's audit logs
	     * @type {Collection<Snowflake, GuildAuditLogsEntry>}
	     */
	    this.entries = new Collection();
	    for (const item of data.audit_log_entries) {
	      const entry = new GuildAuditLogsEntry(guild, item, this);
	      this.entries.set(entry.id, entry);
	    }
	  }

	  toJSON() {
	    return flatten(this);
	  }
	}

	GuildAuditLogs_1 = GuildAuditLogs;
	return GuildAuditLogs_1;
}

var GuildOnboarding = {};

var hasRequiredGuildOnboarding;

function requireGuildOnboarding () {
	if (hasRequiredGuildOnboarding) return GuildOnboarding;
	hasRequiredGuildOnboarding = 1;

	const { Collection } = requireDist$3();
	const Base = requireBase$2();
	const { GuildOnboardingPrompt } = requireGuildOnboardingPrompt();

	/**
	 * Represents the onboarding data of a guild.
	 * @extends {Base}
	 */
	let GuildOnboarding$1 = class GuildOnboarding extends Base {
	  constructor(client, data) {
	    super(client);

	    /**
	     * The id of the guild this onboarding data is for
	     * @type {Snowflake}
	     */
	    this.guildId = data.guild_id;

	    const guild = this.guild;

	    /**
	     * The prompts shown during onboarding and in customize community
	     * @type {Collection<Snowflake, GuildOnboardingPrompt>}
	     */
	    this.prompts = data.prompts.reduce(
	      (prompts, prompt) => prompts.set(prompt.id, new GuildOnboardingPrompt(client, prompt, this.guildId)),
	      new Collection(),
	    );

	    /**
	     * The ids of the channels that new members get opted into automatically
	     * @type {Collection<Snowflake, GuildChannel>}
	     */
	    this.defaultChannels = data.default_channel_ids.reduce(
	      (channels, channelId) => channels.set(channelId, guild.channels.cache.get(channelId)),
	      new Collection(),
	    );

	    /**
	     * Whether onboarding is enabled
	     * @type {boolean}
	     */
	    this.enabled = data.enabled;

	    /**
	     * The mode of this onboarding
	     * @type {GuildOnboardingMode}
	     */
	    this.mode = data.mode;
	  }

	  /**
	   * The guild this onboarding is from
	   * @type {Guild}
	   * @readonly
	   */
	  get guild() {
	    return this.client.guilds.cache.get(this.guildId);
	  }
	};

	GuildOnboarding.GuildOnboarding = GuildOnboarding$1;
	return GuildOnboarding;
}

var GuildPreviewEmoji_1;
var hasRequiredGuildPreviewEmoji;

function requireGuildPreviewEmoji () {
	if (hasRequiredGuildPreviewEmoji) return GuildPreviewEmoji_1;
	hasRequiredGuildPreviewEmoji = 1;

	const BaseGuildEmoji = requireBaseGuildEmoji();

	/**
	 * Represents an instance of an emoji belonging to a public guild obtained through Discord's preview endpoint.
	 * @extends {BaseGuildEmoji}
	 */
	class GuildPreviewEmoji extends BaseGuildEmoji {
	  /**
	   * The public guild this emoji is part of
	   * @type {GuildPreview}
	   * @name GuildPreviewEmoji#guild
	   */

	  constructor(client, data, guild) {
	    super(client, data, guild);

	    /**
	     * The roles this emoji is active for
	     * @type {Snowflake[]}
	     */
	    this.roles = data.roles;
	  }
	}

	GuildPreviewEmoji_1 = GuildPreviewEmoji;
	return GuildPreviewEmoji_1;
}

var GuildPreview_1;
var hasRequiredGuildPreview;

function requireGuildPreview () {
	if (hasRequiredGuildPreview) return GuildPreview_1;
	hasRequiredGuildPreview = 1;

	const { Collection } = requireDist$3();
	const { DiscordSnowflake } = /*@__PURE__*/ requireCjs$2();
	const { Routes } = requireV10$6();
	const Base = requireBase$2();
	const GuildPreviewEmoji = requireGuildPreviewEmoji();
	const { Sticker } = requireSticker$2();

	/**
	 * Represents the data about the guild any bot can preview, connected to the specified guild.
	 * @extends {Base}
	 */
	class GuildPreview extends Base {
	  constructor(client, data) {
	    super(client);

	    if (!data) return;

	    this._patch(data);
	  }

	  _patch(data) {
	    /**
	     * The id of this guild
	     * @type {string}
	     */
	    this.id = data.id;

	    if ('name' in data) {
	      /**
	       * The name of this guild
	       * @type {string}
	       */
	      this.name = data.name;
	    }

	    if ('icon' in data) {
	      /**
	       * The icon of this guild
	       * @type {?string}
	       */
	      this.icon = data.icon;
	    }

	    if ('splash' in data) {
	      /**
	       * The splash icon of this guild
	       * @type {?string}
	       */
	      this.splash = data.splash;
	    }

	    if ('discovery_splash' in data) {
	      /**
	       * The discovery splash icon of this guild
	       * @type {?string}
	       */
	      this.discoverySplash = data.discovery_splash;
	    }

	    if ('features' in data) {
	      /**
	       * An array of enabled guild features
	       * @type {GuildFeature[]}
	       */
	      this.features = data.features;
	    }

	    if ('approximate_member_count' in data) {
	      /**
	       * The approximate count of members in this guild
	       * @type {number}
	       */
	      this.approximateMemberCount = data.approximate_member_count;
	    }

	    if ('approximate_presence_count' in data) {
	      /**
	       * The approximate count of online members in this guild
	       * @type {number}
	       */
	      this.approximatePresenceCount = data.approximate_presence_count;
	    }

	    if ('description' in data) {
	      /**
	       * The description for this guild
	       * @type {?string}
	       */
	      this.description = data.description;
	    } else {
	      this.description ??= null;
	    }

	    if (!this.emojis) {
	      /**
	       * Collection of emojis belonging to this guild
	       * @type {Collection<Snowflake, GuildPreviewEmoji>}
	       */
	      this.emojis = new Collection();
	    } else {
	      this.emojis.clear();
	    }
	    for (const emoji of data.emojis) {
	      this.emojis.set(emoji.id, new GuildPreviewEmoji(this.client, emoji, this));
	    }

	    /**
	     * Collection of stickers belonging to this guild
	     * @type {Collection<Snowflake, Sticker>}
	     */
	    this.stickers = data.stickers.reduce(
	      (stickers, sticker) => stickers.set(sticker.id, new Sticker(this.client, sticker)),
	      new Collection(),
	    );
	  }

	  /**
	   * The timestamp this guild was created at
	   * @type {number}
	   * @readonly
	   */
	  get createdTimestamp() {
	    return DiscordSnowflake.timestampFrom(this.id);
	  }

	  /**
	   * The time this guild was created at
	   * @type {Date}
	   * @readonly
	   */
	  get createdAt() {
	    return new Date(this.createdTimestamp);
	  }

	  /**
	   * The URL to this guild's splash.
	   * @param {ImageURLOptions} [options={}] Options for the image URL
	   * @returns {?string}
	   */
	  splashURL(options = {}) {
	    return this.splash && this.client.rest.cdn.splash(this.id, this.splash, options);
	  }

	  /**
	   * The URL to this guild's discovery splash.
	   * @param {ImageURLOptions} [options={}] Options for the image URL
	   * @returns {?string}
	   */
	  discoverySplashURL(options = {}) {
	    return this.discoverySplash && this.client.rest.cdn.discoverySplash(this.id, this.discoverySplash, options);
	  }

	  /**
	   * The URL to this guild's icon.
	   * @param {ImageURLOptions} [options={}] Options for the image URL
	   * @returns {?string}
	   */
	  iconURL(options = {}) {
	    return this.icon && this.client.rest.cdn.icon(this.id, this.icon, options);
	  }

	  /**
	   * Fetches this guild.
	   * @returns {Promise<GuildPreview>}
	   */
	  async fetch() {
	    const data = await this.client.rest.get(Routes.guildPreview(this.id));
	    this._patch(data);
	    return this;
	  }

	  /**
	   * When concatenated with a string, this automatically returns the guild's name instead of the Guild object.
	   * @returns {string}
	   * @example
	   * // Logs: Hello from My Guild!
	   * console.log(`Hello from ${previewGuild}!`);
	   */
	  toString() {
	    return this.name;
	  }

	  toJSON() {
	    const json = super.toJSON();
	    json.iconURL = this.iconURL();
	    json.splashURL = this.splashURL();
	    return json;
	  }
	}

	GuildPreview_1 = GuildPreview;
	return GuildPreview_1;
}

var AutoModerationRuleManager_1;
var hasRequiredAutoModerationRuleManager;

function requireAutoModerationRuleManager () {
	if (hasRequiredAutoModerationRuleManager) return AutoModerationRuleManager_1;
	hasRequiredAutoModerationRuleManager = 1;

	const { Collection } = requireDist$3();
	const { Routes } = requireV10$6();
	const CachedManager = requireCachedManager();
	const AutoModerationRule = requireAutoModerationRule();

	/**
	 * Manages API methods for auto moderation rules and stores their cache.
	 * @extends {CachedManager}
	 */
	class AutoModerationRuleManager extends CachedManager {
	  constructor(guild, iterable) {
	    super(guild.client, AutoModerationRule, iterable);

	    /**
	     * The guild this manager belongs to.
	     * @type {Guild}
	     */
	    this.guild = guild;
	  }

	  /**
	   * The cache of this manager
	   * @type {Collection<Snowflake, AutoModerationRule>}
	   * @name AutoModerationRuleManager#cache
	   */

	  /**
	   * Resolves an {@link AutoModerationRuleResolvable} to an {@link AutoModerationRule} object.
	   * @method resolve
	   * @memberof AutoModerationRuleManager
	   * @instance
	   * @param {AutoModerationRuleResolvable} autoModerationRule The AutoModerationRule resolvable to resolve
	   * @returns {?AutoModerationRule}
	   */

	  /**
	   * Resolves an {@link AutoModerationRuleResolvable} to a {@link AutoModerationRule} id.
	   * @method resolveId
	   * @memberof AutoModerationRuleManager
	   * @instance
	   * @param {AutoModerationRuleResolvable} autoModerationRule The AutoModerationRule resolvable to resolve
	   * @returns {?Snowflake}
	   */

	  _add(data, cache) {
	    return super._add(data, cache, { extras: [this.guild] });
	  }

	  /**
	   * Options used to set the trigger metadata of an auto moderation rule.
	   * @typedef {Object} AutoModerationTriggerMetadataOptions
	   * @property {string[]} [keywordFilter] The substrings that will be searched for in the content
	   * @property {string[]} [regexPatterns] The regular expression patterns which will be matched against the content
	   * <info>Only Rust-flavored regular expressions are supported.</info>
	   * @property {AutoModerationRuleKeywordPresetType[]} [presets]
	   * The internally pre-defined wordsets which will be searched for in the content
	   * @property {string[]} [allowList] The substrings that will be exempt from triggering
	   * {@link AutoModerationRuleTriggerType.Keyword},
	   * {@link AutoModerationRuleTriggerType.KeywordPreset},
	   * and {@link AutoModerationRuleTriggerType.MemberProfile}
	   * @property {?number} [mentionTotalLimit] The total number of role & user mentions allowed per message
	   * @property {boolean} [mentionRaidProtectionEnabled] Whether to automatically detect mention raids
	   */

	  /**
	   * Options used to set the actions of an auto moderation rule.
	   * @typedef {Object} AutoModerationActionOptions
	   * @property {AutoModerationActionType} type The type of this auto moderation rule action
	   * @property {AutoModerationActionMetadataOptions} [metadata] Additional metadata needed during execution
	   * <info>This property is required if using a `type` of
	   * {@link AutoModerationActionType.SendAlertMessage} or {@link AutoModerationActionType.Timeout}.</info>
	   */

	  /**
	   * Options used to set the metadata of an auto moderation rule action.
	   * @typedef {Object} AutoModerationActionMetadataOptions
	   * @property {GuildTextChannelResolvable|ThreadChannel} [channel] The channel to which content will be logged
	   * @property {number} [durationSeconds] The timeout duration in seconds
	   * @property {string} [customMessage] The custom message that is shown whenever a message is blocked
	   */

	  /**
	   * Options used to create an auto moderation rule.
	   * @typedef {Object} AutoModerationRuleCreateOptions
	   * @property {string} name The name of the auto moderation rule
	   * @property {AutoModerationRuleEventType} eventType The event type of the auto moderation rule
	   * @property {AutoModerationRuleTriggerType} triggerType The trigger type of the auto moderation rule
	   * @property {AutoModerationTriggerMetadataOptions} [triggerMetadata] The trigger metadata of the auto moderation rule
	   * <info>This property is required if using a `triggerType` of
	   * {@link AutoModerationRuleTriggerType.Keyword},
	   * {@link AutoModerationRuleTriggerType.KeywordPreset},
	   * {@link AutoModerationRuleTriggerType.MentionSpam},
	   * or {@link AutoModerationRuleTriggerType.MemberProfile}.</info>
	   * @property {AutoModerationActionOptions[]} actions
	   * The actions that will execute when the auto moderation rule is triggered
	   * @property {boolean} [enabled] Whether the auto moderation rule should be enabled
	   * @property {Collection<Snowflake, Role>|RoleResolvable[]} [exemptRoles]
	   * The roles that should not be affected by the auto moderation rule
	   * @property {Collection<Snowflake, GuildChannel|ThreadChannel>|GuildChannelResolvable[]} [exemptChannels]
	   * The channels that should not be affected by the auto moderation rule
	   * @property {string} [reason] The reason for creating the auto moderation rule
	   */

	  /**
	   * Creates a new auto moderation rule.
	   * @param {AutoModerationRuleCreateOptions} options Options for creating the auto moderation rule
	   * @returns {Promise<AutoModerationRule>}
	   */
	  async create({
	    name,
	    eventType,
	    triggerType,
	    triggerMetadata,
	    actions,
	    enabled,
	    exemptRoles,
	    exemptChannels,
	    reason,
	  }) {
	    const data = await this.client.rest.post(Routes.guildAutoModerationRules(this.guild.id), {
	      body: {
	        name,
	        event_type: eventType,
	        trigger_type: triggerType,
	        trigger_metadata: triggerMetadata && {
	          keyword_filter: triggerMetadata.keywordFilter,
	          regex_patterns: triggerMetadata.regexPatterns,
	          presets: triggerMetadata.presets,
	          allow_list: triggerMetadata.allowList,
	          mention_total_limit: triggerMetadata.mentionTotalLimit,
	          mention_raid_protection_enabled: triggerMetadata.mentionRaidProtectionEnabled,
	        },
	        actions: actions.map(action => ({
	          type: action.type,
	          metadata: {
	            duration_seconds: action.metadata?.durationSeconds,
	            channel_id: action.metadata?.channel && this.guild.channels.resolveId(action.metadata.channel),
	            custom_message: action.metadata?.customMessage,
	          },
	        })),
	        enabled,
	        exempt_roles: exemptRoles?.map(exemptRole => this.guild.roles.resolveId(exemptRole)),
	        exempt_channels: exemptChannels?.map(exemptChannel => this.guild.channels.resolveId(exemptChannel)),
	      },
	      reason,
	    });

	    return this._add(data);
	  }

	  /**
	   * Options used to edit an auto moderation rule.
	   * @typedef {Object} AutoModerationRuleEditOptions
	   * @property {string} [name] The name of the auto moderation rule
	   * @property {AutoModerationRuleEventType} [eventType] The event type of the auto moderation rule
	   * @property {AutoModerationTriggerMetadataOptions} [triggerMetadata] The trigger metadata of the auto moderation rule
	   * @property {AutoModerationActionOptions[]} [actions]
	   * The actions that will execute when the auto moderation rule is triggered
	   * @property {boolean} [enabled] Whether the auto moderation rule should be enabled
	   * @property {Collection<Snowflake, Role>|RoleResolvable[]} [exemptRoles]
	   * The roles that should not be affected by the auto moderation rule
	   * @property {Collection<Snowflake, GuildChannel|ThreadChannel>|GuildChannelResolvable[]} [exemptChannels]
	   * The channels that should not be affected by the auto moderation rule
	   * @property {string} [reason] The reason for creating the auto moderation rule
	   */

	  /**
	   * Edits an auto moderation rule.
	   * @param {AutoModerationRuleResolvable} autoModerationRule The auto moderation rule to edit
	   * @param {AutoModerationRuleEditOptions} options Options for editing the auto moderation rule
	   * @returns {Promise<AutoModerationRule>}
	   */
	  async edit(
	    autoModerationRule,
	    { name, eventType, triggerMetadata, actions, enabled, exemptRoles, exemptChannels, reason },
	  ) {
	    const autoModerationRuleId = this.resolveId(autoModerationRule);

	    const data = await this.client.rest.patch(Routes.guildAutoModerationRule(this.guild.id, autoModerationRuleId), {
	      body: {
	        name,
	        event_type: eventType,
	        trigger_metadata: triggerMetadata && {
	          keyword_filter: triggerMetadata.keywordFilter,
	          regex_patterns: triggerMetadata.regexPatterns,
	          presets: triggerMetadata.presets,
	          allow_list: triggerMetadata.allowList,
	          mention_total_limit: triggerMetadata.mentionTotalLimit,
	          mention_raid_protection_enabled: triggerMetadata.mentionRaidProtectionEnabled,
	        },
	        actions: actions?.map(action => ({
	          type: action.type,
	          metadata: {
	            duration_seconds: action.metadata?.durationSeconds,
	            channel_id: action.metadata?.channel && this.guild.channels.resolveId(action.metadata.channel),
	            custom_message: action.metadata?.customMessage,
	          },
	        })),
	        enabled,
	        exempt_roles: exemptRoles?.map(exemptRole => this.guild.roles.resolveId(exemptRole)),
	        exempt_channels: exemptChannels?.map(exemptChannel => this.guild.channels.resolveId(exemptChannel)),
	      },
	      reason,
	    });

	    return this._add(data);
	  }

	  /**
	   * Data that can be resolved to give an AutoModerationRule object. This can be:
	   * * An AutoModerationRule
	   * * A Snowflake
	   * @typedef {AutoModerationRule|Snowflake} AutoModerationRuleResolvable
	   */

	  /**
	   * Options used to fetch a single auto moderation rule from a guild.
	   * @typedef {BaseFetchOptions} FetchAutoModerationRuleOptions
	   * @property {AutoModerationRuleResolvable} autoModerationRule The auto moderation rule to fetch
	   */

	  /**
	   * Options used to fetch all auto moderation rules from a guild.
	   * @typedef {Object} FetchAutoModerationRulesOptions
	   * @property {boolean} [cache] Whether to cache the fetched auto moderation rules
	   */

	  /**
	   * Fetches auto moderation rules from Discord.
	   * @param {AutoModerationRuleResolvable|FetchAutoModerationRuleOptions|FetchAutoModerationRulesOptions} [options]
	   * Options for fetching auto moderation rule(s)
	   * @returns {Promise<AutoModerationRule|Collection<Snowflake, AutoModerationRule>>}
	   * @example
	   * // Fetch all auto moderation rules from a guild without caching
	   * guild.autoModerationRules.fetch({ cache: false })
	   *   .then(console.log)
	   *   .catch(console.error);
	   * @example
	   * // Fetch a single auto moderation rule
	   * guild.autoModerationRules.fetch('979083472868098119')
	   *   .then(console.log)
	   *   .catch(console.error);
	   * @example
	   * // Fetch a single auto moderation rule without checking cache and without caching
	   * guild.autoModerationRules.fetch({ autoModerationRule: '979083472868098119', cache: false, force: true })
	   *   .then(console.log)
	   *   .catch(console.error)
	   */
	  fetch(options) {
	    if (!options) return this._fetchMany();
	    const { autoModerationRule, cache, force } = options;
	    const resolvedAutoModerationRule = this.resolveId(autoModerationRule ?? options);
	    if (resolvedAutoModerationRule) {
	      return this._fetchSingle({ autoModerationRule: resolvedAutoModerationRule, cache, force });
	    }
	    return this._fetchMany(options);
	  }

	  async _fetchSingle({ autoModerationRule, cache, force = false }) {
	    if (!force) {
	      const existing = this.cache.get(autoModerationRule);
	      if (existing) return existing;
	    }

	    const data = await this.client.rest.get(Routes.guildAutoModerationRule(this.guild.id, autoModerationRule));
	    return this._add(data, cache);
	  }

	  async _fetchMany(options = {}) {
	    const data = await this.client.rest.get(Routes.guildAutoModerationRules(this.guild.id));

	    return data.reduce(
	      (col, autoModerationRule) => col.set(autoModerationRule.id, this._add(autoModerationRule, options.cache)),
	      new Collection(),
	    );
	  }

	  /**
	   * Deletes an auto moderation rule.
	   * @param {AutoModerationRuleResolvable} autoModerationRule The auto moderation rule to delete
	   * @param {string} [reason] The reason for deleting the auto moderation rule
	   * @returns {Promise<void>}
	   */
	  async delete(autoModerationRule, reason) {
	    const autoModerationRuleId = this.resolveId(autoModerationRule);
	    await this.client.rest.delete(Routes.guildAutoModerationRule(this.guild.id, autoModerationRuleId), { reason });
	  }
	}

	AutoModerationRuleManager_1 = AutoModerationRuleManager;
	return AutoModerationRuleManager_1;
}

var GuildApplicationCommandManager_1;
var hasRequiredGuildApplicationCommandManager;

function requireGuildApplicationCommandManager () {
	if (hasRequiredGuildApplicationCommandManager) return GuildApplicationCommandManager_1;
	hasRequiredGuildApplicationCommandManager = 1;

	const ApplicationCommandManager = requireApplicationCommandManager();
	const ApplicationCommandPermissionsManager = requireApplicationCommandPermissionsManager();

	/**
	 * An extension for guild-specific application commands.
	 * @extends {ApplicationCommandManager}
	 */
	class GuildApplicationCommandManager extends ApplicationCommandManager {
	  constructor(guild, iterable) {
	    super(guild.client, iterable);

	    /**
	     * The guild that this manager belongs to
	     * @type {Guild}
	     */
	    this.guild = guild;

	    /**
	     * The manager for permissions of arbitrary commands on this guild
	     * @type {ApplicationCommandPermissionsManager}
	     */
	    this.permissions = new ApplicationCommandPermissionsManager(this);
	  }
	}

	GuildApplicationCommandManager_1 = GuildApplicationCommandManager;
	return GuildApplicationCommandManager_1;
}

var GuildBanManager_1;
var hasRequiredGuildBanManager;

function requireGuildBanManager () {
	if (hasRequiredGuildBanManager) return GuildBanManager_1;
	hasRequiredGuildBanManager = 1;

	const process = require$$0$d;
	const { Collection } = requireDist$3();
	const { makeURLSearchParams } = requireWeb();
	const { Routes } = requireV10$6();
	const CachedManager = requireCachedManager();
	const { DiscordjsTypeError, DiscordjsError, ErrorCodes } = requireErrors$1();
	const GuildBan = requireGuildBan();
	const { GuildMember } = requireGuildMember();

	let deprecationEmittedForDeleteMessageDays = false;

	/**
	 * Manages API methods for guild bans and stores their cache.
	 * @extends {CachedManager}
	 */
	class GuildBanManager extends CachedManager {
	  constructor(guild, iterable) {
	    super(guild.client, GuildBan, iterable);

	    /**
	     * The guild this Manager belongs to
	     * @type {Guild}
	     */
	    this.guild = guild;
	  }

	  /**
	   * The cache of this Manager
	   * @type {Collection<Snowflake, GuildBan>}
	   * @name GuildBanManager#cache
	   */

	  _add(data, cache) {
	    return super._add(data, cache, { id: data.user.id, extras: [this.guild] });
	  }

	  /**
	   * Data that resolves to give a GuildBan object. This can be:
	   * * A GuildBan object
	   * * A User resolvable
	   * @typedef {GuildBan|UserResolvable} GuildBanResolvable
	   */

	  /**
	   * Resolves a GuildBanResolvable to a GuildBan object.
	   * @param {GuildBanResolvable} ban The ban that is in the guild
	   * @returns {?GuildBan}
	   */
	  resolve(ban) {
	    return super.resolve(ban) ?? super.resolve(this.client.users.resolveId(ban));
	  }

	  /**
	   * Options used to fetch a single ban from a guild.
	   * @typedef {BaseFetchOptions} FetchBanOptions
	   * @property {UserResolvable} user The ban to fetch
	   */

	  /**
	   * Options used to fetch multiple bans from a guild.
	   * @typedef {Object} FetchBansOptions
	   * @property {number} [limit] The maximum number of bans to return
	   * @property {Snowflake} [before] Consider only bans before this id
	   * @property {Snowflake} [after] Consider only bans after this id
	   * @property {boolean} [cache] Whether to cache the fetched bans
	   */

	  /**
	   * Fetches ban(s) from Discord.
	   * @param {UserResolvable|FetchBanOptions|FetchBansOptions} [options] Options for fetching guild ban(s)
	   * @returns {Promise<GuildBan|Collection<Snowflake, GuildBan>>}
	   * @example
	   * // Fetch multiple bans from a guild
	   * guild.bans.fetch()
	   *   .then(console.log)
	   *   .catch(console.error);
	   * @example
	   * // Fetch a maximum of 5 bans from a guild without caching
	   * guild.bans.fetch({ limit: 5, cache: false })
	   *   .then(console.log)
	   *   .catch(console.error);
	   * @example
	   * // Fetch a single ban
	   * guild.bans.fetch('351871113346809860')
	   *   .then(console.log)
	   *   .catch(console.error);
	   * @example
	   * // Fetch a single ban without checking cache
	   * guild.bans.fetch({ user, force: true })
	   *   .then(console.log)
	   *   .catch(console.error)
	   * @example
	   * // Fetch a single ban without caching
	   * guild.bans.fetch({ user, cache: false })
	   *   .then(console.log)
	   *   .catch(console.error);
	   */
	  fetch(options) {
	    if (!options) return this._fetchMany();
	    const { user, cache, force, limit, before, after } = options;
	    const resolvedUser = this.client.users.resolveId(user ?? options);
	    if (resolvedUser) return this._fetchSingle({ user: resolvedUser, cache, force });

	    if (!before && !after && !limit && cache === undefined) {
	      return Promise.reject(new DiscordjsError(ErrorCodes.FetchBanResolveId));
	    }

	    return this._fetchMany(options);
	  }

	  async _fetchSingle({ user, cache, force = false }) {
	    if (!force) {
	      const existing = this.cache.get(user);
	      if (existing && !existing.partial) return existing;
	    }

	    const data = await this.client.rest.get(Routes.guildBan(this.guild.id, user));
	    return this._add(data, cache);
	  }

	  async _fetchMany(options = {}) {
	    const data = await this.client.rest.get(Routes.guildBans(this.guild.id), {
	      query: makeURLSearchParams(options),
	    });

	    return data.reduce((col, ban) => col.set(ban.user.id, this._add(ban, options.cache)), new Collection());
	  }

	  /**
	   * Options used to ban a user from a guild.
	   * @typedef {Object} BanOptions
	   * @property {number} [deleteMessageDays] Number of days of messages to delete, must be between 0 and 7, inclusive
	   * <warn>This property is deprecated. Use `deleteMessageSeconds` instead.</warn>
	   * @property {number} [deleteMessageSeconds] Number of seconds of messages to delete,
	   * must be between 0 and 604800 (7 days), inclusive
	   * @property {string} [reason] The reason for the ban
	   */

	  /**
	   * Bans a user from the guild.
	   * @param {UserResolvable} user The user to ban
	   * @param {BanOptions} [options] Options for the ban
	   * @returns {Promise<GuildMember|User|Snowflake>} Result object will be resolved as specifically as possible.
	   * If the GuildMember cannot be resolved, the User will instead be attempted to be resolved. If that also cannot
	   * be resolved, the user id will be the result.
	   * @example
	   * // Ban a user by id (or with a user/guild member object)
	   * guild.bans.create('84484653687267328')
	   *   .then(banInfo => console.log(`Banned ${banInfo.user?.tag ?? banInfo.tag ?? banInfo}`))
	   *   .catch(console.error);
	   */
	  async create(user, options = {}) {
	    if (typeof options !== 'object') throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'options', 'object', true);
	    const id = this.client.users.resolveId(user);
	    if (!id) throw new DiscordjsError(ErrorCodes.BanResolveId, true);

	    if (options.deleteMessageDays !== undefined && !deprecationEmittedForDeleteMessageDays) {
	      process.emitWarning(
	        // eslint-disable-next-line max-len
	        'The deleteMessageDays option for GuildBanManager#create() is deprecated. Use the deleteMessageSeconds option instead.',
	        'DeprecationWarning',
	      );

	      deprecationEmittedForDeleteMessageDays = true;
	    }

	    await this.client.rest.put(Routes.guildBan(this.guild.id, id), {
	      body: {
	        delete_message_seconds:
	          options.deleteMessageSeconds ??
	          (options.deleteMessageDays ? options.deleteMessageDays * 24 * 60 * 60 : undefined),
	      },
	      reason: options.reason,
	    });
	    if (user instanceof GuildMember) return user;
	    const _user = this.client.users.resolve(id);
	    if (_user) {
	      return this.guild.members.resolve(_user) ?? _user;
	    }
	    return id;
	  }

	  /**
	   * Unbans a user from the guild.
	   * @param {UserResolvable} user The user to unban
	   * @param {string} [reason] Reason for unbanning user
	   * @returns {Promise<?User>}
	   * @example
	   * // Unban a user by id (or with a user/guild member object)
	   * guild.bans.remove('84484653687267328')
	   *   .then(user => console.log(`Unbanned ${user.username} from ${guild.name}`))
	   *   .catch(console.error);
	   */
	  async remove(user, reason) {
	    const id = this.client.users.resolveId(user);
	    if (!id) throw new DiscordjsError(ErrorCodes.BanResolveId);
	    await this.client.rest.delete(Routes.guildBan(this.guild.id, id), { reason });
	    return this.client.users.resolve(user);
	  }

	  /**
	   * Options used for bulk banning users from a guild.
	   * @typedef {Object} BulkBanOptions
	   * @property {number} [deleteMessageSeconds] Number of seconds of messages to delete,
	   * must be between 0 and 604800 (7 days), inclusive
	   * @property {string} [reason] The reason for the bans
	   */

	  /**
	   * Result of bulk banning users from a guild.
	   * @typedef {Object} BulkBanResult
	   * @property {Snowflake[]} bannedUsers IDs of the banned users
	   * @property {Snowflake[]} failedUsers IDs of the users that could not be banned or were already banned
	   */

	  /**
	   * Bulk ban users from a guild, and optionally delete previous messages sent by them.
	   * @param {Collection<Snowflake, UserResolvable>|UserResolvable[]} users The users to ban
	   * @param {BulkBanOptions} [options] The options for bulk banning users
	   * @returns {Promise<BulkBanResult>} Returns an object with `bannedUsers` key containing the IDs of the banned users
	   * and the key `failedUsers` with the IDs that could not be banned or were already banned.
	   * @example
	   * // Bulk ban users by ids (or with user/guild member objects) and delete all their messages from the past 7 days
	   * guild.bans.bulkCreate(['84484653687267328'], { deleteMessageSeconds: 7 * 24 * 60 * 60 })
	   *   .then(result => {
	   *     console.log(`Banned ${result.bannedUsers.length} users, failed to ban ${result.failedUsers.length} users.`)
	   *   })
	   *   .catch(console.error);
	   */
	  async bulkCreate(users, options = {}) {
	    if (!users || !(Array.isArray(users) || users instanceof Collection)) {
	      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'users', 'Array or Collection of UserResolvable', true);
	    }
	    if (typeof options !== 'object') throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'options', 'object', true);

	    const userIds = users.map(user => this.client.users.resolveId(user));
	    if (userIds.length === 0) throw new DiscordjsError(ErrorCodes.BulkBanUsersOptionEmpty);

	    const result = await this.client.rest.post(Routes.guildBulkBan(this.guild.id), {
	      body: { delete_message_seconds: options.deleteMessageSeconds, user_ids: userIds },
	      reason: options.reason,
	    });
	    return { bannedUsers: result.banned_users, failedUsers: result.failed_users };
	  }
	}

	GuildBanManager_1 = GuildBanManager;
	return GuildBanManager_1;
}

var GuildChannelManager_1;
var hasRequiredGuildChannelManager;

function requireGuildChannelManager () {
	if (hasRequiredGuildChannelManager) return GuildChannelManager_1;
	hasRequiredGuildChannelManager = 1;

	const process = require$$0$d;
	const { Collection } = requireDist$3();
	const { ChannelType, Routes } = requireV10$6();
	const CachedManager = requireCachedManager();
	const GuildTextThreadManager = requireGuildTextThreadManager();
	const { DiscordjsError, DiscordjsTypeError, ErrorCodes } = requireErrors$1();
	const GuildChannel = requireGuildChannel();
	const PermissionOverwrites = requirePermissionOverwrites();
	const ThreadChannel = requireThreadChannel();
	const Webhook = requireWebhook$2();
	const ChannelFlagsBitField = requireChannelFlagsBitField();
	const { transformGuildForumTag, transformGuildDefaultReaction } = requireChannels();
	const { ThreadChannelTypes } = requireConstants$1();
	const { resolveImage } = requireDataResolver();
	const { setPosition } = requireUtil();

	let cacheWarningEmitted = false;

	/**
	 * Manages API methods for GuildChannels and stores their cache.
	 * @extends {CachedManager}
	 */
	class GuildChannelManager extends CachedManager {
	  constructor(guild, iterable) {
	    super(guild.client, GuildChannel, iterable);
	    const defaultCaching =
	      this._cache.constructor.name === 'Collection' ||
	      this._cache.maxSize === undefined ||
	      this._cache.maxSize === Infinity;
	    if (!cacheWarningEmitted && !defaultCaching) {
	      cacheWarningEmitted = true;
	      process.emitWarning(
	        `Overriding the cache handling for ${this.constructor.name} is unsupported and breaks functionality.`,
	        'UnsupportedCacheOverwriteWarning',
	      );
	    }

	    /**
	     * The guild this Manager belongs to
	     * @type {Guild}
	     */
	    this.guild = guild;
	  }

	  /**
	   * The number of channels in this managers cache excluding thread channels
	   * that do not count towards a guild's maximum channels restriction.
	   * @type {number}
	   * @readonly
	   */
	  get channelCountWithoutThreads() {
	    return this.cache.reduce((acc, channel) => {
	      if (ThreadChannelTypes.includes(channel.type)) return acc;
	      return ++acc;
	    }, 0);
	  }

	  /**
	   * The cache of this Manager
	   * @type {Collection<Snowflake, GuildChannel|ThreadChannel>}
	   * @name GuildChannelManager#cache
	   */

	  _add(channel) {
	    const existing = this.cache.get(channel.id);
	    if (existing) return existing;
	    this.cache.set(channel.id, channel);
	    return channel;
	  }

	  /**
	   * Data that can be resolved to give a Guild Channel object. This can be:
	   * * A GuildChannel object
	   * * A ThreadChannel object
	   * * A Snowflake
	   * @typedef {GuildChannel|ThreadChannel|Snowflake} GuildChannelResolvable
	   */

	  /**
	   * Resolves a GuildChannelResolvable to a Channel object.
	   * @param {GuildChannelResolvable} channel The GuildChannel resolvable to resolve
	   * @returns {?(GuildChannel|ThreadChannel)}
	   */
	  resolve(channel) {
	    if (channel instanceof ThreadChannel) return super.resolve(channel.id);
	    return super.resolve(channel);
	  }

	  /**
	   * Resolves a GuildChannelResolvable to a channel id.
	   * @param {GuildChannelResolvable} channel The GuildChannel resolvable to resolve
	   * @returns {?Snowflake}
	   */
	  resolveId(channel) {
	    if (channel instanceof ThreadChannel) return super.resolveId(channel.id);
	    return super.resolveId(channel);
	  }

	  /**
	   * Data that can be resolved to a News Channel object. This can be:
	   * * A NewsChannel object
	   * * A Snowflake
	   * @typedef {NewsChannel|Snowflake} NewsChannelResolvable
	   */

	  /**
	   * Adds the target channel to a channel's followers.
	   * @param {NewsChannelResolvable} channel The channel to follow
	   * @param {TextChannelResolvable} targetChannel The channel where published announcements will be posted at
	   * @param {string} [reason] Reason for creating the webhook
	   * @returns {Promise<Snowflake>} Returns created target webhook id.
	   */
	  async addFollower(channel, targetChannel, reason) {
	    const channelId = this.resolveId(channel);
	    if (!channelId) {
	      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'channel', 'NewsChannelResolvable');
	    }
	    const targetChannelId = this.resolveId(targetChannel);
	    if (!targetChannelId) {
	      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'targetChannel', 'TextChannelResolvable');
	    }
	    const { webhook_id } = await this.client.rest.post(Routes.channelFollowers(channelId), {
	      body: { webhook_channel_id: targetChannelId },
	      reason,
	    });
	    return webhook_id;
	  }

	  /**
	   * Options used to create a new channel in a guild.
	   * @typedef {CategoryCreateChannelOptions} GuildChannelCreateOptions
	   * @property {?CategoryChannelResolvable} [parent] Parent of the new channel
	   */

	  /**
	   * Creates a new channel in the guild.
	   * @param {GuildChannelCreateOptions} options Options for creating the new channel
	   * @returns {Promise<GuildChannel>}
	   * @example
	   * // Create a new text channel
	   * guild.channels.create({ name: 'new-general', reason: 'Needed a cool new channel' })
	   *   .then(console.log)
	   *   .catch(console.error);
	   * @example
	   * // Create a new channel with permission overwrites
	   * guild.channels.create({
	   *   name: 'new-general',
	   *   type: ChannelType.GuildVoice,
	   *   permissionOverwrites: [
	   *      {
	   *        id: message.author.id,
	   *        deny: [PermissionFlagsBits.ViewChannel],
	   *     },
	   *   ],
	   * })
	   */
	  async create({
	    name,
	    type,
	    topic,
	    nsfw,
	    bitrate,
	    userLimit,
	    parent,
	    permissionOverwrites,
	    position,
	    rateLimitPerUser,
	    rtcRegion,
	    videoQualityMode,
	    defaultThreadRateLimitPerUser,
	    availableTags,
	    defaultReactionEmoji,
	    defaultAutoArchiveDuration,
	    defaultSortOrder,
	    defaultForumLayout,
	    reason,
	  }) {
	    parent &&= this.client.channels.resolveId(parent);
	    permissionOverwrites &&= permissionOverwrites.map(overwrite => PermissionOverwrites.resolve(overwrite, this.guild));

	    const data = await this.client.rest.post(Routes.guildChannels(this.guild.id), {
	      body: {
	        name,
	        topic,
	        type,
	        nsfw,
	        bitrate,
	        user_limit: userLimit,
	        parent_id: parent,
	        position,
	        permission_overwrites: permissionOverwrites,
	        rate_limit_per_user: rateLimitPerUser,
	        rtc_region: rtcRegion,
	        video_quality_mode: videoQualityMode,
	        default_thread_rate_limit_per_user: defaultThreadRateLimitPerUser,
	        available_tags: availableTags?.map(availableTag => transformGuildForumTag(availableTag)),
	        default_reaction_emoji: defaultReactionEmoji && transformGuildDefaultReaction(defaultReactionEmoji),
	        default_auto_archive_duration: defaultAutoArchiveDuration,
	        default_sort_order: defaultSortOrder,
	        default_forum_layout: defaultForumLayout,
	      },
	      reason,
	    });
	    return this.client.actions.ChannelCreate.handle(data).channel;
	  }

	  /**
	   * @typedef {ChannelWebhookCreateOptions} WebhookCreateOptions
	   * @property {TextChannel|NewsChannel|VoiceChannel|StageChannel|ForumChannel|MediaChannel|Snowflake} channel
	   * The channel to create the webhook for
	   */

	  /**
	   * Creates a webhook for the channel.
	   * @param {WebhookCreateOptions} options Options for creating the webhook
	   * @returns {Promise<Webhook>} Returns the created Webhook
	   * @example
	   * // Create a webhook for the current channel
	   * guild.channels.createWebhook({
	   *   channel: '222197033908436994',
	   *   name: 'Snek',
	   *   avatar: 'https://i.imgur.com/mI8XcpG.jpg',
	   *   reason: 'Needed a cool new Webhook'
	   * })
	   *   .then(console.log)
	   *   .catch(console.error)
	   */
	  async createWebhook({ channel, name, avatar, reason }) {
	    const id = this.resolveId(channel);
	    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'channel', 'GuildChannelResolvable');
	    if (typeof avatar === 'string' && !avatar.startsWith('data:')) {
	      avatar = await resolveImage(avatar);
	    }
	    const data = await this.client.rest.post(Routes.channelWebhooks(id), {
	      body: {
	        name,
	        avatar,
	      },
	      reason,
	    });
	    return new Webhook(this.client, data);
	  }

	  /**
	   * Options used to edit a guild channel.
	   * @typedef {Object} GuildChannelEditOptions
	   * @property {string} [name] The name of the channel
	   * @property {ChannelType} [type] The type of the channel (only conversion between text and news is supported)
	   * @property {number} [position] The position of the channel
	   * @property {?string} [topic] The topic of the text channel
	   * @property {boolean} [nsfw] Whether the channel is NSFW
	   * @property {number} [bitrate] The bitrate of the voice channel
	   * @property {number} [userLimit] The user limit of the voice channel
	   * @property {?CategoryChannelResolvable} [parent] The parent of the channel
	   * @property {boolean} [lockPermissions]
	   * Lock the permissions of the channel to what the parent's permissions are
	   * @property {OverwriteResolvable[]|Collection<Snowflake, OverwriteResolvable>} [permissionOverwrites]
	   * Permission overwrites for the channel
	   * @property {number} [rateLimitPerUser] The rate limit per user (slowmode) for the channel in seconds
	   * @property {ThreadAutoArchiveDuration} [defaultAutoArchiveDuration]
	   * The default auto archive duration for all new threads in this channel
	   * @property {?string} [rtcRegion] The RTC region of the channel
	   * @property {?VideoQualityMode} [videoQualityMode] The camera video quality mode of the channel
	   * @property {GuildForumTagData[]} [availableTags] The tags to set as available in a forum channel
	   * @property {?DefaultReactionEmoji} [defaultReactionEmoji] The emoji to set as the default reaction emoji
	   * @property {number} [defaultThreadRateLimitPerUser] The rate limit per user (slowmode) to set on forum posts
	   * @property {ChannelFlagsResolvable} [flags] The flags to set on the channel
	   * @property {?SortOrderType} [defaultSortOrder] The default sort order mode to set on the channel
	   * @property {ForumLayoutType} [defaultForumLayout] The default forum layout to set on the channel
	   * @property {string} [reason] Reason for editing this channel
	   */

	  /**
	   * Edits the channel.
	   * @param {GuildChannelResolvable} channel The channel to edit
	   * @param {GuildChannelEditOptions} options Options for editing the channel
	   * @returns {Promise<GuildChannel>}
	   * @example
	   * // Edit a channel
	   * guild.channels.edit('222197033908436994', { name: 'new-channel' })
	   *   .then(console.log)
	   *   .catch(console.error);
	   */
	  async edit(channel, options) {
	    const resolvedChannel = this.resolve(channel);
	    if (!resolvedChannel) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'channel', 'GuildChannelResolvable');

	    const parent = options.parent && this.client.channels.resolveId(options.parent);

	    if (options.position !== undefined) {
	      await this.setPosition(resolvedChannel, options.position, { position: options.position, reason: options.reason });
	    }

	    let permission_overwrites = options.permissionOverwrites?.map(overwrite =>
	      PermissionOverwrites.resolve(overwrite, this.guild),
	    );

	    if (options.lockPermissions) {
	      if (parent) {
	        const newParent = this.guild.channels.resolve(parent);
	        if (newParent?.type === ChannelType.GuildCategory) {
	          permission_overwrites = newParent.permissionOverwrites.cache.map(overwrite =>
	            PermissionOverwrites.resolve(overwrite, this.guild),
	          );
	        }
	      } else if (resolvedChannel.parent) {
	        permission_overwrites = resolvedChannel.parent.permissionOverwrites.cache.map(overwrite =>
	          PermissionOverwrites.resolve(overwrite, this.guild),
	        );
	      }
	    }

	    const newData = await this.client.rest.patch(Routes.channel(resolvedChannel.id), {
	      body: {
	        name: options.name,
	        type: options.type,
	        topic: options.topic,
	        nsfw: options.nsfw,
	        bitrate: options.bitrate,
	        user_limit: options.userLimit,
	        rtc_region: options.rtcRegion,
	        video_quality_mode: options.videoQualityMode,
	        parent_id: parent,
	        lock_permissions: options.lockPermissions,
	        rate_limit_per_user: options.rateLimitPerUser,
	        default_auto_archive_duration: options.defaultAutoArchiveDuration,
	        permission_overwrites,
	        available_tags: options.availableTags?.map(availableTag => transformGuildForumTag(availableTag)),
	        default_reaction_emoji:
	          options.defaultReactionEmoji && transformGuildDefaultReaction(options.defaultReactionEmoji),
	        default_thread_rate_limit_per_user: options.defaultThreadRateLimitPerUser,
	        flags: 'flags' in options ? ChannelFlagsBitField.resolve(options.flags) : undefined,
	        default_sort_order: options.defaultSortOrder,
	        default_forum_layout: options.defaultForumLayout,
	      },
	      reason: options.reason,
	    });

	    return this.client.actions.ChannelUpdate.handle(newData).updated;
	  }

	  /**
	   * Sets a new position for the guild channel.
	   * @param {GuildChannelResolvable} channel The channel to set the position for
	   * @param {number} position The new position for the guild channel
	   * @param {SetChannelPositionOptions} options Options for setting position
	   * @returns {Promise<GuildChannel>}
	   * @example
	   * // Set a new channel position
	   * guild.channels.setPosition('222078374472843266', 2)
	   *   .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))
	   *   .catch(console.error);
	   */
	  async setPosition(channel, position, { relative, reason } = {}) {
	    channel = this.resolve(channel);
	    if (!channel) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'channel', 'GuildChannelResolvable');
	    const updatedChannels = await setPosition(
	      channel,
	      position,
	      relative,
	      this.guild._sortedChannels(channel),
	      this.client,
	      Routes.guildChannels(this.guild.id),
	      reason,
	    );

	    this.client.actions.GuildChannelsPositionUpdate.handle({
	      guild_id: this.guild.id,
	      channels: updatedChannels,
	    });
	    return channel;
	  }

	  /**
	   * Obtains one or more guild channels from Discord, or the channel cache if they're already available.
	   * @param {Snowflake} [id] The channel's id
	   * @param {BaseFetchOptions} [options] Additional options for this fetch
	   * @returns {Promise<?GuildChannel|ThreadChannel|Collection<Snowflake, ?GuildChannel>>}
	   * @example
	   * // Fetch all channels from the guild (excluding threads)
	   * message.guild.channels.fetch()
	   *   .then(channels => console.log(`There are ${channels.size} channels.`))
	   *   .catch(console.error);
	   * @example
	   * // Fetch a single channel
	   * message.guild.channels.fetch('222197033908436994')
	   *   .then(channel => console.log(`The channel name is: ${channel.name}`))
	   *   .catch(console.error);
	   */
	  async fetch(id, { cache = true, force = false } = {}) {
	    if (id && !force) {
	      const existing = this.cache.get(id);
	      if (existing) return existing;
	    }

	    if (id) {
	      const data = await this.client.rest.get(Routes.channel(id));
	      // Since this is the guild manager, throw if on a different guild
	      if (this.guild.id !== data.guild_id) throw new DiscordjsError(ErrorCodes.GuildChannelUnowned);
	      return this.client.channels._add(data, this.guild, { cache });
	    }

	    const data = await this.client.rest.get(Routes.guildChannels(this.guild.id));
	    const channels = new Collection();
	    for (const channel of data) channels.set(channel.id, this.client.channels._add(channel, this.guild, { cache }));
	    return channels;
	  }

	  /**
	   * Fetches all webhooks for the channel.
	   * @param {GuildChannelResolvable} channel The channel to fetch webhooks for
	   * @returns {Promise<Collection<Snowflake, Webhook>>}
	   * @example
	   * // Fetch webhooks
	   * guild.channels.fetchWebhooks('769862166131245066')
	   *   .then(hooks => console.log(`This channel has ${hooks.size} hooks`))
	   *   .catch(console.error);
	   */
	  async fetchWebhooks(channel) {
	    const id = this.resolveId(channel);
	    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'channel', 'GuildChannelResolvable');
	    const data = await this.client.rest.get(Routes.channelWebhooks(id));
	    return data.reduce((hooks, hook) => hooks.set(hook.id, new Webhook(this.client, hook)), new Collection());
	  }

	  /**
	   * Data that can be resolved to give a Category Channel object. This can be:
	   * * A CategoryChannel object
	   * * A Snowflake
	   * @typedef {CategoryChannel|Snowflake} CategoryChannelResolvable
	   */

	  /**
	   * The data needed for updating a channel's position.
	   * @typedef {Object} ChannelPosition
	   * @property {GuildChannel|Snowflake} channel Channel to update
	   * @property {number} [position] New position for the channel
	   * @property {CategoryChannelResolvable} [parent] Parent channel for this channel
	   * @property {boolean} [lockPermissions] If the overwrites should be locked to the parents overwrites
	   */

	  /**
	   * Batch-updates the guild's channels' positions.
	   * <info>Only one channel's parent can be changed at a time</info>
	   * @param {ChannelPosition[]} channelPositions Channel positions to update
	   * @returns {Promise<Guild>}
	   * @example
	   * guild.channels.setPositions([{ channel: channelId, position: newChannelIndex }])
	   *   .then(guild => console.log(`Updated channel positions for ${guild}`))
	   *   .catch(console.error);
	   */
	  async setPositions(channelPositions) {
	    channelPositions = channelPositions.map(channelPosition => ({
	      id: this.client.channels.resolveId(channelPosition.channel),
	      position: channelPosition.position,
	      lock_permissions: channelPosition.lockPermissions,
	      parent_id: channelPosition.parent !== undefined ? this.resolveId(channelPosition.parent) : undefined,
	    }));

	    await this.client.rest.patch(Routes.guildChannels(this.guild.id), { body: channelPositions });
	    return this.client.actions.GuildChannelsPositionUpdate.handle({
	      guild_id: this.guild.id,
	      channels: channelPositions,
	    }).guild;
	  }

	  /**
	   * Data returned from fetching threads.
	   * @typedef {Object} FetchedThreads
	   * @property {Collection<Snowflake, ThreadChannel>} threads The threads that were fetched
	   * @property {Collection<Snowflake, ThreadMember>} members The thread members in the received threads
	   */

	  /**
	   * Obtains all active thread channels in the guild.
	   * @param {boolean} [cache=true] Whether to cache the fetched data
	   * @returns {Promise<FetchedThreads>}
	   * @example
	   * // Fetch all threads from the guild
	   * message.guild.channels.fetchActiveThreads()
	   *   .then(fetched => console.log(`There are ${fetched.threads.size} threads.`))
	   *   .catch(console.error);
	   */
	  async fetchActiveThreads(cache = true) {
	    const data = await this.rawFetchGuildActiveThreads();
	    return GuildTextThreadManager._mapThreads(data, this.client, { guild: this.guild, cache });
	  }

	  /**
	   * `GET /guilds/{guild.id}/threads/active`
	   * @private
	   * @returns {Promise<RESTGetAPIGuildThreadsResult>}
	   */
	  rawFetchGuildActiveThreads() {
	    return this.client.rest.get(Routes.guildActiveThreads(this.guild.id));
	  }

	  /**
	   * Deletes the channel.
	   * @param {GuildChannelResolvable} channel The channel to delete
	   * @param {string} [reason] Reason for deleting this channel
	   * @returns {Promise<void>}
	   * @example
	   * // Delete the channel
	   * guild.channels.delete('858850993013260338', 'making room for new channels')
	   *   .then(console.log)
	   *   .catch(console.error);
	   */
	  async delete(channel, reason) {
	    const id = this.resolveId(channel);
	    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'channel', 'GuildChannelResolvable');
	    await this.client.rest.delete(Routes.channel(id), { reason });
	    this.client.actions.ChannelDelete.handle({ id });
	  }
	}

	GuildChannelManager_1 = GuildChannelManager;
	return GuildChannelManager_1;
}

var GuildEmojiManager_1;
var hasRequiredGuildEmojiManager;

function requireGuildEmojiManager () {
	if (hasRequiredGuildEmojiManager) return GuildEmojiManager_1;
	hasRequiredGuildEmojiManager = 1;

	const { Collection } = requireDist$3();
	const { Routes, PermissionFlagsBits } = requireV10$6();
	const BaseGuildEmojiManager = requireBaseGuildEmojiManager();
	const { DiscordjsError, DiscordjsTypeError, ErrorCodes } = requireErrors$1();
	const { resolveImage } = requireDataResolver();

	/**
	 * Manages API methods for GuildEmojis and stores their cache.
	 * @extends {BaseGuildEmojiManager}
	 */
	class GuildEmojiManager extends BaseGuildEmojiManager {
	  constructor(guild, iterable) {
	    super(guild.client, iterable);

	    /**
	     * The guild this manager belongs to
	     * @type {Guild}
	     */
	    this.guild = guild;
	  }

	  _add(data, cache) {
	    return super._add(data, cache, { extras: [this.guild] });
	  }

	  /**
	   * Options used for creating an emoji in a guild.
	   * @typedef {Object} GuildEmojiCreateOptions
	   * @property {BufferResolvable|Base64Resolvable} attachment The image for the emoji
	   * @property {string} name The name for the emoji
	   * @property {Collection<Snowflake, Role>|RoleResolvable[]} [roles] The roles to limit the emoji to
	   * @property {string} [reason] The reason for creating the emoji
	   */

	  /**
	   * Creates a new custom emoji in the guild.
	   * @param {GuildEmojiCreateOptions} options Options for creating the emoji
	   * @returns {Promise<Emoji>} The created emoji
	   * @example
	   * // Create a new emoji from a URL
	   * guild.emojis.create({ attachment: 'https://i.imgur.com/w3duR07.png', name: 'rip' })
	   *   .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))
	   *   .catch(console.error);
	   * @example
	   * // Create a new emoji from a file on your computer
	   * guild.emojis.create({ attachment: './memes/banana.png', name: 'banana' })
	   *   .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))
	   *   .catch(console.error);
	   */
	  async create({ attachment, name, roles, reason }) {
	    attachment = await resolveImage(attachment);
	    if (!attachment) throw new DiscordjsTypeError(ErrorCodes.ReqResourceType);

	    const body = { image: attachment, name };
	    if (roles) {
	      if (!Array.isArray(roles) && !(roles instanceof Collection)) {
	        throw new DiscordjsTypeError(
	          ErrorCodes.InvalidType,
	          'options.roles',
	          'Array or Collection of Roles or Snowflakes',
	          true,
	        );
	      }
	      body.roles = [];
	      for (const role of roles.values()) {
	        const resolvedRole = this.guild.roles.resolveId(role);
	        if (!resolvedRole) {
	          throw new DiscordjsTypeError(ErrorCodes.InvalidElement, 'Array or Collection', 'options.roles', role);
	        }
	        body.roles.push(resolvedRole);
	      }
	    }

	    const emoji = await this.client.rest.post(Routes.guildEmojis(this.guild.id), { body, reason });
	    return this.client.actions.GuildEmojiCreate.handle(this.guild, emoji).emoji;
	  }

	  /**
	   * Obtains one or more emojis from Discord, or the emoji cache if they're already available.
	   * @param {Snowflake} [id] The emoji's id
	   * @param {BaseFetchOptions} [options] Additional options for this fetch
	   * @returns {Promise<GuildEmoji|Collection<Snowflake, GuildEmoji>>}
	   * @example
	   * // Fetch all emojis from the guild
	   * message.guild.emojis.fetch()
	   *   .then(emojis => console.log(`There are ${emojis.size} emojis.`))
	   *   .catch(console.error);
	   * @example
	   * // Fetch a single emoji
	   * message.guild.emojis.fetch('222078108977594368')
	   *   .then(emoji => console.log(`The emoji name is: ${emoji.name}`))
	   *   .catch(console.error);
	   */
	  async fetch(id, { cache = true, force = false } = {}) {
	    if (id) {
	      if (!force) {
	        const existing = this.cache.get(id);
	        if (existing) return existing;
	      }
	      const emoji = await this.client.rest.get(Routes.guildEmoji(this.guild.id, id));
	      return this._add(emoji, cache);
	    }

	    const data = await this.client.rest.get(Routes.guildEmojis(this.guild.id));
	    const emojis = new Collection();
	    for (const emoji of data) emojis.set(emoji.id, this._add(emoji, cache));
	    return emojis;
	  }

	  /**
	   * Deletes an emoji.
	   * @param {EmojiResolvable} emoji The Emoji resolvable to delete
	   * @param {string} [reason] Reason for deleting the emoji
	   * @returns {Promise<void>}
	   */
	  async delete(emoji, reason) {
	    const id = this.resolveId(emoji);
	    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'emoji', 'EmojiResolvable', true);
	    await this.client.rest.delete(Routes.guildEmoji(this.guild.id, id), { reason });
	  }

	  /**
	   * Edits an emoji.
	   * @param {EmojiResolvable} emoji The Emoji resolvable to edit
	   * @param {GuildEmojiEditOptions} options The options to provide
	   * @returns {Promise<GuildEmoji>}
	   */
	  async edit(emoji, options) {
	    const id = this.resolveId(emoji);
	    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'emoji', 'EmojiResolvable', true);
	    const roles = options.roles?.map(role => this.guild.roles.resolveId(role));
	    const newData = await this.client.rest.patch(Routes.guildEmoji(this.guild.id, id), {
	      body: {
	        name: options.name,
	        roles,
	      },
	      reason: options.reason,
	    });
	    const existing = this.cache.get(id);
	    if (existing) {
	      const clone = existing._clone();
	      clone._patch(newData);
	      return clone;
	    }
	    return this._add(newData);
	  }

	  /**
	   * Fetches the author for this emoji
	   * @param {EmojiResolvable} emoji The emoji to fetch the author of
	   * @returns {Promise<User>}
	   */
	  async fetchAuthor(emoji) {
	    emoji = this.resolve(emoji);
	    if (!emoji) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'emoji', 'EmojiResolvable', true);
	    if (emoji.managed) {
	      throw new DiscordjsError(ErrorCodes.EmojiManaged);
	    }

	    const { me } = this.guild.members;
	    if (!me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);
	    if (!me.permissions.has(PermissionFlagsBits.ManageGuildExpressions)) {
	      throw new DiscordjsError(ErrorCodes.MissingManageGuildExpressionsPermission, this.guild);
	    }

	    const data = await this.client.rest.get(Routes.guildEmoji(this.guild.id, emoji.id));
	    emoji._patch(data);
	    return emoji.author;
	  }
	}

	GuildEmojiManager_1 = GuildEmojiManager;
	return GuildEmojiManager_1;
}

var GuildInviteManager_1;
var hasRequiredGuildInviteManager;

function requireGuildInviteManager () {
	if (hasRequiredGuildInviteManager) return GuildInviteManager_1;
	hasRequiredGuildInviteManager = 1;

	const { Collection } = requireDist$3();
	const { Routes } = requireV10$6();
	const CachedManager = requireCachedManager();
	const { DiscordjsError, ErrorCodes } = requireErrors$1();
	const Invite = requireInvite$2();
	const { resolveInviteCode } = requireDataResolver();

	/**
	 * Manages API methods for GuildInvites and stores their cache.
	 * @extends {CachedManager}
	 */
	class GuildInviteManager extends CachedManager {
	  constructor(guild, iterable) {
	    super(guild.client, Invite, iterable);

	    /**
	     * The guild this Manager belongs to
	     * @type {Guild}
	     */
	    this.guild = guild;
	  }

	  /**
	   * The cache of this Manager
	   * @type {Collection<string, Invite>}
	   * @name GuildInviteManager#cache
	   */

	  _add(data, cache) {
	    return super._add(data, cache, { id: data.code, extras: [this.guild] });
	  }

	  /**
	   * Data that resolves to give an Invite object. This can be:
	   * * An invite code
	   * * An invite URL
	   * @typedef {string} InviteResolvable
	   */

	  /**
	   * Data that can be resolved to a channel that an invite can be created on. This can be:
	   * * TextChannel
	   * * VoiceChannel
	   * * NewsChannel
	   * * StageChannel
	   * * ForumChannel
	   * * MediaChannel
	   * * Snowflake
	   * @typedef {TextChannel|VoiceChannel|NewsChannel|StageChannel|ForumChannel|MediaChannel|Snowflake}
	   * GuildInvitableChannelResolvable
	   */

	  /**
	   * Resolves an InviteResolvable to an Invite object.
	   * @method resolve
	   * @memberof GuildInviteManager
	   * @instance
	   * @param {InviteResolvable} invite The invite resolvable to resolve
	   * @returns {?Invite}
	   */

	  /**
	   * Resolves an InviteResolvable to an invite code string.
	   * @method resolveId
	   * @memberof GuildInviteManager
	   * @instance
	   * @param {InviteResolvable} invite The invite resolvable to resolve
	   * @returns {?string}
	   */

	  /**
	   * Options used to fetch a single invite from a guild.
	   * @typedef {Object} FetchInviteOptions
	   * @property {InviteResolvable} code The invite to fetch
	   * @property {boolean} [cache=true] Whether or not to cache the fetched invite
	   * @property {boolean} [force=false] Whether to skip the cache check and request the API
	   */

	  /**
	   * Options used to fetch all invites from a guild.
	   * @typedef {Object} FetchInvitesOptions
	   * @property {GuildInvitableChannelResolvable} [channelId]
	   * The channel to fetch all invites from
	   * @property {boolean} [cache=true] Whether or not to cache the fetched invites
	   */

	  /**
	   * Fetches invite(s) from Discord.
	   * @param {InviteResolvable|FetchInviteOptions|FetchInvitesOptions} [options] Options for fetching guild invite(s)
	   * @returns {Promise<Invite|Collection<string, Invite>>}
	   * @example
	   * // Fetch all invites from a guild
	   * guild.invites.fetch()
	   *   .then(console.log)
	   *   .catch(console.error);
	   * @example
	   * // Fetch all invites from a guild without caching
	   * guild.invites.fetch({ cache: false })
	   *   .then(console.log)
	   *   .catch(console.error);
	   * @example
	   * // Fetch all invites from a channel
	   * guild.invites.fetch({ channelId: '222197033908436994' })
	   *   .then(console.log)
	   *   .catch(console.error);
	   * @example
	   * // Fetch a single invite
	   * guild.invites.fetch('bRCvFy9')
	   *   .then(console.log)
	   *   .catch(console.error);
	   * @example
	   * // Fetch a single invite without checking cache
	   * guild.invites.fetch({ code: 'bRCvFy9', force: true })
	   *   .then(console.log)
	   *   .catch(console.error)
	   * @example
	   * // Fetch a single invite without caching
	   * guild.invites.fetch({ code: 'bRCvFy9', cache: false })
	   *   .then(console.log)
	   *   .catch(console.error);
	   */
	  fetch(options) {
	    if (!options) return this._fetchMany();
	    if (typeof options === 'string') {
	      const code = resolveInviteCode(options);
	      if (!code) return Promise.reject(new DiscordjsError(ErrorCodes.InviteResolveCode));
	      return this._fetchSingle({ code, cache: true });
	    }
	    if (!options.code) {
	      if (options.channelId) {
	        const id = this.guild.channels.resolveId(options.channelId);
	        if (!id) return Promise.reject(new DiscordjsError(ErrorCodes.GuildChannelResolve));
	        return this._fetchChannelMany(id, options.cache);
	      }

	      if ('cache' in options) return this._fetchMany(options.cache);
	      return Promise.reject(new DiscordjsError(ErrorCodes.InviteResolveCode));
	    }
	    return this._fetchSingle({
	      ...options,
	      code: resolveInviteCode(options.code),
	    });
	  }

	  async _fetchSingle({ code, cache, force = false }) {
	    if (!force) {
	      const existing = this.cache.get(code);
	      if (existing) return existing;
	    }

	    const invites = await this._fetchMany(cache);
	    const invite = invites.get(code);
	    if (!invite) throw new DiscordjsError(ErrorCodes.InviteNotFound);
	    return invite;
	  }

	  async _fetchMany(cache) {
	    const data = await this.client.rest.get(Routes.guildInvites(this.guild.id));
	    return data.reduce((col, invite) => col.set(invite.code, this._add(invite, cache)), new Collection());
	  }

	  async _fetchChannelMany(channelId, cache) {
	    const data = await this.client.rest.get(Routes.channelInvites(channelId));
	    return data.reduce((col, invite) => col.set(invite.code, this._add(invite, cache)), new Collection());
	  }

	  /**
	   * Create an invite to the guild from the provided channel.
	   * @param {GuildInvitableChannelResolvable} channel The options for creating the invite from a channel.
	   * @param {InviteCreateOptions} [options={}] The options for creating the invite from a channel.
	   * @returns {Promise<Invite>}
	   * @example
	   * // Create an invite to a selected channel
	   * guild.invites.create('599942732013764608')
	   *   .then(console.log)
	   *   .catch(console.error);
	   */
	  async create(
	    channel,
	    { temporary, maxAge, maxUses, unique, targetUser, targetApplication, targetType, reason } = {},
	  ) {
	    const id = this.guild.channels.resolveId(channel);
	    if (!id) throw new DiscordjsError(ErrorCodes.GuildChannelResolve);

	    const invite = await this.client.rest.post(Routes.channelInvites(id), {
	      body: {
	        temporary,
	        max_age: maxAge,
	        max_uses: maxUses,
	        unique,
	        target_user_id: this.client.users.resolveId(targetUser),
	        target_application_id: targetApplication?.id ?? targetApplication?.applicationId ?? targetApplication,
	        target_type: targetType,
	      },
	      reason,
	    });
	    return new Invite(this.client, invite);
	  }

	  /**
	   * Deletes an invite.
	   * @param {InviteResolvable} invite The invite to delete
	   * @param {string} [reason] Reason for deleting the invite
	   * @returns {Promise<void>}
	   */
	  async delete(invite, reason) {
	    const code = resolveInviteCode(invite);

	    await this.client.rest.delete(Routes.invite(code), { reason });
	  }
	}

	GuildInviteManager_1 = GuildInviteManager;
	return GuildInviteManager_1;
}

var GuildMemberManager_1;
var hasRequiredGuildMemberManager;

function requireGuildMemberManager () {
	if (hasRequiredGuildMemberManager) return GuildMemberManager_1;
	hasRequiredGuildMemberManager = 1;

	const { setTimeout, clearTimeout } = require$$0$e;
	const { Collection } = requireDist$3();
	const { makeURLSearchParams } = requireWeb();
	const { DiscordSnowflake } = /*@__PURE__*/ requireCjs$2();
	const { Routes, GatewayOpcodes } = requireV10$6();
	const CachedManager = requireCachedManager();
	const { DiscordjsError, DiscordjsTypeError, DiscordjsRangeError, ErrorCodes } = requireErrors$1();
	const BaseGuildVoiceChannel = requireBaseGuildVoiceChannel();
	const { GuildMember } = requireGuildMember();
	const { Role } = requireRole$1();
	const Events = requireEvents();
	const { GuildMemberFlagsBitField } = requireGuildMemberFlagsBitField();
	const Partials = requirePartials();

	/**
	 * Manages API methods for GuildMembers and stores their cache.
	 * @extends {CachedManager}
	 */
	class GuildMemberManager extends CachedManager {
	  constructor(guild, iterable) {
	    super(guild.client, GuildMember, iterable);

	    /**
	     * The guild this manager belongs to
	     * @type {Guild}
	     */
	    this.guild = guild;
	  }

	  /**
	   * The cache of this Manager
	   * @type {Collection<Snowflake, GuildMember>}
	   * @name GuildMemberManager#cache
	   */

	  _add(data, cache = true) {
	    return super._add(data, cache, { id: data.user.id, extras: [this.guild] });
	  }

	  /**
	   * Data that resolves to give a GuildMember object. This can be:
	   * * A GuildMember object
	   * * A User resolvable
	   * @typedef {GuildMember|UserResolvable} GuildMemberResolvable
	   */

	  /**
	   * Resolves a {@link GuildMemberResolvable} to a {@link GuildMember} object.
	   * @param {GuildMemberResolvable} member The user that is part of the guild
	   * @returns {?GuildMember}
	   */
	  resolve(member) {
	    const memberResolvable = super.resolve(member);
	    if (memberResolvable) return memberResolvable;
	    const userResolvable = this.client.users.resolveId(member);
	    if (userResolvable) return super.resolve(userResolvable);
	    return null;
	  }

	  /**
	   * Resolves a {@link GuildMemberResolvable} to a member id.
	   * @param {GuildMemberResolvable} member The user that is part of the guild
	   * @returns {?Snowflake}
	   */
	  resolveId(member) {
	    const memberResolvable = super.resolveId(member);
	    if (memberResolvable) return memberResolvable;
	    const userResolvable = this.client.users.resolveId(member);
	    return this.cache.has(userResolvable) ? userResolvable : null;
	  }

	  /**
	   * Options used to add a user to a guild using OAuth2.
	   * @typedef {Object} AddGuildMemberOptions
	   * @property {string} accessToken An OAuth2 access token for the user with the {@link OAuth2Scopes.GuildsJoin}
	   * scope granted to the bot's application
	   * @property {string} [nick] The nickname to give to the member
	   * <info>This property requires the {@link PermissionFlagsBits.ManageNicknames} permission.</info>
	   * @property {Collection<Snowflake, Role>|RoleResolvable[]} [roles] The roles to add to the member
	   * <info>This property requires the {@link PermissionFlagsBits.ManageRoles} permission.</info>
	   * @property {boolean} [mute] Whether the member should be muted
	   * <info>This property requires the {@link PermissionFlagsBits.MuteMembers} permission.</info>
	   * @property {boolean} [deaf] Whether the member should be deafened
	   * <info>This property requires the {@link PermissionFlagsBits.MuteMembers} permission.</info>
	   * @property {boolean} [force] Whether to skip the cache check and request the API directly
	   * @property {boolean} [fetchWhenExisting=true] Whether to fetch the user if not cached and already a member
	   */

	  /**
	   * Adds a user to the guild using OAuth2.
	   * <info>This method requires the {@link PermissionFlagsBits.CreateInstantInvite} permission.
	   * @param {UserResolvable} user The user to add to the guild
	   * @param {AddGuildMemberOptions} options Options for adding the user to the guild
	   * @returns {Promise<?GuildMember>}
	   */
	  async add(user, options) {
	    const userId = this.client.users.resolveId(user);
	    if (!userId) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'user', 'UserResolvable');
	    if (!options.force) {
	      const cachedUser = this.cache.get(userId);
	      if (cachedUser) return cachedUser;
	    }
	    const resolvedOptions = {
	      access_token: options.accessToken,
	      nick: options.nick,
	      mute: options.mute,
	      deaf: options.deaf,
	    };
	    if (options.roles) {
	      if (!Array.isArray(options.roles) && !(options.roles instanceof Collection)) {
	        throw new DiscordjsTypeError(
	          ErrorCodes.InvalidType,
	          'options.roles',
	          'Array or Collection of Roles or Snowflakes',
	          true,
	        );
	      }
	      const resolvedRoles = [];
	      for (const role of options.roles.values()) {
	        const resolvedRole = this.guild.roles.resolveId(role);
	        if (!resolvedRole) {
	          throw new DiscordjsTypeError(ErrorCodes.InvalidElement, 'Array or Collection', 'options.roles', role);
	        }
	        resolvedRoles.push(resolvedRole);
	      }
	      resolvedOptions.roles = resolvedRoles;
	    }
	    const data = await this.client.rest.put(Routes.guildMember(this.guild.id, userId), { body: resolvedOptions });

	    // Data is an empty array buffer if the member is already part of the guild.
	    return data instanceof ArrayBuffer
	      ? options.fetchWhenExisting === false
	        ? null
	        : this.fetch(userId)
	      : this._add(data);
	  }

	  /**
	   * The client user as a GuildMember of this guild
	   * @type {?GuildMember}
	   * @readonly
	   */
	  get me() {
	    return (
	      this.resolve(this.client.user.id) ??
	      (this.client.options.partials.includes(Partials.GuildMember)
	        ? this._add({ user: { id: this.client.user.id } }, true)
	        : null)
	    );
	  }

	  /**
	   * Options used to fetch a single member from a guild.
	   * @typedef {BaseFetchOptions} FetchMemberOptions
	   * @property {UserResolvable} user The user to fetch
	   */

	  /**
	   * Options used to fetch multiple members from a guild.
	   * @typedef {Object} FetchMembersOptions
	   * @property {UserResolvable|UserResolvable[]} [user] The user(s) to fetch
	   * @property {?string} [query] Limit fetch to members with similar usernames
	   * @property {number} [limit=0] Maximum number of members to request
	   * @property {boolean} [withPresences=false] Whether to include the presences
	   * @property {number} [time=120e3] Timeout for receipt of members
	   * @property {?string} [nonce] Nonce for this request (32 characters max - default to base 16 now timestamp)
	   */

	  /**
	   * Fetches member(s) from a guild.
	   * @param {UserResolvable|FetchMemberOptions|FetchMembersOptions} [options] Options for fetching member(s).
	   * Omitting the parameter or providing `undefined` will fetch all members.
	   * @returns {Promise<GuildMember|Collection<Snowflake, GuildMember>>}
	   * @example
	   * // Fetch all members from a guild
	   * guild.members.fetch()
	   *   .then(console.log)
	   *   .catch(console.error);
	   * @example
	   * // Fetch a single member
	   * guild.members.fetch('66564597481480192')
	   *   .then(console.log)
	   *   .catch(console.error);
	   * @example
	   * // Fetch a single member without checking cache
	   * guild.members.fetch({ user, force: true })
	   *   .then(console.log)
	   *   .catch(console.error)
	   * @example
	   * // Fetch a single member without caching
	   * guild.members.fetch({ user, cache: false })
	   *   .then(console.log)
	   *   .catch(console.error);
	   * @example
	   * // Fetch by an array of users including their presences
	   * guild.members.fetch({ user: ['66564597481480192', '191615925336670208'], withPresences: true })
	   *   .then(console.log)
	   *   .catch(console.error);
	   * @example
	   * // Fetch by query
	   * guild.members.fetch({ query: 'hydra', limit: 1 })
	   *   .then(console.log)
	   *   .catch(console.error);
	   */
	  fetch(options) {
	    if (!options) return this._fetchMany();
	    const { user: users, limit, withPresences, cache, force } = options;
	    const resolvedUser = this.client.users.resolveId(users ?? options);
	    if (resolvedUser && !limit && !withPresences) return this._fetchSingle({ user: resolvedUser, cache, force });
	    const resolvedUsers = users?.map?.(user => this.client.users.resolveId(user)) ?? resolvedUser ?? undefined;
	    return this._fetchMany({ ...options, users: resolvedUsers });
	  }

	  async _fetchSingle({ user, cache, force = false }) {
	    if (!force) {
	      const existing = this.cache.get(user);
	      if (existing && !existing.partial) return existing;
	    }

	    const data = await this.client.rest.get(Routes.guildMember(this.guild.id, user));
	    return this._add(data, cache);
	  }

	  _fetchMany({
	    limit = 0,
	    withPresences: presences,
	    users,
	    query,
	    time = 120e3,
	    nonce = DiscordSnowflake.generate().toString(),
	  } = {}) {
	    if (nonce.length > 32) return Promise.reject(new DiscordjsRangeError(ErrorCodes.MemberFetchNonceLength));

	    return new Promise((resolve, reject) => {
	      if (!query && !users) query = '';
	      this.guild.shard.send({
	        op: GatewayOpcodes.RequestGuildMembers,
	        d: {
	          guild_id: this.guild.id,
	          presences,
	          user_ids: users,
	          query,
	          nonce,
	          limit,
	        },
	      });
	      const fetchedMembers = new Collection();
	      let i = 0;
	      const handler = (members, _, chunk) => {
	        if (chunk.nonce !== nonce) return;
	        timeout.refresh();
	        i++;
	        for (const member of members.values()) {
	          fetchedMembers.set(member.id, member);
	        }
	        if (members.size < 1_000 || (limit && fetchedMembers.size >= limit) || i === chunk.count) {
	          clearTimeout(timeout);
	          this.client.removeListener(Events.GuildMembersChunk, handler);
	          this.client.decrementMaxListeners();
	          resolve(users && !Array.isArray(users) && fetchedMembers.size ? fetchedMembers.first() : fetchedMembers);
	        }
	      };
	      const timeout = setTimeout(() => {
	        this.client.removeListener(Events.GuildMembersChunk, handler);
	        this.client.decrementMaxListeners();
	        reject(new DiscordjsError(ErrorCodes.GuildMembersTimeout));
	      }, time).unref();
	      this.client.incrementMaxListeners();
	      this.client.on(Events.GuildMembersChunk, handler);
	    });
	  }

	  /**
	   * Fetches the client user as a GuildMember of the guild.
	   * @param {BaseFetchOptions} [options] The options for fetching the member
	   * @returns {Promise<GuildMember>}
	   */
	  fetchMe(options) {
	    return this.fetch({ ...options, user: this.client.user.id });
	  }

	  /**
	   * Options used for searching guild members.
	   * @typedef {Object} GuildSearchMembersOptions
	   * @property {string} query Filter members whose username or nickname start with this query
	   * @property {number} [limit] Maximum number of members to search
	   * @property {boolean} [cache=true] Whether or not to cache the fetched member(s)
	   */

	  /**
	   * Searches for members in the guild based on a query.
	   * @param {GuildSearchMembersOptions} options Options for searching members
	   * @returns {Promise<Collection<Snowflake, GuildMember>>}
	   */
	  async search({ query, limit, cache = true } = {}) {
	    const data = await this.client.rest.get(Routes.guildMembersSearch(this.guild.id), {
	      query: makeURLSearchParams({ query, limit }),
	    });
	    return data.reduce((col, member) => col.set(member.user.id, this._add(member, cache)), new Collection());
	  }

	  /**
	   * Options used for listing guild members.
	   * @typedef {Object} GuildListMembersOptions
	   * @property {Snowflake} [after] Limit fetching members to those with an id greater than the supplied id
	   * @property {number} [limit] Maximum number of members to list
	   * @property {boolean} [cache=true] Whether or not to cache the fetched member(s)
	   */

	  /**
	   * Lists up to 1000 members of the guild.
	   * @param {GuildListMembersOptions} [options] Options for listing members
	   * @returns {Promise<Collection<Snowflake, GuildMember>>}
	   */
	  async list({ after, limit, cache = true } = {}) {
	    const query = makeURLSearchParams({ limit, after });
	    const data = await this.client.rest.get(Routes.guildMembers(this.guild.id), { query });
	    return data.reduce((col, member) => col.set(member.user.id, this._add(member, cache)), new Collection());
	  }

	  /**
	   * The data for editing a guild member.
	   * @typedef {Object} GuildMemberEditOptions
	   * @property {?string} [nick] The nickname to set for the member
	   * @property {Collection<Snowflake, Role>|RoleResolvable[]} [roles] The roles or role ids to apply
	   * @property {boolean} [mute] Whether or not the member should be muted
	   * @property {boolean} [deaf] Whether or not the member should be deafened
	   * @property {?GuildVoiceChannelResolvable} [channel] Channel to move the member to
	   * (if they are connected to voice), or `null` if you want to disconnect them from voice
	   * @property {?DateResolvable} [communicationDisabledUntil] The date or timestamp
	   * for the member's communication to be disabled until. Provide `null` to enable communication again.
	   * @property {GuildMemberFlagsResolvable} [flags] The flags to set for the member
	   * @property {string} [reason] Reason for editing this user
	   */

	  /**
	   * Edits a member of the guild.
	   * <info>The user must be a member of the guild</info>
	   * @param {UserResolvable} user The member to edit
	   * @param {GuildMemberEditOptions} options The options to provide
	   * @returns {Promise<GuildMember>}
	   */
	  async edit(user, { reason, ...options }) {
	    const id = this.client.users.resolveId(user);
	    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'user', 'UserResolvable');

	    if (options.channel) {
	      options.channel = this.guild.channels.resolve(options.channel);
	      if (!(options.channel instanceof BaseGuildVoiceChannel)) {
	        throw new DiscordjsError(ErrorCodes.GuildVoiceChannelResolve);
	      }
	      options.channel_id = options.channel.id;
	      options.channel = undefined;
	    } else if (options.channel === null) {
	      options.channel_id = null;
	      options.channel = undefined;
	    }
	    options.roles &&= options.roles.map(role => (role instanceof Role ? role.id : role));

	    if (options.communicationDisabledUntil !== undefined) {
	      options.communication_disabled_until =
	        // eslint-disable-next-line eqeqeq
	        options.communicationDisabledUntil != null
	          ? new Date(options.communicationDisabledUntil).toISOString()
	          : options.communicationDisabledUntil;
	    }

	    if (options.flags !== undefined) {
	      options.flags = GuildMemberFlagsBitField.resolve(options.flags);
	    }

	    let endpoint;
	    if (id === this.client.user.id) {
	      const keys = Object.keys(options);
	      if (keys.length === 1 && keys[0] === 'nick') endpoint = Routes.guildMember(this.guild.id);
	      else endpoint = Routes.guildMember(this.guild.id, id);
	    } else {
	      endpoint = Routes.guildMember(this.guild.id, id);
	    }
	    const d = await this.client.rest.patch(endpoint, { body: options, reason });

	    const clone = this.cache.get(id)?._clone();
	    clone?._patch(d);
	    return clone ?? this._add(d, false);
	  }

	  /**
	   * Options used for pruning guild members.
	   * <info>It's recommended to set {@link GuildPruneMembersOptions#count options.count}
	   * to `false` for large guilds.</info>
	   * @typedef {Object} GuildPruneMembersOptions
	   * @property {number} [days] Number of days of inactivity required to kick
	   * @property {boolean} [dry=false] Get the number of users that will be kicked, without actually kicking them
	   * @property {boolean} [count] Whether or not to return the number of users that have been kicked.
	   * @property {RoleResolvable[]} [roles] Array of roles to bypass the "...and no roles" constraint when pruning
	   * @property {string} [reason] Reason for this prune
	   */

	  /**
	   * Prunes members from the guild based on how long they have been inactive.
	   * @param {GuildPruneMembersOptions} [options] Options for pruning
	   * @returns {Promise<?number>} The number of members that were/will be kicked
	   * @example
	   * // See how many members will be pruned
	   * guild.members.prune({ dry: true })
	   *   .then(pruned => console.log(`This will prune ${pruned} people!`))
	   *   .catch(console.error);
	   * @example
	   * // Actually prune the members
	   * guild.members.prune({ days: 1, reason: 'too many people!' })
	   *   .then(pruned => console.log(`I just pruned ${pruned} people!`))
	   *   .catch(console.error);
	   * @example
	   * // Include members with a specified role
	   * guild.members.prune({ days: 7, roles: ['657259391652855808'] })
	   *    .then(pruned => console.log(`I just pruned ${pruned} people!`))
	   *    .catch(console.error);
	   */
	  async prune({ days, dry = false, count: compute_prune_count, roles = [], reason } = {}) {
	    if (typeof days !== 'number') throw new DiscordjsTypeError(ErrorCodes.PruneDaysType);

	    const query = { days };
	    const resolvedRoles = [];

	    for (const role of roles) {
	      const resolvedRole = this.guild.roles.resolveId(role);
	      if (!resolvedRole) {
	        throw new DiscordjsTypeError(ErrorCodes.InvalidElement, 'Array', 'options.roles', role);
	      }
	      resolvedRoles.push(resolvedRole);
	    }

	    if (resolvedRoles.length) {
	      query.include_roles = dry ? resolvedRoles.join(',') : resolvedRoles;
	    }

	    const endpoint = Routes.guildPrune(this.guild.id);

	    const { pruned } = await (dry
	      ? this.client.rest.get(endpoint, { query: makeURLSearchParams(query), reason })
	      : this.client.rest.post(endpoint, { body: { ...query, compute_prune_count }, reason }));

	    return pruned;
	  }

	  /**
	   * Kicks a user from the guild.
	   * <info>The user must be a member of the guild</info>
	   * @param {UserResolvable} user The member to kick
	   * @param {string} [reason] Reason for kicking
	   * @returns {Promise<GuildMember|User|Snowflake>} Result object will be resolved as specifically as possible.
	   * If the GuildMember cannot be resolved, the User will instead be attempted to be resolved. If that also cannot
	   * be resolved, the user's id will be the result.
	   * @example
	   * // Kick a user by id (or with a user/guild member object)
	   * guild.members.kick('84484653687267328')
	   *   .then(kickInfo => console.log(`Kicked ${kickInfo.user?.tag ?? kickInfo.tag ?? kickInfo}`))
	   *   .catch(console.error);
	   */
	  async kick(user, reason) {
	    const id = this.client.users.resolveId(user);
	    if (!id) return Promise.reject(new DiscordjsTypeError(ErrorCodes.InvalidType, 'user', 'UserResolvable'));

	    await this.client.rest.delete(Routes.guildMember(this.guild.id, id), { reason });

	    return this.resolve(user) ?? this.client.users.resolve(user) ?? id;
	  }

	  /**
	   * Bans a user from the guild.
	   * @param {UserResolvable} user The user to ban
	   * @param {BanOptions} [options] Options for the ban
	   * @returns {Promise<GuildMember|User|Snowflake>} Result object will be resolved as specifically as possible.
	   * If the GuildMember cannot be resolved, the User will instead be attempted to be resolved. If that also cannot
	   * be resolved, the user id will be the result.
	   * Internally calls the GuildBanManager#create method.
	   * @example
	   * // Ban a user by id (or with a user/guild member object)
	   * guild.members.ban('84484653687267328')
	   *   .then(banInfo => console.log(`Banned ${banInfo.user?.tag ?? banInfo.tag ?? banInfo}`))
	   *   .catch(console.error);
	   */
	  ban(user, options) {
	    return this.guild.bans.create(user, options);
	  }

	  /**
	   * Unbans a user from the guild. Internally calls the {@link GuildBanManager#remove} method.
	   * @param {UserResolvable} user The user to unban
	   * @param {string} [reason] Reason for unbanning user
	   * @returns {Promise<?User>} The user that was unbanned
	   * @example
	   * // Unban a user by id (or with a user/guild member object)
	   * guild.members.unban('84484653687267328')
	   *   .then(user => console.log(`Unbanned ${user.username} from ${guild.name}`))
	   *   .catch(console.error);
	   */
	  unban(user, reason) {
	    return this.guild.bans.remove(user, reason);
	  }

	  /**
	   * Bulk ban users from a guild, and optionally delete previous messages sent by them.
	   * @param {Collection<Snowflake, UserResolvable>|UserResolvable[]} users The users to ban
	   * @param {BulkBanOptions} [options] The options for bulk banning users
	   * @returns {Promise<BulkBanResult>} Returns an object with `bannedUsers` key containing the IDs of the banned users
	   * and the key `failedUsers` with the IDs that could not be banned or were already banned.
	   * Internally calls the GuildBanManager#bulkCreate method.
	   * @example
	   * // Bulk ban users by ids (or with user/guild member objects) and delete all their messages from the past 7 days
	   * guild.members.bulkBan(['84484653687267328'], { deleteMessageSeconds: 7 * 24 * 60 * 60 })
	   *   .then(result => {
	   *     console.log(`Banned ${result.bannedUsers.length} users, failed to ban ${result.failedUsers.length} users.`)
	   *   })
	   *   .catch(console.error);
	   */
	  bulkBan(users, options = {}) {
	    return this.guild.bans.bulkCreate(users, options);
	  }

	  /**
	   * Options used for adding or removing a role from a member.
	   * @typedef {Object} AddOrRemoveGuildMemberRoleOptions
	   * @property {GuildMemberResolvable} user The user to add/remove the role from
	   * @property {RoleResolvable} role The role to add/remove
	   * @property {string} [reason] Reason for adding/removing the role
	   */

	  /**
	   * Adds a role to a member.
	   * @param {AddOrRemoveGuildMemberRoleOptions} options Options for adding the role
	   * @returns {Promise<GuildMember|User|Snowflake>}
	   */
	  async addRole(options) {
	    const { user, role, reason } = options;
	    const userId = this.guild.members.resolveId(user);
	    const roleId = this.guild.roles.resolveId(role);
	    await this.client.rest.put(Routes.guildMemberRole(this.guild.id, userId, roleId), { reason });

	    return this.resolve(user) ?? this.client.users.resolve(user) ?? userId;
	  }

	  /**
	   * Removes a role from a member.
	   * @param {AddOrRemoveGuildMemberRoleOptions} options Options for removing the role
	   * @returns {Promise<GuildMember|User|Snowflake>}
	   */
	  async removeRole(options) {
	    const { user, role, reason } = options;
	    const userId = this.guild.members.resolveId(user);
	    const roleId = this.guild.roles.resolveId(role);
	    await this.client.rest.delete(Routes.guildMemberRole(this.guild.id, userId, roleId), { reason });

	    return this.resolve(user) ?? this.client.users.resolve(user) ?? userId;
	  }
	}

	GuildMemberManager_1 = GuildMemberManager;
	return GuildMemberManager_1;
}

var GuildScheduledEventManager_1;
var hasRequiredGuildScheduledEventManager;

function requireGuildScheduledEventManager () {
	if (hasRequiredGuildScheduledEventManager) return GuildScheduledEventManager_1;
	hasRequiredGuildScheduledEventManager = 1;

	const { Collection } = requireDist$3();
	const { makeURLSearchParams } = requireWeb();
	const { GuildScheduledEventEntityType, Routes } = requireV10$6();
	const CachedManager = requireCachedManager();
	const { DiscordjsTypeError, DiscordjsError, ErrorCodes } = requireErrors$1();
	const { GuildScheduledEvent } = requireGuildScheduledEvent$2();
	const { resolveImage } = requireDataResolver();

	/**
	 * Manages API methods for GuildScheduledEvents and stores their cache.
	 * @extends {CachedManager}
	 */
	class GuildScheduledEventManager extends CachedManager {
	  constructor(guild, iterable) {
	    super(guild.client, GuildScheduledEvent, iterable);

	    /**
	     * The guild this manager belongs to
	     * @type {Guild}
	     */
	    this.guild = guild;
	  }

	  /**
	   * The cache of this manager
	   * @type {Collection<Snowflake, GuildScheduledEvent>}
	   * @name GuildScheduledEventManager#cache
	   */

	  /**
	   * Data that resolves to give a GuildScheduledEvent object. This can be:
	   * * A Snowflake
	   * * A GuildScheduledEvent object
	   * @typedef {Snowflake|GuildScheduledEvent} GuildScheduledEventResolvable
	   */

	  /**
	   * Options used to create a guild scheduled event.
	   * @typedef {Object} GuildScheduledEventCreateOptions
	   * @property {string} name The name of the guild scheduled event
	   * @property {DateResolvable} scheduledStartTime The time to schedule the event at
	   * @property {DateResolvable} [scheduledEndTime] The time to end the event at
	   * <warn>This is required if `entityType` is {@link GuildScheduledEventEntityType.External}</warn>
	   * @property {GuildScheduledEventPrivacyLevel} privacyLevel The privacy level of the guild scheduled event
	   * @property {GuildScheduledEventEntityType} entityType The scheduled entity type of the event
	   * @property {string} [description] The description of the guild scheduled event
	   * @property {GuildVoiceChannelResolvable} [channel] The channel of the guild scheduled event
	   * <warn>This is required if `entityType` is {@link GuildScheduledEventEntityType.StageInstance} or
	   * {@link GuildScheduledEventEntityType.Voice}</warn>
	   * @property {GuildScheduledEventEntityMetadataOptions} [entityMetadata] The entity metadata of the
	   * guild scheduled event
	   * <warn>This is required if `entityType` is {@link GuildScheduledEventEntityType.External}</warn>
	   * @property {?(BufferResolvable|Base64Resolvable)} [image] The cover image of the guild scheduled event
	   * @property {string} [reason] The reason for creating the guild scheduled event
	   */

	  /**
	   * Options used to set entity metadata of a guild scheduled event.
	   * @typedef {Object} GuildScheduledEventEntityMetadataOptions
	   * @property {string} [location] The location of the guild scheduled event
	   * <warn>This is required if `entityType` is {@link GuildScheduledEventEntityType.External}</warn>
	   */

	  /**
	   * Creates a new guild scheduled event.
	   * @param {GuildScheduledEventCreateOptions} options Options for creating the guild scheduled event
	   * @returns {Promise<GuildScheduledEvent>}
	   */
	  async create(options) {
	    if (typeof options !== 'object') throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'options', 'object', true);
	    let {
	      privacyLevel,
	      entityType,
	      channel,
	      name,
	      scheduledStartTime,
	      description,
	      scheduledEndTime,
	      entityMetadata,
	      reason,
	      image,
	    } = options;

	    let entity_metadata, channel_id;
	    if (entityType === GuildScheduledEventEntityType.External) {
	      channel_id = channel === undefined ? channel : null;
	      entity_metadata = { location: entityMetadata?.location };
	    } else {
	      channel_id = this.guild.channels.resolveId(channel);
	      if (!channel_id) throw new DiscordjsError(ErrorCodes.GuildVoiceChannelResolve);
	      entity_metadata = entityMetadata === undefined ? entityMetadata : null;
	    }

	    const data = await this.client.rest.post(Routes.guildScheduledEvents(this.guild.id), {
	      body: {
	        channel_id,
	        name,
	        privacy_level: privacyLevel,
	        scheduled_start_time: new Date(scheduledStartTime).toISOString(),
	        scheduled_end_time: scheduledEndTime ? new Date(scheduledEndTime).toISOString() : scheduledEndTime,
	        description,
	        entity_type: entityType,
	        entity_metadata,
	        image: image && (await resolveImage(image)),
	      },
	      reason,
	    });

	    return this._add(data);
	  }

	  /**
	   * Options used to fetch a single guild scheduled event from a guild.
	   * @typedef {BaseFetchOptions} FetchGuildScheduledEventOptions
	   * @property {GuildScheduledEventResolvable} guildScheduledEvent The guild scheduled event to fetch
	   * @property {boolean} [withUserCount=true] Whether to fetch the number of users subscribed to the scheduled event
	   */

	  /**
	   * Options used to fetch multiple guild scheduled events from a guild.
	   * @typedef {Object} FetchGuildScheduledEventsOptions
	   * @property {boolean} [cache] Whether or not to cache the fetched guild scheduled events
	   * @property {boolean} [withUserCount=true] Whether to fetch the number of users subscribed to each scheduled event
	   * should be returned
	   */

	  /**
	   * Obtains one or more guild scheduled events from Discord, or the guild cache if it's already available.
	   * @param {GuildScheduledEventResolvable|FetchGuildScheduledEventOptions|FetchGuildScheduledEventsOptions} [options]
	   * The id of the guild scheduled event or options
	   * @returns {Promise<GuildScheduledEvent|Collection<Snowflake, GuildScheduledEvent>>}
	   */
	  async fetch(options = {}) {
	    const id = this.resolveId(options.guildScheduledEvent ?? options);

	    if (id) {
	      if (!options.force) {
	        const existing = this.cache.get(id);
	        if (existing) return existing;
	      }

	      const data = await this.client.rest.get(Routes.guildScheduledEvent(this.guild.id, id), {
	        query: makeURLSearchParams({ with_user_count: options.withUserCount ?? true }),
	      });
	      return this._add(data, options.cache);
	    }

	    const data = await this.client.rest.get(Routes.guildScheduledEvents(this.guild.id), {
	      query: makeURLSearchParams({ with_user_count: options.withUserCount ?? true }),
	    });

	    return data.reduce(
	      (coll, rawGuildScheduledEventData) =>
	        coll.set(
	          rawGuildScheduledEventData.id,
	          this.guild.scheduledEvents._add(rawGuildScheduledEventData, options.cache),
	        ),
	      new Collection(),
	    );
	  }

	  /**
	   * Options used to edit a guild scheduled event.
	   * @typedef {Object} GuildScheduledEventEditOptions
	   * @property {string} [name] The name of the guild scheduled event
	   * @property {DateResolvable} [scheduledStartTime] The time to schedule the event at
	   * @property {DateResolvable} [scheduledEndTime] The time to end the event at
	   * @property {GuildScheduledEventPrivacyLevel} [privacyLevel] The privacy level of the guild scheduled event
	   * @property {GuildScheduledEventEntityType} [entityType] The scheduled entity type of the event
	   * @property {string} [description] The description of the guild scheduled event
	   * @property {?GuildVoiceChannelResolvable} [channel] The channel of the guild scheduled event
	   * @property {GuildScheduledEventStatus} [status] The status of the guild scheduled event
	   * @property {GuildScheduledEventEntityMetadataOptions} [entityMetadata] The entity metadata of the
	   * guild scheduled event
	   * <warn>This can be modified only if `entityType` of the `GuildScheduledEvent` to be edited is
	   * {@link GuildScheduledEventEntityType.External}</warn>
	   * @property {?(BufferResolvable|Base64Resolvable)} [image] The cover image of the guild scheduled event
	   * @property {string} [reason] The reason for editing the guild scheduled event
	   */

	  /**
	   * Edits a guild scheduled event.
	   * @param {GuildScheduledEventResolvable} guildScheduledEvent The guild scheduled event to edit
	   * @param {GuildScheduledEventEditOptions} options Options to edit the guild scheduled event
	   * @returns {Promise<GuildScheduledEvent>}
	   */
	  async edit(guildScheduledEvent, options) {
	    const guildScheduledEventId = this.resolveId(guildScheduledEvent);
	    if (!guildScheduledEventId) throw new DiscordjsError(ErrorCodes.GuildScheduledEventResolve);

	    if (typeof options !== 'object') throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'options', 'object', true);
	    let {
	      privacyLevel,
	      entityType,
	      channel,
	      status,
	      name,
	      scheduledStartTime,
	      description,
	      scheduledEndTime,
	      entityMetadata,
	      reason,
	      image,
	    } = options;

	    let entity_metadata;
	    if (entityMetadata) {
	      entity_metadata = {
	        location: entityMetadata.location,
	      };
	    }

	    const data = await this.client.rest.patch(Routes.guildScheduledEvent(this.guild.id, guildScheduledEventId), {
	      body: {
	        channel_id: channel === undefined ? channel : this.guild.channels.resolveId(channel),
	        name,
	        privacy_level: privacyLevel,
	        scheduled_start_time: scheduledStartTime ? new Date(scheduledStartTime).toISOString() : undefined,
	        scheduled_end_time: scheduledEndTime ? new Date(scheduledEndTime).toISOString() : scheduledEndTime,
	        description,
	        entity_type: entityType,
	        status,
	        image: image && (await resolveImage(image)),
	        entity_metadata,
	      },
	      reason,
	    });

	    return this._add(data);
	  }

	  /**
	   * Deletes a guild scheduled event.
	   * @param {GuildScheduledEventResolvable} guildScheduledEvent The guild scheduled event to delete
	   * @returns {Promise<void>}
	   */
	  async delete(guildScheduledEvent) {
	    const guildScheduledEventId = this.resolveId(guildScheduledEvent);
	    if (!guildScheduledEventId) throw new DiscordjsError(ErrorCodes.GuildScheduledEventResolve);

	    await this.client.rest.delete(Routes.guildScheduledEvent(this.guild.id, guildScheduledEventId));
	  }

	  /**
	   * Options used to fetch subscribers of a guild scheduled event
	   * @typedef {Object} FetchGuildScheduledEventSubscribersOptions
	   * @property {number} [limit] The maximum numbers of users to fetch
	   * @property {boolean} [withMember] Whether to fetch guild member data of the users
	   * @property {Snowflake} [before] Consider only users before this user id
	   * @property {Snowflake} [after] Consider only users after this user id
	   * <warn>If both `before` and `after` are provided, only `before` is respected</warn>
	   */

	  /**
	   * Represents a subscriber of a {@link GuildScheduledEvent}
	   * @typedef {Object} GuildScheduledEventUser
	   * @property {Snowflake} guildScheduledEventId The id of the guild scheduled event which the user subscribed to
	   * @property {User} user The user that subscribed to the guild scheduled event
	   * @property {?GuildMember} member The guild member associated with the user, if any
	   */

	  /**
	   * Fetches subscribers of a guild scheduled event.
	   * @param {GuildScheduledEventResolvable} guildScheduledEvent The guild scheduled event to fetch subscribers of
	   * @param {FetchGuildScheduledEventSubscribersOptions} [options={}] Options for fetching the subscribers
	   * @returns {Promise<Collection<Snowflake, GuildScheduledEventUser>>}
	   */
	  async fetchSubscribers(guildScheduledEvent, options = {}) {
	    const guildScheduledEventId = this.resolveId(guildScheduledEvent);
	    if (!guildScheduledEventId) throw new DiscordjsError(ErrorCodes.GuildScheduledEventResolve);

	    const query = makeURLSearchParams({
	      limit: options.limit,
	      with_member: options.withMember,
	      before: options.before,
	      after: options.after,
	    });

	    const data = await this.client.rest.get(Routes.guildScheduledEventUsers(this.guild.id, guildScheduledEventId), {
	      query,
	    });

	    return data.reduce(
	      (coll, rawData) =>
	        coll.set(rawData.user.id, {
	          guildScheduledEventId: rawData.guild_scheduled_event_id,
	          user: this.client.users._add(rawData.user),
	          member: rawData.member ? this.guild.members._add({ ...rawData.member, user: rawData.user }) : null,
	        }),
	      new Collection(),
	    );
	  }
	}

	GuildScheduledEventManager_1 = GuildScheduledEventManager;
	return GuildScheduledEventManager_1;
}

var GuildStickerManager_1;
var hasRequiredGuildStickerManager;

function requireGuildStickerManager () {
	if (hasRequiredGuildStickerManager) return GuildStickerManager_1;
	hasRequiredGuildStickerManager = 1;

	const { Collection } = requireDist$3();
	const { Routes } = requireV10$6();
	const CachedManager = requireCachedManager();
	const { DiscordjsTypeError, ErrorCodes } = requireErrors$1();
	const MessagePayload = requireMessagePayload();
	const { Sticker } = requireSticker$2();

	/**
	 * Manages API methods for Guild Stickers and stores their cache.
	 * @extends {CachedManager}
	 */
	class GuildStickerManager extends CachedManager {
	  constructor(guild, iterable) {
	    super(guild.client, Sticker, iterable);

	    /**
	     * The guild this manager belongs to
	     * @type {Guild}
	     */
	    this.guild = guild;
	  }

	  /**
	   * The cache of Guild Stickers
	   * @type {Collection<Snowflake, Sticker>}
	   * @name GuildStickerManager#cache
	   */

	  _add(data, cache) {
	    return super._add(data, cache, { extras: [this.guild] });
	  }

	  /**
	   * Options used to create a guild sticker.
	   * @typedef {Object} GuildStickerCreateOptions
	   * @property {AttachmentPayload|BufferResolvable|Stream} file The file for the sticker
	   * @property {string} name The name for the sticker
	   * @property {string} tags The Discord name of a unicode emoji representing the sticker's expression
	   * @property {?string} [description] The description for the sticker
	   * @property {string} [reason] Reason for creating the sticker
	   */

	  /**
	   * Creates a new custom sticker in the guild.
	   * @param {GuildStickerCreateOptions} options Options for creating a guild sticker
	   * @returns {Promise<Sticker>} The created sticker
	   * @example
	   * // Create a new sticker from a URL
	   * guild.stickers.create({ file: 'https://i.imgur.com/w3duR07.png', name: 'rip', tags: 'headstone' })
	   *   .then(sticker => console.log(`Created new sticker with name ${sticker.name}!`))
	   *   .catch(console.error);
	   * @example
	   * // Create a new sticker from a file on your computer
	   * guild.stickers.create({ file: './memes/banana.png', name: 'banana', tags: 'banana' })
	   *   .then(sticker => console.log(`Created new sticker with name ${sticker.name}!`))
	   *   .catch(console.error);
	   */
	  async create({ file, name, tags, description, reason } = {}) {
	    const resolvedFile = await MessagePayload.resolveFile(file);
	    if (!resolvedFile) throw new DiscordjsTypeError(ErrorCodes.ReqResourceType);
	    file = { ...resolvedFile, key: 'file' };

	    const body = { name, tags, description: description ?? '' };

	    const sticker = await this.client.rest.post(Routes.guildStickers(this.guild.id), {
	      appendToFormData: true,
	      body,
	      files: [file],
	      reason,
	    });
	    return this.client.actions.GuildStickerCreate.handle(this.guild, sticker).sticker;
	  }

	  /**
	   * Data that resolves to give a Sticker object. This can be:
	   * * A Sticker object
	   * * A Snowflake
	   * @typedef {Sticker|Snowflake} StickerResolvable
	   */

	  /**
	   * Resolves a StickerResolvable to a Sticker object.
	   * @method resolve
	   * @memberof GuildStickerManager
	   * @instance
	   * @param {StickerResolvable} sticker The Sticker resolvable to identify
	   * @returns {?Sticker}
	   */

	  /**
	   * Resolves a StickerResolvable to a Sticker id string.
	   * @method resolveId
	   * @memberof GuildStickerManager
	   * @instance
	   * @param {StickerResolvable} sticker The Sticker resolvable to identify
	   * @returns {?Snowflake}
	   */

	  /**
	   * Edits a sticker.
	   * @param {StickerResolvable} sticker The sticker to edit
	   * @param {GuildStickerEditOptions} [options={}] The new data for the sticker
	   * @returns {Promise<Sticker>}
	   */
	  async edit(sticker, options = {}) {
	    const stickerId = this.resolveId(sticker);
	    if (!stickerId) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'sticker', 'StickerResolvable');

	    const d = await this.client.rest.patch(Routes.guildSticker(this.guild.id, stickerId), {
	      body: options,
	      reason: options.reason,
	    });

	    const existing = this.cache.get(stickerId);
	    if (existing) {
	      const clone = existing._clone();
	      clone._patch(d);
	      return clone;
	    }
	    return this._add(d);
	  }

	  /**
	   * Deletes a sticker.
	   * @param {StickerResolvable} sticker The sticker to delete
	   * @param {string} [reason] Reason for deleting this sticker
	   * @returns {Promise<void>}
	   */
	  async delete(sticker, reason) {
	    sticker = this.resolveId(sticker);
	    if (!sticker) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'sticker', 'StickerResolvable');

	    await this.client.rest.delete(Routes.guildSticker(this.guild.id, sticker), { reason });
	  }

	  /**
	   * Obtains one or more stickers from Discord, or the sticker cache if they're already available.
	   * @param {Snowflake} [id] The Sticker's id
	   * @param {BaseFetchOptions} [options] Additional options for this fetch
	   * @returns {Promise<Sticker|Collection<Snowflake, Sticker>>}
	   * @example
	   * // Fetch all stickers from the guild
	   * message.guild.stickers.fetch()
	   *   .then(stickers => console.log(`There are ${stickers.size} stickers.`))
	   *   .catch(console.error);
	   * @example
	   * // Fetch a single sticker
	   * message.guild.stickers.fetch('222078108977594368')
	   *   .then(sticker => console.log(`The sticker name is: ${sticker.name}`))
	   *   .catch(console.error);
	   */
	  async fetch(id, { cache = true, force = false } = {}) {
	    if (id) {
	      if (!force) {
	        const existing = this.cache.get(id);
	        if (existing) return existing;
	      }
	      const sticker = await this.client.rest.get(Routes.guildSticker(this.guild.id, id));
	      return this._add(sticker, cache);
	    }

	    const data = await this.client.rest.get(Routes.guildStickers(this.guild.id));
	    return new Collection(data.map(sticker => [sticker.id, this._add(sticker, cache)]));
	  }

	  /**
	   * Fetches the user who uploaded this sticker, if this is a guild sticker.
	   * @param {StickerResolvable} sticker The sticker to fetch the user for
	   * @returns {Promise<?User>}
	   */
	  async fetchUser(sticker) {
	    sticker = this.resolve(sticker);
	    if (!sticker) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'sticker', 'StickerResolvable');
	    const data = await this.client.rest.get(Routes.guildSticker(this.guild.id, sticker.id));
	    sticker._patch(data);
	    return sticker.user;
	  }
	}

	GuildStickerManager_1 = GuildStickerManager;
	return GuildStickerManager_1;
}

var Presence = {};

var ActivityFlagsBitField_1;
var hasRequiredActivityFlagsBitField;

function requireActivityFlagsBitField () {
	if (hasRequiredActivityFlagsBitField) return ActivityFlagsBitField_1;
	hasRequiredActivityFlagsBitField = 1;

	const { ActivityFlags } = requireV10$6();
	const BitField = requireBitField();

	/**
	 * Data structure that makes it easy to interact with an {@link Activity#flags} bitfield.
	 * @extends {BitField}
	 */
	class ActivityFlagsBitField extends BitField {
	  /**
	   * Numeric activity flags.
	   * @type {ActivityFlags}
	   * @memberof ActivityFlagsBitField
	   */
	  static Flags = ActivityFlags;
	}

	/**
	 * @name ActivityFlagsBitField
	 * @kind constructor
	 * @memberof ActivityFlagsBitField
	 * @param {BitFieldResolvable} [bits=0] Bit(s) to read from
	 */

	ActivityFlagsBitField_1 = ActivityFlagsBitField;
	return ActivityFlagsBitField_1;
}

var hasRequiredPresence;

function requirePresence () {
	if (hasRequiredPresence) return Presence;
	hasRequiredPresence = 1;

	const Base = requireBase$2();
	const { Emoji } = requireEmoji$2();
	const ActivityFlagsBitField = requireActivityFlagsBitField();
	const { flatten } = requireUtil();

	/**
	 * Activity sent in a message.
	 * @typedef {Object} MessageActivity
	 * @property {string} [partyId] Id of the party represented in activity
	 * @property {MessageActivityType} type Type of activity sent
	 */

	/**
	 * The status of this presence:
	 * * **`online`** - user is online
	 * * **`idle`** - user is AFK
	 * * **`offline`** - user is offline or invisible
	 * * **`dnd`** - user is in Do Not Disturb
	 * @typedef {string} PresenceStatus
	 */

	/**
	 * The status of this presence:
	 * * **`online`** - user is online
	 * * **`idle`** - user is AFK
	 * * **`dnd`** - user is in Do Not Disturb
	 * @typedef {string} ClientPresenceStatus
	 */

	/**
	 * Represents a user's presence.
	 * @extends {Base}
	 */
	let Presence$1 = class Presence extends Base {
	  constructor(client, data = {}) {
	    super(client);

	    /**
	     * The presence's user id
	     * @type {Snowflake}
	     */
	    this.userId = data.user.id;

	    /**
	     * The guild this presence is in
	     * @type {?Guild}
	     */
	    this.guild = data.guild ?? null;

	    this._patch(data);
	  }

	  /**
	   * The user of this presence
	   * @type {?User}
	   * @readonly
	   */
	  get user() {
	    return this.client.users.resolve(this.userId);
	  }

	  /**
	   * The member of this presence
	   * @type {?GuildMember}
	   * @readonly
	   */
	  get member() {
	    return this.guild.members.resolve(this.userId);
	  }

	  _patch(data) {
	    if ('status' in data) {
	      /**
	       * The status of this presence
	       * @type {PresenceStatus}
	       */
	      this.status = data.status;
	    } else {
	      this.status ??= 'offline';
	    }

	    if ('activities' in data) {
	      /**
	       * The activities of this presence
	       * @type {Activity[]}
	       */
	      this.activities = data.activities.map(activity => new Activity(this, activity));
	    } else {
	      this.activities ??= [];
	    }

	    if ('client_status' in data) {
	      /**
	       * The devices this presence is on
	       * @type {?Object}
	       * @property {?ClientPresenceStatus} web The current presence in the web application
	       * @property {?ClientPresenceStatus} mobile The current presence in the mobile application
	       * @property {?ClientPresenceStatus} desktop The current presence in the desktop application
	       */
	      this.clientStatus = data.client_status;
	    } else {
	      this.clientStatus ??= null;
	    }

	    return this;
	  }

	  _clone() {
	    const clone = Object.assign(Object.create(this), this);
	    clone.activities = this.activities.map(activity => activity._clone());
	    return clone;
	  }

	  /**
	   * Whether this presence is equal to another.
	   * @param {Presence} presence The presence to compare with
	   * @returns {boolean}
	   */
	  equals(presence) {
	    return (
	      this === presence ||
	      (presence &&
	        this.status === presence.status &&
	        this.clientStatus?.web === presence.clientStatus?.web &&
	        this.clientStatus?.mobile === presence.clientStatus?.mobile &&
	        this.clientStatus?.desktop === presence.clientStatus?.desktop &&
	        this.activities.length === presence.activities.length &&
	        this.activities.every((activity, index) => activity.equals(presence.activities[index])))
	    );
	  }

	  toJSON() {
	    return flatten(this);
	  }
	};

	/**
	 * Represents an activity that is part of a user's presence.
	 */
	class Activity {
	  constructor(presence, data) {
	    /**
	     * The presence of the Activity
	     * @type {Presence}
	     * @readonly
	     * @name Activity#presence
	     */
	    Object.defineProperty(this, 'presence', { value: presence });

	    /**
	     * The activity's name
	     * @type {string}
	     */
	    this.name = data.name;

	    /**
	     * The activity status's type
	     * @type {ActivityType}
	     */
	    this.type = data.type;

	    /**
	     * If the activity is being streamed, a link to the stream
	     * @type {?string}
	     */
	    this.url = data.url ?? null;

	    /**
	     * Details about the activity
	     * @type {?string}
	     */
	    this.details = data.details ?? null;

	    /**
	     * State of the activity
	     * @type {?string}
	     */
	    this.state = data.state ?? null;

	    /**
	     * The id of the application associated with this activity
	     * @type {?Snowflake}
	     */
	    this.applicationId = data.application_id ?? null;

	    /**
	     * Represents timestamps of an activity
	     * @typedef {Object} ActivityTimestamps
	     * @property {?Date} start When the activity started
	     * @property {?Date} end When the activity will end
	     */

	    /**
	     * Timestamps for the activity
	     * @type {?ActivityTimestamps}
	     */
	    this.timestamps = data.timestamps
	      ? {
	          start: data.timestamps.start ? new Date(Number(data.timestamps.start)) : null,
	          end: data.timestamps.end ? new Date(Number(data.timestamps.end)) : null,
	        }
	      : null;

	    /**
	     * Represents a party of an activity
	     * @typedef {Object} ActivityParty
	     * @property {?string} id The party's id
	     * @property {number[]} size Size of the party as `[current, max]`
	     */

	    /**
	     * Party of the activity
	     * @type {?ActivityParty}
	     */
	    this.party = data.party ?? null;

	    /**
	     * The sync id of the activity
	     * <info>This property is not documented by Discord and represents the track id in spotify activities.</info>
	     * @type {?string}
	     */
	    this.syncId = data.sync_id ?? null;

	    /**
	     * Assets for rich presence
	     * @type {?RichPresenceAssets}
	     */
	    this.assets = data.assets ? new RichPresenceAssets(this, data.assets) : null;

	    /**
	     * Flags that describe the activity
	     * @type {Readonly<ActivityFlagsBitField>}
	     */
	    this.flags = new ActivityFlagsBitField(data.flags).freeze();

	    /**
	     * Emoji for a custom activity
	     * @type {?Emoji}
	     */
	    this.emoji = data.emoji ? new Emoji(presence.client, data.emoji) : null;

	    /**
	     * The labels of the buttons of this rich presence
	     * @type {string[]}
	     */
	    this.buttons = data.buttons ?? [];

	    /**
	     * Creation date of the activity
	     * @type {number}
	     */
	    this.createdTimestamp = data.created_at;
	  }

	  /**
	   * Whether this activity is equal to another activity.
	   * @param {Activity} activity The activity to compare with
	   * @returns {boolean}
	   */
	  equals(activity) {
	    return (
	      this === activity ||
	      (activity &&
	        this.name === activity.name &&
	        this.type === activity.type &&
	        this.url === activity.url &&
	        this.state === activity.state &&
	        this.details === activity.details &&
	        this.emoji?.id === activity.emoji?.id &&
	        this.emoji?.name === activity.emoji?.name)
	    );
	  }

	  /**
	   * The time the activity was created at
	   * @type {Date}
	   * @readonly
	   */
	  get createdAt() {
	    return new Date(this.createdTimestamp);
	  }

	  /**
	   * When concatenated with a string, this automatically returns the activity's name instead of the Activity object.
	   * @returns {string}
	   */
	  toString() {
	    return this.name;
	  }

	  _clone() {
	    return Object.assign(Object.create(this), this);
	  }
	}

	/**
	 * Assets for a rich presence
	 */
	class RichPresenceAssets {
	  constructor(activity, assets) {
	    /**
	     * The activity of the RichPresenceAssets
	     * @type {Activity}
	     * @readonly
	     * @name RichPresenceAssets#activity
	     */
	    Object.defineProperty(this, 'activity', { value: activity });

	    /**
	     * Hover text for the large image
	     * @type {?string}
	     */
	    this.largeText = assets.large_text ?? null;

	    /**
	     * Hover text for the small image
	     * @type {?string}
	     */
	    this.smallText = assets.small_text ?? null;

	    /**
	     * The large image asset's id
	     * @type {?Snowflake}
	     */
	    this.largeImage = assets.large_image ?? null;

	    /**
	     * The small image asset's id
	     * @type {?Snowflake}
	     */
	    this.smallImage = assets.small_image ?? null;
	  }

	  /**
	   * Gets the URL of the small image asset
	   * @param {ImageURLOptions} [options={}] Options for the image URL
	   * @returns {?string}
	   */
	  smallImageURL(options = {}) {
	    if (!this.smallImage) return null;
	    if (this.smallImage.includes(':')) {
	      const [platform, id] = this.smallImage.split(':');
	      switch (platform) {
	        case 'mp':
	          return `https://media.discordapp.net/${id}`;
	        default:
	          return null;
	      }
	    }

	    return this.activity.presence.client.rest.cdn.appAsset(this.activity.applicationId, this.smallImage, options);
	  }

	  /**
	   * Gets the URL of the large image asset
	   * @param {ImageURLOptions} [options={}] Options for the image URL
	   * @returns {?string}
	   */
	  largeImageURL(options = {}) {
	    if (!this.largeImage) return null;
	    if (this.largeImage.includes(':')) {
	      const [platform, id] = this.largeImage.split(':');
	      switch (platform) {
	        case 'mp':
	          return `https://media.discordapp.net/${id}`;
	        case 'spotify':
	          return `https://i.scdn.co/image/${id}`;
	        case 'youtube':
	          return `https://i.ytimg.com/vi/${id}/hqdefault_live.jpg`;
	        case 'twitch':
	          return `https://static-cdn.jtvnw.net/previews-ttv/live_user_${id}.png`;
	        default:
	          return null;
	      }
	    }

	    return this.activity.presence.client.rest.cdn.appAsset(this.activity.applicationId, this.largeImage, options);
	  }
	}

	Presence.Presence = Presence$1;
	Presence.Activity = Activity;
	Presence.RichPresenceAssets = RichPresenceAssets;
	return Presence;
}

var PresenceManager_1;
var hasRequiredPresenceManager;

function requirePresenceManager () {
	if (hasRequiredPresenceManager) return PresenceManager_1;
	hasRequiredPresenceManager = 1;

	const CachedManager = requireCachedManager();
	const { Presence } = requirePresence();

	/**
	 * Manages API methods for Presences and holds their cache.
	 * @extends {CachedManager}
	 */
	class PresenceManager extends CachedManager {
	  constructor(client, iterable) {
	    super(client, Presence, iterable);
	  }

	  /**
	   * The cache of Presences
	   * @type {Collection<Snowflake, Presence>}
	   * @name PresenceManager#cache
	   */

	  _add(data, cache) {
	    return super._add(data, cache, { id: data.user.id });
	  }

	  /**
	   * Data that can be resolved to a Presence object. This can be:
	   * * A Presence
	   * * A UserResolvable
	   * * A Snowflake
	   * @typedef {Presence|UserResolvable|Snowflake} PresenceResolvable
	   */

	  /**
	   * Resolves a {@link PresenceResolvable} to a {@link Presence} object.
	   * @param {PresenceResolvable} presence The presence resolvable to resolve
	   * @returns {?Presence}
	   */
	  resolve(presence) {
	    const presenceResolvable = super.resolve(presence);
	    if (presenceResolvable) return presenceResolvable;
	    const UserResolvable = this.client.users.resolveId(presence);
	    return super.resolve(UserResolvable);
	  }

	  /**
	   * Resolves a {@link PresenceResolvable} to a {@link Presence} id.
	   * @param {PresenceResolvable} presence The presence resolvable to resolve
	   * @returns {?Snowflake}
	   */
	  resolveId(presence) {
	    const presenceResolvable = super.resolveId(presence);
	    if (presenceResolvable) return presenceResolvable;
	    const userResolvable = this.client.users.resolveId(presence);
	    return this.cache.has(userResolvable) ? userResolvable : null;
	  }
	}

	PresenceManager_1 = PresenceManager;
	return PresenceManager_1;
}

var RoleManager_1;
var hasRequiredRoleManager;

function requireRoleManager () {
	if (hasRequiredRoleManager) return RoleManager_1;
	hasRequiredRoleManager = 1;

	const process = require$$0$d;
	const { Collection } = requireDist$3();
	const { DiscordAPIError } = requireWeb();
	const { RESTJSONErrorCodes, Routes } = requireV10$6();
	const CachedManager = requireCachedManager();
	const { DiscordjsTypeError, ErrorCodes } = requireErrors$1();
	const { Role } = requireRole$1();
	const { resolveImage } = requireDataResolver();
	const PermissionsBitField = requirePermissionsBitField();
	const { setPosition, resolveColor } = requireUtil();

	let cacheWarningEmitted = false;

	/**
	 * Manages API methods for roles and stores their cache.
	 * @extends {CachedManager}
	 */
	class RoleManager extends CachedManager {
	  constructor(guild, iterable) {
	    super(guild.client, Role, iterable);
	    if (!cacheWarningEmitted && this._cache.constructor.name !== 'Collection') {
	      cacheWarningEmitted = true;
	      process.emitWarning(
	        `Overriding the cache handling for ${this.constructor.name} is unsupported and breaks functionality.`,
	        'UnsupportedCacheOverwriteWarning',
	      );
	    }

	    /**
	     * The guild belonging to this manager
	     * @type {Guild}
	     */
	    this.guild = guild;
	  }

	  /**
	   * The role cache of this manager
	   * @type {Collection<Snowflake, Role>}
	   * @name RoleManager#cache
	   */

	  _add(data, cache) {
	    return super._add(data, cache, { extras: [this.guild] });
	  }

	  /**
	   * Obtains a role from Discord, or the role cache if they're already available.
	   * @param {Snowflake} [id] The role's id
	   * @param {BaseFetchOptions} [options] Additional options for this fetch
	   * @returns {Promise<?Role|Collection<Snowflake, Role>>}
	   * @example
	   * // Fetch all roles from the guild
	   * message.guild.roles.fetch()
	   *   .then(roles => console.log(`There are ${roles.size} roles.`))
	   *   .catch(console.error);
	   * @example
	   * // Fetch a single role
	   * message.guild.roles.fetch('222078108977594368')
	   *   .then(role => console.log(`The role color is: ${role.color}`))
	   *   .catch(console.error);
	   */
	  async fetch(id, { cache = true, force = false } = {}) {
	    if (!id) {
	      const data = await this.client.rest.get(Routes.guildRoles(this.guild.id));
	      const roles = new Collection();
	      for (const role of data) roles.set(role.id, this._add(role, cache));
	      return roles;
	    }

	    if (!force) {
	      const existing = this.cache.get(id);
	      if (existing) return existing;
	    }

	    try {
	      const data = await this.client.rest.get(Routes.guildRole(this.guild.id, id));
	      return this._add(data, cache);
	    } catch (error) {
	      // TODO: Remove this catch in the next major version
	      if (error instanceof DiscordAPIError && error.code === RESTJSONErrorCodes.UnknownRole) {
	        return null;
	      }

	      throw error;
	    }
	  }

	  /**
	   * Data that can be resolved to a Role object. This can be:
	   * * A Role
	   * * A Snowflake
	   * @typedef {Role|Snowflake} RoleResolvable
	   */

	  /**
	   * Resolves a {@link RoleResolvable} to a {@link Role} object.
	   * @method resolve
	   * @memberof RoleManager
	   * @instance
	   * @param {RoleResolvable} role The role resolvable to resolve
	   * @returns {?Role}
	   */

	  /**
	   * Resolves a {@link RoleResolvable} to a {@link Role} id.
	   * @method resolveId
	   * @memberof RoleManager
	   * @instance
	   * @param {RoleResolvable} role The role resolvable to resolve
	   * @returns {?Snowflake}
	   */

	  /**
	   * Options used to create a new role.
	   * @typedef {Object} RoleCreateOptions
	   * @property {string} [name] The name of the new role
	   * @property {ColorResolvable} [color] The data to create the role with
	   * @property {boolean} [hoist] Whether or not the new role should be hoisted
	   * @property {PermissionResolvable} [permissions] The permissions for the new role
	   * @property {number} [position] The position of the new role
	   * @property {boolean} [mentionable] Whether or not the new role should be mentionable
	   * @property {?(BufferResolvable|Base64Resolvable|EmojiResolvable)} [icon] The icon for the role
	   * <warn>The `EmojiResolvable` should belong to the same guild as the role.
	   * If not, pass the emoji's URL directly</warn>
	   * @property {?string} [unicodeEmoji] The unicode emoji for the role
	   * @property {string} [reason] The reason for creating this role
	   */

	  /**
	   * Creates a new role in the guild with given information.
	   * <warn>The position will silently reset to 1 if an invalid one is provided, or none.</warn>
	   * @param {RoleCreateOptions} [options] Options for creating the new role
	   * @returns {Promise<Role>}
	   * @example
	   * // Create a new role
	   * guild.roles.create()
	   *   .then(console.log)
	   *   .catch(console.error);
	   * @example
	   * // Create a new role with data and a reason
	   * guild.roles.create({
	   *   name: 'Super Cool Blue People',
	   *   color: Colors.Blue,
	   *   reason: 'we needed a role for Super Cool People',
	   * })
	   *   .then(console.log)
	   *   .catch(console.error);
	   */
	  async create(options = {}) {
	    let { name, color, hoist, permissions, position, mentionable, reason, icon, unicodeEmoji } = options;
	    color &&= resolveColor(color);
	    if (permissions !== undefined) permissions = new PermissionsBitField(permissions);
	    if (icon) {
	      const guildEmojiURL = this.guild.emojis.resolve(icon)?.imageURL();
	      icon = guildEmojiURL ? await resolveImage(guildEmojiURL) : await resolveImage(icon);
	      if (typeof icon !== 'string') icon = undefined;
	    }

	    const data = await this.client.rest.post(Routes.guildRoles(this.guild.id), {
	      body: {
	        name,
	        color,
	        hoist,
	        permissions,
	        mentionable,
	        icon,
	        unicode_emoji: unicodeEmoji,
	      },
	      reason,
	    });
	    const { role } = this.client.actions.GuildRoleCreate.handle({
	      guild_id: this.guild.id,
	      role: data,
	    });
	    if (position) return this.setPosition(role, position, { reason });
	    return role;
	  }

	  /**
	   * Options for editing a role
	   * @typedef {RoleData} RoleEditOptions
	   * @property {string} [reason] The reason for editing this role
	   */

	  /**
	   * Edits a role of the guild.
	   * @param {RoleResolvable} role The role to edit
	   * @param {RoleEditOptions} options The options to provide
	   * @returns {Promise<Role>}
	   * @example
	   * // Edit a role
	   * guild.roles.edit('222079219327434752', { name: 'buddies' })
	   *   .then(updated => console.log(`Edited role name to ${updated.name}`))
	   *   .catch(console.error);
	   */
	  async edit(role, options) {
	    role = this.resolve(role);
	    if (!role) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'role', 'RoleResolvable');

	    if (typeof options.position === 'number') {
	      await this.setPosition(role, options.position, { reason: options.reason });
	    }

	    let icon = options.icon;
	    if (icon) {
	      const guildEmojiURL = this.guild.emojis.resolve(icon)?.imageURL();
	      icon = guildEmojiURL ? await resolveImage(guildEmojiURL) : await resolveImage(icon);
	      if (typeof icon !== 'string') icon = undefined;
	    }

	    const body = {
	      name: options.name,
	      color: options.color === undefined ? undefined : resolveColor(options.color),
	      hoist: options.hoist,
	      permissions: options.permissions === undefined ? undefined : new PermissionsBitField(options.permissions),
	      mentionable: options.mentionable,
	      icon,
	      unicode_emoji: options.unicodeEmoji,
	    };

	    const d = await this.client.rest.patch(Routes.guildRole(this.guild.id, role.id), { body, reason: options.reason });

	    const clone = role._clone();
	    clone._patch(d);
	    return clone;
	  }

	  /**
	   * Deletes a role.
	   * @param {RoleResolvable} role The role to delete
	   * @param {string} [reason] Reason for deleting the role
	   * @returns {Promise<void>}
	   * @example
	   * // Delete a role
	   * guild.roles.delete('222079219327434752', 'The role needed to go')
	   *   .then(() => console.log('Deleted the role'))
	   *   .catch(console.error);
	   */
	  async delete(role, reason) {
	    const id = this.resolveId(role);
	    await this.client.rest.delete(Routes.guildRole(this.guild.id, id), { reason });
	    this.client.actions.GuildRoleDelete.handle({ guild_id: this.guild.id, role_id: id });
	  }

	  /**
	   * Sets the new position of the role.
	   * @param {RoleResolvable} role The role to change the position of
	   * @param {number} position The new position for the role
	   * @param {SetRolePositionOptions} [options] Options for setting the position
	   * @returns {Promise<Role>}
	   * @example
	   * // Set the position of the role
	   * guild.roles.setPosition('222197033908436994', 1)
	   *   .then(updated => console.log(`Role position: ${updated.position}`))
	   *   .catch(console.error);
	   */
	  async setPosition(role, position, { relative, reason } = {}) {
	    role = this.resolve(role);
	    if (!role) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'role', 'RoleResolvable');
	    const updatedRoles = await setPosition(
	      role,
	      position,
	      relative,
	      this.guild._sortedRoles(),
	      this.client,
	      Routes.guildRoles(this.guild.id),
	      reason,
	    );

	    this.client.actions.GuildRolesPositionUpdate.handle({
	      guild_id: this.guild.id,
	      roles: updatedRoles,
	    });
	    return role;
	  }

	  /**
	   * The data needed for updating a guild role's position
	   * @typedef {Object} GuildRolePosition
	   * @property {RoleResolvable} role The role's id
	   * @property {number} position The position to update
	   */

	  /**
	   * Batch-updates the guild's role positions
	   * @param {GuildRolePosition[]} rolePositions Role positions to update
	   * @returns {Promise<Guild>}
	   * @example
	   * guild.roles.setPositions([{ role: roleId, position: updatedRoleIndex }])
	   *  .then(guild => console.log(`Role positions updated for ${guild}`))
	   *  .catch(console.error);
	   */
	  async setPositions(rolePositions) {
	    // Make sure rolePositions are prepared for API
	    rolePositions = rolePositions.map(rolePosition => ({
	      id: this.resolveId(rolePosition.role),
	      position: rolePosition.position,
	    }));

	    // Call the API to update role positions
	    await this.client.rest.patch(Routes.guildRoles(this.guild.id), { body: rolePositions });
	    return this.client.actions.GuildRolesPositionUpdate.handle({
	      guild_id: this.guild.id,
	      roles: rolePositions,
	    }).guild;
	  }

	  /**
	   * Compares the positions of two roles.
	   * @param {RoleResolvable} role1 First role to compare
	   * @param {RoleResolvable} role2 Second role to compare
	   * @returns {number} Negative number if the first role's position is lower (second role's is higher),
	   * positive number if the first's is higher (second's is lower), 0 if equal
	   */
	  comparePositions(role1, role2) {
	    const resolvedRole1 = this.resolve(role1);
	    const resolvedRole2 = this.resolve(role2);
	    if (!resolvedRole1 || !resolvedRole2) {
	      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'role', 'Role nor a Snowflake');
	    }

	    const role1Position = resolvedRole1.position;
	    const role2Position = resolvedRole2.position;

	    if (role1Position === role2Position) {
	      return Number(BigInt(resolvedRole2.id) - BigInt(resolvedRole1.id));
	    }

	    return role1Position - role2Position;
	  }

	  /**
	   * Gets the managed role a user created when joining the guild, if any
	   * <info>Only ever available for bots</info>
	   * @param {UserResolvable} user The user to access the bot role for
	   * @returns {?Role}
	   */
	  botRoleFor(user) {
	    const userId = this.client.users.resolveId(user);
	    if (!userId) return null;
	    return this.cache.find(role => role.tags?.botId === userId) ?? null;
	  }

	  /**
	   * The `@everyone` role of the guild
	   * @type {Role}
	   * @readonly
	   */
	  get everyone() {
	    return this.cache.get(this.guild.id);
	  }

	  /**
	   * The premium subscriber role of the guild, if any
	   * @type {?Role}
	   * @readonly
	   */
	  get premiumSubscriberRole() {
	    return this.cache.find(role => role.tags?.premiumSubscriberRole) ?? null;
	  }

	  /**
	   * The role with the highest position in the cache
	   * @type {Role}
	   * @readonly
	   */
	  get highest() {
	    return this.cache.reduce((prev, role) => (role.comparePositionTo(prev) > 0 ? role : prev), this.cache.first());
	  }
	}

	RoleManager_1 = RoleManager;
	return RoleManager_1;
}

var StageInstanceManager_1;
var hasRequiredStageInstanceManager;

function requireStageInstanceManager () {
	if (hasRequiredStageInstanceManager) return StageInstanceManager_1;
	hasRequiredStageInstanceManager = 1;

	const { Routes } = requireV10$6();
	const CachedManager = requireCachedManager();
	const { DiscordjsTypeError, DiscordjsError, ErrorCodes } = requireErrors$1();
	const { StageInstance } = requireStageInstance$2();

	/**
	 * Manages API methods for {@link StageInstance} objects and holds their cache.
	 * @extends {CachedManager}
	 */
	class StageInstanceManager extends CachedManager {
	  constructor(guild, iterable) {
	    super(guild.client, StageInstance, iterable);

	    /**
	     * The guild this manager belongs to
	     * @type {Guild}
	     */
	    this.guild = guild;
	  }

	  /**
	   * The cache of this Manager
	   * @type {Collection<Snowflake, StageInstance>}
	   * @name StageInstanceManager#cache
	   */

	  /**
	   * Options used to create a stage instance.
	   * @typedef {Object} StageInstanceCreateOptions
	   * @property {string} topic The topic of the stage instance
	   * @property {StageInstancePrivacyLevel} [privacyLevel] The privacy level of the stage instance
	   * @property {boolean} [sendStartNotification] Whether to notify `@everyone` that the stage instance has started
	   * @property {GuildScheduledEventResolvable} [guildScheduledEvent]
	   * The guild scheduled event associated with the stage instance
	   */

	  /**
	   * Data that can be resolved to a Stage Channel object. This can be:
	   * * A StageChannel
	   * * A Snowflake
	   * @typedef {StageChannel|Snowflake} StageChannelResolvable
	   */

	  /**
	   * Creates a new stage instance.
	   * @param {StageChannelResolvable} channel The stage channel to associate the created stage instance to
	   * @param {StageInstanceCreateOptions} options The options to create the stage instance
	   * @returns {Promise<StageInstance>}
	   * @example
	   * // Create a stage instance
	   * guild.stageInstances.create('1234567890123456789', {
	   *  topic: 'A very creative topic',
	   *  privacyLevel: GuildPrivacyLevel.GuildOnly
	   * })
	   *  .then(stageInstance => console.log(stageInstance))
	   *  .catch(console.error);
	   */
	  async create(channel, options) {
	    const channelId = this.guild.channels.resolveId(channel);
	    if (!channelId) throw new DiscordjsError(ErrorCodes.StageChannelResolve);
	    if (typeof options !== 'object') throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'options', 'object', true);
	    const { guildScheduledEvent, topic, privacyLevel, sendStartNotification } = options;

	    const guildScheduledEventId = guildScheduledEvent && this.resolveId(guildScheduledEvent);

	    const data = await this.client.rest.post(Routes.stageInstances(), {
	      body: {
	        channel_id: channelId,
	        topic,
	        privacy_level: privacyLevel,
	        send_start_notification: sendStartNotification,
	        guild_scheduled_event_id: guildScheduledEventId,
	      },
	    });

	    return this._add(data);
	  }

	  /**
	   * Fetches the stage instance associated with a stage channel, if it exists.
	   * @param {StageChannelResolvable} channel The stage channel whose associated stage instance is to be fetched
	   * @param {BaseFetchOptions} [options] Additional options for this fetch
	   * @returns {Promise<StageInstance>}
	   * @example
	   * // Fetch a stage instance
	   * guild.stageInstances.fetch('1234567890123456789')
	   *  .then(stageInstance => console.log(stageInstance))
	   *  .catch(console.error);
	   */
	  async fetch(channel, { cache = true, force = false } = {}) {
	    const channelId = this.guild.channels.resolveId(channel);
	    if (!channelId) throw new DiscordjsError(ErrorCodes.StageChannelResolve);

	    if (!force) {
	      const existing = this.cache.find(stageInstance => stageInstance.channelId === channelId);
	      if (existing) return existing;
	    }

	    const data = await this.client.rest.get(Routes.stageInstance(channelId));
	    return this._add(data, cache);
	  }

	  /**
	   * Options used to edit an existing stage instance.
	   * @typedef {Object} StageInstanceEditOptions
	   * @property {string} [topic] The new topic of the stage instance
	   * @property {StageInstancePrivacyLevel} [privacyLevel] The new privacy level of the stage instance
	   */

	  /**
	   * Edits an existing stage instance.
	   * @param {StageChannelResolvable} channel The stage channel whose associated stage instance is to be edited
	   * @param {StageInstanceEditOptions} options The options to edit the stage instance
	   * @returns {Promise<StageInstance>}
	   * @example
	   * // Edit a stage instance
	   * guild.stageInstances.edit('1234567890123456789', { topic: 'new topic' })
	   *  .then(stageInstance => console.log(stageInstance))
	   *  .catch(console.error);
	   */
	  async edit(channel, options) {
	    if (typeof options !== 'object') throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'options', 'object', true);
	    const channelId = this.guild.channels.resolveId(channel);
	    if (!channelId) throw new DiscordjsError(ErrorCodes.StageChannelResolve);

	    let { topic, privacyLevel } = options;

	    const data = await this.client.rest.patch(Routes.stageInstance(channelId), {
	      body: {
	        topic,
	        privacy_level: privacyLevel,
	      },
	    });

	    if (this.cache.has(data.id)) {
	      const clone = this.cache.get(data.id)._clone();
	      clone._patch(data);
	      return clone;
	    }

	    return this._add(data);
	  }

	  /**
	   * Deletes an existing stage instance.
	   * @param {StageChannelResolvable} channel The stage channel whose associated stage instance is to be deleted
	   * @returns {Promise<void>}
	   */
	  async delete(channel) {
	    const channelId = this.guild.channels.resolveId(channel);
	    if (!channelId) throw new DiscordjsError(ErrorCodes.StageChannelResolve);

	    await this.client.rest.delete(Routes.stageInstance(channelId));
	  }
	}

	StageInstanceManager_1 = StageInstanceManager;
	return StageInstanceManager_1;
}

var VoiceStateManager_1;
var hasRequiredVoiceStateManager;

function requireVoiceStateManager () {
	if (hasRequiredVoiceStateManager) return VoiceStateManager_1;
	hasRequiredVoiceStateManager = 1;

	const { Routes } = requireV10$6();
	const CachedManager = requireCachedManager();
	const VoiceState = requireVoiceState();

	/**
	 * Manages API methods for VoiceStates and stores their cache.
	 * @extends {CachedManager}
	 */
	class VoiceStateManager extends CachedManager {
	  constructor(guild, iterable) {
	    super(guild.client, VoiceState, iterable);

	    /**
	     * The guild this manager belongs to
	     * @type {Guild}
	     */
	    this.guild = guild;
	  }

	  /**
	   * The cache of this manager
	   * @type {Collection<Snowflake, VoiceState>}
	   * @name VoiceStateManager#cache
	   */

	  _add(data, cache = true) {
	    const existing = this.cache.get(data.user_id);
	    if (existing) return existing._patch(data);

	    const entry = new this.holds(this.guild, data);
	    if (cache) this.cache.set(data.user_id, entry);
	    return entry;
	  }

	  /**
	   * Obtains a user's voice state from discord or from the cache if it's already available.
	   * @param {GuildMemberResolvable|'@me'} member The member whose voice state is to be fetched
	   * @param {BaseFetchOptions} [options] Additional options for this fetch
	   * @returns {Promise<VoiceState>}
	   * @example
	   * // Fetch a member's voice state
	   * guild.voiceStates.fetch("66564597481480192")
	   *    .then(console.log)
	   *    .catch(console.error);
	   */
	  async fetch(member, { cache = true, force = false } = {}) {
	    const id = member === '@me' ? member : this.guild.members.resolveId(member);
	    if (!force) {
	      const existing = this.cache.get(id === '@me' ? this.client.user.id : id);
	      if (existing) return existing;
	    }
	    const data = await this.client.rest.get(Routes.guildVoiceState(this.guild.id, id));
	    return this._add(data, cache);
	  }
	}

	VoiceStateManager_1 = VoiceStateManager;
	return VoiceStateManager_1;
}

var SystemChannelFlagsBitField_1;
var hasRequiredSystemChannelFlagsBitField;

function requireSystemChannelFlagsBitField () {
	if (hasRequiredSystemChannelFlagsBitField) return SystemChannelFlagsBitField_1;
	hasRequiredSystemChannelFlagsBitField = 1;

	const { GuildSystemChannelFlags } = requireV10$6();
	const BitField = requireBitField();

	/**
	 * Data structure that makes it easy to interact with a {@link Guild#systemChannelFlags} bitfield.
	 * <info>Note that all event message types are enabled by default,
	 * and by setting their corresponding flags you are disabling them</info>
	 * @extends {BitField}
	 */
	class SystemChannelFlagsBitField extends BitField {
	  /**
	   * Numeric system channel flags.
	   * @type {GuildSystemChannelFlags}
	   * @memberof SystemChannelFlagsBitField
	   */
	  static Flags = GuildSystemChannelFlags;
	}

	/**
	 * @name SystemChannelFlagsBitField
	 * @kind constructor
	 * @memberof SystemChannelFlagsBitField
	 * @param {SystemChannelFlagsResolvable} [bits=0] Bit(s) to read from
	 */

	/**
	 * Bitfield of the packed bits
	 * @type {number}
	 * @name SystemChannelFlagsBitField#bitfield
	 */

	/**
	 * Data that can be resolved to give a system channel flag bitfield. This can be:
	 * * A string (see {@link SystemChannelFlagsBitField.Flags})
	 * * A system channel flag
	 * * An instance of SystemChannelFlagsBitField
	 * * An Array of SystemChannelFlagsResolvable
	 * @typedef {string|number|SystemChannelFlagsBitField|SystemChannelFlagsResolvable[]} SystemChannelFlagsResolvable
	 */

	SystemChannelFlagsBitField_1 = SystemChannelFlagsBitField;
	return SystemChannelFlagsBitField_1;
}

var hasRequiredGuild;

function requireGuild () {
	if (hasRequiredGuild) return Guild;
	hasRequiredGuild = 1;

	const { Collection } = requireDist$3();
	const { makeURLSearchParams } = requireWeb();
	const { DiscordSnowflake } = /*@__PURE__*/ requireCjs$2();
	const { ChannelType, GuildPremiumTier, Routes, GuildFeature } = requireV10$6();
	const AnonymousGuild = requireAnonymousGuild();
	const GuildAuditLogs = requireGuildAuditLogs();
	const { GuildOnboarding } = requireGuildOnboarding();
	const GuildPreview = requireGuildPreview();
	const GuildTemplate = requireGuildTemplate();
	const Integration = requireIntegration();
	const Webhook = requireWebhook$2();
	const WelcomeScreen = requireWelcomeScreen();
	const { DiscordjsError, DiscordjsTypeError, ErrorCodes } = requireErrors$1();
	const AutoModerationRuleManager = requireAutoModerationRuleManager();
	const GuildApplicationCommandManager = requireGuildApplicationCommandManager();
	const GuildBanManager = requireGuildBanManager();
	const GuildChannelManager = requireGuildChannelManager();
	const GuildEmojiManager = requireGuildEmojiManager();
	const GuildInviteManager = requireGuildInviteManager();
	const GuildMemberManager = requireGuildMemberManager();
	const GuildScheduledEventManager = requireGuildScheduledEventManager();
	const GuildStickerManager = requireGuildStickerManager();
	const PresenceManager = requirePresenceManager();
	const RoleManager = requireRoleManager();
	const StageInstanceManager = requireStageInstanceManager();
	const VoiceStateManager = requireVoiceStateManager();
	const { resolveImage } = requireDataResolver();
	const Status = requireStatus();
	const SystemChannelFlagsBitField = requireSystemChannelFlagsBitField();
	const { discordSort, getSortableGroupTypes, resolvePartialEmoji } = requireUtil();

	/**
	 * Represents a guild (or a server) on Discord.
	 * <info>It's recommended to see if a guild is available before performing operations or reading data from it. You can
	 * check this with {@link Guild#available}.</info>
	 * @extends {AnonymousGuild}
	 */
	let Guild$1 = class Guild extends AnonymousGuild {
	  constructor(client, data) {
	    super(client, data, false);

	    /**
	     * A manager of the application commands belonging to this guild
	     * @type {GuildApplicationCommandManager}
	     */
	    this.commands = new GuildApplicationCommandManager(this);

	    /**
	     * A manager of the members belonging to this guild
	     * @type {GuildMemberManager}
	     */
	    this.members = new GuildMemberManager(this);

	    /**
	     * A manager of the channels belonging to this guild
	     * @type {GuildChannelManager}
	     */
	    this.channels = new GuildChannelManager(this);

	    /**
	     * A manager of the bans belonging to this guild
	     * @type {GuildBanManager}
	     */
	    this.bans = new GuildBanManager(this);

	    /**
	     * A manager of the roles belonging to this guild
	     * @type {RoleManager}
	     */
	    this.roles = new RoleManager(this);

	    /**
	     * A manager of the presences belonging to this guild
	     * @type {PresenceManager}
	     */
	    this.presences = new PresenceManager(this.client);

	    /**
	     * A manager of the voice states of this guild
	     * @type {VoiceStateManager}
	     */
	    this.voiceStates = new VoiceStateManager(this);

	    /**
	     * A manager of the stage instances of this guild
	     * @type {StageInstanceManager}
	     */
	    this.stageInstances = new StageInstanceManager(this);

	    /**
	     * A manager of the invites of this guild
	     * @type {GuildInviteManager}
	     */
	    this.invites = new GuildInviteManager(this);

	    /**
	     * A manager of the scheduled events of this guild
	     * @type {GuildScheduledEventManager}
	     */
	    this.scheduledEvents = new GuildScheduledEventManager(this);

	    /**
	     * A manager of the auto moderation rules of this guild.
	     * @type {AutoModerationRuleManager}
	     */
	    this.autoModerationRules = new AutoModerationRuleManager(this);

	    if (!data) return;
	    if (data.unavailable) {
	      /**
	       * Whether the guild is available to access. If it is not available, it indicates a server outage
	       * @type {boolean}
	       */
	      this.available = false;
	    } else {
	      this._patch(data);
	      if (!data.channels) this.available = false;
	    }

	    /**
	     * The id of the shard this Guild belongs to.
	     * @type {number}
	     */
	    this.shardId = data.shardId;
	  }

	  /**
	   * The Shard this Guild belongs to.
	   * @type {WebSocketShard}
	   * @readonly
	   */
	  get shard() {
	    return this.client.ws.shards.get(this.shardId);
	  }

	  _patch(data) {
	    super._patch(data);
	    this.id = data.id;
	    if ('name' in data) this.name = data.name;
	    if ('icon' in data) this.icon = data.icon;
	    if ('unavailable' in data) {
	      this.available = !data.unavailable;
	    } else {
	      this.available ??= true;
	    }

	    if ('discovery_splash' in data) {
	      /**
	       * The hash of the guild discovery splash image
	       * @type {?string}
	       */
	      this.discoverySplash = data.discovery_splash;
	    }

	    if ('member_count' in data) {
	      /**
	       * The full amount of members in this guild
	       * @type {number}
	       */
	      this.memberCount = data.member_count;
	    }

	    if ('large' in data) {
	      /**
	       * Whether the guild is "large" (has more than {@link WebSocketOptions large_threshold} members, 50 by default)
	       * @type {boolean}
	       */
	      this.large = Boolean(data.large);
	    }

	    if ('premium_progress_bar_enabled' in data) {
	      /**
	       * Whether this guild has its premium (boost) progress bar enabled
	       * @type {boolean}
	       */
	      this.premiumProgressBarEnabled = data.premium_progress_bar_enabled;
	    }

	    if ('application_id' in data) {
	      /**
	       * The id of the application that created this guild (if applicable)
	       * @type {?Snowflake}
	       */
	      this.applicationId = data.application_id;
	    }

	    if ('afk_timeout' in data) {
	      /**
	       * The time in seconds before a user is counted as "away from keyboard"
	       * @type {?number}
	       */
	      this.afkTimeout = data.afk_timeout;
	    }

	    if ('afk_channel_id' in data) {
	      /**
	       * The id of the voice channel where AFK members are moved
	       * @type {?Snowflake}
	       */
	      this.afkChannelId = data.afk_channel_id;
	    }

	    if ('system_channel_id' in data) {
	      /**
	       * The system channel's id
	       * @type {?Snowflake}
	       */
	      this.systemChannelId = data.system_channel_id;
	    }

	    if ('premium_tier' in data) {
	      /**
	       * The premium tier of this guild
	       * @type {GuildPremiumTier}
	       */
	      this.premiumTier = data.premium_tier;
	    }

	    if ('widget_enabled' in data) {
	      /**
	       * Whether widget images are enabled on this guild
	       * @type {?boolean}
	       */
	      this.widgetEnabled = data.widget_enabled;
	    } else {
	      this.widgetEnabled ??= null;
	    }

	    if ('widget_channel_id' in data) {
	      /**
	       * The widget channel's id, if enabled
	       * @type {?string}
	       */
	      this.widgetChannelId = data.widget_channel_id;
	    } else {
	      this.widgetChannelId ??= null;
	    }

	    if ('explicit_content_filter' in data) {
	      /**
	       * The explicit content filter level of the guild
	       * @type {GuildExplicitContentFilter}
	       */
	      this.explicitContentFilter = data.explicit_content_filter;
	    }

	    if ('mfa_level' in data) {
	      /**
	       * The required MFA level for this guild
	       * @type {GuildMFALevel}
	       */
	      this.mfaLevel = data.mfa_level;
	    }

	    if ('joined_at' in data) {
	      /**
	       * The timestamp the client user joined the guild at
	       * @type {number}
	       */
	      this.joinedTimestamp = Date.parse(data.joined_at);
	    }

	    if ('default_message_notifications' in data) {
	      /**
	       * The default message notification level of the guild
	       * @type {GuildDefaultMessageNotifications}
	       */
	      this.defaultMessageNotifications = data.default_message_notifications;
	    }

	    if ('system_channel_flags' in data) {
	      /**
	       * The value set for the guild's system channel flags
	       * @type {Readonly<SystemChannelFlagsBitField>}
	       */
	      this.systemChannelFlags = new SystemChannelFlagsBitField(data.system_channel_flags).freeze();
	    }

	    if ('max_members' in data) {
	      /**
	       * The maximum amount of members the guild can have
	       * @type {?number}
	       */
	      this.maximumMembers = data.max_members;
	    } else {
	      this.maximumMembers ??= null;
	    }

	    if ('max_presences' in data) {
	      /**
	       * The maximum amount of presences the guild can have (this is `null` for all but the largest of guilds)
	       * <info>You will need to fetch the guild using {@link BaseGuild#fetch} if you want to receive
	       * this parameter</info>
	       * @type {?number}
	       */
	      this.maximumPresences = data.max_presences;
	    } else {
	      this.maximumPresences ??= null;
	    }

	    if ('max_video_channel_users' in data) {
	      /**
	       * The maximum amount of users allowed in a video channel.
	       * @type {?number}
	       */
	      this.maxVideoChannelUsers = data.max_video_channel_users;
	    } else {
	      this.maxVideoChannelUsers ??= null;
	    }

	    if ('max_stage_video_channel_users' in data) {
	      /**
	       * The maximum amount of users allowed in a stage video channel.
	       * @type {?number}
	       */
	      this.maxStageVideoChannelUsers = data.max_stage_video_channel_users;
	    } else {
	      this.maxStageVideoChannelUsers ??= null;
	    }

	    if ('approximate_member_count' in data) {
	      /**
	       * The approximate amount of members the guild has
	       * <info>You will need to fetch the guild using {@link BaseGuild#fetch} if you want to receive
	       * this parameter</info>
	       * @type {?number}
	       */
	      this.approximateMemberCount = data.approximate_member_count;
	    } else {
	      this.approximateMemberCount ??= null;
	    }

	    if ('approximate_presence_count' in data) {
	      /**
	       * The approximate amount of presences the guild has
	       * <info>You will need to fetch the guild using {@link BaseGuild#fetch} if you want to receive
	       * this parameter</info>
	       * @type {?number}
	       */
	      this.approximatePresenceCount = data.approximate_presence_count;
	    } else {
	      this.approximatePresenceCount ??= null;
	    }

	    /**
	     * The use count of the vanity URL code of the guild, if any
	     * <info>You will need to fetch this parameter using {@link Guild#fetchVanityData} if you want to receive it</info>
	     * @type {?number}
	     */
	    this.vanityURLUses ??= null;

	    if ('rules_channel_id' in data) {
	      /**
	       * The rules channel's id for the guild
	       * @type {?Snowflake}
	       */
	      this.rulesChannelId = data.rules_channel_id;
	    }

	    if ('public_updates_channel_id' in data) {
	      /**
	       * The community updates channel's id for the guild
	       * @type {?Snowflake}
	       */
	      this.publicUpdatesChannelId = data.public_updates_channel_id;
	    }

	    if ('preferred_locale' in data) {
	      /**
	       * The preferred locale of the guild, defaults to `en-US`
	       * @type {Locale}
	       */
	      this.preferredLocale = data.preferred_locale;
	    }

	    if ('safety_alerts_channel_id' in data) {
	      /**
	       * The safety alerts channel's id for the guild
	       * @type {?Snowflake}
	       */
	      this.safetyAlertsChannelId = data.safety_alerts_channel_id;
	    } else {
	      this.safetyAlertsChannelId ??= null;
	    }

	    if (data.channels) {
	      this.channels.cache.clear();
	      for (const rawChannel of data.channels) {
	        this.client.channels._add(rawChannel, this);
	      }
	    }

	    if (data.threads) {
	      for (const rawThread of data.threads) {
	        this.client.channels._add(rawThread, this);
	      }
	    }

	    if (data.roles) {
	      this.roles.cache.clear();
	      for (const role of data.roles) this.roles._add(role);
	    }

	    if (data.members) {
	      this.members.cache.clear();
	      for (const guildUser of data.members) this.members._add(guildUser);
	    }

	    if ('owner_id' in data) {
	      /**
	       * The user id of this guild's owner
	       * @type {Snowflake}
	       */
	      this.ownerId = data.owner_id;
	    }

	    if (data.presences) {
	      for (const presence of data.presences) {
	        this.presences._add(Object.assign(presence, { guild: this }));
	      }
	    }

	    if (data.stage_instances) {
	      this.stageInstances.cache.clear();
	      for (const stageInstance of data.stage_instances) {
	        this.stageInstances._add(stageInstance);
	      }
	    }

	    if (data.guild_scheduled_events) {
	      this.scheduledEvents.cache.clear();
	      for (const scheduledEvent of data.guild_scheduled_events) {
	        this.scheduledEvents._add(scheduledEvent);
	      }
	    }

	    if (data.voice_states) {
	      this.voiceStates.cache.clear();
	      for (const voiceState of data.voice_states) {
	        this.voiceStates._add(voiceState);
	      }
	    }

	    if (!this.emojis) {
	      /**
	       * A manager of the emojis belonging to this guild
	       * @type {GuildEmojiManager}
	       */
	      this.emojis = new GuildEmojiManager(this);
	      if (data.emojis) for (const emoji of data.emojis) this.emojis._add(emoji);
	    } else if (data.emojis) {
	      this.client.actions.GuildEmojisUpdate.handle({
	        guild_id: this.id,
	        emojis: data.emojis,
	      });
	    }

	    if (!this.stickers) {
	      /**
	       * A manager of the stickers belonging to this guild
	       * @type {GuildStickerManager}
	       */
	      this.stickers = new GuildStickerManager(this);
	      if (data.stickers) for (const sticker of data.stickers) this.stickers._add(sticker);
	    } else if (data.stickers) {
	      this.client.actions.GuildStickersUpdate.handle({
	        guild_id: this.id,
	        stickers: data.stickers,
	      });
	    }
	  }

	  /**
	   * The time the client user joined the guild
	   * @type {Date}
	   * @readonly
	   */
	  get joinedAt() {
	    return new Date(this.joinedTimestamp);
	  }

	  /**
	   * The URL to this guild's discovery splash image.
	   * @param {ImageURLOptions} [options={}] Options for the image URL
	   * @returns {?string}
	   */
	  discoverySplashURL(options = {}) {
	    return this.discoverySplash && this.client.rest.cdn.discoverySplash(this.id, this.discoverySplash, options);
	  }

	  /**
	   * Fetches the owner of the guild.
	   * If the member object isn't needed, use {@link Guild#ownerId} instead.
	   * @param {BaseFetchOptions} [options] The options for fetching the member
	   * @returns {Promise<GuildMember>}
	   */
	  async fetchOwner(options) {
	    if (!this.ownerId) {
	      throw new DiscordjsError(ErrorCodes.FetchOwnerId, 'guild');
	    }
	    const member = await this.members.fetch({ ...options, user: this.ownerId });
	    return member;
	  }

	  /**
	   * AFK voice channel for this guild
	   * @type {?VoiceChannel}
	   * @readonly
	   */
	  get afkChannel() {
	    return this.client.channels.resolve(this.afkChannelId);
	  }

	  /**
	   * System channel for this guild
	   * @type {?TextChannel}
	   * @readonly
	   */
	  get systemChannel() {
	    return this.client.channels.resolve(this.systemChannelId);
	  }

	  /**
	   * Widget channel for this guild
	   * @type {?(TextChannel|NewsChannel|VoiceChannel|StageChannel|ForumChannel|MediaChannel)}
	   * @readonly
	   */
	  get widgetChannel() {
	    return this.client.channels.resolve(this.widgetChannelId);
	  }

	  /**
	   * Rules channel for this guild
	   * @type {?TextChannel}
	   * @readonly
	   */
	  get rulesChannel() {
	    return this.client.channels.resolve(this.rulesChannelId);
	  }

	  /**
	   * Public updates channel for this guild
	   * @type {?TextChannel}
	   * @readonly
	   */
	  get publicUpdatesChannel() {
	    return this.client.channels.resolve(this.publicUpdatesChannelId);
	  }

	  /**
	   * Safety alerts channel for this guild
	   * @type {?TextChannel}
	   * @readonly
	   */
	  get safetyAlertsChannel() {
	    return this.client.channels.resolve(this.safetyAlertsChannelId);
	  }

	  /**
	   * The maximum bitrate available for this guild
	   * @type {number}
	   * @readonly
	   */
	  get maximumBitrate() {
	    if (this.features.includes(GuildFeature.VIPRegions)) {
	      return 384_000;
	    }

	    switch (this.premiumTier) {
	      case GuildPremiumTier.Tier1:
	        return 128_000;
	      case GuildPremiumTier.Tier2:
	        return 256_000;
	      case GuildPremiumTier.Tier3:
	        return 384_000;
	      default:
	        return 96_000;
	    }
	  }

	  /**
	   * Fetches a collection of integrations to this guild.
	   * Resolves with a collection mapping integrations by their ids.
	   * @returns {Promise<Collection<Snowflake|string, Integration>>}
	   * @example
	   * // Fetch integrations
	   * guild.fetchIntegrations()
	   *   .then(integrations => console.log(`Fetched ${integrations.size} integrations`))
	   *   .catch(console.error);
	   */
	  async fetchIntegrations() {
	    const data = await this.client.rest.get(Routes.guildIntegrations(this.id));
	    return data.reduce(
	      (collection, integration) => collection.set(integration.id, new Integration(this.client, integration, this)),
	      new Collection(),
	    );
	  }

	  /**
	   * Fetches a collection of templates from this guild.
	   * Resolves with a collection mapping templates by their codes.
	   * @returns {Promise<Collection<string, GuildTemplate>>}
	   */
	  async fetchTemplates() {
	    const templates = await this.client.rest.get(Routes.guildTemplates(this.id));
	    return templates.reduce((col, data) => col.set(data.code, new GuildTemplate(this.client, data)), new Collection());
	  }

	  /**
	   * Fetches the welcome screen for this guild.
	   * @returns {Promise<WelcomeScreen>}
	   */
	  async fetchWelcomeScreen() {
	    const data = await this.client.rest.get(Routes.guildWelcomeScreen(this.id));
	    return new WelcomeScreen(this, data);
	  }

	  /**
	   * Creates a template for the guild.
	   * @param {string} name The name for the template
	   * @param {string} [description] The description for the template
	   * @returns {Promise<GuildTemplate>}
	   */
	  async createTemplate(name, description) {
	    const data = await this.client.rest.post(Routes.guildTemplates(this.id), { body: { name, description } });
	    return new GuildTemplate(this.client, data);
	  }

	  /**
	   * Obtains a guild preview for this guild from Discord.
	   * @returns {Promise<GuildPreview>}
	   */
	  async fetchPreview() {
	    const data = await this.client.rest.get(Routes.guildPreview(this.id));
	    return new GuildPreview(this.client, data);
	  }

	  /**
	   * An object containing information about a guild's vanity invite.
	   * @typedef {Object} Vanity
	   * @property {?string} code Vanity invite code
	   * @property {number} uses How many times this invite has been used
	   */

	  /**
	   * Fetches the vanity URL invite object to this guild.
	   * Resolves with an object containing the vanity URL invite code and the use count
	   * @returns {Promise<Vanity>}
	   * @example
	   * // Fetch invite data
	   * guild.fetchVanityData()
	   *   .then(res => {
	   *     console.log(`Vanity URL: https://discord.gg/${res.code} with ${res.uses} uses`);
	   *   })
	   *   .catch(console.error);
	   */
	  async fetchVanityData() {
	    const data = await this.client.rest.get(Routes.guildVanityUrl(this.id));
	    this.vanityURLCode = data.code;
	    this.vanityURLUses = data.uses;

	    return data;
	  }

	  /**
	   * Fetches all webhooks for the guild.
	   * @returns {Promise<Collection<Snowflake, Webhook>>}
	   * @example
	   * // Fetch webhooks
	   * guild.fetchWebhooks()
	   *   .then(webhooks => console.log(`Fetched ${webhooks.size} webhooks`))
	   *   .catch(console.error);
	   */
	  async fetchWebhooks() {
	    const apiHooks = await this.client.rest.get(Routes.guildWebhooks(this.id));
	    const hooks = new Collection();
	    for (const hook of apiHooks) hooks.set(hook.id, new Webhook(this.client, hook));
	    return hooks;
	  }

	  /**
	   * Fetches the guild widget data, requires the widget to be enabled.
	   * @returns {Promise<Widget>}
	   * @example
	   * // Fetches the guild widget data
	   * guild.fetchWidget()
	   *   .then(widget => console.log(`The widget shows ${widget.channels.size} channels`))
	   *   .catch(console.error);
	   */
	  fetchWidget() {
	    return this.client.fetchGuildWidget(this.id);
	  }

	  /**
	   * Data for the Guild Widget Settings object
	   * @typedef {Object} GuildWidgetSettings
	   * @property {boolean} enabled Whether the widget is enabled
	   * @property {?(TextChannel|NewsChannel|VoiceChannel|StageChannel|ForumChannel|MediaChannel)} channel
	   * The widget invite channel
	   */

	  /**
	   * The Guild Widget Settings object
	   * @typedef {Object} GuildWidgetSettingsData
	   * @property {boolean} enabled Whether the widget is enabled
	   * @property {?(TextChannel|NewsChannel|VoiceChannel|StageChannel|ForumChannel|MediaChannel|Snowflake)} channel
	   * The widget invite channel
	   */

	  /**
	   * Fetches the guild widget settings.
	   * @returns {Promise<GuildWidgetSettings>}
	   * @example
	   * // Fetches the guild widget settings
	   * guild.fetchWidgetSettings()
	   *   .then(widget => console.log(`The widget is ${widget.enabled ? 'enabled' : 'disabled'}`))
	   *   .catch(console.error);
	   */
	  async fetchWidgetSettings() {
	    const data = await this.client.rest.get(Routes.guildWidgetSettings(this.id));
	    this.widgetEnabled = data.enabled;
	    this.widgetChannelId = data.channel_id;
	    return {
	      enabled: data.enabled,
	      channel: data.channel_id ? this.channels.cache.get(data.channel_id) : null,
	    };
	  }

	  /**
	   * Returns a URL for the PNG widget of the guild.
	   * @param {GuildWidgetStyle} [style] The style for the widget image
	   * @returns {string}
	   */
	  widgetImageURL(style) {
	    return this.client.guilds.widgetImageURL(this.id, style);
	  }

	  /**
	   * Options used to fetch audit logs.
	   * @typedef {Object} GuildAuditLogsFetchOptions
	   * @property {Snowflake|GuildAuditLogsEntry} [before] Consider only entries before this entry
	   * @property {Snowflake|GuildAuditLogsEntry} [after] Consider only entries after this entry
	   * @property {number} [limit] The number of entries to return
	   * @property {UserResolvable} [user] Only return entries for actions made by this user
	   * @property {?AuditLogEvent} [type] Only return entries for this action type
	   */

	  /**
	   * Fetches audit logs for this guild.
	   * @param {GuildAuditLogsFetchOptions} [options={}] Options for fetching audit logs
	   * @returns {Promise<GuildAuditLogs>}
	   * @example
	   * // Output audit log entries
	   * guild.fetchAuditLogs()
	   *   .then(audit => console.log(audit.entries.first()))
	   *   .catch(console.error);
	   */
	  async fetchAuditLogs({ before, after, limit, user, type } = {}) {
	    const query = makeURLSearchParams({
	      before: before?.id ?? before,
	      after: after?.id ?? after,
	      limit,
	      action_type: type,
	    });

	    if (user) {
	      const userId = this.client.users.resolveId(user);
	      if (!userId) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'user', 'UserResolvable');
	      query.set('user_id', userId);
	    }

	    const data = await this.client.rest.get(Routes.guildAuditLog(this.id), { query });
	    return new GuildAuditLogs(this, data);
	  }

	  /**
	   * Fetches the guild onboarding data for this guild.
	   * @returns {Promise<GuildOnboarding>}
	   */
	  async fetchOnboarding() {
	    const data = await this.client.rest.get(Routes.guildOnboarding(this.id));
	    return new GuildOnboarding(this.client, data);
	  }

	  /**
	   * The data for editing a guild.
	   * @typedef {Object} GuildEditOptions
	   * @property {string} [name] The name of the guild
	   * @property {?GuildVerificationLevel} [verificationLevel] The verification level of the guild
	   * @property {?GuildDefaultMessageNotifications} [defaultMessageNotifications] The default message
	   * notification level of the guild
	   * @property {?GuildExplicitContentFilter} [explicitContentFilter] The level of the explicit content filter
	   * @property {?VoiceChannelResolvable} [afkChannel] The AFK channel of the guild
	   * @property {number} [afkTimeout] The AFK timeout of the guild
	   * @property {?(BufferResolvable|Base64Resolvable)} [icon] The icon of the guild
	   * @property {GuildMemberResolvable} [owner] The owner of the guild
	   * @property {?(BufferResolvable|Base64Resolvable)} [splash] The invite splash image of the guild
	   * @property {?(BufferResolvable|Base64Resolvable)} [discoverySplash] The discovery splash image of the guild
	   * @property {?(BufferResolvable|Base64Resolvable)} [banner] The banner of the guild
	   * @property {?TextChannelResolvable} [systemChannel] The system channel of the guild
	   * @property {SystemChannelFlagsResolvable} [systemChannelFlags] The system channel flags of the guild
	   * @property {?TextChannelResolvable} [rulesChannel] The rules channel of the guild
	   * @property {?TextChannelResolvable} [publicUpdatesChannel] The community updates channel of the guild
	   * @property {?TextChannelResolvable} [safetyAlertsChannel] The safety alerts channel of the guild
	   * @property {?string} [preferredLocale] The preferred locale of the guild
	   * @property {GuildFeature[]} [features] The features of the guild
	   * @property {?string} [description] The discovery description of the guild
	   * @property {boolean} [premiumProgressBarEnabled] Whether the guild's premium progress bar is enabled
	   * @property {string} [reason] Reason for editing this guild
	   */

	  /**
	   * Data that can be resolved to a Text Channel object. This can be:
	   * * A TextChannel
	   * * A Snowflake
	   * @typedef {TextChannel|Snowflake} TextChannelResolvable
	   */

	  /**
	   * Data that can be resolved to a Voice Channel object. This can be:
	   * * A VoiceChannel
	   * * A Snowflake
	   * @typedef {VoiceChannel|Snowflake} VoiceChannelResolvable
	   */

	  /**
	   * Updates the guild with new information - e.g. a new name.
	   * @param {GuildEditOptions} options The options to provide
	   * @returns {Promise<Guild>}
	   * @example
	   * // Set the guild name
	   * guild.edit({
	   *   name: 'Discord Guild',
	   * })
	   *   .then(updated => console.log(`New guild name ${updated}`))
	   *   .catch(console.error);
	   */
	  async edit({
	    verificationLevel,
	    defaultMessageNotifications,
	    explicitContentFilter,
	    afkChannel,
	    afkTimeout,
	    icon,
	    owner,
	    splash,
	    discoverySplash,
	    banner,
	    systemChannel,
	    systemChannelFlags,
	    rulesChannel,
	    publicUpdatesChannel,
	    preferredLocale,
	    premiumProgressBarEnabled,
	    safetyAlertsChannel,
	    ...options
	  }) {
	    const data = await this.client.rest.patch(Routes.guild(this.id), {
	      body: {
	        ...options,
	        verification_level: verificationLevel,
	        default_message_notifications: defaultMessageNotifications,
	        explicit_content_filter: explicitContentFilter,
	        afk_channel_id: afkChannel && this.client.channels.resolveId(afkChannel),
	        afk_timeout: afkTimeout,
	        icon: icon && (await resolveImage(icon)),
	        owner_id: owner && this.client.users.resolveId(owner),
	        splash: splash && (await resolveImage(splash)),
	        discovery_splash: discoverySplash && (await resolveImage(discoverySplash)),
	        banner: banner && (await resolveImage(banner)),
	        system_channel_id: systemChannel && this.client.channels.resolveId(systemChannel),
	        system_channel_flags:
	          systemChannelFlags === undefined ? undefined : SystemChannelFlagsBitField.resolve(systemChannelFlags),
	        rules_channel_id: rulesChannel && this.client.channels.resolveId(rulesChannel),
	        public_updates_channel_id: publicUpdatesChannel && this.client.channels.resolveId(publicUpdatesChannel),
	        preferred_locale: preferredLocale,
	        premium_progress_bar_enabled: premiumProgressBarEnabled,
	        safety_alerts_channel_id: safetyAlertsChannel && this.client.channels.resolveId(safetyAlertsChannel),
	      },
	      reason: options.reason,
	    });

	    return this.client.actions.GuildUpdate.handle(data).updated;
	  }

	  /**
	   * Options used to edit the guild onboarding.
	   * @typedef {Object} GuildOnboardingEditOptions
	   * @property {GuildOnboardingPromptData[]|Collection<Snowflake, GuildOnboardingPrompt>} [prompts]
	   * The prompts shown during onboarding and in customize community
	   * @property {ChannelResolvable[]|Collection<Snowflake, GuildChannel>} [defaultChannels]
	   * The channels that new members get opted into automatically
	   * @property {boolean} [enabled] Whether the onboarding is enabled
	   * @property {GuildOnboardingMode} [mode] The mode to edit the guild onboarding with
	   * @property {string} [reason] The reason for editing the guild onboarding
	   */

	  /**
	   * Data for editing a guild onboarding prompt.
	   * @typedef {Object} GuildOnboardingPromptData
	   * @property {Snowflake} [id] The id of the prompt
	   * @property {string} title The title for the prompt
	   * @property {boolean} [singleSelect] Whether users are limited to selecting one option for the prompt
	   * @property {boolean} [required] Whether the prompt is required before a user completes the onboarding flow
	   * @property {boolean} [inOnboarding] Whether the prompt is present in the onboarding flow
	   * @property {GuildOnboardingPromptType} [type] The type of the prompt
	   * @property {GuildOnboardingPromptOptionData[]|Collection<Snowflake, GuildOnboardingPrompt>} options
	   * The options available within the prompt
	   */

	  /**
	   * Data for editing a guild onboarding prompt option.
	   * @typedef {Object} GuildOnboardingPromptOptionData
	   * @property {?Snowflake} [id] The id of the option
	   * @property {ChannelResolvable[]|Collection<Snowflake, GuildChannel>} [channels]
	   * The channels a member is added to when the option is selected
	   * @property {RoleResolvable[]|Collection<Snowflake, Role>} [roles]
	   * The roles assigned to a member when the option is selected
	   * @property {string} title The title of the option
	   * @property {?string} [description] The description of the option
	   * @property {?(EmojiIdentifierResolvable|Emoji)} [emoji] The emoji of the option
	   */

	  /**
	   * Edits the guild onboarding data for this guild.
	   * @param {GuildOnboardingEditOptions} options The options to provide
	   * @returns {Promise<GuildOnboarding>}
	   */
	  async editOnboarding(options) {
	    const newData = await this.client.rest.put(Routes.guildOnboarding(this.id), {
	      body: {
	        prompts: options.prompts?.map(prompt => ({
	          // Currently, the prompt ids are required even for new ones (which won't be used)
	          id: prompt.id ?? DiscordSnowflake.generate().toString(),
	          title: prompt.title,
	          single_select: prompt.singleSelect,
	          required: prompt.required,
	          in_onboarding: prompt.inOnboarding,
	          type: prompt.type,
	          options: prompt.options.map(option => {
	            const emoji = resolvePartialEmoji(option.emoji);

	            return {
	              id: option.id,
	              channel_ids: option.channels?.map(channel => this.channels.resolveId(channel)),
	              role_ids: option.roles?.map(role => this.roles.resolveId(role)),
	              title: option.title,
	              description: option.description,
	              emoji_animated: emoji?.animated,
	              emoji_id: emoji?.id,
	              emoji_name: emoji?.name,
	            };
	          }),
	        })),
	        default_channel_ids: options.defaultChannels?.map(channel => this.channels.resolveId(channel)),
	        enabled: options.enabled,
	        mode: options.mode,
	      },
	      reason: options.reason,
	    });

	    return new GuildOnboarding(this.client, newData);
	  }

	  /**
	   * Welcome channel data
	   * @typedef {Object} WelcomeChannelData
	   * @property {string} description The description to show for this welcome channel
	   * @property {TextChannel|NewsChannel|ForumChannel|MediaChannel|Snowflake} channel
	   * The channel to link for this welcome channel
	   * @property {EmojiIdentifierResolvable} [emoji] The emoji to display for this welcome channel
	   */

	  /**
	   * Welcome screen edit data
	   * @typedef {Object} WelcomeScreenEditOptions
	   * @property {boolean} [enabled] Whether the welcome screen is enabled
	   * @property {string} [description] The description for the welcome screen
	   * @property {WelcomeChannelData[]} [welcomeChannels] The welcome channel data for the welcome screen
	   */

	  /**
	   * Data that can be resolved to a GuildTextChannel object. This can be:
	   * * A TextChannel
	   * * A NewsChannel
	   * * A Snowflake
	   * @typedef {TextChannel|NewsChannel|Snowflake} GuildTextChannelResolvable
	   */

	  /**
	   * Data that can be resolved to a GuildVoiceChannel object. This can be:
	   * * A VoiceChannel
	   * * A StageChannel
	   * * A Snowflake
	   * @typedef {VoiceChannel|StageChannel|Snowflake} GuildVoiceChannelResolvable
	   */

	  /**
	   * Updates the guild's welcome screen
	   * @param {WelcomeScreenEditOptions} options The options to provide
	   * @returns {Promise<WelcomeScreen>}
	   * @example
	   * guild.editWelcomeScreen({
	   *   description: 'Hello World',
	   *   enabled: true,
	   *   welcomeChannels: [
	   *     {
	   *       description: 'foobar',
	   *       channel: '222197033908436994',
	   *     }
	   *   ],
	   * })
	   */
	  async editWelcomeScreen(options) {
	    const { enabled, description, welcomeChannels } = options;
	    const welcome_channels = welcomeChannels?.map(welcomeChannelData => {
	      const emoji = this.emojis.resolve(welcomeChannelData.emoji);
	      return {
	        emoji_id: emoji?.id,
	        emoji_name: emoji?.name ?? welcomeChannelData.emoji,
	        channel_id: this.channels.resolveId(welcomeChannelData.channel),
	        description: welcomeChannelData.description,
	      };
	    });

	    const patchData = await this.client.rest.patch(Routes.guildWelcomeScreen(this.id), {
	      body: {
	        welcome_channels,
	        description,
	        enabled,
	      },
	    });
	    return new WelcomeScreen(this, patchData);
	  }

	  /**
	   * Edits the level of the explicit content filter.
	   * @param {?GuildExplicitContentFilter} explicitContentFilter The new level of the explicit content filter
	   * @param {string} [reason] Reason for changing the level of the guild's explicit content filter
	   * @returns {Promise<Guild>}
	   */
	  setExplicitContentFilter(explicitContentFilter, reason) {
	    return this.edit({ explicitContentFilter, reason });
	  }

	  /**
	   * Edits the setting of the default message notifications of the guild.
	   * @param {?GuildDefaultMessageNotifications} defaultMessageNotifications
	   * The new default message notification level of the guild
	   * @param {string} [reason] Reason for changing the setting of the default message notifications
	   * @returns {Promise<Guild>}
	   */
	  setDefaultMessageNotifications(defaultMessageNotifications, reason) {
	    return this.edit({ defaultMessageNotifications, reason });
	  }

	  /**
	   * Edits the flags of the default message notifications of the guild.
	   * @param {SystemChannelFlagsResolvable} systemChannelFlags The new flags for the default message notifications
	   * @param {string} [reason] Reason for changing the flags of the default message notifications
	   * @returns {Promise<Guild>}
	   */
	  setSystemChannelFlags(systemChannelFlags, reason) {
	    return this.edit({ systemChannelFlags, reason });
	  }

	  /**
	   * Edits the name of the guild.
	   * @param {string} name The new name of the guild
	   * @param {string} [reason] Reason for changing the guild's name
	   * @returns {Promise<Guild>}
	   * @example
	   * // Edit the guild name
	   * guild.setName('Discord Guild')
	   *  .then(updated => console.log(`Updated guild name to ${updated.name}`))
	   *  .catch(console.error);
	   */
	  setName(name, reason) {
	    return this.edit({ name, reason });
	  }

	  /**
	   * Edits the verification level of the guild.
	   * @param {?GuildVerificationLevel} verificationLevel The new verification level of the guild
	   * @param {string} [reason] Reason for changing the guild's verification level
	   * @returns {Promise<Guild>}
	   * @example
	   * // Edit the guild verification level
	   * guild.setVerificationLevel(1)
	   *  .then(updated => console.log(`Updated guild verification level to ${guild.verificationLevel}`))
	   *  .catch(console.error);
	   */
	  setVerificationLevel(verificationLevel, reason) {
	    return this.edit({ verificationLevel, reason });
	  }

	  /**
	   * Edits the AFK channel of the guild.
	   * @param {?VoiceChannelResolvable} afkChannel The new AFK channel
	   * @param {string} [reason] Reason for changing the guild's AFK channel
	   * @returns {Promise<Guild>}
	   * @example
	   * // Edit the guild AFK channel
	   * guild.setAFKChannel(channel)
	   *  .then(updated => console.log(`Updated guild AFK channel to ${guild.afkChannel.name}`))
	   *  .catch(console.error);
	   */
	  setAFKChannel(afkChannel, reason) {
	    return this.edit({ afkChannel, reason });
	  }

	  /**
	   * Edits the system channel of the guild.
	   * @param {?TextChannelResolvable} systemChannel The new system channel
	   * @param {string} [reason] Reason for changing the guild's system channel
	   * @returns {Promise<Guild>}
	   * @example
	   * // Edit the guild system channel
	   * guild.setSystemChannel(channel)
	   *  .then(updated => console.log(`Updated guild system channel to ${guild.systemChannel.name}`))
	   *  .catch(console.error);
	   */
	  setSystemChannel(systemChannel, reason) {
	    return this.edit({ systemChannel, reason });
	  }

	  /**
	   * Edits the AFK timeout of the guild.
	   * @param {number} afkTimeout The time in seconds that a user must be idle to be considered AFK
	   * @param {string} [reason] Reason for changing the guild's AFK timeout
	   * @returns {Promise<Guild>}
	   * @example
	   * // Edit the guild AFK channel
	   * guild.setAFKTimeout(60)
	   *  .then(updated => console.log(`Updated guild AFK timeout to ${guild.afkTimeout}`))
	   *  .catch(console.error);
	   */
	  setAFKTimeout(afkTimeout, reason) {
	    return this.edit({ afkTimeout, reason });
	  }

	  /**
	   * Sets a new guild icon.
	   * @param {?(Base64Resolvable|BufferResolvable)} icon The new icon of the guild
	   * @param {string} [reason] Reason for changing the guild's icon
	   * @returns {Promise<Guild>}
	   * @example
	   * // Edit the guild icon
	   * guild.setIcon('./icon.png')
	   *  .then(updated => console.log('Updated the guild icon'))
	   *  .catch(console.error);
	   */
	  setIcon(icon, reason) {
	    return this.edit({ icon, reason });
	  }

	  /**
	   * Sets a new owner of the guild.
	   * @param {GuildMemberResolvable} owner The new owner of the guild
	   * @param {string} [reason] Reason for setting the new owner
	   * @returns {Promise<Guild>}
	   * @example
	   * // Edit the guild owner
	   * guild.setOwner(guild.members.cache.first())
	   *  .then(guild => guild.fetchOwner())
	   *  .then(owner => console.log(`Updated the guild owner to ${owner.displayName}`))
	   *  .catch(console.error);
	   */
	  setOwner(owner, reason) {
	    return this.edit({ owner, reason });
	  }

	  /**
	   * Sets a new guild invite splash image.
	   * @param {?(Base64Resolvable|BufferResolvable)} splash The new invite splash image of the guild
	   * @param {string} [reason] Reason for changing the guild's invite splash image
	   * @returns {Promise<Guild>}
	   * @example
	   * // Edit the guild splash
	   * guild.setSplash('./splash.png')
	   *  .then(updated => console.log('Updated the guild splash'))
	   *  .catch(console.error);
	   */
	  setSplash(splash, reason) {
	    return this.edit({ splash, reason });
	  }

	  /**
	   * Sets a new guild discovery splash image.
	   * @param {?(Base64Resolvable|BufferResolvable)} discoverySplash The new discovery splash image of the guild
	   * @param {string} [reason] Reason for changing the guild's discovery splash image
	   * @returns {Promise<Guild>}
	   * @example
	   * // Edit the guild discovery splash
	   * guild.setDiscoverySplash('./discoverysplash.png')
	   *   .then(updated => console.log('Updated the guild discovery splash'))
	   *   .catch(console.error);
	   */
	  setDiscoverySplash(discoverySplash, reason) {
	    return this.edit({ discoverySplash, reason });
	  }

	  /**
	   * Sets a new guild banner.
	   * @param {?(Base64Resolvable|BufferResolvable)} banner The new banner of the guild
	   * @param {string} [reason] Reason for changing the guild's banner
	   * @returns {Promise<Guild>}
	   * @example
	   * guild.setBanner('./banner.png')
	   *  .then(updated => console.log('Updated the guild banner'))
	   *  .catch(console.error);
	   */
	  setBanner(banner, reason) {
	    return this.edit({ banner, reason });
	  }

	  /**
	   * Edits the rules channel of the guild.
	   * @param {?TextChannelResolvable} rulesChannel The new rules channel
	   * @param {string} [reason] Reason for changing the guild's rules channel
	   * @returns {Promise<Guild>}
	   * @example
	   * // Edit the guild rules channel
	   * guild.setRulesChannel(channel)
	   *  .then(updated => console.log(`Updated guild rules channel to ${guild.rulesChannel.name}`))
	   *  .catch(console.error);
	   */
	  setRulesChannel(rulesChannel, reason) {
	    return this.edit({ rulesChannel, reason });
	  }

	  /**
	   * Edits the community updates channel of the guild.
	   * @param {?TextChannelResolvable} publicUpdatesChannel The new community updates channel
	   * @param {string} [reason] Reason for changing the guild's community updates channel
	   * @returns {Promise<Guild>}
	   * @example
	   * // Edit the guild community updates channel
	   * guild.setPublicUpdatesChannel(channel)
	   *  .then(updated => console.log(`Updated guild community updates channel to ${guild.publicUpdatesChannel.name}`))
	   *  .catch(console.error);
	   */
	  setPublicUpdatesChannel(publicUpdatesChannel, reason) {
	    return this.edit({ publicUpdatesChannel, reason });
	  }

	  /**
	   * Edits the preferred locale of the guild.
	   * @param {?Locale} preferredLocale The new preferred locale of the guild
	   * @param {string} [reason] Reason for changing the guild's preferred locale
	   * @returns {Promise<Guild>}
	   * @example
	   * // Edit the guild preferred locale
	   * guild.setPreferredLocale('en-US')
	   *  .then(updated => console.log(`Updated guild preferred locale to ${guild.preferredLocale}`))
	   *  .catch(console.error);
	   */
	  setPreferredLocale(preferredLocale, reason) {
	    return this.edit({ preferredLocale, reason });
	  }

	  /**
	   * Edits the enabled state of the guild's premium progress bar
	   * @param {boolean} [enabled=true] The new enabled state of the guild's premium progress bar
	   * @param {string} [reason] Reason for changing the state of the guild's premium progress bar
	   * @returns {Promise<Guild>}
	   */
	  setPremiumProgressBarEnabled(enabled = true, reason) {
	    return this.edit({ premiumProgressBarEnabled: enabled, reason });
	  }

	  /**
	   * Edits the safety alerts channel of the guild.
	   * @param {?TextChannelResolvable} safetyAlertsChannel The new safety alerts channel
	   * @param {string} [reason] Reason for changing the guild's safety alerts channel
	   * @returns {Promise<Guild>}
	   * @example
	   * // Edit the guild safety alerts channel
	   * guild.setSafetyAlertsChannel(channel)
	   *  .then(updated => console.log(`Updated guild safety alerts channel to ${updated.safetyAlertsChannel.name}`))
	   *  .catch(console.error);
	   */
	  setSafetyAlertsChannel(safetyAlertsChannel, reason) {
	    return this.edit({ safetyAlertsChannel, reason });
	  }

	  /**
	   * Edits the guild's widget settings.
	   * @param {GuildWidgetSettingsData} settings The widget settings for the guild
	   * @param {string} [reason] Reason for changing the guild's widget settings
	   * @returns {Promise<Guild>}
	   */
	  async setWidgetSettings(settings, reason) {
	    await this.client.rest.patch(Routes.guildWidgetSettings(this.id), {
	      body: {
	        enabled: settings.enabled,
	        channel_id: this.channels.resolveId(settings.channel),
	      },
	      reason,
	    });
	    return this;
	  }

	  /**
	   * Sets the guild's MFA level
	   * <info>An elevated MFA level requires guild moderators to have 2FA enabled.</info>
	   * @param {GuildMFALevel} level The MFA level
	   * @param {string} [reason] Reason for changing the guild's MFA level
	   * @returns {Promise<Guild>}
	   * @example
	   * // Set the MFA level of the guild to Elevated
	   * guild.setMFALevel(GuildMFALevel.Elevated)
	   *   .then(guild => console.log("Set guild's MFA level to Elevated"))
	   *   .catch(console.error);
	   */
	  async setMFALevel(level, reason) {
	    await this.client.rest.post(Routes.guildMFA(this.id), {
	      body: {
	        level,
	      },
	      reason,
	    });
	    return this;
	  }

	  /**
	   * Leaves the guild.
	   * @returns {Promise<Guild>}
	   * @example
	   * // Leave a guild
	   * guild.leave()
	   *   .then(guild => console.log(`Left the guild: ${guild.name}`))
	   *   .catch(console.error);
	   */
	  async leave() {
	    if (this.ownerId === this.client.user.id) throw new DiscordjsError(ErrorCodes.GuildOwned);
	    await this.client.rest.delete(Routes.userGuild(this.id));
	    return this;
	  }

	  /**
	   * Deletes the guild.
	   * @returns {Promise<Guild>}
	   * @example
	   * // Delete a guild
	   * guild.delete()
	   *   .then(guild => console.log(`Deleted the guild ${guild}`))
	   *   .catch(console.error);
	   */
	  async delete() {
	    await this.client.rest.delete(Routes.guild(this.id));
	    return this;
	  }

	  /**
	   * Sets whether this guild's invites are disabled.
	   * @param {boolean} [disabled=true] Whether the invites are disabled
	   * @returns {Promise<Guild>}
	   */
	  async disableInvites(disabled = true) {
	    const features = this.features.filter(feature => feature !== GuildFeature.InvitesDisabled);
	    if (disabled) features.push(GuildFeature.InvitesDisabled);
	    return this.edit({ features });
	  }

	  /**
	   * Whether this guild equals another guild. It compares all properties, so for most operations
	   * it is advisable to just compare `guild.id === guild2.id` as it is much faster and is often
	   * what most users need.
	   * @param {Guild} guild The guild to compare with
	   * @returns {boolean}
	   */
	  equals(guild) {
	    return (
	      guild &&
	      guild instanceof this.constructor &&
	      this.id === guild.id &&
	      this.available === guild.available &&
	      this.splash === guild.splash &&
	      this.discoverySplash === guild.discoverySplash &&
	      this.name === guild.name &&
	      this.memberCount === guild.memberCount &&
	      this.large === guild.large &&
	      this.icon === guild.icon &&
	      this.ownerId === guild.ownerId &&
	      this.verificationLevel === guild.verificationLevel &&
	      (this.features === guild.features ||
	        (this.features.length === guild.features.length &&
	          this.features.every((feat, i) => feat === guild.features[i])))
	    );
	  }

	  toJSON() {
	    const json = super.toJSON({
	      available: false,
	      createdTimestamp: true,
	      nameAcronym: true,
	      presences: false,
	      voiceStates: false,
	    });
	    json.iconURL = this.iconURL();
	    json.splashURL = this.splashURL();
	    json.discoverySplashURL = this.discoverySplashURL();
	    json.bannerURL = this.bannerURL();
	    return json;
	  }

	  /**
	   * The voice state adapter for this guild that can be used with `@discordjs/voice` to play audio in voice
	   * and stage channels.
	   * @type {Function}
	   * @readonly
	   */
	  get voiceAdapterCreator() {
	    return methods => {
	      this.client.voice.adapters.set(this.id, methods);
	      return {
	        sendPayload: data => {
	          if (this.shard.status !== Status.Ready) return false;
	          this.shard.send(data);
	          return true;
	        },
	        destroy: () => {
	          this.client.voice.adapters.delete(this.id);
	        },
	      };
	    };
	  }

	  /**
	   * Creates a collection of this guild's roles, sorted by their position and ids.
	   * @returns {Collection<Snowflake, Role>}
	   * @private
	   */
	  _sortedRoles() {
	    return discordSort(this.roles.cache);
	  }

	  /**
	   * Creates a collection of this guild's or a specific category's channels, sorted by their position and ids.
	   * @param {GuildChannel} [channel] Category to get the channels of
	   * @returns {Collection<Snowflake, GuildChannel>}
	   * @private
	   */
	  _sortedChannels(channel) {
	    const channelIsCategory = channel.type === ChannelType.GuildCategory;
	    const types = getSortableGroupTypes(channel.type);
	    return discordSort(
	      this.channels.cache.filter(
	        ({ parentId, type }) => types.includes(type) && (channelIsCategory || parentId === channel.parentId),
	      ),
	    );
	  }
	};

	Guild.Guild = Guild$1;
	return Guild;
}

var OAuth2Guild_1;
var hasRequiredOAuth2Guild;

function requireOAuth2Guild () {
	if (hasRequiredOAuth2Guild) return OAuth2Guild_1;
	hasRequiredOAuth2Guild = 1;

	const BaseGuild = requireBaseGuild();
	const PermissionsBitField = requirePermissionsBitField();

	/**
	 * A partial guild received when using {@link GuildManager#fetch} to fetch multiple guilds.
	 * @extends {BaseGuild}
	 */
	class OAuth2Guild extends BaseGuild {
	  constructor(client, data) {
	    super(client, data);

	    /**
	     * Whether the client user is the owner of the guild
	     * @type {boolean}
	     */
	    this.owner = data.owner;

	    /**
	     * The permissions that the client user has in this guild
	     * @type {Readonly<PermissionsBitField>}
	     */
	    this.permissions = new PermissionsBitField(BigInt(data.permissions)).freeze();
	  }
	}

	OAuth2Guild_1 = OAuth2Guild;
	return OAuth2Guild_1;
}

var GuildManager_1;
var hasRequiredGuildManager;

function requireGuildManager () {
	if (hasRequiredGuildManager) return GuildManager_1;
	hasRequiredGuildManager = 1;

	const process = require$$0$d;
	const { setTimeout, clearTimeout } = require$$0$e;
	const { Collection } = requireDist$3();
	const { makeURLSearchParams } = requireWeb();
	const { Routes, RouteBases } = requireV10$6();
	const CachedManager = requireCachedManager();
	const ShardClientUtil = requireShardClientUtil();
	const { Guild } = requireGuild();
	const GuildChannel = requireGuildChannel();
	const GuildEmoji = requireGuildEmoji();
	const { GuildMember } = requireGuildMember();
	const Invite = requireInvite$2();
	const OAuth2Guild = requireOAuth2Guild();
	const { Role } = requireRole$1();
	const { resolveImage } = requireDataResolver();
	const Events = requireEvents();
	const PermissionsBitField = requirePermissionsBitField();
	const SystemChannelFlagsBitField = requireSystemChannelFlagsBitField();
	const { resolveColor } = requireUtil();

	let cacheWarningEmitted = false;

	/**
	 * Manages API methods for Guilds and stores their cache.
	 * @extends {CachedManager}
	 */
	class GuildManager extends CachedManager {
	  constructor(client, iterable) {
	    super(client, Guild, iterable);
	    if (!cacheWarningEmitted && this._cache.constructor.name !== 'Collection') {
	      cacheWarningEmitted = true;
	      process.emitWarning(
	        `Overriding the cache handling for ${this.constructor.name} is unsupported and breaks functionality.`,
	        'UnsupportedCacheOverwriteWarning',
	      );
	    }
	  }

	  /**
	   * The cache of this Manager
	   * @type {Collection<Snowflake, Guild>}
	   * @name GuildManager#cache
	   */

	  /**
	   * Data that resolves to give a Guild object. This can be:
	   * * A Guild object
	   * * A GuildChannel object
	   * * A GuildEmoji object
	   * * A Role object
	   * * A Snowflake
	   * * An Invite object
	   * @typedef {Guild|GuildChannel|GuildMember|GuildEmoji|Role|Snowflake|Invite} GuildResolvable
	   */

	  /**
	   * Partial data for a Role.
	   * @typedef {Object} PartialRoleData
	   * @property {Snowflake|number} [id] The role's id, used to set channel overrides.
	   * This is a placeholder and will be replaced by the API after consumption
	   * @property {string} [name] The name of the role
	   * @property {ColorResolvable} [color] The color of the role, either a hex string or a base 10 number
	   * @property {boolean} [hoist] Whether the role should be hoisted
	   * @property {number} [position] The position of the role
	   * @property {PermissionResolvable} [permissions] The permissions of the role
	   * @property {boolean} [mentionable] Whether the role should be mentionable
	   */

	  /**
	   * Partial overwrite data.
	   * @typedef {Object} PartialOverwriteData
	   * @property {Snowflake|number} id The id of the {@link Role} or {@link User} this overwrite belongs to
	   * @property {OverwriteType} [type] The type of this overwrite
	   * @property {PermissionResolvable} [allow] The permissions to allow
	   * @property {PermissionResolvable} [deny] The permissions to deny
	   */

	  /**
	   * Partial data for a Channel.
	   * @typedef {Object} PartialChannelData
	   * @property {Snowflake|number} [id] The channel's id, used to set its parent.
	   * This is a placeholder and will be replaced by the API after consumption
	   * @property {Snowflake|number} [parentId] The parent id for this channel
	   * @property {ChannelType.GuildText|ChannelType.GuildVoice|ChannelType.GuildCategory} [type] The type of the channel
	   * @property {string} name The name of the channel
	   * @property {?string} [topic] The topic of the text channel
	   * @property {boolean} [nsfw] Whether the channel is NSFW
	   * @property {number} [bitrate] The bitrate of the voice channel
	   * @property {number} [userLimit] The user limit of the channel
	   * @property {?string} [rtcRegion] The RTC region of the channel
	   * @property {VideoQualityMode} [videoQualityMode] The camera video quality mode of the channel
	   * @property {PartialOverwriteData[]} [permissionOverwrites]
	   * Overwrites of the channel
	   * @property {number} [rateLimitPerUser] The rate limit per user (slowmode) of the channel in seconds
	   */

	  /**
	   * Resolves a {@link GuildResolvable} to a {@link Guild} object.
	   * @method resolve
	   * @memberof GuildManager
	   * @instance
	   * @param {GuildResolvable} guild The guild resolvable to identify
	   * @returns {?Guild}
	   */
	  resolve(guild) {
	    if (
	      guild instanceof GuildChannel ||
	      guild instanceof GuildMember ||
	      guild instanceof GuildEmoji ||
	      guild instanceof Role ||
	      (guild instanceof Invite && guild.guild)
	    ) {
	      return super.resolve(guild.guild);
	    }
	    return super.resolve(guild);
	  }

	  /**
	   * Resolves a {@link GuildResolvable} to a {@link Guild} id string.
	   * @method resolveId
	   * @memberof GuildManager
	   * @instance
	   * @param {GuildResolvable} guild The guild resolvable to identify
	   * @returns {?Snowflake}
	   */
	  resolveId(guild) {
	    if (
	      guild instanceof GuildChannel ||
	      guild instanceof GuildMember ||
	      guild instanceof GuildEmoji ||
	      guild instanceof Role ||
	      (guild instanceof Invite && guild.guild)
	    ) {
	      return super.resolveId(guild.guild.id);
	    }
	    return super.resolveId(guild);
	  }

	  /**
	   * Options used to create a guild.
	   * @typedef {Object} GuildCreateOptions
	   * @property {string} name The name of the guild
	   * @property {?(BufferResolvable|Base64Resolvable)} [icon=null] The icon for the guild
	   * @property {GuildVerificationLevel} [verificationLevel] The verification level for the guild
	   * @property {GuildDefaultMessageNotifications} [defaultMessageNotifications] The default message notifications
	   * for the guild
	   * @property {GuildExplicitContentFilter} [explicitContentFilter] The explicit content filter level for the guild
	   * @property {PartialRoleData[]} [roles=[]] The roles for this guild,
	   * @property {PartialChannelData[]} [channels=[]] The channels for this guild
	   * @property {Snowflake|number} [afkChannelId] The AFK channel's id
	   * @property {number} [afkTimeout] The AFK timeout in seconds
	   * the first element of this array is used to change properties of the guild's everyone role.
	   * @property {Snowflake|number} [systemChannelId] The system channel's id
	   * @property {SystemChannelFlagsResolvable} [systemChannelFlags] The flags of the system channel
	   */
	  /* eslint-enable max-len */

	  /**
	   * Creates a guild.
	   * <warn>This is only available to bots in fewer than 10 guilds.</warn>
	   * @param {GuildCreateOptions} options Options for creating the guild
	   * @returns {Promise<Guild>} The guild that was created
	   */
	  async create({
	    name,
	    icon = null,
	    verificationLevel,
	    defaultMessageNotifications,
	    explicitContentFilter,
	    roles = [],
	    channels = [],
	    afkChannelId,
	    afkTimeout,
	    systemChannelId,
	    systemChannelFlags,
	  }) {
	    const data = await this.client.rest.post(Routes.guilds(), {
	      body: {
	        name,
	        icon: icon && (await resolveImage(icon)),
	        verification_level: verificationLevel,
	        default_message_notifications: defaultMessageNotifications,
	        explicit_content_filter: explicitContentFilter,
	        roles: roles.map(({ color, permissions, ...options }) => ({
	          ...options,
	          color: color && resolveColor(color),
	          permissions: permissions === undefined ? undefined : PermissionsBitField.resolve(permissions).toString(),
	        })),
	        channels: channels.map(
	          ({
	            parentId,
	            userLimit,
	            rtcRegion,
	            videoQualityMode,
	            permissionOverwrites,
	            rateLimitPerUser,
	            ...options
	          }) => ({
	            ...options,
	            parent_id: parentId,
	            user_limit: userLimit,
	            rtc_region: rtcRegion,
	            video_quality_mode: videoQualityMode,
	            permission_overwrites: permissionOverwrites?.map(({ allow, deny, ...permissionOverwriteOptions }) => ({
	              ...permissionOverwriteOptions,
	              allow: allow === undefined ? undefined : PermissionsBitField.resolve(allow).toString(),
	              deny: deny === undefined ? undefined : PermissionsBitField.resolve(deny).toString(),
	            })),
	            rate_limit_per_user: rateLimitPerUser,
	          }),
	        ),
	        afk_channel_id: afkChannelId,
	        afk_timeout: afkTimeout,
	        system_channel_id: systemChannelId,
	        system_channel_flags:
	          systemChannelFlags === undefined ? undefined : SystemChannelFlagsBitField.resolve(systemChannelFlags),
	      },
	    });

	    return (
	      this.client.guilds.cache.get(data.id) ??
	      new Promise(resolve => {
	        const handleGuild = guild => {
	          if (guild.id === data.id) {
	            clearTimeout(timeout);
	            this.client.decrementMaxListeners();
	            resolve(guild);
	          }
	        };
	        this.client.incrementMaxListeners();
	        this.client.once(Events.GuildCreate, handleGuild);

	        const timeout = setTimeout(() => {
	          this.client.removeListener(Events.GuildCreate, handleGuild);
	          this.client.decrementMaxListeners();
	          resolve(this.client.guilds._add(data));
	        }, 10_000).unref();
	      })
	    );
	  }

	  /**
	   * Options used to fetch a single guild.
	   * @typedef {BaseFetchOptions} FetchGuildOptions
	   * @property {GuildResolvable} guild The guild to fetch
	   * @property {boolean} [withCounts=true] Whether the approximate member and presence counts should be returned
	   */

	  /**
	   * Options used to fetch multiple guilds.
	   * @typedef {Object} FetchGuildsOptions
	   * @property {Snowflake} [before] Get guilds before this guild id
	   * @property {Snowflake} [after] Get guilds after this guild id
	   * @property {number} [limit] Maximum number of guilds to request (1-200)
	   */

	  /**
	   * Obtains one or multiple guilds from Discord, or the guild cache if it's already available.
	   * @param {GuildResolvable|FetchGuildOptions|FetchGuildsOptions} [options] The guild's id or options
	   * @returns {Promise<Guild|Collection<Snowflake, OAuth2Guild>>}
	   */
	  async fetch(options = {}) {
	    const id = this.resolveId(options) ?? this.resolveId(options.guild);

	    if (id) {
	      if (!options.force) {
	        const existing = this.cache.get(id);
	        if (existing) return existing;
	      }

	      const data = await this.client.rest.get(Routes.guild(id), {
	        query: makeURLSearchParams({ with_counts: options.withCounts ?? true }),
	      });
	      data.shardId = ShardClientUtil.shardIdForGuildId(id, this.client.options.shardCount);
	      return this._add(data, options.cache);
	    }

	    const data = await this.client.rest.get(Routes.userGuilds(), { query: makeURLSearchParams(options) });
	    return data.reduce((coll, guild) => coll.set(guild.id, new OAuth2Guild(this.client, guild)), new Collection());
	  }

	  /**
	   * Returns a URL for the PNG widget of a guild.
	   * @param {GuildResolvable} guild The guild of the widget image
	   * @param {GuildWidgetStyle} [style] The style for the widget image
	   * @returns {string}
	   */
	  widgetImageURL(guild, style) {
	    const urlSearchParams = String(makeURLSearchParams({ style }));

	    return `${RouteBases.api}${Routes.guildWidgetImage(this.resolveId(guild))}${
	      urlSearchParams ? `?${urlSearchParams}` : ''
	    }`;
	  }
	}

	GuildManager_1 = GuildManager;
	return GuildManager_1;
}

var UserManager_1;
var hasRequiredUserManager;

function requireUserManager () {
	if (hasRequiredUserManager) return UserManager_1;
	hasRequiredUserManager = 1;

	const { ChannelType, Routes } = requireV10$6();
	const CachedManager = requireCachedManager();
	const { DiscordjsError, ErrorCodes } = requireErrors$1();
	const { GuildMember } = requireGuildMember();
	const { Message } = requireMessage();
	const ThreadMember = requireThreadMember();
	const User = requireUser$3();

	/**
	 * Manages API methods for users and stores their cache.
	 * @extends {CachedManager}
	 */
	class UserManager extends CachedManager {
	  constructor(client, iterable) {
	    super(client, User, iterable);
	  }

	  /**
	   * The cache of this manager
	   * @type {Collection<Snowflake, User>}
	   * @name UserManager#cache
	   */

	  /**
	   * Data that resolves to give a User object. This can be:
	   * * A User object
	   * * A Snowflake
	   * * A Message object (resolves to the message author)
	   * * A GuildMember object
	   * * A ThreadMember object
	   * @typedef {User|Snowflake|Message|GuildMember|ThreadMember} UserResolvable
	   */

	  /**
	   * The DM between the client's user and a user
	   * @param {Snowflake} userId The user id
	   * @returns {?DMChannel}
	   * @private
	   */
	  dmChannel(userId) {
	    return (
	      this.client.channels.cache.find(channel => channel.type === ChannelType.DM && channel.recipientId === userId) ??
	      null
	    );
	  }

	  /**
	   * Creates a {@link DMChannel} between the client and a user.
	   * @param {UserResolvable} user The UserResolvable to identify
	   * @param {BaseFetchOptions} [options] Additional options for this fetch
	   * @returns {Promise<DMChannel>}
	   */
	  async createDM(user, { cache = true, force = false } = {}) {
	    const id = this.resolveId(user);

	    if (!force) {
	      const dmChannel = this.dmChannel(id);
	      if (dmChannel && !dmChannel.partial) return dmChannel;
	    }

	    const data = await this.client.rest.post(Routes.userChannels(), { body: { recipient_id: id } });
	    return this.client.channels._add(data, null, { cache });
	  }

	  /**
	   * Deletes a {@link DMChannel} (if one exists) between the client and a user. Resolves with the channel if successful.
	   * @param {UserResolvable} user The UserResolvable to identify
	   * @returns {Promise<DMChannel>}
	   */
	  async deleteDM(user) {
	    const id = this.resolveId(user);
	    const dmChannel = this.dmChannel(id);
	    if (!dmChannel) throw new DiscordjsError(ErrorCodes.UserNoDMChannel);
	    await this.client.rest.delete(Routes.channel(dmChannel.id));
	    this.client.channels._remove(dmChannel.id);
	    return dmChannel;
	  }

	  /**
	   * Obtains a user from Discord, or the user cache if it's already available.
	   * @param {UserResolvable} user The user to fetch
	   * @param {BaseFetchOptions} [options] Additional options for this fetch
	   * @returns {Promise<User>}
	   */
	  async fetch(user, { cache = true, force = false } = {}) {
	    const id = this.resolveId(user);
	    if (!force) {
	      const existing = this.cache.get(id);
	      if (existing && !existing.partial) return existing;
	    }

	    const data = await this.client.rest.get(Routes.user(id));
	    return this._add(data, cache);
	  }

	  /**
	   * Fetches a user's flags.
	   * @param {UserResolvable} user The UserResolvable to identify
	   * @param {BaseFetchOptions} [options] Additional options for this fetch
	   * @returns {Promise<UserFlagsBitField>}
	   */
	  async fetchFlags(user, options) {
	    return (await this.fetch(user, options)).flags;
	  }

	  /**
	   * Sends a message to a user.
	   * @param {UserResolvable} user The UserResolvable to identify
	   * @param {string|MessagePayload|MessageCreateOptions} options The options to provide
	   * @returns {Promise<Message>}
	   */
	  async send(user, options) {
	    return (await this.createDM(user)).send(options);
	  }

	  /**
	   * Resolves a {@link UserResolvable} to a {@link User} object.
	   * @param {UserResolvable} user The UserResolvable to identify
	   * @returns {?User}
	   */
	  resolve(user) {
	    if (user instanceof GuildMember || user instanceof ThreadMember) return user.user;
	    if (user instanceof Message) return user.author;
	    return super.resolve(user);
	  }

	  /**
	   * Resolves a {@link UserResolvable} to a {@link User} id.
	   * @param {UserResolvable} user The UserResolvable to identify
	   * @returns {?Snowflake}
	   */
	  resolveId(user) {
	    if (user instanceof ThreadMember) return user.id;
	    if (user instanceof GuildMember) return user.user.id;
	    if (user instanceof Message) return user.author.id;
	    return super.resolveId(user);
	  }
	}

	UserManager_1 = UserManager;
	return UserManager_1;
}

var ClientPresence_1;
var hasRequiredClientPresence;

function requireClientPresence () {
	if (hasRequiredClientPresence) return ClientPresence_1;
	hasRequiredClientPresence = 1;

	const { GatewayOpcodes, ActivityType } = requireV10$6();
	const { Presence } = requirePresence();
	const { DiscordjsTypeError, ErrorCodes } = requireErrors$1();

	/**
	 * Represents the client's presence.
	 * @extends {Presence}
	 */
	class ClientPresence extends Presence {
	  constructor(client, data = {}) {
	    super(client, Object.assign(data, { status: data.status ?? 'online', user: { id: null } }));
	  }

	  /**
	   * Sets the client's presence
	   * @param {PresenceData} presence The data to set the presence to
	   * @returns {ClientPresence}
	   */
	  set(presence) {
	    const packet = this._parse(presence);
	    this._patch(packet);
	    if (presence.shardId === undefined) {
	      this.client.ws.broadcast({ op: GatewayOpcodes.PresenceUpdate, d: packet });
	    } else if (Array.isArray(presence.shardId)) {
	      for (const shardId of presence.shardId) {
	        this.client.ws.shards.get(shardId).send({ op: GatewayOpcodes.PresenceUpdate, d: packet });
	      }
	    } else {
	      this.client.ws.shards.get(presence.shardId).send({ op: GatewayOpcodes.PresenceUpdate, d: packet });
	    }
	    return this;
	  }

	  /**
	   * Parses presence data into a packet ready to be sent to Discord
	   * @param {PresenceData} presence The data to parse
	   * @returns {GatewayPresenceUpdateData}
	   * @private
	   */
	  _parse({ status, since, afk, activities }) {
	    const data = {
	      activities: [],
	      afk: typeof afk === 'boolean' ? afk : false,
	      since: typeof since === 'number' && !Number.isNaN(since) ? since : null,
	      status: status ?? this.status,
	    };
	    if (activities?.length) {
	      for (const [i, activity] of activities.entries()) {
	        if (typeof activity.name !== 'string') {
	          throw new DiscordjsTypeError(ErrorCodes.InvalidType, `activities[${i}].name`, 'string');
	        }

	        activity.type ??= ActivityType.Playing;

	        if (activity.type === ActivityType.Custom && !activity.state) {
	          activity.state = activity.name;
	          activity.name = 'Custom Status';
	        }

	        data.activities.push({
	          type: activity.type,
	          name: activity.name,
	          state: activity.state,
	          url: activity.url,
	        });
	      }
	    } else if (!activities && (status || afk || since) && this.activities.length) {
	      data.activities.push(
	        ...this.activities.map(activity => ({
	          name: activity.name,
	          state: activity.state ?? undefined,
	          type: activity.type,
	          url: activity.url ?? undefined,
	        })),
	      );
	    }

	    return data;
	  }
	}

	ClientPresence_1 = ClientPresence;
	return ClientPresence_1;
}

var StickerPack_1;
var hasRequiredStickerPack;

function requireStickerPack () {
	if (hasRequiredStickerPack) return StickerPack_1;
	hasRequiredStickerPack = 1;

	const { Collection } = requireDist$3();
	const { DiscordSnowflake } = /*@__PURE__*/ requireCjs$2();
	const Base = requireBase$2();
	const { Sticker } = requireSticker$2();

	/**
	 * Represents a pack of standard stickers.
	 * @extends {Base}
	 */
	class StickerPack extends Base {
	  constructor(client, pack) {
	    super(client);
	    /**
	     * The Sticker pack's id
	     * @type {Snowflake}
	     */
	    this.id = pack.id;

	    /**
	     * The stickers in the pack
	     * @type {Collection<Snowflake, Sticker>}
	     */
	    this.stickers = new Collection(pack.stickers.map(sticker => [sticker.id, new Sticker(client, sticker)]));

	    /**
	     * The name of the sticker pack
	     * @type {string}
	     */
	    this.name = pack.name;

	    /**
	     * The id of the pack's SKU
	     * @type {Snowflake}
	     */
	    this.skuId = pack.sku_id;

	    /**
	     * The id of a sticker in the pack which is shown as the pack's icon
	     * @type {?Snowflake}
	     */
	    this.coverStickerId = pack.cover_sticker_id ?? null;

	    /**
	     * The description of the sticker pack
	     * @type {string}
	     */
	    this.description = pack.description;

	    /**
	     * The id of the sticker pack's banner image
	     * @type {?Snowflake}
	     */
	    this.bannerId = pack.banner_asset_id ?? null;
	  }

	  /**
	   * The timestamp the sticker was created at
	   * @type {number}
	   * @readonly
	   */
	  get createdTimestamp() {
	    return DiscordSnowflake.timestampFrom(this.id);
	  }

	  /**
	   * The time the sticker was created at
	   * @type {Date}
	   * @readonly
	   */
	  get createdAt() {
	    return new Date(this.createdTimestamp);
	  }

	  /**
	   * The sticker which is shown as the pack's icon
	   * @type {?Sticker}
	   * @readonly
	   */
	  get coverSticker() {
	    return this.coverStickerId && this.stickers.get(this.coverStickerId);
	  }

	  /**
	   * The URL to this sticker pack's banner.
	   * @param {ImageURLOptions} [options={}] Options for the image URL
	   * @returns {?string}
	   */
	  bannerURL(options = {}) {
	    return this.bannerId && this.client.rest.cdn.stickerPackBanner(this.bannerId, options);
	  }
	}

	StickerPack_1 = StickerPack;
	return StickerPack_1;
}

var VoiceRegion_1;
var hasRequiredVoiceRegion;

function requireVoiceRegion () {
	if (hasRequiredVoiceRegion) return VoiceRegion_1;
	hasRequiredVoiceRegion = 1;

	const { flatten } = requireUtil();

	/**
	 * Represents a Discord voice region for guilds.
	 */
	class VoiceRegion {
	  constructor(data) {
	    /**
	     * The region's id
	     * @type {string}
	     */
	    this.id = data.id;

	    /**
	     * Name of the region
	     * @type {string}
	     */
	    this.name = data.name;

	    /**
	     * Whether the region is deprecated
	     * @type {boolean}
	     */
	    this.deprecated = data.deprecated;

	    /**
	     * Whether the region is optimal
	     * @type {boolean}
	     */
	    this.optimal = data.optimal;

	    /**
	     * Whether the region is custom
	     * @type {boolean}
	     */
	    this.custom = data.custom;
	  }

	  toJSON() {
	    return flatten(this);
	  }
	}

	VoiceRegion_1 = VoiceRegion;
	return VoiceRegion_1;
}

var WidgetMember_1;
var hasRequiredWidgetMember;

function requireWidgetMember () {
	if (hasRequiredWidgetMember) return WidgetMember_1;
	hasRequiredWidgetMember = 1;

	const Base = requireBase$2();

	/**
	 * Represents a WidgetMember.
	 * @extends {Base}
	 */
	class WidgetMember extends Base {
	  /**
	   * Activity sent in a {@link WidgetMember}.
	   * @typedef {Object} WidgetActivity
	   * @property {string} name The name of the activity
	   */

	  constructor(client, data) {
	    super(client);

	    /**
	     * The id of the user. It's an arbitrary number.
	     * @type {string}
	     */
	    this.id = data.id;

	    /**
	     * The username of the member.
	     * @type {string}
	     */
	    this.username = data.username;

	    /**
	     * The discriminator of the member.
	     * @type {string}
	     */
	    this.discriminator = data.discriminator;

	    /**
	     * The avatar of the member.
	     * @type {?string}
	     */
	    this.avatar = data.avatar;

	    /**
	     * The status of the member.
	     * @type {PresenceStatus}
	     */
	    this.status = data.status;

	    /**
	     * If the member is server deafened
	     * @type {?boolean}
	     */
	    this.deaf = data.deaf ?? null;

	    /**
	     * If the member is server muted
	     * @type {?boolean}
	     */
	    this.mute = data.mute ?? null;

	    /**
	     * If the member is self deafened
	     * @type {?boolean}
	     */
	    this.selfDeaf = data.self_deaf ?? null;

	    /**
	     * If the member is self muted
	     * @type {?boolean}
	     */
	    this.selfMute = data.self_mute ?? null;

	    /**
	     * If the member is suppressed
	     * @type {?boolean}
	     */
	    this.suppress = data.suppress ?? null;

	    /**
	     * The id of the voice channel the member is in, if any
	     * @type {?Snowflake}
	     */
	    this.channelId = data.channel_id ?? null;

	    /**
	     * The avatar URL of the member.
	     * @type {string}
	     */
	    this.avatarURL = data.avatar_url;

	    /**
	     * The activity of the member.
	     * @type {?WidgetActivity}
	     */
	    this.activity = data.activity ?? null;
	  }
	}

	WidgetMember_1 = WidgetMember;
	return WidgetMember_1;
}

var Widget_1;
var hasRequiredWidget;

function requireWidget () {
	if (hasRequiredWidget) return Widget_1;
	hasRequiredWidget = 1;

	const { Collection } = requireDist$3();
	const { Routes } = requireV10$6();
	const Base = requireBase$2();
	const WidgetMember = requireWidgetMember();

	/**
	 * Represents a Widget.
	 * @extends {Base}
	 */
	class Widget extends Base {
	  constructor(client, data) {
	    super(client);
	    this._patch(data);
	  }

	  /**
	   * Represents a channel in a Widget
	   * @typedef {Object} WidgetChannel
	   * @property {Snowflake} id Id of the channel
	   * @property {string} name Name of the channel
	   * @property {number} position Position of the channel
	   */

	  _patch(data) {
	    /**
	     * The id of the guild.
	     * @type {Snowflake}
	     */
	    this.id = data.id;

	    if ('name' in data) {
	      /**
	       * The name of the guild.
	       * @type {string}
	       */
	      this.name = data.name;
	    }

	    if ('instant_invite' in data) {
	      /**
	       * The invite of the guild.
	       * @type {?string}
	       */
	      this.instantInvite = data.instant_invite;
	    }

	    /**
	     * The list of channels in the guild.
	     * @type {Collection<Snowflake, WidgetChannel>}
	     */
	    this.channels = new Collection();
	    for (const channel of data.channels) {
	      this.channels.set(channel.id, channel);
	    }

	    /**
	     * The list of members in the guild.
	     * These strings are just arbitrary numbers, they aren't Snowflakes.
	     * @type {Collection<string, WidgetMember>}
	     */
	    this.members = new Collection();
	    for (const member of data.members) {
	      this.members.set(member.id, new WidgetMember(this.client, member));
	    }

	    if ('presence_count' in data) {
	      /**
	       * The number of members online.
	       * @type {number}
	       */
	      this.presenceCount = data.presence_count;
	    }
	  }

	  /**
	   * Update the Widget.
	   * @returns {Promise<Widget>}
	   */
	  async fetch() {
	    const data = await this.client.rest.get(Routes.guildWidgetJSON(this.id));
	    this._patch(data);
	    return this;
	  }

	  /**
	   * Returns a URL for the PNG widget of the guild.
	   * @param {GuildWidgetStyle} [style] The style for the widget image
	   * @returns {string}
	   */
	  imageURL(style) {
	    return this.client.guilds.widgetImageURL(this.id, style);
	  }
	}

	Widget_1 = Widget;
	return Widget_1;
}

var IntentsBitField_1;
var hasRequiredIntentsBitField;

function requireIntentsBitField () {
	if (hasRequiredIntentsBitField) return IntentsBitField_1;
	hasRequiredIntentsBitField = 1;
	const { GatewayIntentBits } = requireV10$6();
	const BitField = requireBitField();

	/**
	 * Data structure that makes it easy to calculate intents.
	 * @extends {BitField}
	 */
	class IntentsBitField extends BitField {
	  /**
	   * Numeric WebSocket intents
	   * @type {GatewayIntentBits}
	   * @memberof IntentsBitField
	   */
	  static Flags = GatewayIntentBits;
	}

	/**
	 * @name IntentsBitField
	 * @kind constructor
	 * @memberof IntentsBitField
	 * @param {IntentsResolvable} [bits=0] Bit(s) to read from
	 */

	/**
	 * Data that can be resolved to give a permission number. This can be:
	 * * A string (see {@link IntentsBitField.Flags})
	 * * An intents flag
	 * * An instance of {@link IntentsBitField}
	 * * An array of IntentsResolvable
	 * @typedef {string|number|IntentsBitField|IntentsResolvable[]} IntentsResolvable
	 */

	IntentsBitField_1 = IntentsBitField;
	return IntentsBitField_1;
}

var Sweepers_1;
var hasRequiredSweepers;

function requireSweepers () {
	if (hasRequiredSweepers) return Sweepers_1;
	hasRequiredSweepers = 1;

	const { setInterval, clearInterval } = require$$0$e;
	const { ThreadChannelTypes, SweeperKeys } = requireConstants$1();
	const Events = requireEvents();
	const { DiscordjsTypeError, ErrorCodes } = requireErrors$1();

	/**
	 * @typedef {Function} GlobalSweepFilter
	 * @returns {?Function} Return `null` to skip sweeping, otherwise a function passed to `sweep()`,
	 * See {@link https://discord.js.org/docs/packages/collection/stable/Collection:Class#sweep Collection#sweep}
	 * for the definition of this function.
	 */

	/**
	 * A container for all cache sweeping intervals and their associated sweep methods.
	 */
	class Sweepers {
	  constructor(client, options) {
	    /**
	     * The client that instantiated this
	     * @type {Client}
	     * @readonly
	     */
	    Object.defineProperty(this, 'client', { value: client });

	    /**
	     * The options the sweepers were instantiated with
	     * @type {SweeperOptions}
	     */
	    this.options = options;

	    /**
	     * A record of interval timeout that is used to sweep the indicated items, or null if not being swept
	     * @type {Object<SweeperKey, ?Timeout>}
	     */
	    this.intervals = Object.fromEntries(SweeperKeys.map(key => [key, null]));

	    for (const key of SweeperKeys) {
	      if (!(key in options)) continue;

	      this._validateProperties(key);

	      const clonedOptions = { ...this.options[key] };

	      // Handle cases that have a "lifetime"
	      if (!('filter' in clonedOptions)) {
	        switch (key) {
	          case 'invites':
	            clonedOptions.filter = this.constructor.expiredInviteSweepFilter(clonedOptions.lifetime);
	            break;
	          case 'messages':
	            clonedOptions.filter = this.constructor.outdatedMessageSweepFilter(clonedOptions.lifetime);
	            break;
	          case 'threads':
	            clonedOptions.filter = this.constructor.archivedThreadSweepFilter(clonedOptions.lifetime);
	        }
	      }

	      this._initInterval(key, `sweep${key[0].toUpperCase()}${key.slice(1)}`, clonedOptions);
	    }
	  }

	  /**
	   * Sweeps all guild and global application commands and removes the ones which are indicated by the filter.
	   * @param {Function} filter The function used to determine which commands will be removed from the caches.
	   * @returns {number} Amount of commands that were removed from the caches
	   */
	  sweepApplicationCommands(filter) {
	    const { guilds, items: guildCommands } = this._sweepGuildDirectProp('commands', filter, { emit: false });

	    const globalCommands = this.client.application?.commands.cache.sweep(filter) ?? 0;

	    this.client.emit(
	      Events.CacheSweep,
	      `Swept ${globalCommands} global application commands and ${guildCommands} guild commands in ${guilds} guilds.`,
	    );
	    return guildCommands + globalCommands;
	  }

	  /**
	   * Sweeps all auto moderation rules and removes the ones which are indicated by the filter.
	   * @param {Function} filter The function used to determine
	   * which auto moderation rules will be removed from the caches
	   * @returns {number} Amount of auto moderation rules that were removed from the caches
	   */
	  sweepAutoModerationRules(filter) {
	    return this._sweepGuildDirectProp('autoModerationRules', filter).items;
	  }

	  /**
	   * Sweeps all guild bans and removes the ones which are indicated by the filter.
	   * @param {Function} filter The function used to determine which bans will be removed from the caches.
	   * @returns {number} Amount of bans that were removed from the caches
	   */
	  sweepBans(filter) {
	    return this._sweepGuildDirectProp('bans', filter).items;
	  }

	  /**
	   * Sweeps all guild emojis and removes the ones which are indicated by the filter.
	   * @param {Function} filter The function used to determine which emojis will be removed from the caches.
	   * @returns {number} Amount of emojis that were removed from the caches
	   */
	  sweepEmojis(filter) {
	    return this._sweepGuildDirectProp('emojis', filter).items;
	  }

	  /**
	   * Sweeps all client application entitlements and removes the ones which are indicated by the filter.
	   * @param {Function} filter The function used to determine which entitlements will be removed from the caches.
	   * @returns {number} Amount of entitlements that were removed from the caches
	   */
	  sweepEntitlements(filter) {
	    if (typeof filter !== 'function') {
	      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'filter', 'function');
	    }

	    const entitlements = this.client.application.entitlements.cache.sweep(filter);

	    this.client.emit(Events.CacheSweep, `Swept ${entitlements} entitlements.`);

	    return entitlements;
	  }

	  /**
	   * Sweeps all guild invites and removes the ones which are indicated by the filter.
	   * @param {Function} filter The function used to determine which invites will be removed from the caches.
	   * @returns {number} Amount of invites that were removed from the caches
	   */
	  sweepInvites(filter) {
	    return this._sweepGuildDirectProp('invites', filter).items;
	  }

	  /**
	   * Sweeps all guild members and removes the ones which are indicated by the filter.
	   * <info>It is highly recommended to keep the client guild member cached</info>
	   * @param {Function} filter The function used to determine which guild members will be removed from the caches.
	   * @returns {number} Amount of guild members that were removed from the caches
	   */
	  sweepGuildMembers(filter) {
	    return this._sweepGuildDirectProp('members', filter, { outputName: 'guild members' }).items;
	  }

	  /**
	   * Sweeps all text-based channels' messages and removes the ones which are indicated by the filter.
	   * @param {Function} filter The function used to determine which messages will be removed from the caches.
	   * @returns {number} Amount of messages that were removed from the caches
	   * @example
	   * // Remove all messages older than 1800 seconds from the messages cache
	   * const amount = sweepers.sweepMessages(
	   *   Sweepers.filterByLifetime({
	   *     lifetime: 1800,
	   *     getComparisonTimestamp: m => m.editedTimestamp ?? m.createdTimestamp,
	   *   })(),
	   * );
	   * console.log(`Successfully removed ${amount} messages from the cache.`);
	   */
	  sweepMessages(filter) {
	    if (typeof filter !== 'function') {
	      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'filter', 'function');
	    }
	    let channels = 0;
	    let messages = 0;

	    for (const channel of this.client.channels.cache.values()) {
	      if (!channel.isTextBased()) continue;

	      channels++;
	      messages += channel.messages.cache.sweep(filter);
	    }
	    this.client.emit(Events.CacheSweep, `Swept ${messages} messages in ${channels} text-based channels.`);
	    return messages;
	  }

	  /**
	   * Sweeps all presences and removes the ones which are indicated by the filter.
	   * @param {Function} filter The function used to determine which presences will be removed from the caches.
	   * @returns {number} Amount of presences that were removed from the caches
	   */
	  sweepPresences(filter) {
	    return this._sweepGuildDirectProp('presences', filter).items;
	  }

	  /**
	   * Sweeps all message reactions and removes the ones which are indicated by the filter.
	   * @param {Function} filter The function used to determine which reactions will be removed from the caches.
	   * @returns {number} Amount of reactions that were removed from the caches
	   */
	  sweepReactions(filter) {
	    if (typeof filter !== 'function') {
	      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'filter', 'function');
	    }
	    let channels = 0;
	    let messages = 0;
	    let reactions = 0;

	    for (const channel of this.client.channels.cache.values()) {
	      if (!channel.isTextBased()) continue;
	      channels++;

	      for (const message of channel.messages.cache.values()) {
	        messages++;
	        reactions += message.reactions.cache.sweep(filter);
	      }
	    }
	    this.client.emit(
	      Events.CacheSweep,
	      `Swept ${reactions} reactions on ${messages} messages in ${channels} text-based channels.`,
	    );
	    return reactions;
	  }

	  /**
	   * Sweeps all guild stage instances and removes the ones which are indicated by the filter.
	   * @param {Function} filter The function used to determine which stage instances will be removed from the caches.
	   * @returns {number} Amount of stage instances that were removed from the caches
	   */
	  sweepStageInstances(filter) {
	    return this._sweepGuildDirectProp('stageInstances', filter, { outputName: 'stage instances' }).items;
	  }

	  /**
	   * Sweeps all guild stickers and removes the ones which are indicated by the filter.
	   * @param {Function} filter The function used to determine which stickers will be removed from the caches.
	   * @returns {number} Amount of stickers that were removed from the caches
	   */
	  sweepStickers(filter) {
	    return this._sweepGuildDirectProp('stickers', filter).items;
	  }

	  /**
	   * Sweeps all thread members and removes the ones which are indicated by the filter.
	   * <info>It is highly recommended to keep the client thread member cached</info>
	   * @param {Function} filter The function used to determine which thread members will be removed from the caches.
	   * @returns {number} Amount of thread members that were removed from the caches
	   */
	  sweepThreadMembers(filter) {
	    if (typeof filter !== 'function') {
	      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'filter', 'function');
	    }

	    let threads = 0;
	    let members = 0;
	    for (const channel of this.client.channels.cache.values()) {
	      if (!ThreadChannelTypes.includes(channel.type)) continue;
	      threads++;
	      members += channel.members.cache.sweep(filter);
	    }
	    this.client.emit(Events.CacheSweep, `Swept ${members} thread members in ${threads} threads.`);
	    return members;
	  }

	  /**
	   * Sweeps all threads and removes the ones which are indicated by the filter.
	   * @param {Function} filter The function used to determine which threads will be removed from the caches.
	   * @returns {number} filter Amount of threads that were removed from the caches
	   * @example
	   * // Remove all threads archived greater than 1 day ago from all the channel caches
	   * const amount = sweepers.sweepThreads(
	   *   Sweepers.filterByLifetime({
	   *     getComparisonTimestamp: t => t.archivedTimestamp,
	   *     excludeFromSweep: t => !t.archived,
	   *   })(),
	   * );
	   * console.log(`Successfully removed ${amount} threads from the cache.`);
	   */
	  sweepThreads(filter) {
	    if (typeof filter !== 'function') {
	      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'filter', 'function');
	    }

	    let threads = 0;
	    for (const [key, val] of this.client.channels.cache.entries()) {
	      if (!ThreadChannelTypes.includes(val.type)) continue;
	      if (filter(val, key, this.client.channels.cache)) {
	        threads++;
	        this.client.channels._remove(key);
	      }
	    }
	    this.client.emit(Events.CacheSweep, `Swept ${threads} threads.`);
	    return threads;
	  }

	  /**
	   * Sweeps all users and removes the ones which are indicated by the filter.
	   * @param {Function} filter The function used to determine which users will be removed from the caches.
	   * @returns {number} Amount of users that were removed from the caches
	   */
	  sweepUsers(filter) {
	    if (typeof filter !== 'function') {
	      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'filter', 'function');
	    }

	    const users = this.client.users.cache.sweep(filter);

	    this.client.emit(Events.CacheSweep, `Swept ${users} users.`);

	    return users;
	  }

	  /**
	   * Sweeps all guild voice states and removes the ones which are indicated by the filter.
	   * @param {Function} filter The function used to determine which voice states will be removed from the caches.
	   * @returns {number} Amount of voice states that were removed from the caches
	   */
	  sweepVoiceStates(filter) {
	    return this._sweepGuildDirectProp('voiceStates', filter, { outputName: 'voice states' }).items;
	  }

	  /**
	   * Cancels all sweeping intervals
	   * @returns {void}
	   */
	  destroy() {
	    for (const key of SweeperKeys) {
	      if (this.intervals[key]) clearInterval(this.intervals[key]);
	    }
	  }

	  /**
	   * Options for generating a filter function based on lifetime
	   * @typedef {Object} LifetimeFilterOptions
	   * @property {number} [lifetime=14400] How long, in seconds, an entry should stay in the collection
	   * before it is considered sweepable.
	   * @property {Function} [getComparisonTimestamp=e => e?.createdTimestamp] A function that takes an entry, key,
	   * and the collection and returns a timestamp to compare against in order to determine the lifetime of the entry.
	   * @property {Function} [excludeFromSweep=() => false] A function that takes an entry, key, and the collection
	   * and returns a boolean, `true` when the entry should not be checked for sweepability.
	   */

	  /**
	   * Create a sweepFilter function that uses a lifetime to determine sweepability.
	   * @param {LifetimeFilterOptions} [options={}] The options used to generate the filter function
	   * @returns {GlobalSweepFilter}
	   */
	  static filterByLifetime({
	    lifetime = 14400,
	    getComparisonTimestamp = e => e?.createdTimestamp,
	    excludeFromSweep = () => false,
	  } = {}) {
	    if (typeof lifetime !== 'number') {
	      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'lifetime', 'number');
	    }
	    if (typeof getComparisonTimestamp !== 'function') {
	      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'getComparisonTimestamp', 'function');
	    }
	    if (typeof excludeFromSweep !== 'function') {
	      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'excludeFromSweep', 'function');
	    }
	    return () => {
	      if (lifetime <= 0) return null;
	      const lifetimeMs = lifetime * 1_000;
	      const now = Date.now();
	      return (entry, key, coll) => {
	        if (excludeFromSweep(entry, key, coll)) {
	          return false;
	        }
	        const comparisonTimestamp = getComparisonTimestamp(entry, key, coll);
	        if (!comparisonTimestamp || typeof comparisonTimestamp !== 'number') return false;
	        return now - comparisonTimestamp > lifetimeMs;
	      };
	    };
	  }

	  /**
	   * Creates a sweep filter that sweeps archived threads
	   * @param {number} [lifetime=14400] How long a thread has to be archived to be valid for sweeping
	   * @returns {GlobalSweepFilter}
	   */
	  static archivedThreadSweepFilter(lifetime = 14400) {
	    return this.filterByLifetime({
	      lifetime,
	      getComparisonTimestamp: e => e.archiveTimestamp,
	      excludeFromSweep: e => !e.archived,
	    });
	  }

	  /**
	   * Creates a sweep filter that sweeps expired invites
	   * @param {number} [lifetime=14400] How long ago an invite has to have expired to be valid for sweeping
	   * @returns {GlobalSweepFilter}
	   */
	  static expiredInviteSweepFilter(lifetime = 14400) {
	    return this.filterByLifetime({
	      lifetime,
	      getComparisonTimestamp: i => i.expiresTimestamp,
	    });
	  }

	  /**
	   * Creates a sweep filter that sweeps outdated messages (edits taken into account)
	   * @param {number} [lifetime=3600] How long ago a message has to have been sent or edited to be valid for sweeping
	   * @returns {GlobalSweepFilter}
	   */
	  static outdatedMessageSweepFilter(lifetime = 3600) {
	    return this.filterByLifetime({
	      lifetime,
	      getComparisonTimestamp: m => m.editedTimestamp ?? m.createdTimestamp,
	    });
	  }

	  /**
	   * Configuration options for emitting the cache sweep client event
	   * @typedef {Object} SweepEventOptions
	   * @property {boolean} [emit=true] Whether to emit the client event in this method
	   * @property {string} [outputName] A name to output in the client event if it should differ from the key
	   * @private
	   */

	  /**
	   * Sweep a direct sub property of all guilds
	   * @param {string} key The name of the property
	   * @param {Function} filter Filter function passed to sweep
	   * @param {SweepEventOptions} [eventOptions={}] Options for the Client event emitted here
	   * @returns {Object} Object containing the number of guilds swept and the number of items swept
	   * @private
	   */
	  _sweepGuildDirectProp(key, filter, { emit = true, outputName } = {}) {
	    if (typeof filter !== 'function') {
	      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'filter', 'function');
	    }

	    let guilds = 0;
	    let items = 0;

	    for (const guild of this.client.guilds.cache.values()) {
	      // We may be unable to sweep the cache if the guild is unavailable and was never patched
	      if (!guild.available) continue;

	      const { cache } = guild[key];

	      guilds++;
	      items += cache.sweep(filter);
	    }

	    if (emit) {
	      this.client.emit(Events.CacheSweep, `Swept ${items} ${outputName ?? key} in ${guilds} guilds.`);
	    }

	    return { guilds, items };
	  }

	  /**
	   * Validates a set of properties
	   * @param {string} key Key of the options object to check
	   * @private
	   */
	  _validateProperties(key) {
	    const props = this.options[key];
	    if (typeof props !== 'object') {
	      throw new DiscordjsTypeError(ErrorCodes.InvalidType, `sweepers.${key}`, 'object', true);
	    }
	    if (typeof props.interval !== 'number') {
	      throw new DiscordjsTypeError(ErrorCodes.InvalidType, `sweepers.${key}.interval`, 'number');
	    }
	    // Invites, Messages, and Threads can be provided a lifetime parameter, which we use to generate the filter
	    if (['invites', 'messages', 'threads'].includes(key) && !('filter' in props)) {
	      if (typeof props.lifetime !== 'number') {
	        throw new DiscordjsTypeError(ErrorCodes.InvalidType, `sweepers.${key}.lifetime`, 'number');
	      }
	      return;
	    }
	    if (typeof props.filter !== 'function') {
	      throw new DiscordjsTypeError(ErrorCodes.InvalidType, `sweepers.${key}.filter`, 'function');
	    }
	  }

	  /**
	   * Initialize an interval for sweeping
	   * @param {string} intervalKey The name of the property that stores the interval for this sweeper
	   * @param {string} sweepKey The name of the function that sweeps the desired caches
	   * @param {Object} opts Validated options for a sweep
	   * @private
	   */
	  _initInterval(intervalKey, sweepKey, opts) {
	    if (opts.interval <= 0 || opts.interval === Infinity) return;
	    this.intervals[intervalKey] = setInterval(() => {
	      const sweepFn = opts.filter();
	      if (sweepFn === null) return;
	      if (typeof sweepFn !== 'function') throw new DiscordjsTypeError(ErrorCodes.SweepFilterReturn);
	      this[sweepKey](sweepFn);
	    }, opts.interval * 1_000).unref();
	  }
	}

	Sweepers_1 = Sweepers;
	return Sweepers_1;
}

var Client_1;
var hasRequiredClient;

function requireClient () {
	if (hasRequiredClient) return Client_1;
	hasRequiredClient = 1;

	const process = require$$0$d;
	const { Collection } = requireDist$3();
	const { makeURLSearchParams } = requireWeb();
	const { OAuth2Scopes, Routes } = requireV10$6();
	const BaseClient = requireBaseClient();
	const ActionsManager = requireActionsManager();
	const ClientVoiceManager = requireClientVoiceManager();
	const WebSocketManager = requireWebSocketManager();
	const { DiscordjsError, DiscordjsTypeError, DiscordjsRangeError, ErrorCodes } = requireErrors$1();
	const BaseGuildEmojiManager = requireBaseGuildEmojiManager();
	const ChannelManager = requireChannelManager();
	const GuildManager = requireGuildManager();
	const UserManager = requireUserManager();
	const ShardClientUtil = requireShardClientUtil();
	const ClientPresence = requireClientPresence();
	const GuildPreview = requireGuildPreview();
	const GuildTemplate = requireGuildTemplate();
	const Invite = requireInvite$2();
	const { Sticker } = requireSticker$2();
	const StickerPack = requireStickerPack();
	const VoiceRegion = requireVoiceRegion();
	const Webhook = requireWebhook$2();
	const Widget = requireWidget();
	const { resolveInviteCode, resolveGuildTemplateCode } = requireDataResolver();
	const Events = requireEvents();
	const IntentsBitField = requireIntentsBitField();
	const Options = requireOptions();
	const PermissionsBitField = requirePermissionsBitField();
	const Status = requireStatus();
	const Sweepers = requireSweepers();

	let deprecationEmittedForPremiumStickerPacks = false;

	/**
	 * The main hub for interacting with the Discord API, and the starting point for any bot.
	 * @extends {BaseClient}
	 */
	class Client extends BaseClient {
	  /**
	   * @param {ClientOptions} options Options for the client
	   */
	  constructor(options) {
	    super(options);

	    const data = require$$5$6.workerData ?? process.env;
	    const defaults = Options.createDefault();

	    if (this.options.shards === defaults.shards) {
	      if ('SHARDS' in data) {
	        this.options.shards = JSON.parse(data.SHARDS);
	      }
	    }

	    if (this.options.shardCount === defaults.shardCount) {
	      if ('SHARD_COUNT' in data) {
	        this.options.shardCount = Number(data.SHARD_COUNT);
	      } else if (Array.isArray(this.options.shards)) {
	        this.options.shardCount = this.options.shards.length;
	      }
	    }

	    const typeofShards = typeof this.options.shards;

	    if (typeofShards === 'undefined' && typeof this.options.shardCount === 'number') {
	      this.options.shards = Array.from({ length: this.options.shardCount }, (_, i) => i);
	    }

	    if (typeofShards === 'number') this.options.shards = [this.options.shards];

	    if (Array.isArray(this.options.shards)) {
	      this.options.shards = [
	        ...new Set(
	          this.options.shards.filter(item => !isNaN(item) && item >= 0 && item < Infinity && item === (item | 0)),
	        ),
	      ];
	    }

	    this._validateOptions();

	    /**
	     * The WebSocket manager of the client
	     * @type {WebSocketManager}
	     */
	    this.ws = new WebSocketManager(this);

	    /**
	     * The action manager of the client
	     * @type {ActionsManager}
	     * @private
	     */
	    this.actions = new ActionsManager(this);

	    /**
	     * The voice manager of the client
	     * @type {ClientVoiceManager}
	     */
	    this.voice = new ClientVoiceManager(this);

	    /**
	     * Shard helpers for the client (only if the process was spawned from a {@link ShardingManager})
	     * @type {?ShardClientUtil}
	     */
	    this.shard = process.env.SHARDING_MANAGER
	      ? ShardClientUtil.singleton(this, process.env.SHARDING_MANAGER_MODE)
	      : null;

	    /**
	     * All of the {@link User} objects that have been cached at any point, mapped by their ids
	     * @type {UserManager}
	     */
	    this.users = new UserManager(this);

	    /**
	     * All of the guilds the client is currently handling, mapped by their ids -
	     * as long as sharding isn't being used, this will be *every* guild the bot is a member of
	     * @type {GuildManager}
	     */
	    this.guilds = new GuildManager(this);

	    /**
	     * All of the {@link BaseChannel}s that the client is currently handling, mapped by their ids -
	     * as long as sharding isn't being used, this will be *every* channel in *every* guild the bot
	     * is a member of. Note that DM channels will not be initially cached, and thus not be present
	     * in the Manager without their explicit fetching or use.
	     * @type {ChannelManager}
	     */
	    this.channels = new ChannelManager(this);

	    /**
	     * The sweeping functions and their intervals used to periodically sweep caches
	     * @type {Sweepers}
	     */
	    this.sweepers = new Sweepers(this, this.options.sweepers);

	    /**
	     * The presence of the Client
	     * @private
	     * @type {ClientPresence}
	     */
	    this.presence = new ClientPresence(this, this.options.presence);

	    Object.defineProperty(this, 'token', { writable: true });
	    if (!this.token && 'DISCORD_TOKEN' in process.env) {
	      /**
	       * Authorization token for the logged in bot.
	       * If present, this defaults to `process.env.DISCORD_TOKEN` when instantiating the client
	       * <warn>This should be kept private at all times.</warn>
	       * @type {?string}
	       */
	      this.token = process.env.DISCORD_TOKEN;
	    } else {
	      this.token = null;
	    }

	    /**
	     * User that the client is logged in as
	     * @type {?ClientUser}
	     */
	    this.user = null;

	    /**
	     * The application of this bot
	     * @type {?ClientApplication}
	     */
	    this.application = null;

	    /**
	     * Timestamp of the time the client was last {@link Status.Ready} at
	     * @type {?number}
	     */
	    this.readyTimestamp = null;
	  }

	  /**
	   * All custom emojis that the client has access to, mapped by their ids
	   * @type {BaseGuildEmojiManager}
	   * @readonly
	   */
	  get emojis() {
	    const emojis = new BaseGuildEmojiManager(this);
	    for (const guild of this.guilds.cache.values()) {
	      if (guild.available) for (const emoji of guild.emojis.cache.values()) emojis.cache.set(emoji.id, emoji);
	    }
	    return emojis;
	  }

	  /**
	   * Time at which the client was last regarded as being in the {@link Status.Ready} state
	   * (each time the client disconnects and successfully reconnects, this will be overwritten)
	   * @type {?Date}
	   * @readonly
	   */
	  get readyAt() {
	    return this.readyTimestamp && new Date(this.readyTimestamp);
	  }

	  /**
	   * How long it has been since the client last entered the {@link Status.Ready} state in milliseconds
	   * @type {?number}
	   * @readonly
	   */
	  get uptime() {
	    return this.readyTimestamp && Date.now() - this.readyTimestamp;
	  }

	  /**
	   * Logs the client in, establishing a WebSocket connection to Discord.
	   * @param {string} [token=this.token] Token of the account to log in with
	   * @returns {Promise<string>} Token of the account used
	   * @example
	   * client.login('my token');
	   */
	  async login(token = this.token) {
	    if (!token || typeof token !== 'string') throw new DiscordjsError(ErrorCodes.TokenInvalid);
	    this.token = token = token.replace(/^(Bot|Bearer)\s*/i, '');
	    this.rest.setToken(token);
	    this.emit(Events.Debug, `Provided token: ${this._censoredToken}`);

	    if (this.options.presence) {
	      this.options.ws.presence = this.presence._parse(this.options.presence);
	    }

	    this.emit(Events.Debug, 'Preparing to connect to the gateway...');

	    try {
	      await this.ws.connect();
	      return this.token;
	    } catch (error) {
	      await this.destroy();
	      throw error;
	    }
	  }

	  /**
	   * Returns whether the client has logged in, indicative of being able to access
	   * properties such as `user` and `application`.
	   * @returns {boolean}
	   */
	  isReady() {
	    return !this.ws.destroyed && this.ws.status === Status.Ready;
	  }

	  /**
	   * Logs out, terminates the connection to Discord, and destroys the client.
	   * @returns {Promise<void>}
	   */
	  async destroy() {
	    super.destroy();

	    this.sweepers.destroy();
	    await this.ws.destroy();
	    this.token = null;
	    this.rest.setToken(null);
	  }

	  /**
	   * Options used when fetching an invite from Discord.
	   * @typedef {Object} ClientFetchInviteOptions
	   * @property {Snowflake} [guildScheduledEventId] The id of the guild scheduled event to include with
	   * the invite
	   */

	  /**
	   * Obtains an invite from Discord.
	   * @param {InviteResolvable} invite Invite code or URL
	   * @param {ClientFetchInviteOptions} [options] Options for fetching the invite
	   * @returns {Promise<Invite>}
	   * @example
	   * client.fetchInvite('https://discord.gg/djs')
	   *   .then(invite => console.log(`Obtained invite with code: ${invite.code}`))
	   *   .catch(console.error);
	   */
	  async fetchInvite(invite, options) {
	    const code = resolveInviteCode(invite);
	    const query = makeURLSearchParams({
	      with_counts: true,
	      with_expiration: true,
	      guild_scheduled_event_id: options?.guildScheduledEventId,
	    });
	    const data = await this.rest.get(Routes.invite(code), { query });
	    return new Invite(this, data);
	  }

	  /**
	   * Obtains a template from Discord.
	   * @param {GuildTemplateResolvable} template Template code or URL
	   * @returns {Promise<GuildTemplate>}
	   * @example
	   * client.fetchGuildTemplate('https://discord.new/FKvmczH2HyUf')
	   *   .then(template => console.log(`Obtained template with code: ${template.code}`))
	   *   .catch(console.error);
	   */
	  async fetchGuildTemplate(template) {
	    const code = resolveGuildTemplateCode(template);
	    const data = await this.rest.get(Routes.template(code));
	    return new GuildTemplate(this, data);
	  }

	  /**
	   * Obtains a webhook from Discord.
	   * @param {Snowflake} id The webhook's id
	   * @param {string} [token] Token for the webhook
	   * @returns {Promise<Webhook>}
	   * @example
	   * client.fetchWebhook('id', 'token')
	   *   .then(webhook => console.log(`Obtained webhook with name: ${webhook.name}`))
	   *   .catch(console.error);
	   */
	  async fetchWebhook(id, token) {
	    const data = await this.rest.get(Routes.webhook(id, token), { auth: token === undefined });
	    return new Webhook(this, { token, ...data });
	  }

	  /**
	   * Obtains the available voice regions from Discord.
	   * @returns {Promise<Collection<string, VoiceRegion>>}
	   * @example
	   * client.fetchVoiceRegions()
	   *   .then(regions => console.log(`Available regions are: ${regions.map(region => region.name).join(', ')}`))
	   *   .catch(console.error);
	   */
	  async fetchVoiceRegions() {
	    const apiRegions = await this.rest.get(Routes.voiceRegions());
	    const regions = new Collection();
	    for (const region of apiRegions) regions.set(region.id, new VoiceRegion(region));
	    return regions;
	  }

	  /**
	   * Obtains a sticker from Discord.
	   * @param {Snowflake} id The sticker's id
	   * @returns {Promise<Sticker>}
	   * @example
	   * client.fetchSticker('id')
	   *   .then(sticker => console.log(`Obtained sticker with name: ${sticker.name}`))
	   *   .catch(console.error);
	   */
	  async fetchSticker(id) {
	    const data = await this.rest.get(Routes.sticker(id));
	    return new Sticker(this, data);
	  }

	  /**
	   * Options for fetching sticker packs.
	   * @typedef {Object} StickerPackFetchOptions
	   * @property {Snowflake} [packId] The id of the sticker pack to fetch
	   */

	  /**
	   * Obtains the list of available sticker packs.
	   * @param {StickerPackFetchOptions} [options={}] Options for fetching sticker packs
	   * @returns {Promise<Collection<Snowflake, StickerPack>|StickerPack>}
	   * A collection of sticker packs, or a single sticker pack if a packId was provided
	   * @example
	   * client.fetchStickerPacks()
	   *   .then(packs => console.log(`Available sticker packs are: ${packs.map(pack => pack.name).join(', ')}`))
	   *   .catch(console.error);
	   * @example
	   * client.fetchStickerPacks({ packId: '751604115435421716' })
	   *   .then(pack => console.log(`Sticker pack name: ${pack.name}`))
	   *   .catch(console.error);
	   */
	  async fetchStickerPacks({ packId } = {}) {
	    if (packId) {
	      const data = await this.rest.get(Routes.stickerPack(packId));
	      return new StickerPack(this, data);
	    }

	    const data = await this.rest.get(Routes.stickerPacks());
	    return new Collection(data.sticker_packs.map(stickerPack => [stickerPack.id, new StickerPack(this, stickerPack)]));
	  }

	  /**
	   * Obtains the list of available sticker packs.
	   * @returns {Promise<Collection<Snowflake, StickerPack>>}
	   * @deprecated Use {@link Client#fetchStickerPacks} instead.
	   */
	  fetchPremiumStickerPacks() {
	    if (!deprecationEmittedForPremiumStickerPacks) {
	      process.emitWarning(
	        'The Client#fetchPremiumStickerPacks() method is deprecated. Use Client#fetchStickerPacks() instead.',
	        'DeprecationWarning',
	      );

	      deprecationEmittedForPremiumStickerPacks = true;
	    }

	    return this.fetchStickerPacks();
	  }

	  /**
	   * Obtains a guild preview from Discord, available for all guilds the bot is in and all Discoverable guilds.
	   * @param {GuildResolvable} guild The guild to fetch the preview for
	   * @returns {Promise<GuildPreview>}
	   */
	  async fetchGuildPreview(guild) {
	    const id = this.guilds.resolveId(guild);
	    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'guild', 'GuildResolvable');
	    const data = await this.rest.get(Routes.guildPreview(id));
	    return new GuildPreview(this, data);
	  }

	  /**
	   * Obtains the widget data of a guild from Discord, available for guilds with the widget enabled.
	   * @param {GuildResolvable} guild The guild to fetch the widget data for
	   * @returns {Promise<Widget>}
	   */
	  async fetchGuildWidget(guild) {
	    const id = this.guilds.resolveId(guild);
	    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'guild', 'GuildResolvable');
	    const data = await this.rest.get(Routes.guildWidgetJSON(id));
	    return new Widget(this, data);
	  }

	  /**
	   * Options for {@link Client#generateInvite}.
	   * @typedef {Object} InviteGenerationOptions
	   * @property {OAuth2Scopes[]} scopes Scopes that should be requested
	   * @property {PermissionResolvable} [permissions] Permissions to request
	   * @property {GuildResolvable} [guild] Guild to preselect
	   * @property {boolean} [disableGuildSelect] Whether to disable the guild selection
	   */

	  /**
	   * Generates a link that can be used to invite the bot to a guild.
	   * @param {InviteGenerationOptions} [options={}] Options for the invite
	   * @returns {string}
	   * @example
	   * const link = client.generateInvite({
	   *   scopes: [OAuth2Scopes.ApplicationsCommands],
	   * });
	   * console.log(`Generated application invite link: ${link}`);
	   * @example
	   * const link = client.generateInvite({
	   *   permissions: [
	   *     PermissionFlagsBits.SendMessages,
	   *     PermissionFlagsBits.ManageGuild,
	   *     PermissionFlagsBits.MentionEveryone,
	   *   ],
	   *   scopes: [OAuth2Scopes.Bot],
	   * });
	   * console.log(`Generated bot invite link: ${link}`);
	   */
	  generateInvite(options = {}) {
	    if (typeof options !== 'object') throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'options', 'object', true);
	    if (!this.application) throw new DiscordjsError(ErrorCodes.ClientNotReady, 'generate an invite link');

	    const { scopes } = options;
	    if (scopes === undefined) {
	      throw new DiscordjsTypeError(ErrorCodes.InvalidMissingScopes);
	    }
	    if (!Array.isArray(scopes)) {
	      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'scopes', 'Array of Invite Scopes', true);
	    }
	    if (!scopes.some(scope => [OAuth2Scopes.Bot, OAuth2Scopes.ApplicationsCommands].includes(scope))) {
	      throw new DiscordjsTypeError(ErrorCodes.InvalidMissingScopes);
	    }
	    if (!scopes.includes(OAuth2Scopes.Bot) && options.permissions) {
	      throw new DiscordjsTypeError(ErrorCodes.InvalidScopesWithPermissions);
	    }
	    const validScopes = Object.values(OAuth2Scopes);
	    const invalidScope = scopes.find(scope => !validScopes.includes(scope));
	    if (invalidScope) {
	      throw new DiscordjsTypeError(ErrorCodes.InvalidElement, 'Array', 'scopes', invalidScope);
	    }

	    const query = makeURLSearchParams({
	      client_id: this.application.id,
	      scope: scopes.join(' '),
	      disable_guild_select: options.disableGuildSelect,
	    });

	    if (options.permissions) {
	      const permissions = PermissionsBitField.resolve(options.permissions);
	      if (permissions) query.set('permissions', permissions.toString());
	    }

	    if (options.guild) {
	      const guildId = this.guilds.resolveId(options.guild);
	      if (!guildId) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'options.guild', 'GuildResolvable');
	      query.set('guild_id', guildId);
	    }

	    return `${this.options.rest.api}${Routes.oauth2Authorization()}?${query}`;
	  }

	  toJSON() {
	    return super.toJSON({
	      actions: false,
	      presence: false,
	    });
	  }

	  /**
	   * Partially censored client token for debug logging purposes.
	   * @type {?string}
	   * @readonly
	   * @private
	   */
	  get _censoredToken() {
	    if (!this.token) return null;

	    return this.token
	      .split('.')
	      .map((val, i) => (i > 1 ? val.replace(/./g, '*') : val))
	      .join('.');
	  }

	  /**
	   * Calls {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval} on a script
	   * with the client as `this`.
	   * @param {string} script Script to eval
	   * @returns {*}
	   * @private
	   */
	  _eval(script) {
	    return eval(script);
	  }

	  /**
	   * Validates the client options.
	   * @param {ClientOptions} [options=this.options] Options to validate
	   * @private
	   */
	  _validateOptions(options = this.options) {
	    if (options.intents === undefined) {
	      throw new DiscordjsTypeError(ErrorCodes.ClientMissingIntents);
	    } else {
	      options.intents = new IntentsBitField(options.intents).freeze();
	    }
	    if (typeof options.shardCount !== 'number' || isNaN(options.shardCount) || options.shardCount < 1) {
	      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'shardCount', 'a number greater than or equal to 1');
	    }
	    if (options.shards && !(options.shards === 'auto' || Array.isArray(options.shards))) {
	      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'shards', "'auto', a number or array of numbers");
	    }
	    if (options.shards && !options.shards.length) throw new DiscordjsRangeError(ErrorCodes.ClientInvalidProvidedShards);
	    if (typeof options.makeCache !== 'function') {
	      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'makeCache', 'a function');
	    }
	    if (typeof options.sweepers !== 'object' || options.sweepers === null) {
	      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'sweepers', 'an object');
	    }
	    if (!Array.isArray(options.partials)) {
	      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'partials', 'an Array');
	    }
	    if (typeof options.waitGuildTimeout !== 'number' || isNaN(options.waitGuildTimeout)) {
	      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'waitGuildTimeout', 'a number');
	    }
	    if (typeof options.failIfNotExists !== 'boolean') {
	      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'failIfNotExists', 'a boolean');
	    }
	    if (typeof options.enforceNonce !== 'boolean') {
	      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'enforceNonce', 'a boolean');
	    }
	    if (
	      (typeof options.allowedMentions !== 'object' && options.allowedMentions !== undefined) ||
	      options.allowedMentions === null
	    ) {
	      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'allowedMentions', 'an object');
	    }
	    if (typeof options.presence !== 'object' || options.presence === null) {
	      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'presence', 'an object');
	    }
	    if (typeof options.ws !== 'object' || options.ws === null) {
	      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'ws', 'an object');
	    }
	    if (typeof options.rest !== 'object' || options.rest === null) {
	      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'rest', 'an object');
	    }
	    if (typeof options.jsonTransformer !== 'function') {
	      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'jsonTransformer', 'a function');
	    }
	  }
	}

	Client_1 = Client;

	/**
	 * @class SnowflakeUtil
	 * @classdesc This class is an alias for {@link https://www.npmjs.com/package/@sapphire/snowflake @sapphire/snowflake}'s
	 * `DiscordSnowflake` class.
	 *
	 * Check their documentation
	 * {@link https://www.sapphirejs.dev/docs/Documentation/api-utilities/classes/sapphire_snowflake.Snowflake here}
	 * ({@link https://www.sapphirejs.dev/docs/Guide/utilities/snowflake guide})
	 * to see what you can do.
	 * @hideconstructor
	 */

	/**
	 * A {@link https://developer.twitter.com/en/docs/twitter-ids Twitter snowflake},
	 * except the epoch is 2015-01-01T00:00:00.000Z.
	 *
	 * If we have a snowflake '266241948824764416' we can represent it as binary:
	 * ```
	 * 64                                          22     17     12          0
	 *  000000111011000111100001101001000101000000  00001  00000  000000000000
	 *  number of milliseconds since Discord epoch  worker  pid    increment
	 * ```
	 * @typedef {string} Snowflake
	 */

	/**
	 * Emitted for general debugging information.
	 * @event Client#debug
	 * @param {string} info The debug information
	 */

	/**
	 * Emitted for general warnings.
	 * @event Client#warn
	 * @param {string} info The warning
	 */

	/**
	 * @external Collection
	 * @see {@link https://discord.js.org/docs/packages/collection/stable/Collection:Class}
	 */

	/**
	 * @external ImageURLOptions
	 * @see {@link https://discord.js.org/docs/packages/rest/stable/ImageURLOptions:Interface}
	 */

	/**
	 * @external BaseImageURLOptions
	 * @see {@link https://discord.js.org/docs/packages/rest/stable/BaseImageURLOptions:Interface}
	 */
	return Client_1;
}

var ShardEvents;
var hasRequiredShardEvents;

function requireShardEvents () {
	if (hasRequiredShardEvents) return ShardEvents;
	hasRequiredShardEvents = 1;

	/**
	 * @typedef {Object} ShardEvents
	 * @property {string} Death death
	 * @property {string} Disconnect disconnect
	 * @property {string} Error error
	 * @property {string} Message message
	 * @property {string} Ready ready
	 * @property {string} Reconnecting reconnecting
	 * @property {string} Resume resume
	 * @property {string} Spawn spawn
	 */

	// JSDoc for IntelliSense purposes
	/**
	 * @type {ShardEvents}
	 * @ignore
	 */
	ShardEvents = {
	  Death: 'death',
	  Disconnect: 'disconnect',
	  Error: 'error',
	  Message: 'message',
	  Ready: 'ready',
	  Reconnecting: 'reconnecting',
	  Resume: 'resume',
	  Spawn: 'spawn',
	};
	return ShardEvents;
}

var Shard_1;
var hasRequiredShard;

function requireShard () {
	if (hasRequiredShard) return Shard_1;
	hasRequiredShard = 1;

	const EventEmitter = require$$0$b;
	const path = require$$2$4;
	const process = require$$0$d;
	const { setTimeout, clearTimeout } = require$$0$e;
	const { setTimeout: sleep } = require$$4$7;
	const { SHARE_ENV } = require$$5$6;
	const { DiscordjsError, ErrorCodes } = requireErrors$1();
	const ShardEvents = requireShardEvents();
	const { makeError, makePlainError } = requireUtil();

	let childProcess = null;
	let Worker = null;

	/**
	 * A self-contained shard created by the {@link ShardingManager}. Each one has a {@link ChildProcess} that contains
	 * an instance of the bot and its {@link Client}. When its child process/worker exits for any reason, the shard will
	 * spawn a new one to replace it as necessary.
	 * @extends {EventEmitter}
	 */
	class Shard extends EventEmitter {
	  constructor(manager, id) {
	    super();

	    switch (manager.mode) {
	      case 'process':
	        childProcess = require$$9;
	        break;
	      case 'worker':
	        Worker = require$$5$6.Worker;
	        break;
	    }

	    /**
	     * Manager that created the shard
	     * @type {ShardingManager}
	     */
	    this.manager = manager;

	    /**
	     * The shard's id in the manager
	     * @type {number}
	     */
	    this.id = id;

	    /**
	     * Whether to pass silent flag to the shard's process (only when {@link ShardingManager#mode} is `process`)
	     * @type {boolean}
	     */
	    this.silent = manager.silent;

	    /**
	     * Arguments for the shard's process/worker
	     * @type {string[]}
	     */
	    this.args = manager.shardArgs ?? [];

	    /**
	     * Arguments for the shard's process/worker executable
	     * @type {string[]}
	     */
	    this.execArgv = manager.execArgv;

	    /**
	     * Environment variables for the shard's process, or workerData for the shard's worker
	     * @type {Object}
	     */
	    this.env = Object.assign({}, process.env, {
	      SHARDING_MANAGER: true,
	      SHARDS: this.id,
	      SHARD_COUNT: this.manager.totalShards,
	      DISCORD_TOKEN: this.manager.token,
	    });

	    /**
	     * Whether the shard's {@link Client} is ready
	     * @type {boolean}
	     */
	    this.ready = false;

	    /**
	     * Process of the shard (if {@link ShardingManager#mode} is `process`)
	     * @type {?ChildProcess}
	     */
	    this.process = null;

	    /**
	     * Worker of the shard (if {@link ShardingManager#mode} is `worker`)
	     * @type {?Worker}
	     */
	    this.worker = null;

	    /**
	     * Ongoing promises for calls to {@link Shard#eval}, mapped by the `script` they were called with
	     * @type {Map<string, Promise>}
	     * @private
	     */
	    this._evals = new Map();

	    /**
	     * Ongoing promises for calls to {@link Shard#fetchClientValue}, mapped by the `prop` they were called with
	     * @type {Map<string, Promise>}
	     * @private
	     */
	    this._fetches = new Map();

	    /**
	     * Listener function for the {@link ChildProcess}' `exit` event
	     * @type {Function}
	     * @private
	     */
	    this._exitListener = null;
	  }

	  /**
	   * Forks a child process or creates a worker thread for the shard.
	   * <warn>You should not need to call this manually.</warn>
	   * @param {number} [timeout=30000] The amount in milliseconds to wait until the {@link Client} has become ready
	   * before resolving (`-1` or `Infinity` for no wait)
	   * @returns {Promise<ChildProcess>}
	   */
	  spawn(timeout = 30_000) {
	    if (this.process) throw new DiscordjsError(ErrorCodes.ShardingProcessExists, this.id);
	    if (this.worker) throw new DiscordjsError(ErrorCodes.ShardingWorkerExists, this.id);

	    this._exitListener = this._handleExit.bind(this, undefined, timeout);

	    switch (this.manager.mode) {
	      case 'process':
	        this.process = childProcess
	          .fork(path.resolve(this.manager.file), this.args, {
	            env: this.env,
	            execArgv: this.execArgv,
	            silent: this.silent,
	          })
	          .on('message', this._handleMessage.bind(this))
	          .on('exit', this._exitListener);
	        break;
	      case 'worker':
	        this.worker = new Worker(path.resolve(this.manager.file), {
	          workerData: this.env,
	          env: SHARE_ENV,
	          execArgv: this.execArgv,
	          argv: this.args,
	        })
	          .on('message', this._handleMessage.bind(this))
	          .on('exit', this._exitListener);
	        break;
	    }

	    this._evals.clear();
	    this._fetches.clear();

	    const child = this.process ?? this.worker;

	    /**
	     * Emitted upon the creation of the shard's child process/worker.
	     * @event Shard#spawn
	     * @param {ChildProcess|Worker} process Child process/worker that was created
	     */
	    this.emit(ShardEvents.Spawn, child);

	    if (timeout === -1 || timeout === Infinity) return Promise.resolve(child);
	    return new Promise((resolve, reject) => {
	      const cleanup = () => {
	        clearTimeout(spawnTimeoutTimer);
	        this.off('ready', onReady);
	        this.off('disconnect', onDisconnect);
	        this.off('death', onDeath);
	      };

	      const onReady = () => {
	        cleanup();
	        resolve(child);
	      };

	      const onDisconnect = () => {
	        cleanup();
	        reject(new DiscordjsError(ErrorCodes.ShardingReadyDisconnected, this.id));
	      };

	      const onDeath = () => {
	        cleanup();
	        reject(new DiscordjsError(ErrorCodes.ShardingReadyDied, this.id));
	      };

	      const onTimeout = () => {
	        cleanup();
	        reject(new DiscordjsError(ErrorCodes.ShardingReadyTimeout, this.id));
	      };

	      const spawnTimeoutTimer = setTimeout(onTimeout, timeout);
	      this.once('ready', onReady);
	      this.once('disconnect', onDisconnect);
	      this.once('death', onDeath);
	    });
	  }

	  /**
	   * Immediately kills the shard's process/worker and does not restart it.
	   */
	  kill() {
	    if (this.process) {
	      this.process.removeListener('exit', this._exitListener);
	      this.process.kill();
	    } else {
	      this.worker.removeListener('exit', this._exitListener);
	      this.worker.terminate();
	    }

	    this._handleExit(false);
	  }

	  /**
	   * Options used to respawn a shard.
	   * @typedef {Object} ShardRespawnOptions
	   * @property {number} [delay=500] How long to wait between killing the process/worker and
	   * restarting it (in milliseconds)
	   * @property {number} [timeout=30000] The amount in milliseconds to wait until the {@link Client}
	   * has become ready before resolving (`-1` or `Infinity` for no wait)
	   */

	  /**
	   * Kills and restarts the shard's process/worker.
	   * @param {ShardRespawnOptions} [options] Options for respawning the shard
	   * @returns {Promise<ChildProcess>}
	   */
	  async respawn({ delay = 500, timeout = 30_000 } = {}) {
	    this.kill();
	    if (delay > 0) await sleep(delay);
	    return this.spawn(timeout);
	  }

	  /**
	   * Sends a message to the shard's process/worker.
	   * @param {*} message Message to send to the shard
	   * @returns {Promise<Shard>}
	   */
	  send(message) {
	    return new Promise((resolve, reject) => {
	      if (this.process) {
	        this.process.send(message, err => {
	          if (err) reject(err);
	          else resolve(this);
	        });
	      } else {
	        this.worker.postMessage(message);
	        resolve(this);
	      }
	    });
	  }

	  /**
	   * Fetches a client property value of the shard.
	   * @param {string} prop Name of the client property to get, using periods for nesting
	   * @returns {Promise<*>}
	   * @example
	   * shard.fetchClientValue('guilds.cache.size')
	   *   .then(count => console.log(`${count} guilds in shard ${shard.id}`))
	   *   .catch(console.error);
	   */
	  fetchClientValue(prop) {
	    // Shard is dead (maybe respawning), don't cache anything and error immediately
	    if (!this.process && !this.worker) {
	      return Promise.reject(new DiscordjsError(ErrorCodes.ShardingNoChildExists, this.id));
	    }

	    // Cached promise from previous call
	    if (this._fetches.has(prop)) return this._fetches.get(prop);

	    const promise = new Promise((resolve, reject) => {
	      const child = this.process ?? this.worker;

	      const listener = message => {
	        if (message?._fetchProp !== prop) return;
	        child.removeListener('message', listener);
	        this.decrementMaxListeners(child);
	        this._fetches.delete(prop);
	        if (!message._error) resolve(message._result);
	        else reject(makeError(message._error));
	      };

	      this.incrementMaxListeners(child);
	      child.on('message', listener);

	      this.send({ _fetchProp: prop }).catch(err => {
	        child.removeListener('message', listener);
	        this.decrementMaxListeners(child);
	        this._fetches.delete(prop);
	        reject(err);
	      });
	    });

	    this._fetches.set(prop, promise);
	    return promise;
	  }

	  /**
	   * Evaluates a script or function on the shard, in the context of the {@link Client}.
	   * @param {string|Function} script JavaScript to run on the shard
	   * @param {*} [context] The context for the eval
	   * @returns {Promise<*>} Result of the script execution
	   */
	  eval(script, context) {
	    // Stringify the script if it's a Function
	    const _eval = typeof script === 'function' ? `(${script})(this, ${JSON.stringify(context)})` : script;

	    // Shard is dead (maybe respawning), don't cache anything and error immediately
	    if (!this.process && !this.worker) {
	      return Promise.reject(new DiscordjsError(ErrorCodes.ShardingNoChildExists, this.id));
	    }

	    // Cached promise from previous call
	    if (this._evals.has(_eval)) return this._evals.get(_eval);

	    const promise = new Promise((resolve, reject) => {
	      const child = this.process ?? this.worker;

	      const listener = message => {
	        if (message?._eval !== _eval) return;
	        child.removeListener('message', listener);
	        this.decrementMaxListeners(child);
	        this._evals.delete(_eval);
	        if (!message._error) resolve(message._result);
	        else reject(makeError(message._error));
	      };

	      this.incrementMaxListeners(child);
	      child.on('message', listener);

	      this.send({ _eval }).catch(err => {
	        child.removeListener('message', listener);
	        this.decrementMaxListeners(child);
	        this._evals.delete(_eval);
	        reject(err);
	      });
	    });

	    this._evals.set(_eval, promise);
	    return promise;
	  }

	  /**
	   * Handles a message received from the child process/worker.
	   * @param {*} message Message received
	   * @private
	   */
	  _handleMessage(message) {
	    if (message) {
	      // Shard is ready
	      if (message._ready) {
	        this.ready = true;
	        /**
	         * Emitted upon the shard's {@link Client#event:shardReady} event.
	         * @event Shard#ready
	         */
	        this.emit(ShardEvents.Ready);
	        return;
	      }

	      // Shard has disconnected
	      if (message._disconnect) {
	        this.ready = false;
	        /**
	         * Emitted upon the shard's {@link Client#event:shardDisconnect} event.
	         * @event Shard#disconnect
	         */
	        this.emit(ShardEvents.Disconnect);
	        return;
	      }

	      // Shard is attempting to reconnect
	      if (message._reconnecting) {
	        this.ready = false;
	        /**
	         * Emitted upon the shard's {@link Client#event:shardReconnecting} event.
	         * @event Shard#reconnecting
	         */
	        this.emit(ShardEvents.Reconnecting);
	        return;
	      }

	      // Shard has resumed
	      if (message._resume) {
	        this.ready = true;
	        /**
	         * Emitted upon the shard's {@link Client#event:shardResume} event.
	         * @event Shard#resume
	         */
	        this.emit(ShardEvents.Resume);
	        return;
	      }

	      // Shard is requesting a property fetch
	      if (message._sFetchProp) {
	        const resp = { _sFetchProp: message._sFetchProp, _sFetchPropShard: message._sFetchPropShard };
	        this.manager.fetchClientValues(message._sFetchProp, message._sFetchPropShard).then(
	          results => this.send({ ...resp, _result: results }),
	          err => this.send({ ...resp, _error: makePlainError(err) }),
	        );
	        return;
	      }

	      // Shard is requesting an eval broadcast
	      if (message._sEval) {
	        const resp = { _sEval: message._sEval, _sEvalShard: message._sEvalShard };
	        this.manager._performOnShards('eval', [message._sEval], message._sEvalShard).then(
	          results => this.send({ ...resp, _result: results }),
	          err => this.send({ ...resp, _error: makePlainError(err) }),
	        );
	        return;
	      }

	      // Shard is requesting a respawn of all shards
	      if (message._sRespawnAll) {
	        const { shardDelay, respawnDelay, timeout } = message._sRespawnAll;
	        this.manager.respawnAll({ shardDelay, respawnDelay, timeout }).catch(() => {
	          // Do nothing
	        });
	        return;
	      }
	    }

	    /**
	     * Emitted upon receiving a message from the child process/worker.
	     * @event Shard#message
	     * @param {*} message Message that was received
	     */
	    this.emit(ShardEvents.Message, message);
	  }

	  /**
	   * Handles the shard's process/worker exiting.
	   * @param {boolean} [respawn=this.manager.respawn] Whether to spawn the shard again
	   * @param {number} [timeout] The amount in milliseconds to wait until the {@link Client}
	   * has become ready (`-1` or `Infinity` for no wait)
	   * @private
	   */
	  _handleExit(respawn = this.manager.respawn, timeout) {
	    /**
	     * Emitted upon the shard's child process/worker exiting.
	     * @event Shard#death
	     * @param {ChildProcess|Worker} process Child process/worker that exited
	     */
	    this.emit(ShardEvents.Death, this.process ?? this.worker);

	    this.ready = false;
	    this.process = null;
	    this.worker = null;
	    this._evals.clear();
	    this._fetches.clear();

	    if (respawn) this.spawn(timeout).catch(err => this.emit(ShardEvents.Error, err));
	  }

	  /**
	   * Increments max listeners by one for a given emitter, if they are not zero.
	   * @param {EventEmitter|process} emitter The emitter that emits the events.
	   * @private
	   */
	  incrementMaxListeners(emitter) {
	    const maxListeners = emitter.getMaxListeners();
	    if (maxListeners !== 0) {
	      emitter.setMaxListeners(maxListeners + 1);
	    }
	  }

	  /**
	   * Decrements max listeners by one for a given emitter, if they are not zero.
	   * @param {EventEmitter|process} emitter The emitter that emits the events.
	   * @private
	   */
	  decrementMaxListeners(emitter) {
	    const maxListeners = emitter.getMaxListeners();
	    if (maxListeners !== 0) {
	      emitter.setMaxListeners(maxListeners - 1);
	    }
	  }
	}

	Shard_1 = Shard;
	return Shard_1;
}

var ShardingManager_1;
var hasRequiredShardingManager;

function requireShardingManager () {
	if (hasRequiredShardingManager) return ShardingManager_1;
	hasRequiredShardingManager = 1;

	const EventEmitter = require$$0$b;
	const fs = require$$1$d;
	const path = require$$2$4;
	const process = require$$0$d;
	const { setTimeout: sleep } = require$$4$7;
	const { Collection } = requireDist$3();
	const Shard = requireShard();
	const { DiscordjsError, DiscordjsTypeError, DiscordjsRangeError, ErrorCodes } = requireErrors$1();
	const { fetchRecommendedShardCount } = requireUtil();

	/**
	 * This is a utility class that makes multi-process sharding of a bot an easy and painless experience.
	 * It works by spawning a self-contained {@link ChildProcess} or {@link Worker} for each individual shard, each
	 * containing its own instance of your bot's {@link Client}. They all have a line of communication with the master
	 * process, and there are several useful methods that utilise it in order to simplify tasks that are normally difficult
	 * with sharding. It can spawn a specific number of shards or the amount that Discord suggests for the bot, and takes a
	 * path to your main bot script to launch for each one.
	 * @extends {EventEmitter}
	 */
	class ShardingManager extends EventEmitter {
	  /**
	   * The mode to spawn shards with for a {@link ShardingManager}. Can be either one of:
	   * * 'process' to use child processes
	   * * 'worker' to use {@link Worker} threads
	   * @typedef {string} ShardingManagerMode
	   */

	  /**
	   * The options to spawn shards with for a {@link ShardingManager}.
	   * @typedef {Object} ShardingManagerOptions
	   * @property {string|number} [totalShards='auto'] Number of total shards of all shard managers or "auto"
	   * @property {string|number[]} [shardList='auto'] List of shards to spawn or "auto"
	   * @property {ShardingManagerMode} [mode='process'] Which mode to use for shards
	   * @property {boolean} [respawn=true] Whether shards should automatically respawn upon exiting
	   * @property {boolean} [silent=false] Whether to pass the silent flag to child process
	   * (only available when mode is set to 'process')
	   * @property {string[]} [shardArgs=[]] Arguments to pass to the shard script when spawning
	   * @property {string[]} [execArgv=[]] Arguments to pass to the shard script executable when spawning
	   * @property {string} [token] Token to use for automatic shard count and passing to shards
	   */

	  /**
	   * @param {string} file Path to your shard script file
	   * @param {ShardingManagerOptions} [options] Options for the sharding manager
	   */
	  constructor(file, options) {
	    super();
	    const _options = {
	      totalShards: 'auto',
	      mode: 'process',
	      respawn: true,
	      silent: false,
	      shardArgs: [],
	      execArgv: [],
	      token: process.env.DISCORD_TOKEN,
	      ...options,
	    };

	    /**
	     * Path to the shard script file
	     * @type {string}
	     */
	    this.file = file;
	    if (!file) throw new DiscordjsError(ErrorCodes.ClientInvalidOption, 'File', 'specified.');
	    if (!path.isAbsolute(file)) this.file = path.resolve(process.cwd(), file);
	    const stats = fs.statSync(this.file);
	    if (!stats.isFile()) throw new DiscordjsError(ErrorCodes.ClientInvalidOption, 'File', 'a file');

	    /**
	     * List of shards this sharding manager spawns
	     * @type {string|number[]}
	     */
	    this.shardList = _options.shardList ?? 'auto';
	    if (this.shardList !== 'auto') {
	      if (!Array.isArray(this.shardList)) {
	        throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'shardList', 'an array.');
	      }
	      this.shardList = [...new Set(this.shardList)];
	      if (this.shardList.length < 1) {
	        throw new DiscordjsRangeError(ErrorCodes.ClientInvalidOption, 'shardList', 'at least 1 id.');
	      }
	      if (
	        this.shardList.some(
	          shardId => typeof shardId !== 'number' || isNaN(shardId) || !Number.isInteger(shardId) || shardId < 0,
	        )
	      ) {
	        throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'shardList', 'an array of positive integers.');
	      }
	    }

	    /**
	     * Amount of shards that all sharding managers spawn in total
	     * @type {number}
	     */
	    this.totalShards = _options.totalShards || 'auto';
	    if (this.totalShards !== 'auto') {
	      if (typeof this.totalShards !== 'number' || isNaN(this.totalShards)) {
	        throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'Amount of shards', 'a number.');
	      }
	      if (this.totalShards < 1) {
	        throw new DiscordjsRangeError(ErrorCodes.ClientInvalidOption, 'Amount of shards', 'at least 1.');
	      }
	      if (!Number.isInteger(this.totalShards)) {
	        throw new DiscordjsRangeError(ErrorCodes.ClientInvalidOption, 'Amount of shards', 'an integer.');
	      }
	    }

	    /**
	     * Mode for shards to spawn with
	     * @type {ShardingManagerMode}
	     */
	    this.mode = _options.mode;
	    if (this.mode !== 'process' && this.mode !== 'worker') {
	      throw new DiscordjsRangeError(ErrorCodes.ClientInvalidOption, 'Sharding mode', '"process" or "worker"');
	    }

	    /**
	     * Whether shards should automatically respawn upon exiting
	     * @type {boolean}
	     */
	    this.respawn = _options.respawn;

	    /**
	     * Whether to pass the silent flag to child process (only when {@link ShardingManager#mode} is `process`)
	     * @type {boolean}
	     */
	    this.silent = _options.silent;

	    /**
	     * An array of arguments to pass to shards (only when {@link ShardingManager#mode} is `process`)
	     * @type {string[]}
	     */
	    this.shardArgs = _options.shardArgs;

	    /**
	     * An array of arguments to pass to the executable (only when {@link ShardingManager#mode} is `process`)
	     * @type {string[]}
	     */
	    this.execArgv = _options.execArgv;

	    /**
	     * Token to use for obtaining the automatic shard count, and passing to shards
	     * @type {?string}
	     */
	    this.token = _options.token?.replace(/^Bot\s*/i, '') ?? null;

	    /**
	     * A collection of shards that this manager has spawned
	     * @type {Collection<number, Shard>}
	     */
	    this.shards = new Collection();

	    process.env.SHARDING_MANAGER = true;
	    process.env.SHARDING_MANAGER_MODE = this.mode;
	    process.env.DISCORD_TOKEN = this.token;
	  }

	  /**
	   * Creates a single shard.
	   * <warn>Using this method is usually not necessary if you use the spawn method.</warn>
	   * @param {number} [id=this.shards.size] Id of the shard to create
	   * <info>This is usually not necessary to manually specify.</info>
	   * @returns {Shard} Note that the created shard needs to be explicitly spawned using its spawn method.
	   */
	  createShard(id = this.shards.size) {
	    const shard = new Shard(this, id);
	    this.shards.set(id, shard);
	    /**
	     * Emitted upon creating a shard.
	     * @event ShardingManager#shardCreate
	     * @param {Shard} shard Shard that was created
	     */
	    this.emit('shardCreate', shard);
	    return shard;
	  }

	  /**
	   * Options used to spawn multiple shards.
	   * @typedef {Object} MultipleShardSpawnOptions
	   * @property {number|string} [amount=this.totalShards] Number of shards to spawn
	   * @property {number} [delay=5500] How long to wait in between spawning each shard (in milliseconds)
	   * @property {number} [timeout=30000] The amount in milliseconds to wait until the {@link Client} has become ready
	   */

	  /**
	   * Spawns multiple shards.
	   * @param {MultipleShardSpawnOptions} [options] Options for spawning shards
	   * @returns {Promise<Collection<number, Shard>>}
	   */
	  async spawn({ amount = this.totalShards, delay = 5500, timeout = 30_000 } = {}) {
	    // Obtain/verify the number of shards to spawn
	    if (amount === 'auto') {
	      amount = await fetchRecommendedShardCount(this.token);
	    } else {
	      if (typeof amount !== 'number' || isNaN(amount)) {
	        throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'Amount of shards', 'a number.');
	      }
	      if (amount < 1) throw new DiscordjsRangeError(ErrorCodes.ClientInvalidOption, 'Amount of shards', 'at least 1.');
	      if (!Number.isInteger(amount)) {
	        throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'Amount of shards', 'an integer.');
	      }
	    }

	    // Make sure this many shards haven't already been spawned
	    if (this.shards.size >= amount) throw new DiscordjsError(ErrorCodes.ShardingAlreadySpawned, this.shards.size);
	    if (this.shardList === 'auto' || this.totalShards === 'auto' || this.totalShards !== amount) {
	      this.shardList = [...Array(amount).keys()];
	    }
	    if (this.totalShards === 'auto' || this.totalShards !== amount) {
	      this.totalShards = amount;
	    }

	    if (this.shardList.some(shardId => shardId >= amount)) {
	      throw new DiscordjsRangeError(
	        ErrorCodes.ClientInvalidOption,
	        'Amount of shards',
	        'bigger than the highest shardId in the shardList option.',
	      );
	    }

	    // Spawn the shards
	    for (const shardId of this.shardList) {
	      const promises = [];
	      const shard = this.createShard(shardId);
	      promises.push(shard.spawn(timeout));
	      if (delay > 0 && this.shards.size !== this.shardList.length) promises.push(sleep(delay));
	      await Promise.all(promises); // eslint-disable-line no-await-in-loop
	    }

	    return this.shards;
	  }

	  /**
	   * Sends a message to all shards.
	   * @param {*} message Message to be sent to the shards
	   * @returns {Promise<Shard[]>}
	   */
	  broadcast(message) {
	    const promises = [];
	    for (const shard of this.shards.values()) promises.push(shard.send(message));
	    return Promise.all(promises);
	  }

	  /**
	   * Options for {@link ShardingManager#broadcastEval} and {@link ShardClientUtil#broadcastEval}.
	   * @typedef {Object} BroadcastEvalOptions
	   * @property {number} [shard] Shard to run script on, all if undefined
	   * @property {*} [context] The JSON-serializable values to call the script with
	   */

	  /**
	   * Evaluates a script on all shards, or a given shard, in the context of the {@link Client}s.
	   * @param {Function} script JavaScript to run on each shard
	   * @param {BroadcastEvalOptions} [options={}] The options for the broadcast
	   * @returns {Promise<*|Array<*>>} Results of the script execution
	   */
	  broadcastEval(script, options = {}) {
	    if (typeof script !== 'function') {
	      return Promise.reject(new DiscordjsTypeError(ErrorCodes.ShardingInvalidEvalBroadcast));
	    }
	    return this._performOnShards('eval', [`(${script})(this, ${JSON.stringify(options.context)})`], options.shard);
	  }

	  /**
	   * Fetches a client property value of each shard, or a given shard.
	   * @param {string} prop Name of the client property to get, using periods for nesting
	   * @param {number} [shard] Shard to fetch property from, all if undefined
	   * @returns {Promise<*|Array<*>>}
	   * @example
	   * manager.fetchClientValues('guilds.cache.size')
	   *   .then(results => console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`))
	   *   .catch(console.error);
	   */
	  fetchClientValues(prop, shard) {
	    return this._performOnShards('fetchClientValue', [prop], shard);
	  }

	  /**
	   * Runs a method with given arguments on all shards, or a given shard.
	   * @param {string} method Method name to run on each shard
	   * @param {Array<*>} args Arguments to pass through to the method call
	   * @param {number} [shard] Shard to run on, all if undefined
	   * @returns {Promise<*|Array<*>>} Results of the method execution
	   * @private
	   */
	  _performOnShards(method, args, shard) {
	    if (this.shards.size === 0) return Promise.reject(new DiscordjsError(ErrorCodes.ShardingNoShards));

	    if (typeof shard === 'number') {
	      if (this.shards.has(shard)) return this.shards.get(shard)[method](...args);
	      return Promise.reject(new DiscordjsError(ErrorCodes.ShardingShardNotFound, shard));
	    }

	    if (this.shards.size !== this.shardList.length) {
	      return Promise.reject(new DiscordjsError(ErrorCodes.ShardingInProcess));
	    }

	    const promises = [];
	    for (const sh of this.shards.values()) promises.push(sh[method](...args));
	    return Promise.all(promises);
	  }

	  /**
	   * Options used to respawn all shards.
	   * @typedef {Object} MultipleShardRespawnOptions
	   * @property {number} [shardDelay=5000] How long to wait between shards (in milliseconds)
	   * @property {number} [respawnDelay=500] How long to wait between killing a shard's process and restarting it
	   * (in milliseconds)
	   * @property {number} [timeout=30000] The amount in milliseconds to wait for a shard to become ready before
	   * continuing to another (`-1` or `Infinity` for no wait)
	   */

	  /**
	   * Kills all running shards and respawns them.
	   * @param {MultipleShardRespawnOptions} [options] Options for respawning shards
	   * @returns {Promise<Collection<number, Shard>>}
	   */
	  async respawnAll({ shardDelay = 5_000, respawnDelay = 500, timeout = 30_000 } = {}) {
	    let s = 0;
	    for (const shard of this.shards.values()) {
	      const promises = [shard.respawn({ delay: respawnDelay, timeout })];
	      if (++s < this.shards.size && shardDelay > 0) promises.push(sleep(shardDelay));
	      await Promise.all(promises); // eslint-disable-line no-await-in-loop
	    }
	    return this.shards;
	  }
	}

	ShardingManager_1 = ShardingManager;
	return ShardingManager_1;
}

var Formatters_1;
var hasRequiredFormatters;

function requireFormatters () {
	if (hasRequiredFormatters) return Formatters_1;
	hasRequiredFormatters = 1;

	const { deprecate } = require$$0$a;
	const {
	  blockQuote,
	  bold,
	  channelMention,
	  codeBlock,
	  formatEmoji,
	  hideLinkEmbed,
	  hyperlink,
	  inlineCode,
	  italic,
	  quote,
	  roleMention,
	  spoiler,
	  strikethrough,
	  time,
	  TimestampStyles,
	  underscore,
	  userMention,
	} = requireDist$2();

	/**
	 * Formats an application command name and id into an application command mention.
	 * @method chatInputApplicationCommandMention
	 * @param {string} commandName The name of the application command
	 * @param {string|Snowflake} subcommandGroupOrSubOrId
	 * The subcommand group name, subcommand name, or application command id
	 * @param {string|Snowflake} [subcommandNameOrId] The subcommand name or application command id
	 * @param {string} [commandId] The id of the application command
	 * @returns {string}
	 */

	/**
	 * Wraps the content inside a code block with an optional language.
	 * @method codeBlock
	 * @param {string} contentOrLanguage The language to use or content if a second parameter isn't provided
	 * @param {string} [content] The content to wrap
	 * @returns {string}
	 */

	/**
	 * Wraps the content inside \`backticks\`, which formats it as inline code.
	 * @method inlineCode
	 * @param {string} content The content to wrap
	 * @returns {string}
	 */

	/**
	 * Formats the content into italic text.
	 * @method italic
	 * @param {string} content The content to wrap
	 * @returns {string}
	 */

	/**
	 * Formats the content into bold text.
	 * @method bold
	 * @param {string} content The content to wrap
	 * @returns {string}
	 */

	/**
	 * Formats the content into underscored text.
	 * @method underscore
	 * @param {string} content The content to wrap
	 * @returns {string}
	 */

	/**
	 * Formats the content into strike-through text.
	 * @method strikethrough
	 * @param {string} content The content to wrap
	 * @returns {string}
	 */

	/**
	 * Formats the content into a quote.
	 * <info>This needs to be at the start of the line for Discord to format it.</info>
	 * @method quote
	 * @param {string} content The content to wrap
	 * @returns {string}
	 */

	/**
	 * Formats the content into a block quote.
	 * <info>This needs to be at the start of the line for Discord to format it.</info>
	 * @method blockQuote
	 * @param {string} content The content to wrap
	 * @returns {string}
	 */

	/**
	 * Wraps the URL into `<>`, which stops it from embedding.
	 * @method hideLinkEmbed
	 * @param {string} content The content to wrap
	 * @returns {string}
	 */

	/**
	 * Formats the content and the URL into a masked URL with an optional title.
	 * @method hyperlink
	 * @param {string} content The content to display
	 * @param {string} url The URL the content links to
	 * @param {string} [title] The title shown when hovering on the masked link
	 * @returns {string}
	 */

	/**
	 * Formats the content into spoiler text.
	 * @method spoiler
	 * @param {string} content The content to spoiler
	 * @returns {string}
	 */

	/**
	 * Formats a user id into a user mention.
	 * @method userMention
	 * @param {Snowflake} userId The user id to format
	 * @returns {string}
	 */

	/**
	 * Formats a channel id into a channel mention.
	 * @method channelMention
	 * @param {Snowflake} channelId The channel id to format
	 * @returns {string}
	 */

	/**
	 * Formats a role id into a role mention.
	 * @method roleMention
	 * @param {Snowflake} roleId The role id to format
	 * @returns {string}
	 */

	/**
	 * Formats an emoji id into a fully qualified emoji identifier.
	 * @method formatEmoji
	 * @param {Snowflake} emojiId The emoji id to format
	 * @param {boolean} [animated=false] Whether the emoji is animated
	 * @returns {string}
	 */

	/**
	 * Formats a channel link for a channel.
	 * @method channelLink
	 * @param {Snowflake} channelId The id of the channel
	 * @param {Snowflake} [guildId] The id of the guild
	 * @returns {string}
	 */

	/**
	 * Formats a message link for a channel.
	 * @method messageLink
	 * @param {Snowflake} channelId The id of the channel
	 * @param {Snowflake} messageId The id of the message
	 * @param {Snowflake} [guildId] The id of the guild
	 * @returns {string}
	 */

	/**
	 * A message formatting timestamp style, as defined in
	 * [here](https://discord.com/developers/docs/reference#message-formatting-timestamp-styles).
	 * * `t` Short time format, consisting of hours and minutes, e.g. 16:20.
	 * * `T` Long time format, consisting of hours, minutes, and seconds, e.g. 16:20:30.
	 * * `d` Short date format, consisting of day, month, and year, e.g. 20/04/2021.
	 * * `D` Long date format, consisting of day, month, and year, e.g. 20 April 2021.
	 * * `f` Short date-time format, consisting of short date and short time formats, e.g. 20 April 2021 16:20.
	 * * `F` Long date-time format, consisting of long date and short time formats, e.g. Tuesday, 20 April 2021 16:20.
	 * * `R` Relative time format, consisting of a relative duration format, e.g. 2 months ago.
	 * @typedef {string} TimestampStylesString
	 */

	/**
	 * Formats a date into a short date-time string.
	 * @method time
	 * @param {number|Date} [date] The date to format
	 * @param {TimestampStylesString} [style] The style to use
	 * @returns {string}
	 */

	/**
	 * Contains various Discord-specific functions for formatting messages.
	 * @deprecated This class is redundant as all methods of the class can be imported from discord.js directly.
	 */
	class Formatters extends null {
	  /**
	   * Formats the content into a block quote.
	   * <info>This needs to be at the start of the line for Discord to format it.</info>
	   * @method blockQuote
	   * @memberof Formatters
	   * @param {string} content The content to wrap
	   * @returns {string}
	   * @deprecated Import this method directly from discord.js instead.
	   */
	  static blockQuote = deprecate(
	    blockQuote,
	    'Formatters.blockQuote() is deprecated. Import this method directly from discord.js instead.',
	  );

	  /**
	   * Formats the content into bold text.
	   * @method bold
	   * @memberof Formatters
	   * @param {string} content The content to wrap
	   * @returns {string}
	   * @deprecated Import this method directly from discord.js instead.
	   */
	  static bold = deprecate(
	    bold,
	    'Formatters.bold() is deprecated. Import this method directly from discord.js instead.',
	  );

	  /**
	   * Formats a channel id into a channel mention.
	   * @method channelMention
	   * @memberof Formatters
	   * @param {Snowflake} channelId The channel id to format
	   * @returns {string}
	   * @deprecated Import this method directly from discord.js instead.
	   */
	  static channelMention = deprecate(
	    channelMention,
	    'Formatters.channelMention() is deprecated. Import this method directly from discord.js instead.',
	  );

	  /**
	   * Wraps the content inside a code block with an optional language.
	   * @method codeBlock
	   * @memberof Formatters
	   * @param {string} contentOrLanguage The language to use or content if a second parameter isn't provided
	   * @param {string} [content] The content to wrap
	   * @returns {string}
	   * @deprecated Import this method directly from discord.js instead.
	   */
	  static codeBlock = deprecate(
	    codeBlock,
	    'Formatters.codeBlock() is deprecated. Import this method directly from discord.js instead.',
	  );

	  /**
	   * Formats an emoji id into a fully qualified emoji identifier.
	   * @method formatEmoji
	   * @memberof Formatters
	   * @param {string} emojiId The emoji id to format
	   * @param {boolean} [animated=false] Whether the emoji is animated
	   * @returns {string}
	   * @deprecated Import this method directly from discord.js instead.
	   */
	  static formatEmoji = deprecate(
	    formatEmoji,
	    'Formatters.formatEmoji() is deprecated. Import this method directly from discord.js instead.',
	  );

	  /**
	   * Wraps the URL into `<>`, which stops it from embedding.
	   * @method hideLinkEmbed
	   * @memberof Formatters
	   * @param {string} content The content to wrap
	   * @returns {string}
	   * @deprecated Import this method directly from discord.js instead.
	   */
	  static hideLinkEmbed = deprecate(
	    hideLinkEmbed,
	    'Formatters.hideLinkEmbed() is deprecated. Import this method directly from discord.js instead.',
	  );

	  /**
	   * Formats the content and the URL into a masked URL with an optional title.
	   * @method hyperlink
	   * @memberof Formatters
	   * @param {string} content The content to display
	   * @param {string} url The URL the content links to
	   * @param {string} [title] The title shown when hovering on the masked link
	   * @returns {string}
	   * @deprecated Import this method directly from discord.js instead.
	   */
	  static hyperlink = deprecate(
	    hyperlink,
	    'Formatters.hyperlink() is deprecated. Import this method directly from discord.js instead.',
	  );

	  /**
	   * Wraps the content inside \`backticks\`, which formats it as inline code.
	   * @method inlineCode
	   * @memberof Formatters
	   * @param {string} content The content to wrap
	   * @returns {string}
	   * @deprecated Import this method directly from discord.js instead.
	   */
	  static inlineCode = deprecate(
	    inlineCode,
	    'Formatters.inlineCode() is deprecated. Import this method directly from discord.js instead.',
	  );

	  /**
	   * Formats the content into italic text.
	   * @method italic
	   * @memberof Formatters
	   * @param {string} content The content to wrap
	   * @returns {string}
	   * @deprecated Import this method directly from discord.js instead.
	   */
	  static italic = deprecate(
	    italic,
	    'Formatters.italic() is deprecated. Import this method directly from discord.js instead.',
	  );

	  /**
	   * Formats the content into a quote. This needs to be at the start of the line for Discord to format it.
	   * @method quote
	   * @memberof Formatters
	   * @param {string} content The content to wrap
	   * @returns {string}
	   * @deprecated Import this method directly from discord.js instead.
	   */
	  static quote = deprecate(
	    quote,
	    'Formatters.quote() is deprecated. Import this method directly from discord.js instead.',
	  );

	  /**
	   * Formats a role id into a role mention.
	   * @method roleMention
	   * @memberof Formatters
	   * @param {Snowflake} roleId The role id to format
	   * @returns {string}
	   * @deprecated Import this method directly from discord.js instead.
	   */
	  static roleMention = deprecate(
	    roleMention,
	    'Formatters.roleMention() is deprecated. Import this method directly from discord.js instead.',
	  );

	  /**
	   * Formats the content into spoiler text.
	   * @method spoiler
	   * @memberof Formatters
	   * @param {string} content The content to spoiler
	   * @returns {string}
	   * @deprecated Import this method directly from discord.js instead.
	   */
	  static spoiler = deprecate(
	    spoiler,
	    'Formatters.spoiler() is deprecated. Import this method directly from discord.js instead.',
	  );

	  /**
	   * Formats the content into strike-through text.
	   * @method strikethrough
	   * @memberof Formatters
	   * @param {string} content The content to wrap
	   * @returns {string}
	   * @deprecated Import this method directly from discord.js instead.
	   */
	  static strikethrough = deprecate(
	    strikethrough,
	    'Formatters.strikethrough() is deprecated. Import this method directly from discord.js instead.',
	  );

	  /**
	   * Formats a date into a short date-time string.
	   * @method time
	   * @memberof Formatters
	   * @param {number|Date} [date] The date to format
	   * @param {TimestampStylesString} [style] The style to use
	   * @returns {string}
	   * @deprecated Import this method directly from discord.js instead.
	   */
	  static time = deprecate(
	    time,
	    'Formatters.time() is deprecated. Import this method directly from discord.js instead.',
	  );

	  /**
	   * The message formatting timestamp
	   * [styles](https://discord.com/developers/docs/reference#message-formatting-timestamp-styles) supported by Discord.
	   * @type {Object<string, TimestampStylesString>}
	   * @memberof Formatters
	   * @deprecated Import this property directly from discord.js instead.
	   */
	  static TimestampStyles = TimestampStyles;

	  /**
	   * Formats the content into underscored text.
	   * @method underscore
	   * @memberof Formatters
	   * @param {string} content The content to wrap
	   * @returns {string}
	   * @deprecated Import this method directly from discord.js instead.
	   */
	  static underscore = deprecate(
	    underscore,
	    'Formatters.underscore() is deprecated. Import this method directly from discord.js instead.',
	  );

	  /**
	   * Formats a user id into a user mention.
	   * @method userMention
	   * @memberof Formatters
	   * @param {Snowflake} userId The user id to format
	   * @returns {string}
	   * @deprecated Import this method directly from discord.js instead.
	   */
	  static userMention = deprecate(
	    userMention,
	    'Formatters.userMention() is deprecated. Import this method directly from discord.js instead.',
	  );
	}

	Formatters_1 = Formatters;
	return Formatters_1;
}

var EmbedBuilder_1;
var hasRequiredEmbedBuilder;

function requireEmbedBuilder () {
	if (hasRequiredEmbedBuilder) return EmbedBuilder_1;
	hasRequiredEmbedBuilder = 1;

	const { EmbedBuilder: BuildersEmbed, embedLength } = requireDist$1();
	const { isJSONEncodable } = requireDist$7();
	const { toSnakeCase } = requireTransformers();
	const { resolveColor } = requireUtil();

	/**
	 * Represents an embed builder.
	 * @extends {BuildersEmbed}
	 */
	class EmbedBuilder extends BuildersEmbed {
	  constructor(data) {
	    super(toSnakeCase(data));
	  }

	  /**
	   * Sets the color of this embed
	   * @param {?ColorResolvable} color The color of the embed
	   * @returns {EmbedBuilder}
	   */
	  setColor(color) {
	    return super.setColor(color && resolveColor(color));
	  }

	  /**
	   * Creates a new embed builder from JSON data
	   * @param {EmbedBuilder|Embed|APIEmbed} other The other data
	   * @returns {EmbedBuilder}
	   */
	  static from(other) {
	    return new this(isJSONEncodable(other) ? other.toJSON() : other);
	  }

	  /**
	   * The accumulated length for the embed title, description, fields, footer text, and author name.
	   * @type {number}
	   * @readonly
	   */
	  get length() {
	    return embedLength(this.data);
	  }
	}

	EmbedBuilder_1 = EmbedBuilder;

	/**
	 * @external BuildersEmbed
	 * @see {@link https://discord.js.org/docs/packages/builders/stable/EmbedBuilder:Class}
	 */
	return EmbedBuilder_1;
}

var AttachmentBuilder_1;
var hasRequiredAttachmentBuilder;

function requireAttachmentBuilder () {
	if (hasRequiredAttachmentBuilder) return AttachmentBuilder_1;
	hasRequiredAttachmentBuilder = 1;

	const { basename, flatten } = requireUtil();

	/**
	 * Represents an attachment builder
	 */
	class AttachmentBuilder {
	  /**
	   * @param {BufferResolvable|Stream} attachment The file
	   * @param {AttachmentData} [data] Extra data
	   */
	  constructor(attachment, data = {}) {
	    /**
	     * The file associated with this attachment.
	     * @type {BufferResolvable|Stream}
	     */
	    this.attachment = attachment;
	    /**
	     * The name of this attachment
	     * @type {?string}
	     */
	    this.name = data.name;
	    /**
	     * The description of the attachment
	     * @type {?string}
	     */
	    this.description = data.description;
	  }

	  /**
	   * Sets the description of this attachment.
	   * @param {string} description The description of the file
	   * @returns {AttachmentBuilder} This attachment
	   */
	  setDescription(description) {
	    this.description = description;
	    return this;
	  }

	  /**
	   * Sets the file of this attachment.
	   * @param {BufferResolvable|Stream} attachment The file
	   * @returns {AttachmentBuilder} This attachment
	   */
	  setFile(attachment) {
	    this.attachment = attachment;
	    return this;
	  }

	  /**
	   * Sets the name of this attachment.
	   * @param {string} name The name of the file
	   * @returns {AttachmentBuilder} This attachment
	   */
	  setName(name) {
	    this.name = name;
	    return this;
	  }

	  /**
	   * Sets whether this attachment is a spoiler
	   * @param {boolean} [spoiler=true] Whether the attachment should be marked as a spoiler
	   * @returns {AttachmentBuilder} This attachment
	   */
	  setSpoiler(spoiler = true) {
	    if (spoiler === this.spoiler) return this;

	    if (!spoiler) {
	      while (this.spoiler) {
	        this.name = this.name.slice('SPOILER_'.length);
	      }
	      return this;
	    }
	    this.name = `SPOILER_${this.name}`;
	    return this;
	  }

	  /**
	   * Whether or not this attachment has been marked as a spoiler
	   * @type {boolean}
	   * @readonly
	   */
	  get spoiler() {
	    return basename(this.name).startsWith('SPOILER_');
	  }

	  toJSON() {
	    return flatten(this);
	  }

	  /**
	   * Makes a new builder instance from a preexisting attachment structure.
	   * @param {AttachmentBuilder|Attachment|AttachmentPayload} other The builder to construct a new instance from
	   * @returns {AttachmentBuilder}
	   */
	  static from(other) {
	    return new AttachmentBuilder(other.attachment, {
	      name: other.name,
	      description: other.description,
	    });
	  }
	}

	AttachmentBuilder_1 = AttachmentBuilder;

	/**
	 * @typedef {Object} AttachmentData
	 * @property {string} [name] The name of the attachment
	 * @property {string} [description] The description of the attachment
	 */
	return AttachmentBuilder_1;
}

var ModalBuilder_1;
var hasRequiredModalBuilder;

function requireModalBuilder () {
	if (hasRequiredModalBuilder) return ModalBuilder_1;
	hasRequiredModalBuilder = 1;

	const { ModalBuilder: BuildersModal, ComponentBuilder } = requireDist$1();
	const { isJSONEncodable } = requireDist$7();
	const { toSnakeCase } = requireTransformers();

	/**
	 * Represents a modal builder.
	 * @extends {BuildersModal}
	 */
	class ModalBuilder extends BuildersModal {
	  constructor({ components, ...data } = {}) {
	    super({
	      ...toSnakeCase(data),
	      components: components?.map(component =>
	        component instanceof ComponentBuilder ? component : toSnakeCase(component),
	      ),
	    });
	  }

	  /**
	   * Creates a new modal builder from JSON data
	   * @param {ModalBuilder|APIModalComponent} other The other data
	   * @returns {ModalBuilder}
	   */
	  static from(other) {
	    return new this(isJSONEncodable(other) ? other.toJSON() : other);
	  }
	}

	ModalBuilder_1 = ModalBuilder;

	/**
	 * @external BuildersModal
	 * @see {@link https://discord.js.org/docs/packages/builders/stable/ModalBuilder:Class}
	 */
	return ModalBuilder_1;
}

var SelectMenuBuilder_1;
var hasRequiredSelectMenuBuilder;

function requireSelectMenuBuilder () {
	if (hasRequiredSelectMenuBuilder) return SelectMenuBuilder_1;
	hasRequiredSelectMenuBuilder = 1;

	const process = require$$0$d;
	const StringSelectMenuBuilder = requireStringSelectMenuBuilder();

	let deprecationEmitted = false;

	/**
	 * @deprecated Use {@link StringSelectMenuBuilder} instead.
	 * @extends {StringSelectMenuBuilder}
	 */
	class SelectMenuBuilder extends StringSelectMenuBuilder {
	  constructor(...params) {
	    super(...params);

	    if (!deprecationEmitted) {
	      process.emitWarning(
	        'The SelectMenuBuilder class is deprecated. Use StringSelectMenuBuilder instead.',
	        'DeprecationWarning',
	      );
	      deprecationEmitted = true;
	    }
	  }
	}

	SelectMenuBuilder_1 = SelectMenuBuilder;
	return SelectMenuBuilder_1;
}

var SelectMenuComponent_1;
var hasRequiredSelectMenuComponent;

function requireSelectMenuComponent () {
	if (hasRequiredSelectMenuComponent) return SelectMenuComponent_1;
	hasRequiredSelectMenuComponent = 1;

	const process = require$$0$d;
	const StringSelectMenuComponent = requireStringSelectMenuComponent();

	let deprecationEmitted = false;

	/**
	 * @deprecated Use {@link StringSelectMenuComponent} instead.
	 * @extends {StringSelectMenuComponent}
	 */
	class SelectMenuComponent extends StringSelectMenuComponent {
	  constructor(...params) {
	    super(...params);

	    if (!deprecationEmitted) {
	      process.emitWarning(
	        'The SelectMenuComponent class is deprecated. Use StringSelectMenuComponent instead.',
	        'DeprecationWarning',
	      );
	      deprecationEmitted = true;
	    }
	  }
	}

	SelectMenuComponent_1 = SelectMenuComponent;
	return SelectMenuComponent_1;
}

var SelectMenuInteraction_1;
var hasRequiredSelectMenuInteraction;

function requireSelectMenuInteraction () {
	if (hasRequiredSelectMenuInteraction) return SelectMenuInteraction_1;
	hasRequiredSelectMenuInteraction = 1;

	const process = require$$0$d;
	const StringSelectMenuInteraction = requireStringSelectMenuInteraction();

	let deprecationEmitted = false;

	/**
	 * @deprecated Use {@link StringSelectMenuInteraction} instead.
	 * @extends {StringSelectMenuInteraction}
	 */
	class SelectMenuInteraction extends StringSelectMenuInteraction {
	  constructor(...params) {
	    super(...params);

	    if (!deprecationEmitted) {
	      process.emitWarning(
	        'The SelectMenuInteraction class is deprecated. Use StringSelectMenuInteraction instead.',
	        'DeprecationWarning',
	      );
	      deprecationEmitted = true;
	    }
	  }
	}

	SelectMenuInteraction_1 = SelectMenuInteraction;
	return SelectMenuInteraction_1;
}

var StringSelectMenuOptionBuilder_1;
var hasRequiredStringSelectMenuOptionBuilder;

function requireStringSelectMenuOptionBuilder () {
	if (hasRequiredStringSelectMenuOptionBuilder) return StringSelectMenuOptionBuilder_1;
	hasRequiredStringSelectMenuOptionBuilder = 1;

	const { SelectMenuOptionBuilder: BuildersSelectMenuOption } = requireDist$1();
	const { isJSONEncodable } = requireDist$7();
	const { toSnakeCase } = requireTransformers();
	const { resolvePartialEmoji } = requireUtil();

	/**
	 * Represents a select menu option builder.
	 * @extends {BuildersSelectMenuOption}
	 */
	class StringSelectMenuOptionBuilder extends BuildersSelectMenuOption {
	  constructor({ emoji, ...data } = {}) {
	    super(
	      toSnakeCase({
	        ...data,
	        emoji: emoji && typeof emoji === 'string' ? resolvePartialEmoji(emoji) : emoji,
	      }),
	    );
	  }

	  /**
	   * Sets the emoji to display on this option
	   * @param {ComponentEmojiResolvable} emoji The emoji to display on this option
	   * @returns {StringSelectMenuOptionBuilder}
	   */
	  setEmoji(emoji) {
	    if (typeof emoji === 'string') {
	      return super.setEmoji(resolvePartialEmoji(emoji));
	    }
	    return super.setEmoji(emoji);
	  }

	  /**
	   * Creates a new select menu option builder from JSON data
	   * @param {StringSelectMenuOptionBuilder|APISelectMenuOption} other The other data
	   * @returns {StringSelectMenuOptionBuilder}
	   */
	  static from(other) {
	    return new this(isJSONEncodable(other) ? other.toJSON() : other);
	  }
	}

	StringSelectMenuOptionBuilder_1 = StringSelectMenuOptionBuilder;

	/**
	 * @external BuildersSelectMenuOption
	 * @see {@link https://discord.js.org/docs/packages/builders/stable/StringSelectMenuOptionBuilder:Class}
	 */
	return StringSelectMenuOptionBuilder_1;
}

var SelectMenuOptionBuilder_1;
var hasRequiredSelectMenuOptionBuilder;

function requireSelectMenuOptionBuilder () {
	if (hasRequiredSelectMenuOptionBuilder) return SelectMenuOptionBuilder_1;
	hasRequiredSelectMenuOptionBuilder = 1;

	const process = require$$0$d;
	const StringSelectMenuOptionBuilder = requireStringSelectMenuOptionBuilder();

	let deprecationEmitted = false;

	/**
	 * @deprecated Use {@link StringSelectMenuOptionBuilder} instead.
	 * @extends {StringSelectMenuOptionBuilder}
	 */
	class SelectMenuOptionBuilder extends StringSelectMenuOptionBuilder {
	  constructor(...params) {
	    super(...params);

	    if (!deprecationEmitted) {
	      process.emitWarning(
	        'The SelectMenuOptionBuilder class is deprecated. Use StringSelectMenuOptionBuilder instead.',
	        'DeprecationWarning',
	      );
	      deprecationEmitted = true;
	    }
	  }
	}

	SelectMenuOptionBuilder_1 = SelectMenuOptionBuilder;
	return SelectMenuOptionBuilder_1;
}

var hasRequiredSrc;

function requireSrc () {
	if (hasRequiredSrc) return src;
	hasRequiredSrc = 1;
	(function (exports) {

		const { polyfillDispose } = requireDist$7();
		const { __exportStar } = require$$1$3;

		polyfillDispose();

		// "Root" classes (starting points)
		exports.BaseClient = requireBaseClient();
		exports.Client = requireClient();
		exports.Shard = requireShard();
		exports.ShardClientUtil = requireShardClientUtil();
		exports.ShardingManager = requireShardingManager();
		exports.WebhookClient = requireWebhookClient();

		// Errors
		exports.DiscordjsError = requireDJSError().DiscordjsError;
		exports.DiscordjsTypeError = requireDJSError().DiscordjsTypeError;
		exports.DiscordjsRangeError = requireDJSError().DiscordjsRangeError;
		exports.DiscordjsErrorCodes = requireErrorCodes();

		// Utilities
		exports.ActivityFlagsBitField = requireActivityFlagsBitField();
		exports.ApplicationFlagsBitField = requireApplicationFlagsBitField();
		exports.AttachmentFlagsBitField = requireAttachmentFlagsBitField();
		exports.BaseManager = requireBaseManager();
		exports.BitField = requireBitField();
		exports.ChannelFlagsBitField = requireChannelFlagsBitField();
		exports.Collection = requireDist$3().Collection;
		exports.Constants = requireConstants$1();
		exports.Colors = requireColors();
		__exportStar(requireDataResolver(), exports);
		exports.Events = requireEvents();
		exports.Formatters = requireFormatters();
		exports.GuildMemberFlagsBitField = requireGuildMemberFlagsBitField().GuildMemberFlagsBitField;
		exports.IntentsBitField = requireIntentsBitField();
		exports.LimitedCollection = requireLimitedCollection();
		exports.MessageFlagsBitField = requireMessageFlagsBitField();
		exports.Options = requireOptions();
		exports.Partials = requirePartials();
		exports.PermissionsBitField = requirePermissionsBitField();
		exports.RoleFlagsBitField = requireRoleFlagsBitField();
		exports.ShardEvents = requireShardEvents();
		exports.SKUFlagsBitField = requireSKUFlagsBitField().SKUFlagsBitField;
		exports.Status = requireStatus();
		exports.SnowflakeUtil = /*@__PURE__*/ requireCjs$2().DiscordSnowflake;
		exports.Sweepers = requireSweepers();
		exports.SystemChannelFlagsBitField = requireSystemChannelFlagsBitField();
		exports.ThreadMemberFlagsBitField = requireThreadMemberFlagsBitField();
		exports.UserFlagsBitField = requireUserFlagsBitField();
		__exportStar(requireUtil(), exports);
		exports.WebSocketShardEvents = requireWebSocketShardEvents();
		exports.version = require$$40.version;

		// Managers
		exports.ApplicationCommandManager = requireApplicationCommandManager();
		exports.ApplicationEmojiManager = requireApplicationEmojiManager();
		exports.ApplicationCommandPermissionsManager = requireApplicationCommandPermissionsManager();
		exports.AutoModerationRuleManager = requireAutoModerationRuleManager();
		exports.BaseGuildEmojiManager = requireBaseGuildEmojiManager();
		exports.CachedManager = requireCachedManager();
		exports.ChannelManager = requireChannelManager();
		exports.ClientVoiceManager = requireClientVoiceManager();
		exports.DataManager = requireDataManager();
		exports.DMMessageManager = requireDMMessageManager();
		exports.EntitlementManager = requireEntitlementManager().EntitlementManager;
		exports.GuildApplicationCommandManager = requireGuildApplicationCommandManager();
		exports.GuildBanManager = requireGuildBanManager();
		exports.GuildChannelManager = requireGuildChannelManager();
		exports.GuildEmojiManager = requireGuildEmojiManager();
		exports.GuildEmojiRoleManager = requireGuildEmojiRoleManager();
		exports.GuildForumThreadManager = requireGuildForumThreadManager();
		exports.GuildInviteManager = requireGuildInviteManager();
		exports.GuildManager = requireGuildManager();
		exports.GuildMemberManager = requireGuildMemberManager();
		exports.GuildMemberRoleManager = requireGuildMemberRoleManager();
		exports.GuildMessageManager = requireGuildMessageManager();
		exports.GuildScheduledEventManager = requireGuildScheduledEventManager();
		exports.GuildStickerManager = requireGuildStickerManager();
		exports.GuildTextThreadManager = requireGuildTextThreadManager();
		exports.MessageManager = requireMessageManager();
		exports.PermissionOverwriteManager = requirePermissionOverwriteManager();
		exports.PresenceManager = requirePresenceManager();
		exports.ReactionManager = requireReactionManager();
		exports.ReactionUserManager = requireReactionUserManager();
		exports.RoleManager = requireRoleManager();
		exports.StageInstanceManager = requireStageInstanceManager();
		exports.ThreadManager = requireThreadManager();
		exports.ThreadMemberManager = requireThreadMemberManager();
		exports.UserManager = requireUserManager();
		exports.VoiceStateManager = requireVoiceStateManager();
		exports.WebSocketManager = requireWebSocketManager();
		exports.WebSocketShard = requireWebSocketShard();

		// Structures
		exports.ActionRow = requireActionRow();
		exports.ActionRowBuilder = requireActionRowBuilder();
		exports.Activity = requirePresence().Activity;
		exports.AnonymousGuild = requireAnonymousGuild();
		exports.Application = requireApplication$2();
		exports.ApplicationCommand = requireApplicationCommand();
		exports.ApplicationEmoji = requireApplicationEmoji();
		exports.ApplicationRoleConnectionMetadata =
		  requireApplicationRoleConnectionMetadata().ApplicationRoleConnectionMetadata;
		exports.AutocompleteInteraction = requireAutocompleteInteraction();
		exports.AutoModerationActionExecution = requireAutoModerationActionExecution$1();
		exports.AutoModerationRule = requireAutoModerationRule();
		exports.Base = requireBase$2();
		exports.BaseGuild = requireBaseGuild();
		exports.BaseGuildEmoji = requireBaseGuildEmoji();
		exports.BaseGuildTextChannel = requireBaseGuildTextChannel();
		exports.BaseGuildVoiceChannel = requireBaseGuildVoiceChannel();
		exports.ButtonBuilder = requireButtonBuilder();
		exports.ButtonComponent = requireButtonComponent();
		exports.ButtonInteraction = requireButtonInteraction();
		exports.CategoryChannel = requireCategoryChannel();
		exports.BaseChannel = requireBaseChannel().BaseChannel;
		exports.ChatInputCommandInteraction = requireChatInputCommandInteraction();
		exports.ClientApplication = requireClientApplication();
		exports.ClientPresence = requireClientPresence();
		exports.ClientUser = requireClientUser();
		exports.CommandInteraction = requireCommandInteraction();
		exports.Collector = requireCollector();
		exports.CommandInteractionOptionResolver = requireCommandInteractionOptionResolver();
		exports.Component = requireComponent();
		exports.ContextMenuCommandInteraction = requireContextMenuCommandInteraction();
		exports.DMChannel = requireDMChannel();
		exports.Embed = requireEmbed();
		exports.EmbedBuilder = requireEmbedBuilder();
		exports.Emoji = requireEmoji$2().Emoji;
		exports.Entitlement = requireEntitlement().Entitlement;
		exports.ForumChannel = requireForumChannel();
		exports.Guild = requireGuild().Guild;
		exports.GuildAuditLogs = requireGuildAuditLogs();
		exports.GuildAuditLogsEntry = requireGuildAuditLogsEntry();
		exports.GuildBan = requireGuildBan();
		exports.GuildChannel = requireGuildChannel();
		exports.GuildEmoji = requireGuildEmoji();
		exports.GuildMember = requireGuildMember().GuildMember;
		exports.GuildOnboarding = requireGuildOnboarding().GuildOnboarding;
		exports.GuildOnboardingPrompt = requireGuildOnboardingPrompt().GuildOnboardingPrompt;
		exports.GuildOnboardingPromptOption = requireGuildOnboardingPromptOption().GuildOnboardingPromptOption;
		exports.GuildPreview = requireGuildPreview();
		exports.GuildPreviewEmoji = requireGuildPreviewEmoji();
		exports.GuildScheduledEvent = requireGuildScheduledEvent$2().GuildScheduledEvent;
		exports.GuildTemplate = requireGuildTemplate();
		exports.Integration = requireIntegration();
		exports.IntegrationApplication = requireIntegrationApplication();
		exports.BaseInteraction = requireBaseInteraction();
		exports.InteractionCollector = requireInteractionCollector();
		exports.InteractionResponse = requireInteractionResponse();
		exports.InteractionWebhook = requireInteractionWebhook();
		exports.Invite = requireInvite$2();
		exports.InviteStageInstance = requireInviteStageInstance();
		exports.InviteGuild = requireInviteGuild();
		exports.Message = requireMessage().Message;
		exports.Attachment = requireAttachment$1();
		exports.AttachmentBuilder = requireAttachmentBuilder();
		exports.ModalBuilder = requireModalBuilder();
		exports.MediaChannel = requireMediaChannel();
		exports.MessageCollector = requireMessageCollector();
		exports.MessageComponentInteraction = requireMessageComponentInteraction();
		exports.MessageContextMenuCommandInteraction = requireMessageContextMenuCommandInteraction();
		exports.MessageMentions = requireMessageMentions();
		exports.MessagePayload = requireMessagePayload();
		exports.MessageReaction = requireMessageReaction();
		exports.ModalSubmitInteraction = requireModalSubmitInteraction();
		exports.ModalSubmitFields = requireModalSubmitFields();
		exports.NewsChannel = requireNewsChannel();
		exports.OAuth2Guild = requireOAuth2Guild();
		exports.PartialGroupDMChannel = requirePartialGroupDMChannel();
		exports.PermissionOverwrites = requirePermissionOverwrites();
		exports.Poll = requirePoll$2().Poll;
		exports.PollAnswer = requirePollAnswer().PollAnswer;
		exports.Presence = requirePresence().Presence;
		exports.ReactionCollector = requireReactionCollector();
		exports.ReactionEmoji = requireReactionEmoji();
		exports.RichPresenceAssets = requirePresence().RichPresenceAssets;
		exports.Role = requireRole$1().Role;
		exports.SelectMenuBuilder = requireSelectMenuBuilder();
		exports.ChannelSelectMenuBuilder = requireChannelSelectMenuBuilder();
		exports.MentionableSelectMenuBuilder = requireMentionableSelectMenuBuilder();
		exports.RoleSelectMenuBuilder = requireRoleSelectMenuBuilder();
		exports.StringSelectMenuBuilder = requireStringSelectMenuBuilder();
		exports.UserSelectMenuBuilder = requireUserSelectMenuBuilder();
		exports.BaseSelectMenuComponent = requireBaseSelectMenuComponent();
		exports.SelectMenuComponent = requireSelectMenuComponent();
		exports.ChannelSelectMenuComponent = requireChannelSelectMenuComponent();
		exports.MentionableSelectMenuComponent = requireMentionableSelectMenuComponent();
		exports.RoleSelectMenuComponent = requireRoleSelectMenuComponent();
		exports.StringSelectMenuComponent = requireStringSelectMenuComponent();
		exports.UserSelectMenuComponent = requireUserSelectMenuComponent();
		exports.SelectMenuInteraction = requireSelectMenuInteraction();
		exports.ChannelSelectMenuInteraction = requireChannelSelectMenuInteraction();
		exports.MentionableSelectMenuInteraction = requireMentionableSelectMenuInteraction();
		exports.MentionableSelectMenuInteraction = requireMentionableSelectMenuInteraction();
		exports.RoleSelectMenuInteraction = requireRoleSelectMenuInteraction();
		exports.StringSelectMenuInteraction = requireStringSelectMenuInteraction();
		exports.UserSelectMenuInteraction = requireUserSelectMenuInteraction();
		exports.SelectMenuOptionBuilder = requireSelectMenuOptionBuilder();
		exports.SKU = requireSKU().SKU;
		exports.StringSelectMenuOptionBuilder = requireStringSelectMenuOptionBuilder();
		exports.StageChannel = requireStageChannel();
		exports.StageInstance = requireStageInstance$2().StageInstance;
		exports.Sticker = requireSticker$2().Sticker;
		exports.StickerPack = requireStickerPack();
		exports.Team = requireTeam();
		exports.TeamMember = requireTeamMember();
		exports.TextChannel = requireTextChannel();
		exports.TextInputBuilder = requireTextInputBuilder();
		exports.TextInputComponent = requireTextInputComponent();
		exports.ThreadChannel = requireThreadChannel();
		exports.ThreadMember = requireThreadMember();
		exports.ThreadOnlyChannel = requireThreadOnlyChannel();
		exports.Typing = requireTyping();
		exports.User = requireUser$3();
		exports.UserContextMenuCommandInteraction = requireUserContextMenuCommandInteraction();
		exports.VoiceChannel = requireVoiceChannel();
		exports.VoiceRegion = requireVoiceRegion();
		exports.VoiceState = requireVoiceState();
		exports.Webhook = requireWebhook$2();
		exports.Widget = requireWidget();
		exports.WidgetMember = requireWidgetMember();
		exports.WelcomeChannel = requireWelcomeChannel();
		exports.WelcomeScreen = requireWelcomeScreen();

		// External
		__exportStar(requireV10$6(), exports);
		__exportStar(requireDist$1(), exports);
		__exportStar(requireDist$2(), exports);
		__exportStar(requireWeb(), exports);
		__exportStar(requireDist$7(), exports);
		__exportStar(requireDist(), exports); 
	} (src));
	return src;
}

var srcExports = requireSrc();

const configPath = path.resolve(__dirname, '../config.json');
const configJson = JSON.parse(fs.readFileSync(configPath, { encoding: 'utf8' }));
const configSchema = z.object({
    feeds: z.array(z.object({
        title: z.string().min(1),
        url: z.string().url(),
        idKey: z.string().min(1)
    })),
    interval: z.number().min(30).max(1440).default(600),
    token: z.string().length(72)
});
const config = configSchema.parse(configJson);
const parser = new Parser();
const tracker = new LastImportTracker();
const client = new srcExports.Client({ intents: [srcExports.GatewayIntentBits.Guilds] });
client.once(srcExports.Events.ClientReady, readyClient => {
    console.log(`Ready! Logged in as ${readyClient.user.tag}`);
});
client.login(config.token)
    .then(val => console.log(val))
    .catch(err => console.error(err));
function doIt() {
    Promise.all(config.feeds.map(async (feedConf) => {
        const feed = await parser.parseURL(feedConf.url);
        if (feed.items.length === 0) {
            return;
        }
        const lastImported = tracker.getLastImport(feedConf.url);
        let idx = 0;
        let item = feed.items[0];
        let iterate = lastImported !== null && idx < feed.items.length && item[feedConf.idKey] !== lastImported;
        console.log(item);
        while (iterate) {
            console.log(`[${feedConf.title}] ${item.title ?? ''}<br>${item.content ?? ''}<br>${item.link ?? ''}`);
            item = feed.items[++idx];
            iterate = idx < feed.items.length && item[feedConf.idKey] !== lastImported;
        }
        void tracker.setLastImport(feedConf.url, item[feedConf.idKey]);
    })).catch(err => {
        console.log(err);
    });
}
doIt();
setInterval(doIt, config.interval * 1000);
//# sourceMappingURL=app.js.map
